
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e4  0800f770  0800f770  0001f770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe54  0800fe54  00021734  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe54  0800fe54  0001fe54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe5c  0800fe5c  00021734  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe5c  0800fe5c  0001fe5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe60  0800fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001734  20000000  0800fe64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000158c  20001734  08011598  00021734  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cc0  08011598  00022cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021734  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004879f  00000000  00000000  00021764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071eb  00000000  00000000  00069f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ac8  00000000  00000000  000710f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017b0  00000000  00000000  00072bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bc45  00000000  00000000  00074368  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002be9f  00000000  00000000  0009ffad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cded7  00000000  00000000  000cbe4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00199d23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007948  00000000  00000000  00199da0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001734 	.word	0x20001734
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f754 	.word	0x0800f754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001738 	.word	0x20001738
 80001cc:	0800f754 	.word	0x0800f754

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:
static uint8_t name_start_transfer[] = "Start Transfer";
static uint8_t name_stop_transfer[] = "Stop Transfer";

static uint8_t name_flight_mode[] = "Flight Mode";

void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4ab4      	ldr	r2, [pc, #720]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle, 		sizeof(name_roll_angle)-1, 							TRUE);
 8000f56:	4bb4      	ldr	r3, [pc, #720]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000f64:	4ab0      	ldr	r2, [pc, #704]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4baf      	ldr	r3, [pc, #700]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4bae      	ldr	r3, [pc, #696]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f70:	4aae      	ldr	r2, [pc, #696]	; (800122c <DATA_LOGGER_Init+0x2e4>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4bac      	ldr	r3, [pc, #688]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4bab      	ldr	r3, [pc, #684]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle, 		sizeof(name_pitch_angle)-1, 						FALSE);
 8000f80:	4ba9      	ldr	r3, [pc, #676]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000f90:	4aa5      	ldr	r2, [pc, #660]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4ba4      	ldr	r3, [pc, #656]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4ba2      	ldr	r3, [pc, #648]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f9e:	4aa4      	ldr	r2, [pc, #656]	; (8001230 <DATA_LOGGER_Init+0x2e8>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b9f      	ldr	r3, [pc, #636]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c

	//Consignes angles
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_roll, 		sizeof(name_consigne_angle_roll)-1, 		TRUE);
 8000fb0:	4b9d      	ldr	r3, [pc, #628]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fb2:	220d      	movs	r2, #13
 8000fb4:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8000fc0:	4a99      	ldr	r2, [pc, #612]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc2:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000fc6:	4b98      	ldr	r3, [pc, #608]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc8:	2229      	movs	r2, #41	; 0x29
 8000fca:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8000fce:	4b96      	ldr	r3, [pc, #600]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd0:	4a98      	ldr	r2, [pc, #608]	; (8001234 <DATA_LOGGER_Init+0x2ec>)
 8000fd2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8000fd6:	4b94      	ldr	r3, [pc, #592]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8000fde:	4b92      	ldr	r3, [pc, #584]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_pitch, 		sizeof(name_consigne_angle_pitch)-1, 		FALSE);
 8000fe6:	4b90      	ldr	r3, [pc, #576]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe8:	220e      	movs	r2, #14
 8000fea:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8000fee:	4b8d      	ldr	r3, [pc, #564]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8000ff6:	4a8c      	ldr	r2, [pc, #560]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ff8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ffe:	2229      	movs	r2, #41	; 0x29
 8001000:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 8001004:	4b88      	ldr	r3, [pc, #544]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001006:	4a8c      	ldr	r2, [pc, #560]	; (8001238 <DATA_LOGGER_Init+0x2f0>)
 8001008:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800100c:	4b86      	ldr	r3, [pc, #536]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800100e:	220c      	movs	r2, #12
 8001010:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 8001014:	4b84      	ldr	r3, [pc, #528]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 		sizeof(name_roll_gyro)-1, 							TRUE);
 800101c:	4b82      	ldr	r3, [pc, #520]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800101e:	2202      	movs	r2, #2
 8001020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001024:	4b7f      	ldr	r3, [pc, #508]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	333c      	adds	r3, #60	; 0x3c
 800102a:	4a7f      	ldr	r2, [pc, #508]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800102c:	6353      	str	r3, [r2, #52]	; 0x34
 800102e:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001030:	2229      	movs	r2, #41	; 0x29
 8001032:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8001036:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001038:	4a80      	ldr	r2, [pc, #512]	; (800123c <DATA_LOGGER_Init+0x2f4>)
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c
 800103c:	4b7a      	ldr	r3, [pc, #488]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800103e:	2209      	movs	r2, #9
 8001040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001044:	4b78      	ldr	r3, [pc, #480]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001046:	2201      	movs	r2, #1
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 		sizeof(name_pitch_gyro)-1, 							FALSE);
 800104a:	4b77      	ldr	r3, [pc, #476]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800104c:	2203      	movs	r2, #3
 800104e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001052:	4b74      	ldr	r3, [pc, #464]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3338      	adds	r3, #56	; 0x38
 8001058:	4a73      	ldr	r2, [pc, #460]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b72      	ldr	r3, [pc, #456]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800105e:	2229      	movs	r2, #41	; 0x29
 8001060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001064:	4b70      	ldr	r3, [pc, #448]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001066:	4a76      	ldr	r2, [pc, #472]	; (8001240 <DATA_LOGGER_Init+0x2f8>)
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800106c:	220a      	movs	r2, #10
 800106e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001072:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001074:	2200      	movs	r2, #0
 8001076:	65da      	str	r2, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			sizeof(name_yaw_gyro)-1, 							FALSE);
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800107a:	2204      	movs	r2, #4
 800107c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3340      	adds	r3, #64	; 0x40
 8001086:	4a68      	ldr	r2, [pc, #416]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001088:	6653      	str	r3, [r2, #100]	; 0x64
 800108a:	4b67      	ldr	r3, [pc, #412]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800108c:	2229      	movs	r2, #41	; 0x29
 800108e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001092:	4b65      	ldr	r3, [pc, #404]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001094:	4a6b      	ldr	r2, [pc, #428]	; (8001244 <DATA_LOGGER_Init+0x2fc>)
 8001096:	66da      	str	r2, [r3, #108]	; 0x6c
 8001098:	4b63      	ldr	r3, [pc, #396]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800109a:	2208      	movs	r2, #8
 800109c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80010a0:	4b61      	ldr	r3, [pc, #388]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	675a      	str	r2, [r3, #116]	; 0x74

	//Consignes angles rates
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_roll_gyro, 		sizeof(name_target_roll_gyro)-1, 				TRUE);
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a8:	220a      	movs	r2, #10
 80010aa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 80010b6:	4a5c      	ldr	r2, [pc, #368]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010bc:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010be:	2229      	movs	r2, #41	; 0x29
 80010c0:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010c6:	4a60      	ldr	r2, [pc, #384]	; (8001248 <DATA_LOGGER_Init+0x300>)
 80010c8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80010cc:	4b56      	ldr	r3, [pc, #344]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ce:	220d      	movs	r2, #13
 80010d0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80010d4:	4b54      	ldr	r3, [pc, #336]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_pitch_gyro, 	sizeof(name_target_pitch_gyro)-1, 				FALSE);
 80010dc:	4b52      	ldr	r3, [pc, #328]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010de:	220b      	movs	r2, #11
 80010e0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ee:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80010f2:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010f4:	2229      	movs	r2, #41	; 0x29
 80010f6:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 80010fa:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010fc:	4a53      	ldr	r2, [pc, #332]	; (800124c <DATA_LOGGER_Init+0x304>)
 80010fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001102:	4b49      	ldr	r3, [pc, #292]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001104:	220e      	movs	r2, #14
 8001106:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 800110a:	4b47      	ldr	r3, [pc, #284]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800110c:	2200      	movs	r2, #0
 800110e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW], 		DATA_FORMAT_16B_FLOAT_1D, 	name_target_yaw_gyro, 		sizeof(name_target_yaw_gyro)-1, 				FALSE);
 8001112:	4b45      	ldr	r3, [pc, #276]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001114:	220c      	movs	r2, #12
 8001116:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001122:	4a41      	ldr	r2, [pc, #260]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001124:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800112a:	2229      	movs	r2, #41	; 0x29
 800112c:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 8001130:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001132:	4a47      	ldr	r2, [pc, #284]	; (8001250 <DATA_LOGGER_Init+0x308>)
 8001134:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800113a:	220c      	movs	r2, #12
 800113c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001142:	2200      	movs	r2, #0
 8001144:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 	sizeof(name_roll_gyro_raw)-1, 						FALSE);
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800114a:	2205      	movs	r2, #5
 800114c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	3304      	adds	r3, #4
 8001158:	4a33      	ldr	r2, [pc, #204]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800115a:	67d3      	str	r3, [r2, #124]	; 0x7c
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800115e:	2229      	movs	r2, #41	; 0x29
 8001160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001166:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <DATA_LOGGER_Init+0x30c>)
 8001168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800116e:	220d      	movs	r2, #13
 8001170:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,	sizeof(name_pitch_gyro_raw)-1, 						FALSE);
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800117e:	2206      	movs	r2, #6
 8001180:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800118a:	3304      	adds	r3, #4
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800118e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001194:	2229      	movs	r2, #41	; 0x29
 8001196:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <DATA_LOGGER_Init+0x310>)
 800119e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011a4:	220e      	movs	r2, #14
 80011a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 		sizeof(name_yaw_gyro_raw)-1, 						FALSE);
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c0:	3308      	adds	r3, #8
 80011c2:	4a19      	ldr	r2, [pc, #100]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011c4:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ca:	2229      	movs	r2, #41	; 0x29
 80011cc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <DATA_LOGGER_Init+0x314>)
 80011d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011da:	220c      	movs	r2, #12
 80011dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_config_request, 			sizeof(name_config_request)-1, 				FALSE);
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ea:	2210      	movs	r2, #16
 80011ec:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <DATA_LOGGER_Init+0x318>)
 8001204:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800120a:	220b      	movs	r2, #11
 800120c:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001212:	2200      	movs	r2, #0
 8001214:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	DEFINE_DATA(DATA_ID_DISABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_disable_asser_orientation, sizeof(name_disable_asser_orientation)-1, 	TRUE);
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800121a:	2211      	movs	r2, #17
 800121c:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8001220:	e020      	b.n	8001264 <DATA_LOGGER_Init+0x31c>
 8001222:	bf00      	nop
 8001224:	20001750 	.word	0x20001750
 8001228:	20001754 	.word	0x20001754
 800122c:	20000004 	.word	0x20000004
 8001230:	20000010 	.word	0x20000010
 8001234:	2000001c 	.word	0x2000001c
 8001238:	20000028 	.word	0x20000028
 800123c:	20000038 	.word	0x20000038
 8001240:	20000044 	.word	0x20000044
 8001244:	20000050 	.word	0x20000050
 8001248:	2000005c 	.word	0x2000005c
 800124c:	2000006c 	.word	0x2000006c
 8001250:	2000007c 	.word	0x2000007c
 8001254:	2000008c 	.word	0x2000008c
 8001258:	2000009c 	.word	0x2000009c
 800125c:	200000ac 	.word	0x200000ac
 8001260:	200000c8 	.word	0x200000c8
 8001264:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001266:	2200      	movs	r2, #0
 8001268:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
 800126c:	4b49      	ldr	r3, [pc, #292]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001276:	4a48      	ldr	r2, [pc, #288]	; (8001398 <DATA_LOGGER_Init+0x450>)
 8001278:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800127c:	4b45      	ldr	r3, [pc, #276]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800127e:	220d      	movs	r2, #13
 8001280:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001286:	2201      	movs	r2, #1
 8001288:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	DEFINE_DATA(DATA_ID_ENABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_enable_asser_orientation, 	sizeof(name_enable_asser_orientation)-1, 	TRUE);
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800128e:	2212      	movs	r2, #18
 8001290:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 8001294:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001296:	2200      	movs	r2, #0
 8001298:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012a6:	4a3d      	ldr	r2, [pc, #244]	; (800139c <DATA_LOGGER_Init+0x454>)
 80012a8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012ae:	220c      	movs	r2, #12
 80012b0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	DEFINE_DATA(DATA_ID_START_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		sizeof(name_start_transfer)-1, 					TRUE);
 80012bc:	4b35      	ldr	r3, [pc, #212]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012be:	2213      	movs	r2, #19
 80012c0:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80012d4:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <DATA_LOGGER_Init+0x458>)
 80012d8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012de:	220e      	movs	r2, #14
 80012e0:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 		sizeof(name_stop_transfer)-1, 					TRUE);
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012ee:	2214      	movs	r2, #20
 80012f0:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001306:	4a27      	ldr	r2, [pc, #156]	; (80013a4 <DATA_LOGGER_Init+0x45c>)
 8001308:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800130e:	220d      	movs	r2, #13
 8001310:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001316:	2201      	movs	r2, #1
 8001318:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

	//Propulsion
	DEFINE_DATA(DATA_ID_PROP_THRUST, (uint8_t*)&sys->propulsion.consigne[PROP_CONSIGNE_THRUST], 								DATA_FORMAT_16B_UINT16,  	name_prop_thrust, 		sizeof(name_prop_thrust)-1, 						FALSE);
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800131e:	220f      	movs	r2, #15
 8001320:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <DATA_LOGGER_Init+0x460>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f603 1312 	addw	r3, r3, #2322	; 0x912
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800132e:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001334:	222a      	movs	r2, #42	; 0x2a
 8001336:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <DATA_LOGGER_Init+0x464>)
 800133e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001344:	220b      	movs	r2, #11
 8001346:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800134c:	2200      	movs	r2, #0
 800134e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c


	//Others
	DEFINE_DATA(DATA_ID_FLIGHT_MODE, sys->soft.flight_mode, 																	DATA_FORMAT_8B, 			name_flight_mode, 		sizeof(name_flight_mode)-1, 						FALSE);
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001354:	2209      	movs	r2, #9
 8001356:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <DATA_LOGGER_Init+0x460>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8d3 3b14 	ldr.w	r3, [r3, #2836]	; 0xb14
 8001362:	4a0c      	ldr	r2, [pc, #48]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001364:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800136a:	2214      	movs	r2, #20
 800136c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <DATA_LOGGER_Init+0x468>)
 8001374:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 800137a:	220b      	movs	r2, #11
 800137c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <DATA_LOGGER_Init+0x44c>)
 8001382:	2200      	movs	r2, #0
 8001384:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec


}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20001754 	.word	0x20001754
 8001398:	200000e4 	.word	0x200000e4
 800139c:	200000d4 	.word	0x200000d4
 80013a0:	200000f4 	.word	0x200000f4
 80013a4:	20000104 	.word	0x20000104
 80013a8:	20001750 	.word	0x20001750
 80013ac:	200000bc 	.word	0x200000bc
 80013b0:	20000114 	.word	0x20000114

080013b4 <DATA_LOGGER_Start>:

void DATA_LOGGER_Start(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <DATA_LOGGER_Start+0x14>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20001950 	.word	0x20001950

080013cc <DATA_LOGGER_Stop>:

void DATA_LOGGER_Stop(){
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <DATA_LOGGER_Stop+0x14>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	20001954 	.word	0x20001954

080013e4 <DATA_LOGGER_Main>:

void DATA_LOGGER_Main(void){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 80013ea:	4b6b      	ldr	r3, [pc, #428]	; (8001598 <DATA_LOGGER_Main+0x1b4>)
 80013ec:	781a      	ldrb	r2, [r3, #0]
 80013ee:	4b6b      	ldr	r3, [pc, #428]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 8001400:	781a      	ldrb	r2, [r3, #0]
 8001402:	4b65      	ldr	r3, [pc, #404]	; (8001598 <DATA_LOGGER_Main+0x1b4>)
 8001404:	701a      	strb	r2, [r3, #0]

	switch(state){
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d036      	beq.n	800147c <DATA_LOGGER_Main+0x98>
 800140e:	2b02      	cmp	r3, #2
 8001410:	d07e      	beq.n	8001510 <DATA_LOGGER_Main+0x12c>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d000      	beq.n	8001418 <DATA_LOGGER_Main+0x34>
				}
			}
			break;
	}

}
 8001416:	e0ba      	b.n	800158e <DATA_LOGGER_Main+0x1aa>
			if(entrance){
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <DATA_LOGGER_Main+0x42>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 800141e:	4960      	ldr	r1, [pc, #384]	; (80015a0 <DATA_LOGGER_Main+0x1bc>)
 8001420:	200d      	movs	r0, #13
 8001422:	f002 f803 	bl	800342c <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 8001426:	495f      	ldr	r1, [pc, #380]	; (80015a4 <DATA_LOGGER_Main+0x1c0>)
 8001428:	2010      	movs	r0, #16
 800142a:	f000 fa4d 	bl	80018c8 <DATA_LOGGER_Get_Data_Config>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b5d      	ldr	r3, [pc, #372]	; (80015a8 <DATA_LOGGER_Main+0x1c4>)
 8001434:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <DATA_LOGGER_Main+0x1c4>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	4859      	ldr	r0, [pc, #356]	; (80015a4 <DATA_LOGGER_Main+0x1c0>)
 800143e:	f005 fa3d 	bl	80068bc <TELEMETRY_Send_Data>
			if(start_flag){
 8001442:	4b5a      	ldr	r3, [pc, #360]	; (80015ac <DATA_LOGGER_Main+0x1c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a0 	beq.w	800158c <DATA_LOGGER_Main+0x1a8>
				start_flag = FALSE;
 800144c:	4b57      	ldr	r3, [pc, #348]	; (80015ac <DATA_LOGGER_Main+0x1c8>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 8001452:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <DATA_LOGGER_Main+0x1cc>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 8001458:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <DATA_LOGGER_Main+0x1d0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d009      	beq.n	8001474 <DATA_LOGGER_Main+0x90>
					id_init_counter = 0;
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8001466:	4b55      	ldr	r3, [pc, #340]	; (80015bc <DATA_LOGGER_Main+0x1d8>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 800146c:	4b4b      	ldr	r3, [pc, #300]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
			break;
 8001472:	e08b      	b.n	800158c <DATA_LOGGER_Main+0x1a8>
					state = LOGGER_LOG;
 8001474:	4b49      	ldr	r3, [pc, #292]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 8001476:	2202      	movs	r2, #2
 8001478:	701a      	strb	r2, [r3, #0]
			break;
 800147a:	e087      	b.n	800158c <DATA_LOGGER_Main+0x1a8>
			if(entrance)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00a      	beq.n	8001498 <DATA_LOGGER_Main+0xb4>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 8001482:	494f      	ldr	r1, [pc, #316]	; (80015c0 <DATA_LOGGER_Main+0x1dc>)
 8001484:	200d      	movs	r0, #13
 8001486:	f001 ffd1 	bl	800342c <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 800148a:	e005      	b.n	8001498 <DATA_LOGGER_Main+0xb4>
				id_init_counter ++ ;
 800148c:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 8001496:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	4a49      	ldr	r2, [pc, #292]	; (80015c4 <DATA_LOGGER_Main+0x1e0>)
 80014a0:	460b      	mov	r3, r1
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	440b      	add	r3, r1
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	3314      	adds	r3, #20
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d103      	bne.n	80014ba <DATA_LOGGER_Main+0xd6>
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b14      	cmp	r3, #20
 80014b8:	d9e8      	bls.n	800148c <DATA_LOGGER_Main+0xa8>
			if(id_init_counter < DATA_ID_COUNT){
 80014ba:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b14      	cmp	r3, #20
 80014c0:	d817      	bhi.n	80014f2 <DATA_LOGGER_Main+0x10e>
				is_any_data_used = TRUE;
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <DATA_LOGGER_Main+0x1d8>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 80014c8:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	b2d1      	uxtb	r1, r2
 80014d0:	4a39      	ldr	r2, [pc, #228]	; (80015b8 <DATA_LOGGER_Main+0x1d4>)
 80014d2:	7011      	strb	r1, [r2, #0]
 80014d4:	4933      	ldr	r1, [pc, #204]	; (80015a4 <DATA_LOGGER_Main+0x1c0>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f9f6 	bl	80018c8 <DATA_LOGGER_Get_Data_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <DATA_LOGGER_Main+0x1c4>)
 80014e2:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <DATA_LOGGER_Main+0x1c4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	482e      	ldr	r0, [pc, #184]	; (80015a4 <DATA_LOGGER_Main+0x1c0>)
 80014ec:	f005 f9e6 	bl	80068bc <TELEMETRY_Send_Data>
			break;
 80014f0:	e04d      	b.n	800158e <DATA_LOGGER_Main+0x1aa>
				if(is_any_data_used)
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <DATA_LOGGER_Main+0x1d8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d006      	beq.n	8001508 <DATA_LOGGER_Main+0x124>
					config_not_sent = FALSE ;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <DATA_LOGGER_Main+0x1d0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
			break;
 8001506:	e042      	b.n	800158e <DATA_LOGGER_Main+0x1aa>
					state = LOGGER_IDDLE ;
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
			break;
 800150e:	e03e      	b.n	800158e <DATA_LOGGER_Main+0x1aa>
			if(entrance)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <DATA_LOGGER_Main+0x13c>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 8001516:	f242 7110 	movw	r1, #10000	; 0x2710
 800151a:	200d      	movs	r0, #13
 800151c:	f001 ff86 	bl	800342c <SCHEDULER_reschedule_task>
			if(stop_flag)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <DATA_LOGGER_Main+0x1cc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <DATA_LOGGER_Main+0x14a>
				state = LOGGER_IDDLE;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <DATA_LOGGER_Main+0x1b8>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	e027      	b.n	8001584 <DATA_LOGGER_Main+0x1a0>
				if(data_list[d].used && (data_list[d].format != DATA_FORMAT_0B_BUTTON))
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	4923      	ldr	r1, [pc, #140]	; (80015c4 <DATA_LOGGER_Main+0x1e0>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3314      	adds	r3, #20
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <DATA_LOGGER_Main+0x19a>
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	491d      	ldr	r1, [pc, #116]	; (80015c4 <DATA_LOGGER_Main+0x1e0>)
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	440b      	add	r3, r1
 8001558:	3309      	adds	r3, #9
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00e      	beq.n	800157e <DATA_LOGGER_Main+0x19a>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4910      	ldr	r1, [pc, #64]	; (80015a4 <DATA_LOGGER_Main+0x1c0>)
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f8c9 	bl	80016fc <DATA_LOGGER_Get_Data_Value>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <DATA_LOGGER_Main+0x1c4>)
 8001570:	701a      	strb	r2, [r3, #0]
					TELEMETRY_Send_Data(tmp, tmp_len);
 8001572:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <DATA_LOGGER_Main+0x1c4>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <DATA_LOGGER_Main+0x1c0>)
 800157a:	f005 f99f 	bl	80068bc <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	3301      	adds	r3, #1
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	2b14      	cmp	r3, #20
 8001588:	d9d4      	bls.n	8001534 <DATA_LOGGER_Main+0x150>
			break;
 800158a:	e000      	b.n	800158e <DATA_LOGGER_Main+0x1aa>
			break;
 800158c:	bf00      	nop
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000120 	.word	0x20000120
 800159c:	2000194c 	.word	0x2000194c
 80015a0:	001e8480 	.word	0x001e8480
 80015a4:	20001958 	.word	0x20001958
 80015a8:	2000196c 	.word	0x2000196c
 80015ac:	20001950 	.word	0x20001950
 80015b0:	20001954 	.word	0x20001954
 80015b4:	20000000 	.word	0x20000000
 80015b8:	2000196d 	.word	0x2000196d
 80015bc:	20001970 	.word	0x20001970
 80015c0:	0007a120 	.word	0x0007a120
 80015c4:	20001754 	.word	0x20001754

080015c8 <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	4946      	ldr	r1, [pc, #280]	; (80016f4 <DATA_LOGGER_Reception+0x12c>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	3309      	adds	r3, #9
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b29      	cmp	r3, #41	; 0x29
 80015ea:	d87d      	bhi.n	80016e8 <DATA_LOGGER_Reception+0x120>
 80015ec:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <DATA_LOGGER_Reception+0x2c>)
 80015ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f2:	bf00      	nop
 80015f4:	0800169d 	.word	0x0800169d
 80015f8:	080016e9 	.word	0x080016e9
 80015fc:	080016e9 	.word	0x080016e9
 8001600:	080016e9 	.word	0x080016e9
 8001604:	080016e9 	.word	0x080016e9
 8001608:	080016e9 	.word	0x080016e9
 800160c:	080016e9 	.word	0x080016e9
 8001610:	080016e9 	.word	0x080016e9
 8001614:	080016e9 	.word	0x080016e9
 8001618:	080016e9 	.word	0x080016e9
 800161c:	080016e9 	.word	0x080016e9
 8001620:	080016e9 	.word	0x080016e9
 8001624:	080016e9 	.word	0x080016e9
 8001628:	080016e9 	.word	0x080016e9
 800162c:	080016e9 	.word	0x080016e9
 8001630:	080016e9 	.word	0x080016e9
 8001634:	080016e9 	.word	0x080016e9
 8001638:	080016e9 	.word	0x080016e9
 800163c:	080016e9 	.word	0x080016e9
 8001640:	080016e9 	.word	0x080016e9
 8001644:	080016e9 	.word	0x080016e9
 8001648:	080016e9 	.word	0x080016e9
 800164c:	080016e9 	.word	0x080016e9
 8001650:	080016e9 	.word	0x080016e9
 8001654:	080016e9 	.word	0x080016e9
 8001658:	080016e9 	.word	0x080016e9
 800165c:	080016e9 	.word	0x080016e9
 8001660:	080016e9 	.word	0x080016e9
 8001664:	080016e9 	.word	0x080016e9
 8001668:	080016e9 	.word	0x080016e9
 800166c:	080016e9 	.word	0x080016e9
 8001670:	080016e9 	.word	0x080016e9
 8001674:	080016e9 	.word	0x080016e9
 8001678:	080016e9 	.word	0x080016e9
 800167c:	080016e9 	.word	0x080016e9
 8001680:	080016e9 	.word	0x080016e9
 8001684:	080016e9 	.word	0x080016e9
 8001688:	080016e9 	.word	0x080016e9
 800168c:	080016e9 	.word	0x080016e9
 8001690:	080016e9 	.word	0x080016e9
 8001694:	080016e9 	.word	0x080016e9
 8001698:	080016e9 	.word	0x080016e9
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	3b10      	subs	r3, #16
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d81f      	bhi.n	80016e4 <DATA_LOGGER_Reception+0x11c>
 80016a4:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <DATA_LOGGER_Reception+0xe4>)
 80016a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016aa:	bf00      	nop
 80016ac:	080016c1 	.word	0x080016c1
 80016b0:	080016d1 	.word	0x080016d1
 80016b4:	080016c9 	.word	0x080016c9
 80016b8:	080016d9 	.word	0x080016d9
 80016bc:	080016df 	.word	0x080016df
			{
				default:
					break;
				case DATA_ID_CONFIG_REQUEST:
					start_flag = TRUE;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <DATA_LOGGER_Reception+0x130>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
					break;
 80016c6:	e00e      	b.n	80016e6 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_ENABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f002 fcef 	bl	80040ac <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 80016ce:	e00a      	b.n	80016e6 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_DISABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f002 fceb 	bl	80040ac <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 80016d6:	e006      	b.n	80016e6 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_START_TRANSFER:
					DATA_LOGGER_Start();
 80016d8:	f7ff fe6c 	bl	80013b4 <DATA_LOGGER_Start>
					break;
 80016dc:	e003      	b.n	80016e6 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_STOP_TRANSFER:
					DATA_LOGGER_Stop();
 80016de:	f7ff fe75 	bl	80013cc <DATA_LOGGER_Stop>
					break;
 80016e2:	e000      	b.n	80016e6 <DATA_LOGGER_Reception+0x11e>
					break;
 80016e4:	bf00      	nop
			}
			break;
 80016e6:	e000      	b.n	80016ea <DATA_LOGGER_Reception+0x122>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 80016e8:	bf00      	nop

	}
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20001754 	.word	0x20001754
 80016f8:	20001950 	.word	0x20001950

080016fc <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	4969      	ldr	r1, [pc, #420]	; (80018c0 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	3309      	adds	r3, #9
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	3b14      	subs	r3, #20
 800172c:	2b17      	cmp	r3, #23
 800172e:	f200 80af 	bhi.w	8001890 <DATA_LOGGER_Get_Data_Value+0x194>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	08001799 	.word	0x08001799
 800173c:	08001891 	.word	0x08001891
 8001740:	08001891 	.word	0x08001891
 8001744:	080017b5 	.word	0x080017b5
 8001748:	08001891 	.word	0x08001891
 800174c:	08001891 	.word	0x08001891
 8001750:	08001891 	.word	0x08001891
 8001754:	08001891 	.word	0x08001891
 8001758:	08001891 	.word	0x08001891
 800175c:	08001891 	.word	0x08001891
 8001760:	08001891 	.word	0x08001891
 8001764:	08001891 	.word	0x08001891
 8001768:	08001891 	.word	0x08001891
 800176c:	08001891 	.word	0x08001891
 8001770:	08001891 	.word	0x08001891
 8001774:	08001891 	.word	0x08001891
 8001778:	08001891 	.word	0x08001891
 800177c:	08001891 	.word	0x08001891
 8001780:	08001891 	.word	0x08001891
 8001784:	08001891 	.word	0x08001891
 8001788:	08001891 	.word	0x08001891
 800178c:	080017e5 	.word	0x080017e5
 8001790:	0800182d 	.word	0x0800182d
 8001794:	0800185f 	.word	0x0800185f
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	4949      	ldr	r1, [pc, #292]	; (80018c0 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3304      	adds	r3, #4
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
			break;
 80017b2:	e06e      	b.n	8001892 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	4942      	ldr	r1, [pc, #264]	; (80018c0 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3304      	adds	r3, #4
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 80017ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d2:	edc7 7a01 	vstr	s15, [r7, #4]
 80017d6:	793b      	ldrb	r3, [r7, #4]
 80017d8:	b25a      	sxtb	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
			break;
 80017e2:	e056      	b.n	8001892 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 80017e4:	7bfa      	ldrb	r2, [r7, #15]
 80017e6:	4936      	ldr	r1, [pc, #216]	; (80018c0 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	3304      	adds	r3, #4
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 80017fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80017fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800180a:	ee17 3a90 	vmov	r3, s15
 800180e:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001810:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001814:	121b      	asrs	r3, r3, #8
 8001816:	b21a      	sxth	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3301      	adds	r3, #1
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3302      	adds	r3, #2
 8001824:	8afa      	ldrh	r2, [r7, #22]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e032      	b.n	8001892 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	4924      	ldr	r1, [pc, #144]	; (80018c0 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3304      	adds	r3, #4
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001842:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001846:	121b      	asrs	r3, r3, #8
 8001848:	b21a      	sxth	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3301      	adds	r3, #1
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	3302      	adds	r3, #2
 8001856:	8afa      	ldrh	r2, [r7, #22]
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]
			break;
 800185c:	e019      	b.n	8001892 <DATA_LOGGER_Get_Data_Value+0x196>
		case DATA_FORMAT_16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 800185e:	7bfa      	ldrb	r2, [r7, #15]
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	440b      	add	r3, r1
 800186c:	3304      	adds	r3, #4
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001874:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001878:	121b      	asrs	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	3301      	adds	r3, #1
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3302      	adds	r3, #2
 8001888:	8afa      	ldrh	r2, [r7, #22]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]
			break;
 800188e:	e000      	b.n	8001892 <DATA_LOGGER_Get_Data_Value+0x196>
		default:
			break;
 8001890:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	490a      	ldr	r1, [pc, #40]	; (80018c0 <DATA_LOGGER_Get_Data_Value+0x1c4>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3309      	adds	r3, #9
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <DATA_LOGGER_Get_Data_Value+0x1c8>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	b2db      	uxtb	r3, r3

}
 80018b2:	4618      	mov	r0, r3
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20001754 	.word	0x20001754
 80018c4:	cccccccd 	.word	0xcccccccd

080018c8 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	22ff      	movs	r2, #255	; 0xff
 80018d8:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	481f      	ldr	r0, [pc, #124]	; (8001960 <DATA_LOGGER_Get_Data_Config+0x98>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4403      	add	r3, r0
 80018ec:	3310      	adds	r3, #16
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	1c99      	adds	r1, r3, #2
 80018f8:	4819      	ldr	r0, [pc, #100]	; (8001960 <DATA_LOGGER_Get_Data_Config+0x98>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4403      	add	r3, r0
 8001904:	3309      	adds	r3, #9
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3303      	adds	r3, #3
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	1d18      	adds	r0, r3, #4
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	4911      	ldr	r1, [pc, #68]	; (8001960 <DATA_LOGGER_Get_Data_Config+0x98>)
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	330c      	adds	r3, #12
 8001926:	681c      	ldr	r4, [r3, #0]
 8001928:	79fa      	ldrb	r2, [r7, #7]
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <DATA_LOGGER_Get_Data_Config+0x98>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	3310      	adds	r3, #16
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	4621      	mov	r1, r4
 800193e:	f00a fbc5 	bl	800c0cc <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	4906      	ldr	r1, [pc, #24]	; (8001960 <DATA_LOGGER_Get_Data_Config+0x98>)
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3310      	adds	r3, #16
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	3304      	adds	r3, #4
 8001956:	b2db      	uxtb	r3, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	20001754 	.word	0x20001754

08001964 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	4613      	mov	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <DATA_LOGGER_Get_Data+0x24>)
 800197a:	4413      	add	r3, r2
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	20001754 	.word	0x20001754

0800198c <angle_180>:
static float absolu(float x);
//static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8001996:	edd7 7a01 	vldr	s15, [r7, #4]
 800199a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80019f0 <angle_180+0x64>
 800199e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	dd08      	ble.n	80019ba <angle_180+0x2e>
		x -= 360;
 80019a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ac:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80019f4 <angle_180+0x68>
 80019b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80019b8:	e010      	b.n	80019dc <angle_180+0x50>
	else if( x < -180)
 80019ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80019be:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80019f8 <angle_180+0x6c>
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d507      	bpl.n	80019dc <angle_180+0x50>
		x += 360 ;
 80019cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80019d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80019f4 <angle_180+0x68>
 80019d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019d8:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	ee07 3a90 	vmov	s15, r3
}
 80019e2:	eeb0 0a67 	vmov.f32	s0, s15
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	43340000 	.word	0x43340000
 80019f4:	43b40000 	.word	0x43b40000
 80019f8:	c3340000 	.word	0xc3340000

080019fc <absolu>:

static float absolu(float x){
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8001a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a12:	dd02      	ble.n	8001a1a <absolu+0x1e>
		return x ;
 8001a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a18:	e003      	b.n	8001a22 <absolu+0x26>
	else
		return -x ;
 8001a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1e:	eef1 7a67 	vneg.f32	s15, s15
}
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <ORIENTATION_Init>:
//static float acc_correction(float x){
//	x = ( x > 0) ? 180 - x : -180 -x ;
//	return x ;
//}

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f103 0208 	add.w	r2, r3, #8
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <ORIENTATION_Init+0x84>)
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e011      	b.n	8001aa2 <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	ddea      	ble.n	8001a7e <ORIENTATION_Init+0x4e>
	}

}
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	3f7f7cee 	.word	0x3f7f7cee

08001ab8 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	//Just to make the code lighter
	acc_t * acc = orientation->acc ;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_t * gyro = orientation->gyro ;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	623b      	str	r3, [r7, #32]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ACC_AXE_X] * acc->filtered[ACC_AXE_X] ;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001adc:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ACC_AXE_Y] * acc->filtered[ACC_AXE_Y] ;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af8:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ACC_AXE_Z] * acc->filtered[ACC_AXE_Z] ;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b14:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total = sqrtf(acc_total);
 8001b18:	ed97 0a07 	vldr	s0, [r7, #28]
 8001b1c:	f00c ffca 	bl	800eab4 <sqrtf>
 8001b20:	ed87 0a07 	vstr	s0, [r7, #28]

	if(acc_total)	//To avoid /0
 8001b24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b30:	d049      	beq.n	8001bc6 <ORIENTATION_Update+0x10e>
	{
		if(absolu(acc->filtered[ACC_AXE_X]) < acc_total)	//To avoid asin x with x greater than 1
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b38:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3c:	f7ff ff5e 	bl	80019fc <absolu>
 8001b40:	eeb0 7a40 	vmov.f32	s14, s0
 8001b44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b50:	dd15      	ble.n	8001b7e <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ACC_AXE_Y] = -asinf(acc->filtered[ACC_AXE_X] / acc_total) * 57.32f;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b58:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b60:	eeb0 0a66 	vmov.f32	s0, s13
 8001b64:	f00c ff4e 	bl	800ea04 <asinf>
 8001b68:	eef0 7a40 	vmov.f32	s15, s0
 8001b6c:	eef1 7a67 	vneg.f32	s15, s15
 8001b70:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001d58 <ORIENTATION_Update+0x2a0>
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ACC_AXE_Y]) < acc_total) 	//To avoid asin x with x greater than 1
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b84:	eeb0 0a67 	vmov.f32	s0, s15
 8001b88:	f7ff ff38 	bl	80019fc <absolu>
 8001b8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b90:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	dd13      	ble.n	8001bc6 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ACC_AXE_X] = asinf(acc->filtered[ACC_AXE_Y] / acc_total) * 57.32f;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ba4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ba8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001bac:	eeb0 0a66 	vmov.f32	s0, s13
 8001bb0:	f00c ff28 	bl	800ea04 <asinf>
 8001bb4:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb8:	eddf 7a67 	vldr	s15, [pc, #412]	; 8001d58 <ORIENTATION_Update+0x2a0>
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	edc3 7a04 	vstr	s15, [r3, #16]
//			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
//		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001bc6:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <ORIENTATION_Update+0x2a4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00f      	beq.n	8001bee <ORIENTATION_Update+0x136>
	{
		orientation->angular_position[GYRO_AXE_X] = orientation->acc_angles[ACC_AXE_X] ;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->acc_angles[ACC_AXE_Y] ;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	605a      	str	r2, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] = 0 ;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001be6:	4b5d      	ldr	r3, [pc, #372]	; (8001d5c <ORIENTATION_Update+0x2a4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];



	}
}
 8001bec:	e0af      	b.n	8001d4e <ORIENTATION_Update+0x296>
		float dx = gyro->filtered[GYRO_AXE_X] * orientation->periode ;
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfe:	edc7 7a06 	vstr	s15, [r7, #24]
		float dy = gyro->filtered[GYRO_AXE_Y] * orientation->periode ;
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c12:	edc7 7a05 	vstr	s15, [r7, #20]
		float dz = gyro->filtered[GYRO_AXE_Z] * orientation->periode ;
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	edc7 7a04 	vstr	s15, [r7, #16]
		orientation->angular_position[GYRO_AXE_X] += dx ;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] += dy ;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] += dz ;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	edc3 7a02 	vstr	s15, [r3, #8]
		float sin_dz = sinf(0.017f * dz);
 8001c66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c6a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001d60 <ORIENTATION_Update+0x2a8>
 8001c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c72:	eeb0 0a67 	vmov.f32	s0, s15
 8001c76:	f00c fe83 	bl	800e980 <sinf>
 8001c7a:	ed87 0a03 	vstr	s0, [r7, #12]
		orientation->angular_position[GYRO_AXE_X] += sin_dz * orientation->angular_position[GYRO_AXE_Y] ;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] -= sin_dz * orientation->angular_position[GYRO_AXE_X] ;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 6a00 	vldr	s13, [r3]
 8001ca8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = angle_180(orientation->angular_position[GYRO_AXE_X]);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc4:	f7ff fe62 	bl	800198c <angle_180>
 8001cc8:	eef0 7a40 	vmov.f32	s15, s0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = angle_180(orientation->angular_position[GYRO_AXE_Y]);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cdc:	f7ff fe56 	bl	800198c <angle_180>
 8001ce0:	eef0 7a40 	vmov.f32	s15, s0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = orientation->alpha * orientation->angular_position[GYRO_AXE_X] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_X];
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d36:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	426547ae 	.word	0x426547ae
 8001d5c:	20000124 	.word	0x20000124
 8001d60:	3c8b4396 	.word	0x3c8b4396

08001d64 <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f002 f99d 	bl	80040ac <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f002 faf2 	bl	800435c <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2228      	movs	r2, #40	; 0x28
 8001d7c:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 fb49 	bl	8002420 <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <arming_entrance+0x40>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <arming_entrance+0x44>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20001974 	.word	0x20001974
 8001da8:	20001975 	.word	0x20001975

08001dac <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]



	switch(state){
 8001db6:	4b7b      	ldr	r3, [pc, #492]	; (8001fa4 <arming_main+0x1f8>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d019      	beq.n	8001df2 <arming_main+0x46>
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d036      	beq.n	8001e30 <arming_main+0x84>
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d000      	beq.n	8001dc8 <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 8001dc6:	e0e8      	b.n	8001f9a <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001dce:	3304      	adds	r3, #4
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	f240 424b 	movw	r2, #1099	; 0x44b
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	f200 80dc 	bhi.w	8001f94 <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8001de4:	2000      	movs	r0, #0
 8001de6:	f000 fb1b 	bl	8002420 <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 8001dea:	4b6e      	ldr	r3, [pc, #440]	; (8001fa4 <arming_main+0x1f8>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
			break;
 8001df0:	e0d0      	b.n	8001f94 <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001df8:	3306      	adds	r3, #6
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	f240 729e 	movw	r2, #1950	; 0x79e
 8001e00:	4293      	cmp	r3, r2
 8001e02:	f240 80c9 	bls.w	8001f98 <arming_main+0x1ec>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	f240 424b 	movw	r2, #1099	; 0x44b
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f200 80bf 	bhi.w	8001f98 <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 fafc 	bl	8002420 <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 8001e28:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <arming_main+0x1f8>)
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	701a      	strb	r2, [r3, #0]
			break;
 8001e2e:	e0b3      	b.n	8001f98 <arming_main+0x1ec>
			switch(state_vroum_vroum){
 8001e30:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <arming_main+0x1fc>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	f200 80a3 	bhi.w	8001f80 <arming_main+0x1d4>
 8001e3a:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <arming_main+0x94>)
 8001e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e40:	08001e55 	.word	0x08001e55
 8001e44:	08001e79 	.word	0x08001e79
 8001e48:	08001f07 	.word	0x08001f07
 8001e4c:	08001f35 	.word	0x08001f35
 8001e50:	08001f63 	.word	0x08001f63
					next_change = time_us + PERIODE_1;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8001e5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e5e:	4a53      	ldr	r2, [pc, #332]	; (8001fac <arming_main+0x200>)
 8001e60:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	22c8      	movs	r2, #200	; 0xc8
 8001e66:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
					state_vroum_vroum++;
 8001e6a:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <arming_main+0x1fc>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <arming_main+0x1fc>)
 8001e74:	701a      	strb	r2, [r3, #0]
					break;
 8001e76:	e08c      	b.n	8001f92 <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <arming_main+0x200>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8001e8a:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9a:	4b45      	ldr	r3, [pc, #276]	; (8001fb0 <arming_main+0x204>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 8001ea0:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <arming_main+0x204>)
 8001ea2:	ed93 7a00 	vldr	s14, [r3]
 8001ea6:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001fb4 <arming_main+0x208>
 8001eaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eae:	4b40      	ldr	r3, [pc, #256]	; (8001fb0 <arming_main+0x204>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	; (8001fb0 <arming_main+0x204>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001fb8 <arming_main+0x20c>
 8001ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec6:	ee17 3a90 	vmov	r3, s15
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3328      	adds	r3, #40	; 0x28
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
					if(time_us > next_change){
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <arming_main+0x200>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d950      	bls.n	8001f84 <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8001ee8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <arming_main+0x200>)
 8001eee:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2228      	movs	r2, #40	; 0x28
 8001ef4:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <arming_main+0x1fc>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <arming_main+0x1fc>)
 8001f02:	701a      	strb	r2, [r3, #0]
					break;
 8001f04:	e03e      	b.n	8001f84 <arming_main+0x1d8>
					if(time_us > next_change){
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <arming_main+0x200>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d93b      	bls.n	8001f88 <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8001f16:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001f1a:	4a24      	ldr	r2, [pc, #144]	; (8001fac <arming_main+0x200>)
 8001f1c:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	22c8      	movs	r2, #200	; 0xc8
 8001f22:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001f26:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <arming_main+0x1fc>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <arming_main+0x1fc>)
 8001f30:	701a      	strb	r2, [r3, #0]
					break;
 8001f32:	e029      	b.n	8001f88 <arming_main+0x1dc>
					if(time_us > next_change){
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <arming_main+0x200>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d926      	bls.n	8001f8c <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8001f44:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001f48:	4a18      	ldr	r2, [pc, #96]	; (8001fac <arming_main+0x200>)
 8001f4a:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2228      	movs	r2, #40	; 0x28
 8001f50:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
						state_vroum_vroum++;
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <arming_main+0x1fc>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <arming_main+0x1fc>)
 8001f5e:	701a      	strb	r2, [r3, #0]
					break;
 8001f60:	e014      	b.n	8001f8c <arming_main+0x1e0>
					if(time_us > next_change){
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <arming_main+0x200>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d911      	bls.n	8001f90 <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 8001f6c:	2019      	movs	r0, #25
 8001f6e:	f000 fe51 	bl	8002c14 <EVENT_Set_flag>
						state_vroum_vroum++;
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <arming_main+0x1fc>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <arming_main+0x1fc>)
 8001f7c:	701a      	strb	r2, [r3, #0]
					break;
 8001f7e:	e007      	b.n	8001f90 <arming_main+0x1e4>
					break;
 8001f80:	bf00      	nop
 8001f82:	e00a      	b.n	8001f9a <arming_main+0x1ee>
					break;
 8001f84:	bf00      	nop
 8001f86:	e008      	b.n	8001f9a <arming_main+0x1ee>
					break;
 8001f88:	bf00      	nop
 8001f8a:	e006      	b.n	8001f9a <arming_main+0x1ee>
					break;
 8001f8c:	bf00      	nop
 8001f8e:	e004      	b.n	8001f9a <arming_main+0x1ee>
					break;
 8001f90:	bf00      	nop
			break;
 8001f92:	e002      	b.n	8001f9a <arming_main+0x1ee>
			break;
 8001f94:	bf00      	nop
 8001f96:	e000      	b.n	8001f9a <arming_main+0x1ee>
			break;
 8001f98:	bf00      	nop
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20001974 	.word	0x20001974
 8001fa8:	20001975 	.word	0x20001975
 8001fac:	20001978 	.word	0x20001978
 8001fb0:	2000197c 	.word	0x2000197c
 8001fb4:	48c35000 	.word	0x48c35000
 8001fb8:	43200000 	.word	0x43200000

08001fbc <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <FLIGHT_MODE_Init+0x24>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
	sys->soft.flight_mode = &current_flight_mode;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <FLIGHT_MODE_Init+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <FLIGHT_MODE_Init+0x28>)
 8001fd0:	f8c3 2b14 	str.w	r2, [r3, #2836]	; 0xb14
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	20001980 	.word	0x20001980
 8001fe4:	20001984 	.word	0x20001984

08001fe8 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	7013      	strb	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	20001985 	.word	0x20001985

08002008 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <FLIGHT_MODE_Main+0xa0>)
 8002012:	781a      	ldrb	r2, [r3, #0]
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <FLIGHT_MODE_Main+0xa4>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d02b      	beq.n	8002074 <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <FLIGHT_MODE_Main+0xa4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <FLIGHT_MODE_Main+0xa8>)
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	4413      	add	r3, r2
 8002026:	330c      	adds	r3, #12
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <FLIGHT_MODE_Main+0xa4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <FLIGHT_MODE_Main+0xa8>)
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	4413      	add	r3, r2
 8002038:	330c      	adds	r3, #12
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <FLIGHT_MODE_Main+0xac>)
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	4610      	mov	r0, r2
 8002042:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <FLIGHT_MODE_Main+0xa0>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <FLIGHT_MODE_Main+0xa8>)
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00a      	beq.n	800206c <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <FLIGHT_MODE_Main+0xa0>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <FLIGHT_MODE_Main+0xa8>)
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4413      	add	r3, r2
 8002060:	3304      	adds	r3, #4
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a13      	ldr	r2, [pc, #76]	; (80020b4 <FLIGHT_MODE_Main+0xac>)
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	4610      	mov	r0, r2
 800206a:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <FLIGHT_MODE_Main+0xa0>)
 800206e:	781a      	ldrb	r2, [r3, #0]
 8002070:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <FLIGHT_MODE_Main+0xa4>)
 8002072:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[next_flight_mode].function_main != NULL)
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <FLIGHT_MODE_Main+0xa0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4a0d      	ldr	r2, [pc, #52]	; (80020b0 <FLIGHT_MODE_Main+0xa8>)
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	4413      	add	r3, r2
 800207e:	3308      	adds	r3, #8
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <FLIGHT_MODE_Main+0xa4>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <FLIGHT_MODE_Main+0xa8>)
 800208c:	011b      	lsls	r3, r3, #4
 800208e:	4413      	add	r3, r2
 8002090:	3308      	adds	r3, #8
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <FLIGHT_MODE_Main+0xac>)
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4610      	mov	r0, r2
 800209c:	4798      	blx	r3

}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20001985 	.word	0x20001985
 80020ac:	20001984 	.word	0x20001984
 80020b0:	20000128 	.word	0x20000128
 80020b4:	20001980 	.word	0x20001980

080020b8 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 80020c0:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80020c4:	2200      	movs	r2, #0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2001      	movs	r0, #1
 80020ca:	f000 f9a9 	bl	8002420 <IHM_Set_Sequences>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]

	if(GYRO_calibrate(&sys->sensors.gyro, 1500)){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3330      	adds	r3, #48	; 0x30
 80020e4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80020e8:	4618      	mov	r0, r3
 80020ea:	f002 fa67 	bl	80045bc <GYRO_calibrate>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <gyro_acc_calibration_main+0x32>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 80020f4:	201c      	movs	r0, #28
 80020f6:	f000 fd8d 	bl	8002c14 <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80020fa:	2300      	movs	r3, #0
 80020fc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002100:	2100      	movs	r1, #0
 8002102:	2001      	movs	r0, #1
 8002104:	f000 f98c 	bl	8002420 <IHM_Set_Sequences>
	}

}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8002118:	2001      	movs	r0, #1
 800211a:	f001 ffc7 	bl	80040ac <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 800211e:	2001      	movs	r0, #1
 8002120:	f002 f91c 	bl	800435c <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 8002124:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002128:	2200      	movs	r2, #0
 800212a:	2100      	movs	r1, #0
 800212c:	2000      	movs	r0, #0
 800212e:	f000 f977 	bl	8002420 <IHM_Set_Sequences>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80021e8 <manual_accro_main+0xac>
 800215a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800215e:	eef1 7a67 	vneg.f32	s15, s15
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 8002168:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002172:	3302      	adds	r3, #2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021e8 <manual_accro_main+0xac>
 8002182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002186:	eef1 7a67 	vneg.f32	s15, s15
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8002190:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800219a:	3306      	adds	r3, #6
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80021e8 <manual_accro_main+0xac>
 80021aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021ae:	eef1 7a67 	vneg.f32	s15, s15
 80021b2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80021ec <manual_accro_main+0xb0>
 80021b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c0:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80021ca:	3304      	adds	r3, #4
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	44bb8000 	.word	0x44bb8000
 80021ec:	3f99999a 	.word	0x3f99999a

080021f0 <manual_angle_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_angle_entrance(system_t * sys){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 80021f8:	2002      	movs	r0, #2
 80021fa:	f001 ff57 	bl	80040ac <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 80021fe:	2001      	movs	r0, #1
 8002200:	f002 f8ac 	bl	800435c <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 8002204:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2000      	movs	r0, #0
 800220e:	f000 f907 	bl	8002420 <IHM_Set_Sequences>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <manual_angle_main>:
void manual_angle_main(system_t * sys, uint32_t time_us){
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = -((float)sys->radio.controller.channels[0]-1500)*0.1f;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	ee07 3a90 	vmov	s15, r3
 8002232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002236:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80022d8 <manual_angle_main+0xbc>
 800223a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800223e:	eef1 7a67 	vneg.f32	s15, s15
 8002242:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80022dc <manual_angle_main+0xc0>
 8002246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f503 632f 	add.w	r3, r3, #2800	; 0xaf0
 8002250:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = -((float)sys->radio.controller.channels[1]-1500)*0.1f;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800225a:	3302      	adds	r3, #2
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002266:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80022d8 <manual_angle_main+0xbc>
 800226a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800226e:	eef1 7a67 	vneg.f32	s15, s15
 8002272:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80022dc <manual_angle_main+0xc0>
 8002276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f603 23ec 	addw	r3, r3, #2796	; 0xaec
 8002280:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800228a:	3306      	adds	r3, #6
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80022d8 <manual_angle_main+0xbc>
 800229a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800229e:	eef1 7a67 	vneg.f32	s15, s15
 80022a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80022e0 <manual_angle_main+0xc4>
 80022a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b0:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80022ba:	3304      	adds	r3, #4
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f8a3 2b08 	strh.w	r2, [r3, #2824]	; 0xb08
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	44bb8000 	.word	0x44bb8000
 80022dc:	3dcccccd 	.word	0x3dcccccd
 80022e0:	3f99999a 	.word	0x3f99999a

080022e4 <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 80022ec:	2000      	movs	r0, #0
 80022ee:	f001 fedd 	bl	80040ac <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f002 f832 	bl	800435c <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 80022f8:	2300      	movs	r3, #0
 80022fa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80022fe:	2100      	movs	r1, #0
 8002300:	2000      	movs	r0, #0
 8002302:	f000 f88d 	bl	8002420 <IHM_Set_Sequences>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <IHM_Init+0x1c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20001988 	.word	0x20001988

08002344 <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6039      	str	r1, [r7, #0]
 800234c:	4611      	mov	r1, r2
 800234e:	461a      	mov	r2, r3
 8002350:	4603      	mov	r3, r0
 8002352:	71fb      	strb	r3, [r7, #7]
 8002354:	460b      	mov	r3, r1
 8002356:	80bb      	strh	r3, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <IHM_Led_Init+0x80>)
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	79fa      	ldrb	r2, [r7, #7]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	330c      	adds	r3, #12
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <IHM_Led_Init+0x80>)
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	79fa      	ldrb	r2, [r7, #7]
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3310      	adds	r3, #16
 8002384:	88ba      	ldrh	r2, [r7, #4]
 8002386:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <IHM_Led_Init+0x80>)
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	440b      	add	r3, r1
 8002398:	3314      	adds	r3, #20
 800239a:	79ba      	ldrb	r2, [r7, #6]
 800239c:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	e008      	b.n	80023b6 <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 80023a4:	7bf9      	ldrb	r1, [r7, #15]
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2200      	movs	r2, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f80c 	bl	80023c8 <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d9f3      	bls.n	80023a4 <IHM_Led_Init+0x60>
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20001988 	.word	0x20001988

080023c8 <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	460b      	mov	r3, r1
 80023d4:	71bb      	strb	r3, [r7, #6]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <IHM_Set_Sequence+0x54>)
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	79fa      	ldrb	r2, [r7, #7]
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3314      	adds	r3, #20
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d102      	bne.n	80023f8 <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 80023f2:	88bb      	ldrh	r3, [r7, #4]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <IHM_Set_Sequence+0x54>)
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	79fa      	ldrb	r2, [r7, #7]
 80023fe:	79b8      	ldrb	r0, [r7, #6]
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4403      	add	r3, r0
 800240a:	88ba      	ldrh	r2, [r7, #4]
 800240c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	20001988 	.word	0x20001988

08002420 <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 8002420:	b490      	push	{r4, r7}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4604      	mov	r4, r0
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4623      	mov	r3, r4
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	4603      	mov	r3, r0
 8002434:	80bb      	strh	r3, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	807b      	strh	r3, [r7, #2]
 800243a:	4613      	mov	r3, r2
 800243c:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <IHM_Set_Sequences+0x94>)
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	79fa      	ldrb	r2, [r7, #7]
 8002444:	4613      	mov	r3, r2
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	3314      	adds	r3, #20
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d108      	bne.n	8002468 <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 8002456:	88bb      	ldrh	r3, [r7, #4]
 8002458:	43db      	mvns	r3, r3
 800245a:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	43db      	mvns	r3, r3
 8002460:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 8002462:	883b      	ldrh	r3, [r7, #0]
 8002464:	43db      	mvns	r3, r3
 8002466:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <IHM_Set_Sequences+0x94>)
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	440b      	add	r3, r1
 8002478:	88ba      	ldrh	r2, [r7, #4]
 800247a:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <IHM_Set_Sequences+0x94>)
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	79fa      	ldrb	r2, [r7, #7]
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	3302      	adds	r3, #2
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <IHM_Set_Sequences+0x94>)
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	79fa      	ldrb	r2, [r7, #7]
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	3304      	adds	r3, #4
 80024a4:	883a      	ldrh	r2, [r7, #0]
 80024a6:	801a      	strh	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc90      	pop	{r4, r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20001988 	.word	0x20001988

080024b8 <IHM_Update>:

void IHM_Update(void){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 80024be:	4b8a      	ldr	r3, [pc, #552]	; (80026e8 <IHM_Update+0x230>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a88      	ldr	r2, [pc, #544]	; (80026e8 <IHM_Update+0x230>)
 80024c6:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 80024c8:	4b87      	ldr	r3, [pc, #540]	; (80026e8 <IHM_Update+0x230>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b85      	ldr	r3, [pc, #532]	; (80026ec <IHM_Update+0x234>)
 80024d6:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 80024d8:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <IHM_Update+0x238>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b83      	ldr	r3, [pc, #524]	; (80026ec <IHM_Update+0x234>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	460b      	mov	r3, r1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	440b      	add	r3, r1
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	3308      	adds	r3, #8
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b7d      	ldr	r3, [pc, #500]	; (80026e8 <IHM_Update+0x230>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d259      	bcs.n	80025ac <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 80024f8:	4b7d      	ldr	r3, [pc, #500]	; (80026f0 <IHM_Update+0x238>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <IHM_Update+0x234>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	4619      	mov	r1, r3
 8002502:	460b      	mov	r3, r1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	440b      	add	r3, r1
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	3312      	adds	r3, #18
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	4a77      	ldr	r2, [pc, #476]	; (80026f0 <IHM_Update+0x238>)
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4975      	ldr	r1, [pc, #468]	; (80026ec <IHM_Update+0x234>)
 8002516:	7809      	ldrb	r1, [r1, #0]
 8002518:	085b      	lsrs	r3, r3, #1
 800251a:	b298      	uxth	r0, r3
 800251c:	460b      	mov	r3, r1
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	440b      	add	r3, r1
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	3312      	adds	r3, #18
 8002528:	4602      	mov	r2, r0
 800252a:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 800252c:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <IHM_Update+0x238>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <IHM_Update+0x234>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	460b      	mov	r3, r1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	440b      	add	r3, r1
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	3308      	adds	r3, #8
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <IHM_Update+0x238>)
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	4b68      	ldr	r3, [pc, #416]	; (80026ec <IHM_Update+0x234>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	4603      	mov	r3, r0
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4403      	add	r3, r0
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	440b      	add	r3, r1
 8002558:	330c      	adds	r3, #12
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4964      	ldr	r1, [pc, #400]	; (80026f0 <IHM_Update+0x238>)
 800255e:	6809      	ldr	r1, [r1, #0]
 8002560:	4862      	ldr	r0, [pc, #392]	; (80026ec <IHM_Update+0x234>)
 8002562:	7800      	ldrb	r0, [r0, #0]
 8002564:	441a      	add	r2, r3
 8002566:	4603      	mov	r3, r0
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4403      	add	r3, r0
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	3308      	adds	r3, #8
 8002572:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 8002574:	4b5e      	ldr	r3, [pc, #376]	; (80026f0 <IHM_Update+0x238>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b5c      	ldr	r3, [pc, #368]	; (80026ec <IHM_Update+0x234>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	4619      	mov	r1, r3
 800257e:	460b      	mov	r3, r1
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	440b      	add	r3, r1
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	3312      	adds	r3, #18
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10d      	bne.n	80025ac <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 8002590:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <IHM_Update+0x238>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b55      	ldr	r3, [pc, #340]	; (80026ec <IHM_Update+0x234>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	460b      	mov	r3, r1
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	440b      	add	r3, r1
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	3312      	adds	r3, #18
 80025a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025aa:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 80025ac:	2300      	movs	r3, #0
 80025ae:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 80025b0:	2300      	movs	r3, #0
 80025b2:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <IHM_Update+0x238>)
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <IHM_Update+0x234>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	460b      	mov	r3, r1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	440b      	add	r3, r1
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	3312      	adds	r3, #18
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <IHM_Update+0x238>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b46      	ldr	r3, [pc, #280]	; (80026ec <IHM_Update+0x234>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4619      	mov	r1, r3
 80025d8:	460b      	mov	r3, r1
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	440b      	add	r3, r1
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	883b      	ldrh	r3, [r7, #0]
 80025e6:	4013      	ands	r3, r2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <IHM_Update+0x23c>)
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	4413      	add	r3, r2
 80025f6:	80fb      	strh	r3, [r7, #6]
 80025f8:	e004      	b.n	8002604 <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 80025fa:	4b3e      	ldr	r3, [pc, #248]	; (80026f4 <IHM_Update+0x23c>)
 80025fc:	881a      	ldrh	r2, [r3, #0]
 80025fe:	88bb      	ldrh	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 8002604:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <IHM_Update+0x238>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <IHM_Update+0x234>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	460b      	mov	r3, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	440b      	add	r3, r1
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	3302      	adds	r3, #2
 800261a:	881a      	ldrh	r2, [r3, #0]
 800261c:	883b      	ldrh	r3, [r7, #0]
 800261e:	4013      	ands	r3, r2
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <IHM_Update+0x23c>)
 8002628:	885a      	ldrh	r2, [r3, #2]
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4413      	add	r3, r2
 800262e:	80fb      	strh	r3, [r7, #6]
 8002630:	e004      	b.n	800263c <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <IHM_Update+0x23c>)
 8002634:	885a      	ldrh	r2, [r3, #2]
 8002636:	88bb      	ldrh	r3, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <IHM_Update+0x238>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <IHM_Update+0x234>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	460b      	mov	r3, r1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	440b      	add	r3, r1
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	3304      	adds	r3, #4
 8002652:	881a      	ldrh	r2, [r3, #0]
 8002654:	883b      	ldrh	r3, [r7, #0]
 8002656:	4013      	ands	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 800265e:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <IHM_Update+0x23c>)
 8002660:	889a      	ldrh	r2, [r3, #4]
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	4313      	orrs	r3, r2
 8002666:	80fb      	strh	r3, [r7, #6]
 8002668:	e004      	b.n	8002674 <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <IHM_Update+0x23c>)
 800266c:	889a      	ldrh	r2, [r3, #4]
 800266e:	88bb      	ldrh	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8002674:	2300      	movs	r3, #0
 8002676:	70fb      	strb	r3, [r7, #3]
 8002678:	e022      	b.n	80026c0 <IHM_Update+0x208>
		if(l == current_led)
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <IHM_Update+0x234>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	429a      	cmp	r2, r3
 8002682:	d10d      	bne.n	80026a0 <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <IHM_Update+0x238>)
 8002686:	6819      	ldr	r1, [r3, #0]
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	440b      	add	r3, r1
 8002694:	3310      	adds	r3, #16
 8002696:	881a      	ldrh	r2, [r3, #0]
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	4313      	orrs	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
 800269e:	e00c      	b.n	80026ba <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <IHM_Update+0x238>)
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	3310      	adds	r3, #16
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	3301      	adds	r3, #1
 80026be:	70fb      	strb	r3, [r7, #3]
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d9d9      	bls.n	800267a <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4619      	mov	r1, r3
 80026cc:	480a      	ldr	r0, [pc, #40]	; (80026f8 <IHM_Update+0x240>)
 80026ce:	f005 fc6b 	bl	8007fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 80026d2:	88bb      	ldrh	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	4619      	mov	r1, r3
 80026d8:	4807      	ldr	r0, [pc, #28]	; (80026f8 <IHM_Update+0x240>)
 80026da:	f005 fc65 	bl	8007fa8 <HAL_GPIO_WritePin>





}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000198c 	.word	0x2000198c
 80026ec:	20001990 	.word	0x20001990
 80026f0:	20001988 	.word	0x20001988
 80026f4:	20000178 	.word	0x20000178
 80026f8:	40020800 	.word	0x40020800

080026fc <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <DEBUG_init+0x14>)
 8002702:	f000 f809 	bl	8002718 <RetargetInit>
	printf("Debuger is init\n");
 8002706:	4803      	ldr	r0, [pc, #12]	; (8002714 <DEBUG_init+0x18>)
 8002708:	f00a f9dc 	bl	800cac4 <puts>
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20002c38 	.word	0x20002c38
 8002714:	0800f770 	.word	0x0800f770

08002718 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002720:	4a07      	ldr	r2, [pc, #28]	; (8002740 <RetargetInit+0x28>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <RetargetInit+0x2c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6898      	ldr	r0, [r3, #8]
 800272c:	2300      	movs	r3, #0
 800272e:	2202      	movs	r2, #2
 8002730:	2100      	movs	r1, #0
 8002732:	f00a f9cf 	bl	800cad4 <setvbuf>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20001a90 	.word	0x20001a90
 8002744:	20001560 	.word	0x20001560

08002748 <_isatty>:

int _isatty(int fd) {
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db04      	blt.n	8002760 <_isatty+0x18>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b02      	cmp	r3, #2
 800275a:	dc01      	bgt.n	8002760 <_isatty+0x18>
    return 1;
 800275c:	2301      	movs	r3, #1
 800275e:	e005      	b.n	800276c <_isatty+0x24>

  errno = EBADF;
 8002760:	f009 fc8a 	bl	800c078 <__errno>
 8002764:	4602      	mov	r2, r0
 8002766:	2309      	movs	r3, #9
 8002768:	6013      	str	r3, [r2, #0]
  return 0;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_write>:

int _write(int fd, char* ptr, int len) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d002      	beq.n	800278c <_write+0x18>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d110      	bne.n	80027ae <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <_write+0x50>)
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	b29a      	uxth	r2, r3
 8002794:	2364      	movs	r3, #100	; 0x64
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	f007 ff6d 	bl	800a676 <HAL_UART_Transmit>
 800279c:	4603      	mov	r3, r0
 800279e:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <_write+0x36>
      return len;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	e008      	b.n	80027bc <_write+0x48>
    else
      return EIO;
 80027aa:	2305      	movs	r3, #5
 80027ac:	e006      	b.n	80027bc <_write+0x48>
  }
  errno = EBADF;
 80027ae:	f009 fc63 	bl	800c078 <__errno>
 80027b2:	4602      	mov	r2, r0
 80027b4:	2309      	movs	r3, #9
 80027b6:	6013      	str	r3, [r2, #0]
  return -1;
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20001a90 	.word	0x20001a90

080027c8 <_close>:

int _close(int fd) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db04      	blt.n	80027e0 <_close+0x18>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	dc01      	bgt.n	80027e0 <_close+0x18>
    return 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	e006      	b.n	80027ee <_close+0x26>

  errno = EBADF;
 80027e0:	f009 fc4a 	bl	800c078 <__errno>
 80027e4:	4602      	mov	r2, r0
 80027e6:	2309      	movs	r3, #9
 80027e8:	6013      	str	r3, [r2, #0]
  return -1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002802:	f009 fc39 	bl	800c078 <__errno>
 8002806:	4602      	mov	r2, r0
 8002808:	2309      	movs	r3, #9
 800280a:	6013      	str	r3, [r2, #0]
  return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_read>:

int _read(int fd, char* ptr, int len) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d110      	bne.n	800284c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800282a:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <_read+0x4c>)
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	2201      	movs	r2, #1
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	f007 ffb7 	bl	800a7a8 <HAL_UART_Receive>
 800283a:	4603      	mov	r3, r0
 800283c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800283e:	7dfb      	ldrb	r3, [r7, #23]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <_read+0x30>
      return 1;
 8002844:	2301      	movs	r3, #1
 8002846:	e008      	b.n	800285a <_read+0x42>
    else
      return EIO;
 8002848:	2305      	movs	r3, #5
 800284a:	e006      	b.n	800285a <_read+0x42>
  }
  errno = EBADF;
 800284c:	f009 fc14 	bl	800c078 <__errno>
 8002850:	4602      	mov	r2, r0
 8002852:	2309      	movs	r3, #9
 8002854:	6013      	str	r3, [r2, #0]
  return -1;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20001a90 	.word	0x20001a90

08002868 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db08      	blt.n	800288a <_fstat+0x22>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	dc05      	bgt.n	800288a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002884:	605a      	str	r2, [r3, #4]
    return 0;
 8002886:	2300      	movs	r3, #0
 8002888:	e005      	b.n	8002896 <_fstat+0x2e>
  }

  errno = EBADF;
 800288a:	f009 fbf5 	bl	800c078 <__errno>
 800288e:	4602      	mov	r2, r0
 8002890:	2309      	movs	r3, #9
 8002892:	6013      	str	r3, [r2, #0]
  return 0;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <gyro_init_ok_func>:
		[EVENT_GYRO_ACC_CALIBRATION] = 	DEFINE_EVENT(gyro_acc_calibration, 	MASK_GYRO_ACC_COUNT, 			EVENT_ENABLED),


};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 80028aa:	2001      	movs	r0, #1
 80028ac:	f000 f9b2 	bl	8002c14 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 80028b0:	2101      	movs	r1, #1
 80028b2:	2004      	movs	r0, #4
 80028b4:	f000 fd8e 	bl	80033d4 <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <gyro_init_ok_func+0x28>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000180 	.word	0x20000180

080028cc <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 80028d6:	2005      	movs	r0, #5
 80028d8:	f000 f99c 	bl	8002c14 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 80028dc:	2101      	movs	r1, #1
 80028de:	2006      	movs	r0, #6
 80028e0:	f000 fd78 	bl	80033d4 <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <acc_init_ok_func+0x28>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 80028ec:	bf00      	nop
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000180 	.word	0x20000180

080028f8 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002902:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 8002904:	2108      	movs	r1, #8
 8002906:	4806      	ldr	r0, [pc, #24]	; (8002920 <ibus_data_rdy+0x28>)
 8002908:	f000 fa43 	bl	8002d92 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800290c:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 800290e:	2102      	movs	r1, #2
 8002910:	2009      	movs	r0, #9
 8002912:	f000 fd5f 	bl	80033d4 <SCHEDULER_task_set_mode>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20001994 	.word	0x20001994

08002924 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800292e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 8002930:	211d      	movs	r1, #29
 8002932:	480d      	ldr	r0, [pc, #52]	; (8002968 <on_the_ground+0x44>)
 8002934:	f000 fa2d 	bl	8002d92 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 8002938:	2119      	movs	r1, #25
 800293a:	480b      	ldr	r0, [pc, #44]	; (8002968 <on_the_ground+0x44>)
 800293c:	f000 fa29 	bl	8002d92 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 8002940:	211a      	movs	r1, #26
 8002942:	4809      	ldr	r0, [pc, #36]	; (8002968 <on_the_ground+0x44>)
 8002944:	f000 fa25 	bl	8002d92 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 8002948:	2118      	movs	r1, #24
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <on_the_ground+0x44>)
 800294c:	f000 fa21 	bl	8002d92 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002950:	211b      	movs	r1, #27
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <on_the_ground+0x44>)
 8002954:	f000 fa1d 	bl	8002d92 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002958:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff fb44 	bl	8001fe8 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20001994 	.word	0x20001994

0800296c <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002976:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8002978:	211d      	movs	r1, #29
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <manual_accro+0x2c>)
 800297c:	f000 f9d9 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8002980:	211e      	movs	r1, #30
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <manual_accro+0x2c>)
 8002984:	f000 f9d5 	bl	8002d32 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002988:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 800298a:	2001      	movs	r0, #1
 800298c:	f7ff fb2c 	bl	8001fe8 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20001994 	.word	0x20001994

0800299c <manual_angle>:

static void manual_angle(mask_def_ids_t mask_id){
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80029a6:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 80029a8:	211d      	movs	r1, #29
 80029aa:	4807      	ldr	r0, [pc, #28]	; (80029c8 <manual_angle+0x2c>)
 80029ac:	f000 f9c1 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 80029b0:	211e      	movs	r1, #30
 80029b2:	4805      	ldr	r0, [pc, #20]	; (80029c8 <manual_angle+0x2c>)
 80029b4:	f000 f9bd 	bl	8002d32 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80029b8:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ANGLE);
 80029ba:	2002      	movs	r0, #2
 80029bc:	f7ff fb14 	bl	8001fe8 <FLIGHT_MODE_Set_Flight_Mode>
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20001994 	.word	0x20001994

080029cc <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80029d6:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 80029d8:	2102      	movs	r1, #2
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <gyro_data_ready_func+0x28>)
 80029dc:	f000 f9d9 	bl	8002d92 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80029e0:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 80029e2:	2102      	movs	r1, #2
 80029e4:	2005      	movs	r0, #5
 80029e6:	f000 fcf5 	bl	80033d4 <SCHEDULER_task_set_mode>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20001994 	.word	0x20001994

080029f8 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a02:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 8002a04:	2106      	movs	r1, #6
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <acc_data_ready_func+0x28>)
 8002a08:	f000 f9c3 	bl	8002d92 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a0c:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 8002a0e:	2102      	movs	r1, #2
 8002a10:	2007      	movs	r0, #7
 8002a12:	f000 fcdf 	bl	80033d4 <SCHEDULER_task_set_mode>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20001994 	.word	0x20001994

08002a24 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 8002a30:	2107      	movs	r1, #7
 8002a32:	4808      	ldr	r0, [pc, #32]	; (8002a54 <orientation_update+0x30>)
 8002a34:	f000 f9ad 	bl	8002d92 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 8002a38:	2103      	movs	r1, #3
 8002a3a:	4806      	ldr	r0, [pc, #24]	; (8002a54 <orientation_update+0x30>)
 8002a3c:	f000 f9a9 	bl	8002d92 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a40:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 8002a42:	2102      	movs	r1, #2
 8002a44:	2008      	movs	r0, #8
 8002a46:	f000 fcc5 	bl	80033d4 <SCHEDULER_task_set_mode>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20001994 	.word	0x20001994

08002a58 <arming>:

static void arming(mask_def_ids_t mask_id){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a62:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 8002a64:	2118      	movs	r1, #24
 8002a66:	4807      	ldr	r0, [pc, #28]	; (8002a84 <arming+0x2c>)
 8002a68:	f000 f963 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 8002a6c:	211a      	movs	r1, #26
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <arming+0x2c>)
 8002a70:	f000 f95f 	bl	8002d32 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a74:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 8002a76:	2003      	movs	r0, #3
 8002a78:	f7ff fab6 	bl	8001fe8 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	20001994 	.word	0x20001994

08002a88 <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a92:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8002a94:	211b      	movs	r1, #27
 8002a96:	480b      	ldr	r0, [pc, #44]	; (8002ac4 <gyro_acc_calibration+0x3c>)
 8002a98:	f000 f94b 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 8002a9c:	211a      	movs	r1, #26
 8002a9e:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <gyro_acc_calibration+0x3c>)
 8002aa0:	f000 f947 	bl	8002d32 <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 8002aa4:	2113      	movs	r1, #19
 8002aa6:	4807      	ldr	r0, [pc, #28]	; (8002ac4 <gyro_acc_calibration+0x3c>)
 8002aa8:	f000 f973 	bl	8002d92 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 8002aac:	211c      	movs	r1, #28
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <gyro_acc_calibration+0x3c>)
 8002ab0:	f000 f96f 	bl	8002d92 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab4:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7ff fa96 	bl	8001fe8 <FLIGHT_MODE_Set_Flight_Mode>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20001994 	.word	0x20001994

08002ac8 <EVENT_init>:


void EVENT_init(system_t * sys_){
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <EVENT_init+0x24>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8002ad6:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <EVENT_init+0x28>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 8002adc:	4805      	ldr	r0, [pc, #20]	; (8002af4 <EVENT_init+0x2c>)
 8002ade:	f000 f987 	bl	8002df0 <mask_def_events_init>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200019a4 	.word	0x200019a4
 8002af0:	200019a0 	.word	0x200019a0
 8002af4:	20000180 	.word	0x20000180

08002af8 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	if(new_flag)
 8002b00:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <EVENT_process+0x110>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d07a      	beq.n	8002bfe <EVENT_process+0x106>
	{
		new_flag = FALSE;
 8002b08:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <EVENT_process+0x110>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8002b0e:	2306      	movs	r3, #6
 8002b10:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <EVENT_process+0x24>
			max = EVENT_COUNT ;
 8002b18:	230b      	movs	r3, #11
 8002b1a:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e069      	b.n	8002bf6 <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002b2a:	e049      	b.n	8002bc0 <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8002b2c:	4837      	ldr	r0, [pc, #220]	; (8002c0c <EVENT_process+0x114>)
 8002b2e:	4938      	ldr	r1, [pc, #224]	; (8002c10 <EVENT_process+0x118>)
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	00d2      	lsls	r2, r2, #3
 8002b36:	24b4      	movs	r4, #180	; 0xb4
 8002b38:	fb04 f303 	mul.w	r3, r4, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4419      	add	r1, r3
 8002b40:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002b44:	c903      	ldmia	r1, {r0, r1}
 8002b46:	f000 f895 	bl	8002c74 <Mask_test_and>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d034      	beq.n	8002bba <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8002b50:	482e      	ldr	r0, [pc, #184]	; (8002c0c <EVENT_process+0x114>)
 8002b52:	492f      	ldr	r1, [pc, #188]	; (8002c10 <EVENT_process+0x118>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1dda      	adds	r2, r3, #7
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	00d2      	lsls	r2, r2, #3
 8002b5c:	24b4      	movs	r4, #180	; 0xb4
 8002b5e:	fb04 f303 	mul.w	r3, r4, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	4419      	add	r1, r3
 8002b66:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002b6a:	c903      	ldmia	r1, {r0, r1}
 8002b6c:	f000 f8b5 	bl	8002cda <Mask_test_or>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d021      	beq.n	8002bba <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8002b76:	4825      	ldr	r0, [pc, #148]	; (8002c0c <EVENT_process+0x114>)
 8002b78:	4925      	ldr	r1, [pc, #148]	; (8002c10 <EVENT_process+0x118>)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f103 020e 	add.w	r2, r3, #14
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	00d2      	lsls	r2, r2, #3
 8002b84:	24b4      	movs	r4, #180	; 0xb4
 8002b86:	fb04 f303 	mul.w	r3, r4, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4419      	add	r1, r3
 8002b8e:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002b92:	c903      	ldmia	r1, {r0, r1}
 8002b94:	f000 f8a1 	bl	8002cda <Mask_test_or>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10d      	bne.n	8002bba <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 8002b9e:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <EVENT_process+0x118>)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	21b4      	movs	r1, #180	; 0xb4
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	33b0      	adds	r3, #176	; 0xb0
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <EVENT_process+0x118>)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	21b4      	movs	r1, #180	; 0xb4
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	33a8      	adds	r3, #168	; 0xa8
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d20c      	bcs.n	8002bf0 <EVENT_process+0xf8>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d109      	bne.n	8002bf0 <EVENT_process+0xf8>
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <EVENT_process+0x118>)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	21b4      	movs	r1, #180	; 0xb4
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	33ac      	adds	r3, #172	; 0xac
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d09d      	beq.n	8002b2c <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d391      	bcc.n	8002b22 <EVENT_process+0x2a>
			}

		}
	}
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop
 8002c08:	2000199c 	.word	0x2000199c
 8002c0c:	20001994 	.word	0x20001994
 8002c10:	20000180 	.word	0x20000180

08002c14 <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1e:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <EVENT_Set_flag+0x28>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <EVENT_Set_flag+0x2c>)
 8002c2c:	f000 f881 	bl	8002d32 <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c30:	b662      	cpsie	i
	__enable_irq();
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	2000199c 	.word	0x2000199c
 8002c40:	20001994 	.word	0x20001994

08002c44 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4e:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <EVENT_Clean_flag+0x28>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <EVENT_Clean_flag+0x2c>)
 8002c5c:	f000 f899 	bl	8002d92 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c60:	b662      	cpsie	i
	__enable_irq();
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2000199c 	.word	0x2000199c
 8002c70:	20001994 	.word	0x20001994

08002c74 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8002c74:	b490      	push	{r4, r7}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	f107 0408 	add.w	r4, r7, #8
 8002c7e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002c82:	4639      	mov	r1, r7
 8002c84:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e01c      	b.n	8002cc8 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f107 0218 	add.w	r2, r7, #24
 8002c96:	4413      	add	r3, r2
 8002c98:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f107 0118 	add.w	r1, r7, #24
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	f107 0118 	add.w	r1, r7, #24
 8002cb4:	440b      	add	r3, r1
 8002cb6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e006      	b.n	8002cd0 <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	dddf      	ble.n	8002c8e <Mask_test_and+0x1a>
		}
	return TRUE ;
 8002cce:	2301      	movs	r3, #1
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc90      	pop	{r4, r7}
 8002cd8:	4770      	bx	lr

08002cda <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8002cda:	b490      	push	{r4, r7}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	f107 0408 	add.w	r4, r7, #8
 8002ce4:	e884 0003 	stmia.w	r4, {r0, r1}
 8002ce8:	4639      	mov	r1, r7
 8002cea:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e015      	b.n	8002d20 <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	f107 0218 	add.w	r2, r7, #24
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	f107 0118 	add.w	r1, r7, #24
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e006      	b.n	8002d28 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	dde6      	ble.n	8002cf4 <Mask_test_or+0x1a>
	return FALSE ;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc90      	pop	{r4, r7}
 8002d30:	4770      	bx	lr

08002d32 <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8002d32:	b480      	push	{r7}
 8002d34:	b087      	sub	sp, #28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002d3e:	78fb      	ldrb	r3, [r7, #3]
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002d4e:	2201      	movs	r2, #1
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d101      	bne.n	8002d6e <MASK_set_flag+0x3c>
		return FALSE ;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e00b      	b.n	8002d86 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	ea42 0103 	orr.w	r1, r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8002d84:	2301      	movs	r3, #1
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8002d92:	b480      	push	{r7}
 8002d94:	b087      	sub	sp, #28
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8002dae:	2201      	movs	r2, #1
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10b      	bne.n	8002de2 <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad1      	subs	r1, r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <mask_def_events_init>:
static void mask_def_gyro_acc_calibration(Event_t * event);
static void mask_def_manual_angle(Event_t * event);



void mask_def_events_init(Event_t * event){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f83c 	bl	8002e7c <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f852 	bl	8002eae <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 f85f 	bl	8002ed4 <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	33b4      	adds	r3, #180	; 0xb4
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f873 	bl	8002f06 <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f89d 	bl	8002f66 <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f87a 	bl	8002f2c <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f8a4 	bl	8002f8c <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f8c9 	bl	8002fe2 <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 f8e9 	bl	800302e <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f902 	bl	800306c <mask_def_gyro_acc_calibration>
	mask_def_manual_angle(&event[EVENT_MANUAL_ANGLE]);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f8ca 	bl	8003008 <mask_def_manual_angle>

}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff52 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3338      	adds	r3, #56	; 0x38
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff4c 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3370      	adds	r3, #112	; 0x70
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff46 	bl	8002d32 <MASK_set_flag>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff39 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3338      	adds	r3, #56	; 0x38
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff33 	bl	8002d32 <MASK_set_flag>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2104      	movs	r1, #4
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff26 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3338      	adds	r3, #56	; 0x38
 8002eea:	2104      	movs	r1, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff20 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3370      	adds	r3, #112	; 0x70
 8002ef6:	2105      	movs	r1, #5
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff1a 	bl	8002d32 <MASK_set_flag>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2104      	movs	r1, #4
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff0d 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3338      	adds	r3, #56	; 0x38
 8002f1c:	2106      	movs	r1, #6
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff07 	bl	8002d32 <MASK_set_flag>
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2104      	movs	r1, #4
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fefa 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fef5 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2103      	movs	r1, #3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fef0 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3338      	adds	r3, #56	; 0x38
 8002f56:	2107      	movs	r1, #7
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff feea 	bl	8002d32 <MASK_set_flag>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------

static void mask_def_ibus_data_rdy(Event_t * event){
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2108      	movs	r1, #8
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fedd 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3338      	adds	r3, #56	; 0x38
 8002f7c:	2108      	movs	r1, #8
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fed7 	bl	8002d32 <MASK_set_flag>
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	211d      	movs	r1, #29
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff feca 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3338      	adds	r3, #56	; 0x38
 8002fa2:	2109      	movs	r1, #9
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fec4 	bl	8002d32 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3308      	adds	r3, #8
 8002fae:	2118      	movs	r1, #24
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff febe 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3340      	adds	r3, #64	; 0x40
 8002fba:	2109      	movs	r1, #9
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff feb8 	bl	8002d32 <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	211b      	movs	r1, #27
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff feb2 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3348      	adds	r3, #72	; 0x48
 8002fd2:	211c      	movs	r1, #28
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff feac 	bl	8002d32 <MASK_set_flag>


}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_CHAN_6_POS_1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	210b      	movs	r1, #11
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fe9f 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_ARMED);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3338      	adds	r3, #56	; 0x38
 8002ff8:	2119      	movs	r1, #25
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fe99 	bl	8002d32 <MASK_set_flag>
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <mask_def_manual_angle>:

static void mask_def_manual_angle(Event_t * event){
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_CHAN_6_POS_2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	210c      	movs	r1, #12
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fe8c 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_ARMED);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3338      	adds	r3, #56	; 0x38
 800301e:	2119      	movs	r1, #25
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fe86 	bl	8002d32 <MASK_set_flag>
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 800302e:	b580      	push	{r7, lr}
 8003030:	b082      	sub	sp, #8
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fe79 	bl	8002d32 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3338      	adds	r3, #56	; 0x38
 8003044:	210a      	movs	r1, #10
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fe73 	bl	8002d32 <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3370      	adds	r3, #112	; 0x70
 8003050:	211d      	movs	r1, #29
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fe6d 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3370      	adds	r3, #112	; 0x70
 800305c:	211a      	movs	r1, #26
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fe67 	bl	8002d32 <MASK_set_flag>


}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fe5a 	bl	8002d32 <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3338      	adds	r3, #56	; 0x38
 8003082:	2113      	movs	r1, #19
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fe54 	bl	8002d32 <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3370      	adds	r3, #112	; 0x70
 800308e:	211a      	movs	r1, #26
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fe4e 	bl	8002d32 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3370      	adds	r3, #112	; 0x70
 800309a:	211d      	movs	r1, #29
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fe48 	bl	8002d32 <MASK_set_flag>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 80030b4:	4a05      	ldr	r2, [pc, #20]	; (80030cc <SCHEDULER_init+0x20>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 80030ba:	f7ff fb1f 	bl	80026fc <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa8e 	bl	80035e0 <tasks_init>
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200019e8 	.word	0x200019e8

080030d0 <SCHEDULER_run>:

void SCHEDULER_run(void){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 80030d6:	f000 fbc9 	bl	800386c <TIME_us>
 80030da:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 80030dc:	f000 f886 	bl	80031ec <get_first_task>
 80030e0:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 80030e6:	e046      	b.n	8003176 <SCHEDULER_run+0xa6>

		switch(task->mode){
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	7a1b      	ldrb	r3, [r3, #8]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d020      	beq.n	8003132 <SCHEDULER_run+0x62>
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d002      	beq.n	80030fa <SCHEDULER_run+0x2a>
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d008      	beq.n	800310a <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 80030f8:	e027      	b.n	800314a <SCHEDULER_run+0x7a>
				current_time_us = task_process(task, current_time_us);
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	68b8      	ldr	r0, [r7, #8]
 80030fe:	f000 f89b 	bl	8003238 <task_process>
 8003102:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8003104:	2301      	movs	r3, #1
 8003106:	607b      	str	r3, [r7, #4]
				break;
 8003108:	e01f      	b.n	800314a <SCHEDULER_run+0x7a>
				if(current_time_us >= task->desired_next_start_us){
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d319      	bcc.n	8003148 <SCHEDULER_run+0x78>
					current_time_us = task_process(task, current_time_us);
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	68b8      	ldr	r0, [r7, #8]
 8003118:	f000 f88e 	bl	8003238 <task_process>
 800311c:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us += task->desired_period_us ;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	441a      	add	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 800312c:	2301      	movs	r3, #1
 800312e:	607b      	str	r3, [r7, #4]
				break;
 8003130:	e00a      	b.n	8003148 <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	68b8      	ldr	r0, [r7, #8]
 8003136:	f000 f87f 	bl	8003238 <task_process>
 800313a:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 800313c:	2301      	movs	r3, #1
 800313e:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	721a      	strb	r2, [r3, #8]
				break;
 8003146:	e000      	b.n	800314a <SCHEDULER_run+0x7a>
				break;
 8003148:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <SCHEDULER_run+0x9c>
 8003150:	2000      	movs	r0, #0
 8003152:	f000 fb77 	bl	8003844 <TASK_get_task>
 8003156:	4602      	mov	r2, r0
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4293      	cmp	r3, r2
 800315c:	d006      	beq.n	800316c <SCHEDULER_run+0x9c>
 800315e:	2001      	movs	r0, #1
 8003160:	f000 fb70 	bl	8003844 <TASK_get_task>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4293      	cmp	r3, r2
 800316a:	d10e      	bne.n	800318a <SCHEDULER_run+0xba>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 800316c:	2300      	movs	r3, #0
 800316e:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 8003170:	f000 f84c 	bl	800320c <get_next_task>
 8003174:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <SCHEDULER_run+0xc4>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <SCHEDULER_run+0xc8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d204      	bcs.n	800318c <SCHEDULER_run+0xbc>
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1af      	bne.n	80030e8 <SCHEDULER_run+0x18>
	}
}
 8003188:	e000      	b.n	800318c <SCHEDULER_run+0xbc>
			break;
 800318a:	bf00      	nop
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200019e4 	.word	0x200019e4
 8003198:	200019e0 	.word	0x200019e0

0800319c <SCHEDULER_task>:

void SCHEDULER_task(void){
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	71fb      	strb	r3, [r7, #7]
 80031a6:	e00b      	b.n	80031c0 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 80031a8:	79fa      	ldrb	r2, [r7, #7]
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	490c      	ldr	r1, [pc, #48]	; (80031e0 <SCHEDULER_task+0x44>)
 80031ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031b2:	490c      	ldr	r1, [pc, #48]	; (80031e4 <SCHEDULER_task+0x48>)
 80031b4:	5c8a      	ldrb	r2, [r1, r2]
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	3301      	adds	r3, #1
 80031be:	71fb      	strb	r3, [r7, #7]
 80031c0:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <SCHEDULER_task+0x4c>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	79fa      	ldrb	r2, [r7, #7]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3ed      	bcc.n	80031a8 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <SCHEDULER_task+0x4c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	200019ec 	.word	0x200019ec
 80031e4:	20001a24 	.word	0x20001a24
 80031e8:	20001a32 	.word	0x20001a32

080031ec <get_first_task>:


	return load_pourcentage ;
}

static task_t * get_first_task(void){
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <get_first_task+0x18>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <get_first_task+0x1c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	200019e4 	.word	0x200019e4
 8003208:	200019a8 	.word	0x200019a8

0800320c <get_next_task>:

static task_t * get_next_task(void){
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <get_next_task+0x24>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	4a06      	ldr	r2, [pc, #24]	; (8003230 <get_next_task+0x24>)
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <get_next_task+0x24>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <get_next_task+0x28>)
 8003220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	200019e4 	.word	0x200019e4
 8003234:	200019a8 	.word	0x200019a8

08003238 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <task_process+0x16>
		return current_time_us ;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	e09d      	b.n	800338a <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	3308      	adds	r3, #8
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	1ad2      	subs	r2, r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69da      	ldr	r2, [r3, #28]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	1a8a      	subs	r2, r1, r2
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	3308      	adds	r3, #8
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	3308      	adds	r3, #8
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	4a3d      	ldr	r2, [pc, #244]	; (8003394 <task_process+0x15c>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	091a      	lsrs	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	4798      	blx	r3
	current_time_us = TIME_us();
 80032b8:	f000 fad8 	bl	800386c <TIME_us>
 80032bc:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	311e      	adds	r1, #30
 80032ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80032d2:	1ad2      	subs	r2, r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	1ac9      	subs	r1, r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	321e      	adds	r2, #30
 80032ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	311e      	adds	r1, #30
 80032fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003302:	429a      	cmp	r2, r3
 8003304:	bf38      	it	cc
 8003306:	461a      	movcc	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	311e      	adds	r1, #30
 800331c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003320:	441a      	add	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800332e:	4a19      	ldr	r2, [pc, #100]	; (8003394 <task_process+0x15c>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	091a      	lsrs	r2, r3, #4
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	321e      	adds	r2, #30
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334c:	d90c      	bls.n	8003368 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	f103 011e 	add.w	r1, r3, #30
 800335a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800335e:	1c51      	adds	r1, r2, #1
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	331e      	adds	r3, #30
 8003364:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800337c:	2b14      	cmp	r3, #20
 800337e:	d103      	bne.n	8003388 <task_process+0x150>
		task->average_index = 0 ;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8003388:	683b      	ldr	r3, [r7, #0]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	cccccccd 	.word	0xcccccccd

08003398 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
	if(enable)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fa49 	bl	8003844 <TASK_get_task>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f873 	bl	80034a0 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 80033ba:	e007      	b.n	80033cc <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fa40 	bl	8003844 <TASK_get_task>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f8c8 	bl	800355c <queu_remove>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	460a      	mov	r2, r1
 80033de:	71fb      	strb	r3, [r7, #7]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80033e4:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <SCHEDULER_task_set_mode+0x4c>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461c      	mov	r4, r3
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fa27 	bl	8003844 <TASK_get_task>
 80033f6:	4602      	mov	r2, r0
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <SCHEDULER_task_set_mode+0x50>)
 80033fa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <SCHEDULER_task_set_mode+0x4c>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	1c5a      	adds	r2, r3, #1
 8003406:	b2d1      	uxtb	r1, r2
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <SCHEDULER_task_set_mode+0x4c>)
 800340a:	7011      	strb	r1, [r2, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	4a06      	ldr	r2, [pc, #24]	; (8003428 <SCHEDULER_task_set_mode+0x54>)
 8003410:	79bb      	ldrb	r3, [r7, #6]
 8003412:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8003414:	b662      	cpsie	i
	__enable_irq();
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bd90      	pop	{r4, r7, pc}
 800341e:	bf00      	nop
 8003420:	20001a32 	.word	0x20001a32
 8003424:	200019ec 	.word	0x200019ec
 8003428:	20001a24 	.word	0x20001a24

0800342c <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	71fb      	strb	r3, [r7, #7]
	TASK_get_task(id)->desired_period_us = new_period_us ;
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fa02 	bl	8003844 <TASK_get_task>
 8003440:	4602      	mov	r2, r0
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6153      	str	r3, [r2, #20]
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <queu_contains+0x12>
		return FALSE ;
 800345e:	2300      	movs	r3, #0
 8003460:	e014      	b.n	800348c <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	e00b      	b.n	8003480 <queu_contains+0x30>
		if(task_queu[t] == task)
 8003468:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <queu_contains+0x48>)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d101      	bne.n	800347a <queu_contains+0x2a>
			return TRUE ;
 8003476:	2301      	movs	r3, #1
 8003478:	e008      	b.n	800348c <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3301      	adds	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <queu_contains+0x4c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	429a      	cmp	r2, r3
 8003488:	d3ee      	bcc.n	8003468 <queu_contains+0x18>
	return FALSE ;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	200019a8 	.word	0x200019a8
 800349c:	200019e0 	.word	0x200019e0

080034a0 <queu_add>:

static bool_e queu_add(task_t * task){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ffd1 	bl	8003450 <queu_contains>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <queu_add+0x22>
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <queu_add+0xb4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b0d      	cmp	r3, #13
 80034ba:	d802      	bhi.n	80034c2 <queu_add+0x22>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <queu_add+0x26>
		return FALSE ;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e041      	b.n	800354a <queu_add+0xaa>


	uint32_t t = 0 ;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80034ca:	e03a      	b.n	8003542 <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 80034cc:	4a22      	ldr	r2, [pc, #136]	; (8003558 <queu_add+0xb8>)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <queu_add+0x50>
		{
			task_queu[t] = task ;
 80034d8:	491f      	ldr	r1, [pc, #124]	; (8003558 <queu_add+0xb8>)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <queu_add+0xb4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <queu_add+0xb4>)
 80034ea:	6013      	str	r3, [r2, #0]
			return TRUE;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e02c      	b.n	800354a <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	781a      	ldrb	r2, [r3, #0]
 80034f4:	4918      	ldr	r1, [pc, #96]	; (8003558 <queu_add+0xb8>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d91c      	bls.n	800353c <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3301      	adds	r3, #1
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4a13      	ldr	r2, [pc, #76]	; (8003558 <queu_add+0xb8>)
 800350a:	1898      	adds	r0, r3, r2
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <queu_add+0xb8>)
 8003512:	1899      	adds	r1, r3, r2
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <queu_add+0xb4>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	461a      	mov	r2, r3
 8003520:	f008 fddf 	bl	800c0e2 <memmove>
			task_queu[t] = task ;
 8003524:	490c      	ldr	r1, [pc, #48]	; (8003558 <queu_add+0xb8>)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <queu_add+0xb4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3301      	adds	r3, #1
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <queu_add+0xb4>)
 8003536:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8003538:	2301      	movs	r3, #1
 800353a:	e006      	b.n	800354a <queu_add+0xaa>
		}
		t++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b0d      	cmp	r3, #13
 8003546:	d9c1      	bls.n	80034cc <queu_add+0x2c>
	}
	return FALSE ;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200019e0 	.word	0x200019e0
 8003558:	200019a8 	.word	0x200019a8

0800355c <queu_remove>:

static bool_e queu_remove(task_t * task){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff73 	bl	8003450 <queu_contains>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <queu_remove+0x1a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <queu_remove+0x1e>
		return FALSE ;
 8003576:	2300      	movs	r3, #0
 8003578:	e02a      	b.n	80035d0 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e021      	b.n	80035c4 <queu_remove+0x68>
		if(task == task_queu[t]){
 8003580:	4a15      	ldr	r2, [pc, #84]	; (80035d8 <queu_remove+0x7c>)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d117      	bne.n	80035be <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <queu_remove+0x7c>)
 8003594:	1898      	adds	r0, r3, r2
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <queu_remove+0x7c>)
 800359e:	1899      	adds	r1, r3, r2
 80035a0:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <queu_remove+0x80>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	461a      	mov	r2, r3
 80035ac:	f008 fd99 	bl	800c0e2 <memmove>
			task_queu_size -- ;
 80035b0:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <queu_remove+0x80>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <queu_remove+0x80>)
 80035b8:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e008      	b.n	80035d0 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <queu_remove+0x80>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d3d8      	bcc.n	8003580 <queu_remove+0x24>
		}
	}
	return FALSE ;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	200019a8 	.word	0x200019a8
 80035dc:	200019e0 	.word	0x200019e0

080035e0 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 80035e8:	4a1b      	ldr	r2, [pc, #108]	; (8003658 <tasks_init+0x78>)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 80035ee:	2101      	movs	r1, #1
 80035f0:	2000      	movs	r0, #0
 80035f2:	f7ff fed1 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 80035f6:	2101      	movs	r1, #1
 80035f8:	2001      	movs	r0, #1
 80035fa:	f7ff fecd 	bl	8003398 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 80035fe:	2101      	movs	r1, #1
 8003600:	2003      	movs	r0, #3
 8003602:	f7ff fec9 	bl	8003398 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 8003606:	2101      	movs	r1, #1
 8003608:	2008      	movs	r0, #8
 800360a:	f7ff fec5 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 800360e:	2101      	movs	r1, #1
 8003610:	2005      	movs	r0, #5
 8003612:	f7ff fec1 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 8003616:	2101      	movs	r1, #1
 8003618:	2004      	movs	r0, #4
 800361a:	f7ff febd 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 800361e:	2101      	movs	r1, #1
 8003620:	2007      	movs	r0, #7
 8003622:	f7ff feb9 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 8003626:	2101      	movs	r1, #1
 8003628:	2009      	movs	r0, #9
 800362a:	f7ff feb5 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 800362e:	2101      	movs	r1, #1
 8003630:	200a      	movs	r0, #10
 8003632:	f7ff feb1 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 8003636:	2101      	movs	r1, #1
 8003638:	200b      	movs	r0, #11
 800363a:	f7ff fead 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 800363e:	2101      	movs	r1, #1
 8003640:	200c      	movs	r0, #12
 8003642:	f7ff fea9 	bl	8003398 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 8003646:	2101      	movs	r1, #1
 8003648:	200d      	movs	r0, #13
 800364a:	f7ff fea5 	bl	8003398 <SCHEDULER_enable_task>

}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20001a34 	.word	0x20001a34

0800365c <process_print_f>:

void process_print_f(uint32_t current_time_us){
 800365c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003660:	b088      	sub	sp, #32
 8003662:	af04      	add	r7, sp, #16
 8003664:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <process_print_f+0x5c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800366e:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc ff67 	bl	8000548 <__aeabi_f2d>
 800367a:	4680      	mov	r8, r0
 800367c:	4689      	mov	r9, r1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fc ff5f 	bl	8000548 <__aeabi_f2d>
 800368a:	4604      	mov	r4, r0
 800368c:	460d      	mov	r5, r1
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fc ff58 	bl	8000548 <__aeabi_f2d>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036a0:	e9cd 4500 	strd	r4, r5, [sp]
 80036a4:	4642      	mov	r2, r8
 80036a6:	464b      	mov	r3, r9
 80036a8:	4804      	ldr	r0, [pc, #16]	; (80036bc <process_print_f+0x60>)
 80036aa:	f009 f997 	bl	800c9dc <iprintf>
}
 80036ae:	bf00      	nop
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036b8:	20001a34 	.word	0x20001a34
 80036bc:	0800f780 	.word	0x0800f780

080036c0 <process_led>:


void process_led(uint32_t current_time_us){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
//	uint8_t data[2];
//	uint8_t len = DATA_LOGGER_Get_Data(DATA_ID_ROLL_GYRO, data);
//	TELEMETRY_Send_Data(&sys->radio.telemetry, data, len);
	IHM_Update();
 80036c8:	f7fe fef6 	bl	80024b8 <IHM_Update>
}
 80036cc:	bf00      	nop
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 80036dc:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <process_gyro_update+0x24>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <process_gyro_update+0x28>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3330      	adds	r3, #48	; 0x30
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fff5 	bl	80046d8 <GYRO_ACC_update_dma>

}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20001a38 	.word	0x20001a38
 80036fc:	20001a34 	.word	0x20001a34

08003700 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 8003708:	4a06      	ldr	r2, [pc, #24]	; (8003724 <process_gyro_filter+0x24>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 800370e:	4b06      	ldr	r3, [pc, #24]	; (8003728 <process_gyro_filter+0x28>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3330      	adds	r3, #48	; 0x30
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fffb 	bl	8004710 <GYRO_process_lpf>

}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20001a3c 	.word	0x20001a3c
 8003728:	20001a34 	.word	0x20001a34

0800372c <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <process_acc_update+0x1c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	33a4      	adds	r3, #164	; 0xa4
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fe84 	bl	8004448 <ACC_update>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20001a34 	.word	0x20001a34

0800374c <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <process_acc_filter+0x1c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	33a4      	adds	r3, #164	; 0xa4
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fe92 	bl	8004484 <ACC_process_lpf>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20001a34 	.word	0x20001a34

0800376c <process_event_main>:

void process_event_main(uint32_t current_time_us){
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 8003774:	2000      	movs	r0, #0
 8003776:	f7ff f9bf 	bl	8002af8 <EVENT_process>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

	ORIENTATION_Update(&sys->orientation);
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <process_orientation_update+0x2c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe f98f 	bl	8001ab8 <ORIENTATION_Update>

	REGULATION_POSITION_Process();
 800379a:	f000 fdf1 	bl	8004380 <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 800379e:	f000 fc97 	bl	80040d0 <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 80037a2:	f000 f8c1 	bl	8003928 <PROPULSION_Update_Motors>
	//delta_1 = (TIME_us() - start_time_gyro) ;
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20001a34 	.word	0x20001a34

080037b4 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 80037bc:	f7ff fcee 	bl	800319c <SCHEDULER_task>
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 80037d0:	f000 fc04 	bl	8003fdc <CONTROLLER_Update_Channels_Array>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 80037da:	2102      	movs	r1, #2
 80037dc:	200a      	movs	r0, #10
 80037de:	f7ff fdf9 	bl	80033d4 <SCHEDULER_task_set_mode>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 80037f2:	f000 f975 	bl	8003ae0 <CONTROLLER_Update_Channels_Analysis>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 8003806:	2001      	movs	r0, #1
 8003808:	f7ff f976 	bl	8002af8 <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7fe fbfb 	bl	8002008 <FLIGHT_MODE_Main>
}
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 800381a:	b580      	push	{r7, lr}
 800381c:	b082      	sub	sp, #8
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f002 ff60 	bl	80066e8 <TELEMETRY_Process>
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <process_logger>:

void process_logger(uint32_t current_time_us){
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 8003838:	f7fd fdd4 	bl	80013e4 <DATA_LOGGER_Main>
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <TASK_get_task>:
	[TASK_CONTROLLER_CHANNEL_UPDATE] = 		DEFINE_TASK(TASK_CONTROLLER_CHANNEL_UPDATE, 	PRIORITY_MEDIUM,	process_controller_channel_update, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
	[TASK_CONTROLLER_CHANNEL_ANALYSIS] = 	DEFINE_TASK(TASK_CONTROLLER_CHANNEL_ANALYSIS, 	PRIORITY_MEDIUM,	process_controller_channel_analysis, 	PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
};


task_t * TASK_get_task(task_ids_t id){
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	22d0      	movs	r2, #208	; 0xd0
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a04      	ldr	r2, [pc, #16]	; (8003868 <TASK_get_task+0x24>)
 8003858:	4413      	add	r3, r2
}
 800385a:	4618      	mov	r0, r3
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	2000093c 	.word	0x2000093c

0800386c <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003872:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8003874:	f003 f93a 	bl	8006aec <HAL_GetTick>
 8003878:	4603      	mov	r3, r0
 800387a:	3301      	adds	r3, #1
 800387c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003880:	fb02 f203 	mul.w	r2, r2, r3
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <TIME_us+0x50>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	08db      	lsrs	r3, r3, #3
 800388a:	490d      	ldr	r1, [pc, #52]	; (80038c0 <TIME_us+0x54>)
 800388c:	fba1 1303 	umull	r1, r3, r1, r3
 8003890:	085b      	lsrs	r3, r3, #1
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8003896:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <TIME_us+0x58>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d203      	bcs.n	80038aa <TIME_us+0x3e>
		t_us += 1000;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80038a8:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80038aa:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <TIME_us+0x58>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6013      	str	r3, [r2, #0]

	return t_us;
 80038b0:	687b      	ldr	r3, [r7, #4]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010
 80038c0:	18618619 	.word	0x18618619
 80038c4:	20001a40 	.word	0x20001a40

080038c8 <TIME_delay_us_blocking>:

void TIME_delay_us_blocking(uint32_t duration_us){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	uint32_t end_time = TIME_us() + duration_us;
 80038d0:	f7ff ffcc 	bl	800386c <TIME_us>
 80038d4:	4602      	mov	r2, r0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
	while(TIME_us() < end_time);
 80038dc:	bf00      	nop
 80038de:	f7ff ffc5 	bl	800386c <TIME_us>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d8f9      	bhi.n	80038de <TIME_delay_us_blocking+0x16>
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	prop = prop_;
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <PROPULSION_Init+0x30>)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <PROPULSION_Init+0x30>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	4b06      	ldr	r3, [pc, #24]	; (8003924 <PROPULSION_Init+0x30>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f103 0218 	add.w	r2, r3, #24
 8003912:	2301      	movs	r3, #1
 8003914:	6839      	ldr	r1, [r7, #0]
 8003916:	f008 fa41 	bl	800bd9c <MOTORS_Init>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20001a44 	.word	0x20001a44

08003928 <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST - PITCH - ROLL + YAW;
 800392e:	4b4c      	ldr	r3, [pc, #304]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003936:	b29a      	uxth	r2, r3
 8003938:	4b49      	ldr	r3, [pc, #292]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003940:	b29b      	uxth	r3, r3
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	b29a      	uxth	r2, r3
 8003946:	4b46      	ldr	r3, [pc, #280]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800394e:	b29b      	uxth	r3, r3
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b42      	ldr	r3, [pc, #264]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800395c:	b29b      	uxth	r3, r3
 800395e:	4413      	add	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST - PITCH + ROLL - YAW ;
 8003964:	4b3e      	ldr	r3, [pc, #248]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800396c:	b29a      	uxth	r2, r3
 800396e:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003976:	b29b      	uxth	r3, r3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003984:	b29b      	uxth	r3, r3
 8003986:	4413      	add	r3, r2
 8003988:	b29a      	uxth	r2, r3
 800398a:	4b35      	ldr	r3, [pc, #212]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003992:	b29b      	uxth	r3, r3
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	b29b      	uxth	r3, r3
 8003998:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST + PITCH + ROLL + YAW ;
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b2e      	ldr	r3, [pc, #184]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4413      	add	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	4b27      	ldr	r3, [pc, #156]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST + PITCH - ROLL - YAW ;
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 8003a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	b292      	uxth	r2, r2
 8003a16:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 8003a18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b292      	uxth	r2, r2
 8003a28:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 8003a2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a32:	b21a      	sxth	r2, r3
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 8003a3c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a44:	b21a      	sxth	r2, r3
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 8003a4e:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <PROPULSION_Update_Motors+0x138>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f008 f9d9 	bl	800be0a <MOTORS_Change_output>

}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20001a44 	.word	0x20001a44

08003a64 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 8003a6e:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <CONTROLLER_Init+0x78>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <CONTROLLER_Init+0x78>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	321a      	adds	r2, #26
 8003a7c:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <CONTROLLER_Init+0x78>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2201      	movs	r2, #1
 8003a84:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <CONTROLLER_Init+0x78>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <CONTROLLER_Init+0x78>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2202      	movs	r2, #2
 8003a94:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <CONTROLLER_Init+0x78>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <CONTROLLER_Init+0x78>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 8003aa6:	4b0d      	ldr	r3, [pc, #52]	; (8003adc <CONTROLLER_Init+0x78>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <CONTROLLER_Init+0x78>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <CONTROLLER_Init+0x78>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2204      	movs	r2, #4
 8003abc:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <CONTROLLER_Init+0x78>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2206      	movs	r2, #6
 8003ac4:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <CONTROLLER_Init+0x78>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2205      	movs	r2, #5
 8003acc:	735a      	strb	r2, [r3, #13]

}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20001a48 	.word	0x20001a48

08003ae0 <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	71fb      	strb	r3, [r7, #7]
 8003aea:	e1a0      	b.n	8003e2e <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 8003aec:	4bac      	ldr	r3, [pc, #688]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	4413      	add	r3, r2
 8003af6:	791b      	ldrb	r3, [r3, #4]
 8003af8:	2b06      	cmp	r3, #6
 8003afa:	f200 818d 	bhi.w	8003e18 <CONTROLLER_Update_Channels_Analysis+0x338>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003e19 	.word	0x08003e19
 8003b08:	08003b21 	.word	0x08003b21
 8003b0c:	08003b6d 	.word	0x08003b6d
 8003b10:	08003e19 	.word	0x08003e19
 8003b14:	08003d79 	.word	0x08003d79
 8003b18:	08003c35 	.word	0x08003c35
 8003b1c:	08003ce9 	.word	0x08003ce9
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8003b20:	4b9f      	ldr	r3, [pc, #636]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4413      	add	r3, r2
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003b34:	f113 0f1d 	cmn.w	r3, #29
 8003b38:	f2c0 8170 	blt.w	8003e1c <CONTROLLER_Update_Channels_Analysis+0x33c>
 8003b3c:	4b98      	ldr	r3, [pc, #608]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8003b50:	2b1d      	cmp	r3, #29
 8003b52:	f300 8163 	bgt.w	8003e1c <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 8003b56:	4b92      	ldr	r3, [pc, #584]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003b68:	801a      	strh	r2, [r3, #0]
					break;
 8003b6a:	e157      	b.n	8003e1c <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 8003b6c:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	4413      	add	r3, r2
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b80:	d914      	bls.n	8003bac <CONTROLLER_Update_Channels_Analysis+0xcc>
 8003b82:	4b87      	ldr	r3, [pc, #540]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	f240 421a 	movw	r2, #1050	; 0x41a
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d808      	bhi.n	8003bac <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 8003b9a:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2020 	strb.w	r2, [r3, #32]
 8003baa:	e042      	b.n	8003c32 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 8003bac:	4b7c      	ldr	r3, [pc, #496]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	f240 421a 	movw	r2, #1050	; 0x41a
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d914      	bls.n	8003bee <CONTROLLER_Update_Channels_Analysis+0x10e>
 8003bc4:	4b76      	ldr	r3, [pc, #472]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f240 427e 	movw	r2, #1150	; 0x47e
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d808      	bhi.n	8003bee <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 8003bdc:	4b70      	ldr	r3, [pc, #448]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	4413      	add	r3, r2
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2020 	strb.w	r2, [r3, #32]
 8003bec:	e021      	b.n	8003c32 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 8003bee:	4b6c      	ldr	r3, [pc, #432]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	f240 427e 	movw	r2, #1150	; 0x47e
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f240 810c 	bls.w	8003e20 <CONTROLLER_Update_Channels_Analysis+0x340>
 8003c08:	4b65      	ldr	r3, [pc, #404]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003c1c:	f080 8100 	bcs.w	8003e20 <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8003c20:	4b5f      	ldr	r3, [pc, #380]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	4413      	add	r3, r2
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8003c30:	e0f6      	b.n	8003e20 <CONTROLLER_Update_Channels_Analysis+0x340>
 8003c32:	e0f5      	b.n	8003e20 <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8003c34:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 8003c46:	4b56      	ldr	r3, [pc, #344]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	4413      	add	r3, r2
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8003c56:	4b52      	ldr	r3, [pc, #328]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	bf8c      	ite	hi
 8003c6e:	2301      	movhi	r3, #1
 8003c70:	2300      	movls	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8003c76:	4b4a      	ldr	r3, [pc, #296]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003c84:	461a      	mov	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <CONTROLLER_Update_Channels_Analysis+0x1f2>
 8003c8c:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4413      	add	r3, r2
 8003c96:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d119      	bne.n	8003cd2 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 8003c9e:	4b40      	ldr	r3, [pc, #256]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d108      	bne.n	8003cc2 <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb8:	4413      	add	r3, r2
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cc0:	e007      	b.n	8003cd2 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	4413      	add	r3, r2
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cda:	6839      	ldr	r1, [r7, #0]
 8003cdc:	b2c9      	uxtb	r1, r1
 8003cde:	4413      	add	r3, r2
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8003ce6:	e09c      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 8003cfa:	4b29      	ldr	r3, [pc, #164]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	4413      	add	r3, r2
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8003d0a:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bf8c      	ite	hi
 8003d22:	2301      	movhi	r3, #1
 8003d24:	2300      	movls	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	4413      	add	r3, r2
 8003d34:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003d38:	461a      	mov	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d010      	beq.n	8003d62 <CONTROLLER_Update_Channels_Analysis+0x282>
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 8003d62:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	6839      	ldr	r1, [r7, #0]
 8003d6c:	b2c9      	uxtb	r1, r1
 8003d6e:	4413      	add	r3, r2
 8003d70:	460a      	mov	r2, r1
 8003d72:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8003d76:	e054      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	f240 5213 	movw	r2, #1299	; 0x513
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d809      	bhi.n	8003da4 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d98:	4413      	add	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 8003d9e:	e040      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>
 8003da0:	20001a48 	.word	0x20001a48
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f240 5214 	movw	r2, #1300	; 0x514
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d912      	bls.n	8003de2 <CONTROLLER_Update_Channels_Analysis+0x302>
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003dd0:	d207      	bcs.n	8003de2 <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	4413      	add	r3, r2
 8003ddc:	2201      	movs	r2, #1
 8003dde:	749a      	strb	r2, [r3, #18]
					break;
 8003de0:	e01f      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 8003de2:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003df6:	d907      	bls.n	8003e08 <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 8003df8:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	4413      	add	r3, r2
 8003e02:	2202      	movs	r2, #2
 8003e04:	749a      	strb	r2, [r3, #18]
					break;
 8003e06:	e00c      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 8003e08:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e10:	4413      	add	r3, r2
 8003e12:	2203      	movs	r2, #3
 8003e14:	749a      	strb	r2, [r3, #18]
					break;
 8003e16:	e004      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 8003e18:	bf00      	nop
 8003e1a:	e002      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003e1c:	bf00      	nop
 8003e1e:	e000      	b.n	8003e22 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8003e20:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	3301      	adds	r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	71fb      	strb	r3, [r7, #7]
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b09      	cmp	r3, #9
 8003e34:	f77f ae5a 	ble.w	8003aec <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 8003e38:	f000 f806 	bl	8003e48 <flag_process>
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20001a48 	.word	0x20001a48

08003e48 <flag_process>:

static void flag_process()
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8003e4c:	4b62      	ldr	r3, [pc, #392]	; (8003fd8 <flag_process+0x190>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d00d      	beq.n	8003e74 <flag_process+0x2c>
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d015      	beq.n	8003e88 <flag_process+0x40>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d11d      	bne.n	8003e9c <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 8003e60:	2017      	movs	r0, #23
 8003e62:	f7fe fed7 	bl	8002c14 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8003e66:	2016      	movs	r0, #22
 8003e68:	f7fe feec 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8003e6c:	2015      	movs	r0, #21
 8003e6e:	f7fe fee9 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8003e72:	e013      	b.n	8003e9c <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8003e74:	2017      	movs	r0, #23
 8003e76:	f7fe fee5 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 8003e7a:	2016      	movs	r0, #22
 8003e7c:	f7fe feca 	bl	8002c14 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8003e80:	2015      	movs	r0, #21
 8003e82:	f7fe fedf 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8003e86:	e009      	b.n	8003e9c <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8003e88:	2017      	movs	r0, #23
 8003e8a:	f7fe fedb 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8003e8e:	2016      	movs	r0, #22
 8003e90:	f7fe fed8 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 8003e94:	2015      	movs	r0, #21
 8003e96:	f7fe febd 	bl	8002c14 <EVENT_Set_flag>
			break;
 8003e9a:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 8003e9c:	4b4e      	ldr	r3, [pc, #312]	; (8003fd8 <flag_process+0x190>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	7d9b      	ldrb	r3, [r3, #22]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 8003ea6:	2009      	movs	r0, #9
 8003ea8:	f7fe feb4 	bl	8002c14 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 8003eac:	200a      	movs	r0, #10
 8003eae:	f7fe fec9 	bl	8002c44 <EVENT_Clean_flag>
 8003eb2:	e005      	b.n	8003ec0 <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 8003eb4:	2009      	movs	r0, #9
 8003eb6:	f7fe fec5 	bl	8002c44 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 8003eba:	200a      	movs	r0, #10
 8003ebc:	f7fe feaa 	bl	8002c14 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 8003ec0:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <flag_process+0x190>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	7ddb      	ldrb	r3, [r3, #23]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d828      	bhi.n	8003f1c <flag_process+0xd4>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <flag_process+0x88>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	08003f09 	.word	0x08003f09
 8003edc:	08003f1d 	.word	0x08003f1d
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 8003ee0:	200b      	movs	r0, #11
 8003ee2:	f7fe fe97 	bl	8002c14 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8003ee6:	200c      	movs	r0, #12
 8003ee8:	f7fe feac 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8003eec:	200d      	movs	r0, #13
 8003eee:	f7fe fea9 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8003ef2:	e013      	b.n	8003f1c <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8003ef4:	200b      	movs	r0, #11
 8003ef6:	f7fe fea5 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 8003efa:	200c      	movs	r0, #12
 8003efc:	f7fe fe8a 	bl	8002c14 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8003f00:	200d      	movs	r0, #13
 8003f02:	f7fe fe9f 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8003f06:	e009      	b.n	8003f1c <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8003f08:	200b      	movs	r0, #11
 8003f0a:	f7fe fe9b 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8003f0e:	200c      	movs	r0, #12
 8003f10:	f7fe fe98 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8003f14:	200d      	movs	r0, #13
 8003f16:	f7fe fe7d 	bl	8002c14 <EVENT_Set_flag>
			break;
 8003f1a:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <flag_process+0x190>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	7e1b      	ldrb	r3, [r3, #24]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d828      	bhi.n	8003f78 <flag_process+0x130>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <flag_process+0xe4>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f3d 	.word	0x08003f3d
 8003f30:	08003f51 	.word	0x08003f51
 8003f34:	08003f65 	.word	0x08003f65
 8003f38:	08003f79 	.word	0x08003f79
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 8003f3c:	200e      	movs	r0, #14
 8003f3e:	f7fe fe69 	bl	8002c14 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8003f42:	200f      	movs	r0, #15
 8003f44:	f7fe fe7e 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8003f48:	2010      	movs	r0, #16
 8003f4a:	f7fe fe7b 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8003f4e:	e013      	b.n	8003f78 <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8003f50:	200e      	movs	r0, #14
 8003f52:	f7fe fe77 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 8003f56:	200f      	movs	r0, #15
 8003f58:	f7fe fe5c 	bl	8002c14 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8003f5c:	2010      	movs	r0, #16
 8003f5e:	f7fe fe71 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8003f62:	e009      	b.n	8003f78 <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8003f64:	200e      	movs	r0, #14
 8003f66:	f7fe fe6d 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8003f6a:	200f      	movs	r0, #15
 8003f6c:	f7fe fe6a 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 8003f70:	2010      	movs	r0, #16
 8003f72:	f7fe fe4f 	bl	8002c14 <EVENT_Set_flag>
			break;
 8003f76:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 8003f78:	4b17      	ldr	r3, [pc, #92]	; (8003fd8 <flag_process+0x190>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	7e5b      	ldrb	r3, [r3, #25]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 8003f82:	2011      	movs	r0, #17
 8003f84:	f7fe fe46 	bl	8002c14 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 8003f88:	2012      	movs	r0, #18
 8003f8a:	f7fe fe5b 	bl	8002c44 <EVENT_Clean_flag>
 8003f8e:	e005      	b.n	8003f9c <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 8003f90:	2011      	movs	r0, #17
 8003f92:	f7fe fe57 	bl	8002c44 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 8003f96:	2012      	movs	r0, #18
 8003f98:	f7fe fe3c 	bl	8002c14 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <flag_process+0x190>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d107      	bne.n	8003fb8 <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 8003fa8:	2013      	movs	r0, #19
 8003faa:	f7fe fe33 	bl	8002c14 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <flag_process+0x190>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <flag_process+0x190>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d103      	bne.n	8003fcc <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 8003fc4:	2014      	movs	r0, #20
 8003fc6:	f7fe fe25 	bl	8002c14 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 8003fca:	e002      	b.n	8003fd2 <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8003fcc:	2014      	movs	r0, #20
 8003fce:	f7fe fe39 	bl	8002c44 <EVENT_Clean_flag>
}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20001a48 	.word	0x20001a48

08003fdc <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 8003fe0:	f007 fd54 	bl	800ba8c <IBUS_Channel_Update>
 8003fe4:	4603      	mov	r3, r0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 8003fea:	b580      	push	{r7, lr}
 8003fec:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 8003fee:	2008      	movs	r0, #8
 8003ff0:	f7fe fe10 	bl	8002c14 <EVENT_Set_flag>
}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <REGULATION_ORIENTATION_Init>:

float pid_angle_settings_roll[PID_NB_SETTINGS] = {4.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};
float pid_angle_settings_pitch[PID_NB_SETTINGS] = {5.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8004004:	4a1f      	ldr	r2, [pc, #124]	; (8004084 <REGULATION_ORIENTATION_Init+0x8c>)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 800400a:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 8004010:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2200      	movs	r2, #0
 8004016:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8


	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <REGULATION_ORIENTATION_Init+0x94>)
 800402c:	2200      	movs	r2, #0
 800402e:	4918      	ldr	r1, [pc, #96]	; (8004090 <REGULATION_ORIENTATION_Init+0x98>)
 8004030:	f007 ffee 	bl	800c010 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_FIRST_ORDER, filter_pid_velocity_roll_pitch);
 8004034:	4b14      	ldr	r3, [pc, #80]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f103 0008 	add.w	r0, r3, #8
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <REGULATION_ORIENTATION_Init+0x94>)
 800403e:	2200      	movs	r2, #0
 8004040:	4914      	ldr	r1, [pc, #80]	; (8004094 <REGULATION_ORIENTATION_Init+0x9c>)
 8004042:	f007 ffe5 	bl	800c010 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <REGULATION_ORIENTATION_Init+0xa0>)
 8004050:	2200      	movs	r2, #0
 8004052:	4912      	ldr	r1, [pc, #72]	; (800409c <REGULATION_ORIENTATION_Init+0xa4>)
 8004054:	f007 ffdc 	bl	800c010 <PID_init>


	//Init PIDs angular position
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], pid_angle_settings_roll, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 8004058:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8004060:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <REGULATION_ORIENTATION_Init+0xa8>)
 8004062:	2200      	movs	r2, #0
 8004064:	490f      	ldr	r1, [pc, #60]	; (80040a4 <REGULATION_ORIENTATION_Init+0xac>)
 8004066:	f007 ffd3 	bl	800c010 <PID_init>
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], pid_angle_settings_pitch, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <REGULATION_ORIENTATION_Init+0x90>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8004072:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <REGULATION_ORIENTATION_Init+0xa8>)
 8004074:	2200      	movs	r2, #0
 8004076:	490c      	ldr	r1, [pc, #48]	; (80040a8 <REGULATION_ORIENTATION_Init+0xb0>)
 8004078:	f007 ffca 	bl	800c010 <PID_init>


}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	20001a50 	.word	0x20001a50
 8004088:	20001a4c 	.word	0x20001a4c
 800408c:	2000149c 	.word	0x2000149c
 8004090:	200014b4 	.word	0x200014b4
 8004094:	200014c8 	.word	0x200014c8
 8004098:	200014a8 	.word	0x200014a8
 800409c:	200014dc 	.word	0x200014dc
 80040a0:	200014f0 	.word	0x200014f0
 80040a4:	200014fc 	.word	0x200014fc
 80040a8:	20001510 	.word	0x20001510

080040ac <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	79fa      	ldrb	r2, [r7, #7]
 80040bc:	711a      	strb	r2, [r3, #4]
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20001a4c 	.word	0x20001a4c

080040d0 <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 80040d4:	4b90      	ldr	r3, [pc, #576]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	791b      	ldrb	r3, [r3, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d019      	beq.n	8004112 <REGULATION_ORIENTATION_Process+0x42>
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d07c      	beq.n	80041dc <REGULATION_ORIENTATION_Process+0x10c>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d000      	beq.n	80040e8 <REGULATION_ORIENTATION_Process+0x18>
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
			break;
	}

}
 80040e6:	e114      	b.n	8004312 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 80040e8:	4b8b      	ldr	r3, [pc, #556]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80040f0:	2200      	movs	r2, #0
 80040f2:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 80040f4:	4b88      	ldr	r3, [pc, #544]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80040fc:	3302      	adds	r3, #2
 80040fe:	2200      	movs	r2, #0
 8004100:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 8004102:	4b85      	ldr	r3, [pc, #532]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800410a:	3304      	adds	r3, #4
 800410c:	2200      	movs	r2, #0
 800410e:	801a      	strh	r2, [r3, #0]
			break;
 8004110:	e0ff      	b.n	8004312 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8004112:	4b81      	ldr	r3, [pc, #516]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800411a:	4b7f      	ldr	r3, [pc, #508]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8004122:	4b7e      	ldr	r3, [pc, #504]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	3304      	adds	r3, #4
 800412a:	ed93 7a00 	vldr	s14, [r3]
 800412e:	eef0 0a47 	vmov.f32	s1, s14
 8004132:	eeb0 0a67 	vmov.f32	s0, s15
 8004136:	4610      	mov	r0, r2
 8004138:	f007 fece 	bl	800bed8 <PID_compute>
 800413c:	eef0 7a40 	vmov.f32	s15, s0
 8004140:	4b75      	ldr	r3, [pc, #468]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800414c:	ee17 2a90 	vmov	r2, s15
 8004150:	b212      	sxth	r2, r2
 8004152:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8004154:	4b70      	ldr	r3, [pc, #448]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f103 0208 	add.w	r2, r3, #8
 800415c:	4b6e      	ldr	r3, [pc, #440]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8004164:	4b6d      	ldr	r3, [pc, #436]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	ed93 7a00 	vldr	s14, [r3]
 800416e:	eef0 0a47 	vmov.f32	s1, s14
 8004172:	eeb0 0a67 	vmov.f32	s0, s15
 8004176:	4610      	mov	r0, r2
 8004178:	f007 feae 	bl	800bed8 <PID_compute>
 800417c:	eef0 7a40 	vmov.f32	s15, s0
 8004180:	4b65      	ldr	r3, [pc, #404]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004188:	3302      	adds	r3, #2
 800418a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800418e:	ee17 2a90 	vmov	r2, s15
 8004192:	b212      	sxth	r2, r2
 8004194:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8004196:	4b60      	ldr	r3, [pc, #384]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800419e:	4b5e      	ldr	r3, [pc, #376]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80041a6:	4b5d      	ldr	r3, [pc, #372]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	3308      	adds	r3, #8
 80041ae:	ed93 7a00 	vldr	s14, [r3]
 80041b2:	eef0 0a47 	vmov.f32	s1, s14
 80041b6:	eeb0 0a67 	vmov.f32	s0, s15
 80041ba:	4610      	mov	r0, r2
 80041bc:	f007 fe8c 	bl	800bed8 <PID_compute>
 80041c0:	eef0 7a40 	vmov.f32	s15, s0
 80041c4:	4b54      	ldr	r3, [pc, #336]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80041cc:	3304      	adds	r3, #4
 80041ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d2:	ee17 2a90 	vmov	r2, s15
 80041d6:	b212      	sxth	r2, r2
 80041d8:	801a      	strh	r2, [r3, #0]
			break;
 80041da:	e09a      	b.n	8004312 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->consigne_angular_speed[ORIENTATION_ROLL] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], regu_orientation->consigne_angular_pos[ORIENTATION_ROLL], orientation->angular_position[ORIENTATION_ROLL]);
 80041dc:	4b4e      	ldr	r3, [pc, #312]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80041e4:	4b4c      	ldr	r3, [pc, #304]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 80041ec:	4b4b      	ldr	r3, [pc, #300]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80041f4:	eef0 0a47 	vmov.f32	s1, s14
 80041f8:	eeb0 0a67 	vmov.f32	s0, s15
 80041fc:	4610      	mov	r0, r2
 80041fe:	f007 fe6b 	bl	800bed8 <PID_compute>
 8004202:	eef0 7a40 	vmov.f32	s15, s0
 8004206:	4b44      	ldr	r3, [pc, #272]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	eef1 7a67 	vneg.f32	s15, s15
 800420e:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
			regu_orientation->consigne_angular_speed[ORIENTATION_PITCH] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], regu_orientation->consigne_angular_pos[ORIENTATION_PITCH], orientation->angular_position[ORIENTATION_PITCH]);
 8004212:	4b41      	ldr	r3, [pc, #260]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800421a:	4b3f      	ldr	r3, [pc, #252]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8004222:	4b3e      	ldr	r3, [pc, #248]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	ed93 7a00 	vldr	s14, [r3]
 800422a:	eef0 0a47 	vmov.f32	s1, s14
 800422e:	eeb0 0a67 	vmov.f32	s0, s15
 8004232:	4610      	mov	r0, r2
 8004234:	f007 fe50 	bl	800bed8 <PID_compute>
 8004238:	eef0 7a40 	vmov.f32	s15, s0
 800423c:	4b36      	ldr	r3, [pc, #216]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	eef1 7a67 	vneg.f32	s15, s15
 8004244:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8004248:	4b33      	ldr	r3, [pc, #204]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004250:	4b31      	ldr	r3, [pc, #196]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8004258:	4b30      	ldr	r3, [pc, #192]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	3304      	adds	r3, #4
 8004260:	ed93 7a00 	vldr	s14, [r3]
 8004264:	eef0 0a47 	vmov.f32	s1, s14
 8004268:	eeb0 0a67 	vmov.f32	s0, s15
 800426c:	4610      	mov	r0, r2
 800426e:	f007 fe33 	bl	800bed8 <PID_compute>
 8004272:	eef0 7a40 	vmov.f32	s15, s0
 8004276:	4b28      	ldr	r3, [pc, #160]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800427e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004282:	ee17 2a90 	vmov	r2, s15
 8004286:	b212      	sxth	r2, r2
 8004288:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 800428a:	4b23      	ldr	r3, [pc, #140]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f103 0208 	add.w	r2, r3, #8
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	ed93 7a00 	vldr	s14, [r3]
 80042a4:	eef0 0a47 	vmov.f32	s1, s14
 80042a8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ac:	4610      	mov	r0, r2
 80042ae:	f007 fe13 	bl	800bed8 <PID_compute>
 80042b2:	eef0 7a40 	vmov.f32	s15, s0
 80042b6:	4b18      	ldr	r3, [pc, #96]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80042be:	3302      	adds	r3, #2
 80042c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042c4:	ee17 2a90 	vmov	r2, s15
 80042c8:	b212      	sxth	r2, r2
 80042ca:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 80042cc:	4b12      	ldr	r3, [pc, #72]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <REGULATION_ORIENTATION_Process+0x24c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	3308      	adds	r3, #8
 80042e4:	ed93 7a00 	vldr	s14, [r3]
 80042e8:	eef0 0a47 	vmov.f32	s1, s14
 80042ec:	eeb0 0a67 	vmov.f32	s0, s15
 80042f0:	4610      	mov	r0, r2
 80042f2:	f007 fdf1 	bl	800bed8 <PID_compute>
 80042f6:	eef0 7a40 	vmov.f32	s15, s0
 80042fa:	4b07      	ldr	r3, [pc, #28]	; (8004318 <REGULATION_ORIENTATION_Process+0x248>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004302:	3304      	adds	r3, #4
 8004304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004308:	ee17 2a90 	vmov	r2, s15
 800430c:	b212      	sxth	r2, r2
 800430e:	801a      	strh	r2, [r3, #0]
			break;
 8004310:	bf00      	nop
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20001a4c 	.word	0x20001a4c
 800431c:	20001a50 	.word	0x20001a50

08004320 <REGULATION_POSITION_Init>:





void REGULATION_POSITION_Init(regu_position_t * regu_position_, regu_orientation_t * regu_orientation_, int16_t * outputs){
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 800432c:	4a09      	ldr	r2, [pc, #36]	; (8004354 <REGULATION_POSITION_Init+0x34>)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_;
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <REGULATION_POSITION_Init+0x38>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <REGULATION_POSITION_Init+0x34>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2200      	movs	r2, #0
 800433e:	721a      	strb	r2, [r3, #8]
	regu_position->outputs = outputs ;
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <REGULATION_POSITION_Init+0x34>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	605a      	str	r2, [r3, #4]


}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	20001a54 	.word	0x20001a54
 8004358:	20001a58 	.word	0x20001a58

0800435c <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	79fa      	ldrb	r2, [r7, #7]
 800436c:	721a      	strb	r2, [r3, #8]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20001a54 	.word	0x20001a54

08004380 <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <REGULATION_POSITION_Process+0x40>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	7a1b      	ldrb	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <REGULATION_POSITION_Process+0x14>
 800438e:	2b01      	cmp	r3, #1
 8004390:	d007      	beq.n	80043a2 <REGULATION_POSITION_Process+0x22>
			break;
		case REGULATION_POSITION_MODE_ON:
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
			break;
	}
}
 8004392:	e010      	b.n	80043b6 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <REGULATION_POSITION_Process+0x40>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	3306      	adds	r3, #6
 800439c:	2200      	movs	r2, #0
 800439e:	801a      	strh	r2, [r3, #0]
			break;
 80043a0:	e009      	b.n	80043b6 <REGULATION_POSITION_Process+0x36>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 80043a2:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <REGULATION_POSITION_Process+0x40>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <REGULATION_POSITION_Process+0x40>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	3306      	adds	r3, #6
 80043ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80043b2:	801a      	strh	r2, [r3, #0]
			break;
 80043b4:	bf00      	nop
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	20001a54 	.word	0x20001a54

080043c4 <ACC_init>:
static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};


void ACC_init(acc_t * acc, mpu_t * mpu){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3314      	adds	r3, #20
 80043d2:	2200      	movs	r2, #0
 80043d4:	491a      	ldr	r1, [pc, #104]	; (8004440 <ACC_init+0x7c>)
 80043d6:	4618      	mov	r0, r3
 80043d8:	f007 fa56 	bl	800b888 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3330      	adds	r3, #48	; 0x30
 80043e0:	2200      	movs	r2, #0
 80043e2:	4917      	ldr	r1, [pc, #92]	; (8004440 <ACC_init+0x7c>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f007 fa4f 	bl	800b888 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	334c      	adds	r3, #76	; 0x4c
 80043ee:	2200      	movs	r2, #0
 80043f0:	4913      	ldr	r1, [pc, #76]	; (8004440 <ACC_init+0x7c>)
 80043f2:	4618      	mov	r0, r3
 80043f4:	f007 fa48 	bl	800b888 <FILTER_init>


	acc->mpu = mpu ;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <ACC_init+0x80>)
 8004410:	2101      	movs	r1, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fc76 	bl	8004d04 <MPU_init_acc>
 8004418:	4603      	mov	r3, r0
 800441a:	2b01      	cmp	r3, #1
 800441c:	d008      	beq.n	8004430 <ACC_init+0x6c>
 800441e:	2b02      	cmp	r3, #2
 8004420:	d008      	beq.n	8004434 <ACC_init+0x70>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d000      	beq.n	8004428 <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 8004426:	e006      	b.n	8004436 <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 8004428:	2004      	movs	r0, #4
 800442a:	f7fe fbf3 	bl	8002c14 <EVENT_Set_flag>
			break;
 800442e:	e002      	b.n	8004436 <ACC_init+0x72>
			break;
 8004430:	bf00      	nop
 8004432:	e000      	b.n	8004436 <ACC_init+0x72>
			break;
 8004434:	bf00      	nop
}
 8004436:	bf00      	nop
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20001524 	.word	0x20001524
 8004444:	08004505 	.word	0x08004505

08004448 <ACC_update>:

void ACC_update(acc_t * acc){
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fd03 	bl	8004e60 <MPU_update_acc>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d00c      	beq.n	800447a <ACC_update+0x32>
 8004460:	2b02      	cmp	r3, #2
 8004462:	d006      	beq.n	8004472 <ACC_update+0x2a>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d000      	beq.n	800446a <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8004468:	e008      	b.n	800447c <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 800446a:	2006      	movs	r0, #6
 800446c:	f7fe fbd2 	bl	8002c14 <EVENT_Set_flag>
			break;
 8004470:	e004      	b.n	800447c <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8004472:	2004      	movs	r0, #4
 8004474:	f7fe fbe6 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8004478:	e000      	b.n	800447c <ACC_update+0x34>
			break;
 800447a:	bf00      	nop
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f103 0214 	add.w	r2, r3, #20
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	edd3 7a00 	vldr	s15, [r3]
 800449a:	eeb0 0a67 	vmov.f32	s0, s15
 800449e:	4610      	mov	r0, r2
 80044a0:	f007 fa15 	bl	800b8ce <FILTER_process>
 80044a4:	eef0 7a40 	vmov.f32	s15, s0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	eeb0 0a67 	vmov.f32	s0, s15
 80044c2:	4610      	mov	r0, r2
 80044c4:	f007 fa03 	bl	800b8ce <FILTER_process>
 80044c8:	eef0 7a40 	vmov.f32	s15, s0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	3308      	adds	r3, #8
 80044de:	edd3 7a00 	vldr	s15, [r3]
 80044e2:	eeb0 0a67 	vmov.f32	s0, s15
 80044e6:	4610      	mov	r0, r2
 80044e8:	f007 f9f1 	bl	800b8ce <FILTER_process>
 80044ec:	eef0 7a40 	vmov.f32	s15, s0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 80044f6:	2007      	movs	r0, #7
 80044f8:	f7fe fb8c 	bl	8002c14 <EVENT_Set_flag>
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <acc_data_callback>:

static void acc_data_callback(void){
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8004508:	2006      	movs	r0, #6
 800450a:	f7fe fb83 	bl	8002c14 <EVENT_Set_flag>
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}

08004512 <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3304      	adds	r3, #4
 8004526:	2210      	movs	r2, #16
 8004528:	4619      	mov	r1, r3
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	f002 fb50 	bl	8006bd0 <HAL_ADC_Start_DMA>
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <GYRO_init>:

//float filter[3] = {0.01234567901f, 1.777777778f, -0.7901234568f};
float filter[3] = {0.1f, 0.9f, 0.0f};
static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[GYRO_AXE_X], filter, FILTER_SECOND_ORDER);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3320      	adds	r3, #32
 8004546:	2201      	movs	r2, #1
 8004548:	491a      	ldr	r1, [pc, #104]	; (80045b4 <GYRO_init+0x7c>)
 800454a:	4618      	mov	r0, r3
 800454c:	f007 f99c 	bl	800b888 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Y], filter, FILTER_SECOND_ORDER);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	333c      	adds	r3, #60	; 0x3c
 8004554:	2201      	movs	r2, #1
 8004556:	4917      	ldr	r1, [pc, #92]	; (80045b4 <GYRO_init+0x7c>)
 8004558:	4618      	mov	r0, r3
 800455a:	f007 f995 	bl	800b888 <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Z], filter, FILTER_SECOND_ORDER);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3358      	adds	r3, #88	; 0x58
 8004562:	2201      	movs	r2, #1
 8004564:	4913      	ldr	r1, [pc, #76]	; (80045b4 <GYRO_init+0x7c>)
 8004566:	4618      	mov	r0, r3
 8004568:	f007 f98e 	bl	800b888 <FILTER_init>

	gyro->mpu = mpu ;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	605a      	str	r2, [r3, #4]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <GYRO_init+0x80>)
 8004584:	2103      	movs	r1, #3
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fb04 	bl	8004b94 <MPU_init_gyro>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d008      	beq.n	80045a4 <GYRO_init+0x6c>
 8004592:	2b02      	cmp	r3, #2
 8004594:	d008      	beq.n	80045a8 <GYRO_init+0x70>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d000      	beq.n	800459c <GYRO_init+0x64>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 800459a:	e006      	b.n	80045aa <GYRO_init+0x72>
			EVENT_Set_flag(FLAG_GYRO_OK);
 800459c:	2000      	movs	r0, #0
 800459e:	f7fe fb39 	bl	8002c14 <EVENT_Set_flag>
			break;
 80045a2:	e002      	b.n	80045aa <GYRO_init+0x72>
			break;
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <GYRO_init+0x72>
			break;
 80045a8:	bf00      	nop
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20001530 	.word	0x20001530
 80045b8:	080047e7 	.word	0x080047e7

080045bc <GYRO_calibrate>:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
bool_e GYRO_calibrate(gyro_t * gyro, uint16_t iteration){
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 80045c8:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <GYRO_calibrate+0x114>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <GYRO_calibrate+0x2c>
		sum[0] = 0 ;
 80045d0:	4b40      	ldr	r3, [pc, #256]	; (80046d4 <GYRO_calibrate+0x118>)
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 80045d8:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <GYRO_calibrate+0x118>)
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 80045e0:	4b3c      	ldr	r3, [pc, #240]	; (80046d4 <GYRO_calibrate+0x118>)
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
	}

	sum[0] += gyro->raw[0] + gyro->offsets[0];
 80045e8:	4b3a      	ldr	r3, [pc, #232]	; (80046d4 <GYRO_calibrate+0x118>)
 80045ea:	ed93 7a00 	vldr	s14, [r3]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	edd3 6a00 	vldr	s13, [r3]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80045fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004604:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <GYRO_calibrate+0x118>)
 8004606:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += gyro->raw[1] + gyro->offsets[1];
 800460a:	4b32      	ldr	r3, [pc, #200]	; (80046d4 <GYRO_calibrate+0x118>)
 800460c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	edd3 6a00 	vldr	s13, [r3]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <GYRO_calibrate+0x118>)
 800462a:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += gyro->raw[2] + gyro->offsets[2];
 800462e:	4b29      	ldr	r3, [pc, #164]	; (80046d4 <GYRO_calibrate+0x118>)
 8004630:	ed93 7a02 	vldr	s14, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	3308      	adds	r3, #8
 800463a:	edd3 6a00 	vldr	s13, [r3]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	edd3 7a07 	vldr	s15, [r3, #28]
 8004644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464c:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <GYRO_calibrate+0x118>)
 800464e:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 8004652:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <GYRO_calibrate+0x114>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	4b1d      	ldr	r3, [pc, #116]	; (80046d0 <GYRO_calibrate+0x114>)
 800465c:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 800465e:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <GYRO_calibrate+0x114>)
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	429a      	cmp	r2, r3
 8004666:	d12b      	bne.n	80046c0 <GYRO_calibrate+0x104>
		gyro->offsets[0] = sum[0] / (float)iteration;
 8004668:	4b1a      	ldr	r3, [pc, #104]	; (80046d4 <GYRO_calibrate+0x118>)
 800466a:	edd3 6a00 	vldr	s13, [r3]
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	edc3 7a05 	vstr	s15, [r3, #20]
		gyro->offsets[1] = sum[1] / (float)iteration;
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <GYRO_calibrate+0x118>)
 8004684:	edd3 6a01 	vldr	s13, [r3, #4]
 8004688:	887b      	ldrh	r3, [r7, #2]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	edc3 7a06 	vstr	s15, [r3, #24]
		gyro->offsets[2] = sum[2] / (float)iteration;
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <GYRO_calibrate+0x118>)
 800469e:	edd3 6a02 	vldr	s13, [r3, #8]
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 80046b6:	4b06      	ldr	r3, [pc, #24]	; (80046d0 <GYRO_calibrate+0x114>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	801a      	strh	r2, [r3, #0]
		return TRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <GYRO_calibrate+0x106>
	}

	return FALSE;
 80046c0:	2300      	movs	r3, #0

}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20001a5c 	.word	0x20001a5c
 80046d4:	20001a60 	.word	0x20001a60

080046d8 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fbfa 	bl	8004ede <MPU_update_all_dma>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d00a      	beq.n	8004706 <GYRO_ACC_update_dma+0x2e>
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d001      	beq.n	80046f8 <GYRO_ACC_update_dma+0x20>
 80046f4:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 80046f6:	e007      	b.n	8004708 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 80046f8:	2000      	movs	r0, #0
 80046fa:	f7fe faa3 	bl	8002c44 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80046fe:	2004      	movs	r0, #4
 8004700:	f7fe faa0 	bl	8002c44 <EVENT_Clean_flag>
			break;
 8004704:	e000      	b.n	8004708 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 8004706:	bf00      	nop
	}
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[GYRO_AXE_X] -= gyro->offsets[GYRO_AXE_X];
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	ed93 7a00 	vldr	s14, [r3]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	edd3 7a05 	vldr	s15, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472e:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Y] -= gyro->offsets[GYRO_AXE_Y];
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	ed93 7a00 	vldr	s14, [r3]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	edd3 7a06 	vldr	s15, [r3, #24]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800474c:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[GYRO_AXE_Z] -= gyro->offsets[GYRO_AXE_Z];
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	3308      	adds	r3, #8
 8004756:	ed93 7a00 	vldr	s14, [r3]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	3308      	adds	r3, #8
 8004766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800476a:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[GYRO_AXE_X] =  FILTER_process(&gyro->filters[GYRO_AXE_X], gyro->raw[GYRO_AXE_X]);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f103 0220 	add.w	r2, r3, #32
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	edd3 7a00 	vldr	s15, [r3]
 800477c:	eeb0 0a67 	vmov.f32	s0, s15
 8004780:	4610      	mov	r0, r2
 8004782:	f007 f8a4 	bl	800b8ce <FILTER_process>
 8004786:	eef0 7a40 	vmov.f32	s15, s0
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[GYRO_AXE_Y] =  FILTER_process(&gyro->filters[GYRO_AXE_Y], gyro->raw[GYRO_AXE_Y]);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	eeb0 0a67 	vmov.f32	s0, s15
 80047a4:	4610      	mov	r0, r2
 80047a6:	f007 f892 	bl	800b8ce <FILTER_process>
 80047aa:	eef0 7a40 	vmov.f32	s15, s0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[GYRO_AXE_Z] =  FILTER_process(&gyro->filters[GYRO_AXE_Z], gyro->raw[GYRO_AXE_Z]);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	3308      	adds	r3, #8
 80047c0:	edd3 7a00 	vldr	s15, [r3]
 80047c4:	eeb0 0a67 	vmov.f32	s0, s15
 80047c8:	4610      	mov	r0, r2
 80047ca:	f007 f880 	bl	800b8ce <FILTER_process>
 80047ce:	eef0 7a40 	vmov.f32	s15, s0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 80047d8:	2003      	movs	r0, #3
 80047da:	f7fe fa1b 	bl	8002c14 <EVENT_Set_flag>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <gyro_data_callback>:

static void gyro_data_callback(void){
 80047e6:	b580      	push	{r7, lr}
 80047e8:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 80047ea:	2002      	movs	r0, #2
 80047ec:	f7fe fa12 	bl	8002c14 <EVENT_Set_flag>
}
 80047f0:	bf00      	nop
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <convert_gyro>:

static void MPU_spi_slow(mpu_t * mpu);
static void MPU_spi_fast(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	3301      	adds	r3, #1
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	b21a      	sxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b21b      	sxth	r3, r3
 8004810:	4313      	orrs	r3, r2
 8004812:	b21a      	sxth	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	3303      	adds	r3, #3
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	b21a      	sxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	3302      	adds	r3, #2
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	b21b      	sxth	r3, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	b21a      	sxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	3305      	adds	r3, #5
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	021b      	lsls	r3, r3, #8
 8004840:	b21a      	sxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	3304      	adds	r3, #4
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	b21b      	sxth	r3, r3
 800484c:	4313      	orrs	r3, r2
 800484e:	b21a      	sxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80048a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <convert_acc>:
static void convert_acc(mpu_t * mpu){
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c6:	3301      	adds	r3, #1
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b21b      	sxth	r3, r3
 80048d6:	4313      	orrs	r3, r2
 80048d8:	b21a      	sxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	3303      	adds	r3, #3
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	b21a      	sxth	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	3302      	adds	r3, #2
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b21b      	sxth	r3, r3
 80048f6:	4313      	orrs	r3, r2
 80048f8:	b21a      	sxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	3305      	adds	r3, #5
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	b21a      	sxth	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	3304      	adds	r3, #4
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	b21b      	sxth	r3, r3
 8004916:	4313      	orrs	r3, r2
 8004918:	b21a      	sxth	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6898      	ldr	r0, [r3, #8]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	899b      	ldrh	r3, [r3, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	4619      	mov	r1, r3
 800499a:	f003 fb05 	bl	8007fa8 <HAL_GPIO_WritePin>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6898      	ldr	r0, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	899b      	ldrh	r3, [r3, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	4619      	mov	r1, r3
 80049ba:	f003 faf5 	bl	8007fa8 <HAL_GPIO_WritePin>
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <MPU_spi_slow>:

static void MPU_spi_slow(mpu_t * mpu){
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_SLOW;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 64 ;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2240      	movs	r2, #64	; 0x40
 80049dc:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f004 f86e 	bl	8008ac4 <HAL_SPI_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 80049f0:	200a      	movs	r0, #10
 80049f2:	f002 f887 	bl	8006b04 <HAL_Delay>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <MPU_spi_fast>:
static void MPU_spi_fast(mpu_t * mpu){
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_FAST;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 4 ;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2204      	movs	r2, #4
 8004a14:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f004 f852 	bl	8008ac4 <HAL_SPI_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8004a28:	200a      	movs	r0, #10
 8004a2a:	f002 f86b 	bl	8006b04 <HAL_Delay>
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <MPU_init>:


/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	807b      	strh	r3, [r7, #2]


	//Requiert un SPI pour fonctionner
	if(hspi == NULL)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <MPU_init+0x18>
		return SENSOR_REQUEST_FAIL ;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e090      	b.n	8004b72 <MPU_init+0x13a>


	//CS pin must be high by default
	MPU_cs_unlock(mpu);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7ff ffa8 	bl	80049a6 <MPU_cs_unlock>
	HAL_Delay(1);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f002 f854 	bl	8006b04 <HAL_Delay>
	TIME_delay_us_blocking(1);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f7fe ff33 	bl	80038c8 <TIME_delay_us_blocking>

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	73da      	strb	r2, [r3, #15]

	//SPI slow pdt l'init, max si 1Mhz for the mpu
	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d102      	bne.n	8004a78 <MPU_init+0x40>
		MPU_spi_slow(mpu);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7ff ffa7 	bl	80049c6 <MPU_spi_slow>


	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f103 021a 	add.w	r2, r3, #26
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f103 0212 	add.w	r2, r3, #18
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	645a      	str	r2, [r3, #68]	; 0x44


	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22d0      	movs	r2, #208	; 0xd0
 8004aa2:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 8004aa4:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <MPU_init+0x144>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4a35      	ldr	r2, [pc, #212]	; (8004b80 <MPU_init+0x148>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 8004ab2:	4b32      	ldr	r3, [pc, #200]	; (8004b7c <MPU_init+0x144>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	b2d1      	uxtb	r1, r2
 8004aba:	4a30      	ldr	r2, [pc, #192]	; (8004b7c <MPU_init+0x144>)
 8004abc:	7011      	strb	r1, [r2, #0]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4a30      	ldr	r2, [pc, #192]	; (8004b84 <MPU_init+0x14c>)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Wakeup mpu
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x80} ;
 8004ac8:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <MPU_init+0x150>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	83bb      	strh	r3, [r7, #28]
	MPU_cs_lock(mpu);
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff59 	bl	8004986 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6858      	ldr	r0, [r3, #4]
 8004ad8:	f107 011c 	add.w	r1, r7, #28
 8004adc:	2302      	movs	r3, #2
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f004 f854 	bl	8008b8c <HAL_SPI_Transmit>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff ff5a 	bl	80049a6 <MPU_cs_unlock>

	HAL_Delay(150);
 8004af2:	2096      	movs	r0, #150	; 0x96
 8004af4:	f002 f806 	bl	8006b04 <HAL_Delay>

	//Clock select
	uint8_t mpu_clock_sel_pll_gyroz[] = {MPU6050_PWR_MGMT_1, 0x03};
 8004af8:	4b24      	ldr	r3, [pc, #144]	; (8004b8c <MPU_init+0x154>)
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	833b      	strh	r3, [r7, #24]
	MPU_cs_lock(mpu);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff ff41 	bl	8004986 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_clock_sel_pll_gyroz, 2, 2);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6858      	ldr	r0, [r3, #4]
 8004b08:	f107 0118 	add.w	r1, r7, #24
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f004 f83c 	bl	8008b8c <HAL_SPI_Transmit>
 8004b14:	4603      	mov	r3, r0
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ff42 	bl	80049a6 <MPU_cs_unlock>

	HAL_Delay(15);
 8004b22:	200f      	movs	r0, #15
 8004b24:	f001 ffee 	bl	8006b04 <HAL_Delay>

	//Disable I2C
	uint8_t mpu_disable_i2c[] = {MPU6050_USER_CTRL, 0x10};
 8004b28:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <MPU_init+0x158>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	82bb      	strh	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff ff29 	bl	8004986 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_disable_i2c, 2, 2);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6858      	ldr	r0, [r3, #4]
 8004b38:	f107 0114 	add.w	r1, r7, #20
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f004 f824 	bl	8008b8c <HAL_SPI_Transmit>
 8004b44:	4603      	mov	r3, r0
 8004b46:	461a      	mov	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7ff ff2a 	bl	80049a6 <MPU_cs_unlock>

	TIME_delay_us_blocking(2);
 8004b52:	2002      	movs	r0, #2
 8004b54:	f7fe feb8 	bl	80038c8 <TIME_delay_us_blocking>
//	MPU_cs_lock(mpu);
//	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, set_dlpf, 2, 2);
//	MPU_cs_unlock(mpu);

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	7b9b      	ldrb	r3, [r3, #14]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <MPU_init+0x132>
		mpu->state = SENSOR_ERROR ;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2204      	movs	r2, #4
 8004b64:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004b66:	2302      	movs	r3, #2
 8004b68:	e003      	b.n	8004b72 <MPU_init+0x13a>
	}

	mpu->state = SENSOR_IDDLE ;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20001a74 	.word	0x20001a74
 8004b80:	20001a70 	.word	0x20001a70
 8004b84:	20001a6c 	.word	0x20001a6c
 8004b88:	0800f78c 	.word	0x0800f78c
 8004b8c:	0800f790 	.word	0x0800f790
 8004b90:	0800f794 	.word	0x0800f794

08004b94 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	7afa      	ldrb	r2, [r7, #11]
 8004ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	7bdb      	ldrb	r3, [r3, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e096      	b.n	8004cea <MPU_init_gyro+0x156>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d102      	bne.n	8004bcc <MPU_init_gyro+0x38>
		MPU_spi_slow(mpu);
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff fefd 	bl	80049c6 <MPU_spi_slow>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8004bcc:	239b      	movs	r3, #155	; 0x9b
 8004bce:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff fed8 	bl	8004986 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6858      	ldr	r0, [r3, #4]
 8004bda:	f107 0214 	add.w	r2, r7, #20
 8004bde:	f107 0114 	add.w	r1, r7, #20
 8004be2:	2302      	movs	r3, #2
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	2302      	movs	r3, #2
 8004be8:	f004 f904 	bl	8008df4 <HAL_SPI_TransmitReceive>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff fed6 	bl	80049a6 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	7b9b      	ldrb	r3, [r3, #14]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d122      	bne.n	8004c48 <MPU_init_gyro+0xb4>
		HAL_Delay(1);
 8004c02:	2001      	movs	r0, #1
 8004c04:	f001 ff7e 	bl	8006b04 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff febc 	bl	8004986 <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 8004c0e:	231b      	movs	r3, #27
 8004c10:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8004c12:	7d7b      	ldrb	r3, [r7, #21]
 8004c14:	b25b      	sxtb	r3, r3
 8004c16:	f023 0318 	bic.w	r3, r3, #24
 8004c1a:	b25a      	sxtb	r2, r3
 8004c1c:	7afb      	ldrb	r3, [r7, #11]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	b25b      	sxtb	r3, r3
 8004c22:	4313      	orrs	r3, r2
 8004c24:	b25b      	sxtb	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6858      	ldr	r0, [r3, #4]
 8004c2e:	f107 0114 	add.w	r1, r7, #20
 8004c32:	2302      	movs	r3, #2
 8004c34:	2202      	movs	r2, #2
 8004c36:	f003 ffa9 	bl	8008b8c <HAL_SPI_Transmit>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff feaf 	bl	80049a6 <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	7b9b      	ldrb	r3, [r3, #14]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d124      	bne.n	8004c9a <MPU_init_gyro+0x106>
		uint8_t temp2 = temp[1];
 8004c50:	7d7b      	ldrb	r3, [r7, #21]
 8004c52:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8004c54:	239b      	movs	r3, #155	; 0x9b
 8004c56:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004c58:	2001      	movs	r0, #1
 8004c5a:	f001 ff53 	bl	8006b04 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff fe91 	bl	8004986 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6858      	ldr	r0, [r3, #4]
 8004c68:	f107 0214 	add.w	r2, r7, #20
 8004c6c:	f107 0114 	add.w	r1, r7, #20
 8004c70:	2302      	movs	r3, #2
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	2302      	movs	r3, #2
 8004c76:	f004 f8bd 	bl	8008df4 <HAL_SPI_TransmitReceive>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff fe8f 	bl	80049a6 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8004c88:	7d7b      	ldrb	r3, [r7, #21]
 8004c8a:	7dfa      	ldrb	r2, [r7, #23]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d004      	beq.n	8004c9a <MPU_init_gyro+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2204      	movs	r2, #4
 8004c94:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8004c96:	2302      	movs	r3, #2
 8004c98:	e027      	b.n	8004cea <MPU_init_gyro+0x156>

	}



	if(mpu->hal_state != HAL_OK)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	7b9b      	ldrb	r3, [r3, #14]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <MPU_init_gyro+0x118>
	{
		mpu->state = SENSOR_ERROR ;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e01e      	b.n	8004cea <MPU_init_gyro+0x156>
	}

	switch(gyro_range){
 8004cac:	7afb      	ldrb	r3, [r7, #11]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d81a      	bhi.n	8004ce8 <MPU_init_gyro+0x154>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <MPU_init_gyro+0x124>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004cd1 	.word	0x08004cd1
 8004cc0:	08004cd9 	.word	0x08004cd9
 8004cc4:	08004ce1 	.word	0x08004ce1
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <MPU_init_gyro+0x160>)
 8004ccc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004cce:	e00b      	b.n	8004ce8 <MPU_init_gyro+0x154>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <MPU_init_gyro+0x164>)
 8004cd4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004cd6:	e007      	b.n	8004ce8 <MPU_init_gyro+0x154>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a08      	ldr	r2, [pc, #32]	; (8004cfc <MPU_init_gyro+0x168>)
 8004cdc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004cde:	e003      	b.n	8004ce8 <MPU_init_gyro+0x154>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a07      	ldr	r2, [pc, #28]	; (8004d00 <MPU_init_gyro+0x16c>)
 8004ce4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004ce6:	bf00      	nop
	}

	return SENSOR_REQUEST_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	3bfa232d 	.word	0x3bfa232d
 8004cf8:	3c7a232d 	.word	0x3c7a232d
 8004cfc:	3cf9c190 	.word	0x3cf9c190
 8004d00:	3d79c190 	.word	0x3d79c190

08004d04 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	7afa      	ldrb	r2, [r7, #11]
 8004d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	7bdb      	ldrb	r3, [r3, #15]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e095      	b.n	8004e58 <MPU_init_acc+0x154>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <MPU_init_acc+0x38>
			MPU_spi_slow(mpu);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fe45 	bl	80049c6 <MPU_spi_slow>

	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8004d3c:	239c      	movs	r3, #156	; 0x9c
 8004d3e:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fe20 	bl	8004986 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6858      	ldr	r0, [r3, #4]
 8004d4a:	f107 0214 	add.w	r2, r7, #20
 8004d4e:	f107 0114 	add.w	r1, r7, #20
 8004d52:	2302      	movs	r3, #2
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2302      	movs	r3, #2
 8004d58:	f004 f84c 	bl	8008df4 <HAL_SPI_TransmitReceive>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff fe1e 	bl	80049a6 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	7b9b      	ldrb	r3, [r3, #14]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d122      	bne.n	8004db8 <MPU_init_acc+0xb4>
		HAL_Delay(1);
 8004d72:	2001      	movs	r0, #1
 8004d74:	f001 fec6 	bl	8006b04 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f7ff fe04 	bl	8004986 <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 8004d7e:	231c      	movs	r3, #28
 8004d80:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 8004d82:	7d7b      	ldrb	r3, [r7, #21]
 8004d84:	b25b      	sxtb	r3, r3
 8004d86:	f023 0318 	bic.w	r3, r3, #24
 8004d8a:	b25a      	sxtb	r2, r3
 8004d8c:	7afb      	ldrb	r3, [r7, #11]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	4313      	orrs	r3, r2
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6858      	ldr	r0, [r3, #4]
 8004d9e:	f107 0114 	add.w	r1, r7, #20
 8004da2:	2302      	movs	r3, #2
 8004da4:	2202      	movs	r2, #2
 8004da6:	f003 fef1 	bl	8008b8c <HAL_SPI_Transmit>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f7ff fdf7 	bl	80049a6 <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	7b9b      	ldrb	r3, [r3, #14]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d124      	bne.n	8004e0a <MPU_init_acc+0x106>
		uint8_t temp2 = temp[1];
 8004dc0:	7d7b      	ldrb	r3, [r7, #21]
 8004dc2:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8004dc4:	239c      	movs	r3, #156	; 0x9c
 8004dc6:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8004dc8:	2001      	movs	r0, #1
 8004dca:	f001 fe9b 	bl	8006b04 <HAL_Delay>
		MPU_cs_lock(mpu);
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fdd9 	bl	8004986 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6858      	ldr	r0, [r3, #4]
 8004dd8:	f107 0214 	add.w	r2, r7, #20
 8004ddc:	f107 0114 	add.w	r1, r7, #20
 8004de0:	2302      	movs	r3, #2
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	2302      	movs	r3, #2
 8004de6:	f004 f805 	bl	8008df4 <HAL_SPI_TransmitReceive>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff fdd7 	bl	80049a6 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8004df8:	7d7b      	ldrb	r3, [r7, #21]
 8004dfa:	7dfa      	ldrb	r2, [r7, #23]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d004      	beq.n	8004e0a <MPU_init_acc+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2204      	movs	r2, #4
 8004e04:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8004e06:	2302      	movs	r3, #2
 8004e08:	e026      	b.n	8004e58 <MPU_init_acc+0x154>
		}
	}



	switch(acc_range){
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d81f      	bhi.n	8004e50 <MPU_init_acc+0x14c>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <MPU_init_acc+0x114>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e33 	.word	0x08004e33
 8004e20:	08004e3d 	.word	0x08004e3d
 8004e24:	08004e47 	.word	0x08004e47
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8004e2e:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004e30:	e00e      	b.n	8004e50 <MPU_init_acc+0x14c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8004e38:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004e3a:	e009      	b.n	8004e50 <MPU_init_acc+0x14c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004e44:	e004      	b.n	8004e50 <MPU_init_acc+0x14c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8004e4c:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8004e4e:	bf00      	nop
	}
	MPU_spi_fast(mpu);
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f7ff fdd4 	bl	80049fe <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	7bdb      	ldrb	r3, [r3, #15]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 8004e70:	2302      	movs	r3, #2
 8004e72:	e030      	b.n	8004ed6 <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 8004e74:	23bb      	movs	r3, #187	; 0xbb
 8004e76:	723b      	strb	r3, [r7, #8]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	727b      	strb	r3, [r7, #9]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	72bb      	strb	r3, [r7, #10]
 8004e80:	2300      	movs	r3, #0
 8004e82:	72fb      	strb	r3, [r7, #11]
 8004e84:	2300      	movs	r3, #0
 8004e86:	733b      	strb	r3, [r7, #12]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff fd7a 	bl	8004986 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6858      	ldr	r0, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	f107 0108 	add.w	r1, r7, #8
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2306      	movs	r3, #6
 8004ea4:	f003 ffa6 	bl	8008df4 <HAL_SPI_TransmitReceive>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fd78 	bl	80049a6 <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	7b9b      	ldrb	r3, [r3, #14]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d101      	bne.n	8004ec2 <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e009      	b.n	8004ed6 <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	7b9b      	ldrb	r3, [r3, #14]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	e003      	b.n	8004ed6 <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fcf3 	bl	80048ba <convert_acc>
	return SENSOR_REQUEST_OK ;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 8004ee6:	f107 0308 	add.w	r3, r7, #8
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
 8004ef2:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 8004ef4:	23bb      	movs	r3, #187	; 0xbb
 8004ef6:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fd44 	bl	8004986 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6858      	ldr	r0, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f103 0212 	add.w	r2, r3, #18
 8004f08:	f107 0108 	add.w	r1, r7, #8
 8004f0c:	230e      	movs	r3, #14
 8004f0e:	f004 f913 	bl	8009138 <HAL_SPI_TransmitReceive_DMA>
 8004f12:	4603      	mov	r3, r0
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7b9b      	ldrb	r3, [r3, #14]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2203      	movs	r2, #3
 8004f26:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e009      	b.n	8004f46 <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	7b9b      	ldrb	r3, [r3, #14]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d101      	bne.n	8004f3e <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e003      	b.n	8004f46 <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8004f44:	2302      	movs	r3, #2
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fd25 	bl	80049a6 <MPU_cs_unlock>


	switch(mpu->dma_state){
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	7c1b      	ldrb	r3, [r3, #16]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d00b      	beq.n	8004f7c <MPU_dma_transmit_complete+0x2e>
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d010      	beq.n	8004f8a <MPU_dma_transmit_complete+0x3c>
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d000      	beq.n	8004f6e <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 8004f6c:	e014      	b.n	8004f98 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fc40 	bl	80047f4 <convert_gyro>
			mpu->gyro_data_callback();
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	4798      	blx	r3
			break;
 8004f7a:	e00d      	b.n	8004f98 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fc9c 	bl	80048ba <convert_acc>
			mpu->acc_data_callback();
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f86:	4798      	blx	r3
			break;
 8004f88:	e006      	b.n	8004f98 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7ff fc32 	bl	80047f4 <convert_gyro>
			mpu->gyro_data_callback();
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	4798      	blx	r3
			break;
 8004f96:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	741a      	strb	r2, [r3, #16]
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7c1b      	ldrb	r3, [r3, #16]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d105      	bne.n	8004fc2 <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff fc7f 	bl	80048ba <convert_acc>
		mpu->acc_data_callback();
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fc0:	4798      	blx	r3
	}
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 8004fd4:	4b06      	ldr	r3, [pc, #24]	; (8004ff0 <HAL_SPI_TxRxCpltCallback+0x24>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d104      	bne.n	8004fe8 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_SPI_TxRxCpltCallback+0x28>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ffb3 	bl	8004f4e <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 8004fe8:	bf00      	nop
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20001a6c 	.word	0x20001a6c
 8004ff4:	20001a70 	.word	0x20001a70

08004ff8 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d104      	bne.n	8005014 <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff ffc9 	bl	8004fa6 <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20001a6c 	.word	0x20001a6c
 8005020:	20001a70 	.word	0x20001a70

08005024 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800502a:	463b      	mov	r3, r7
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <MX_ADC2_Init+0x98>)
 8005038:	4a21      	ldr	r2, [pc, #132]	; (80050c0 <MX_ADC2_Init+0x9c>)
 800503a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <MX_ADC2_Init+0x98>)
 800503e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005042:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <MX_ADC2_Init+0x98>)
 8005046:	2200      	movs	r2, #0
 8005048:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800504a:	4b1c      	ldr	r3, [pc, #112]	; (80050bc <MX_ADC2_Init+0x98>)
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <MX_ADC2_Init+0x98>)
 8005052:	2201      	movs	r2, #1
 8005054:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <MX_ADC2_Init+0x98>)
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800505e:	4b17      	ldr	r3, [pc, #92]	; (80050bc <MX_ADC2_Init+0x98>)
 8005060:	2200      	movs	r2, #0
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <MX_ADC2_Init+0x98>)
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <MX_ADC2_Init+0xa0>)
 8005068:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <MX_ADC2_Init+0x98>)
 800506c:	2200      	movs	r2, #0
 800506e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005070:	4b12      	ldr	r3, [pc, #72]	; (80050bc <MX_ADC2_Init+0x98>)
 8005072:	2201      	movs	r2, #1
 8005074:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005076:	4b11      	ldr	r3, [pc, #68]	; (80050bc <MX_ADC2_Init+0x98>)
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <MX_ADC2_Init+0x98>)
 8005080:	2201      	movs	r2, #1
 8005082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005084:	480d      	ldr	r0, [pc, #52]	; (80050bc <MX_ADC2_Init+0x98>)
 8005086:	f001 fd5f 	bl	8006b48 <HAL_ADC_Init>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005090:	f000 fbc8 	bl	8005824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005094:	2309      	movs	r3, #9
 8005096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005098:	2301      	movs	r3, #1
 800509a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050a0:	463b      	mov	r3, r7
 80050a2:	4619      	mov	r1, r3
 80050a4:	4805      	ldr	r0, [pc, #20]	; (80050bc <MX_ADC2_Init+0x98>)
 80050a6:	f001 fea3 	bl	8006df0 <HAL_ADC_ConfigChannel>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80050b0:	f000 fbb8 	bl	8005824 <Error_Handler>
  }

}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20001a94 	.word	0x20001a94
 80050c0:	40012100 	.word	0x40012100
 80050c4:	0f000001 	.word	0x0f000001

080050c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	; 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d0:	f107 0314 	add.w	r3, r7, #20
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	605a      	str	r2, [r3, #4]
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <HAL_ADC_MspInit+0x110>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d172      	bne.n	80051d0 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	4b3b      	ldr	r3, [pc, #236]	; (80051dc <HAL_ADC_MspInit+0x114>)
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	4a3a      	ldr	r2, [pc, #232]	; (80051dc <HAL_ADC_MspInit+0x114>)
 80050f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f8:	6453      	str	r3, [r2, #68]	; 0x44
 80050fa:	4b38      	ldr	r3, [pc, #224]	; (80051dc <HAL_ADC_MspInit+0x114>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b34      	ldr	r3, [pc, #208]	; (80051dc <HAL_ADC_MspInit+0x114>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	4a33      	ldr	r2, [pc, #204]	; (80051dc <HAL_ADC_MspInit+0x114>)
 8005110:	f043 0304 	orr.w	r3, r3, #4
 8005114:	6313      	str	r3, [r2, #48]	; 0x30
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_ADC_MspInit+0x114>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	60bb      	str	r3, [r7, #8]
 8005126:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <HAL_ADC_MspInit+0x114>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	4a2c      	ldr	r2, [pc, #176]	; (80051dc <HAL_ADC_MspInit+0x114>)
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	6313      	str	r3, [r2, #48]	; 0x30
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <HAL_ADC_MspInit+0x114>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	60bb      	str	r3, [r7, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 800513e:	2302      	movs	r3, #2
 8005140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005142:	2303      	movs	r3, #3
 8005144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 800514a:	f107 0314 	add.w	r3, r7, #20
 800514e:	4619      	mov	r1, r3
 8005150:	4823      	ldr	r0, [pc, #140]	; (80051e0 <HAL_ADC_MspInit+0x118>)
 8005152:	f002 fd8f 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8005156:	2302      	movs	r3, #2
 8005158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800515a:	2303      	movs	r3, #3
 800515c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8005162:	f107 0314 	add.w	r3, r7, #20
 8005166:	4619      	mov	r1, r3
 8005168:	481e      	ldr	r0, [pc, #120]	; (80051e4 <HAL_ADC_MspInit+0x11c>)
 800516a:	f002 fd83 	bl	8007c74 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800516e:	4b1e      	ldr	r3, [pc, #120]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 8005170:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <HAL_ADC_MspInit+0x124>)
 8005172:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 8005176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800517a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800517c:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005182:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 8005184:	2200      	movs	r2, #0
 8005186:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005188:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 800518a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800518e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005190:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 8005192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005196:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005198:	4b13      	ldr	r3, [pc, #76]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 800519a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800519e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 80051a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051a6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051ae:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80051b4:	480c      	ldr	r0, [pc, #48]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 80051b6:	f002 f9cd 	bl	8007554 <HAL_DMA_Init>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80051c0:	f000 fb30 	bl	8005824 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38
 80051ca:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <HAL_ADC_MspInit+0x120>)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80051d0:	bf00      	nop
 80051d2:	3728      	adds	r7, #40	; 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40012100 	.word	0x40012100
 80051dc:	40023800 	.word	0x40023800
 80051e0:	40020800 	.word	0x40020800
 80051e4:	40020400 	.word	0x40020400
 80051e8:	20001adc 	.word	0x20001adc
 80051ec:	40026440 	.word	0x40026440

080051f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	4b3f      	ldr	r3, [pc, #252]	; (80052f8 <MX_DMA_Init+0x108>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	4a3e      	ldr	r2, [pc, #248]	; (80052f8 <MX_DMA_Init+0x108>)
 8005200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005204:	6313      	str	r3, [r2, #48]	; 0x30
 8005206:	4b3c      	ldr	r3, [pc, #240]	; (80052f8 <MX_DMA_Init+0x108>)
 8005208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	603b      	str	r3, [r7, #0]
 8005216:	4b38      	ldr	r3, [pc, #224]	; (80052f8 <MX_DMA_Init+0x108>)
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <MX_DMA_Init+0x108>)
 800521c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005220:	6313      	str	r3, [r2, #48]	; 0x30
 8005222:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <MX_DMA_Init+0x108>)
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	200b      	movs	r0, #11
 8005234:	f002 f957 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005238:	200b      	movs	r0, #11
 800523a:	f002 f970 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	200c      	movs	r0, #12
 8005244:	f002 f94f 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005248:	200c      	movs	r0, #12
 800524a:	f002 f968 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800524e:	2200      	movs	r2, #0
 8005250:	2100      	movs	r1, #0
 8005252:	200e      	movs	r0, #14
 8005254:	f002 f947 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005258:	200e      	movs	r0, #14
 800525a:	f002 f960 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800525e:	2200      	movs	r2, #0
 8005260:	2100      	movs	r1, #0
 8005262:	200f      	movs	r0, #15
 8005264:	f002 f93f 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005268:	200f      	movs	r0, #15
 800526a:	f002 f958 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800526e:	2200      	movs	r2, #0
 8005270:	2100      	movs	r1, #0
 8005272:	2010      	movs	r0, #16
 8005274:	f002 f937 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005278:	2010      	movs	r0, #16
 800527a:	f002 f950 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	2100      	movs	r1, #0
 8005282:	2011      	movs	r0, #17
 8005284:	f002 f92f 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005288:	2011      	movs	r0, #17
 800528a:	f002 f948 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800528e:	2200      	movs	r2, #0
 8005290:	2100      	movs	r1, #0
 8005292:	202f      	movs	r0, #47	; 0x2f
 8005294:	f002 f927 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8005298:	202f      	movs	r0, #47	; 0x2f
 800529a:	f002 f940 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800529e:	2200      	movs	r2, #0
 80052a0:	2100      	movs	r1, #0
 80052a2:	2038      	movs	r0, #56	; 0x38
 80052a4:	f002 f91f 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80052a8:	2038      	movs	r0, #56	; 0x38
 80052aa:	f002 f938 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80052ae:	2200      	movs	r2, #0
 80052b0:	2100      	movs	r1, #0
 80052b2:	2039      	movs	r0, #57	; 0x39
 80052b4:	f002 f917 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80052b8:	2039      	movs	r0, #57	; 0x39
 80052ba:	f002 f930 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80052be:	2200      	movs	r2, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	203a      	movs	r0, #58	; 0x3a
 80052c4:	f002 f90f 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80052c8:	203a      	movs	r0, #58	; 0x3a
 80052ca:	f002 f928 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80052ce:	2200      	movs	r2, #0
 80052d0:	2100      	movs	r1, #0
 80052d2:	203b      	movs	r0, #59	; 0x3b
 80052d4:	f002 f907 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80052d8:	203b      	movs	r0, #59	; 0x3b
 80052da:	f002 f920 	bl	800751e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80052de:	2200      	movs	r2, #0
 80052e0:	2100      	movs	r1, #0
 80052e2:	2045      	movs	r0, #69	; 0x45
 80052e4:	f002 f8ff 	bl	80074e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80052e8:	2045      	movs	r0, #69	; 0x45
 80052ea:	f002 f918 	bl	800751e <HAL_NVIC_EnableIRQ>

}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800

080052fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005302:	f107 0314 	add.w	r3, r7, #20
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	60da      	str	r2, [r3, #12]
 8005310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	4b44      	ldr	r3, [pc, #272]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531a:	4a43      	ldr	r2, [pc, #268]	; (8005428 <MX_GPIO_Init+0x12c>)
 800531c:	f043 0304 	orr.w	r3, r3, #4
 8005320:	6313      	str	r3, [r2, #48]	; 0x30
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	613b      	str	r3, [r7, #16]
 800532c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	4b3d      	ldr	r3, [pc, #244]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005336:	4a3c      	ldr	r2, [pc, #240]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533c:	6313      	str	r3, [r2, #48]	; 0x30
 800533e:	4b3a      	ldr	r3, [pc, #232]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	4b36      	ldr	r3, [pc, #216]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	4a35      	ldr	r2, [pc, #212]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	6313      	str	r3, [r2, #48]	; 0x30
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <MX_GPIO_Init+0x12c>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	60bb      	str	r3, [r7, #8]
 8005364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	607b      	str	r3, [r7, #4]
 800536a:	4b2f      	ldr	r3, [pc, #188]	; (8005428 <MX_GPIO_Init+0x12c>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	6313      	str	r3, [r2, #48]	; 0x30
 8005376:	4b2c      	ldr	r3, [pc, #176]	; (8005428 <MX_GPIO_Init+0x12c>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8005382:	2200      	movs	r2, #0
 8005384:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8005388:	4828      	ldr	r0, [pc, #160]	; (800542c <MX_GPIO_Init+0x130>)
 800538a:	f002 fe0d 	bl	8007fa8 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 800538e:	2201      	movs	r2, #1
 8005390:	2101      	movs	r1, #1
 8005392:	4826      	ldr	r0, [pc, #152]	; (800542c <MX_GPIO_Init+0x130>)
 8005394:	f002 fe08 	bl	8007fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8005398:	2200      	movs	r2, #0
 800539a:	2101      	movs	r1, #1
 800539c:	4824      	ldr	r0, [pc, #144]	; (8005430 <MX_GPIO_Init+0x134>)
 800539e:	f002 fe03 	bl	8007fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 80053a2:	2200      	movs	r2, #0
 80053a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80053a8:	4822      	ldr	r0, [pc, #136]	; (8005434 <MX_GPIO_Init+0x138>)
 80053aa:	f002 fdfd 	bl	8007fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 80053ae:	f24e 231d 	movw	r3, #57885	; 0xe21d
 80053b2:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b4:	2301      	movs	r3, #1
 80053b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053bc:	2300      	movs	r3, #0
 80053be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	4619      	mov	r1, r3
 80053c6:	4819      	ldr	r0, [pc, #100]	; (800542c <MX_GPIO_Init+0x130>)
 80053c8:	f002 fc54 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 80053cc:	2301      	movs	r3, #1
 80053ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053d0:	2301      	movs	r3, #1
 80053d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d8:	2300      	movs	r3, #0
 80053da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	4619      	mov	r1, r3
 80053e2:	4813      	ldr	r0, [pc, #76]	; (8005430 <MX_GPIO_Init+0x134>)
 80053e4:	f002 fc46 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 80053e8:	2302      	movs	r3, #2
 80053ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	4619      	mov	r1, r3
 80053fa:	480d      	ldr	r0, [pc, #52]	; (8005430 <MX_GPIO_Init+0x134>)
 80053fc:	f002 fc3a 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8005400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005406:	2301      	movs	r3, #1
 8005408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540a:	2300      	movs	r3, #0
 800540c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800540e:	2300      	movs	r3, #0
 8005410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8005412:	f107 0314 	add.w	r3, r7, #20
 8005416:	4619      	mov	r1, r3
 8005418:	4806      	ldr	r0, [pc, #24]	; (8005434 <MX_GPIO_Init+0x138>)
 800541a:	f002 fc2b 	bl	8007c74 <HAL_GPIO_Init>

}
 800541e:	bf00      	nop
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	40020800 	.word	0x40020800
 8005430:	40020000 	.word	0x40020000
 8005434:	40020400 	.word	0x40020400

08005438 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800543c:	4b12      	ldr	r3, [pc, #72]	; (8005488 <MX_I2C1_Init+0x50>)
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <MX_I2C1_Init+0x54>)
 8005440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <MX_I2C1_Init+0x50>)
 8005444:	4a12      	ldr	r2, [pc, #72]	; (8005490 <MX_I2C1_Init+0x58>)
 8005446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005448:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <MX_I2C1_Init+0x50>)
 800544a:	2200      	movs	r2, #0
 800544c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800544e:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <MX_I2C1_Init+0x50>)
 8005450:	2200      	movs	r2, #0
 8005452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005454:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <MX_I2C1_Init+0x50>)
 8005456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800545a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <MX_I2C1_Init+0x50>)
 800545e:	2200      	movs	r2, #0
 8005460:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <MX_I2C1_Init+0x50>)
 8005464:	2200      	movs	r2, #0
 8005466:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005468:	4b07      	ldr	r3, [pc, #28]	; (8005488 <MX_I2C1_Init+0x50>)
 800546a:	2200      	movs	r2, #0
 800546c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <MX_I2C1_Init+0x50>)
 8005470:	2200      	movs	r2, #0
 8005472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005474:	4804      	ldr	r0, [pc, #16]	; (8005488 <MX_I2C1_Init+0x50>)
 8005476:	f002 fdb1 	bl	8007fdc <HAL_I2C_Init>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005480:	f000 f9d0 	bl	8005824 <Error_Handler>
  }

}
 8005484:	bf00      	nop
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20001b9c 	.word	0x20001b9c
 800548c:	40005400 	.word	0x40005400
 8005490:	00061a80 	.word	0x00061a80

08005494 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08a      	sub	sp, #40	; 0x28
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549c:	f107 0314 	add.w	r3, r7, #20
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a47      	ldr	r2, [pc, #284]	; (80055d0 <HAL_I2C_MspInit+0x13c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	f040 8088 	bne.w	80055c8 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	4b45      	ldr	r3, [pc, #276]	; (80055d4 <HAL_I2C_MspInit+0x140>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4a44      	ldr	r2, [pc, #272]	; (80055d4 <HAL_I2C_MspInit+0x140>)
 80054c2:	f043 0302 	orr.w	r3, r3, #2
 80054c6:	6313      	str	r3, [r2, #48]	; 0x30
 80054c8:	4b42      	ldr	r3, [pc, #264]	; (80055d4 <HAL_I2C_MspInit+0x140>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054d4:	23c0      	movs	r3, #192	; 0xc0
 80054d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054d8:	2312      	movs	r3, #18
 80054da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054dc:	2301      	movs	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e0:	2303      	movs	r3, #3
 80054e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80054e4:	2304      	movs	r3, #4
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e8:	f107 0314 	add.w	r3, r7, #20
 80054ec:	4619      	mov	r1, r3
 80054ee:	483a      	ldr	r0, [pc, #232]	; (80055d8 <HAL_I2C_MspInit+0x144>)
 80054f0:	f002 fbc0 	bl	8007c74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <HAL_I2C_MspInit+0x140>)
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <HAL_I2C_MspInit+0x140>)
 80054fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005502:	6413      	str	r3, [r2, #64]	; 0x40
 8005504:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <HAL_I2C_MspInit+0x140>)
 8005506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005510:	4b32      	ldr	r3, [pc, #200]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005512:	4a33      	ldr	r2, [pc, #204]	; (80055e0 <HAL_I2C_MspInit+0x14c>)
 8005514:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8005516:	4b31      	ldr	r3, [pc, #196]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800551c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800551e:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005520:	2200      	movs	r2, #0
 8005522:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005524:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005526:	2200      	movs	r2, #0
 8005528:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800552a:	4b2c      	ldr	r3, [pc, #176]	; (80055dc <HAL_I2C_MspInit+0x148>)
 800552c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005530:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005532:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005534:	2200      	movs	r2, #0
 8005536:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005538:	4b28      	ldr	r3, [pc, #160]	; (80055dc <HAL_I2C_MspInit+0x148>)
 800553a:	2200      	movs	r2, #0
 800553c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005540:	2200      	movs	r2, #0
 8005542:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005544:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005546:	2200      	movs	r2, #0
 8005548:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800554a:	4b24      	ldr	r3, [pc, #144]	; (80055dc <HAL_I2C_MspInit+0x148>)
 800554c:	2200      	movs	r2, #0
 800554e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005550:	4822      	ldr	r0, [pc, #136]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005552:	f001 ffff 	bl	8007554 <HAL_DMA_Init>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800555c:	f000 f962 	bl	8005824 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a1e      	ldr	r2, [pc, #120]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
 8005566:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <HAL_I2C_MspInit+0x148>)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 800556e:	4a1e      	ldr	r2, [pc, #120]	; (80055e8 <HAL_I2C_MspInit+0x154>)
 8005570:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 8005574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005578:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 800557c:	2240      	movs	r2, #64	; 0x40
 800557e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005580:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 8005588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800558e:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 8005590:	2200      	movs	r2, #0
 8005592:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005594:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 8005596:	2200      	movs	r2, #0
 8005598:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800559a:	4b12      	ldr	r3, [pc, #72]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 800559c:	2200      	movs	r2, #0
 800559e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80055a0:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055a6:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80055ac:	480d      	ldr	r0, [pc, #52]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 80055ae:	f001 ffd1 	bl	8007554 <HAL_DMA_Init>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 80055b8:	f000 f934 	bl	8005824 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a09      	ldr	r2, [pc, #36]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <HAL_I2C_MspInit+0x150>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80055c8:	bf00      	nop
 80055ca:	3728      	adds	r7, #40	; 0x28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	40005400 	.word	0x40005400
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40020400 	.word	0x40020400
 80055dc:	20001bf0 	.word	0x20001bf0
 80055e0:	40026010 	.word	0x40026010
 80055e4:	20001b3c 	.word	0x20001b3c
 80055e8:	400260b8 	.word	0x400260b8

080055ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055f0:	f001 fa16 	bl	8006a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055f4:	f000 f8ac 	bl	8005750 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);	//Let the time to the components to start
 80055f8:	20c8      	movs	r0, #200	; 0xc8
 80055fa:	f001 fa83 	bl	8006b04 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055fe:	f7ff fe7d 	bl	80052fc <MX_GPIO_Init>
  MX_DMA_Init();
 8005602:	f7ff fdf5 	bl	80051f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8005606:	f7ff ff17 	bl	8005438 <MX_I2C1_Init>
  MX_SPI1_Init();
 800560a:	f000 f913 	bl	8005834 <MX_SPI1_Init>
  MX_SPI2_Init();
 800560e:	f000 f947 	bl	80058a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005612:	f000 fc25 	bl	8005e60 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8005616:	f000 fdab 	bl	8006170 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800561a:	f000 fdd3 	bl	80061c4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800561e:	f000 fdfb 	bl	8006218 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8005622:	f7ff fcff 	bl	8005024 <MX_ADC2_Init>
  MX_TIM2_Init();
 8005626:	f000 fce1 	bl	8005fec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);	//Let the time for the components to start
 800562a:	20c8      	movs	r0, #200	; 0xc8
 800562c:	f001 fa6a 	bl	8006b04 <HAL_Delay>

  //Init du baromètre
  //MS5611_init(&sys.sensors.ms5611, &hi2c1);

  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8005630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005634:	4a32      	ldr	r2, [pc, #200]	; (8005700 <main+0x114>)
 8005636:	4933      	ldr	r1, [pc, #204]	; (8005704 <main+0x118>)
 8005638:	4833      	ldr	r0, [pc, #204]	; (8005708 <main+0x11c>)
 800563a:	f7ff f9fd 	bl	8004a38 <MPU_init>
  HAL_Delay(200);	//Let the time for the components to start
 800563e:	20c8      	movs	r0, #200	; 0xc8
 8005640:	f001 fa60 	bl	8006b04 <HAL_Delay>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 8005644:	4930      	ldr	r1, [pc, #192]	; (8005708 <main+0x11c>)
 8005646:	4831      	ldr	r0, [pc, #196]	; (800570c <main+0x120>)
 8005648:	f7fe ff76 	bl	8004538 <GYRO_init>
  HAL_Delay(200);	//Let the time for the components to start
 800564c:	20c8      	movs	r0, #200	; 0xc8
 800564e:	f001 fa59 	bl	8006b04 <HAL_Delay>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 8005652:	492d      	ldr	r1, [pc, #180]	; (8005708 <main+0x11c>)
 8005654:	482e      	ldr	r0, [pc, #184]	; (8005710 <main+0x124>)
 8005656:	f7fe feb5 	bl	80043c4 <ACC_init>



  IHM_Init(&sys.ihm);
 800565a:	482e      	ldr	r0, [pc, #184]	; (8005714 <main+0x128>)
 800565c:	f7fc fe62 	bl	8002324 <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 8005660:	2301      	movs	r3, #1
 8005662:	2201      	movs	r2, #1
 8005664:	211e      	movs	r1, #30
 8005666:	2000      	movs	r0, #0
 8005668:	f7fc fe6c 	bl	8002344 <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 800566c:	2301      	movs	r3, #1
 800566e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005672:	211e      	movs	r1, #30
 8005674:	2001      	movs	r0, #1
 8005676:	f7fc fe65 	bl	8002344 <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 800567a:	2300      	movs	r3, #0
 800567c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8005680:	2100      	movs	r1, #0
 8005682:	2000      	movs	r0, #0
 8005684:	f7fc fecc 	bl	8002420 <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8005688:	2300      	movs	r3, #0
 800568a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800568e:	2100      	movs	r1, #0
 8005690:	2001      	movs	r0, #1
 8005692:	f7fc fec5 	bl	8002420 <IHM_Set_Sequences>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 8005696:	4920      	ldr	r1, [pc, #128]	; (8005718 <main+0x12c>)
 8005698:	4820      	ldr	r0, [pc, #128]	; (800571c <main+0x130>)
 800569a:	f7fe ff3a 	bl	8004512 <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 800569e:	4920      	ldr	r1, [pc, #128]	; (8005720 <main+0x134>)
 80056a0:	4820      	ldr	r0, [pc, #128]	; (8005724 <main+0x138>)
 80056a2:	f7fe f9df 	bl	8003a64 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 80056a6:	4a20      	ldr	r2, [pc, #128]	; (8005728 <main+0x13c>)
 80056a8:	4920      	ldr	r1, [pc, #128]	; (800572c <main+0x140>)
 80056aa:	481d      	ldr	r0, [pc, #116]	; (8005720 <main+0x134>)
 80056ac:	f006 f994 	bl	800b9d8 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 80056b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <main+0x124>)
 80056b6:	4915      	ldr	r1, [pc, #84]	; (800570c <main+0x120>)
 80056b8:	481d      	ldr	r0, [pc, #116]	; (8005730 <main+0x144>)
 80056ba:	f7fc f9b9 	bl	8001a30 <ORIENTATION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <main+0x148>)
 80056c0:	491b      	ldr	r1, [pc, #108]	; (8005730 <main+0x144>)
 80056c2:	481d      	ldr	r0, [pc, #116]	; (8005738 <main+0x14c>)
 80056c4:	f7fe fc98 	bl	8003ff8 <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.regulation.orientation, sys.propulsion.consigne);
 80056c8:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <main+0x148>)
 80056ca:	491b      	ldr	r1, [pc, #108]	; (8005738 <main+0x14c>)
 80056cc:	481b      	ldr	r0, [pc, #108]	; (800573c <main+0x150>)
 80056ce:	f7fe fe27 	bl	8004320 <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 80056d2:	491b      	ldr	r1, [pc, #108]	; (8005740 <main+0x154>)
 80056d4:	481b      	ldr	r0, [pc, #108]	; (8005744 <main+0x158>)
 80056d6:	f7fe f90d 	bl	80038f4 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 80056da:	491b      	ldr	r1, [pc, #108]	; (8005748 <main+0x15c>)
 80056dc:	481b      	ldr	r0, [pc, #108]	; (800574c <main+0x160>)
 80056de:	f000 ffcf 	bl	8006680 <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 80056e2:	480c      	ldr	r0, [pc, #48]	; (8005714 <main+0x128>)
 80056e4:	f7fc fc6a 	bl	8001fbc <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 80056e8:	480a      	ldr	r0, [pc, #40]	; (8005714 <main+0x128>)
 80056ea:	f7fd fcdf 	bl	80030ac <SCHEDULER_init>
  EVENT_init(&sys);
 80056ee:	4809      	ldr	r0, [pc, #36]	; (8005714 <main+0x128>)
 80056f0:	f7fd f9ea 	bl	8002ac8 <EVENT_init>

  DATA_LOGGER_Init(&sys);
 80056f4:	4807      	ldr	r0, [pc, #28]	; (8005714 <main+0x128>)
 80056f6:	f7fb fc27 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 80056fa:	f7fd fce9 	bl	80030d0 <SCHEDULER_run>
 80056fe:	e7fc      	b.n	80056fa <main+0x10e>
 8005700:	40020400 	.word	0x40020400
 8005704:	20002768 	.word	0x20002768
 8005708:	20001da0 	.word	0x20001da0
 800570c:	20001c80 	.word	0x20001c80
 8005710:	20001cf4 	.word	0x20001cf4
 8005714:	20001c50 	.word	0x20001c50
 8005718:	20001a94 	.word	0x20001a94
 800571c:	20001d5c 	.word	0x20001d5c
 8005720:	20001e68 	.word	0x20001e68
 8005724:	20001ec8 	.word	0x20001ec8
 8005728:	08003feb 	.word	0x08003feb
 800572c:	20002b38 	.word	0x20002b38
 8005730:	20001e34 	.word	0x20001e34
 8005734:	2000255c 	.word	0x2000255c
 8005738:	2000256c 	.word	0x2000256c
 800573c:	20002758 	.word	0x20002758
 8005740:	20002998 	.word	0x20002998
 8005744:	2000254c 	.word	0x2000254c
 8005748:	20002c78 	.word	0x20002c78
 800574c:	20001f20 	.word	0x20001f20

08005750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b094      	sub	sp, #80	; 0x50
 8005754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005756:	f107 0320 	add.w	r3, r7, #32
 800575a:	2230      	movs	r2, #48	; 0x30
 800575c:	2100      	movs	r1, #0
 800575e:	4618      	mov	r0, r3
 8005760:	f006 fcd8 	bl	800c114 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005764:	f107 030c 	add.w	r3, r7, #12
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	605a      	str	r2, [r3, #4]
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	60da      	str	r2, [r3, #12]
 8005772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005774:	2300      	movs	r3, #0
 8005776:	60bb      	str	r3, [r7, #8]
 8005778:	4b28      	ldr	r3, [pc, #160]	; (800581c <SystemClock_Config+0xcc>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	4a27      	ldr	r2, [pc, #156]	; (800581c <SystemClock_Config+0xcc>)
 800577e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005782:	6413      	str	r3, [r2, #64]	; 0x40
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <SystemClock_Config+0xcc>)
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005790:	2300      	movs	r3, #0
 8005792:	607b      	str	r3, [r7, #4]
 8005794:	4b22      	ldr	r3, [pc, #136]	; (8005820 <SystemClock_Config+0xd0>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a21      	ldr	r2, [pc, #132]	; (8005820 <SystemClock_Config+0xd0>)
 800579a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <SystemClock_Config+0xd0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80057ac:	2302      	movs	r3, #2
 80057ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80057b0:	2301      	movs	r3, #1
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80057b4:	2310      	movs	r3, #16
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80057b8:	2302      	movs	r3, #2
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80057c0:	2308      	movs	r3, #8
 80057c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80057c4:	23a8      	movs	r3, #168	; 0xa8
 80057c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80057c8:	2302      	movs	r3, #2
 80057ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80057cc:	2304      	movs	r3, #4
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057d0:	f107 0320 	add.w	r3, r7, #32
 80057d4:	4618      	mov	r0, r3
 80057d6:	f002 fd39 	bl	800824c <HAL_RCC_OscConfig>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80057e0:	f000 f820 	bl	8005824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057e4:	230f      	movs	r3, #15
 80057e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057e8:	2302      	movs	r3, #2
 80057ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80057f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80057f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80057f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80057fc:	f107 030c 	add.w	r3, r7, #12
 8005800:	2105      	movs	r1, #5
 8005802:	4618      	mov	r0, r3
 8005804:	f002 ff92 	bl	800872c <HAL_RCC_ClockConfig>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800580e:	f000 f809 	bl	8005824 <Error_Handler>
  }
}
 8005812:	bf00      	nop
 8005814:	3750      	adds	r7, #80	; 0x50
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40023800 	.word	0x40023800
 8005820:	40007000 	.word	0x40007000

08005824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <MX_SPI1_Init+0x64>)
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <MX_SPI1_Init+0x68>)
 800583c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800583e:	4b16      	ldr	r3, [pc, #88]	; (8005898 <MX_SPI1_Init+0x64>)
 8005840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005844:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005846:	4b14      	ldr	r3, [pc, #80]	; (8005898 <MX_SPI1_Init+0x64>)
 8005848:	2200      	movs	r2, #0
 800584a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800584c:	4b12      	ldr	r3, [pc, #72]	; (8005898 <MX_SPI1_Init+0x64>)
 800584e:	2200      	movs	r2, #0
 8005850:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <MX_SPI1_Init+0x64>)
 8005854:	2200      	movs	r2, #0
 8005856:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <MX_SPI1_Init+0x64>)
 800585a:	2200      	movs	r2, #0
 800585c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <MX_SPI1_Init+0x64>)
 8005860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005864:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <MX_SPI1_Init+0x64>)
 8005868:	2238      	movs	r2, #56	; 0x38
 800586a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <MX_SPI1_Init+0x64>)
 800586e:	2200      	movs	r2, #0
 8005870:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <MX_SPI1_Init+0x64>)
 8005874:	2200      	movs	r2, #0
 8005876:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005878:	4b07      	ldr	r3, [pc, #28]	; (8005898 <MX_SPI1_Init+0x64>)
 800587a:	2200      	movs	r2, #0
 800587c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800587e:	4b06      	ldr	r3, [pc, #24]	; (8005898 <MX_SPI1_Init+0x64>)
 8005880:	220a      	movs	r2, #10
 8005882:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005884:	4804      	ldr	r0, [pc, #16]	; (8005898 <MX_SPI1_Init+0x64>)
 8005886:	f003 f91d 	bl	8008ac4 <HAL_SPI_Init>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005890:	f7ff ffc8 	bl	8005824 <Error_Handler>
  }

}
 8005894:	bf00      	nop
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20002820 	.word	0x20002820
 800589c:	40013000 	.word	0x40013000

080058a0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <MX_SPI2_Init+0x64>)
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <MX_SPI2_Init+0x68>)
 80058a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80058aa:	4b16      	ldr	r3, [pc, #88]	; (8005904 <MX_SPI2_Init+0x64>)
 80058ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80058b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <MX_SPI2_Init+0x64>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <MX_SPI2_Init+0x64>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <MX_SPI2_Init+0x64>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <MX_SPI2_Init+0x64>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <MX_SPI2_Init+0x64>)
 80058cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80058d2:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <MX_SPI2_Init+0x64>)
 80058d4:	2228      	movs	r2, #40	; 0x28
 80058d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <MX_SPI2_Init+0x64>)
 80058da:	2200      	movs	r2, #0
 80058dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <MX_SPI2_Init+0x64>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e4:	4b07      	ldr	r3, [pc, #28]	; (8005904 <MX_SPI2_Init+0x64>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <MX_SPI2_Init+0x64>)
 80058ec:	220a      	movs	r2, #10
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80058f0:	4804      	ldr	r0, [pc, #16]	; (8005904 <MX_SPI2_Init+0x64>)
 80058f2:	f003 f8e7 	bl	8008ac4 <HAL_SPI_Init>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80058fc:	f7ff ff92 	bl	8005824 <Error_Handler>
  }

}
 8005900:	bf00      	nop
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20002768 	.word	0x20002768
 8005908:	40003800 	.word	0x40003800

0800590c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	; 0x30
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005914:	f107 031c 	add.w	r3, r7, #28
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	609a      	str	r2, [r3, #8]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a8e      	ldr	r2, [pc, #568]	; (8005b64 <HAL_SPI_MspInit+0x258>)
 800592a:	4293      	cmp	r3, r2
 800592c:	f040 8089 	bne.w	8005a42 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005930:	2300      	movs	r3, #0
 8005932:	61bb      	str	r3, [r7, #24]
 8005934:	4b8c      	ldr	r3, [pc, #560]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	4a8b      	ldr	r2, [pc, #556]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 800593a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800593e:	6453      	str	r3, [r2, #68]	; 0x44
 8005940:	4b89      	ldr	r3, [pc, #548]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005948:	61bb      	str	r3, [r7, #24]
 800594a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	4b85      	ldr	r3, [pc, #532]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	4a84      	ldr	r2, [pc, #528]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6313      	str	r3, [r2, #48]	; 0x30
 800595c:	4b82      	ldr	r3, [pc, #520]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005968:	23e0      	movs	r3, #224	; 0xe0
 800596a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800596c:	2302      	movs	r3, #2
 800596e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005974:	2303      	movs	r3, #3
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005978:	2305      	movs	r3, #5
 800597a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597c:	f107 031c 	add.w	r3, r7, #28
 8005980:	4619      	mov	r1, r3
 8005982:	487a      	ldr	r0, [pc, #488]	; (8005b6c <HAL_SPI_MspInit+0x260>)
 8005984:	f002 f976 	bl	8007c74 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005988:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 800598a:	4a7a      	ldr	r2, [pc, #488]	; (8005b74 <HAL_SPI_MspInit+0x268>)
 800598c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800598e:	4b78      	ldr	r3, [pc, #480]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 8005990:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005994:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005996:	4b76      	ldr	r3, [pc, #472]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 8005998:	2200      	movs	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800599c:	4b74      	ldr	r3, [pc, #464]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 800599e:	2200      	movs	r2, #0
 80059a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059a2:	4b73      	ldr	r3, [pc, #460]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059aa:	4b71      	ldr	r3, [pc, #452]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059b0:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80059b6:	4b6e      	ldr	r3, [pc, #440]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80059bc:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059be:	2200      	movs	r2, #0
 80059c0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059c2:	4b6b      	ldr	r3, [pc, #428]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80059c8:	4869      	ldr	r0, [pc, #420]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059ca:	f001 fdc3 	bl	8007554 <HAL_DMA_Init>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80059d4:	f7ff ff26 	bl	8005824 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a65      	ldr	r2, [pc, #404]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80059de:	4a64      	ldr	r2, [pc, #400]	; (8005b70 <HAL_SPI_MspInit+0x264>)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80059e4:	4b64      	ldr	r3, [pc, #400]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 80059e6:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <HAL_SPI_MspInit+0x270>)
 80059e8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80059ea:	4b63      	ldr	r3, [pc, #396]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 80059ec:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80059f0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059f2:	4b61      	ldr	r3, [pc, #388]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 80059f4:	2240      	movs	r2, #64	; 0x40
 80059f6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059f8:	4b5f      	ldr	r3, [pc, #380]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059fe:	4b5e      	ldr	r3, [pc, #376]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a04:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a06:	4b5c      	ldr	r3, [pc, #368]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a0c:	4b5a      	ldr	r3, [pc, #360]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005a12:	4b59      	ldr	r3, [pc, #356]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a18:	4b57      	ldr	r3, [pc, #348]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a1e:	4b56      	ldr	r3, [pc, #344]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005a24:	4854      	ldr	r0, [pc, #336]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a26:	f001 fd95 	bl	8007554 <HAL_DMA_Init>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8005a30:	f7ff fef8 	bl	8005824 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a50      	ldr	r2, [pc, #320]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a38:	649a      	str	r2, [r3, #72]	; 0x48
 8005a3a:	4a4f      	ldr	r2, [pc, #316]	; (8005b78 <HAL_SPI_MspInit+0x26c>)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005a40:	e08c      	b.n	8005b5c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a4e      	ldr	r2, [pc, #312]	; (8005b80 <HAL_SPI_MspInit+0x274>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	f040 8087 	bne.w	8005b5c <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005a4e:	2300      	movs	r3, #0
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	4b45      	ldr	r3, [pc, #276]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	4a44      	ldr	r2, [pc, #272]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005a5e:	4b42      	ldr	r3, [pc, #264]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a66:	613b      	str	r3, [r7, #16]
 8005a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	60fb      	str	r3, [r7, #12]
 8005a6e:	4b3e      	ldr	r3, [pc, #248]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	4a3d      	ldr	r2, [pc, #244]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7a:	4b3b      	ldr	r3, [pc, #236]	; (8005b68 <HAL_SPI_MspInit+0x25c>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005a86:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a94:	2303      	movs	r3, #3
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a98:	2305      	movs	r3, #5
 8005a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a9c:	f107 031c 	add.w	r3, r7, #28
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4838      	ldr	r0, [pc, #224]	; (8005b84 <HAL_SPI_MspInit+0x278>)
 8005aa4:	f002 f8e6 	bl	8007c74 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005aa8:	4b37      	ldr	r3, [pc, #220]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005aaa:	4a38      	ldr	r2, [pc, #224]	; (8005b8c <HAL_SPI_MspInit+0x280>)
 8005aac:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ab4:	4b34      	ldr	r3, [pc, #208]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005aba:	4b33      	ldr	r3, [pc, #204]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005ac0:	4b31      	ldr	r3, [pc, #196]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ac6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ac8:	4b2f      	ldr	r3, [pc, #188]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ace:	4b2e      	ldr	r3, [pc, #184]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005ad4:	4b2c      	ldr	r3, [pc, #176]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ada:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ae0:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005ae6:	4828      	ldr	r0, [pc, #160]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005ae8:	f001 fd34 	bl	8007554 <HAL_DMA_Init>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8005af2:	f7ff fe97 	bl	8005824 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a23      	ldr	r2, [pc, #140]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005afa:	64da      	str	r2, [r3, #76]	; 0x4c
 8005afc:	4a22      	ldr	r2, [pc, #136]	; (8005b88 <HAL_SPI_MspInit+0x27c>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b04:	4a23      	ldr	r2, [pc, #140]	; (8005b94 <HAL_SPI_MspInit+0x288>)
 8005b06:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005b08:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b0e:	4b20      	ldr	r3, [pc, #128]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b10:	2240      	movs	r2, #64	; 0x40
 8005b12:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b20:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b22:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005b2e:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b3a:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005b40:	4813      	ldr	r0, [pc, #76]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b42:	f001 fd07 	bl	8007554 <HAL_DMA_Init>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8005b4c:	f7ff fe6a 	bl	8005824 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0f      	ldr	r2, [pc, #60]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b54:	649a      	str	r2, [r3, #72]	; 0x48
 8005b56:	4a0e      	ldr	r2, [pc, #56]	; (8005b90 <HAL_SPI_MspInit+0x284>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005b5c:	bf00      	nop
 8005b5e:	3730      	adds	r7, #48	; 0x30
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40013000 	.word	0x40013000
 8005b68:	40023800 	.word	0x40023800
 8005b6c:	40020000 	.word	0x40020000
 8005b70:	20002878 	.word	0x20002878
 8005b74:	40026410 	.word	0x40026410
 8005b78:	20002938 	.word	0x20002938
 8005b7c:	40026458 	.word	0x40026458
 8005b80:	40003800 	.word	0x40003800
 8005b84:	40020400 	.word	0x40020400
 8005b88:	200027c0 	.word	0x200027c0
 8005b8c:	40026058 	.word	0x40026058
 8005b90:	200028d8 	.word	0x200028d8
 8005b94:	40026070 	.word	0x40026070

08005b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_MspInit+0x4c>)
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	4a0f      	ldr	r2, [pc, #60]	; (8005be4 <HAL_MspInit+0x4c>)
 8005ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bac:	6453      	str	r3, [r2, #68]	; 0x44
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <HAL_MspInit+0x4c>)
 8005bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_MspInit+0x4c>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	4a08      	ldr	r2, [pc, #32]	; (8005be4 <HAL_MspInit+0x4c>)
 8005bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <HAL_MspInit+0x4c>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800

08005be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bfa:	e7fe      	b.n	8005bfa <HardFault_Handler+0x4>

08005bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c00:	e7fe      	b.n	8005c00 <MemManage_Handler+0x4>

08005c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c02:	b480      	push	{r7}
 8005c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c06:	e7fe      	b.n	8005c06 <BusFault_Handler+0x4>

08005c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c0c:	e7fe      	b.n	8005c0c <UsageFault_Handler+0x4>

08005c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c12:	bf00      	nop
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c3c:	f000 ff42 	bl	8006ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c40:	bf00      	nop
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005c48:	4802      	ldr	r0, [pc, #8]	; (8005c54 <DMA1_Stream0_IRQHandler+0x10>)
 8005c4a:	f001 fdab 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005c4e:	bf00      	nop
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	20001bf0 	.word	0x20001bf0

08005c58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005c5c:	4802      	ldr	r0, [pc, #8]	; (8005c68 <DMA1_Stream1_IRQHandler+0x10>)
 8005c5e:	f001 fda1 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005c62:	bf00      	nop
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20002ad8 	.word	0x20002ad8

08005c6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005c70:	4802      	ldr	r0, [pc, #8]	; (8005c7c <DMA1_Stream3_IRQHandler+0x10>)
 8005c72:	f001 fd97 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005c76:	bf00      	nop
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	200027c0 	.word	0x200027c0

08005c80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005c84:	4802      	ldr	r0, [pc, #8]	; (8005c90 <DMA1_Stream4_IRQHandler+0x10>)
 8005c86:	f001 fd8d 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005c8a:	bf00      	nop
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	200028d8 	.word	0x200028d8

08005c94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005c98:	4802      	ldr	r0, [pc, #8]	; (8005ca4 <DMA1_Stream5_IRQHandler+0x10>)
 8005c9a:	f001 fd83 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005c9e:	bf00      	nop
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20002a18 	.word	0x20002a18

08005ca8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005cac:	4802      	ldr	r0, [pc, #8]	; (8005cb8 <DMA1_Stream6_IRQHandler+0x10>)
 8005cae:	f001 fd79 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005cb2:	bf00      	nop
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20002bd8 	.word	0x20002bd8

08005cbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005cc0:	4802      	ldr	r0, [pc, #8]	; (8005ccc <TIM2_IRQHandler+0x10>)
 8005cc2:	f003 fde1 	bl	8009888 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005cc6:	bf00      	nop
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	200029d8 	.word	0x200029d8

08005cd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005cd6:	480d      	ldr	r0, [pc, #52]	; (8005d0c <USART2_IRQHandler+0x3c>)
 8005cd8:	f004 fef8 	bl	800aacc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <USART2_IRQHandler+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0310 	and.w	r3, r3, #16
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d10c      	bne.n	8005d04 <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 8005cea:	f000 fe81 	bl	80069f0 <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <USART2_IRQHandler+0x3c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	607b      	str	r3, [r7, #4]
 8005cfa:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <USART2_IRQHandler+0x3c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 8005d04:	bf00      	nop
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20002c78 	.word	0x20002c78

08005d10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005d14:	4802      	ldr	r0, [pc, #8]	; (8005d20 <USART3_IRQHandler+0x10>)
 8005d16:	f004 fed9 	bl	800aacc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005d1a:	bf00      	nop
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	20002b38 	.word	0x20002b38

08005d24 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005d28:	4802      	ldr	r0, [pc, #8]	; (8005d34 <DMA1_Stream7_IRQHandler+0x10>)
 8005d2a:	f001 fd3b 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005d2e:	bf00      	nop
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20001b3c 	.word	0x20001b3c

08005d38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005d3c:	4802      	ldr	r0, [pc, #8]	; (8005d48 <DMA2_Stream0_IRQHandler+0x10>)
 8005d3e:	f001 fd31 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005d42:	bf00      	nop
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20002878 	.word	0x20002878

08005d4c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005d50:	4802      	ldr	r0, [pc, #8]	; (8005d5c <DMA2_Stream1_IRQHandler+0x10>)
 8005d52:	f001 fd27 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20002a78 	.word	0x20002a78

08005d60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005d64:	4802      	ldr	r0, [pc, #8]	; (8005d70 <DMA2_Stream2_IRQHandler+0x10>)
 8005d66:	f001 fd1d 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20001adc 	.word	0x20001adc

08005d74 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005d78:	4802      	ldr	r0, [pc, #8]	; (8005d84 <DMA2_Stream3_IRQHandler+0x10>)
 8005d7a:	f001 fd13 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20002938 	.word	0x20002938

08005d88 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <DMA2_Stream6_IRQHandler+0x10>)
 8005d8e:	f001 fd09 	bl	80077a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20002b78 	.word	0x20002b78

08005d9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f005 fe3d 	bl	800ba24 <IBUS_RxCplt>
}
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f005 fe4c 	bl	800ba58 <IBUS_RxHalfCplt>
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005dd0:	4a14      	ldr	r2, [pc, #80]	; (8005e24 <_sbrk+0x5c>)
 8005dd2:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <_sbrk+0x60>)
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ddc:	4b13      	ldr	r3, [pc, #76]	; (8005e2c <_sbrk+0x64>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005de4:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <_sbrk+0x64>)
 8005de6:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <_sbrk+0x68>)
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dea:	4b10      	ldr	r3, [pc, #64]	; (8005e2c <_sbrk+0x64>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4413      	add	r3, r2
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d207      	bcs.n	8005e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005df8:	f006 f93e 	bl	800c078 <__errno>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	230c      	movs	r3, #12
 8005e00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005e02:	f04f 33ff 	mov.w	r3, #4294967295
 8005e06:	e009      	b.n	8005e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <_sbrk+0x64>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e0e:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <_sbrk+0x64>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <_sbrk+0x64>)
 8005e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20020000 	.word	0x20020000
 8005e28:	00000400 	.word	0x00000400
 8005e2c:	20001a78 	.word	0x20001a78
 8005e30:	20002cc0 	.word	0x20002cc0

08005e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <SystemInit+0x28>)
 8005e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3e:	4a07      	ldr	r2, [pc, #28]	; (8005e5c <SystemInit+0x28>)
 8005e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <SystemInit+0x28>)
 8005e4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e4e:	609a      	str	r2, [r3, #8]
#endif
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b096      	sub	sp, #88	; 0x58
 8005e64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	605a      	str	r2, [r3, #4]
 8005e70:	609a      	str	r2, [r3, #8]
 8005e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	609a      	str	r2, [r3, #8]
 8005e8a:	60da      	str	r2, [r3, #12]
 8005e8c:	611a      	str	r2, [r3, #16]
 8005e8e:	615a      	str	r2, [r3, #20]
 8005e90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	2220      	movs	r2, #32
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f006 f93b 	bl	800c114 <memset>

  htim1.Instance = TIM1;
 8005e9e:	4b51      	ldr	r3, [pc, #324]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005ea0:	4a51      	ldr	r2, [pc, #324]	; (8005fe8 <MX_TIM1_Init+0x188>)
 8005ea2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8005ea4:	4b4f      	ldr	r3, [pc, #316]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005ea6:	2214      	movs	r2, #20
 8005ea8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eaa:	4b4e      	ldr	r3, [pc, #312]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8005eb0:	4b4c      	ldr	r3, [pc, #304]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005eb2:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005eb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb8:	4b4a      	ldr	r3, [pc, #296]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005ebe:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ec4:	4b47      	ldr	r3, [pc, #284]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005ec6:	2280      	movs	r2, #128	; 0x80
 8005ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005eca:	4846      	ldr	r0, [pc, #280]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005ecc:	f003 fc3e 	bl	800974c <HAL_TIM_Base_Init>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005ed6:	f7ff fca5 	bl	8005824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ede:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005ee0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	483f      	ldr	r0, [pc, #252]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005ee8:	f003 fe9c 	bl	8009c24 <HAL_TIM_ConfigClockSource>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005ef2:	f7ff fc97 	bl	8005824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005ef6:	483b      	ldr	r0, [pc, #236]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005ef8:	f003 fc53 	bl	80097a2 <HAL_TIM_PWM_Init>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005f02:	f7ff fc8f 	bl	8005824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f06:	2300      	movs	r3, #0
 8005f08:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005f0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f12:	4619      	mov	r1, r3
 8005f14:	4833      	ldr	r0, [pc, #204]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005f16:	f004 fa7f 	bl	800a418 <HAL_TIMEx_MasterConfigSynchronization>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005f20:	f7ff fc80 	bl	8005824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f24:	2360      	movs	r3, #96	; 0x60
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 8005f28:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f32:	2300      	movs	r3, #0
 8005f34:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f46:	2200      	movs	r2, #0
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4826      	ldr	r0, [pc, #152]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005f4c:	f003 fda4 	bl	8009a98 <HAL_TIM_PWM_ConfigChannel>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8005f56:	f7ff fc65 	bl	8005824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f5e:	2204      	movs	r2, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4820      	ldr	r0, [pc, #128]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005f64:	f003 fd98 	bl	8009a98 <HAL_TIM_PWM_ConfigChannel>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8005f6e:	f7ff fc59 	bl	8005824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f76:	2208      	movs	r2, #8
 8005f78:	4619      	mov	r1, r3
 8005f7a:	481a      	ldr	r0, [pc, #104]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005f7c:	f003 fd8c 	bl	8009a98 <HAL_TIM_PWM_ConfigChannel>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8005f86:	f7ff fc4d 	bl	8005824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f8e:	220c      	movs	r2, #12
 8005f90:	4619      	mov	r1, r3
 8005f92:	4814      	ldr	r0, [pc, #80]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005f94:	f003 fd80 	bl	8009a98 <HAL_TIM_PWM_ConfigChannel>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005f9e:	f7ff fc41 	bl	8005824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005fc6:	f004 faa3 	bl	800a510 <HAL_TIMEx_ConfigBreakDeadTime>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8005fd0:	f7ff fc28 	bl	8005824 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005fd4:	4803      	ldr	r0, [pc, #12]	; (8005fe4 <MX_TIM1_Init+0x184>)
 8005fd6:	f000 f891 	bl	80060fc <HAL_TIM_MspPostInit>

}
 8005fda:	bf00      	nop
 8005fdc:	3758      	adds	r7, #88	; 0x58
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20002998 	.word	0x20002998
 8005fe8:	40010000 	.word	0x40010000

08005fec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
 8005ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006000:	463b      	mov	r3, r7
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <MX_TIM2_Init+0x94>)
 800600a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800600e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <MX_TIM2_Init+0x94>)
 8006012:	22a7      	movs	r2, #167	; 0xa7
 8006014:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <MX_TIM2_Init+0x94>)
 8006018:	2200      	movs	r2, #0
 800601a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 800601c:	4b18      	ldr	r3, [pc, #96]	; (8006080 <MX_TIM2_Init+0x94>)
 800601e:	2203      	movs	r2, #3
 8006020:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <MX_TIM2_Init+0x94>)
 8006024:	2200      	movs	r2, #0
 8006026:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006028:	4b15      	ldr	r3, [pc, #84]	; (8006080 <MX_TIM2_Init+0x94>)
 800602a:	2200      	movs	r2, #0
 800602c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800602e:	4814      	ldr	r0, [pc, #80]	; (8006080 <MX_TIM2_Init+0x94>)
 8006030:	f003 fb8c 	bl	800974c <HAL_TIM_Base_Init>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800603a:	f7ff fbf3 	bl	8005824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800603e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006044:	f107 0308 	add.w	r3, r7, #8
 8006048:	4619      	mov	r1, r3
 800604a:	480d      	ldr	r0, [pc, #52]	; (8006080 <MX_TIM2_Init+0x94>)
 800604c:	f003 fdea 	bl	8009c24 <HAL_TIM_ConfigClockSource>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8006056:	f7ff fbe5 	bl	8005824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800605a:	2300      	movs	r3, #0
 800605c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006062:	463b      	mov	r3, r7
 8006064:	4619      	mov	r1, r3
 8006066:	4806      	ldr	r0, [pc, #24]	; (8006080 <MX_TIM2_Init+0x94>)
 8006068:	f004 f9d6 	bl	800a418 <HAL_TIMEx_MasterConfigSynchronization>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8006072:	f7ff fbd7 	bl	8005824 <Error_Handler>
  }

}
 8006076:	bf00      	nop
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	200029d8 	.word	0x200029d8

08006084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIM_Base_MspInit+0x70>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d10e      	bne.n	80060b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	4b17      	ldr	r3, [pc, #92]	; (80060f8 <HAL_TIM_Base_MspInit+0x74>)
 800609c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609e:	4a16      	ldr	r2, [pc, #88]	; (80060f8 <HAL_TIM_Base_MspInit+0x74>)
 80060a0:	f043 0301 	orr.w	r3, r3, #1
 80060a4:	6453      	str	r3, [r2, #68]	; 0x44
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <HAL_TIM_Base_MspInit+0x74>)
 80060a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80060b2:	e01a      	b.n	80060ea <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d115      	bne.n	80060ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <HAL_TIM_Base_MspInit+0x74>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	4a0c      	ldr	r2, [pc, #48]	; (80060f8 <HAL_TIM_Base_MspInit+0x74>)
 80060c8:	f043 0301 	orr.w	r3, r3, #1
 80060cc:	6413      	str	r3, [r2, #64]	; 0x40
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <HAL_TIM_Base_MspInit+0x74>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80060da:	2200      	movs	r2, #0
 80060dc:	2100      	movs	r1, #0
 80060de:	201c      	movs	r0, #28
 80060e0:	f001 fa01 	bl	80074e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80060e4:	201c      	movs	r0, #28
 80060e6:	f001 fa1a 	bl	800751e <HAL_NVIC_EnableIRQ>
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40023800 	.word	0x40023800

080060fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b088      	sub	sp, #32
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006104:	f107 030c 	add.w	r3, r7, #12
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	609a      	str	r2, [r3, #8]
 8006110:	60da      	str	r2, [r3, #12]
 8006112:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a12      	ldr	r2, [pc, #72]	; (8006164 <HAL_TIM_MspPostInit+0x68>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d11e      	bne.n	800615c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	4b11      	ldr	r3, [pc, #68]	; (8006168 <HAL_TIM_MspPostInit+0x6c>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	4a10      	ldr	r2, [pc, #64]	; (8006168 <HAL_TIM_MspPostInit+0x6c>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6313      	str	r3, [r2, #48]	; 0x30
 800612e:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <HAL_TIM_MspPostInit+0x6c>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	60bb      	str	r3, [r7, #8]
 8006138:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800613a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800613e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006140:	2302      	movs	r3, #2
 8006142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800614c:	2301      	movs	r3, #1
 800614e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006150:	f107 030c 	add.w	r3, r7, #12
 8006154:	4619      	mov	r1, r3
 8006156:	4805      	ldr	r0, [pc, #20]	; (800616c <HAL_TIM_MspPostInit+0x70>)
 8006158:	f001 fd8c 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800615c:	bf00      	nop
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40010000 	.word	0x40010000
 8006168:	40023800 	.word	0x40023800
 800616c:	40020000 	.word	0x40020000

08006170 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006174:	4b11      	ldr	r3, [pc, #68]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 8006176:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <MX_USART2_UART_Init+0x50>)
 8006178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 800617c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006182:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 8006184:	2200      	movs	r2, #0
 8006186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 800618a:	2200      	movs	r2, #0
 800618c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 8006190:	2200      	movs	r2, #0
 8006192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006194:	4b09      	ldr	r3, [pc, #36]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 8006196:	220c      	movs	r2, #12
 8006198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800619a:	4b08      	ldr	r3, [pc, #32]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 800619c:	2200      	movs	r2, #0
 800619e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80061a6:	4805      	ldr	r0, [pc, #20]	; (80061bc <MX_USART2_UART_Init+0x4c>)
 80061a8:	f004 fa18 	bl	800a5dc <HAL_UART_Init>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80061b2:	f7ff fb37 	bl	8005824 <Error_Handler>
  }

}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20002c78 	.word	0x20002c78
 80061c0:	40004400 	.word	0x40004400

080061c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <MX_USART3_UART_Init+0x50>)
 80061cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80061d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80061d6:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061d8:	2200      	movs	r2, #0
 80061da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061de:	2200      	movs	r2, #0
 80061e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80061e8:	4b09      	ldr	r3, [pc, #36]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061ea:	220c      	movs	r2, #12
 80061ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061ee:	4b08      	ldr	r3, [pc, #32]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80061f4:	4b06      	ldr	r3, [pc, #24]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80061fa:	4805      	ldr	r0, [pc, #20]	; (8006210 <MX_USART3_UART_Init+0x4c>)
 80061fc:	f004 f9ee 	bl	800a5dc <HAL_UART_Init>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006206:	f7ff fb0d 	bl	8005824 <Error_Handler>
  }

}
 800620a:	bf00      	nop
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20002b38 	.word	0x20002b38
 8006214:	40004800 	.word	0x40004800

08006218 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800621c:	4b11      	ldr	r3, [pc, #68]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 800621e:	4a12      	ldr	r2, [pc, #72]	; (8006268 <MX_USART6_UART_Init+0x50>)
 8006220:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8006222:	4b10      	ldr	r3, [pc, #64]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 8006224:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8006228:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800622a:	4b0e      	ldr	r3, [pc, #56]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 800622c:	2200      	movs	r2, #0
 800622e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006230:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 8006232:	2200      	movs	r2, #0
 8006234:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006236:	4b0b      	ldr	r3, [pc, #44]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 8006238:	2200      	movs	r2, #0
 800623a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800623c:	4b09      	ldr	r3, [pc, #36]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 800623e:	220c      	movs	r2, #12
 8006240:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006242:	4b08      	ldr	r3, [pc, #32]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 8006244:	2200      	movs	r2, #0
 8006246:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006248:	4b06      	ldr	r3, [pc, #24]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 800624a:	2200      	movs	r2, #0
 800624c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800624e:	4805      	ldr	r0, [pc, #20]	; (8006264 <MX_USART6_UART_Init+0x4c>)
 8006250:	f004 f9c4 	bl	800a5dc <HAL_UART_Init>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800625a:	f7ff fae3 	bl	8005824 <Error_Handler>
  }

}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20002c38 	.word	0x20002c38
 8006268:	40011400 	.word	0x40011400

0800626c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08e      	sub	sp, #56	; 0x38
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	605a      	str	r2, [r3, #4]
 800627e:	609a      	str	r2, [r3, #8]
 8006280:	60da      	str	r2, [r3, #12]
 8006282:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a7f      	ldr	r2, [pc, #508]	; (8006488 <HAL_UART_MspInit+0x21c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	f040 8091 	bne.w	80063b2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006290:	2300      	movs	r3, #0
 8006292:	623b      	str	r3, [r7, #32]
 8006294:	4b7d      	ldr	r3, [pc, #500]	; (800648c <HAL_UART_MspInit+0x220>)
 8006296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006298:	4a7c      	ldr	r2, [pc, #496]	; (800648c <HAL_UART_MspInit+0x220>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629e:	6413      	str	r3, [r2, #64]	; 0x40
 80062a0:	4b7a      	ldr	r3, [pc, #488]	; (800648c <HAL_UART_MspInit+0x220>)
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062ac:	2300      	movs	r3, #0
 80062ae:	61fb      	str	r3, [r7, #28]
 80062b0:	4b76      	ldr	r3, [pc, #472]	; (800648c <HAL_UART_MspInit+0x220>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	4a75      	ldr	r2, [pc, #468]	; (800648c <HAL_UART_MspInit+0x220>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6313      	str	r3, [r2, #48]	; 0x30
 80062bc:	4b73      	ldr	r3, [pc, #460]	; (800648c <HAL_UART_MspInit+0x220>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80062c8:	230c      	movs	r3, #12
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062cc:	2302      	movs	r3, #2
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d4:	2303      	movs	r3, #3
 80062d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80062d8:	2307      	movs	r3, #7
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e0:	4619      	mov	r1, r3
 80062e2:	486b      	ldr	r0, [pc, #428]	; (8006490 <HAL_UART_MspInit+0x224>)
 80062e4:	f001 fcc6 	bl	8007c74 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80062e8:	4b6a      	ldr	r3, [pc, #424]	; (8006494 <HAL_UART_MspInit+0x228>)
 80062ea:	4a6b      	ldr	r2, [pc, #428]	; (8006498 <HAL_UART_MspInit+0x22c>)
 80062ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80062ee:	4b69      	ldr	r3, [pc, #420]	; (8006494 <HAL_UART_MspInit+0x228>)
 80062f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062f6:	4b67      	ldr	r3, [pc, #412]	; (8006494 <HAL_UART_MspInit+0x228>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062fc:	4b65      	ldr	r3, [pc, #404]	; (8006494 <HAL_UART_MspInit+0x228>)
 80062fe:	2200      	movs	r2, #0
 8006300:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006302:	4b64      	ldr	r3, [pc, #400]	; (8006494 <HAL_UART_MspInit+0x228>)
 8006304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006308:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800630a:	4b62      	ldr	r3, [pc, #392]	; (8006494 <HAL_UART_MspInit+0x228>)
 800630c:	2200      	movs	r2, #0
 800630e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006310:	4b60      	ldr	r3, [pc, #384]	; (8006494 <HAL_UART_MspInit+0x228>)
 8006312:	2200      	movs	r2, #0
 8006314:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006316:	4b5f      	ldr	r3, [pc, #380]	; (8006494 <HAL_UART_MspInit+0x228>)
 8006318:	2200      	movs	r2, #0
 800631a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800631c:	4b5d      	ldr	r3, [pc, #372]	; (8006494 <HAL_UART_MspInit+0x228>)
 800631e:	2200      	movs	r2, #0
 8006320:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006322:	4b5c      	ldr	r3, [pc, #368]	; (8006494 <HAL_UART_MspInit+0x228>)
 8006324:	2200      	movs	r2, #0
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006328:	485a      	ldr	r0, [pc, #360]	; (8006494 <HAL_UART_MspInit+0x228>)
 800632a:	f001 f913 	bl	8007554 <HAL_DMA_Init>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006334:	f7ff fa76 	bl	8005824 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a56      	ldr	r2, [pc, #344]	; (8006494 <HAL_UART_MspInit+0x228>)
 800633c:	635a      	str	r2, [r3, #52]	; 0x34
 800633e:	4a55      	ldr	r2, [pc, #340]	; (8006494 <HAL_UART_MspInit+0x228>)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006344:	4b55      	ldr	r3, [pc, #340]	; (800649c <HAL_UART_MspInit+0x230>)
 8006346:	4a56      	ldr	r2, [pc, #344]	; (80064a0 <HAL_UART_MspInit+0x234>)
 8006348:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800634a:	4b54      	ldr	r3, [pc, #336]	; (800649c <HAL_UART_MspInit+0x230>)
 800634c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006350:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006352:	4b52      	ldr	r3, [pc, #328]	; (800649c <HAL_UART_MspInit+0x230>)
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006358:	4b50      	ldr	r3, [pc, #320]	; (800649c <HAL_UART_MspInit+0x230>)
 800635a:	2200      	movs	r2, #0
 800635c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800635e:	4b4f      	ldr	r3, [pc, #316]	; (800649c <HAL_UART_MspInit+0x230>)
 8006360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006364:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006366:	4b4d      	ldr	r3, [pc, #308]	; (800649c <HAL_UART_MspInit+0x230>)
 8006368:	2200      	movs	r2, #0
 800636a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800636c:	4b4b      	ldr	r3, [pc, #300]	; (800649c <HAL_UART_MspInit+0x230>)
 800636e:	2200      	movs	r2, #0
 8006370:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006372:	4b4a      	ldr	r3, [pc, #296]	; (800649c <HAL_UART_MspInit+0x230>)
 8006374:	2200      	movs	r2, #0
 8006376:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006378:	4b48      	ldr	r3, [pc, #288]	; (800649c <HAL_UART_MspInit+0x230>)
 800637a:	2200      	movs	r2, #0
 800637c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800637e:	4b47      	ldr	r3, [pc, #284]	; (800649c <HAL_UART_MspInit+0x230>)
 8006380:	2200      	movs	r2, #0
 8006382:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006384:	4845      	ldr	r0, [pc, #276]	; (800649c <HAL_UART_MspInit+0x230>)
 8006386:	f001 f8e5 	bl	8007554 <HAL_DMA_Init>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8006390:	f7ff fa48 	bl	8005824 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a41      	ldr	r2, [pc, #260]	; (800649c <HAL_UART_MspInit+0x230>)
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
 800639a:	4a40      	ldr	r2, [pc, #256]	; (800649c <HAL_UART_MspInit+0x230>)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063a0:	2200      	movs	r2, #0
 80063a2:	2100      	movs	r1, #0
 80063a4:	2026      	movs	r0, #38	; 0x26
 80063a6:	f001 f89e 	bl	80074e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063aa:	2026      	movs	r0, #38	; 0x26
 80063ac:	f001 f8b7 	bl	800751e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80063b0:	e10e      	b.n	80065d0 <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a3b      	ldr	r2, [pc, #236]	; (80064a4 <HAL_UART_MspInit+0x238>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d17b      	bne.n	80064b4 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	4b32      	ldr	r3, [pc, #200]	; (800648c <HAL_UART_MspInit+0x220>)
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	4a31      	ldr	r2, [pc, #196]	; (800648c <HAL_UART_MspInit+0x220>)
 80063c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ca:	6413      	str	r3, [r2, #64]	; 0x40
 80063cc:	4b2f      	ldr	r3, [pc, #188]	; (800648c <HAL_UART_MspInit+0x220>)
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063d4:	61bb      	str	r3, [r7, #24]
 80063d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	4b2b      	ldr	r3, [pc, #172]	; (800648c <HAL_UART_MspInit+0x220>)
 80063de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e0:	4a2a      	ldr	r2, [pc, #168]	; (800648c <HAL_UART_MspInit+0x220>)
 80063e2:	f043 0302 	orr.w	r3, r3, #2
 80063e6:	6313      	str	r3, [r2, #48]	; 0x30
 80063e8:	4b28      	ldr	r3, [pc, #160]	; (800648c <HAL_UART_MspInit+0x220>)
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80063f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fa:	2302      	movs	r3, #2
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006402:	2303      	movs	r3, #3
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006406:	2307      	movs	r3, #7
 8006408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800640e:	4619      	mov	r1, r3
 8006410:	4825      	ldr	r0, [pc, #148]	; (80064a8 <HAL_UART_MspInit+0x23c>)
 8006412:	f001 fc2f 	bl	8007c74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006416:	4b25      	ldr	r3, [pc, #148]	; (80064ac <HAL_UART_MspInit+0x240>)
 8006418:	4a25      	ldr	r2, [pc, #148]	; (80064b0 <HAL_UART_MspInit+0x244>)
 800641a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800641c:	4b23      	ldr	r3, [pc, #140]	; (80064ac <HAL_UART_MspInit+0x240>)
 800641e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006422:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006424:	4b21      	ldr	r3, [pc, #132]	; (80064ac <HAL_UART_MspInit+0x240>)
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800642a:	4b20      	ldr	r3, [pc, #128]	; (80064ac <HAL_UART_MspInit+0x240>)
 800642c:	2200      	movs	r2, #0
 800642e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006430:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <HAL_UART_MspInit+0x240>)
 8006432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006436:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006438:	4b1c      	ldr	r3, [pc, #112]	; (80064ac <HAL_UART_MspInit+0x240>)
 800643a:	2200      	movs	r2, #0
 800643c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800643e:	4b1b      	ldr	r3, [pc, #108]	; (80064ac <HAL_UART_MspInit+0x240>)
 8006440:	2200      	movs	r2, #0
 8006442:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006444:	4b19      	ldr	r3, [pc, #100]	; (80064ac <HAL_UART_MspInit+0x240>)
 8006446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800644a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800644c:	4b17      	ldr	r3, [pc, #92]	; (80064ac <HAL_UART_MspInit+0x240>)
 800644e:	2200      	movs	r2, #0
 8006450:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006452:	4b16      	ldr	r3, [pc, #88]	; (80064ac <HAL_UART_MspInit+0x240>)
 8006454:	2200      	movs	r2, #0
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006458:	4814      	ldr	r0, [pc, #80]	; (80064ac <HAL_UART_MspInit+0x240>)
 800645a:	f001 f87b 	bl	8007554 <HAL_DMA_Init>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8006464:	f7ff f9de 	bl	8005824 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a10      	ldr	r2, [pc, #64]	; (80064ac <HAL_UART_MspInit+0x240>)
 800646c:	635a      	str	r2, [r3, #52]	; 0x34
 800646e:	4a0f      	ldr	r2, [pc, #60]	; (80064ac <HAL_UART_MspInit+0x240>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006474:	2200      	movs	r2, #0
 8006476:	2100      	movs	r1, #0
 8006478:	2027      	movs	r0, #39	; 0x27
 800647a:	f001 f834 	bl	80074e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800647e:	2027      	movs	r0, #39	; 0x27
 8006480:	f001 f84d 	bl	800751e <HAL_NVIC_EnableIRQ>
}
 8006484:	e0a4      	b.n	80065d0 <HAL_UART_MspInit+0x364>
 8006486:	bf00      	nop
 8006488:	40004400 	.word	0x40004400
 800648c:	40023800 	.word	0x40023800
 8006490:	40020000 	.word	0x40020000
 8006494:	20002a18 	.word	0x20002a18
 8006498:	40026088 	.word	0x40026088
 800649c:	20002bd8 	.word	0x20002bd8
 80064a0:	400260a0 	.word	0x400260a0
 80064a4:	40004800 	.word	0x40004800
 80064a8:	40020400 	.word	0x40020400
 80064ac:	20002ad8 	.word	0x20002ad8
 80064b0:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a47      	ldr	r2, [pc, #284]	; (80065d8 <HAL_UART_MspInit+0x36c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	f040 8088 	bne.w	80065d0 <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	4b45      	ldr	r3, [pc, #276]	; (80065dc <HAL_UART_MspInit+0x370>)
 80064c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c8:	4a44      	ldr	r2, [pc, #272]	; (80065dc <HAL_UART_MspInit+0x370>)
 80064ca:	f043 0320 	orr.w	r3, r3, #32
 80064ce:	6453      	str	r3, [r2, #68]	; 0x44
 80064d0:	4b42      	ldr	r3, [pc, #264]	; (80065dc <HAL_UART_MspInit+0x370>)
 80064d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	4b3e      	ldr	r3, [pc, #248]	; (80065dc <HAL_UART_MspInit+0x370>)
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	4a3d      	ldr	r2, [pc, #244]	; (80065dc <HAL_UART_MspInit+0x370>)
 80064e6:	f043 0304 	orr.w	r3, r3, #4
 80064ea:	6313      	str	r3, [r2, #48]	; 0x30
 80064ec:	4b3b      	ldr	r3, [pc, #236]	; (80065dc <HAL_UART_MspInit+0x370>)
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80064f8:	23c0      	movs	r3, #192	; 0xc0
 80064fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fc:	2302      	movs	r3, #2
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006500:	2300      	movs	r3, #0
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006504:	2303      	movs	r3, #3
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006508:	2308      	movs	r3, #8
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800650c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006510:	4619      	mov	r1, r3
 8006512:	4833      	ldr	r0, [pc, #204]	; (80065e0 <HAL_UART_MspInit+0x374>)
 8006514:	f001 fbae 	bl	8007c74 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006518:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <HAL_UART_MspInit+0x378>)
 800651a:	4a33      	ldr	r2, [pc, #204]	; (80065e8 <HAL_UART_MspInit+0x37c>)
 800651c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <HAL_UART_MspInit+0x378>)
 8006520:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006524:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <HAL_UART_MspInit+0x378>)
 8006528:	2240      	movs	r2, #64	; 0x40
 800652a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800652c:	4b2d      	ldr	r3, [pc, #180]	; (80065e4 <HAL_UART_MspInit+0x378>)
 800652e:	2200      	movs	r2, #0
 8006530:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006532:	4b2c      	ldr	r3, [pc, #176]	; (80065e4 <HAL_UART_MspInit+0x378>)
 8006534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006538:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800653a:	4b2a      	ldr	r3, [pc, #168]	; (80065e4 <HAL_UART_MspInit+0x378>)
 800653c:	2200      	movs	r2, #0
 800653e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <HAL_UART_MspInit+0x378>)
 8006542:	2200      	movs	r2, #0
 8006544:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <HAL_UART_MspInit+0x378>)
 8006548:	2200      	movs	r2, #0
 800654a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800654c:	4b25      	ldr	r3, [pc, #148]	; (80065e4 <HAL_UART_MspInit+0x378>)
 800654e:	2200      	movs	r2, #0
 8006550:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006552:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_UART_MspInit+0x378>)
 8006554:	2200      	movs	r2, #0
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006558:	4822      	ldr	r0, [pc, #136]	; (80065e4 <HAL_UART_MspInit+0x378>)
 800655a:	f000 fffb 	bl	8007554 <HAL_DMA_Init>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8006564:	f7ff f95e 	bl	8005824 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1e      	ldr	r2, [pc, #120]	; (80065e4 <HAL_UART_MspInit+0x378>)
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <HAL_UART_MspInit+0x378>)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006574:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <HAL_UART_MspInit+0x380>)
 8006576:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <HAL_UART_MspInit+0x384>)
 8006578:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800657a:	4b1c      	ldr	r3, [pc, #112]	; (80065ec <HAL_UART_MspInit+0x380>)
 800657c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8006580:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006582:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <HAL_UART_MspInit+0x380>)
 8006584:	2200      	movs	r2, #0
 8006586:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006588:	4b18      	ldr	r3, [pc, #96]	; (80065ec <HAL_UART_MspInit+0x380>)
 800658a:	2200      	movs	r2, #0
 800658c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800658e:	4b17      	ldr	r3, [pc, #92]	; (80065ec <HAL_UART_MspInit+0x380>)
 8006590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006594:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <HAL_UART_MspInit+0x380>)
 8006598:	2200      	movs	r2, #0
 800659a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800659c:	4b13      	ldr	r3, [pc, #76]	; (80065ec <HAL_UART_MspInit+0x380>)
 800659e:	2200      	movs	r2, #0
 80065a0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <HAL_UART_MspInit+0x380>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065a8:	4b10      	ldr	r3, [pc, #64]	; (80065ec <HAL_UART_MspInit+0x380>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <HAL_UART_MspInit+0x380>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80065b4:	480d      	ldr	r0, [pc, #52]	; (80065ec <HAL_UART_MspInit+0x380>)
 80065b6:	f000 ffcd 	bl	8007554 <HAL_DMA_Init>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_UART_MspInit+0x358>
      Error_Handler();
 80065c0:	f7ff f930 	bl	8005824 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a09      	ldr	r2, [pc, #36]	; (80065ec <HAL_UART_MspInit+0x380>)
 80065c8:	635a      	str	r2, [r3, #52]	; 0x34
 80065ca:	4a08      	ldr	r2, [pc, #32]	; (80065ec <HAL_UART_MspInit+0x380>)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6393      	str	r3, [r2, #56]	; 0x38
}
 80065d0:	bf00      	nop
 80065d2:	3738      	adds	r7, #56	; 0x38
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40011400 	.word	0x40011400
 80065dc:	40023800 	.word	0x40023800
 80065e0:	40020800 	.word	0x40020800
 80065e4:	20002b78 	.word	0x20002b78
 80065e8:	400264a0 	.word	0x400264a0
 80065ec:	20002a78 	.word	0x20002a78
 80065f0:	40026428 	.word	0x40026428

080065f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80065f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800662c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065fa:	e003      	b.n	8006604 <LoopCopyDataInit>

080065fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006600:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006602:	3104      	adds	r1, #4

08006604 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006608:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800660a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800660c:	d3f6      	bcc.n	80065fc <CopyDataInit>
  ldr  r2, =_sbss
 800660e:	4a0b      	ldr	r2, [pc, #44]	; (800663c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006610:	e002      	b.n	8006618 <LoopFillZerobss>

08006612 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006612:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006614:	f842 3b04 	str.w	r3, [r2], #4

08006618 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006618:	4b09      	ldr	r3, [pc, #36]	; (8006640 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800661a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800661c:	d3f9      	bcc.n	8006612 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800661e:	f7ff fc09 	bl	8005e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006622:	f005 fd2f 	bl	800c084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006626:	f7fe ffe1 	bl	80055ec <main>
  bx  lr    
 800662a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800662c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006630:	0800fe64 	.word	0x0800fe64
  ldr  r0, =_sdata
 8006634:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006638:	20001734 	.word	0x20001734
  ldr  r2, =_sbss
 800663c:	20001734 	.word	0x20001734
  ldr  r3, = _ebss
 8006640:	20002cc0 	.word	0x20002cc0

08006644 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006644:	e7fe      	b.n	8006644 <ADC_IRQHandler>

08006646 <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 8006646:	b480      	push	{r7}
 8006648:	b085      	sub	sp, #20
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 800664e:	2300      	movs	r3, #0
 8006650:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800665e:	429a      	cmp	r2, r3
 8006660:	d907      	bls.n	8006672 <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8006672:	89fb      	ldrh	r3, [r7, #14]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <TELEMETRY_Init+0x60>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 8006690:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <TELEMETRY_Init+0x60>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <TELEMETRY_Init+0x60>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2214      	movs	r2, #20
 80066a0:	4910      	ldr	r1, [pc, #64]	; (80066e4 <TELEMETRY_Init+0x64>)
 80066a2:	4618      	mov	r0, r3
 80066a4:	f004 f926 	bl	800a8f4 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <TELEMETRY_Init+0x60>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <TELEMETRY_Init+0x60>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0210 	orr.w	r2, r2, #16
 80066be:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <TELEMETRY_Init+0x60>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <TELEMETRY_Init+0x60>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80066ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d2:	4619      	mov	r1, r3
 80066d4:	f004 f97a 	bl	800a9cc <HAL_UART_Receive_DMA>
}
 80066d8:	bf00      	nop
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20001a7c 	.word	0x20001a7c
 80066e4:	20001540 	.word	0x20001540

080066e8 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 80066f0:	4b6f      	ldr	r3, [pc, #444]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 80066f8:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8006700:	429a      	cmp	r2, r3
 8006702:	d051      	beq.n	80067a8 <TELEMETRY_Process+0xc0>
 8006704:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d94a      	bls.n	80067a8 <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 8006712:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a66      	ldr	r2, [pc, #408]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 800671e:	4413      	add	r3, r2
 8006720:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8006724:	461a      	mov	r2, r3
 8006726:	f240 134d 	movw	r3, #333	; 0x14d
 800672a:	fb03 f302 	mul.w	r3, r3, r2
 800672e:	4619      	mov	r1, r3
 8006730:	4b5f      	ldr	r3, [pc, #380]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	440a      	add	r2, r1
 8006738:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 800673c:	4b5c      	ldr	r3, [pc, #368]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	4b5b      	ldr	r3, [pc, #364]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b5a      	ldr	r3, [pc, #360]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800674e:	4619      	mov	r1, r3
 8006750:	460b      	mov	r3, r1
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	1d59      	adds	r1, r3, #5
 800675c:	4b54      	ldr	r3, [pc, #336]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a53      	ldr	r2, [pc, #332]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8006768:	4413      	add	r3, r2
 800676a:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	f004 f8bf 	bl	800a8f4 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 8006776:	4b4e      	ldr	r3, [pc, #312]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 800677e:	3201      	adds	r2, #1
 8006780:	b292      	uxth	r2, r2
 8006782:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 8006786:	4b4a      	ldr	r3, [pc, #296]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 800678e:	4a48      	ldr	r2, [pc, #288]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	4948      	ldr	r1, [pc, #288]	; (80068b4 <TELEMETRY_Process+0x1cc>)
 8006794:	fba1 0103 	umull	r0, r1, r1, r3
 8006798:	0909      	lsrs	r1, r1, #4
 800679a:	2032      	movs	r0, #50	; 0x32
 800679c:	fb00 f101 	mul.w	r1, r0, r1
 80067a0:	1a5b      	subs	r3, r3, r1
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 80067a8:	4b41      	ldr	r3, [pc, #260]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff ff4a 	bl	8006646 <get_nb_bytes_available>
 80067b2:	4603      	mov	r3, r0
 80067b4:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 80067b6:	8a3b      	ldrh	r3, [r7, #16]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d976      	bls.n	80068aa <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 80067bc:	2301      	movs	r3, #1
 80067be:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 80067c0:	4b3b      	ldr	r3, [pc, #236]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a3a      	ldr	r2, [pc, #232]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 80067cc:	4413      	add	r3, r2
 80067ce:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80067d2:	2b24      	cmp	r3, #36	; 0x24
 80067d4:	d15c      	bne.n	8006890 <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 80067d6:	4b36      	ldr	r3, [pc, #216]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	4b35      	ldr	r3, [pc, #212]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80067e2:	3301      	adds	r3, #1
 80067e4:	4413      	add	r3, r2
 80067e6:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fb f8ba 	bl	8001964 <DATA_LOGGER_Get_Data>
 80067f0:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	7a5b      	ldrb	r3, [r3, #9]
 80067f6:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <TELEMETRY_Process+0x1d0>)
 80067f8:	fba2 2303 	umull	r2, r3, r2, r3
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	b29b      	uxth	r3, r3
 8006802:	3303      	adds	r3, #3
 8006804:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 8006806:	897a      	ldrh	r2, [r7, #10]
 8006808:	8a3b      	ldrh	r3, [r7, #16]
 800680a:	429a      	cmp	r2, r3
 800680c:	d84c      	bhi.n	80068a8 <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 800680e:	897b      	ldrh	r3, [r7, #10]
 8006810:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 8006812:	897b      	ldrh	r3, [r7, #10]
 8006814:	3b02      	subs	r3, #2
 8006816:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 8006818:	2300      	movs	r3, #0
 800681a:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 800681c:	2300      	movs	r3, #0
 800681e:	827b      	strh	r3, [r7, #18]
 8006820:	e012      	b.n	8006848 <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 8006822:	4b23      	ldr	r3, [pc, #140]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	8a7b      	ldrh	r3, [r7, #18]
 8006832:	440b      	add	r3, r1
 8006834:	4413      	add	r3, r2
 8006836:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800683a:	b29a      	uxth	r2, r3
 800683c:	8abb      	ldrh	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 8006842:	8a7b      	ldrh	r3, [r7, #18]
 8006844:	3301      	adds	r3, #1
 8006846:	827b      	strh	r3, [r7, #18]
 8006848:	8a7a      	ldrh	r2, [r7, #18]
 800684a:	893b      	ldrh	r3, [r7, #8]
 800684c:	429a      	cmp	r2, r3
 800684e:	d3e8      	bcc.n	8006822 <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 8006850:	8abb      	ldrh	r3, [r7, #20]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	b29a      	uxth	r2, r3
 8006856:	4b16      	ldr	r3, [pc, #88]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006858:	6819      	ldr	r1, [r3, #0]
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006862:	4618      	mov	r0, r3
 8006864:	897b      	ldrh	r3, [r7, #10]
 8006866:	4403      	add	r3, r0
 8006868:	3b01      	subs	r3, #1
 800686a:	440b      	add	r3, r1
 800686c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8006870:	b29b      	uxth	r3, r3
 8006872:	429a      	cmp	r2, r3
 8006874:	d10c      	bne.n	8006890 <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 8006876:	4b0e      	ldr	r3, [pc, #56]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	4b0d      	ldr	r3, [pc, #52]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8006882:	3301      	adds	r3, #1
 8006884:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8006888:	4413      	add	r3, r2
 800688a:	4618      	mov	r0, r3
 800688c:	f7fa fe9c 	bl	80015c8 <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 8006890:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <TELEMETRY_Process+0x1c8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	8afa      	ldrh	r2, [r7, #22]
 800689e:	440a      	add	r2, r1
 80068a0:	b292      	uxth	r2, r2
 80068a2:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 80068a6:	e000      	b.n	80068aa <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 80068a8:	bf00      	nop
	}

}
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	20001a7c 	.word	0x20001a7c
 80068b4:	51eb851f 	.word	0x51eb851f
 80068b8:	cccccccd 	.word	0xcccccccd

080068bc <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 80068c8:	2300      	movs	r3, #0
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 80068cc:	2324      	movs	r3, #36	; 0x24
 80068ce:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d6:	e01d      	b.n	8006914 <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 80068d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	441a      	add	r2, r3
 80068e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068e4:	3301      	adds	r3, #1
 80068e6:	7812      	ldrb	r2, [r2, #0]
 80068e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80068ec:	440b      	add	r3, r1
 80068ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 80068f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068f6:	3301      	adds	r3, #1
 80068f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80068fc:	4413      	add	r3, r2
 80068fe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8006902:	461a      	mov	r2, r3
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	4413      	add	r3, r2
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 800690a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800690e:	3301      	adds	r3, #1
 8006910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006914:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	429a      	cmp	r2, r3
 800691c:	d3dc      	bcc.n	80068d8 <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	3301      	adds	r3, #1
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800692a:	440b      	add	r3, r1
 800692c:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	3302      	adds	r3, #2
 8006934:	b2da      	uxtb	r2, r3
 8006936:	f107 030c 	add.w	r3, r7, #12
 800693a:	4611      	mov	r1, r2
 800693c:	4618      	mov	r0, r3
 800693e:	f000 f805 	bl	800694c <TELEMETRY_Send_Data_Raw>
}
 8006942:	bf00      	nop
 8006944:	3728      	adds	r7, #40	; 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
	...

0800694c <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	e017      	b.n	800698e <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	18d1      	adds	r1, r2, r3
 8006964:	4b20      	ldr	r3, [pc, #128]	; (80069e8 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b1f      	ldr	r3, [pc, #124]	; (80069e8 <TELEMETRY_Send_Data_Raw+0x9c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8006970:	4618      	mov	r0, r3
 8006972:	4603      	mov	r3, r0
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4403      	add	r3, r0
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4618      	mov	r0, r3
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	4403      	add	r3, r0
 8006980:	7809      	ldrb	r1, [r1, #0]
 8006982:	4413      	add	r3, r2
 8006984:	460a      	mov	r2, r1
 8006986:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	3301      	adds	r3, #1
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	7bfa      	ldrb	r2, [r7, #15]
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	429a      	cmp	r2, r3
 8006994:	d3e3      	bcc.n	800695e <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <TELEMETRY_Send_Data_Raw+0x9c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <TELEMETRY_Send_Data_Raw+0x9c>)
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 80069a2:	4413      	add	r3, r2
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 80069aa:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <TELEMETRY_Send_Data_Raw+0x9c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 80069b2:	3201      	adds	r2, #1
 80069b4:	b292      	uxth	r2, r2
 80069b6:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <TELEMETRY_Send_Data_Raw+0x9c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <TELEMETRY_Send_Data_Raw+0x9c>)
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	4909      	ldr	r1, [pc, #36]	; (80069ec <TELEMETRY_Send_Data_Raw+0xa0>)
 80069c8:	fba1 0103 	umull	r0, r1, r1, r3
 80069cc:	0909      	lsrs	r1, r1, #4
 80069ce:	2032      	movs	r0, #50	; 0x32
 80069d0:	fb00 f101 	mul.w	r1, r0, r1
 80069d4:	1a5b      	subs	r3, r3, r1
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 80069dc:	bf00      	nop
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	20001a7c 	.word	0x20001a7c
 80069ec:	51eb851f 	.word	0x51eb851f

080069f0 <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 80069f4:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <TELEMETRY_Idle_Line_Detection+0x2c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <TELEMETRY_Idle_Line_Detection+0x2c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20001a7c 	.word	0x20001a7c

08006a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a24:	4b0e      	ldr	r3, [pc, #56]	; (8006a60 <HAL_Init+0x40>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <HAL_Init+0x40>)
 8006a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <HAL_Init+0x40>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <HAL_Init+0x40>)
 8006a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a3c:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <HAL_Init+0x40>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a07      	ldr	r2, [pc, #28]	; (8006a60 <HAL_Init+0x40>)
 8006a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a48:	2003      	movs	r0, #3
 8006a4a:	f000 fd41 	bl	80074d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f000 f808 	bl	8006a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a54:	f7ff f8a0 	bl	8005b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	40023c00 	.word	0x40023c00

08006a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a6c:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <HAL_InitTick+0x54>)
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	4b12      	ldr	r3, [pc, #72]	; (8006abc <HAL_InitTick+0x58>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	4619      	mov	r1, r3
 8006a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fd59 	bl	800753a <HAL_SYSTICK_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e00e      	b.n	8006ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b0f      	cmp	r3, #15
 8006a96:	d80a      	bhi.n	8006aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a98:	2200      	movs	r2, #0
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	f000 fd21 	bl	80074e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006aa4:	4a06      	ldr	r2, [pc, #24]	; (8006ac0 <HAL_InitTick+0x5c>)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	2000153c 	.word	0x2000153c
 8006abc:	2000155c 	.word	0x2000155c
 8006ac0:	20001558 	.word	0x20001558

08006ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <HAL_IncTick+0x20>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <HAL_IncTick+0x24>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	4a04      	ldr	r2, [pc, #16]	; (8006ae8 <HAL_IncTick+0x24>)
 8006ad6:	6013      	str	r3, [r2, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	2000155c 	.word	0x2000155c
 8006ae8:	20002cb8 	.word	0x20002cb8

08006aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  return uwTick;
 8006af0:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <HAL_GetTick+0x14>)
 8006af2:	681b      	ldr	r3, [r3, #0]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20002cb8 	.word	0x20002cb8

08006b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b0c:	f7ff ffee 	bl	8006aec <HAL_GetTick>
 8006b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d005      	beq.n	8006b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <HAL_Delay+0x40>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b2a:	bf00      	nop
 8006b2c:	f7ff ffde 	bl	8006aec <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d8f7      	bhi.n	8006b2c <HAL_Delay+0x28>
  {
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	2000155c 	.word	0x2000155c

08006b48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e033      	b.n	8006bc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fe faae 	bl	80050c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f003 0310 	and.w	r3, r3, #16
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d118      	bne.n	8006bb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006b8e:	f023 0302 	bic.w	r3, r3, #2
 8006b92:	f043 0202 	orr.w	r2, r3, #2
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa4a 	bl	8007034 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	f023 0303 	bic.w	r3, r3, #3
 8006bae:	f043 0201 	orr.w	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8006bb6:	e001      	b.n	8006bbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_ADC_Start_DMA+0x1e>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e0cc      	b.n	8006d88 <HAL_ADC_Start_DMA+0x1b8>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d018      	beq.n	8006c36 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c14:	4b5e      	ldr	r3, [pc, #376]	; (8006d90 <HAL_ADC_Start_DMA+0x1c0>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a5e      	ldr	r2, [pc, #376]	; (8006d94 <HAL_ADC_Start_DMA+0x1c4>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	0c9a      	lsrs	r2, r3, #18
 8006c20:	4613      	mov	r3, r2
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	4413      	add	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c28:	e002      	b.n	8006c30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1f9      	bne.n	8006c2a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	f040 80a0 	bne.w	8006d86 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c84:	d106      	bne.n	8006c94 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	f023 0206 	bic.w	r2, r3, #6
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	645a      	str	r2, [r3, #68]	; 0x44
 8006c92:	e002      	b.n	8006c9a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ca2:	4b3d      	ldr	r3, [pc, #244]	; (8006d98 <HAL_ADC_Start_DMA+0x1c8>)
 8006ca4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006caa:	4a3c      	ldr	r2, [pc, #240]	; (8006d9c <HAL_ADC_Start_DMA+0x1cc>)
 8006cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	4a3b      	ldr	r2, [pc, #236]	; (8006da0 <HAL_ADC_Start_DMA+0x1d0>)
 8006cb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <HAL_ADC_Start_DMA+0x1d4>)
 8006cbc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006cc6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006cd6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	334c      	adds	r3, #76	; 0x4c
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f000 fcda 	bl	80076b0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d12a      	bne.n	8006d5e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <HAL_ADC_Start_DMA+0x1d8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d015      	beq.n	8006d3e <HAL_ADC_Start_DMA+0x16e>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a25      	ldr	r2, [pc, #148]	; (8006dac <HAL_ADC_Start_DMA+0x1dc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d105      	bne.n	8006d28 <HAL_ADC_Start_DMA+0x158>
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <HAL_ADC_Start_DMA+0x1c8>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f003 031f 	and.w	r3, r3, #31
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00a      	beq.n	8006d3e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a20      	ldr	r2, [pc, #128]	; (8006db0 <HAL_ADC_Start_DMA+0x1e0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d129      	bne.n	8006d86 <HAL_ADC_Start_DMA+0x1b6>
 8006d32:	4b19      	ldr	r3, [pc, #100]	; (8006d98 <HAL_ADC_Start_DMA+0x1c8>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d823      	bhi.n	8006d86 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d11c      	bne.n	8006d86 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d5a:	609a      	str	r2, [r3, #8]
 8006d5c:	e013      	b.n	8006d86 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a11      	ldr	r2, [pc, #68]	; (8006da8 <HAL_ADC_Start_DMA+0x1d8>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10e      	bne.n	8006d86 <HAL_ADC_Start_DMA+0x1b6>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d107      	bne.n	8006d86 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d84:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	2000153c 	.word	0x2000153c
 8006d94:	431bde83 	.word	0x431bde83
 8006d98:	40012300 	.word	0x40012300
 8006d9c:	0800722d 	.word	0x0800722d
 8006da0:	080072e7 	.word	0x080072e7
 8006da4:	08007303 	.word	0x08007303
 8006da8:	40012000 	.word	0x40012000
 8006dac:	40012100 	.word	0x40012100
 8006db0:	40012200 	.word	0x40012200

08006db4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_ADC_ConfigChannel+0x1c>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e105      	b.n	8007018 <HAL_ADC_ConfigChannel+0x228>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b09      	cmp	r3, #9
 8006e1a:	d925      	bls.n	8006e68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68d9      	ldr	r1, [r3, #12]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4413      	add	r3, r2
 8006e30:	3b1e      	subs	r3, #30
 8006e32:	2207      	movs	r2, #7
 8006e34:	fa02 f303 	lsl.w	r3, r2, r3
 8006e38:	43da      	mvns	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	400a      	ands	r2, r1
 8006e40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68d9      	ldr	r1, [r3, #12]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689a      	ldr	r2, [r3, #8]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	4618      	mov	r0, r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	4403      	add	r3, r0
 8006e5a:	3b1e      	subs	r3, #30
 8006e5c:	409a      	lsls	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	60da      	str	r2, [r3, #12]
 8006e66:	e022      	b.n	8006eae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6919      	ldr	r1, [r3, #16]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	4613      	mov	r3, r2
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	4413      	add	r3, r2
 8006e7c:	2207      	movs	r2, #7
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	43da      	mvns	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	400a      	ands	r2, r1
 8006e8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6919      	ldr	r1, [r3, #16]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689a      	ldr	r2, [r3, #8]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4403      	add	r3, r0
 8006ea4:	409a      	lsls	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b06      	cmp	r3, #6
 8006eb4:	d824      	bhi.n	8006f00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3b05      	subs	r3, #5
 8006ec8:	221f      	movs	r2, #31
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	43da      	mvns	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	400a      	ands	r2, r1
 8006ed6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	3b05      	subs	r3, #5
 8006ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	430a      	orrs	r2, r1
 8006efc:	635a      	str	r2, [r3, #52]	; 0x34
 8006efe:	e04c      	b.n	8006f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	2b0c      	cmp	r3, #12
 8006f06:	d824      	bhi.n	8006f52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	3b23      	subs	r3, #35	; 0x23
 8006f1a:	221f      	movs	r2, #31
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	43da      	mvns	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	400a      	ands	r2, r1
 8006f28:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	4618      	mov	r0, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	3b23      	subs	r3, #35	; 0x23
 8006f44:	fa00 f203 	lsl.w	r2, r0, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f50:	e023      	b.n	8006f9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	3b41      	subs	r3, #65	; 0x41
 8006f64:	221f      	movs	r2, #31
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	43da      	mvns	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	400a      	ands	r2, r1
 8006f72:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4618      	mov	r0, r3
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3b41      	subs	r3, #65	; 0x41
 8006f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f9a:	4b22      	ldr	r3, [pc, #136]	; (8007024 <HAL_ADC_ConfigChannel+0x234>)
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a21      	ldr	r2, [pc, #132]	; (8007028 <HAL_ADC_ConfigChannel+0x238>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d109      	bne.n	8006fbc <HAL_ADC_ConfigChannel+0x1cc>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b12      	cmp	r3, #18
 8006fae:	d105      	bne.n	8006fbc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a19      	ldr	r2, [pc, #100]	; (8007028 <HAL_ADC_ConfigChannel+0x238>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d123      	bne.n	800700e <HAL_ADC_ConfigChannel+0x21e>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d003      	beq.n	8006fd6 <HAL_ADC_ConfigChannel+0x1e6>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b11      	cmp	r3, #17
 8006fd4:	d11b      	bne.n	800700e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b10      	cmp	r3, #16
 8006fe8:	d111      	bne.n	800700e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006fea:	4b10      	ldr	r3, [pc, #64]	; (800702c <HAL_ADC_ConfigChannel+0x23c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a10      	ldr	r2, [pc, #64]	; (8007030 <HAL_ADC_ConfigChannel+0x240>)
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	0c9a      	lsrs	r2, r3, #18
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007000:	e002      	b.n	8007008 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3b01      	subs	r3, #1
 8007006:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f9      	bne.n	8007002 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	40012300 	.word	0x40012300
 8007028:	40012000 	.word	0x40012000
 800702c:	2000153c 	.word	0x2000153c
 8007030:	431bde83 	.word	0x431bde83

08007034 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800703c:	4b79      	ldr	r3, [pc, #484]	; (8007224 <ADC_Init+0x1f0>)
 800703e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	431a      	orrs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6859      	ldr	r1, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	021a      	lsls	r2, r3, #8
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800708c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6859      	ldr	r1, [r3, #4]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6899      	ldr	r1, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	4a58      	ldr	r2, [pc, #352]	; (8007228 <ADC_Init+0x1f4>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d022      	beq.n	8007112 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6899      	ldr	r1, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6899      	ldr	r1, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	e00f      	b.n	8007132 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007120:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007130:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0202 	bic.w	r2, r2, #2
 8007140:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6899      	ldr	r1, [r3, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	7e1b      	ldrb	r3, [r3, #24]
 800714c:	005a      	lsls	r2, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01b      	beq.n	8007198 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800716e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800717e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6859      	ldr	r1, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	3b01      	subs	r3, #1
 800718c:	035a      	lsls	r2, r3, #13
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	e007      	b.n	80071a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80071b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69db      	ldr	r3, [r3, #28]
 80071c2:	3b01      	subs	r3, #1
 80071c4:	051a      	lsls	r2, r3, #20
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80071dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6899      	ldr	r1, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071ea:	025a      	lsls	r2, r3, #9
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007202:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6899      	ldr	r1, [r3, #8]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	029a      	lsls	r2, r3, #10
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	609a      	str	r2, [r3, #8]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40012300 	.word	0x40012300
 8007228:	0f000001 	.word	0x0f000001

0800722c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007238:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007242:	2b00      	cmp	r3, #0
 8007244:	d13c      	bne.n	80072c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d12b      	bne.n	80072b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007264:	2b00      	cmp	r3, #0
 8007266:	d127      	bne.n	80072b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007272:	2b00      	cmp	r3, #0
 8007274:	d006      	beq.n	8007284 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007280:	2b00      	cmp	r3, #0
 8007282:	d119      	bne.n	80072b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0220 	bic.w	r2, r2, #32
 8007292:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d105      	bne.n	80072b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b0:	f043 0201 	orr.w	r2, r3, #1
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff fd7b 	bl	8006db4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80072be:	e00e      	b.n	80072de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c4:	f003 0310 	and.w	r3, r3, #16
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fd85 	bl	8006ddc <HAL_ADC_ErrorCallback>
}
 80072d2:	e004      	b.n	80072de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fd67 	bl	8006dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2240      	movs	r2, #64	; 0x40
 8007314:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731a:	f043 0204 	orr.w	r2, r3, #4
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7ff fd5a 	bl	8006ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007340:	4b0c      	ldr	r3, [pc, #48]	; (8007374 <__NVIC_SetPriorityGrouping+0x44>)
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800734c:	4013      	ands	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800735c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007362:	4a04      	ldr	r2, [pc, #16]	; (8007374 <__NVIC_SetPriorityGrouping+0x44>)
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	60d3      	str	r3, [r2, #12]
}
 8007368:	bf00      	nop
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	e000ed00 	.word	0xe000ed00

08007378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800737c:	4b04      	ldr	r3, [pc, #16]	; (8007390 <__NVIC_GetPriorityGrouping+0x18>)
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	0a1b      	lsrs	r3, r3, #8
 8007382:	f003 0307 	and.w	r3, r3, #7
}
 8007386:	4618      	mov	r0, r3
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	e000ed00 	.word	0xe000ed00

08007394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800739e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	db0b      	blt.n	80073be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	f003 021f 	and.w	r2, r3, #31
 80073ac:	4907      	ldr	r1, [pc, #28]	; (80073cc <__NVIC_EnableIRQ+0x38>)
 80073ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b2:	095b      	lsrs	r3, r3, #5
 80073b4:	2001      	movs	r0, #1
 80073b6:	fa00 f202 	lsl.w	r2, r0, r2
 80073ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	e000e100 	.word	0xe000e100

080073d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	db0a      	blt.n	80073fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	490c      	ldr	r1, [pc, #48]	; (800741c <__NVIC_SetPriority+0x4c>)
 80073ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ee:	0112      	lsls	r2, r2, #4
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	440b      	add	r3, r1
 80073f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073f8:	e00a      	b.n	8007410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	4908      	ldr	r1, [pc, #32]	; (8007420 <__NVIC_SetPriority+0x50>)
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	3b04      	subs	r3, #4
 8007408:	0112      	lsls	r2, r2, #4
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	440b      	add	r3, r1
 800740e:	761a      	strb	r2, [r3, #24]
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	e000e100 	.word	0xe000e100
 8007420:	e000ed00 	.word	0xe000ed00

08007424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007424:	b480      	push	{r7}
 8007426:	b089      	sub	sp, #36	; 0x24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f1c3 0307 	rsb	r3, r3, #7
 800743e:	2b04      	cmp	r3, #4
 8007440:	bf28      	it	cs
 8007442:	2304      	movcs	r3, #4
 8007444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	3304      	adds	r3, #4
 800744a:	2b06      	cmp	r3, #6
 800744c:	d902      	bls.n	8007454 <NVIC_EncodePriority+0x30>
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	3b03      	subs	r3, #3
 8007452:	e000      	b.n	8007456 <NVIC_EncodePriority+0x32>
 8007454:	2300      	movs	r3, #0
 8007456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007458:	f04f 32ff 	mov.w	r2, #4294967295
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	43da      	mvns	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	401a      	ands	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800746c:	f04f 31ff 	mov.w	r1, #4294967295
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	fa01 f303 	lsl.w	r3, r1, r3
 8007476:	43d9      	mvns	r1, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800747c:	4313      	orrs	r3, r2
         );
}
 800747e:	4618      	mov	r0, r3
 8007480:	3724      	adds	r7, #36	; 0x24
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3b01      	subs	r3, #1
 8007498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800749c:	d301      	bcc.n	80074a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800749e:	2301      	movs	r3, #1
 80074a0:	e00f      	b.n	80074c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074a2:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <SysTick_Config+0x40>)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074aa:	210f      	movs	r1, #15
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	f7ff ff8e 	bl	80073d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074b4:	4b05      	ldr	r3, [pc, #20]	; (80074cc <SysTick_Config+0x40>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074ba:	4b04      	ldr	r3, [pc, #16]	; (80074cc <SysTick_Config+0x40>)
 80074bc:	2207      	movs	r2, #7
 80074be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	e000e010 	.word	0xe000e010

080074d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff ff29 	bl	8007330 <__NVIC_SetPriorityGrouping>
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	4603      	mov	r3, r0
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80074f8:	f7ff ff3e 	bl	8007378 <__NVIC_GetPriorityGrouping>
 80074fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	6978      	ldr	r0, [r7, #20]
 8007504:	f7ff ff8e 	bl	8007424 <NVIC_EncodePriority>
 8007508:	4602      	mov	r2, r0
 800750a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800750e:	4611      	mov	r1, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff ff5d 	bl	80073d0 <__NVIC_SetPriority>
}
 8007516:	bf00      	nop
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	4603      	mov	r3, r0
 8007526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff ff31 	bl	8007394 <__NVIC_EnableIRQ>
}
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff ffa2 	bl	800748c <SysTick_Config>
 8007548:	4603      	mov	r3, r0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007560:	f7ff fac4 	bl	8006aec <HAL_GetTick>
 8007564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e099      	b.n	80076a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007590:	e00f      	b.n	80075b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007592:	f7ff faab 	bl	8006aec <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b05      	cmp	r3, #5
 800759e:	d908      	bls.n	80075b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2203      	movs	r2, #3
 80075aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e078      	b.n	80076a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e8      	bne.n	8007592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4b38      	ldr	r3, [pc, #224]	; (80076ac <HAL_DMA_Init+0x158>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4313      	orrs	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	2b04      	cmp	r3, #4
 800760a:	d107      	bne.n	800761c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	4313      	orrs	r3, r2
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	4313      	orrs	r3, r2
 800763c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b04      	cmp	r3, #4
 8007644:	d117      	bne.n	8007676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fa91 	bl	8007b80 <DMA_CheckFifoParam>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d008      	beq.n	8007676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2240      	movs	r2, #64	; 0x40
 8007668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007672:	2301      	movs	r3, #1
 8007674:	e016      	b.n	80076a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa48 	bl	8007b14 <DMA_CalcBaseAndBitshift>
 8007684:	4603      	mov	r3, r0
 8007686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768c:	223f      	movs	r2, #63	; 0x3f
 800768e:	409a      	lsls	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80076a2:	2300      	movs	r3, #0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	f010803f 	.word	0xf010803f

080076b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_DMA_Start_IT+0x26>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e040      	b.n	8007758 <HAL_DMA_Start_IT+0xa8>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d12f      	bne.n	800774a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 f9da 	bl	8007ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007708:	223f      	movs	r2, #63	; 0x3f
 800770a:	409a      	lsls	r2, r3
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0216 	orr.w	r2, r2, #22
 800771e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0208 	orr.w	r2, r2, #8
 8007736:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	e005      	b.n	8007756 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007752:	2302      	movs	r3, #2
 8007754:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007756:	7dfb      	ldrb	r3, [r7, #23]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d004      	beq.n	800777e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2280      	movs	r2, #128	; 0x80
 8007778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e00c      	b.n	8007798 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2205      	movs	r2, #5
 8007782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80077b0:	4b92      	ldr	r3, [pc, #584]	; (80079fc <HAL_DMA_IRQHandler+0x258>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a92      	ldr	r2, [pc, #584]	; (8007a00 <HAL_DMA_IRQHandler+0x25c>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	0a9b      	lsrs	r3, r3, #10
 80077bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ce:	2208      	movs	r2, #8
 80077d0:	409a      	lsls	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01a      	beq.n	8007810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0204 	bic.w	r2, r2, #4
 80077f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fc:	2208      	movs	r2, #8
 80077fe:	409a      	lsls	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	f043 0201 	orr.w	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007814:	2201      	movs	r2, #1
 8007816:	409a      	lsls	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d012      	beq.n	8007846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007832:	2201      	movs	r2, #1
 8007834:	409a      	lsls	r2, r3
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	f043 0202 	orr.w	r2, r3, #2
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800784a:	2204      	movs	r2, #4
 800784c:	409a      	lsls	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4013      	ands	r3, r2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d012      	beq.n	800787c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007868:	2204      	movs	r2, #4
 800786a:	409a      	lsls	r2, r3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007874:	f043 0204 	orr.w	r2, r3, #4
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007880:	2210      	movs	r2, #16
 8007882:	409a      	lsls	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4013      	ands	r3, r2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d043      	beq.n	8007914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d03c      	beq.n	8007914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	2210      	movs	r2, #16
 80078a0:	409a      	lsls	r2, r3
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d018      	beq.n	80078e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d108      	bne.n	80078d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d024      	beq.n	8007914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
 80078d2:	e01f      	b.n	8007914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01b      	beq.n	8007914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
 80078e4:	e016      	b.n	8007914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d107      	bne.n	8007904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0208 	bic.w	r2, r2, #8
 8007902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	2220      	movs	r2, #32
 800791a:	409a      	lsls	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4013      	ands	r3, r2
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 808e 	beq.w	8007a42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0310 	and.w	r3, r3, #16
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8086 	beq.w	8007a42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793a:	2220      	movs	r2, #32
 800793c:	409a      	lsls	r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b05      	cmp	r3, #5
 800794c:	d136      	bne.n	80079bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0216 	bic.w	r2, r2, #22
 800795c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800796c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <HAL_DMA_IRQHandler+0x1da>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0208 	bic.w	r2, r2, #8
 800798c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007992:	223f      	movs	r2, #63	; 0x3f
 8007994:	409a      	lsls	r2, r3
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d07d      	beq.n	8007aae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	4798      	blx	r3
        }
        return;
 80079ba:	e078      	b.n	8007aae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d01c      	beq.n	8007a04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d108      	bne.n	80079ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d030      	beq.n	8007a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	4798      	blx	r3
 80079e8:	e02b      	b.n	8007a42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d027      	beq.n	8007a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
 80079fa:	e022      	b.n	8007a42 <HAL_DMA_IRQHandler+0x29e>
 80079fc:	2000153c 	.word	0x2000153c
 8007a00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10f      	bne.n	8007a32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0210 	bic.w	r2, r2, #16
 8007a20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d032      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d022      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2205      	movs	r2, #5
 8007a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0201 	bic.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	3301      	adds	r3, #1
 8007a72:	60bb      	str	r3, [r7, #8]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d307      	bcc.n	8007a8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f2      	bne.n	8007a6e <HAL_DMA_IRQHandler+0x2ca>
 8007a88:	e000      	b.n	8007a8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007a8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	4798      	blx	r3
 8007aac:	e000      	b.n	8007ab0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007aae:	bf00      	nop
    }
  }
}
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop

08007ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	2b40      	cmp	r3, #64	; 0x40
 8007ae4:	d108      	bne.n	8007af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007af6:	e007      	b.n	8007b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	60da      	str	r2, [r3, #12]
}
 8007b08:	bf00      	nop
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	3b10      	subs	r3, #16
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <DMA_CalcBaseAndBitshift+0x64>)
 8007b26:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2a:	091b      	lsrs	r3, r3, #4
 8007b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007b2e:	4a13      	ldr	r2, [pc, #76]	; (8007b7c <DMA_CalcBaseAndBitshift+0x68>)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d909      	bls.n	8007b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	1d1a      	adds	r2, r3, #4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	659a      	str	r2, [r3, #88]	; 0x58
 8007b54:	e007      	b.n	8007b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	aaaaaaab 	.word	0xaaaaaaab
 8007b7c:	0800f7b0 	.word	0x0800f7b0

08007b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d11f      	bne.n	8007bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d855      	bhi.n	8007c4c <DMA_CheckFifoParam+0xcc>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <DMA_CheckFifoParam+0x28>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bb9 	.word	0x08007bb9
 8007bac:	08007bcb 	.word	0x08007bcb
 8007bb0:	08007bb9 	.word	0x08007bb9
 8007bb4:	08007c4d 	.word	0x08007c4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d045      	beq.n	8007c50 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bc8:	e042      	b.n	8007c50 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007bd2:	d13f      	bne.n	8007c54 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bd8:	e03c      	b.n	8007c54 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be2:	d121      	bne.n	8007c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d836      	bhi.n	8007c58 <DMA_CheckFifoParam+0xd8>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <DMA_CheckFifoParam+0x70>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c07 	.word	0x08007c07
 8007bf8:	08007c01 	.word	0x08007c01
 8007bfc:	08007c19 	.word	0x08007c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	73fb      	strb	r3, [r7, #15]
      break;
 8007c04:	e02f      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d024      	beq.n	8007c5c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c16:	e021      	b.n	8007c5c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c20:	d11e      	bne.n	8007c60 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007c26:	e01b      	b.n	8007c60 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d902      	bls.n	8007c34 <DMA_CheckFifoParam+0xb4>
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d003      	beq.n	8007c3a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007c32:	e018      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	73fb      	strb	r3, [r7, #15]
      break;
 8007c38:	e015      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4a:	e00b      	b.n	8007c64 <DMA_CheckFifoParam+0xe4>
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e00a      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      break;
 8007c50:	bf00      	nop
 8007c52:	e008      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      break;
 8007c54:	bf00      	nop
 8007c56:	e006      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      break;
 8007c58:	bf00      	nop
 8007c5a:	e004      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e002      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      break;   
 8007c60:	bf00      	nop
 8007c62:	e000      	b.n	8007c66 <DMA_CheckFifoParam+0xe6>
      break;
 8007c64:	bf00      	nop
    }
  } 
  
  return status; 
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
 8007c8e:	e16b      	b.n	8007f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c90:	2201      	movs	r2, #1
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	f040 815a 	bne.w	8007f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d00b      	beq.n	8007cce <HAL_GPIO_Init+0x5a>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d007      	beq.n	8007cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cc2:	2b11      	cmp	r3, #17
 8007cc4:	d003      	beq.n	8007cce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b12      	cmp	r3, #18
 8007ccc:	d130      	bne.n	8007d30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	2203      	movs	r2, #3
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007d04:	2201      	movs	r2, #1
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4013      	ands	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	091b      	lsrs	r3, r3, #4
 8007d1a:	f003 0201 	and.w	r2, r3, #1
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	43db      	mvns	r3, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4013      	ands	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	fa02 f303 	lsl.w	r3, r2, r3
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d003      	beq.n	8007d70 <HAL_GPIO_Init+0xfc>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b12      	cmp	r3, #18
 8007d6e:	d123      	bne.n	8007db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	08da      	lsrs	r2, r3, #3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3208      	adds	r2, #8
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	220f      	movs	r2, #15
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4013      	ands	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	fa02 f303 	lsl.w	r3, r2, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	08da      	lsrs	r2, r3, #3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3208      	adds	r2, #8
 8007db2:	69b9      	ldr	r1, [r7, #24]
 8007db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f003 0203 	and.w	r2, r3, #3
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 80b4 	beq.w	8007f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	4b5f      	ldr	r3, [pc, #380]	; (8007f7c <HAL_GPIO_Init+0x308>)
 8007e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e02:	4a5e      	ldr	r2, [pc, #376]	; (8007f7c <HAL_GPIO_Init+0x308>)
 8007e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e08:	6453      	str	r3, [r2, #68]	; 0x44
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	; (8007f7c <HAL_GPIO_Init+0x308>)
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e16:	4a5a      	ldr	r2, [pc, #360]	; (8007f80 <HAL_GPIO_Init+0x30c>)
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	089b      	lsrs	r3, r3, #2
 8007e1c:	3302      	adds	r3, #2
 8007e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	220f      	movs	r2, #15
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	43db      	mvns	r3, r3
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	4013      	ands	r3, r2
 8007e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a51      	ldr	r2, [pc, #324]	; (8007f84 <HAL_GPIO_Init+0x310>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d02b      	beq.n	8007e9a <HAL_GPIO_Init+0x226>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a50      	ldr	r2, [pc, #320]	; (8007f88 <HAL_GPIO_Init+0x314>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d025      	beq.n	8007e96 <HAL_GPIO_Init+0x222>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a4f      	ldr	r2, [pc, #316]	; (8007f8c <HAL_GPIO_Init+0x318>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d01f      	beq.n	8007e92 <HAL_GPIO_Init+0x21e>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a4e      	ldr	r2, [pc, #312]	; (8007f90 <HAL_GPIO_Init+0x31c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d019      	beq.n	8007e8e <HAL_GPIO_Init+0x21a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a4d      	ldr	r2, [pc, #308]	; (8007f94 <HAL_GPIO_Init+0x320>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d013      	beq.n	8007e8a <HAL_GPIO_Init+0x216>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a4c      	ldr	r2, [pc, #304]	; (8007f98 <HAL_GPIO_Init+0x324>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00d      	beq.n	8007e86 <HAL_GPIO_Init+0x212>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a4b      	ldr	r2, [pc, #300]	; (8007f9c <HAL_GPIO_Init+0x328>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d007      	beq.n	8007e82 <HAL_GPIO_Init+0x20e>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a4a      	ldr	r2, [pc, #296]	; (8007fa0 <HAL_GPIO_Init+0x32c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d101      	bne.n	8007e7e <HAL_GPIO_Init+0x20a>
 8007e7a:	2307      	movs	r3, #7
 8007e7c:	e00e      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e7e:	2308      	movs	r3, #8
 8007e80:	e00c      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e82:	2306      	movs	r3, #6
 8007e84:	e00a      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e86:	2305      	movs	r3, #5
 8007e88:	e008      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e8a:	2304      	movs	r3, #4
 8007e8c:	e006      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e004      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e002      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e000      	b.n	8007e9c <HAL_GPIO_Init+0x228>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	f002 0203 	and.w	r2, r2, #3
 8007ea2:	0092      	lsls	r2, r2, #2
 8007ea4:	4093      	lsls	r3, r2
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007eac:	4934      	ldr	r1, [pc, #208]	; (8007f80 <HAL_GPIO_Init+0x30c>)
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	089b      	lsrs	r3, r3, #2
 8007eb2:	3302      	adds	r3, #2
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007eba:	4b3a      	ldr	r3, [pc, #232]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007ede:	4a31      	ldr	r2, [pc, #196]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007ee4:	4b2f      	ldr	r3, [pc, #188]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f08:	4a26      	ldr	r2, [pc, #152]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f0e:	4b25      	ldr	r3, [pc, #148]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	43db      	mvns	r3, r3
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f32:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f38:	4b1a      	ldr	r3, [pc, #104]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4013      	ands	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f5c:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <HAL_GPIO_Init+0x330>)
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	3301      	adds	r3, #1
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	2b0f      	cmp	r3, #15
 8007f6c:	f67f ae90 	bls.w	8007c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f70:	bf00      	nop
 8007f72:	3724      	adds	r7, #36	; 0x24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	40013800 	.word	0x40013800
 8007f84:	40020000 	.word	0x40020000
 8007f88:	40020400 	.word	0x40020400
 8007f8c:	40020800 	.word	0x40020800
 8007f90:	40020c00 	.word	0x40020c00
 8007f94:	40021000 	.word	0x40021000
 8007f98:	40021400 	.word	0x40021400
 8007f9c:	40021800 	.word	0x40021800
 8007fa0:	40021c00 	.word	0x40021c00
 8007fa4:	40013c00 	.word	0x40013c00

08007fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	807b      	strh	r3, [r7, #2]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fb8:	787b      	ldrb	r3, [r7, #1]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fbe:	887a      	ldrh	r2, [r7, #2]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fc4:	e003      	b.n	8007fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fc6:	887b      	ldrh	r3, [r7, #2]
 8007fc8:	041a      	lsls	r2, r3, #16
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	619a      	str	r2, [r3, #24]
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
	...

08007fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e11f      	b.n	800822e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fd fa46 	bl	8005494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2224      	movs	r2, #36	; 0x24
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0201 	bic.w	r2, r2, #1
 800801e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800802e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800803e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008040:	f000 fd18 	bl	8008a74 <HAL_RCC_GetPCLK1Freq>
 8008044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	4a7b      	ldr	r2, [pc, #492]	; (8008238 <HAL_I2C_Init+0x25c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d807      	bhi.n	8008060 <HAL_I2C_Init+0x84>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4a7a      	ldr	r2, [pc, #488]	; (800823c <HAL_I2C_Init+0x260>)
 8008054:	4293      	cmp	r3, r2
 8008056:	bf94      	ite	ls
 8008058:	2301      	movls	r3, #1
 800805a:	2300      	movhi	r3, #0
 800805c:	b2db      	uxtb	r3, r3
 800805e:	e006      	b.n	800806e <HAL_I2C_Init+0x92>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a77      	ldr	r2, [pc, #476]	; (8008240 <HAL_I2C_Init+0x264>)
 8008064:	4293      	cmp	r3, r2
 8008066:	bf94      	ite	ls
 8008068:	2301      	movls	r3, #1
 800806a:	2300      	movhi	r3, #0
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e0db      	b.n	800822e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a72      	ldr	r2, [pc, #456]	; (8008244 <HAL_I2C_Init+0x268>)
 800807a:	fba2 2303 	umull	r2, r3, r2, r3
 800807e:	0c9b      	lsrs	r3, r3, #18
 8008080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	4a64      	ldr	r2, [pc, #400]	; (8008238 <HAL_I2C_Init+0x25c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d802      	bhi.n	80080b0 <HAL_I2C_Init+0xd4>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	3301      	adds	r3, #1
 80080ae:	e009      	b.n	80080c4 <HAL_I2C_Init+0xe8>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
 80080ba:	4a63      	ldr	r2, [pc, #396]	; (8008248 <HAL_I2C_Init+0x26c>)
 80080bc:	fba2 2303 	umull	r2, r3, r2, r3
 80080c0:	099b      	lsrs	r3, r3, #6
 80080c2:	3301      	adds	r3, #1
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6812      	ldr	r2, [r2, #0]
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	4956      	ldr	r1, [pc, #344]	; (8008238 <HAL_I2C_Init+0x25c>)
 80080e0:	428b      	cmp	r3, r1
 80080e2:	d80d      	bhi.n	8008100 <HAL_I2C_Init+0x124>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1e59      	subs	r1, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80080f2:	3301      	adds	r3, #1
 80080f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	bf38      	it	cc
 80080fc:	2304      	movcc	r3, #4
 80080fe:	e04f      	b.n	80081a0 <HAL_I2C_Init+0x1c4>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d111      	bne.n	800812c <HAL_I2C_Init+0x150>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	1e58      	subs	r0, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6859      	ldr	r1, [r3, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	440b      	add	r3, r1
 8008116:	fbb0 f3f3 	udiv	r3, r0, r3
 800811a:	3301      	adds	r3, #1
 800811c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008120:	2b00      	cmp	r3, #0
 8008122:	bf0c      	ite	eq
 8008124:	2301      	moveq	r3, #1
 8008126:	2300      	movne	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	e012      	b.n	8008152 <HAL_I2C_Init+0x176>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	1e58      	subs	r0, r3, #1
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6859      	ldr	r1, [r3, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	440b      	add	r3, r1
 800813a:	0099      	lsls	r1, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008142:	3301      	adds	r3, #1
 8008144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008148:	2b00      	cmp	r3, #0
 800814a:	bf0c      	ite	eq
 800814c:	2301      	moveq	r3, #1
 800814e:	2300      	movne	r3, #0
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <HAL_I2C_Init+0x17e>
 8008156:	2301      	movs	r3, #1
 8008158:	e022      	b.n	80081a0 <HAL_I2C_Init+0x1c4>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10e      	bne.n	8008180 <HAL_I2C_Init+0x1a4>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1e58      	subs	r0, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6859      	ldr	r1, [r3, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	440b      	add	r3, r1
 8008170:	fbb0 f3f3 	udiv	r3, r0, r3
 8008174:	3301      	adds	r3, #1
 8008176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800817a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817e:	e00f      	b.n	80081a0 <HAL_I2C_Init+0x1c4>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	1e58      	subs	r0, r3, #1
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6859      	ldr	r1, [r3, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	0099      	lsls	r1, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	fbb0 f3f3 	udiv	r3, r0, r3
 8008196:	3301      	adds	r3, #1
 8008198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800819c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	6809      	ldr	r1, [r1, #0]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	69da      	ldr	r2, [r3, #28]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	431a      	orrs	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6911      	ldr	r1, [r2, #16]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	68d2      	ldr	r2, [r2, #12]
 80081da:	4311      	orrs	r1, r2
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	430b      	orrs	r3, r1
 80081e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	695a      	ldr	r2, [r3, #20]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2220      	movs	r2, #32
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	000186a0 	.word	0x000186a0
 800823c:	001e847f 	.word	0x001e847f
 8008240:	003d08ff 	.word	0x003d08ff
 8008244:	431bde83 	.word	0x431bde83
 8008248:	10624dd3 	.word	0x10624dd3

0800824c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e25b      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	d075      	beq.n	8008356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800826a:	4ba3      	ldr	r3, [pc, #652]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 030c 	and.w	r3, r3, #12
 8008272:	2b04      	cmp	r3, #4
 8008274:	d00c      	beq.n	8008290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008276:	4ba0      	ldr	r3, [pc, #640]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800827e:	2b08      	cmp	r3, #8
 8008280:	d112      	bne.n	80082a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008282:	4b9d      	ldr	r3, [pc, #628]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800828a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800828e:	d10b      	bne.n	80082a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008290:	4b99      	ldr	r3, [pc, #612]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d05b      	beq.n	8008354 <HAL_RCC_OscConfig+0x108>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d157      	bne.n	8008354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e236      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b0:	d106      	bne.n	80082c0 <HAL_RCC_OscConfig+0x74>
 80082b2:	4b91      	ldr	r3, [pc, #580]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a90      	ldr	r2, [pc, #576]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e01d      	b.n	80082fc <HAL_RCC_OscConfig+0xb0>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082c8:	d10c      	bne.n	80082e4 <HAL_RCC_OscConfig+0x98>
 80082ca:	4b8b      	ldr	r3, [pc, #556]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a8a      	ldr	r2, [pc, #552]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a87      	ldr	r2, [pc, #540]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	e00b      	b.n	80082fc <HAL_RCC_OscConfig+0xb0>
 80082e4:	4b84      	ldr	r3, [pc, #528]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a83      	ldr	r2, [pc, #524]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	4b81      	ldr	r3, [pc, #516]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a80      	ldr	r2, [pc, #512]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80082f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d013      	beq.n	800832c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008304:	f7fe fbf2 	bl	8006aec <HAL_GetTick>
 8008308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800830c:	f7fe fbee 	bl	8006aec <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b64      	cmp	r3, #100	; 0x64
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e1fb      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800831e:	4b76      	ldr	r3, [pc, #472]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0f0      	beq.n	800830c <HAL_RCC_OscConfig+0xc0>
 800832a:	e014      	b.n	8008356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800832c:	f7fe fbde 	bl	8006aec <HAL_GetTick>
 8008330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008332:	e008      	b.n	8008346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008334:	f7fe fbda 	bl	8006aec <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	2b64      	cmp	r3, #100	; 0x64
 8008340:	d901      	bls.n	8008346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008342:	2303      	movs	r3, #3
 8008344:	e1e7      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008346:	4b6c      	ldr	r3, [pc, #432]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1f0      	bne.n	8008334 <HAL_RCC_OscConfig+0xe8>
 8008352:	e000      	b.n	8008356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d063      	beq.n	800842a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008362:	4b65      	ldr	r3, [pc, #404]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f003 030c 	and.w	r3, r3, #12
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00b      	beq.n	8008386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800836e:	4b62      	ldr	r3, [pc, #392]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008376:	2b08      	cmp	r3, #8
 8008378:	d11c      	bne.n	80083b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800837a:	4b5f      	ldr	r3, [pc, #380]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d116      	bne.n	80083b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008386:	4b5c      	ldr	r3, [pc, #368]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <HAL_RCC_OscConfig+0x152>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d001      	beq.n	800839e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e1bb      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800839e:	4b56      	ldr	r3, [pc, #344]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	00db      	lsls	r3, r3, #3
 80083ac:	4952      	ldr	r1, [pc, #328]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083b2:	e03a      	b.n	800842a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d020      	beq.n	80083fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083bc:	4b4f      	ldr	r3, [pc, #316]	; (80084fc <HAL_RCC_OscConfig+0x2b0>)
 80083be:	2201      	movs	r2, #1
 80083c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c2:	f7fe fb93 	bl	8006aec <HAL_GetTick>
 80083c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083c8:	e008      	b.n	80083dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083ca:	f7fe fb8f 	bl	8006aec <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d901      	bls.n	80083dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e19c      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083dc:	4b46      	ldr	r3, [pc, #280]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0302 	and.w	r3, r3, #2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0f0      	beq.n	80083ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083e8:	4b43      	ldr	r3, [pc, #268]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	4940      	ldr	r1, [pc, #256]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	600b      	str	r3, [r1, #0]
 80083fc:	e015      	b.n	800842a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083fe:	4b3f      	ldr	r3, [pc, #252]	; (80084fc <HAL_RCC_OscConfig+0x2b0>)
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008404:	f7fe fb72 	bl	8006aec <HAL_GetTick>
 8008408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800840c:	f7fe fb6e 	bl	8006aec <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b02      	cmp	r3, #2
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e17b      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800841e:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0308 	and.w	r3, r3, #8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d030      	beq.n	8008498 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d016      	beq.n	800846c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800843e:	4b30      	ldr	r3, [pc, #192]	; (8008500 <HAL_RCC_OscConfig+0x2b4>)
 8008440:	2201      	movs	r2, #1
 8008442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008444:	f7fe fb52 	bl	8006aec <HAL_GetTick>
 8008448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800844c:	f7fe fb4e 	bl	8006aec <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e15b      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800845e:	4b26      	ldr	r3, [pc, #152]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 8008460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f0      	beq.n	800844c <HAL_RCC_OscConfig+0x200>
 800846a:	e015      	b.n	8008498 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800846c:	4b24      	ldr	r3, [pc, #144]	; (8008500 <HAL_RCC_OscConfig+0x2b4>)
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008472:	f7fe fb3b 	bl	8006aec <HAL_GetTick>
 8008476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800847a:	f7fe fb37 	bl	8006aec <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e144      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800848c:	4b1a      	ldr	r3, [pc, #104]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 800848e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1f0      	bne.n	800847a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80a0 	beq.w	80085e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084a6:	2300      	movs	r3, #0
 80084a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10f      	bne.n	80084d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]
 80084ba:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80084bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084be:	4a0e      	ldr	r2, [pc, #56]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80084c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c4:	6413      	str	r3, [r2, #64]	; 0x40
 80084c6:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <HAL_RCC_OscConfig+0x2ac>)
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ce:	60bb      	str	r3, [r7, #8]
 80084d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084d2:	2301      	movs	r3, #1
 80084d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084d6:	4b0b      	ldr	r3, [pc, #44]	; (8008504 <HAL_RCC_OscConfig+0x2b8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d121      	bne.n	8008526 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084e2:	4b08      	ldr	r3, [pc, #32]	; (8008504 <HAL_RCC_OscConfig+0x2b8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a07      	ldr	r2, [pc, #28]	; (8008504 <HAL_RCC_OscConfig+0x2b8>)
 80084e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084ee:	f7fe fafd 	bl	8006aec <HAL_GetTick>
 80084f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f4:	e011      	b.n	800851a <HAL_RCC_OscConfig+0x2ce>
 80084f6:	bf00      	nop
 80084f8:	40023800 	.word	0x40023800
 80084fc:	42470000 	.word	0x42470000
 8008500:	42470e80 	.word	0x42470e80
 8008504:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008508:	f7fe faf0 	bl	8006aec <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e0fd      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800851a:	4b81      	ldr	r3, [pc, #516]	; (8008720 <HAL_RCC_OscConfig+0x4d4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0f0      	beq.n	8008508 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d106      	bne.n	800853c <HAL_RCC_OscConfig+0x2f0>
 800852e:	4b7d      	ldr	r3, [pc, #500]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008532:	4a7c      	ldr	r2, [pc, #496]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008534:	f043 0301 	orr.w	r3, r3, #1
 8008538:	6713      	str	r3, [r2, #112]	; 0x70
 800853a:	e01c      	b.n	8008576 <HAL_RCC_OscConfig+0x32a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	2b05      	cmp	r3, #5
 8008542:	d10c      	bne.n	800855e <HAL_RCC_OscConfig+0x312>
 8008544:	4b77      	ldr	r3, [pc, #476]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008548:	4a76      	ldr	r2, [pc, #472]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 800854a:	f043 0304 	orr.w	r3, r3, #4
 800854e:	6713      	str	r3, [r2, #112]	; 0x70
 8008550:	4b74      	ldr	r3, [pc, #464]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008554:	4a73      	ldr	r2, [pc, #460]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	6713      	str	r3, [r2, #112]	; 0x70
 800855c:	e00b      	b.n	8008576 <HAL_RCC_OscConfig+0x32a>
 800855e:	4b71      	ldr	r3, [pc, #452]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008562:	4a70      	ldr	r2, [pc, #448]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008564:	f023 0301 	bic.w	r3, r3, #1
 8008568:	6713      	str	r3, [r2, #112]	; 0x70
 800856a:	4b6e      	ldr	r3, [pc, #440]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 800856c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856e:	4a6d      	ldr	r2, [pc, #436]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008570:	f023 0304 	bic.w	r3, r3, #4
 8008574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d015      	beq.n	80085aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800857e:	f7fe fab5 	bl	8006aec <HAL_GetTick>
 8008582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008584:	e00a      	b.n	800859c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008586:	f7fe fab1 	bl	8006aec <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	f241 3288 	movw	r2, #5000	; 0x1388
 8008594:	4293      	cmp	r3, r2
 8008596:	d901      	bls.n	800859c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e0bc      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800859c:	4b61      	ldr	r3, [pc, #388]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 800859e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a0:	f003 0302 	and.w	r3, r3, #2
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0ee      	beq.n	8008586 <HAL_RCC_OscConfig+0x33a>
 80085a8:	e014      	b.n	80085d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085aa:	f7fe fa9f 	bl	8006aec <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085b0:	e00a      	b.n	80085c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085b2:	f7fe fa9b 	bl	8006aec <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e0a6      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085c8:	4b56      	ldr	r3, [pc, #344]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1ee      	bne.n	80085b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d105      	bne.n	80085e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085da:	4b52      	ldr	r3, [pc, #328]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	4a51      	ldr	r2, [pc, #324]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 80085e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8092 	beq.w	8008714 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085f0:	4b4c      	ldr	r3, [pc, #304]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f003 030c 	and.w	r3, r3, #12
 80085f8:	2b08      	cmp	r3, #8
 80085fa:	d05c      	beq.n	80086b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d141      	bne.n	8008688 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008604:	4b48      	ldr	r3, [pc, #288]	; (8008728 <HAL_RCC_OscConfig+0x4dc>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800860a:	f7fe fa6f 	bl	8006aec <HAL_GetTick>
 800860e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008610:	e008      	b.n	8008624 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008612:	f7fe fa6b 	bl	8006aec <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d901      	bls.n	8008624 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e078      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008624:	4b3f      	ldr	r3, [pc, #252]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1f0      	bne.n	8008612 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69da      	ldr	r2, [r3, #28]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	431a      	orrs	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	019b      	lsls	r3, r3, #6
 8008640:	431a      	orrs	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	085b      	lsrs	r3, r3, #1
 8008648:	3b01      	subs	r3, #1
 800864a:	041b      	lsls	r3, r3, #16
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	061b      	lsls	r3, r3, #24
 8008654:	4933      	ldr	r1, [pc, #204]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 8008656:	4313      	orrs	r3, r2
 8008658:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800865a:	4b33      	ldr	r3, [pc, #204]	; (8008728 <HAL_RCC_OscConfig+0x4dc>)
 800865c:	2201      	movs	r2, #1
 800865e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008660:	f7fe fa44 	bl	8006aec <HAL_GetTick>
 8008664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008666:	e008      	b.n	800867a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008668:	f7fe fa40 	bl	8006aec <HAL_GetTick>
 800866c:	4602      	mov	r2, r0
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b02      	cmp	r3, #2
 8008674:	d901      	bls.n	800867a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e04d      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800867a:	4b2a      	ldr	r3, [pc, #168]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d0f0      	beq.n	8008668 <HAL_RCC_OscConfig+0x41c>
 8008686:	e045      	b.n	8008714 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008688:	4b27      	ldr	r3, [pc, #156]	; (8008728 <HAL_RCC_OscConfig+0x4dc>)
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868e:	f7fe fa2d 	bl	8006aec <HAL_GetTick>
 8008692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008696:	f7fe fa29 	bl	8006aec <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e036      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086a8:	4b1e      	ldr	r3, [pc, #120]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f0      	bne.n	8008696 <HAL_RCC_OscConfig+0x44a>
 80086b4:	e02e      	b.n	8008714 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d101      	bne.n	80086c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e029      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80086c2:	4b18      	ldr	r3, [pc, #96]	; (8008724 <HAL_RCC_OscConfig+0x4d8>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d11c      	bne.n	8008710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d115      	bne.n	8008710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086ea:	4013      	ands	r3, r2
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d10d      	bne.n	8008710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086fe:	429a      	cmp	r2, r3
 8008700:	d106      	bne.n	8008710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800870c:	429a      	cmp	r2, r3
 800870e:	d001      	beq.n	8008714 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e000      	b.n	8008716 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40007000 	.word	0x40007000
 8008724:	40023800 	.word	0x40023800
 8008728:	42470060 	.word	0x42470060

0800872c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e0cc      	b.n	80088da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008740:	4b68      	ldr	r3, [pc, #416]	; (80088e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	683a      	ldr	r2, [r7, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d90c      	bls.n	8008768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800874e:	4b65      	ldr	r3, [pc, #404]	; (80088e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008756:	4b63      	ldr	r3, [pc, #396]	; (80088e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	683a      	ldr	r2, [r7, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d001      	beq.n	8008768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e0b8      	b.n	80088da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0302 	and.w	r3, r3, #2
 8008770:	2b00      	cmp	r3, #0
 8008772:	d020      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008780:	4b59      	ldr	r3, [pc, #356]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	4a58      	ldr	r2, [pc, #352]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800878a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008798:	4b53      	ldr	r3, [pc, #332]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	4a52      	ldr	r2, [pc, #328]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 800879e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087a4:	4b50      	ldr	r3, [pc, #320]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	494d      	ldr	r1, [pc, #308]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d044      	beq.n	800884c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d107      	bne.n	80087da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ca:	4b47      	ldr	r3, [pc, #284]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d119      	bne.n	800880a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e07f      	b.n	80088da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d003      	beq.n	80087ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d107      	bne.n	80087fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ea:	4b3f      	ldr	r3, [pc, #252]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e06f      	b.n	80088da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087fa:	4b3b      	ldr	r3, [pc, #236]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0302 	and.w	r3, r3, #2
 8008802:	2b00      	cmp	r3, #0
 8008804:	d101      	bne.n	800880a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e067      	b.n	80088da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800880a:	4b37      	ldr	r3, [pc, #220]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f023 0203 	bic.w	r2, r3, #3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	4934      	ldr	r1, [pc, #208]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008818:	4313      	orrs	r3, r2
 800881a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800881c:	f7fe f966 	bl	8006aec <HAL_GetTick>
 8008820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008822:	e00a      	b.n	800883a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008824:	f7fe f962 	bl	8006aec <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008832:	4293      	cmp	r3, r2
 8008834:	d901      	bls.n	800883a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e04f      	b.n	80088da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883a:	4b2b      	ldr	r3, [pc, #172]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 020c 	and.w	r2, r3, #12
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	429a      	cmp	r2, r3
 800884a:	d1eb      	bne.n	8008824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800884c:	4b25      	ldr	r3, [pc, #148]	; (80088e4 <HAL_RCC_ClockConfig+0x1b8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d20c      	bcs.n	8008874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800885a:	4b22      	ldr	r3, [pc, #136]	; (80088e4 <HAL_RCC_ClockConfig+0x1b8>)
 800885c:	683a      	ldr	r2, [r7, #0]
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008862:	4b20      	ldr	r3, [pc, #128]	; (80088e4 <HAL_RCC_ClockConfig+0x1b8>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 030f 	and.w	r3, r3, #15
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	429a      	cmp	r2, r3
 800886e:	d001      	beq.n	8008874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e032      	b.n	80088da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d008      	beq.n	8008892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008880:	4b19      	ldr	r3, [pc, #100]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	4916      	ldr	r1, [pc, #88]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 800888e:	4313      	orrs	r3, r2
 8008890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800889e:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	490e      	ldr	r1, [pc, #56]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80088b2:	f000 f821 	bl	80088f8 <HAL_RCC_GetSysClockFreq>
 80088b6:	4601      	mov	r1, r0
 80088b8:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <HAL_RCC_ClockConfig+0x1bc>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	091b      	lsrs	r3, r3, #4
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <HAL_RCC_ClockConfig+0x1c0>)
 80088c4:	5cd3      	ldrb	r3, [r2, r3]
 80088c6:	fa21 f303 	lsr.w	r3, r1, r3
 80088ca:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <HAL_RCC_ClockConfig+0x1c4>)
 80088cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <HAL_RCC_ClockConfig+0x1c8>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe f8c6 	bl	8006a64 <HAL_InitTick>

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	40023c00 	.word	0x40023c00
 80088e8:	40023800 	.word	0x40023800
 80088ec:	0800f798 	.word	0x0800f798
 80088f0:	2000153c 	.word	0x2000153c
 80088f4:	20001558 	.word	0x20001558

080088f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	607b      	str	r3, [r7, #4]
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	2300      	movs	r3, #0
 8008908:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800890e:	4b50      	ldr	r3, [pc, #320]	; (8008a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 030c 	and.w	r3, r3, #12
 8008916:	2b04      	cmp	r3, #4
 8008918:	d007      	beq.n	800892a <HAL_RCC_GetSysClockFreq+0x32>
 800891a:	2b08      	cmp	r3, #8
 800891c:	d008      	beq.n	8008930 <HAL_RCC_GetSysClockFreq+0x38>
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 808d 	bne.w	8008a3e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008924:	4b4b      	ldr	r3, [pc, #300]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008926:	60bb      	str	r3, [r7, #8]
       break;
 8008928:	e08c      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800892a:	4b4b      	ldr	r3, [pc, #300]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x160>)
 800892c:	60bb      	str	r3, [r7, #8]
      break;
 800892e:	e089      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008930:	4b47      	ldr	r3, [pc, #284]	; (8008a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008938:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800893a:	4b45      	ldr	r3, [pc, #276]	; (8008a50 <HAL_RCC_GetSysClockFreq+0x158>)
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d023      	beq.n	800898e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008946:	4b42      	ldr	r3, [pc, #264]	; (8008a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	099b      	lsrs	r3, r3, #6
 800894c:	f04f 0400 	mov.w	r4, #0
 8008950:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	ea03 0501 	and.w	r5, r3, r1
 800895c:	ea04 0602 	and.w	r6, r4, r2
 8008960:	4a3d      	ldr	r2, [pc, #244]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8008962:	fb02 f106 	mul.w	r1, r2, r6
 8008966:	2200      	movs	r2, #0
 8008968:	fb02 f205 	mul.w	r2, r2, r5
 800896c:	440a      	add	r2, r1
 800896e:	493a      	ldr	r1, [pc, #232]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8008970:	fba5 0101 	umull	r0, r1, r5, r1
 8008974:	1853      	adds	r3, r2, r1
 8008976:	4619      	mov	r1, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f04f 0400 	mov.w	r4, #0
 800897e:	461a      	mov	r2, r3
 8008980:	4623      	mov	r3, r4
 8008982:	f7f8 f961 	bl	8000c48 <__aeabi_uldivmod>
 8008986:	4603      	mov	r3, r0
 8008988:	460c      	mov	r4, r1
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e049      	b.n	8008a22 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800898e:	4b30      	ldr	r3, [pc, #192]	; (8008a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	099b      	lsrs	r3, r3, #6
 8008994:	f04f 0400 	mov.w	r4, #0
 8008998:	f240 11ff 	movw	r1, #511	; 0x1ff
 800899c:	f04f 0200 	mov.w	r2, #0
 80089a0:	ea03 0501 	and.w	r5, r3, r1
 80089a4:	ea04 0602 	and.w	r6, r4, r2
 80089a8:	4629      	mov	r1, r5
 80089aa:	4632      	mov	r2, r6
 80089ac:	f04f 0300 	mov.w	r3, #0
 80089b0:	f04f 0400 	mov.w	r4, #0
 80089b4:	0154      	lsls	r4, r2, #5
 80089b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80089ba:	014b      	lsls	r3, r1, #5
 80089bc:	4619      	mov	r1, r3
 80089be:	4622      	mov	r2, r4
 80089c0:	1b49      	subs	r1, r1, r5
 80089c2:	eb62 0206 	sbc.w	r2, r2, r6
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	f04f 0400 	mov.w	r4, #0
 80089ce:	0194      	lsls	r4, r2, #6
 80089d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80089d4:	018b      	lsls	r3, r1, #6
 80089d6:	1a5b      	subs	r3, r3, r1
 80089d8:	eb64 0402 	sbc.w	r4, r4, r2
 80089dc:	f04f 0100 	mov.w	r1, #0
 80089e0:	f04f 0200 	mov.w	r2, #0
 80089e4:	00e2      	lsls	r2, r4, #3
 80089e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80089ea:	00d9      	lsls	r1, r3, #3
 80089ec:	460b      	mov	r3, r1
 80089ee:	4614      	mov	r4, r2
 80089f0:	195b      	adds	r3, r3, r5
 80089f2:	eb44 0406 	adc.w	r4, r4, r6
 80089f6:	f04f 0100 	mov.w	r1, #0
 80089fa:	f04f 0200 	mov.w	r2, #0
 80089fe:	02a2      	lsls	r2, r4, #10
 8008a00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008a04:	0299      	lsls	r1, r3, #10
 8008a06:	460b      	mov	r3, r1
 8008a08:	4614      	mov	r4, r2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f04f 0400 	mov.w	r4, #0
 8008a14:	461a      	mov	r2, r3
 8008a16:	4623      	mov	r3, r4
 8008a18:	f7f8 f916 	bl	8000c48 <__aeabi_uldivmod>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a22:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3a:	60bb      	str	r3, [r7, #8]
      break;
 8008a3c:	e002      	b.n	8008a44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a3e:	4b05      	ldr	r3, [pc, #20]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a40:	60bb      	str	r3, [r7, #8]
      break;
 8008a42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a44:	68bb      	ldr	r3, [r7, #8]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40023800 	.word	0x40023800
 8008a54:	00f42400 	.word	0x00f42400
 8008a58:	017d7840 	.word	0x017d7840

08008a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a60:	4b03      	ldr	r3, [pc, #12]	; (8008a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a62:	681b      	ldr	r3, [r3, #0]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	2000153c 	.word	0x2000153c

08008a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a78:	f7ff fff0 	bl	8008a5c <HAL_RCC_GetHCLKFreq>
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	0a9b      	lsrs	r3, r3, #10
 8008a84:	f003 0307 	and.w	r3, r3, #7
 8008a88:	4a03      	ldr	r2, [pc, #12]	; (8008a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a8a:	5cd3      	ldrb	r3, [r2, r3]
 8008a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40023800 	.word	0x40023800
 8008a98:	0800f7a8 	.word	0x0800f7a8

08008a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008aa0:	f7ff ffdc 	bl	8008a5c <HAL_RCC_GetHCLKFreq>
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	0b5b      	lsrs	r3, r3, #13
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	4a03      	ldr	r2, [pc, #12]	; (8008ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ab2:	5cd3      	ldrb	r3, [r2, r3]
 8008ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40023800 	.word	0x40023800
 8008ac0:	0800f7a8 	.word	0x0800f7a8

08008ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d101      	bne.n	8008ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e056      	b.n	8008b84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d106      	bne.n	8008af6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7fc ff0b 	bl	800590c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2202      	movs	r2, #2
 8008afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	ea42 0103 	orr.w	r1, r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	0c1b      	lsrs	r3, r3, #16
 8008b54:	f003 0104 	and.w	r1, r3, #4
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69da      	ldr	r2, [r3, #28]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d101      	bne.n	8008bae <HAL_SPI_Transmit+0x22>
 8008baa:	2302      	movs	r3, #2
 8008bac:	e11e      	b.n	8008dec <HAL_SPI_Transmit+0x260>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bb6:	f7fd ff99 	bl	8006aec <HAL_GetTick>
 8008bba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008bbc:	88fb      	ldrh	r3, [r7, #6]
 8008bbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d002      	beq.n	8008bd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008bd0:	e103      	b.n	8008dda <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <HAL_SPI_Transmit+0x52>
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008be2:	e0fa      	b.n	8008dda <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2203      	movs	r2, #3
 8008be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	88fa      	ldrh	r2, [r7, #6]
 8008bfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	88fa      	ldrh	r2, [r7, #6]
 8008c02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c2a:	d107      	bne.n	8008c3c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d007      	beq.n	8008c5a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c62:	d14b      	bne.n	8008cfc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <HAL_SPI_Transmit+0xe6>
 8008c6c:	8afb      	ldrh	r3, [r7, #22]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d13e      	bne.n	8008cf0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	881a      	ldrh	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c82:	1c9a      	adds	r2, r3, #2
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c96:	e02b      	b.n	8008cf0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d112      	bne.n	8008ccc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008caa:	881a      	ldrh	r2, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	1c9a      	adds	r2, r3, #2
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cca:	e011      	b.n	8008cf0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ccc:	f7fd ff0e 	bl	8006aec <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d803      	bhi.n	8008ce4 <HAL_SPI_Transmit+0x158>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce2:	d102      	bne.n	8008cea <HAL_SPI_Transmit+0x15e>
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cee:	e074      	b.n	8008dda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1ce      	bne.n	8008c98 <HAL_SPI_Transmit+0x10c>
 8008cfa:	e04c      	b.n	8008d96 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <HAL_SPI_Transmit+0x17e>
 8008d04:	8afb      	ldrh	r3, [r7, #22]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d140      	bne.n	8008d8c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008d30:	e02c      	b.n	8008d8c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d113      	bne.n	8008d68 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d66:	e011      	b.n	8008d8c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d68:	f7fd fec0 	bl	8006aec <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d803      	bhi.n	8008d80 <HAL_SPI_Transmit+0x1f4>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d102      	bne.n	8008d86 <HAL_SPI_Transmit+0x1fa>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d8a:	e026      	b.n	8008dda <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1cd      	bne.n	8008d32 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 fc94 	bl	80096c8 <SPI_EndRxTxTransaction>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2220      	movs	r2, #32
 8008daa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008db4:	2300      	movs	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	77fb      	strb	r3, [r7, #31]
 8008dd6:	e000      	b.n	8008dda <HAL_SPI_Transmit+0x24e>
  }

error:
 8008dd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dea:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3720      	adds	r7, #32
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08c      	sub	sp, #48	; 0x30
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008e02:	2301      	movs	r3, #1
 8008e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d101      	bne.n	8008e1a <HAL_SPI_TransmitReceive+0x26>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e18a      	b.n	8009130 <HAL_SPI_TransmitReceive+0x33c>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e22:	f7fd fe63 	bl	8006aec <HAL_GetTick>
 8008e26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008e38:	887b      	ldrh	r3, [r7, #2]
 8008e3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008e3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d00f      	beq.n	8008e64 <HAL_SPI_TransmitReceive+0x70>
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e4a:	d107      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <HAL_SPI_TransmitReceive+0x68>
 8008e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d003      	beq.n	8008e64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e62:	e15b      	b.n	800911c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x82>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x82>
 8008e70:	887b      	ldrh	r3, [r7, #2]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d103      	bne.n	8008e7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008e7c:	e14e      	b.n	800911c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b04      	cmp	r3, #4
 8008e88:	d003      	beq.n	8008e92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	887a      	ldrh	r2, [r7, #2]
 8008ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	887a      	ldrh	r2, [r7, #2]
 8008ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	887a      	ldrh	r2, [r7, #2]
 8008eb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	887a      	ldrh	r2, [r7, #2]
 8008eba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed2:	2b40      	cmp	r3, #64	; 0x40
 8008ed4:	d007      	beq.n	8008ee6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008eee:	d178      	bne.n	8008fe2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <HAL_SPI_TransmitReceive+0x10a>
 8008ef8:	8b7b      	ldrh	r3, [r7, #26]
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d166      	bne.n	8008fcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	881a      	ldrh	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0e:	1c9a      	adds	r2, r3, #2
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f22:	e053      	b.n	8008fcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	d11b      	bne.n	8008f6a <HAL_SPI_TransmitReceive+0x176>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d016      	beq.n	8008f6a <HAL_SPI_TransmitReceive+0x176>
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d113      	bne.n	8008f6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f46:	881a      	ldrh	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f52:	1c9a      	adds	r2, r3, #2
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d119      	bne.n	8008fac <HAL_SPI_TransmitReceive+0x1b8>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d014      	beq.n	8008fac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68da      	ldr	r2, [r3, #12]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	b292      	uxth	r2, r2
 8008f8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f94:	1c9a      	adds	r2, r3, #2
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008fac:	f7fd fd9e 	bl	8006aec <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d807      	bhi.n	8008fcc <HAL_SPI_TransmitReceive+0x1d8>
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc2:	d003      	beq.n	8008fcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008fca:	e0a7      	b.n	800911c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1a6      	bne.n	8008f24 <HAL_SPI_TransmitReceive+0x130>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1a1      	bne.n	8008f24 <HAL_SPI_TransmitReceive+0x130>
 8008fe0:	e07c      	b.n	80090dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <HAL_SPI_TransmitReceive+0x1fc>
 8008fea:	8b7b      	ldrh	r3, [r7, #26]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d16b      	bne.n	80090c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	7812      	ldrb	r2, [r2, #0]
 8008ffc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009002:	1c5a      	adds	r2, r3, #1
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009016:	e057      	b.n	80090c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b02      	cmp	r3, #2
 8009024:	d11c      	bne.n	8009060 <HAL_SPI_TransmitReceive+0x26c>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d017      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x26c>
 8009030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009032:	2b01      	cmp	r3, #1
 8009034:	d114      	bne.n	8009060 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	330c      	adds	r3, #12
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009052:	b29b      	uxth	r3, r3
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b01      	cmp	r3, #1
 800906c:	d119      	bne.n	80090a2 <HAL_SPI_TransmitReceive+0x2ae>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009072:	b29b      	uxth	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d014      	beq.n	80090a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009082:	b2d2      	uxtb	r2, r2
 8009084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b01      	subs	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800909e:	2301      	movs	r3, #1
 80090a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80090a2:	f7fd fd23 	bl	8006aec <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d803      	bhi.n	80090ba <HAL_SPI_TransmitReceive+0x2c6>
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d102      	bne.n	80090c0 <HAL_SPI_TransmitReceive+0x2cc>
 80090ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d103      	bne.n	80090c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80090c6:	e029      	b.n	800911c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1a2      	bne.n	8009018 <HAL_SPI_TransmitReceive+0x224>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d19d      	bne.n	8009018 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 faf1 	bl	80096c8 <SPI_EndRxTxTransaction>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d006      	beq.n	80090fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2220      	movs	r2, #32
 80090f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80090f8:	e010      	b.n	800911c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	617b      	str	r3, [r7, #20]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	617b      	str	r3, [r7, #20]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	e000      	b.n	800911c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800911a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800912c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009130:	4618      	mov	r0, r3
 8009132:	3730      	adds	r7, #48	; 0x30
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009154:	2302      	movs	r3, #2
 8009156:	e0e3      	b.n	8009320 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009166:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800916e:	7dbb      	ldrb	r3, [r7, #22]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d00d      	beq.n	8009190 <HAL_SPI_TransmitReceive_DMA+0x58>
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800917a:	d106      	bne.n	800918a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <HAL_SPI_TransmitReceive_DMA+0x52>
 8009184:	7dbb      	ldrb	r3, [r7, #22]
 8009186:	2b04      	cmp	r3, #4
 8009188:	d002      	beq.n	8009190 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800918a:	2302      	movs	r3, #2
 800918c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800918e:	e0c2      	b.n	8009316 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d005      	beq.n	80091a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d002      	beq.n	80091a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800919c:	887b      	ldrh	r3, [r7, #2]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d102      	bne.n	80091a8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80091a6:	e0b6      	b.n	8009316 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	d003      	beq.n	80091bc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2205      	movs	r2, #5
 80091b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	887a      	ldrh	r2, [r7, #2]
 80091cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	887a      	ldrh	r2, [r7, #2]
 80091d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	887a      	ldrh	r2, [r7, #2]
 80091de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	887a      	ldrh	r2, [r7, #2]
 80091e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d108      	bne.n	8009210 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009202:	4a49      	ldr	r2, [pc, #292]	; (8009328 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8009204:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800920a:	4a48      	ldr	r2, [pc, #288]	; (800932c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800920c:	63da      	str	r2, [r3, #60]	; 0x3c
 800920e:	e007      	b.n	8009220 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009214:	4a46      	ldr	r2, [pc, #280]	; (8009330 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8009216:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921c:	4a45      	ldr	r2, [pc, #276]	; (8009334 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800921e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009224:	4a44      	ldr	r2, [pc, #272]	; (8009338 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8009226:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800922c:	2200      	movs	r2, #0
 800922e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	330c      	adds	r3, #12
 800923a:	4619      	mov	r1, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009240:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009246:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009248:	f7fe fa32 	bl	80076b0 <HAL_DMA_Start_IT>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00c      	beq.n	800926c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009256:	f043 0210 	orr.w	r2, r3, #16
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800926a:	e054      	b.n	8009316 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009280:	2200      	movs	r2, #0
 8009282:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009288:	2200      	movs	r2, #0
 800928a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009290:	2200      	movs	r2, #0
 8009292:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009298:	2200      	movs	r2, #0
 800929a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a4:	4619      	mov	r1, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	330c      	adds	r3, #12
 80092ac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80092b4:	f7fe f9fc 	bl	80076b0 <HAL_DMA_Start_IT>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00c      	beq.n	80092d8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c2:	f043 0210 	orr.w	r2, r3, #16
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80092d6:	e01e      	b.n	8009316 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e2:	2b40      	cmp	r3, #64	; 0x40
 80092e4:	d007      	beq.n	80092f6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092f4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f042 0220 	orr.w	r2, r2, #32
 8009304:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f042 0202 	orr.w	r2, r2, #2
 8009314:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800931e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	080094b1 	.word	0x080094b1
 800932c:	08009379 	.word	0x08009379
 8009330:	080094cd 	.word	0x080094cd
 8009334:	08009421 	.word	0x08009421
 8009338:	080094e9 	.word	0x080094e9

0800933c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009386:	f7fd fbb1 	bl	8006aec <HAL_GetTick>
 800938a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939a:	d03b      	beq.n	8009414 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0220 	bic.w	r2, r2, #32
 80093aa:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10d      	bne.n	80093d0 <SPI_DMAReceiveCplt+0x58>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093bc:	d108      	bne.n	80093d0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0203 	bic.w	r2, r2, #3
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	e007      	b.n	80093e0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f022 0201 	bic.w	r2, r2, #1
 80093de:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	2164      	movs	r1, #100	; 0x64
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f909 	bl	80095fc <SPI_EndRxTransaction>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2220      	movs	r2, #32
 80093f4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff ffa9 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009412:	e002      	b.n	800941a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f7ff ff91 	bl	800933c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800942e:	f7fd fb5d 	bl	8006aec <HAL_GetTick>
 8009432:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009442:	d02f      	beq.n	80094a4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685a      	ldr	r2, [r3, #4]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f022 0220 	bic.w	r2, r2, #32
 8009452:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	2164      	movs	r1, #100	; 0x64
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 f935 	bl	80096c8 <SPI_EndRxTxTransaction>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009468:	f043 0220 	orr.w	r2, r3, #32
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0203 	bic.w	r2, r2, #3
 800947e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009498:	2b00      	cmp	r3, #0
 800949a:	d003      	beq.n	80094a4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f7ff ff61 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80094a2:	e002      	b.n	80094aa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f7fb fd91 	bl	8004fcc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f7ff ff46 	bl	8009350 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7fb fd8c 	bl	8004ff8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0203 	bic.w	r2, r2, #3
 8009504:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	f043 0210 	orr.w	r2, r3, #16
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f7ff ff22 	bl	8009364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009538:	e04c      	b.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009540:	d048      	beq.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009542:	f7fd fad3 	bl	8006aec <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	429a      	cmp	r2, r3
 8009550:	d902      	bls.n	8009558 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d13d      	bne.n	80095d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009570:	d111      	bne.n	8009596 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800957a:	d004      	beq.n	8009586 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009584:	d107      	bne.n	8009596 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009594:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800959e:	d10f      	bne.n	80095c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e00f      	b.n	80095f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689a      	ldr	r2, [r3, #8]
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4013      	ands	r3, r2
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	bf0c      	ite	eq
 80095e4:	2301      	moveq	r3, #1
 80095e6:	2300      	movne	r3, #0
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	461a      	mov	r2, r3
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d1a3      	bne.n	800953a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009610:	d111      	bne.n	8009636 <SPI_EndRxTransaction+0x3a>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800961a:	d004      	beq.n	8009626 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009624:	d107      	bne.n	8009636 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009634:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800963e:	d12a      	bne.n	8009696 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009648:	d012      	beq.n	8009670 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2200      	movs	r2, #0
 8009652:	2180      	movs	r1, #128	; 0x80
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff ff67 	bl	8009528 <SPI_WaitFlagStateUntilTimeout>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d02d      	beq.n	80096bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009664:	f043 0220 	orr.w	r2, r3, #32
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	e026      	b.n	80096be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2200      	movs	r2, #0
 8009678:	2101      	movs	r1, #1
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f7ff ff54 	bl	8009528 <SPI_WaitFlagStateUntilTimeout>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01a      	beq.n	80096bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	f043 0220 	orr.w	r2, r3, #32
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e013      	b.n	80096be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2200      	movs	r2, #0
 800969e:	2101      	movs	r1, #1
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff ff41 	bl	8009528 <SPI_WaitFlagStateUntilTimeout>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b0:	f043 0220 	orr.w	r2, r3, #32
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e000      	b.n	80096be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80096d4:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <SPI_EndRxTxTransaction+0x7c>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1b      	ldr	r2, [pc, #108]	; (8009748 <SPI_EndRxTxTransaction+0x80>)
 80096da:	fba2 2303 	umull	r2, r3, r2, r3
 80096de:	0d5b      	lsrs	r3, r3, #21
 80096e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096e4:	fb02 f303 	mul.w	r3, r2, r3
 80096e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096f2:	d112      	bne.n	800971a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2200      	movs	r2, #0
 80096fc:	2180      	movs	r1, #128	; 0x80
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7ff ff12 	bl	8009528 <SPI_WaitFlagStateUntilTimeout>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d016      	beq.n	8009738 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970e:	f043 0220 	orr.w	r2, r3, #32
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009716:	2303      	movs	r3, #3
 8009718:	e00f      	b.n	800973a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00a      	beq.n	8009736 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	3b01      	subs	r3, #1
 8009724:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009730:	2b80      	cmp	r3, #128	; 0x80
 8009732:	d0f2      	beq.n	800971a <SPI_EndRxTxTransaction+0x52>
 8009734:	e000      	b.n	8009738 <SPI_EndRxTxTransaction+0x70>
        break;
 8009736:	bf00      	nop
  }

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	2000153c 	.word	0x2000153c
 8009748:	165e9f81 	.word	0x165e9f81

0800974c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e01d      	b.n	800979a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d106      	bne.n	8009778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fc fc86 	bl	8006084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3304      	adds	r3, #4
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f000 fb34 	bl	8009df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e01d      	b.n	80097f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 f815 	bl	80097f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2202      	movs	r2, #2
 80097d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3304      	adds	r3, #4
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f000 fb09 	bl	8009df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2201      	movs	r2, #1
 800981c:	6839      	ldr	r1, [r7, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fdd4 	bl	800a3cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a15      	ldr	r2, [pc, #84]	; (8009880 <HAL_TIM_PWM_Start+0x74>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_TIM_PWM_Start+0x2c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a14      	ldr	r2, [pc, #80]	; (8009884 <HAL_TIM_PWM_Start+0x78>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d101      	bne.n	800983c <HAL_TIM_PWM_Start+0x30>
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <HAL_TIM_PWM_Start+0x32>
 800983c:	2300      	movs	r3, #0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d007      	beq.n	8009852 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009850:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b06      	cmp	r3, #6
 8009862:	d007      	beq.n	8009874 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	40010000 	.word	0x40010000
 8009884:	40010400 	.word	0x40010400

08009888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	2b02      	cmp	r3, #2
 800989c:	d122      	bne.n	80098e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d11b      	bne.n	80098e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f06f 0202 	mvn.w	r2, #2
 80098b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 fa75 	bl	8009dba <HAL_TIM_IC_CaptureCallback>
 80098d0:	e005      	b.n	80098de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa67 	bl	8009da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fa78 	bl	8009dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d122      	bne.n	8009938 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d11b      	bne.n	8009938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f06f 0204 	mvn.w	r2, #4
 8009908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2202      	movs	r2, #2
 800990e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fa4b 	bl	8009dba <HAL_TIM_IC_CaptureCallback>
 8009924:	e005      	b.n	8009932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa3d 	bl	8009da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fa4e 	bl	8009dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	f003 0308 	and.w	r3, r3, #8
 8009942:	2b08      	cmp	r3, #8
 8009944:	d122      	bne.n	800998c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b08      	cmp	r3, #8
 8009952:	d11b      	bne.n	800998c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f06f 0208 	mvn.w	r2, #8
 800995c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2204      	movs	r2, #4
 8009962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	69db      	ldr	r3, [r3, #28]
 800996a:	f003 0303 	and.w	r3, r3, #3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d003      	beq.n	800997a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fa21 	bl	8009dba <HAL_TIM_IC_CaptureCallback>
 8009978:	e005      	b.n	8009986 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fa13 	bl	8009da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fa24 	bl	8009dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0310 	and.w	r3, r3, #16
 8009996:	2b10      	cmp	r3, #16
 8009998:	d122      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0310 	and.w	r3, r3, #16
 80099a4:	2b10      	cmp	r3, #16
 80099a6:	d11b      	bne.n	80099e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0210 	mvn.w	r2, #16
 80099b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2208      	movs	r2, #8
 80099b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d003      	beq.n	80099ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f9f7 	bl	8009dba <HAL_TIM_IC_CaptureCallback>
 80099cc:	e005      	b.n	80099da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9e9 	bl	8009da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f9fa 	bl	8009dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d10e      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d107      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f06f 0201 	mvn.w	r2, #1
 8009a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9c3 	bl	8009d92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a16:	2b80      	cmp	r3, #128	; 0x80
 8009a18:	d10e      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a24:	2b80      	cmp	r3, #128	; 0x80
 8009a26:	d107      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fdc8 	bl	800a5c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a42:	2b40      	cmp	r3, #64	; 0x40
 8009a44:	d10e      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a50:	2b40      	cmp	r3, #64	; 0x40
 8009a52:	d107      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f9bf 	bl	8009de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b20      	cmp	r3, #32
 8009a70:	d10e      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b20      	cmp	r3, #32
 8009a7e:	d107      	bne.n	8009a90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f06f 0220 	mvn.w	r2, #32
 8009a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fd92 	bl	800a5b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e0b4      	b.n	8009c1c <HAL_TIM_PWM_ConfigChannel+0x184>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2202      	movs	r2, #2
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b0c      	cmp	r3, #12
 8009ac6:	f200 809f 	bhi.w	8009c08 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009b05 	.word	0x08009b05
 8009ad4:	08009c09 	.word	0x08009c09
 8009ad8:	08009c09 	.word	0x08009c09
 8009adc:	08009c09 	.word	0x08009c09
 8009ae0:	08009b45 	.word	0x08009b45
 8009ae4:	08009c09 	.word	0x08009c09
 8009ae8:	08009c09 	.word	0x08009c09
 8009aec:	08009c09 	.word	0x08009c09
 8009af0:	08009b87 	.word	0x08009b87
 8009af4:	08009c09 	.word	0x08009c09
 8009af8:	08009c09 	.word	0x08009c09
 8009afc:	08009c09 	.word	0x08009c09
 8009b00:	08009bc7 	.word	0x08009bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68b9      	ldr	r1, [r7, #8]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fa14 	bl	8009f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	699a      	ldr	r2, [r3, #24]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f042 0208 	orr.w	r2, r2, #8
 8009b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	699a      	ldr	r2, [r3, #24]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 0204 	bic.w	r2, r2, #4
 8009b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6999      	ldr	r1, [r3, #24]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	691a      	ldr	r2, [r3, #16]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	619a      	str	r2, [r3, #24]
      break;
 8009b42:	e062      	b.n	8009c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68b9      	ldr	r1, [r7, #8]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fa64 	bl	800a018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	699a      	ldr	r2, [r3, #24]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6999      	ldr	r1, [r3, #24]
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	021a      	lsls	r2, r3, #8
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	430a      	orrs	r2, r1
 8009b82:	619a      	str	r2, [r3, #24]
      break;
 8009b84:	e041      	b.n	8009c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68b9      	ldr	r1, [r7, #8]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 fab9 	bl	800a104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69da      	ldr	r2, [r3, #28]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0208 	orr.w	r2, r2, #8
 8009ba0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	69da      	ldr	r2, [r3, #28]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0204 	bic.w	r2, r2, #4
 8009bb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	69d9      	ldr	r1, [r3, #28]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	61da      	str	r2, [r3, #28]
      break;
 8009bc4:	e021      	b.n	8009c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 fb0d 	bl	800a1ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	69da      	ldr	r2, [r3, #28]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69da      	ldr	r2, [r3, #28]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69d9      	ldr	r1, [r3, #28]
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	021a      	lsls	r2, r3, #8
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	430a      	orrs	r2, r1
 8009c04:	61da      	str	r2, [r3, #28]
      break;
 8009c06:	e000      	b.n	8009c0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009c08:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_TIM_ConfigClockSource+0x18>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e0a6      	b.n	8009d8a <HAL_TIM_ConfigClockSource+0x166>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009c5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d067      	beq.n	8009d44 <HAL_TIM_ConfigClockSource+0x120>
 8009c74:	2b40      	cmp	r3, #64	; 0x40
 8009c76:	d80b      	bhi.n	8009c90 <HAL_TIM_ConfigClockSource+0x6c>
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d073      	beq.n	8009d64 <HAL_TIM_ConfigClockSource+0x140>
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d802      	bhi.n	8009c86 <HAL_TIM_ConfigClockSource+0x62>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d06f      	beq.n	8009d64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c84:	e078      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c86:	2b20      	cmp	r3, #32
 8009c88:	d06c      	beq.n	8009d64 <HAL_TIM_ConfigClockSource+0x140>
 8009c8a:	2b30      	cmp	r3, #48	; 0x30
 8009c8c:	d06a      	beq.n	8009d64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009c8e:	e073      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c90:	2b70      	cmp	r3, #112	; 0x70
 8009c92:	d00d      	beq.n	8009cb0 <HAL_TIM_ConfigClockSource+0x8c>
 8009c94:	2b70      	cmp	r3, #112	; 0x70
 8009c96:	d804      	bhi.n	8009ca2 <HAL_TIM_ConfigClockSource+0x7e>
 8009c98:	2b50      	cmp	r3, #80	; 0x50
 8009c9a:	d033      	beq.n	8009d04 <HAL_TIM_ConfigClockSource+0xe0>
 8009c9c:	2b60      	cmp	r3, #96	; 0x60
 8009c9e:	d041      	beq.n	8009d24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009ca0:	e06a      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca6:	d066      	beq.n	8009d76 <HAL_TIM_ConfigClockSource+0x152>
 8009ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cac:	d017      	beq.n	8009cde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009cae:	e063      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6818      	ldr	r0, [r3, #0]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	6899      	ldr	r1, [r3, #8]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	f000 fb64 	bl	800a38c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	609a      	str	r2, [r3, #8]
      break;
 8009cdc:	e04c      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6899      	ldr	r1, [r3, #8]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f000 fb4d 	bl	800a38c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689a      	ldr	r2, [r3, #8]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d00:	609a      	str	r2, [r3, #8]
      break;
 8009d02:	e039      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	6859      	ldr	r1, [r3, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	461a      	mov	r2, r3
 8009d12:	f000 fac1 	bl	800a298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2150      	movs	r1, #80	; 0x50
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 fb1a 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 8009d22:	e029      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	6859      	ldr	r1, [r3, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	461a      	mov	r2, r3
 8009d32:	f000 fae0 	bl	800a2f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2160      	movs	r1, #96	; 0x60
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 fb0a 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 8009d42:	e019      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6818      	ldr	r0, [r3, #0]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	6859      	ldr	r1, [r3, #4]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	461a      	mov	r2, r3
 8009d52:	f000 faa1 	bl	800a298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2140      	movs	r1, #64	; 0x40
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fafa 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 8009d62:	e009      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	f000 faf1 	bl	800a356 <TIM_ITRx_SetConfig>
      break;
 8009d74:	e000      	b.n	8009d78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009da6:	b480      	push	{r7}
 8009da8:	b083      	sub	sp, #12
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dc2:	bf00      	nop
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009dd6:	bf00      	nop
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr

08009de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009de2:	b480      	push	{r7}
 8009de4:	b083      	sub	sp, #12
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
	...

08009df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a40      	ldr	r2, [pc, #256]	; (8009f0c <TIM_Base_SetConfig+0x114>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d013      	beq.n	8009e38 <TIM_Base_SetConfig+0x40>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e16:	d00f      	beq.n	8009e38 <TIM_Base_SetConfig+0x40>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a3d      	ldr	r2, [pc, #244]	; (8009f10 <TIM_Base_SetConfig+0x118>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00b      	beq.n	8009e38 <TIM_Base_SetConfig+0x40>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a3c      	ldr	r2, [pc, #240]	; (8009f14 <TIM_Base_SetConfig+0x11c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d007      	beq.n	8009e38 <TIM_Base_SetConfig+0x40>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a3b      	ldr	r2, [pc, #236]	; (8009f18 <TIM_Base_SetConfig+0x120>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d003      	beq.n	8009e38 <TIM_Base_SetConfig+0x40>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a3a      	ldr	r2, [pc, #232]	; (8009f1c <TIM_Base_SetConfig+0x124>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d108      	bne.n	8009e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a2f      	ldr	r2, [pc, #188]	; (8009f0c <TIM_Base_SetConfig+0x114>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d02b      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e58:	d027      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a2c      	ldr	r2, [pc, #176]	; (8009f10 <TIM_Base_SetConfig+0x118>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d023      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a2b      	ldr	r2, [pc, #172]	; (8009f14 <TIM_Base_SetConfig+0x11c>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d01f      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a2a      	ldr	r2, [pc, #168]	; (8009f18 <TIM_Base_SetConfig+0x120>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d01b      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a29      	ldr	r2, [pc, #164]	; (8009f1c <TIM_Base_SetConfig+0x124>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d017      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a28      	ldr	r2, [pc, #160]	; (8009f20 <TIM_Base_SetConfig+0x128>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d013      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a27      	ldr	r2, [pc, #156]	; (8009f24 <TIM_Base_SetConfig+0x12c>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d00f      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a26      	ldr	r2, [pc, #152]	; (8009f28 <TIM_Base_SetConfig+0x130>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00b      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a25      	ldr	r2, [pc, #148]	; (8009f2c <TIM_Base_SetConfig+0x134>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d007      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a24      	ldr	r2, [pc, #144]	; (8009f30 <TIM_Base_SetConfig+0x138>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d003      	beq.n	8009eaa <TIM_Base_SetConfig+0xb2>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a23      	ldr	r2, [pc, #140]	; (8009f34 <TIM_Base_SetConfig+0x13c>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d108      	bne.n	8009ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a0a      	ldr	r2, [pc, #40]	; (8009f0c <TIM_Base_SetConfig+0x114>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_Base_SetConfig+0xf8>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a0c      	ldr	r2, [pc, #48]	; (8009f1c <TIM_Base_SetConfig+0x124>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d103      	bne.n	8009ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	691a      	ldr	r2, [r3, #16]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	615a      	str	r2, [r3, #20]
}
 8009efe:	bf00      	nop
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	40010000 	.word	0x40010000
 8009f10:	40000400 	.word	0x40000400
 8009f14:	40000800 	.word	0x40000800
 8009f18:	40000c00 	.word	0x40000c00
 8009f1c:	40010400 	.word	0x40010400
 8009f20:	40014000 	.word	0x40014000
 8009f24:	40014400 	.word	0x40014400
 8009f28:	40014800 	.word	0x40014800
 8009f2c:	40001800 	.word	0x40001800
 8009f30:	40001c00 	.word	0x40001c00
 8009f34:	40002000 	.word	0x40002000

08009f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	f023 0201 	bic.w	r2, r3, #1
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0303 	bic.w	r3, r3, #3
 8009f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	f023 0302 	bic.w	r3, r3, #2
 8009f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a20      	ldr	r2, [pc, #128]	; (800a010 <TIM_OC1_SetConfig+0xd8>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <TIM_OC1_SetConfig+0x64>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a1f      	ldr	r2, [pc, #124]	; (800a014 <TIM_OC1_SetConfig+0xdc>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d10c      	bne.n	8009fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f023 0308 	bic.w	r3, r3, #8
 8009fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f023 0304 	bic.w	r3, r3, #4
 8009fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	4a15      	ldr	r2, [pc, #84]	; (800a010 <TIM_OC1_SetConfig+0xd8>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d003      	beq.n	8009fc6 <TIM_OC1_SetConfig+0x8e>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a14      	ldr	r2, [pc, #80]	; (800a014 <TIM_OC1_SetConfig+0xdc>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d111      	bne.n	8009fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	695b      	ldr	r3, [r3, #20]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	621a      	str	r2, [r3, #32]
}
 800a004:	bf00      	nop
 800a006:	371c      	adds	r7, #28
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	40010000 	.word	0x40010000
 800a014:	40010400 	.word	0x40010400

0800a018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a018:	b480      	push	{r7}
 800a01a:	b087      	sub	sp, #28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	f023 0210 	bic.w	r2, r3, #16
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a04e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	021b      	lsls	r3, r3, #8
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	4313      	orrs	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f023 0320 	bic.w	r3, r3, #32
 800a062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	4a22      	ldr	r2, [pc, #136]	; (800a0fc <TIM_OC2_SetConfig+0xe4>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d003      	beq.n	800a080 <TIM_OC2_SetConfig+0x68>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a21      	ldr	r2, [pc, #132]	; (800a100 <TIM_OC2_SetConfig+0xe8>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d10d      	bne.n	800a09c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	011b      	lsls	r3, r3, #4
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	4313      	orrs	r3, r2
 800a092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a09a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a17      	ldr	r2, [pc, #92]	; (800a0fc <TIM_OC2_SetConfig+0xe4>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d003      	beq.n	800a0ac <TIM_OC2_SetConfig+0x94>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a16      	ldr	r2, [pc, #88]	; (800a100 <TIM_OC2_SetConfig+0xe8>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d113      	bne.n	800a0d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	699b      	ldr	r3, [r3, #24]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	621a      	str	r2, [r3, #32]
}
 800a0ee:	bf00      	nop
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40010400 	.word	0x40010400

0800a104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f023 0303 	bic.w	r3, r3, #3
 800a13a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a14c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	4313      	orrs	r3, r2
 800a158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a21      	ldr	r2, [pc, #132]	; (800a1e4 <TIM_OC3_SetConfig+0xe0>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d003      	beq.n	800a16a <TIM_OC3_SetConfig+0x66>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a20      	ldr	r2, [pc, #128]	; (800a1e8 <TIM_OC3_SetConfig+0xe4>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d10d      	bne.n	800a186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	4a16      	ldr	r2, [pc, #88]	; (800a1e4 <TIM_OC3_SetConfig+0xe0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d003      	beq.n	800a196 <TIM_OC3_SetConfig+0x92>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <TIM_OC3_SetConfig+0xe4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d113      	bne.n	800a1be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a19c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	011b      	lsls	r3, r3, #4
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	697a      	ldr	r2, [r7, #20]
 800a1d6:	621a      	str	r2, [r3, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	371c      	adds	r7, #28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	40010000 	.word	0x40010000
 800a1e8:	40010400 	.word	0x40010400

0800a1ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	69db      	ldr	r3, [r3, #28]
 800a212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	021b      	lsls	r3, r3, #8
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	031b      	lsls	r3, r3, #12
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a12      	ldr	r2, [pc, #72]	; (800a290 <TIM_OC4_SetConfig+0xa4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d003      	beq.n	800a254 <TIM_OC4_SetConfig+0x68>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a11      	ldr	r2, [pc, #68]	; (800a294 <TIM_OC4_SetConfig+0xa8>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d109      	bne.n	800a268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a25a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	019b      	lsls	r3, r3, #6
 800a262:	697a      	ldr	r2, [r7, #20]
 800a264:	4313      	orrs	r3, r2
 800a266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685a      	ldr	r2, [r3, #4]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	621a      	str	r2, [r3, #32]
}
 800a282:	bf00      	nop
 800a284:	371c      	adds	r7, #28
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	40010000 	.word	0x40010000
 800a294:	40010400 	.word	0x40010400

0800a298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a1b      	ldr	r3, [r3, #32]
 800a2a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	f023 0201 	bic.w	r2, r3, #1
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f023 030a 	bic.w	r3, r3, #10
 800a2d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	621a      	str	r2, [r3, #32]
}
 800a2ea:	bf00      	nop
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b087      	sub	sp, #28
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	60b9      	str	r1, [r7, #8]
 800a300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	f023 0210 	bic.w	r2, r3, #16
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	031b      	lsls	r3, r3, #12
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	4313      	orrs	r3, r2
 800a32a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	011b      	lsls	r3, r3, #4
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	621a      	str	r2, [r3, #32]
}
 800a34a:	bf00      	nop
 800a34c:	371c      	adds	r7, #28
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a36c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4313      	orrs	r3, r2
 800a374:	f043 0307 	orr.w	r3, r3, #7
 800a378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	609a      	str	r2, [r3, #8]
}
 800a380:	bf00      	nop
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	021a      	lsls	r2, r3, #8
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	697a      	ldr	r2, [r7, #20]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	609a      	str	r2, [r3, #8]
}
 800a3c0:	bf00      	nop
 800a3c2:	371c      	adds	r7, #28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b087      	sub	sp, #28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f003 031f 	and.w	r3, r3, #31
 800a3de:	2201      	movs	r2, #1
 800a3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6a1a      	ldr	r2, [r3, #32]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	43db      	mvns	r3, r3
 800a3ee:	401a      	ands	r2, r3
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f003 031f 	and.w	r3, r3, #31
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	fa01 f303 	lsl.w	r3, r1, r3
 800a404:	431a      	orrs	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	621a      	str	r2, [r3, #32]
}
 800a40a:	bf00      	nop
 800a40c:	371c      	adds	r7, #28
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
	...

0800a418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d101      	bne.n	800a430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a42c:	2302      	movs	r3, #2
 800a42e:	e05a      	b.n	800a4e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a21      	ldr	r2, [pc, #132]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d022      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a47c:	d01d      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1d      	ldr	r2, [pc, #116]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d018      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a1b      	ldr	r2, [pc, #108]	; (800a4fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d013      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a1a      	ldr	r2, [pc, #104]	; (800a500 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00e      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a18      	ldr	r2, [pc, #96]	; (800a504 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d009      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a17      	ldr	r2, [pc, #92]	; (800a508 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d004      	beq.n	800a4ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a15      	ldr	r2, [pc, #84]	; (800a50c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d10c      	bne.n	800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	40010000 	.word	0x40010000
 800a4f8:	40000400 	.word	0x40000400
 800a4fc:	40000800 	.word	0x40000800
 800a500:	40000c00 	.word	0x40000c00
 800a504:	40010400 	.word	0x40010400
 800a508:	40014000 	.word	0x40014000
 800a50c:	40001800 	.word	0x40001800

0800a510 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a51a:	2300      	movs	r3, #0
 800a51c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a528:	2302      	movs	r3, #2
 800a52a:	e03d      	b.n	800a5a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	4313      	orrs	r3, r2
 800a540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4313      	orrs	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	4313      	orrs	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e03f      	b.n	800a66e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d106      	bne.n	800a608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7fb fe32 	bl	800626c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2224      	movs	r2, #36	; 0x24
 800a60c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a61e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fdb5 	bl	800b190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	695a      	ldr	r2, [r3, #20]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2220      	movs	r2, #32
 800a668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b088      	sub	sp, #32
 800a67a:	af02      	add	r7, sp, #8
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	603b      	str	r3, [r7, #0]
 800a682:	4613      	mov	r3, r2
 800a684:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b20      	cmp	r3, #32
 800a694:	f040 8083 	bne.w	800a79e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <HAL_UART_Transmit+0x2e>
 800a69e:	88fb      	ldrh	r3, [r7, #6]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e07b      	b.n	800a7a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d101      	bne.n	800a6b6 <HAL_UART_Transmit+0x40>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	e074      	b.n	800a7a0 <HAL_UART_Transmit+0x12a>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2221      	movs	r2, #33	; 0x21
 800a6c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a6cc:	f7fc fa0e 	bl	8006aec <HAL_GetTick>
 800a6d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	88fa      	ldrh	r2, [r7, #6]
 800a6d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	88fa      	ldrh	r2, [r7, #6]
 800a6dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a6e6:	e042      	b.n	800a76e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6fe:	d122      	bne.n	800a746 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	2200      	movs	r2, #0
 800a708:	2180      	movs	r1, #128	; 0x80
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 fbbf 	bl	800ae8e <UART_WaitOnFlagUntilTimeout>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e042      	b.n	800a7a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a72c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d103      	bne.n	800a73e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	3302      	adds	r3, #2
 800a73a:	60bb      	str	r3, [r7, #8]
 800a73c:	e017      	b.n	800a76e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	3301      	adds	r3, #1
 800a742:	60bb      	str	r3, [r7, #8]
 800a744:	e013      	b.n	800a76e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2200      	movs	r2, #0
 800a74e:	2180      	movs	r1, #128	; 0x80
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 fb9c 	bl	800ae8e <UART_WaitOnFlagUntilTimeout>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e01f      	b.n	800a7a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	60ba      	str	r2, [r7, #8]
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a772:	b29b      	uxth	r3, r3
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1b7      	bne.n	800a6e8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2200      	movs	r2, #0
 800a780:	2140      	movs	r1, #64	; 0x40
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f000 fb83 	bl	800ae8e <UART_WaitOnFlagUntilTimeout>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e006      	b.n	800a7a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2220      	movs	r2, #32
 800a796:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	e000      	b.n	800a7a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a79e:	2302      	movs	r3, #2
  }
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	f040 8090 	bne.w	800a8ea <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <HAL_UART_Receive+0x2e>
 800a7d0:	88fb      	ldrh	r3, [r7, #6]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d101      	bne.n	800a7da <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e088      	b.n	800a8ec <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d101      	bne.n	800a7e8 <HAL_UART_Receive+0x40>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e081      	b.n	800a8ec <HAL_UART_Receive+0x144>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2222      	movs	r2, #34	; 0x22
 800a7fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a7fe:	f7fc f975 	bl	8006aec <HAL_GetTick>
 800a802:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	88fa      	ldrh	r2, [r7, #6]
 800a808:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	88fa      	ldrh	r2, [r7, #6]
 800a80e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a818:	e05c      	b.n	800a8d4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a81e:	b29b      	uxth	r3, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a830:	d12b      	bne.n	800a88a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2200      	movs	r2, #0
 800a83a:	2120      	movs	r1, #32
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 fb26 	bl	800ae8e <UART_WaitOnFlagUntilTimeout>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e04f      	b.n	800a8ec <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10c      	bne.n	800a872 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a864:	b29a      	uxth	r2, r3
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	3302      	adds	r3, #2
 800a86e:	60bb      	str	r3, [r7, #8]
 800a870:	e030      	b.n	800a8d4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	3301      	adds	r3, #1
 800a886:	60bb      	str	r3, [r7, #8]
 800a888:	e024      	b.n	800a8d4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	2200      	movs	r2, #0
 800a892:	2120      	movs	r1, #32
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 fafa 	bl	800ae8e <UART_WaitOnFlagUntilTimeout>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e023      	b.n	800a8ec <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d108      	bne.n	800a8be <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6859      	ldr	r1, [r3, #4]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	60ba      	str	r2, [r7, #8]
 800a8b8:	b2ca      	uxtb	r2, r1
 800a8ba:	701a      	strb	r2, [r3, #0]
 800a8bc:	e00a      	b.n	800a8d4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	b2da      	uxtb	r2, r3
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	1c59      	adds	r1, r3, #1
 800a8ca:	60b9      	str	r1, [r7, #8]
 800a8cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a8d0:	b2d2      	uxtb	r2, r2
 800a8d2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d19d      	bne.n	800a81a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e000      	b.n	800a8ec <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a8ea:	2302      	movs	r3, #2
  }
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	4613      	mov	r3, r2
 800a900:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	d153      	bne.n	800a9b6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <HAL_UART_Transmit_DMA+0x26>
 800a914:	88fb      	ldrh	r3, [r7, #6]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e04c      	b.n	800a9b8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a924:	2b01      	cmp	r3, #1
 800a926:	d101      	bne.n	800a92c <HAL_UART_Transmit_DMA+0x38>
 800a928:	2302      	movs	r3, #2
 800a92a:	e045      	b.n	800a9b8 <HAL_UART_Transmit_DMA+0xc4>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	88fa      	ldrh	r2, [r7, #6]
 800a93e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	88fa      	ldrh	r2, [r7, #6]
 800a944:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2221      	movs	r2, #33	; 0x21
 800a950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a958:	4a19      	ldr	r2, [pc, #100]	; (800a9c0 <HAL_UART_Transmit_DMA+0xcc>)
 800a95a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a960:	4a18      	ldr	r2, [pc, #96]	; (800a9c4 <HAL_UART_Transmit_DMA+0xd0>)
 800a962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a968:	4a17      	ldr	r2, [pc, #92]	; (800a9c8 <HAL_UART_Transmit_DMA+0xd4>)
 800a96a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a970:	2200      	movs	r2, #0
 800a972:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a974:	f107 0308 	add.w	r3, r7, #8
 800a978:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	6819      	ldr	r1, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3304      	adds	r3, #4
 800a988:	461a      	mov	r2, r3
 800a98a:	88fb      	ldrh	r3, [r7, #6]
 800a98c:	f7fc fe90 	bl	80076b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a998:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	695a      	ldr	r2, [r3, #20]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a9b0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e000      	b.n	800a9b8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a9b6:	2302      	movs	r3, #2
  }
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3718      	adds	r7, #24
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	0800ad09 	.word	0x0800ad09
 800a9c4:	0800ad5b 	.word	0x0800ad5b
 800a9c8:	0800adfb 	.word	0x0800adfb

0800a9cc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	d166      	bne.n	800aab4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d002      	beq.n	800a9f2 <HAL_UART_Receive_DMA+0x26>
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d101      	bne.n	800a9f6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e05f      	b.n	800aab6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d101      	bne.n	800aa04 <HAL_UART_Receive_DMA+0x38>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e058      	b.n	800aab6 <HAL_UART_Receive_DMA+0xea>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	88fa      	ldrh	r2, [r7, #6]
 800aa16:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2222      	movs	r2, #34	; 0x22
 800aa22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2a:	4a25      	ldr	r2, [pc, #148]	; (800aac0 <HAL_UART_Receive_DMA+0xf4>)
 800aa2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa32:	4a24      	ldr	r2, [pc, #144]	; (800aac4 <HAL_UART_Receive_DMA+0xf8>)
 800aa34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3a:	4a23      	ldr	r2, [pc, #140]	; (800aac8 <HAL_UART_Receive_DMA+0xfc>)
 800aa3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa42:	2200      	movs	r2, #0
 800aa44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800aa46:	f107 0308 	add.w	r3, r7, #8
 800aa4a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3304      	adds	r3, #4
 800aa56:	4619      	mov	r1, r3
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	88fb      	ldrh	r3, [r7, #6]
 800aa5e:	f7fc fe27 	bl	80076b0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800aa62:	2300      	movs	r3, #0
 800aa64:	613b      	str	r3, [r7, #16]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	613b      	str	r3, [r7, #16]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa8e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	695a      	ldr	r2, [r3, #20]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f042 0201 	orr.w	r2, r2, #1
 800aa9e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	695a      	ldr	r2, [r3, #20]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaae:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	e000      	b.n	800aab6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aab4:	2302      	movs	r3, #2
  }
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3718      	adds	r7, #24
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	0800ad77 	.word	0x0800ad77
 800aac4:	0800addf 	.word	0x0800addf
 800aac8:	0800adfb 	.word	0x0800adfb

0800aacc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b088      	sub	sp, #32
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800aaec:	2300      	movs	r3, #0
 800aaee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	f003 030f 	and.w	r3, r3, #15
 800aafa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d10d      	bne.n	800ab1e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	f003 0320 	and.w	r3, r3, #32
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d008      	beq.n	800ab1e <HAL_UART_IRQHandler+0x52>
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	f003 0320 	and.w	r3, r3, #32
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fab9 	bl	800b08e <UART_Receive_IT>
      return;
 800ab1c:	e0d1      	b.n	800acc2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 80b0 	beq.w	800ac86 <HAL_UART_IRQHandler+0x1ba>
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d105      	bne.n	800ab3c <HAL_UART_IRQHandler+0x70>
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 80a5 	beq.w	800ac86 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00a      	beq.n	800ab5c <HAL_UART_IRQHandler+0x90>
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d005      	beq.n	800ab5c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab54:	f043 0201 	orr.w	r2, r3, #1
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <HAL_UART_IRQHandler+0xb0>
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d005      	beq.n	800ab7c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab74:	f043 0202 	orr.w	r2, r3, #2
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00a      	beq.n	800ab9c <HAL_UART_IRQHandler+0xd0>
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab94:	f043 0204 	orr.w	r2, r3, #4
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f003 0308 	and.w	r3, r3, #8
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00f      	beq.n	800abc6 <HAL_UART_IRQHandler+0xfa>
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	f003 0320 	and.w	r3, r3, #32
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <HAL_UART_IRQHandler+0xee>
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d005      	beq.n	800abc6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbe:	f043 0208 	orr.w	r2, r3, #8
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d078      	beq.n	800acc0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	f003 0320 	and.w	r3, r3, #32
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <HAL_UART_IRQHandler+0x11c>
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	f003 0320 	and.w	r3, r3, #32
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d002      	beq.n	800abe8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fa53 	bl	800b08e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf2:	2b40      	cmp	r3, #64	; 0x40
 800abf4:	bf0c      	ite	eq
 800abf6:	2301      	moveq	r3, #1
 800abf8:	2300      	movne	r3, #0
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	f003 0308 	and.w	r3, r3, #8
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d102      	bne.n	800ac10 <HAL_UART_IRQHandler+0x144>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d031      	beq.n	800ac74 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f99c 	bl	800af4e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	d123      	bne.n	800ac6c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	695a      	ldr	r2, [r3, #20]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac32:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d013      	beq.n	800ac64 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac40:	4a21      	ldr	r2, [pc, #132]	; (800acc8 <HAL_UART_IRQHandler+0x1fc>)
 800ac42:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7fc fd89 	bl	8007760 <HAL_DMA_Abort_IT>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d016      	beq.n	800ac82 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac5a:	687a      	ldr	r2, [r7, #4]
 800ac5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac62:	e00e      	b.n	800ac82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f845 	bl	800acf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6a:	e00a      	b.n	800ac82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f841 	bl	800acf4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac72:	e006      	b.n	800ac82 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f83d 	bl	800acf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800ac80:	e01e      	b.n	800acc0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac82:	bf00      	nop
    return;
 800ac84:	e01c      	b.n	800acc0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d008      	beq.n	800aca2 <HAL_UART_IRQHandler+0x1d6>
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f989 	bl	800afb2 <UART_Transmit_IT>
    return;
 800aca0:	e00f      	b.n	800acc2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00a      	beq.n	800acc2 <HAL_UART_IRQHandler+0x1f6>
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d005      	beq.n	800acc2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f9d1 	bl	800b05e <UART_EndTransmit_IT>
    return;
 800acbc:	bf00      	nop
 800acbe:	e000      	b.n	800acc2 <HAL_UART_IRQHandler+0x1f6>
    return;
 800acc0:	bf00      	nop
  }
}
 800acc2:	3720      	adds	r7, #32
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	0800af8b 	.word	0x0800af8b

0800accc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b083      	sub	sp, #12
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ace8:	bf00      	nop
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad14:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d113      	bne.n	800ad4c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	695a      	ldr	r2, [r3, #20]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad38:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68da      	ldr	r2, [r3, #12]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad48:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad4a:	e002      	b.n	800ad52 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7ff ffbd 	bl	800accc <HAL_UART_TxCpltCallback>
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7ff ffb9 	bl	800ace0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad82:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d11e      	bne.n	800add0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68da      	ldr	r2, [r3, #12]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ada6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	695a      	ldr	r2, [r3, #20]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f022 0201 	bic.w	r2, r2, #1
 800adb6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	695a      	ldr	r2, [r3, #20]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2220      	movs	r2, #32
 800adcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f7fa ffe3 	bl	8005d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f7fa ffe0 	bl	8005db2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adf2:	bf00      	nop
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	695b      	ldr	r3, [r3, #20]
 800ae12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae16:	2b80      	cmp	r3, #128	; 0x80
 800ae18:	bf0c      	ite	eq
 800ae1a:	2301      	moveq	r3, #1
 800ae1c:	2300      	movne	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b21      	cmp	r3, #33	; 0x21
 800ae2c:	d108      	bne.n	800ae40 <UART_DMAError+0x46>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	2200      	movs	r2, #0
 800ae38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f000 f871 	bl	800af22 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4a:	2b40      	cmp	r3, #64	; 0x40
 800ae4c:	bf0c      	ite	eq
 800ae4e:	2301      	moveq	r3, #1
 800ae50:	2300      	movne	r3, #0
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	2b22      	cmp	r3, #34	; 0x22
 800ae60:	d108      	bne.n	800ae74 <UART_DMAError+0x7a>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ae6e:	68b8      	ldr	r0, [r7, #8]
 800ae70:	f000 f86d 	bl	800af4e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae78:	f043 0210 	orr.w	r2, r3, #16
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae80:	68b8      	ldr	r0, [r7, #8]
 800ae82:	f7ff ff37 	bl	800acf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae86:	bf00      	nop
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	60f8      	str	r0, [r7, #12]
 800ae96:	60b9      	str	r1, [r7, #8]
 800ae98:	603b      	str	r3, [r7, #0]
 800ae9a:	4613      	mov	r3, r2
 800ae9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae9e:	e02c      	b.n	800aefa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aea6:	d028      	beq.n	800aefa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <UART_WaitOnFlagUntilTimeout+0x30>
 800aeae:	f7fb fe1d 	bl	8006aec <HAL_GetTick>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d21d      	bcs.n	800aefa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aecc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	695a      	ldr	r2, [r3, #20]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0201 	bic.w	r2, r2, #1
 800aedc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e00f      	b.n	800af1a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	4013      	ands	r3, r2
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	429a      	cmp	r2, r3
 800af08:	bf0c      	ite	eq
 800af0a:	2301      	moveq	r3, #1
 800af0c:	2300      	movne	r3, #0
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	461a      	mov	r2, r3
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	429a      	cmp	r2, r3
 800af16:	d0c3      	beq.n	800aea0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800af38:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2220      	movs	r2, #32
 800af3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800af64:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	695a      	ldr	r2, [r3, #20]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f022 0201 	bic.w	r2, r2, #1
 800af74:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2220      	movs	r2, #32
 800af7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2200      	movs	r2, #0
 800afa2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f7ff fea5 	bl	800acf4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b085      	sub	sp, #20
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b21      	cmp	r3, #33	; 0x21
 800afc4:	d144      	bne.n	800b050 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afce:	d11a      	bne.n	800b006 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afe4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	691b      	ldr	r3, [r3, #16]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d105      	bne.n	800affa <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	1c9a      	adds	r2, r3, #2
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	621a      	str	r2, [r3, #32]
 800aff8:	e00e      	b.n	800b018 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	621a      	str	r2, [r3, #32]
 800b004:	e008      	b.n	800b018 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	1c59      	adds	r1, r3, #1
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	6211      	str	r1, [r2, #32]
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	3b01      	subs	r3, #1
 800b020:	b29b      	uxth	r3, r3
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	4619      	mov	r1, r3
 800b026:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10f      	bne.n	800b04c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68da      	ldr	r2, [r3, #12]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b03a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b04a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	e000      	b.n	800b052 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b050:	2302      	movs	r3, #2
  }
}
 800b052:	4618      	mov	r0, r3
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68da      	ldr	r2, [r3, #12]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b074:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2220      	movs	r2, #32
 800b07a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7ff fe24 	bl	800accc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b22      	cmp	r3, #34	; 0x22
 800b0a0:	d171      	bne.n	800b186 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0aa:	d123      	bne.n	800b0f4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10e      	bne.n	800b0d8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	1c9a      	adds	r2, r3, #2
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	629a      	str	r2, [r3, #40]	; 0x28
 800b0d6:	e029      	b.n	800b12c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ec:	1c5a      	adds	r2, r3, #1
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	629a      	str	r2, [r3, #40]	; 0x28
 800b0f2:	e01b      	b.n	800b12c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10a      	bne.n	800b112 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6858      	ldr	r0, [r3, #4]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	1c59      	adds	r1, r3, #1
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6291      	str	r1, [r2, #40]	; 0x28
 800b10c:	b2c2      	uxtb	r2, r0
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	e00c      	b.n	800b12c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11e:	1c58      	adds	r0, r3, #1
 800b120:	6879      	ldr	r1, [r7, #4]
 800b122:	6288      	str	r0, [r1, #40]	; 0x28
 800b124:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b128:	b2d2      	uxtb	r2, r2
 800b12a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b130:	b29b      	uxth	r3, r3
 800b132:	3b01      	subs	r3, #1
 800b134:	b29b      	uxth	r3, r3
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	4619      	mov	r1, r3
 800b13a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d120      	bne.n	800b182 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68da      	ldr	r2, [r3, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0220 	bic.w	r2, r2, #32
 800b14e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b15e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	695a      	ldr	r2, [r3, #20]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f022 0201 	bic.w	r2, r2, #1
 800b16e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2220      	movs	r2, #32
 800b174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7fa fe0f 	bl	8005d9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b17e:	2300      	movs	r3, #0
 800b180:	e002      	b.n	800b188 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	e000      	b.n	800b188 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b186:	2302      	movs	r3, #2
  }
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68da      	ldr	r2, [r3, #12]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b1d2:	f023 030c 	bic.w	r3, r3, #12
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	6812      	ldr	r2, [r2, #0]
 800b1da:	68f9      	ldr	r1, [r7, #12]
 800b1dc:	430b      	orrs	r3, r1
 800b1de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	695b      	ldr	r3, [r3, #20]
 800b1e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	699a      	ldr	r2, [r3, #24]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1fe:	f040 818b 	bne.w	800b518 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4ac1      	ldr	r2, [pc, #772]	; (800b50c <UART_SetConfig+0x37c>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d005      	beq.n	800b218 <UART_SetConfig+0x88>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4abf      	ldr	r2, [pc, #764]	; (800b510 <UART_SetConfig+0x380>)
 800b212:	4293      	cmp	r3, r2
 800b214:	f040 80bd 	bne.w	800b392 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b218:	f7fd fc40 	bl	8008a9c <HAL_RCC_GetPCLK2Freq>
 800b21c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	461d      	mov	r5, r3
 800b222:	f04f 0600 	mov.w	r6, #0
 800b226:	46a8      	mov	r8, r5
 800b228:	46b1      	mov	r9, r6
 800b22a:	eb18 0308 	adds.w	r3, r8, r8
 800b22e:	eb49 0409 	adc.w	r4, r9, r9
 800b232:	4698      	mov	r8, r3
 800b234:	46a1      	mov	r9, r4
 800b236:	eb18 0805 	adds.w	r8, r8, r5
 800b23a:	eb49 0906 	adc.w	r9, r9, r6
 800b23e:	f04f 0100 	mov.w	r1, #0
 800b242:	f04f 0200 	mov.w	r2, #0
 800b246:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b24a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b24e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b252:	4688      	mov	r8, r1
 800b254:	4691      	mov	r9, r2
 800b256:	eb18 0005 	adds.w	r0, r8, r5
 800b25a:	eb49 0106 	adc.w	r1, r9, r6
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	461d      	mov	r5, r3
 800b264:	f04f 0600 	mov.w	r6, #0
 800b268:	196b      	adds	r3, r5, r5
 800b26a:	eb46 0406 	adc.w	r4, r6, r6
 800b26e:	461a      	mov	r2, r3
 800b270:	4623      	mov	r3, r4
 800b272:	f7f5 fce9 	bl	8000c48 <__aeabi_uldivmod>
 800b276:	4603      	mov	r3, r0
 800b278:	460c      	mov	r4, r1
 800b27a:	461a      	mov	r2, r3
 800b27c:	4ba5      	ldr	r3, [pc, #660]	; (800b514 <UART_SetConfig+0x384>)
 800b27e:	fba3 2302 	umull	r2, r3, r3, r2
 800b282:	095b      	lsrs	r3, r3, #5
 800b284:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	461d      	mov	r5, r3
 800b28c:	f04f 0600 	mov.w	r6, #0
 800b290:	46a9      	mov	r9, r5
 800b292:	46b2      	mov	sl, r6
 800b294:	eb19 0309 	adds.w	r3, r9, r9
 800b298:	eb4a 040a 	adc.w	r4, sl, sl
 800b29c:	4699      	mov	r9, r3
 800b29e:	46a2      	mov	sl, r4
 800b2a0:	eb19 0905 	adds.w	r9, r9, r5
 800b2a4:	eb4a 0a06 	adc.w	sl, sl, r6
 800b2a8:	f04f 0100 	mov.w	r1, #0
 800b2ac:	f04f 0200 	mov.w	r2, #0
 800b2b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b2b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b2b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b2bc:	4689      	mov	r9, r1
 800b2be:	4692      	mov	sl, r2
 800b2c0:	eb19 0005 	adds.w	r0, r9, r5
 800b2c4:	eb4a 0106 	adc.w	r1, sl, r6
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	461d      	mov	r5, r3
 800b2ce:	f04f 0600 	mov.w	r6, #0
 800b2d2:	196b      	adds	r3, r5, r5
 800b2d4:	eb46 0406 	adc.w	r4, r6, r6
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4623      	mov	r3, r4
 800b2dc:	f7f5 fcb4 	bl	8000c48 <__aeabi_uldivmod>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	4b8b      	ldr	r3, [pc, #556]	; (800b514 <UART_SetConfig+0x384>)
 800b2e8:	fba3 1302 	umull	r1, r3, r3, r2
 800b2ec:	095b      	lsrs	r3, r3, #5
 800b2ee:	2164      	movs	r1, #100	; 0x64
 800b2f0:	fb01 f303 	mul.w	r3, r1, r3
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	3332      	adds	r3, #50	; 0x32
 800b2fa:	4a86      	ldr	r2, [pc, #536]	; (800b514 <UART_SetConfig+0x384>)
 800b2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b300:	095b      	lsrs	r3, r3, #5
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b308:	4498      	add	r8, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	461d      	mov	r5, r3
 800b30e:	f04f 0600 	mov.w	r6, #0
 800b312:	46a9      	mov	r9, r5
 800b314:	46b2      	mov	sl, r6
 800b316:	eb19 0309 	adds.w	r3, r9, r9
 800b31a:	eb4a 040a 	adc.w	r4, sl, sl
 800b31e:	4699      	mov	r9, r3
 800b320:	46a2      	mov	sl, r4
 800b322:	eb19 0905 	adds.w	r9, r9, r5
 800b326:	eb4a 0a06 	adc.w	sl, sl, r6
 800b32a:	f04f 0100 	mov.w	r1, #0
 800b32e:	f04f 0200 	mov.w	r2, #0
 800b332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b33a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b33e:	4689      	mov	r9, r1
 800b340:	4692      	mov	sl, r2
 800b342:	eb19 0005 	adds.w	r0, r9, r5
 800b346:	eb4a 0106 	adc.w	r1, sl, r6
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	461d      	mov	r5, r3
 800b350:	f04f 0600 	mov.w	r6, #0
 800b354:	196b      	adds	r3, r5, r5
 800b356:	eb46 0406 	adc.w	r4, r6, r6
 800b35a:	461a      	mov	r2, r3
 800b35c:	4623      	mov	r3, r4
 800b35e:	f7f5 fc73 	bl	8000c48 <__aeabi_uldivmod>
 800b362:	4603      	mov	r3, r0
 800b364:	460c      	mov	r4, r1
 800b366:	461a      	mov	r2, r3
 800b368:	4b6a      	ldr	r3, [pc, #424]	; (800b514 <UART_SetConfig+0x384>)
 800b36a:	fba3 1302 	umull	r1, r3, r3, r2
 800b36e:	095b      	lsrs	r3, r3, #5
 800b370:	2164      	movs	r1, #100	; 0x64
 800b372:	fb01 f303 	mul.w	r3, r1, r3
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	3332      	adds	r3, #50	; 0x32
 800b37c:	4a65      	ldr	r2, [pc, #404]	; (800b514 <UART_SetConfig+0x384>)
 800b37e:	fba2 2303 	umull	r2, r3, r2, r3
 800b382:	095b      	lsrs	r3, r3, #5
 800b384:	f003 0207 	and.w	r2, r3, #7
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4442      	add	r2, r8
 800b38e:	609a      	str	r2, [r3, #8]
 800b390:	e26f      	b.n	800b872 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b392:	f7fd fb6f 	bl	8008a74 <HAL_RCC_GetPCLK1Freq>
 800b396:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	461d      	mov	r5, r3
 800b39c:	f04f 0600 	mov.w	r6, #0
 800b3a0:	46a8      	mov	r8, r5
 800b3a2:	46b1      	mov	r9, r6
 800b3a4:	eb18 0308 	adds.w	r3, r8, r8
 800b3a8:	eb49 0409 	adc.w	r4, r9, r9
 800b3ac:	4698      	mov	r8, r3
 800b3ae:	46a1      	mov	r9, r4
 800b3b0:	eb18 0805 	adds.w	r8, r8, r5
 800b3b4:	eb49 0906 	adc.w	r9, r9, r6
 800b3b8:	f04f 0100 	mov.w	r1, #0
 800b3bc:	f04f 0200 	mov.w	r2, #0
 800b3c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b3c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b3c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b3cc:	4688      	mov	r8, r1
 800b3ce:	4691      	mov	r9, r2
 800b3d0:	eb18 0005 	adds.w	r0, r8, r5
 800b3d4:	eb49 0106 	adc.w	r1, r9, r6
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	461d      	mov	r5, r3
 800b3de:	f04f 0600 	mov.w	r6, #0
 800b3e2:	196b      	adds	r3, r5, r5
 800b3e4:	eb46 0406 	adc.w	r4, r6, r6
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	4623      	mov	r3, r4
 800b3ec:	f7f5 fc2c 	bl	8000c48 <__aeabi_uldivmod>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	4b47      	ldr	r3, [pc, #284]	; (800b514 <UART_SetConfig+0x384>)
 800b3f8:	fba3 2302 	umull	r2, r3, r3, r2
 800b3fc:	095b      	lsrs	r3, r3, #5
 800b3fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	461d      	mov	r5, r3
 800b406:	f04f 0600 	mov.w	r6, #0
 800b40a:	46a9      	mov	r9, r5
 800b40c:	46b2      	mov	sl, r6
 800b40e:	eb19 0309 	adds.w	r3, r9, r9
 800b412:	eb4a 040a 	adc.w	r4, sl, sl
 800b416:	4699      	mov	r9, r3
 800b418:	46a2      	mov	sl, r4
 800b41a:	eb19 0905 	adds.w	r9, r9, r5
 800b41e:	eb4a 0a06 	adc.w	sl, sl, r6
 800b422:	f04f 0100 	mov.w	r1, #0
 800b426:	f04f 0200 	mov.w	r2, #0
 800b42a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b42e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b432:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b436:	4689      	mov	r9, r1
 800b438:	4692      	mov	sl, r2
 800b43a:	eb19 0005 	adds.w	r0, r9, r5
 800b43e:	eb4a 0106 	adc.w	r1, sl, r6
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	461d      	mov	r5, r3
 800b448:	f04f 0600 	mov.w	r6, #0
 800b44c:	196b      	adds	r3, r5, r5
 800b44e:	eb46 0406 	adc.w	r4, r6, r6
 800b452:	461a      	mov	r2, r3
 800b454:	4623      	mov	r3, r4
 800b456:	f7f5 fbf7 	bl	8000c48 <__aeabi_uldivmod>
 800b45a:	4603      	mov	r3, r0
 800b45c:	460c      	mov	r4, r1
 800b45e:	461a      	mov	r2, r3
 800b460:	4b2c      	ldr	r3, [pc, #176]	; (800b514 <UART_SetConfig+0x384>)
 800b462:	fba3 1302 	umull	r1, r3, r3, r2
 800b466:	095b      	lsrs	r3, r3, #5
 800b468:	2164      	movs	r1, #100	; 0x64
 800b46a:	fb01 f303 	mul.w	r3, r1, r3
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	3332      	adds	r3, #50	; 0x32
 800b474:	4a27      	ldr	r2, [pc, #156]	; (800b514 <UART_SetConfig+0x384>)
 800b476:	fba2 2303 	umull	r2, r3, r2, r3
 800b47a:	095b      	lsrs	r3, r3, #5
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b482:	4498      	add	r8, r3
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	461d      	mov	r5, r3
 800b488:	f04f 0600 	mov.w	r6, #0
 800b48c:	46a9      	mov	r9, r5
 800b48e:	46b2      	mov	sl, r6
 800b490:	eb19 0309 	adds.w	r3, r9, r9
 800b494:	eb4a 040a 	adc.w	r4, sl, sl
 800b498:	4699      	mov	r9, r3
 800b49a:	46a2      	mov	sl, r4
 800b49c:	eb19 0905 	adds.w	r9, r9, r5
 800b4a0:	eb4a 0a06 	adc.w	sl, sl, r6
 800b4a4:	f04f 0100 	mov.w	r1, #0
 800b4a8:	f04f 0200 	mov.w	r2, #0
 800b4ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b4b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b4b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b4b8:	4689      	mov	r9, r1
 800b4ba:	4692      	mov	sl, r2
 800b4bc:	eb19 0005 	adds.w	r0, r9, r5
 800b4c0:	eb4a 0106 	adc.w	r1, sl, r6
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	461d      	mov	r5, r3
 800b4ca:	f04f 0600 	mov.w	r6, #0
 800b4ce:	196b      	adds	r3, r5, r5
 800b4d0:	eb46 0406 	adc.w	r4, r6, r6
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	4623      	mov	r3, r4
 800b4d8:	f7f5 fbb6 	bl	8000c48 <__aeabi_uldivmod>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <UART_SetConfig+0x384>)
 800b4e4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4e8:	095b      	lsrs	r3, r3, #5
 800b4ea:	2164      	movs	r1, #100	; 0x64
 800b4ec:	fb01 f303 	mul.w	r3, r1, r3
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	3332      	adds	r3, #50	; 0x32
 800b4f6:	4a07      	ldr	r2, [pc, #28]	; (800b514 <UART_SetConfig+0x384>)
 800b4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4fc:	095b      	lsrs	r3, r3, #5
 800b4fe:	f003 0207 	and.w	r2, r3, #7
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4442      	add	r2, r8
 800b508:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b50a:	e1b2      	b.n	800b872 <UART_SetConfig+0x6e2>
 800b50c:	40011000 	.word	0x40011000
 800b510:	40011400 	.word	0x40011400
 800b514:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4ad7      	ldr	r2, [pc, #860]	; (800b87c <UART_SetConfig+0x6ec>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d005      	beq.n	800b52e <UART_SetConfig+0x39e>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4ad6      	ldr	r2, [pc, #856]	; (800b880 <UART_SetConfig+0x6f0>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	f040 80d1 	bne.w	800b6d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b52e:	f7fd fab5 	bl	8008a9c <HAL_RCC_GetPCLK2Freq>
 800b532:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	469a      	mov	sl, r3
 800b538:	f04f 0b00 	mov.w	fp, #0
 800b53c:	46d0      	mov	r8, sl
 800b53e:	46d9      	mov	r9, fp
 800b540:	eb18 0308 	adds.w	r3, r8, r8
 800b544:	eb49 0409 	adc.w	r4, r9, r9
 800b548:	4698      	mov	r8, r3
 800b54a:	46a1      	mov	r9, r4
 800b54c:	eb18 080a 	adds.w	r8, r8, sl
 800b550:	eb49 090b 	adc.w	r9, r9, fp
 800b554:	f04f 0100 	mov.w	r1, #0
 800b558:	f04f 0200 	mov.w	r2, #0
 800b55c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b560:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b564:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b568:	4688      	mov	r8, r1
 800b56a:	4691      	mov	r9, r2
 800b56c:	eb1a 0508 	adds.w	r5, sl, r8
 800b570:	eb4b 0609 	adc.w	r6, fp, r9
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4619      	mov	r1, r3
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	f04f 0400 	mov.w	r4, #0
 800b586:	0094      	lsls	r4, r2, #2
 800b588:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b58c:	008b      	lsls	r3, r1, #2
 800b58e:	461a      	mov	r2, r3
 800b590:	4623      	mov	r3, r4
 800b592:	4628      	mov	r0, r5
 800b594:	4631      	mov	r1, r6
 800b596:	f7f5 fb57 	bl	8000c48 <__aeabi_uldivmod>
 800b59a:	4603      	mov	r3, r0
 800b59c:	460c      	mov	r4, r1
 800b59e:	461a      	mov	r2, r3
 800b5a0:	4bb8      	ldr	r3, [pc, #736]	; (800b884 <UART_SetConfig+0x6f4>)
 800b5a2:	fba3 2302 	umull	r2, r3, r3, r2
 800b5a6:	095b      	lsrs	r3, r3, #5
 800b5a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	469b      	mov	fp, r3
 800b5b0:	f04f 0c00 	mov.w	ip, #0
 800b5b4:	46d9      	mov	r9, fp
 800b5b6:	46e2      	mov	sl, ip
 800b5b8:	eb19 0309 	adds.w	r3, r9, r9
 800b5bc:	eb4a 040a 	adc.w	r4, sl, sl
 800b5c0:	4699      	mov	r9, r3
 800b5c2:	46a2      	mov	sl, r4
 800b5c4:	eb19 090b 	adds.w	r9, r9, fp
 800b5c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b5cc:	f04f 0100 	mov.w	r1, #0
 800b5d0:	f04f 0200 	mov.w	r2, #0
 800b5d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5e0:	4689      	mov	r9, r1
 800b5e2:	4692      	mov	sl, r2
 800b5e4:	eb1b 0509 	adds.w	r5, fp, r9
 800b5e8:	eb4c 060a 	adc.w	r6, ip, sl
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	685b      	ldr	r3, [r3, #4]
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f04f 0200 	mov.w	r2, #0
 800b5f6:	f04f 0300 	mov.w	r3, #0
 800b5fa:	f04f 0400 	mov.w	r4, #0
 800b5fe:	0094      	lsls	r4, r2, #2
 800b600:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b604:	008b      	lsls	r3, r1, #2
 800b606:	461a      	mov	r2, r3
 800b608:	4623      	mov	r3, r4
 800b60a:	4628      	mov	r0, r5
 800b60c:	4631      	mov	r1, r6
 800b60e:	f7f5 fb1b 	bl	8000c48 <__aeabi_uldivmod>
 800b612:	4603      	mov	r3, r0
 800b614:	460c      	mov	r4, r1
 800b616:	461a      	mov	r2, r3
 800b618:	4b9a      	ldr	r3, [pc, #616]	; (800b884 <UART_SetConfig+0x6f4>)
 800b61a:	fba3 1302 	umull	r1, r3, r3, r2
 800b61e:	095b      	lsrs	r3, r3, #5
 800b620:	2164      	movs	r1, #100	; 0x64
 800b622:	fb01 f303 	mul.w	r3, r1, r3
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	011b      	lsls	r3, r3, #4
 800b62a:	3332      	adds	r3, #50	; 0x32
 800b62c:	4a95      	ldr	r2, [pc, #596]	; (800b884 <UART_SetConfig+0x6f4>)
 800b62e:	fba2 2303 	umull	r2, r3, r2, r3
 800b632:	095b      	lsrs	r3, r3, #5
 800b634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b638:	4498      	add	r8, r3
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	469b      	mov	fp, r3
 800b63e:	f04f 0c00 	mov.w	ip, #0
 800b642:	46d9      	mov	r9, fp
 800b644:	46e2      	mov	sl, ip
 800b646:	eb19 0309 	adds.w	r3, r9, r9
 800b64a:	eb4a 040a 	adc.w	r4, sl, sl
 800b64e:	4699      	mov	r9, r3
 800b650:	46a2      	mov	sl, r4
 800b652:	eb19 090b 	adds.w	r9, r9, fp
 800b656:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b65a:	f04f 0100 	mov.w	r1, #0
 800b65e:	f04f 0200 	mov.w	r2, #0
 800b662:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b666:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b66a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b66e:	4689      	mov	r9, r1
 800b670:	4692      	mov	sl, r2
 800b672:	eb1b 0509 	adds.w	r5, fp, r9
 800b676:	eb4c 060a 	adc.w	r6, ip, sl
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	4619      	mov	r1, r3
 800b680:	f04f 0200 	mov.w	r2, #0
 800b684:	f04f 0300 	mov.w	r3, #0
 800b688:	f04f 0400 	mov.w	r4, #0
 800b68c:	0094      	lsls	r4, r2, #2
 800b68e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b692:	008b      	lsls	r3, r1, #2
 800b694:	461a      	mov	r2, r3
 800b696:	4623      	mov	r3, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	4631      	mov	r1, r6
 800b69c:	f7f5 fad4 	bl	8000c48 <__aeabi_uldivmod>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	4b77      	ldr	r3, [pc, #476]	; (800b884 <UART_SetConfig+0x6f4>)
 800b6a8:	fba3 1302 	umull	r1, r3, r3, r2
 800b6ac:	095b      	lsrs	r3, r3, #5
 800b6ae:	2164      	movs	r1, #100	; 0x64
 800b6b0:	fb01 f303 	mul.w	r3, r1, r3
 800b6b4:	1ad3      	subs	r3, r2, r3
 800b6b6:	011b      	lsls	r3, r3, #4
 800b6b8:	3332      	adds	r3, #50	; 0x32
 800b6ba:	4a72      	ldr	r2, [pc, #456]	; (800b884 <UART_SetConfig+0x6f4>)
 800b6bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c0:	095b      	lsrs	r3, r3, #5
 800b6c2:	f003 020f 	and.w	r2, r3, #15
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4442      	add	r2, r8
 800b6cc:	609a      	str	r2, [r3, #8]
 800b6ce:	e0d0      	b.n	800b872 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6d0:	f7fd f9d0 	bl	8008a74 <HAL_RCC_GetPCLK1Freq>
 800b6d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	469a      	mov	sl, r3
 800b6da:	f04f 0b00 	mov.w	fp, #0
 800b6de:	46d0      	mov	r8, sl
 800b6e0:	46d9      	mov	r9, fp
 800b6e2:	eb18 0308 	adds.w	r3, r8, r8
 800b6e6:	eb49 0409 	adc.w	r4, r9, r9
 800b6ea:	4698      	mov	r8, r3
 800b6ec:	46a1      	mov	r9, r4
 800b6ee:	eb18 080a 	adds.w	r8, r8, sl
 800b6f2:	eb49 090b 	adc.w	r9, r9, fp
 800b6f6:	f04f 0100 	mov.w	r1, #0
 800b6fa:	f04f 0200 	mov.w	r2, #0
 800b6fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b702:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b706:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b70a:	4688      	mov	r8, r1
 800b70c:	4691      	mov	r9, r2
 800b70e:	eb1a 0508 	adds.w	r5, sl, r8
 800b712:	eb4b 0609 	adc.w	r6, fp, r9
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	4619      	mov	r1, r3
 800b71c:	f04f 0200 	mov.w	r2, #0
 800b720:	f04f 0300 	mov.w	r3, #0
 800b724:	f04f 0400 	mov.w	r4, #0
 800b728:	0094      	lsls	r4, r2, #2
 800b72a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b72e:	008b      	lsls	r3, r1, #2
 800b730:	461a      	mov	r2, r3
 800b732:	4623      	mov	r3, r4
 800b734:	4628      	mov	r0, r5
 800b736:	4631      	mov	r1, r6
 800b738:	f7f5 fa86 	bl	8000c48 <__aeabi_uldivmod>
 800b73c:	4603      	mov	r3, r0
 800b73e:	460c      	mov	r4, r1
 800b740:	461a      	mov	r2, r3
 800b742:	4b50      	ldr	r3, [pc, #320]	; (800b884 <UART_SetConfig+0x6f4>)
 800b744:	fba3 2302 	umull	r2, r3, r3, r2
 800b748:	095b      	lsrs	r3, r3, #5
 800b74a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	469b      	mov	fp, r3
 800b752:	f04f 0c00 	mov.w	ip, #0
 800b756:	46d9      	mov	r9, fp
 800b758:	46e2      	mov	sl, ip
 800b75a:	eb19 0309 	adds.w	r3, r9, r9
 800b75e:	eb4a 040a 	adc.w	r4, sl, sl
 800b762:	4699      	mov	r9, r3
 800b764:	46a2      	mov	sl, r4
 800b766:	eb19 090b 	adds.w	r9, r9, fp
 800b76a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b76e:	f04f 0100 	mov.w	r1, #0
 800b772:	f04f 0200 	mov.w	r2, #0
 800b776:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b77a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b77e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b782:	4689      	mov	r9, r1
 800b784:	4692      	mov	sl, r2
 800b786:	eb1b 0509 	adds.w	r5, fp, r9
 800b78a:	eb4c 060a 	adc.w	r6, ip, sl
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	4619      	mov	r1, r3
 800b794:	f04f 0200 	mov.w	r2, #0
 800b798:	f04f 0300 	mov.w	r3, #0
 800b79c:	f04f 0400 	mov.w	r4, #0
 800b7a0:	0094      	lsls	r4, r2, #2
 800b7a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b7a6:	008b      	lsls	r3, r1, #2
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	4623      	mov	r3, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	4631      	mov	r1, r6
 800b7b0:	f7f5 fa4a 	bl	8000c48 <__aeabi_uldivmod>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4b32      	ldr	r3, [pc, #200]	; (800b884 <UART_SetConfig+0x6f4>)
 800b7bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b7c0:	095b      	lsrs	r3, r3, #5
 800b7c2:	2164      	movs	r1, #100	; 0x64
 800b7c4:	fb01 f303 	mul.w	r3, r1, r3
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	3332      	adds	r3, #50	; 0x32
 800b7ce:	4a2d      	ldr	r2, [pc, #180]	; (800b884 <UART_SetConfig+0x6f4>)
 800b7d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d4:	095b      	lsrs	r3, r3, #5
 800b7d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7da:	4498      	add	r8, r3
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	469b      	mov	fp, r3
 800b7e0:	f04f 0c00 	mov.w	ip, #0
 800b7e4:	46d9      	mov	r9, fp
 800b7e6:	46e2      	mov	sl, ip
 800b7e8:	eb19 0309 	adds.w	r3, r9, r9
 800b7ec:	eb4a 040a 	adc.w	r4, sl, sl
 800b7f0:	4699      	mov	r9, r3
 800b7f2:	46a2      	mov	sl, r4
 800b7f4:	eb19 090b 	adds.w	r9, r9, fp
 800b7f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b7fc:	f04f 0100 	mov.w	r1, #0
 800b800:	f04f 0200 	mov.w	r2, #0
 800b804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b808:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b80c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b810:	4689      	mov	r9, r1
 800b812:	4692      	mov	sl, r2
 800b814:	eb1b 0509 	adds.w	r5, fp, r9
 800b818:	eb4c 060a 	adc.w	r6, ip, sl
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	4619      	mov	r1, r3
 800b822:	f04f 0200 	mov.w	r2, #0
 800b826:	f04f 0300 	mov.w	r3, #0
 800b82a:	f04f 0400 	mov.w	r4, #0
 800b82e:	0094      	lsls	r4, r2, #2
 800b830:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b834:	008b      	lsls	r3, r1, #2
 800b836:	461a      	mov	r2, r3
 800b838:	4623      	mov	r3, r4
 800b83a:	4628      	mov	r0, r5
 800b83c:	4631      	mov	r1, r6
 800b83e:	f7f5 fa03 	bl	8000c48 <__aeabi_uldivmod>
 800b842:	4603      	mov	r3, r0
 800b844:	460c      	mov	r4, r1
 800b846:	461a      	mov	r2, r3
 800b848:	4b0e      	ldr	r3, [pc, #56]	; (800b884 <UART_SetConfig+0x6f4>)
 800b84a:	fba3 1302 	umull	r1, r3, r3, r2
 800b84e:	095b      	lsrs	r3, r3, #5
 800b850:	2164      	movs	r1, #100	; 0x64
 800b852:	fb01 f303 	mul.w	r3, r1, r3
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	011b      	lsls	r3, r3, #4
 800b85a:	3332      	adds	r3, #50	; 0x32
 800b85c:	4a09      	ldr	r2, [pc, #36]	; (800b884 <UART_SetConfig+0x6f4>)
 800b85e:	fba2 2303 	umull	r2, r3, r2, r3
 800b862:	095b      	lsrs	r3, r3, #5
 800b864:	f003 020f 	and.w	r2, r3, #15
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4442      	add	r2, r8
 800b86e:	609a      	str	r2, [r3, #8]
}
 800b870:	e7ff      	b.n	800b872 <UART_SetConfig+0x6e2>
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	40011000 	.word	0x40011000
 800b880:	40011400 	.word	0x40011400
 800b884:	51eb851f 	.word	0x51eb851f

0800b888 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	4613      	mov	r3, r2
 800b894:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 800b896:	2300      	movs	r3, #0
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	e00c      	b.n	800b8b6 <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	68f9      	ldr	r1, [r7, #12]
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	440b      	add	r3, r1
 800b8ae:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	617b      	str	r3, [r7, #20]
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	ddef      	ble.n	800b89c <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	79fa      	ldrb	r2, [r7, #7]
 800b8c0:	761a      	strb	r2, [r3, #24]
}
 800b8c2:	bf00      	nop
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 800b8ce:	b480      	push	{r7}
 800b8d0:	b085      	sub	sp, #20
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800b8da:	f04f 0300 	mov.w	r3, #0
 800b8de:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	7e1b      	ldrb	r3, [r3, #24]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d01f      	beq.n	800b928 <FILTER_process+0x5a>
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d047      	beq.n	800b97c <FILTER_process+0xae>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d148      	bne.n	800b982 <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	ed93 7a00 	vldr	s14, [r3]
 800b8f6:	edd7 7a00 	vldr	s15, [r7]
 800b8fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	edd3 6a04 	vldr	s13, [r3, #16]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	edd3 7a01 	vldr	s15, [r3, #4]
 800b90a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b90e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68da      	ldr	r2, [r3, #12]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	60fb      	str	r3, [r7, #12]
			break ;
 800b926:	e02f      	b.n	800b988 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	ed93 7a00 	vldr	s14, [r3]
 800b92e:	edd7 7a00 	vldr	s15, [r7]
 800b932:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	edd3 6a04 	vldr	s13, [r3, #16]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	edd3 7a01 	vldr	s15, [r3, #4]
 800b942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b946:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	edd3 6a05 	vldr	s13, [r3, #20]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	edd3 7a02 	vldr	s15, [r3, #8]
 800b956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b95a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691a      	ldr	r2, [r3, #16]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	60fb      	str	r3, [r7, #12]
			break;
 800b97a:	e005      	b.n	800b988 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	60fb      	str	r3, [r7, #12]
			break;
 800b980:	e002      	b.n	800b988 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	60fb      	str	r3, [r7, #12]
			break;
 800b986:	bf00      	nop
	}

	return to_return ;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	ee07 3a90 	vmov	s15, r3
};
 800b98e:	eeb0 0a67 	vmov.f32	s0, s15
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	72fb      	strb	r3, [r7, #11]
 800b9ac:	e00a      	b.n	800b9c4 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800b9ae:	7afb      	ldrb	r3, [r7, #11]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	4413      	add	r3, r2
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800b9be:	7afb      	ldrb	r3, [r7, #11]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	72fb      	strb	r3, [r7, #11]
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	2b1d      	cmp	r3, #29
 800b9c8:	d9f1      	bls.n	800b9ae <check_sum_f+0x12>
	return sum ;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3714      	adds	r7, #20
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800b9e4:	4a0e      	ldr	r2, [pc, #56]	; (800ba20 <IBUS_init+0x48>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 800b9ea:	4b0d      	ldr	r3, [pc, #52]	; (800ba20 <IBUS_init+0x48>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800b9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <IBUS_init+0x48>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <IBUS_init+0x48>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <IBUS_init+0x48>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	3304      	adds	r3, #4
 800ba06:	2214      	movs	r2, #20
 800ba08:	4619      	mov	r1, r3
 800ba0a:	f7fe ffdf 	bl	800a9cc <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 800ba0e:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <IBUS_init+0x48>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2201      	movs	r2, #1
 800ba14:	761a      	strb	r2, [r3, #24]
}
 800ba16:	bf00      	nop
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	20001a84 	.word	0x20001a84

0800ba24 <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800ba2c:	4b08      	ldr	r3, [pc, #32]	; (800ba50 <IBUS_RxCplt+0x2c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d106      	bne.n	800ba46 <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 800ba38:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <IBUS_RxCplt+0x30>)
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800ba3e:	4b04      	ldr	r3, [pc, #16]	; (800ba50 <IBUS_RxCplt+0x2c>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba44:	4798      	blx	r3
	}
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20001a84 	.word	0x20001a84
 800ba54:	20001a80 	.word	0x20001a80

0800ba58 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800ba60:	4b08      	ldr	r3, [pc, #32]	; (800ba84 <IBUS_RxHalfCplt+0x2c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d106      	bne.n	800ba7a <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 800ba6c:	4b06      	ldr	r3, [pc, #24]	; (800ba88 <IBUS_RxHalfCplt+0x30>)
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800ba72:	4b04      	ldr	r3, [pc, #16]	; (800ba84 <IBUS_RxHalfCplt+0x2c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba78:	4798      	blx	r3
	}
}
 800ba7a:	bf00      	nop
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20001a84 	.word	0x20001a84
 800ba88:	20001a80 	.word	0x20001a80

0800ba8c <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 800ba8c:	b5b0      	push	{r4, r5, r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 800ba92:	2300      	movs	r3, #0
 800ba94:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 800ba96:	4ba0      	ldr	r3, [pc, #640]	; (800bd18 <IBUS_Channel_Update+0x28c>)
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f040 80ba 	bne.w	800bc14 <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800baa0:	2300      	movs	r3, #0
 800baa2:	76fb      	strb	r3, [r7, #27]
 800baa4:	e0b1      	b.n	800bc0a <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 800baa6:	4b9d      	ldr	r3, [pc, #628]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d01b      	beq.n	800baea <IBUS_Channel_Update+0x5e>
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d041      	beq.n	800bb3a <IBUS_Channel_Update+0xae>
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f040 80a4 	bne.w	800bc04 <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800babc:	4b97      	ldr	r3, [pc, #604]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	7efb      	ldrb	r3, [r7, #27]
 800bac2:	4413      	add	r3, r2
 800bac4:	791b      	ldrb	r3, [r3, #4]
 800bac6:	2b20      	cmp	r3, #32
 800bac8:	f040 8097 	bne.w	800bbfa <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 800bacc:	4b93      	ldr	r3, [pc, #588]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800bad6:	4b91      	ldr	r3, [pc, #580]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bad8:	6819      	ldr	r1, [r3, #0]
 800bada:	7efa      	ldrb	r2, [r7, #27]
 800badc:	4b8f      	ldr	r3, [pc, #572]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	440a      	add	r2, r1
 800bae2:	7912      	ldrb	r2, [r2, #4]
 800bae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800bae8:	e087      	b.n	800bbfa <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800baea:	4b8c      	ldr	r3, [pc, #560]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	7efb      	ldrb	r3, [r7, #27]
 800baf0:	4413      	add	r3, r2
 800baf2:	791b      	ldrb	r3, [r3, #4]
 800baf4:	2b40      	cmp	r3, #64	; 0x40
 800baf6:	d113      	bne.n	800bb20 <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 800baf8:	4b88      	ldr	r3, [pc, #544]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2202      	movs	r2, #2
 800bafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800bb02:	4b86      	ldr	r3, [pc, #536]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb04:	6819      	ldr	r1, [r3, #0]
 800bb06:	7efa      	ldrb	r2, [r7, #27]
 800bb08:	4b84      	ldr	r3, [pc, #528]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	440a      	add	r2, r1
 800bb0e:	7912      	ldrb	r2, [r2, #4]
 800bb10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800bb14:	4b81      	ldr	r3, [pc, #516]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2202      	movs	r2, #2
 800bb1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800bb1e:	e06e      	b.n	800bbfe <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 800bb20:	4b7e      	ldr	r3, [pc, #504]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	7efb      	ldrb	r3, [r7, #27]
 800bb26:	4413      	add	r3, r2
 800bb28:	791b      	ldrb	r3, [r3, #4]
 800bb2a:	2b20      	cmp	r3, #32
 800bb2c:	d067      	beq.n	800bbfe <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 800bb2e:	4b7b      	ldr	r3, [pc, #492]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800bb38:	e061      	b.n	800bbfe <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800bb3a:	4b78      	ldr	r3, [pc, #480]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb3c:	681c      	ldr	r4, [r3, #0]
 800bb3e:	7ef8      	ldrb	r0, [r7, #27]
 800bb40:	4b76      	ldr	r3, [pc, #472]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb42:	6819      	ldr	r1, [r3, #0]
 800bb44:	4b75      	ldr	r3, [pc, #468]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800bb4c:	1c55      	adds	r5, r2, #1
 800bb4e:	b2ad      	uxth	r5, r5
 800bb50:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800bb54:	4615      	mov	r5, r2
 800bb56:	1823      	adds	r3, r4, r0
 800bb58:	791a      	ldrb	r2, [r3, #4]
 800bb5a:	194b      	adds	r3, r1, r5
 800bb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800bb60:	4b6e      	ldr	r3, [pc, #440]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb68:	2b20      	cmp	r3, #32
 800bb6a:	d14a      	bne.n	800bc02 <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800bb6c:	4b6b      	ldr	r3, [pc, #428]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800bb74:	461a      	mov	r2, r3
 800bb76:	4b69      	ldr	r3, [pc, #420]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bb7e:	021b      	lsls	r3, r3, #8
 800bb80:	4313      	orrs	r3, r2
 800bb82:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800bb84:	4b65      	ldr	r3, [pc, #404]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	333d      	adds	r3, #61	; 0x3d
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7ff ff06 	bl	800b99c <check_sum_f>
 800bb90:	4603      	mov	r3, r0
 800bb92:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800bb96:	33ff      	adds	r3, #255	; 0xff
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d127      	bne.n	800bbee <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bb9e:	2300      	movs	r3, #0
 800bba0:	617b      	str	r3, [r7, #20]
 800bba2:	e01f      	b.n	800bbe4 <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800bba4:	4b5d      	ldr	r3, [pc, #372]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	3302      	adds	r3, #2
 800bbac:	4413      	add	r3, r2
 800bbae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbb2:	b21a      	sxth	r2, r3
 800bbb4:	4b59      	ldr	r3, [pc, #356]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bbb6:	6819      	ldr	r1, [r3, #0]
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	3303      	adds	r3, #3
 800bbbc:	440b      	add	r3, r1
 800bbbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbc2:	021b      	lsls	r3, r3, #8
 800bbc4:	b21b      	sxth	r3, r3
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	b219      	sxth	r1, r3
 800bbca:	4b54      	ldr	r3, [pc, #336]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	085b      	lsrs	r3, r3, #1
 800bbd2:	b289      	uxth	r1, r1
 800bbd4:	330c      	adds	r3, #12
 800bbd6:	005b      	lsls	r3, r3, #1
 800bbd8:	4413      	add	r3, r2
 800bbda:	460a      	mov	r2, r1
 800bbdc:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	3302      	adds	r3, #2
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	2b1b      	cmp	r3, #27
 800bbe8:	d9dc      	bls.n	800bba4 <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 800bbea:	2301      	movs	r3, #1
 800bbec:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800bbee:	4b4b      	ldr	r3, [pc, #300]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800bbf8:	e003      	b.n	800bc02 <IBUS_Channel_Update+0x176>
					break;
 800bbfa:	bf00      	nop
 800bbfc:	e002      	b.n	800bc04 <IBUS_Channel_Update+0x178>
					break ;
 800bbfe:	bf00      	nop
 800bc00:	e000      	b.n	800bc04 <IBUS_Channel_Update+0x178>
					break;
 800bc02:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800bc04:	7efb      	ldrb	r3, [r7, #27]
 800bc06:	3301      	adds	r3, #1
 800bc08:	76fb      	strb	r3, [r7, #27]
 800bc0a:	7efb      	ldrb	r3, [r7, #27]
 800bc0c:	2b09      	cmp	r3, #9
 800bc0e:	f67f af4a 	bls.w	800baa6 <IBUS_Channel_Update+0x1a>
 800bc12:	e0bc      	b.n	800bd8e <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800bc14:	230a      	movs	r3, #10
 800bc16:	74fb      	strb	r3, [r7, #19]
 800bc18:	e0b5      	b.n	800bd86 <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 800bc1a:	4b40      	ldr	r3, [pc, #256]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d01b      	beq.n	800bc5e <IBUS_Channel_Update+0x1d2>
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d041      	beq.n	800bcae <IBUS_Channel_Update+0x222>
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f040 80a8 	bne.w	800bd80 <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800bc30:	4b3a      	ldr	r3, [pc, #232]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc32:	681a      	ldr	r2, [r3, #0]
 800bc34:	7cfb      	ldrb	r3, [r7, #19]
 800bc36:	4413      	add	r3, r2
 800bc38:	791b      	ldrb	r3, [r3, #4]
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	f040 809b 	bne.w	800bd76 <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 800bc40:	4b36      	ldr	r3, [pc, #216]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800bc4a:	4b34      	ldr	r3, [pc, #208]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc4c:	6819      	ldr	r1, [r3, #0]
 800bc4e:	7cfa      	ldrb	r2, [r7, #19]
 800bc50:	4b32      	ldr	r3, [pc, #200]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	440a      	add	r2, r1
 800bc56:	7912      	ldrb	r2, [r2, #4]
 800bc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 800bc5c:	e08b      	b.n	800bd76 <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 800bc5e:	4b2f      	ldr	r3, [pc, #188]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	7cfb      	ldrb	r3, [r7, #19]
 800bc64:	4413      	add	r3, r2
 800bc66:	791b      	ldrb	r3, [r3, #4]
 800bc68:	2b40      	cmp	r3, #64	; 0x40
 800bc6a:	d113      	bne.n	800bc94 <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 800bc6c:	4b2b      	ldr	r3, [pc, #172]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2202      	movs	r2, #2
 800bc72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 800bc76:	4b29      	ldr	r3, [pc, #164]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc78:	6819      	ldr	r1, [r3, #0]
 800bc7a:	7cfa      	ldrb	r2, [r7, #19]
 800bc7c:	4b27      	ldr	r3, [pc, #156]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	440a      	add	r2, r1
 800bc82:	7912      	ldrb	r2, [r2, #4]
 800bc84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 800bc88:	4b24      	ldr	r3, [pc, #144]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 800bc92:	e072      	b.n	800bd7a <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 800bc94:	4b21      	ldr	r3, [pc, #132]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	7cfb      	ldrb	r3, [r7, #19]
 800bc9a:	4413      	add	r3, r2
 800bc9c:	791b      	ldrb	r3, [r3, #4]
 800bc9e:	2b20      	cmp	r3, #32
 800bca0:	d06b      	beq.n	800bd7a <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 800bca2:	4b1e      	ldr	r3, [pc, #120]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 800bcac:	e065      	b.n	800bd7a <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 800bcae:	4b1b      	ldr	r3, [pc, #108]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bcb0:	681c      	ldr	r4, [r3, #0]
 800bcb2:	7cf8      	ldrb	r0, [r7, #19]
 800bcb4:	4b19      	ldr	r3, [pc, #100]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bcb6:	6819      	ldr	r1, [r3, #0]
 800bcb8:	4b18      	ldr	r3, [pc, #96]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800bcc0:	1c55      	adds	r5, r2, #1
 800bcc2:	b2ad      	uxth	r5, r5
 800bcc4:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 800bcc8:	4615      	mov	r5, r2
 800bcca:	1823      	adds	r3, r4, r0
 800bccc:	791a      	ldrb	r2, [r3, #4]
 800bcce:	194b      	adds	r3, r1, r5
 800bcd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 800bcd4:	4b11      	ldr	r3, [pc, #68]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bcdc:	2b20      	cmp	r3, #32
 800bcde:	d14e      	bne.n	800bd7e <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 800bce0:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800bce8:	461a      	mov	r2, r3
 800bcea:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bcf2:	021b      	lsls	r3, r3, #8
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 800bcf8:	4b08      	ldr	r3, [pc, #32]	; (800bd1c <IBUS_Channel_Update+0x290>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	333d      	adds	r3, #61	; 0x3d
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fe4c 	bl	800b99c <check_sum_f>
 800bd04:	4603      	mov	r3, r0
 800bd06:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800bd0a:	33ff      	adds	r3, #255	; 0xff
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d12b      	bne.n	800bd6a <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bd12:	2300      	movs	r3, #0
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	e023      	b.n	800bd60 <IBUS_Channel_Update+0x2d4>
 800bd18:	20001a80 	.word	0x20001a80
 800bd1c:	20001a84 	.word	0x20001a84
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 800bd20:	4b1d      	ldr	r3, [pc, #116]	; (800bd98 <IBUS_Channel_Update+0x30c>)
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3302      	adds	r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd2e:	b21a      	sxth	r2, r3
 800bd30:	4b19      	ldr	r3, [pc, #100]	; (800bd98 <IBUS_Channel_Update+0x30c>)
 800bd32:	6819      	ldr	r1, [r3, #0]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3303      	adds	r3, #3
 800bd38:	440b      	add	r3, r1
 800bd3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd3e:	021b      	lsls	r3, r3, #8
 800bd40:	b21b      	sxth	r3, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	b219      	sxth	r1, r3
 800bd46:	4b14      	ldr	r3, [pc, #80]	; (800bd98 <IBUS_Channel_Update+0x30c>)
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	085b      	lsrs	r3, r3, #1
 800bd4e:	b289      	uxth	r1, r1
 800bd50:	330c      	adds	r3, #12
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	4413      	add	r3, r2
 800bd56:	460a      	mov	r2, r1
 800bd58:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	3302      	adds	r3, #2
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2b1b      	cmp	r3, #27
 800bd64:	d9dc      	bls.n	800bd20 <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 800bd66:	2301      	movs	r3, #1
 800bd68:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 800bd6a:	4b0b      	ldr	r3, [pc, #44]	; (800bd98 <IBUS_Channel_Update+0x30c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 800bd74:	e003      	b.n	800bd7e <IBUS_Channel_Update+0x2f2>
					break;
 800bd76:	bf00      	nop
 800bd78:	e002      	b.n	800bd80 <IBUS_Channel_Update+0x2f4>
					break ;
 800bd7a:	bf00      	nop
 800bd7c:	e000      	b.n	800bd80 <IBUS_Channel_Update+0x2f4>
					break;
 800bd7e:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 800bd80:	7cfb      	ldrb	r3, [r7, #19]
 800bd82:	3301      	adds	r3, #1
 800bd84:	74fb      	strb	r3, [r7, #19]
 800bd86:	7cfb      	ldrb	r3, [r7, #19]
 800bd88:	2b13      	cmp	r3, #19
 800bd8a:	f67f af46 	bls.w	800bc1a <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 800bd8e:	69fb      	ldr	r3, [r7, #28]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3720      	adds	r7, #32
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bdb0      	pop	{r4, r5, r7, pc}
 800bd98:	20001a84 	.word	0x20001a84

0800bd9c <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	609a      	str	r2, [r3, #8]
	if(start){
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d022      	beq.n	800be02 <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	68b8      	ldr	r0, [r7, #8]
 800bdc6:	f7fd fd21 	bl	800980c <HAL_TIM_PWM_Start>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800bdd2:	2104      	movs	r1, #4
 800bdd4:	68b8      	ldr	r0, [r7, #8]
 800bdd6:	f7fd fd19 	bl	800980c <HAL_TIM_PWM_Start>
 800bdda:	4603      	mov	r3, r0
 800bddc:	461a      	mov	r2, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800bde2:	2108      	movs	r1, #8
 800bde4:	68b8      	ldr	r0, [r7, #8]
 800bde6:	f7fd fd11 	bl	800980c <HAL_TIM_PWM_Start>
 800bdea:	4603      	mov	r3, r0
 800bdec:	461a      	mov	r2, r3
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 800bdf2:	210c      	movs	r1, #12
 800bdf4:	68b8      	ldr	r0, [r7, #8]
 800bdf6:	f7fd fd09 	bl	800980c <HAL_TIM_PWM_Start>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	731a      	strb	r2, [r3, #12]
	}
}
 800be02:	bf00      	nop
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	881a      	ldrh	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800be20:	bf28      	it	cs
 800be22:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800be26:	b292      	uxth	r2, r2
 800be28:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	3302      	adds	r3, #2
 800be30:	881a      	ldrh	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	3302      	adds	r3, #2
 800be38:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800be3c:	bf28      	it	cs
 800be3e:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800be42:	b292      	uxth	r2, r2
 800be44:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	3304      	adds	r3, #4
 800be4c:	881a      	ldrh	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	3304      	adds	r3, #4
 800be54:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800be58:	bf28      	it	cs
 800be5a:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800be5e:	b292      	uxth	r2, r2
 800be60:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	3306      	adds	r3, #6
 800be68:	881a      	ldrh	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	3306      	adds	r3, #6
 800be70:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800be74:	bf28      	it	cs
 800be76:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 800be7a:	b292      	uxth	r2, r2
 800be7c:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	3302      	adds	r3, #2
 800be96:	881b      	ldrh	r3, [r3, #0]
 800be98:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	3304      	adds	r3, #4
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	3306      	adds	r3, #6
 800bebe:	881b      	ldrh	r3, [r3, #0]
 800bec0:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	641a      	str	r2, [r3, #64]	; 0x40
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	ed87 0a02 	vstr	s0, [r7, #8]
 800bee4:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 800bee8:	ed97 7a01 	vldr	s14, [r7, #4]
 800beec:	edd7 7a02 	vldr	s15, [r7, #8]
 800bef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	ed93 7a04 	vldr	s14, [r3, #16]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	ed93 7a02 	vldr	s14, [r3, #8]
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	edd3 6a05 	vldr	s13, [r3, #20]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800bf22:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	edd3 6a07 	vldr	s13, [r3, #28]
 800bf2c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bf30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	ed93 7a06 	vldr	s14, [r3, #24]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800bf46:	edd7 6a01 	vldr	s13, [r7, #4]
 800bf4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bf4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	edd3 7a07 	vldr	s15, [r3, #28]
 800bf58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	edd3 7a03 	vldr	s15, [r3, #12]
 800bf6e:	eeb0 0a67 	vmov.f32	s0, s15
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7ff fcab 	bl	800b8ce <FILTER_process>
 800bf78:	eef0 7a40 	vmov.f32	s15, s0
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	ed93 7a01 	vldr	s14, [r3, #4]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	edd3 7a02 	vldr	s15, [r3, #8]
 800bf8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	edd3 7a03 	vldr	s15, [r3, #12]
 800bf98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	ed93 7a08 	vldr	s14, [r3, #32]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	edd3 7a00 	vldr	s15, [r3]
 800bfae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb6:	dd02      	ble.n	800bfbe <PID_compute+0xe6>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	e001      	b.n	800bfc2 <PID_compute+0xea>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	edd3 7a08 	vldr	s15, [r3, #32]
 800bfcc:	eeb1 7a67 	vneg.f32	s14, s15
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	edd3 7a00 	vldr	s15, [r3]
 800bfd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfde:	dd05      	ble.n	800bfec <PID_compute+0x114>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	edd3 7a08 	vldr	s15, [r3, #32]
 800bfe6:	eef1 7a67 	vneg.f32	s15, s15
 800bfea:	e002      	b.n	800bff2 <PID_compute+0x11a>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	edd3 7a00 	vldr	s15, [r3]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	ee07 3a90 	vmov	s15, r3
}
 800c006:	eeb0 0a67 	vmov.f32	s0, s15
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	4613      	mov	r3, r2
 800c01e:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800c020:	2300      	movs	r3, #0
 800c022:	75fb      	strb	r3, [r7, #23]
 800c024:	e00d      	b.n	800c042 <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 800c026:	7dfb      	ldrb	r3, [r7, #23]
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	441a      	add	r2, r3
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
 800c030:	6812      	ldr	r2, [r2, #0]
 800c032:	68f9      	ldr	r1, [r7, #12]
 800c034:	3304      	adds	r3, #4
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	3301      	adds	r3, #1
 800c040:	75fb      	strb	r3, [r7, #23]
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	2b04      	cmp	r3, #4
 800c046:	d9ee      	bls.n	800c026 <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f04f 0200 	mov.w	r2, #0
 800c04e:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f04f 0200 	mov.w	r2, #0
 800c056:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f04f 0200 	mov.w	r2, #0
 800c05e:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	332c      	adds	r3, #44	; 0x2c
 800c064:	79fa      	ldrb	r2, [r7, #7]
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff fc0d 	bl	800b888 <FILTER_init>
}
 800c06e:	bf00      	nop
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
	...

0800c078 <__errno>:
 800c078:	4b01      	ldr	r3, [pc, #4]	; (800c080 <__errno+0x8>)
 800c07a:	6818      	ldr	r0, [r3, #0]
 800c07c:	4770      	bx	lr
 800c07e:	bf00      	nop
 800c080:	20001560 	.word	0x20001560

0800c084 <__libc_init_array>:
 800c084:	b570      	push	{r4, r5, r6, lr}
 800c086:	4e0d      	ldr	r6, [pc, #52]	; (800c0bc <__libc_init_array+0x38>)
 800c088:	4c0d      	ldr	r4, [pc, #52]	; (800c0c0 <__libc_init_array+0x3c>)
 800c08a:	1ba4      	subs	r4, r4, r6
 800c08c:	10a4      	asrs	r4, r4, #2
 800c08e:	2500      	movs	r5, #0
 800c090:	42a5      	cmp	r5, r4
 800c092:	d109      	bne.n	800c0a8 <__libc_init_array+0x24>
 800c094:	4e0b      	ldr	r6, [pc, #44]	; (800c0c4 <__libc_init_array+0x40>)
 800c096:	4c0c      	ldr	r4, [pc, #48]	; (800c0c8 <__libc_init_array+0x44>)
 800c098:	f003 fb5c 	bl	800f754 <_init>
 800c09c:	1ba4      	subs	r4, r4, r6
 800c09e:	10a4      	asrs	r4, r4, #2
 800c0a0:	2500      	movs	r5, #0
 800c0a2:	42a5      	cmp	r5, r4
 800c0a4:	d105      	bne.n	800c0b2 <__libc_init_array+0x2e>
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0ac:	4798      	blx	r3
 800c0ae:	3501      	adds	r5, #1
 800c0b0:	e7ee      	b.n	800c090 <__libc_init_array+0xc>
 800c0b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0b6:	4798      	blx	r3
 800c0b8:	3501      	adds	r5, #1
 800c0ba:	e7f2      	b.n	800c0a2 <__libc_init_array+0x1e>
 800c0bc:	0800fe5c 	.word	0x0800fe5c
 800c0c0:	0800fe5c 	.word	0x0800fe5c
 800c0c4:	0800fe5c 	.word	0x0800fe5c
 800c0c8:	0800fe60 	.word	0x0800fe60

0800c0cc <memcpy>:
 800c0cc:	b510      	push	{r4, lr}
 800c0ce:	1e43      	subs	r3, r0, #1
 800c0d0:	440a      	add	r2, r1
 800c0d2:	4291      	cmp	r1, r2
 800c0d4:	d100      	bne.n	800c0d8 <memcpy+0xc>
 800c0d6:	bd10      	pop	{r4, pc}
 800c0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0e0:	e7f7      	b.n	800c0d2 <memcpy+0x6>

0800c0e2 <memmove>:
 800c0e2:	4288      	cmp	r0, r1
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	eb01 0302 	add.w	r3, r1, r2
 800c0ea:	d807      	bhi.n	800c0fc <memmove+0x1a>
 800c0ec:	1e42      	subs	r2, r0, #1
 800c0ee:	4299      	cmp	r1, r3
 800c0f0:	d00a      	beq.n	800c108 <memmove+0x26>
 800c0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c0fa:	e7f8      	b.n	800c0ee <memmove+0xc>
 800c0fc:	4283      	cmp	r3, r0
 800c0fe:	d9f5      	bls.n	800c0ec <memmove+0xa>
 800c100:	1881      	adds	r1, r0, r2
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	42d3      	cmn	r3, r2
 800c106:	d100      	bne.n	800c10a <memmove+0x28>
 800c108:	bd10      	pop	{r4, pc}
 800c10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c10e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c112:	e7f7      	b.n	800c104 <memmove+0x22>

0800c114 <memset>:
 800c114:	4402      	add	r2, r0
 800c116:	4603      	mov	r3, r0
 800c118:	4293      	cmp	r3, r2
 800c11a:	d100      	bne.n	800c11e <memset+0xa>
 800c11c:	4770      	bx	lr
 800c11e:	f803 1b01 	strb.w	r1, [r3], #1
 800c122:	e7f9      	b.n	800c118 <memset+0x4>

0800c124 <__cvt>:
 800c124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c128:	ec55 4b10 	vmov	r4, r5, d0
 800c12c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c12e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c132:	2d00      	cmp	r5, #0
 800c134:	460e      	mov	r6, r1
 800c136:	4691      	mov	r9, r2
 800c138:	4619      	mov	r1, r3
 800c13a:	bfb8      	it	lt
 800c13c:	4622      	movlt	r2, r4
 800c13e:	462b      	mov	r3, r5
 800c140:	f027 0720 	bic.w	r7, r7, #32
 800c144:	bfbb      	ittet	lt
 800c146:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c14a:	461d      	movlt	r5, r3
 800c14c:	2300      	movge	r3, #0
 800c14e:	232d      	movlt	r3, #45	; 0x2d
 800c150:	bfb8      	it	lt
 800c152:	4614      	movlt	r4, r2
 800c154:	2f46      	cmp	r7, #70	; 0x46
 800c156:	700b      	strb	r3, [r1, #0]
 800c158:	d004      	beq.n	800c164 <__cvt+0x40>
 800c15a:	2f45      	cmp	r7, #69	; 0x45
 800c15c:	d100      	bne.n	800c160 <__cvt+0x3c>
 800c15e:	3601      	adds	r6, #1
 800c160:	2102      	movs	r1, #2
 800c162:	e000      	b.n	800c166 <__cvt+0x42>
 800c164:	2103      	movs	r1, #3
 800c166:	ab03      	add	r3, sp, #12
 800c168:	9301      	str	r3, [sp, #4]
 800c16a:	ab02      	add	r3, sp, #8
 800c16c:	9300      	str	r3, [sp, #0]
 800c16e:	4632      	mov	r2, r6
 800c170:	4653      	mov	r3, sl
 800c172:	ec45 4b10 	vmov	d0, r4, r5
 800c176:	f000 fea7 	bl	800cec8 <_dtoa_r>
 800c17a:	2f47      	cmp	r7, #71	; 0x47
 800c17c:	4680      	mov	r8, r0
 800c17e:	d102      	bne.n	800c186 <__cvt+0x62>
 800c180:	f019 0f01 	tst.w	r9, #1
 800c184:	d026      	beq.n	800c1d4 <__cvt+0xb0>
 800c186:	2f46      	cmp	r7, #70	; 0x46
 800c188:	eb08 0906 	add.w	r9, r8, r6
 800c18c:	d111      	bne.n	800c1b2 <__cvt+0x8e>
 800c18e:	f898 3000 	ldrb.w	r3, [r8]
 800c192:	2b30      	cmp	r3, #48	; 0x30
 800c194:	d10a      	bne.n	800c1ac <__cvt+0x88>
 800c196:	2200      	movs	r2, #0
 800c198:	2300      	movs	r3, #0
 800c19a:	4620      	mov	r0, r4
 800c19c:	4629      	mov	r1, r5
 800c19e:	f7f4 fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1a2:	b918      	cbnz	r0, 800c1ac <__cvt+0x88>
 800c1a4:	f1c6 0601 	rsb	r6, r6, #1
 800c1a8:	f8ca 6000 	str.w	r6, [sl]
 800c1ac:	f8da 3000 	ldr.w	r3, [sl]
 800c1b0:	4499      	add	r9, r3
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	f7f4 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1be:	b938      	cbnz	r0, 800c1d0 <__cvt+0xac>
 800c1c0:	2230      	movs	r2, #48	; 0x30
 800c1c2:	9b03      	ldr	r3, [sp, #12]
 800c1c4:	454b      	cmp	r3, r9
 800c1c6:	d205      	bcs.n	800c1d4 <__cvt+0xb0>
 800c1c8:	1c59      	adds	r1, r3, #1
 800c1ca:	9103      	str	r1, [sp, #12]
 800c1cc:	701a      	strb	r2, [r3, #0]
 800c1ce:	e7f8      	b.n	800c1c2 <__cvt+0x9e>
 800c1d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1d4:	9b03      	ldr	r3, [sp, #12]
 800c1d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1d8:	eba3 0308 	sub.w	r3, r3, r8
 800c1dc:	4640      	mov	r0, r8
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	b004      	add	sp, #16
 800c1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c1e6 <__exponent>:
 800c1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1e8:	2900      	cmp	r1, #0
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	bfba      	itte	lt
 800c1ee:	4249      	neglt	r1, r1
 800c1f0:	232d      	movlt	r3, #45	; 0x2d
 800c1f2:	232b      	movge	r3, #43	; 0x2b
 800c1f4:	2909      	cmp	r1, #9
 800c1f6:	f804 2b02 	strb.w	r2, [r4], #2
 800c1fa:	7043      	strb	r3, [r0, #1]
 800c1fc:	dd20      	ble.n	800c240 <__exponent+0x5a>
 800c1fe:	f10d 0307 	add.w	r3, sp, #7
 800c202:	461f      	mov	r7, r3
 800c204:	260a      	movs	r6, #10
 800c206:	fb91 f5f6 	sdiv	r5, r1, r6
 800c20a:	fb06 1115 	mls	r1, r6, r5, r1
 800c20e:	3130      	adds	r1, #48	; 0x30
 800c210:	2d09      	cmp	r5, #9
 800c212:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c216:	f103 32ff 	add.w	r2, r3, #4294967295
 800c21a:	4629      	mov	r1, r5
 800c21c:	dc09      	bgt.n	800c232 <__exponent+0x4c>
 800c21e:	3130      	adds	r1, #48	; 0x30
 800c220:	3b02      	subs	r3, #2
 800c222:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c226:	42bb      	cmp	r3, r7
 800c228:	4622      	mov	r2, r4
 800c22a:	d304      	bcc.n	800c236 <__exponent+0x50>
 800c22c:	1a10      	subs	r0, r2, r0
 800c22e:	b003      	add	sp, #12
 800c230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c232:	4613      	mov	r3, r2
 800c234:	e7e7      	b.n	800c206 <__exponent+0x20>
 800c236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c23a:	f804 2b01 	strb.w	r2, [r4], #1
 800c23e:	e7f2      	b.n	800c226 <__exponent+0x40>
 800c240:	2330      	movs	r3, #48	; 0x30
 800c242:	4419      	add	r1, r3
 800c244:	7083      	strb	r3, [r0, #2]
 800c246:	1d02      	adds	r2, r0, #4
 800c248:	70c1      	strb	r1, [r0, #3]
 800c24a:	e7ef      	b.n	800c22c <__exponent+0x46>

0800c24c <_printf_float>:
 800c24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c250:	b08d      	sub	sp, #52	; 0x34
 800c252:	460c      	mov	r4, r1
 800c254:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c258:	4616      	mov	r6, r2
 800c25a:	461f      	mov	r7, r3
 800c25c:	4605      	mov	r5, r0
 800c25e:	f001 fd65 	bl	800dd2c <_localeconv_r>
 800c262:	6803      	ldr	r3, [r0, #0]
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	4618      	mov	r0, r3
 800c268:	f7f3 ffb2 	bl	80001d0 <strlen>
 800c26c:	2300      	movs	r3, #0
 800c26e:	930a      	str	r3, [sp, #40]	; 0x28
 800c270:	f8d8 3000 	ldr.w	r3, [r8]
 800c274:	9005      	str	r0, [sp, #20]
 800c276:	3307      	adds	r3, #7
 800c278:	f023 0307 	bic.w	r3, r3, #7
 800c27c:	f103 0208 	add.w	r2, r3, #8
 800c280:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c284:	f8d4 b000 	ldr.w	fp, [r4]
 800c288:	f8c8 2000 	str.w	r2, [r8]
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c294:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c29c:	9307      	str	r3, [sp, #28]
 800c29e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a6:	4ba7      	ldr	r3, [pc, #668]	; (800c544 <_printf_float+0x2f8>)
 800c2a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ac:	f7f4 fc3e 	bl	8000b2c <__aeabi_dcmpun>
 800c2b0:	bb70      	cbnz	r0, 800c310 <_printf_float+0xc4>
 800c2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b6:	4ba3      	ldr	r3, [pc, #652]	; (800c544 <_printf_float+0x2f8>)
 800c2b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2bc:	f7f4 fc18 	bl	8000af0 <__aeabi_dcmple>
 800c2c0:	bb30      	cbnz	r0, 800c310 <_printf_float+0xc4>
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4640      	mov	r0, r8
 800c2c8:	4649      	mov	r1, r9
 800c2ca:	f7f4 fc07 	bl	8000adc <__aeabi_dcmplt>
 800c2ce:	b110      	cbz	r0, 800c2d6 <_printf_float+0x8a>
 800c2d0:	232d      	movs	r3, #45	; 0x2d
 800c2d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2d6:	4a9c      	ldr	r2, [pc, #624]	; (800c548 <_printf_float+0x2fc>)
 800c2d8:	4b9c      	ldr	r3, [pc, #624]	; (800c54c <_printf_float+0x300>)
 800c2da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c2de:	bf8c      	ite	hi
 800c2e0:	4690      	movhi	r8, r2
 800c2e2:	4698      	movls	r8, r3
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	f02b 0204 	bic.w	r2, fp, #4
 800c2ea:	6123      	str	r3, [r4, #16]
 800c2ec:	6022      	str	r2, [r4, #0]
 800c2ee:	f04f 0900 	mov.w	r9, #0
 800c2f2:	9700      	str	r7, [sp, #0]
 800c2f4:	4633      	mov	r3, r6
 800c2f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f000 f9e6 	bl	800c6cc <_printf_common>
 800c300:	3001      	adds	r0, #1
 800c302:	f040 808d 	bne.w	800c420 <_printf_float+0x1d4>
 800c306:	f04f 30ff 	mov.w	r0, #4294967295
 800c30a:	b00d      	add	sp, #52	; 0x34
 800c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c310:	4642      	mov	r2, r8
 800c312:	464b      	mov	r3, r9
 800c314:	4640      	mov	r0, r8
 800c316:	4649      	mov	r1, r9
 800c318:	f7f4 fc08 	bl	8000b2c <__aeabi_dcmpun>
 800c31c:	b110      	cbz	r0, 800c324 <_printf_float+0xd8>
 800c31e:	4a8c      	ldr	r2, [pc, #560]	; (800c550 <_printf_float+0x304>)
 800c320:	4b8c      	ldr	r3, [pc, #560]	; (800c554 <_printf_float+0x308>)
 800c322:	e7da      	b.n	800c2da <_printf_float+0x8e>
 800c324:	6861      	ldr	r1, [r4, #4]
 800c326:	1c4b      	adds	r3, r1, #1
 800c328:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c32c:	a80a      	add	r0, sp, #40	; 0x28
 800c32e:	d13e      	bne.n	800c3ae <_printf_float+0x162>
 800c330:	2306      	movs	r3, #6
 800c332:	6063      	str	r3, [r4, #4]
 800c334:	2300      	movs	r3, #0
 800c336:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c33a:	ab09      	add	r3, sp, #36	; 0x24
 800c33c:	9300      	str	r3, [sp, #0]
 800c33e:	ec49 8b10 	vmov	d0, r8, r9
 800c342:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c346:	6022      	str	r2, [r4, #0]
 800c348:	f8cd a004 	str.w	sl, [sp, #4]
 800c34c:	6861      	ldr	r1, [r4, #4]
 800c34e:	4628      	mov	r0, r5
 800c350:	f7ff fee8 	bl	800c124 <__cvt>
 800c354:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c358:	2b47      	cmp	r3, #71	; 0x47
 800c35a:	4680      	mov	r8, r0
 800c35c:	d109      	bne.n	800c372 <_printf_float+0x126>
 800c35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c360:	1cd8      	adds	r0, r3, #3
 800c362:	db02      	blt.n	800c36a <_printf_float+0x11e>
 800c364:	6862      	ldr	r2, [r4, #4]
 800c366:	4293      	cmp	r3, r2
 800c368:	dd47      	ble.n	800c3fa <_printf_float+0x1ae>
 800c36a:	f1aa 0a02 	sub.w	sl, sl, #2
 800c36e:	fa5f fa8a 	uxtb.w	sl, sl
 800c372:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c376:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c378:	d824      	bhi.n	800c3c4 <_printf_float+0x178>
 800c37a:	3901      	subs	r1, #1
 800c37c:	4652      	mov	r2, sl
 800c37e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c382:	9109      	str	r1, [sp, #36]	; 0x24
 800c384:	f7ff ff2f 	bl	800c1e6 <__exponent>
 800c388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c38a:	1813      	adds	r3, r2, r0
 800c38c:	2a01      	cmp	r2, #1
 800c38e:	4681      	mov	r9, r0
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	dc02      	bgt.n	800c39a <_printf_float+0x14e>
 800c394:	6822      	ldr	r2, [r4, #0]
 800c396:	07d1      	lsls	r1, r2, #31
 800c398:	d501      	bpl.n	800c39e <_printf_float+0x152>
 800c39a:	3301      	adds	r3, #1
 800c39c:	6123      	str	r3, [r4, #16]
 800c39e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0a5      	beq.n	800c2f2 <_printf_float+0xa6>
 800c3a6:	232d      	movs	r3, #45	; 0x2d
 800c3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3ac:	e7a1      	b.n	800c2f2 <_printf_float+0xa6>
 800c3ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c3b2:	f000 8177 	beq.w	800c6a4 <_printf_float+0x458>
 800c3b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c3ba:	d1bb      	bne.n	800c334 <_printf_float+0xe8>
 800c3bc:	2900      	cmp	r1, #0
 800c3be:	d1b9      	bne.n	800c334 <_printf_float+0xe8>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e7b6      	b.n	800c332 <_printf_float+0xe6>
 800c3c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c3c8:	d119      	bne.n	800c3fe <_printf_float+0x1b2>
 800c3ca:	2900      	cmp	r1, #0
 800c3cc:	6863      	ldr	r3, [r4, #4]
 800c3ce:	dd0c      	ble.n	800c3ea <_printf_float+0x19e>
 800c3d0:	6121      	str	r1, [r4, #16]
 800c3d2:	b913      	cbnz	r3, 800c3da <_printf_float+0x18e>
 800c3d4:	6822      	ldr	r2, [r4, #0]
 800c3d6:	07d2      	lsls	r2, r2, #31
 800c3d8:	d502      	bpl.n	800c3e0 <_printf_float+0x194>
 800c3da:	3301      	adds	r3, #1
 800c3dc:	440b      	add	r3, r1
 800c3de:	6123      	str	r3, [r4, #16]
 800c3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3e2:	65a3      	str	r3, [r4, #88]	; 0x58
 800c3e4:	f04f 0900 	mov.w	r9, #0
 800c3e8:	e7d9      	b.n	800c39e <_printf_float+0x152>
 800c3ea:	b913      	cbnz	r3, 800c3f2 <_printf_float+0x1a6>
 800c3ec:	6822      	ldr	r2, [r4, #0]
 800c3ee:	07d0      	lsls	r0, r2, #31
 800c3f0:	d501      	bpl.n	800c3f6 <_printf_float+0x1aa>
 800c3f2:	3302      	adds	r3, #2
 800c3f4:	e7f3      	b.n	800c3de <_printf_float+0x192>
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e7f1      	b.n	800c3de <_printf_float+0x192>
 800c3fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c3fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c402:	4293      	cmp	r3, r2
 800c404:	db05      	blt.n	800c412 <_printf_float+0x1c6>
 800c406:	6822      	ldr	r2, [r4, #0]
 800c408:	6123      	str	r3, [r4, #16]
 800c40a:	07d1      	lsls	r1, r2, #31
 800c40c:	d5e8      	bpl.n	800c3e0 <_printf_float+0x194>
 800c40e:	3301      	adds	r3, #1
 800c410:	e7e5      	b.n	800c3de <_printf_float+0x192>
 800c412:	2b00      	cmp	r3, #0
 800c414:	bfd4      	ite	le
 800c416:	f1c3 0302 	rsble	r3, r3, #2
 800c41a:	2301      	movgt	r3, #1
 800c41c:	4413      	add	r3, r2
 800c41e:	e7de      	b.n	800c3de <_printf_float+0x192>
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	055a      	lsls	r2, r3, #21
 800c424:	d407      	bmi.n	800c436 <_printf_float+0x1ea>
 800c426:	6923      	ldr	r3, [r4, #16]
 800c428:	4642      	mov	r2, r8
 800c42a:	4631      	mov	r1, r6
 800c42c:	4628      	mov	r0, r5
 800c42e:	47b8      	blx	r7
 800c430:	3001      	adds	r0, #1
 800c432:	d12b      	bne.n	800c48c <_printf_float+0x240>
 800c434:	e767      	b.n	800c306 <_printf_float+0xba>
 800c436:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c43a:	f240 80dc 	bls.w	800c5f6 <_printf_float+0x3aa>
 800c43e:	2200      	movs	r2, #0
 800c440:	2300      	movs	r3, #0
 800c442:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c446:	f7f4 fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d033      	beq.n	800c4b6 <_printf_float+0x26a>
 800c44e:	2301      	movs	r3, #1
 800c450:	4a41      	ldr	r2, [pc, #260]	; (800c558 <_printf_float+0x30c>)
 800c452:	4631      	mov	r1, r6
 800c454:	4628      	mov	r0, r5
 800c456:	47b8      	blx	r7
 800c458:	3001      	adds	r0, #1
 800c45a:	f43f af54 	beq.w	800c306 <_printf_float+0xba>
 800c45e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c462:	429a      	cmp	r2, r3
 800c464:	db02      	blt.n	800c46c <_printf_float+0x220>
 800c466:	6823      	ldr	r3, [r4, #0]
 800c468:	07d8      	lsls	r0, r3, #31
 800c46a:	d50f      	bpl.n	800c48c <_printf_float+0x240>
 800c46c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c470:	4631      	mov	r1, r6
 800c472:	4628      	mov	r0, r5
 800c474:	47b8      	blx	r7
 800c476:	3001      	adds	r0, #1
 800c478:	f43f af45 	beq.w	800c306 <_printf_float+0xba>
 800c47c:	f04f 0800 	mov.w	r8, #0
 800c480:	f104 091a 	add.w	r9, r4, #26
 800c484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c486:	3b01      	subs	r3, #1
 800c488:	4543      	cmp	r3, r8
 800c48a:	dc09      	bgt.n	800c4a0 <_printf_float+0x254>
 800c48c:	6823      	ldr	r3, [r4, #0]
 800c48e:	079b      	lsls	r3, r3, #30
 800c490:	f100 8103 	bmi.w	800c69a <_printf_float+0x44e>
 800c494:	68e0      	ldr	r0, [r4, #12]
 800c496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c498:	4298      	cmp	r0, r3
 800c49a:	bfb8      	it	lt
 800c49c:	4618      	movlt	r0, r3
 800c49e:	e734      	b.n	800c30a <_printf_float+0xbe>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	464a      	mov	r2, r9
 800c4a4:	4631      	mov	r1, r6
 800c4a6:	4628      	mov	r0, r5
 800c4a8:	47b8      	blx	r7
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	f43f af2b 	beq.w	800c306 <_printf_float+0xba>
 800c4b0:	f108 0801 	add.w	r8, r8, #1
 800c4b4:	e7e6      	b.n	800c484 <_printf_float+0x238>
 800c4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dc2b      	bgt.n	800c514 <_printf_float+0x2c8>
 800c4bc:	2301      	movs	r3, #1
 800c4be:	4a26      	ldr	r2, [pc, #152]	; (800c558 <_printf_float+0x30c>)
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	47b8      	blx	r7
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	f43f af1d 	beq.w	800c306 <_printf_float+0xba>
 800c4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ce:	b923      	cbnz	r3, 800c4da <_printf_float+0x28e>
 800c4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4d2:	b913      	cbnz	r3, 800c4da <_printf_float+0x28e>
 800c4d4:	6823      	ldr	r3, [r4, #0]
 800c4d6:	07d9      	lsls	r1, r3, #31
 800c4d8:	d5d8      	bpl.n	800c48c <_printf_float+0x240>
 800c4da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4de:	4631      	mov	r1, r6
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	47b8      	blx	r7
 800c4e4:	3001      	adds	r0, #1
 800c4e6:	f43f af0e 	beq.w	800c306 <_printf_float+0xba>
 800c4ea:	f04f 0900 	mov.w	r9, #0
 800c4ee:	f104 0a1a 	add.w	sl, r4, #26
 800c4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f4:	425b      	negs	r3, r3
 800c4f6:	454b      	cmp	r3, r9
 800c4f8:	dc01      	bgt.n	800c4fe <_printf_float+0x2b2>
 800c4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4fc:	e794      	b.n	800c428 <_printf_float+0x1dc>
 800c4fe:	2301      	movs	r3, #1
 800c500:	4652      	mov	r2, sl
 800c502:	4631      	mov	r1, r6
 800c504:	4628      	mov	r0, r5
 800c506:	47b8      	blx	r7
 800c508:	3001      	adds	r0, #1
 800c50a:	f43f aefc 	beq.w	800c306 <_printf_float+0xba>
 800c50e:	f109 0901 	add.w	r9, r9, #1
 800c512:	e7ee      	b.n	800c4f2 <_printf_float+0x2a6>
 800c514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c518:	429a      	cmp	r2, r3
 800c51a:	bfa8      	it	ge
 800c51c:	461a      	movge	r2, r3
 800c51e:	2a00      	cmp	r2, #0
 800c520:	4691      	mov	r9, r2
 800c522:	dd07      	ble.n	800c534 <_printf_float+0x2e8>
 800c524:	4613      	mov	r3, r2
 800c526:	4631      	mov	r1, r6
 800c528:	4642      	mov	r2, r8
 800c52a:	4628      	mov	r0, r5
 800c52c:	47b8      	blx	r7
 800c52e:	3001      	adds	r0, #1
 800c530:	f43f aee9 	beq.w	800c306 <_printf_float+0xba>
 800c534:	f104 031a 	add.w	r3, r4, #26
 800c538:	f04f 0b00 	mov.w	fp, #0
 800c53c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c540:	9306      	str	r3, [sp, #24]
 800c542:	e015      	b.n	800c570 <_printf_float+0x324>
 800c544:	7fefffff 	.word	0x7fefffff
 800c548:	0800fa7a 	.word	0x0800fa7a
 800c54c:	0800f7bc 	.word	0x0800f7bc
 800c550:	0800f7c4 	.word	0x0800f7c4
 800c554:	0800f7c0 	.word	0x0800f7c0
 800c558:	0800f7c8 	.word	0x0800f7c8
 800c55c:	2301      	movs	r3, #1
 800c55e:	9a06      	ldr	r2, [sp, #24]
 800c560:	4631      	mov	r1, r6
 800c562:	4628      	mov	r0, r5
 800c564:	47b8      	blx	r7
 800c566:	3001      	adds	r0, #1
 800c568:	f43f aecd 	beq.w	800c306 <_printf_float+0xba>
 800c56c:	f10b 0b01 	add.w	fp, fp, #1
 800c570:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c574:	ebaa 0309 	sub.w	r3, sl, r9
 800c578:	455b      	cmp	r3, fp
 800c57a:	dcef      	bgt.n	800c55c <_printf_float+0x310>
 800c57c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c580:	429a      	cmp	r2, r3
 800c582:	44d0      	add	r8, sl
 800c584:	db15      	blt.n	800c5b2 <_printf_float+0x366>
 800c586:	6823      	ldr	r3, [r4, #0]
 800c588:	07da      	lsls	r2, r3, #31
 800c58a:	d412      	bmi.n	800c5b2 <_printf_float+0x366>
 800c58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c58e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c590:	eba3 020a 	sub.w	r2, r3, sl
 800c594:	eba3 0a01 	sub.w	sl, r3, r1
 800c598:	4592      	cmp	sl, r2
 800c59a:	bfa8      	it	ge
 800c59c:	4692      	movge	sl, r2
 800c59e:	f1ba 0f00 	cmp.w	sl, #0
 800c5a2:	dc0e      	bgt.n	800c5c2 <_printf_float+0x376>
 800c5a4:	f04f 0800 	mov.w	r8, #0
 800c5a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c5ac:	f104 091a 	add.w	r9, r4, #26
 800c5b0:	e019      	b.n	800c5e6 <_printf_float+0x39a>
 800c5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b8      	blx	r7
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d1e5      	bne.n	800c58c <_printf_float+0x340>
 800c5c0:	e6a1      	b.n	800c306 <_printf_float+0xba>
 800c5c2:	4653      	mov	r3, sl
 800c5c4:	4642      	mov	r2, r8
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	4628      	mov	r0, r5
 800c5ca:	47b8      	blx	r7
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d1e9      	bne.n	800c5a4 <_printf_float+0x358>
 800c5d0:	e699      	b.n	800c306 <_printf_float+0xba>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	464a      	mov	r2, r9
 800c5d6:	4631      	mov	r1, r6
 800c5d8:	4628      	mov	r0, r5
 800c5da:	47b8      	blx	r7
 800c5dc:	3001      	adds	r0, #1
 800c5de:	f43f ae92 	beq.w	800c306 <_printf_float+0xba>
 800c5e2:	f108 0801 	add.w	r8, r8, #1
 800c5e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	eba3 030a 	sub.w	r3, r3, sl
 800c5f0:	4543      	cmp	r3, r8
 800c5f2:	dcee      	bgt.n	800c5d2 <_printf_float+0x386>
 800c5f4:	e74a      	b.n	800c48c <_printf_float+0x240>
 800c5f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f8:	2a01      	cmp	r2, #1
 800c5fa:	dc01      	bgt.n	800c600 <_printf_float+0x3b4>
 800c5fc:	07db      	lsls	r3, r3, #31
 800c5fe:	d53a      	bpl.n	800c676 <_printf_float+0x42a>
 800c600:	2301      	movs	r3, #1
 800c602:	4642      	mov	r2, r8
 800c604:	4631      	mov	r1, r6
 800c606:	4628      	mov	r0, r5
 800c608:	47b8      	blx	r7
 800c60a:	3001      	adds	r0, #1
 800c60c:	f43f ae7b 	beq.w	800c306 <_printf_float+0xba>
 800c610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	f108 0801 	add.w	r8, r8, #1
 800c620:	f43f ae71 	beq.w	800c306 <_printf_float+0xba>
 800c624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c626:	2200      	movs	r2, #0
 800c628:	f103 3aff 	add.w	sl, r3, #4294967295
 800c62c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c630:	2300      	movs	r3, #0
 800c632:	f7f4 fa49 	bl	8000ac8 <__aeabi_dcmpeq>
 800c636:	b9c8      	cbnz	r0, 800c66c <_printf_float+0x420>
 800c638:	4653      	mov	r3, sl
 800c63a:	4642      	mov	r2, r8
 800c63c:	4631      	mov	r1, r6
 800c63e:	4628      	mov	r0, r5
 800c640:	47b8      	blx	r7
 800c642:	3001      	adds	r0, #1
 800c644:	d10e      	bne.n	800c664 <_printf_float+0x418>
 800c646:	e65e      	b.n	800c306 <_printf_float+0xba>
 800c648:	2301      	movs	r3, #1
 800c64a:	4652      	mov	r2, sl
 800c64c:	4631      	mov	r1, r6
 800c64e:	4628      	mov	r0, r5
 800c650:	47b8      	blx	r7
 800c652:	3001      	adds	r0, #1
 800c654:	f43f ae57 	beq.w	800c306 <_printf_float+0xba>
 800c658:	f108 0801 	add.w	r8, r8, #1
 800c65c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c65e:	3b01      	subs	r3, #1
 800c660:	4543      	cmp	r3, r8
 800c662:	dcf1      	bgt.n	800c648 <_printf_float+0x3fc>
 800c664:	464b      	mov	r3, r9
 800c666:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c66a:	e6de      	b.n	800c42a <_printf_float+0x1de>
 800c66c:	f04f 0800 	mov.w	r8, #0
 800c670:	f104 0a1a 	add.w	sl, r4, #26
 800c674:	e7f2      	b.n	800c65c <_printf_float+0x410>
 800c676:	2301      	movs	r3, #1
 800c678:	e7df      	b.n	800c63a <_printf_float+0x3ee>
 800c67a:	2301      	movs	r3, #1
 800c67c:	464a      	mov	r2, r9
 800c67e:	4631      	mov	r1, r6
 800c680:	4628      	mov	r0, r5
 800c682:	47b8      	blx	r7
 800c684:	3001      	adds	r0, #1
 800c686:	f43f ae3e 	beq.w	800c306 <_printf_float+0xba>
 800c68a:	f108 0801 	add.w	r8, r8, #1
 800c68e:	68e3      	ldr	r3, [r4, #12]
 800c690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	4543      	cmp	r3, r8
 800c696:	dcf0      	bgt.n	800c67a <_printf_float+0x42e>
 800c698:	e6fc      	b.n	800c494 <_printf_float+0x248>
 800c69a:	f04f 0800 	mov.w	r8, #0
 800c69e:	f104 0919 	add.w	r9, r4, #25
 800c6a2:	e7f4      	b.n	800c68e <_printf_float+0x442>
 800c6a4:	2900      	cmp	r1, #0
 800c6a6:	f43f ae8b 	beq.w	800c3c0 <_printf_float+0x174>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c6b0:	ab09      	add	r3, sp, #36	; 0x24
 800c6b2:	9300      	str	r3, [sp, #0]
 800c6b4:	ec49 8b10 	vmov	d0, r8, r9
 800c6b8:	6022      	str	r2, [r4, #0]
 800c6ba:	f8cd a004 	str.w	sl, [sp, #4]
 800c6be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f7ff fd2e 	bl	800c124 <__cvt>
 800c6c8:	4680      	mov	r8, r0
 800c6ca:	e648      	b.n	800c35e <_printf_float+0x112>

0800c6cc <_printf_common>:
 800c6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	4691      	mov	r9, r2
 800c6d2:	461f      	mov	r7, r3
 800c6d4:	688a      	ldr	r2, [r1, #8]
 800c6d6:	690b      	ldr	r3, [r1, #16]
 800c6d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	bfb8      	it	lt
 800c6e0:	4613      	movlt	r3, r2
 800c6e2:	f8c9 3000 	str.w	r3, [r9]
 800c6e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	b112      	cbz	r2, 800c6f6 <_printf_common+0x2a>
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	f8c9 3000 	str.w	r3, [r9]
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	0699      	lsls	r1, r3, #26
 800c6fa:	bf42      	ittt	mi
 800c6fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c700:	3302      	addmi	r3, #2
 800c702:	f8c9 3000 	strmi.w	r3, [r9]
 800c706:	6825      	ldr	r5, [r4, #0]
 800c708:	f015 0506 	ands.w	r5, r5, #6
 800c70c:	d107      	bne.n	800c71e <_printf_common+0x52>
 800c70e:	f104 0a19 	add.w	sl, r4, #25
 800c712:	68e3      	ldr	r3, [r4, #12]
 800c714:	f8d9 2000 	ldr.w	r2, [r9]
 800c718:	1a9b      	subs	r3, r3, r2
 800c71a:	42ab      	cmp	r3, r5
 800c71c:	dc28      	bgt.n	800c770 <_printf_common+0xa4>
 800c71e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c722:	6822      	ldr	r2, [r4, #0]
 800c724:	3300      	adds	r3, #0
 800c726:	bf18      	it	ne
 800c728:	2301      	movne	r3, #1
 800c72a:	0692      	lsls	r2, r2, #26
 800c72c:	d42d      	bmi.n	800c78a <_printf_common+0xbe>
 800c72e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c732:	4639      	mov	r1, r7
 800c734:	4630      	mov	r0, r6
 800c736:	47c0      	blx	r8
 800c738:	3001      	adds	r0, #1
 800c73a:	d020      	beq.n	800c77e <_printf_common+0xb2>
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	68e5      	ldr	r5, [r4, #12]
 800c740:	f8d9 2000 	ldr.w	r2, [r9]
 800c744:	f003 0306 	and.w	r3, r3, #6
 800c748:	2b04      	cmp	r3, #4
 800c74a:	bf08      	it	eq
 800c74c:	1aad      	subeq	r5, r5, r2
 800c74e:	68a3      	ldr	r3, [r4, #8]
 800c750:	6922      	ldr	r2, [r4, #16]
 800c752:	bf0c      	ite	eq
 800c754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c758:	2500      	movne	r5, #0
 800c75a:	4293      	cmp	r3, r2
 800c75c:	bfc4      	itt	gt
 800c75e:	1a9b      	subgt	r3, r3, r2
 800c760:	18ed      	addgt	r5, r5, r3
 800c762:	f04f 0900 	mov.w	r9, #0
 800c766:	341a      	adds	r4, #26
 800c768:	454d      	cmp	r5, r9
 800c76a:	d11a      	bne.n	800c7a2 <_printf_common+0xd6>
 800c76c:	2000      	movs	r0, #0
 800c76e:	e008      	b.n	800c782 <_printf_common+0xb6>
 800c770:	2301      	movs	r3, #1
 800c772:	4652      	mov	r2, sl
 800c774:	4639      	mov	r1, r7
 800c776:	4630      	mov	r0, r6
 800c778:	47c0      	blx	r8
 800c77a:	3001      	adds	r0, #1
 800c77c:	d103      	bne.n	800c786 <_printf_common+0xba>
 800c77e:	f04f 30ff 	mov.w	r0, #4294967295
 800c782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c786:	3501      	adds	r5, #1
 800c788:	e7c3      	b.n	800c712 <_printf_common+0x46>
 800c78a:	18e1      	adds	r1, r4, r3
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	2030      	movs	r0, #48	; 0x30
 800c790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c794:	4422      	add	r2, r4
 800c796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c79a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c79e:	3302      	adds	r3, #2
 800c7a0:	e7c5      	b.n	800c72e <_printf_common+0x62>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4622      	mov	r2, r4
 800c7a6:	4639      	mov	r1, r7
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	47c0      	blx	r8
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d0e6      	beq.n	800c77e <_printf_common+0xb2>
 800c7b0:	f109 0901 	add.w	r9, r9, #1
 800c7b4:	e7d8      	b.n	800c768 <_printf_common+0x9c>
	...

0800c7b8 <_printf_i>:
 800c7b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c7c0:	460c      	mov	r4, r1
 800c7c2:	7e09      	ldrb	r1, [r1, #24]
 800c7c4:	b085      	sub	sp, #20
 800c7c6:	296e      	cmp	r1, #110	; 0x6e
 800c7c8:	4617      	mov	r7, r2
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	4698      	mov	r8, r3
 800c7ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7d0:	f000 80b3 	beq.w	800c93a <_printf_i+0x182>
 800c7d4:	d822      	bhi.n	800c81c <_printf_i+0x64>
 800c7d6:	2963      	cmp	r1, #99	; 0x63
 800c7d8:	d036      	beq.n	800c848 <_printf_i+0x90>
 800c7da:	d80a      	bhi.n	800c7f2 <_printf_i+0x3a>
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	f000 80b9 	beq.w	800c954 <_printf_i+0x19c>
 800c7e2:	2958      	cmp	r1, #88	; 0x58
 800c7e4:	f000 8083 	beq.w	800c8ee <_printf_i+0x136>
 800c7e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c7f0:	e032      	b.n	800c858 <_printf_i+0xa0>
 800c7f2:	2964      	cmp	r1, #100	; 0x64
 800c7f4:	d001      	beq.n	800c7fa <_printf_i+0x42>
 800c7f6:	2969      	cmp	r1, #105	; 0x69
 800c7f8:	d1f6      	bne.n	800c7e8 <_printf_i+0x30>
 800c7fa:	6820      	ldr	r0, [r4, #0]
 800c7fc:	6813      	ldr	r3, [r2, #0]
 800c7fe:	0605      	lsls	r5, r0, #24
 800c800:	f103 0104 	add.w	r1, r3, #4
 800c804:	d52a      	bpl.n	800c85c <_printf_i+0xa4>
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	6011      	str	r1, [r2, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	da03      	bge.n	800c816 <_printf_i+0x5e>
 800c80e:	222d      	movs	r2, #45	; 0x2d
 800c810:	425b      	negs	r3, r3
 800c812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c816:	486f      	ldr	r0, [pc, #444]	; (800c9d4 <_printf_i+0x21c>)
 800c818:	220a      	movs	r2, #10
 800c81a:	e039      	b.n	800c890 <_printf_i+0xd8>
 800c81c:	2973      	cmp	r1, #115	; 0x73
 800c81e:	f000 809d 	beq.w	800c95c <_printf_i+0x1a4>
 800c822:	d808      	bhi.n	800c836 <_printf_i+0x7e>
 800c824:	296f      	cmp	r1, #111	; 0x6f
 800c826:	d020      	beq.n	800c86a <_printf_i+0xb2>
 800c828:	2970      	cmp	r1, #112	; 0x70
 800c82a:	d1dd      	bne.n	800c7e8 <_printf_i+0x30>
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	f043 0320 	orr.w	r3, r3, #32
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	e003      	b.n	800c83e <_printf_i+0x86>
 800c836:	2975      	cmp	r1, #117	; 0x75
 800c838:	d017      	beq.n	800c86a <_printf_i+0xb2>
 800c83a:	2978      	cmp	r1, #120	; 0x78
 800c83c:	d1d4      	bne.n	800c7e8 <_printf_i+0x30>
 800c83e:	2378      	movs	r3, #120	; 0x78
 800c840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c844:	4864      	ldr	r0, [pc, #400]	; (800c9d8 <_printf_i+0x220>)
 800c846:	e055      	b.n	800c8f4 <_printf_i+0x13c>
 800c848:	6813      	ldr	r3, [r2, #0]
 800c84a:	1d19      	adds	r1, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6011      	str	r1, [r2, #0]
 800c850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c858:	2301      	movs	r3, #1
 800c85a:	e08c      	b.n	800c976 <_printf_i+0x1be>
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6011      	str	r1, [r2, #0]
 800c860:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c864:	bf18      	it	ne
 800c866:	b21b      	sxthne	r3, r3
 800c868:	e7cf      	b.n	800c80a <_printf_i+0x52>
 800c86a:	6813      	ldr	r3, [r2, #0]
 800c86c:	6825      	ldr	r5, [r4, #0]
 800c86e:	1d18      	adds	r0, r3, #4
 800c870:	6010      	str	r0, [r2, #0]
 800c872:	0628      	lsls	r0, r5, #24
 800c874:	d501      	bpl.n	800c87a <_printf_i+0xc2>
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	e002      	b.n	800c880 <_printf_i+0xc8>
 800c87a:	0668      	lsls	r0, r5, #25
 800c87c:	d5fb      	bpl.n	800c876 <_printf_i+0xbe>
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	4854      	ldr	r0, [pc, #336]	; (800c9d4 <_printf_i+0x21c>)
 800c882:	296f      	cmp	r1, #111	; 0x6f
 800c884:	bf14      	ite	ne
 800c886:	220a      	movne	r2, #10
 800c888:	2208      	moveq	r2, #8
 800c88a:	2100      	movs	r1, #0
 800c88c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c890:	6865      	ldr	r5, [r4, #4]
 800c892:	60a5      	str	r5, [r4, #8]
 800c894:	2d00      	cmp	r5, #0
 800c896:	f2c0 8095 	blt.w	800c9c4 <_printf_i+0x20c>
 800c89a:	6821      	ldr	r1, [r4, #0]
 800c89c:	f021 0104 	bic.w	r1, r1, #4
 800c8a0:	6021      	str	r1, [r4, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d13d      	bne.n	800c922 <_printf_i+0x16a>
 800c8a6:	2d00      	cmp	r5, #0
 800c8a8:	f040 808e 	bne.w	800c9c8 <_printf_i+0x210>
 800c8ac:	4665      	mov	r5, ip
 800c8ae:	2a08      	cmp	r2, #8
 800c8b0:	d10b      	bne.n	800c8ca <_printf_i+0x112>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	07db      	lsls	r3, r3, #31
 800c8b6:	d508      	bpl.n	800c8ca <_printf_i+0x112>
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	6862      	ldr	r2, [r4, #4]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	bfde      	ittt	le
 800c8c0:	2330      	movle	r3, #48	; 0x30
 800c8c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c8c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c8ca:	ebac 0305 	sub.w	r3, ip, r5
 800c8ce:	6123      	str	r3, [r4, #16]
 800c8d0:	f8cd 8000 	str.w	r8, [sp]
 800c8d4:	463b      	mov	r3, r7
 800c8d6:	aa03      	add	r2, sp, #12
 800c8d8:	4621      	mov	r1, r4
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff fef6 	bl	800c6cc <_printf_common>
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d14d      	bne.n	800c980 <_printf_i+0x1c8>
 800c8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e8:	b005      	add	sp, #20
 800c8ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ee:	4839      	ldr	r0, [pc, #228]	; (800c9d4 <_printf_i+0x21c>)
 800c8f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c8f4:	6813      	ldr	r3, [r2, #0]
 800c8f6:	6821      	ldr	r1, [r4, #0]
 800c8f8:	1d1d      	adds	r5, r3, #4
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6015      	str	r5, [r2, #0]
 800c8fe:	060a      	lsls	r2, r1, #24
 800c900:	d50b      	bpl.n	800c91a <_printf_i+0x162>
 800c902:	07ca      	lsls	r2, r1, #31
 800c904:	bf44      	itt	mi
 800c906:	f041 0120 	orrmi.w	r1, r1, #32
 800c90a:	6021      	strmi	r1, [r4, #0]
 800c90c:	b91b      	cbnz	r3, 800c916 <_printf_i+0x15e>
 800c90e:	6822      	ldr	r2, [r4, #0]
 800c910:	f022 0220 	bic.w	r2, r2, #32
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	2210      	movs	r2, #16
 800c918:	e7b7      	b.n	800c88a <_printf_i+0xd2>
 800c91a:	064d      	lsls	r5, r1, #25
 800c91c:	bf48      	it	mi
 800c91e:	b29b      	uxthmi	r3, r3
 800c920:	e7ef      	b.n	800c902 <_printf_i+0x14a>
 800c922:	4665      	mov	r5, ip
 800c924:	fbb3 f1f2 	udiv	r1, r3, r2
 800c928:	fb02 3311 	mls	r3, r2, r1, r3
 800c92c:	5cc3      	ldrb	r3, [r0, r3]
 800c92e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c932:	460b      	mov	r3, r1
 800c934:	2900      	cmp	r1, #0
 800c936:	d1f5      	bne.n	800c924 <_printf_i+0x16c>
 800c938:	e7b9      	b.n	800c8ae <_printf_i+0xf6>
 800c93a:	6813      	ldr	r3, [r2, #0]
 800c93c:	6825      	ldr	r5, [r4, #0]
 800c93e:	6961      	ldr	r1, [r4, #20]
 800c940:	1d18      	adds	r0, r3, #4
 800c942:	6010      	str	r0, [r2, #0]
 800c944:	0628      	lsls	r0, r5, #24
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	d501      	bpl.n	800c94e <_printf_i+0x196>
 800c94a:	6019      	str	r1, [r3, #0]
 800c94c:	e002      	b.n	800c954 <_printf_i+0x19c>
 800c94e:	066a      	lsls	r2, r5, #25
 800c950:	d5fb      	bpl.n	800c94a <_printf_i+0x192>
 800c952:	8019      	strh	r1, [r3, #0]
 800c954:	2300      	movs	r3, #0
 800c956:	6123      	str	r3, [r4, #16]
 800c958:	4665      	mov	r5, ip
 800c95a:	e7b9      	b.n	800c8d0 <_printf_i+0x118>
 800c95c:	6813      	ldr	r3, [r2, #0]
 800c95e:	1d19      	adds	r1, r3, #4
 800c960:	6011      	str	r1, [r2, #0]
 800c962:	681d      	ldr	r5, [r3, #0]
 800c964:	6862      	ldr	r2, [r4, #4]
 800c966:	2100      	movs	r1, #0
 800c968:	4628      	mov	r0, r5
 800c96a:	f7f3 fc39 	bl	80001e0 <memchr>
 800c96e:	b108      	cbz	r0, 800c974 <_printf_i+0x1bc>
 800c970:	1b40      	subs	r0, r0, r5
 800c972:	6060      	str	r0, [r4, #4]
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	6123      	str	r3, [r4, #16]
 800c978:	2300      	movs	r3, #0
 800c97a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c97e:	e7a7      	b.n	800c8d0 <_printf_i+0x118>
 800c980:	6923      	ldr	r3, [r4, #16]
 800c982:	462a      	mov	r2, r5
 800c984:	4639      	mov	r1, r7
 800c986:	4630      	mov	r0, r6
 800c988:	47c0      	blx	r8
 800c98a:	3001      	adds	r0, #1
 800c98c:	d0aa      	beq.n	800c8e4 <_printf_i+0x12c>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	079b      	lsls	r3, r3, #30
 800c992:	d413      	bmi.n	800c9bc <_printf_i+0x204>
 800c994:	68e0      	ldr	r0, [r4, #12]
 800c996:	9b03      	ldr	r3, [sp, #12]
 800c998:	4298      	cmp	r0, r3
 800c99a:	bfb8      	it	lt
 800c99c:	4618      	movlt	r0, r3
 800c99e:	e7a3      	b.n	800c8e8 <_printf_i+0x130>
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	464a      	mov	r2, r9
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	47c0      	blx	r8
 800c9aa:	3001      	adds	r0, #1
 800c9ac:	d09a      	beq.n	800c8e4 <_printf_i+0x12c>
 800c9ae:	3501      	adds	r5, #1
 800c9b0:	68e3      	ldr	r3, [r4, #12]
 800c9b2:	9a03      	ldr	r2, [sp, #12]
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	42ab      	cmp	r3, r5
 800c9b8:	dcf2      	bgt.n	800c9a0 <_printf_i+0x1e8>
 800c9ba:	e7eb      	b.n	800c994 <_printf_i+0x1dc>
 800c9bc:	2500      	movs	r5, #0
 800c9be:	f104 0919 	add.w	r9, r4, #25
 800c9c2:	e7f5      	b.n	800c9b0 <_printf_i+0x1f8>
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1ac      	bne.n	800c922 <_printf_i+0x16a>
 800c9c8:	7803      	ldrb	r3, [r0, #0]
 800c9ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9d2:	e76c      	b.n	800c8ae <_printf_i+0xf6>
 800c9d4:	0800f7ca 	.word	0x0800f7ca
 800c9d8:	0800f7db 	.word	0x0800f7db

0800c9dc <iprintf>:
 800c9dc:	b40f      	push	{r0, r1, r2, r3}
 800c9de:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <iprintf+0x2c>)
 800c9e0:	b513      	push	{r0, r1, r4, lr}
 800c9e2:	681c      	ldr	r4, [r3, #0]
 800c9e4:	b124      	cbz	r4, 800c9f0 <iprintf+0x14>
 800c9e6:	69a3      	ldr	r3, [r4, #24]
 800c9e8:	b913      	cbnz	r3, 800c9f0 <iprintf+0x14>
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f001 f914 	bl	800dc18 <__sinit>
 800c9f0:	ab05      	add	r3, sp, #20
 800c9f2:	9a04      	ldr	r2, [sp, #16]
 800c9f4:	68a1      	ldr	r1, [r4, #8]
 800c9f6:	9301      	str	r3, [sp, #4]
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f001 fdcd 	bl	800e598 <_vfiprintf_r>
 800c9fe:	b002      	add	sp, #8
 800ca00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca04:	b004      	add	sp, #16
 800ca06:	4770      	bx	lr
 800ca08:	20001560 	.word	0x20001560

0800ca0c <_puts_r>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	460e      	mov	r6, r1
 800ca10:	4605      	mov	r5, r0
 800ca12:	b118      	cbz	r0, 800ca1c <_puts_r+0x10>
 800ca14:	6983      	ldr	r3, [r0, #24]
 800ca16:	b90b      	cbnz	r3, 800ca1c <_puts_r+0x10>
 800ca18:	f001 f8fe 	bl	800dc18 <__sinit>
 800ca1c:	69ab      	ldr	r3, [r5, #24]
 800ca1e:	68ac      	ldr	r4, [r5, #8]
 800ca20:	b913      	cbnz	r3, 800ca28 <_puts_r+0x1c>
 800ca22:	4628      	mov	r0, r5
 800ca24:	f001 f8f8 	bl	800dc18 <__sinit>
 800ca28:	4b23      	ldr	r3, [pc, #140]	; (800cab8 <_puts_r+0xac>)
 800ca2a:	429c      	cmp	r4, r3
 800ca2c:	d117      	bne.n	800ca5e <_puts_r+0x52>
 800ca2e:	686c      	ldr	r4, [r5, #4]
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	071b      	lsls	r3, r3, #28
 800ca34:	d51d      	bpl.n	800ca72 <_puts_r+0x66>
 800ca36:	6923      	ldr	r3, [r4, #16]
 800ca38:	b1db      	cbz	r3, 800ca72 <_puts_r+0x66>
 800ca3a:	3e01      	subs	r6, #1
 800ca3c:	68a3      	ldr	r3, [r4, #8]
 800ca3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ca42:	3b01      	subs	r3, #1
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	b9e9      	cbnz	r1, 800ca84 <_puts_r+0x78>
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	da2e      	bge.n	800caaa <_puts_r+0x9e>
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	210a      	movs	r1, #10
 800ca50:	4628      	mov	r0, r5
 800ca52:	f000 f8ed 	bl	800cc30 <__swbuf_r>
 800ca56:	3001      	adds	r0, #1
 800ca58:	d011      	beq.n	800ca7e <_puts_r+0x72>
 800ca5a:	200a      	movs	r0, #10
 800ca5c:	e011      	b.n	800ca82 <_puts_r+0x76>
 800ca5e:	4b17      	ldr	r3, [pc, #92]	; (800cabc <_puts_r+0xb0>)
 800ca60:	429c      	cmp	r4, r3
 800ca62:	d101      	bne.n	800ca68 <_puts_r+0x5c>
 800ca64:	68ac      	ldr	r4, [r5, #8]
 800ca66:	e7e3      	b.n	800ca30 <_puts_r+0x24>
 800ca68:	4b15      	ldr	r3, [pc, #84]	; (800cac0 <_puts_r+0xb4>)
 800ca6a:	429c      	cmp	r4, r3
 800ca6c:	bf08      	it	eq
 800ca6e:	68ec      	ldreq	r4, [r5, #12]
 800ca70:	e7de      	b.n	800ca30 <_puts_r+0x24>
 800ca72:	4621      	mov	r1, r4
 800ca74:	4628      	mov	r0, r5
 800ca76:	f000 f92d 	bl	800ccd4 <__swsetup_r>
 800ca7a:	2800      	cmp	r0, #0
 800ca7c:	d0dd      	beq.n	800ca3a <_puts_r+0x2e>
 800ca7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca82:	bd70      	pop	{r4, r5, r6, pc}
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	da04      	bge.n	800ca92 <_puts_r+0x86>
 800ca88:	69a2      	ldr	r2, [r4, #24]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	dc06      	bgt.n	800ca9c <_puts_r+0x90>
 800ca8e:	290a      	cmp	r1, #10
 800ca90:	d004      	beq.n	800ca9c <_puts_r+0x90>
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	6022      	str	r2, [r4, #0]
 800ca98:	7019      	strb	r1, [r3, #0]
 800ca9a:	e7cf      	b.n	800ca3c <_puts_r+0x30>
 800ca9c:	4622      	mov	r2, r4
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f000 f8c6 	bl	800cc30 <__swbuf_r>
 800caa4:	3001      	adds	r0, #1
 800caa6:	d1c9      	bne.n	800ca3c <_puts_r+0x30>
 800caa8:	e7e9      	b.n	800ca7e <_puts_r+0x72>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	200a      	movs	r0, #10
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	6022      	str	r2, [r4, #0]
 800cab2:	7018      	strb	r0, [r3, #0]
 800cab4:	e7e5      	b.n	800ca82 <_puts_r+0x76>
 800cab6:	bf00      	nop
 800cab8:	0800f81c 	.word	0x0800f81c
 800cabc:	0800f83c 	.word	0x0800f83c
 800cac0:	0800f7fc 	.word	0x0800f7fc

0800cac4 <puts>:
 800cac4:	4b02      	ldr	r3, [pc, #8]	; (800cad0 <puts+0xc>)
 800cac6:	4601      	mov	r1, r0
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	f7ff bf9f 	b.w	800ca0c <_puts_r>
 800cace:	bf00      	nop
 800cad0:	20001560 	.word	0x20001560

0800cad4 <setvbuf>:
 800cad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cad8:	461d      	mov	r5, r3
 800cada:	4b51      	ldr	r3, [pc, #324]	; (800cc20 <setvbuf+0x14c>)
 800cadc:	681e      	ldr	r6, [r3, #0]
 800cade:	4604      	mov	r4, r0
 800cae0:	460f      	mov	r7, r1
 800cae2:	4690      	mov	r8, r2
 800cae4:	b126      	cbz	r6, 800caf0 <setvbuf+0x1c>
 800cae6:	69b3      	ldr	r3, [r6, #24]
 800cae8:	b913      	cbnz	r3, 800caf0 <setvbuf+0x1c>
 800caea:	4630      	mov	r0, r6
 800caec:	f001 f894 	bl	800dc18 <__sinit>
 800caf0:	4b4c      	ldr	r3, [pc, #304]	; (800cc24 <setvbuf+0x150>)
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d152      	bne.n	800cb9c <setvbuf+0xc8>
 800caf6:	6874      	ldr	r4, [r6, #4]
 800caf8:	f1b8 0f02 	cmp.w	r8, #2
 800cafc:	d006      	beq.n	800cb0c <setvbuf+0x38>
 800cafe:	f1b8 0f01 	cmp.w	r8, #1
 800cb02:	f200 8089 	bhi.w	800cc18 <setvbuf+0x144>
 800cb06:	2d00      	cmp	r5, #0
 800cb08:	f2c0 8086 	blt.w	800cc18 <setvbuf+0x144>
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f001 f818 	bl	800db44 <_fflush_r>
 800cb14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb16:	b141      	cbz	r1, 800cb2a <setvbuf+0x56>
 800cb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb1c:	4299      	cmp	r1, r3
 800cb1e:	d002      	beq.n	800cb26 <setvbuf+0x52>
 800cb20:	4630      	mov	r0, r6
 800cb22:	f001 fc67 	bl	800e3f4 <_free_r>
 800cb26:	2300      	movs	r3, #0
 800cb28:	6363      	str	r3, [r4, #52]	; 0x34
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	61a3      	str	r3, [r4, #24]
 800cb2e:	6063      	str	r3, [r4, #4]
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	061b      	lsls	r3, r3, #24
 800cb34:	d503      	bpl.n	800cb3e <setvbuf+0x6a>
 800cb36:	6921      	ldr	r1, [r4, #16]
 800cb38:	4630      	mov	r0, r6
 800cb3a:	f001 fc5b 	bl	800e3f4 <_free_r>
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800cb44:	f023 0303 	bic.w	r3, r3, #3
 800cb48:	f1b8 0f02 	cmp.w	r8, #2
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	d05d      	beq.n	800cc0c <setvbuf+0x138>
 800cb50:	ab01      	add	r3, sp, #4
 800cb52:	466a      	mov	r2, sp
 800cb54:	4621      	mov	r1, r4
 800cb56:	4630      	mov	r0, r6
 800cb58:	f001 f8f6 	bl	800dd48 <__swhatbuf_r>
 800cb5c:	89a3      	ldrh	r3, [r4, #12]
 800cb5e:	4318      	orrs	r0, r3
 800cb60:	81a0      	strh	r0, [r4, #12]
 800cb62:	bb2d      	cbnz	r5, 800cbb0 <setvbuf+0xdc>
 800cb64:	9d00      	ldr	r5, [sp, #0]
 800cb66:	4628      	mov	r0, r5
 800cb68:	f001 f952 	bl	800de10 <malloc>
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d14e      	bne.n	800cc10 <setvbuf+0x13c>
 800cb72:	f8dd 9000 	ldr.w	r9, [sp]
 800cb76:	45a9      	cmp	r9, r5
 800cb78:	d13c      	bne.n	800cbf4 <setvbuf+0x120>
 800cb7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	f043 0302 	orr.w	r3, r3, #2
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	2300      	movs	r3, #0
 800cb88:	60a3      	str	r3, [r4, #8]
 800cb8a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	6123      	str	r3, [r4, #16]
 800cb92:	2301      	movs	r3, #1
 800cb94:	6163      	str	r3, [r4, #20]
 800cb96:	b003      	add	sp, #12
 800cb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb9c:	4b22      	ldr	r3, [pc, #136]	; (800cc28 <setvbuf+0x154>)
 800cb9e:	429c      	cmp	r4, r3
 800cba0:	d101      	bne.n	800cba6 <setvbuf+0xd2>
 800cba2:	68b4      	ldr	r4, [r6, #8]
 800cba4:	e7a8      	b.n	800caf8 <setvbuf+0x24>
 800cba6:	4b21      	ldr	r3, [pc, #132]	; (800cc2c <setvbuf+0x158>)
 800cba8:	429c      	cmp	r4, r3
 800cbaa:	bf08      	it	eq
 800cbac:	68f4      	ldreq	r4, [r6, #12]
 800cbae:	e7a3      	b.n	800caf8 <setvbuf+0x24>
 800cbb0:	2f00      	cmp	r7, #0
 800cbb2:	d0d8      	beq.n	800cb66 <setvbuf+0x92>
 800cbb4:	69b3      	ldr	r3, [r6, #24]
 800cbb6:	b913      	cbnz	r3, 800cbbe <setvbuf+0xea>
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f001 f82d 	bl	800dc18 <__sinit>
 800cbbe:	f1b8 0f01 	cmp.w	r8, #1
 800cbc2:	bf08      	it	eq
 800cbc4:	89a3      	ldrheq	r3, [r4, #12]
 800cbc6:	6027      	str	r7, [r4, #0]
 800cbc8:	bf04      	itt	eq
 800cbca:	f043 0301 	orreq.w	r3, r3, #1
 800cbce:	81a3      	strheq	r3, [r4, #12]
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f013 0008 	ands.w	r0, r3, #8
 800cbd6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800cbda:	d01b      	beq.n	800cc14 <setvbuf+0x140>
 800cbdc:	f013 0001 	ands.w	r0, r3, #1
 800cbe0:	bf18      	it	ne
 800cbe2:	426d      	negne	r5, r5
 800cbe4:	f04f 0300 	mov.w	r3, #0
 800cbe8:	bf1d      	ittte	ne
 800cbea:	60a3      	strne	r3, [r4, #8]
 800cbec:	61a5      	strne	r5, [r4, #24]
 800cbee:	4618      	movne	r0, r3
 800cbf0:	60a5      	streq	r5, [r4, #8]
 800cbf2:	e7d0      	b.n	800cb96 <setvbuf+0xc2>
 800cbf4:	4648      	mov	r0, r9
 800cbf6:	f001 f90b 	bl	800de10 <malloc>
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d0bc      	beq.n	800cb7a <setvbuf+0xa6>
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	464d      	mov	r5, r9
 800cc0a:	e7d3      	b.n	800cbb4 <setvbuf+0xe0>
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	e7b6      	b.n	800cb7e <setvbuf+0xaa>
 800cc10:	46a9      	mov	r9, r5
 800cc12:	e7f5      	b.n	800cc00 <setvbuf+0x12c>
 800cc14:	60a0      	str	r0, [r4, #8]
 800cc16:	e7be      	b.n	800cb96 <setvbuf+0xc2>
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1c:	e7bb      	b.n	800cb96 <setvbuf+0xc2>
 800cc1e:	bf00      	nop
 800cc20:	20001560 	.word	0x20001560
 800cc24:	0800f81c 	.word	0x0800f81c
 800cc28:	0800f83c 	.word	0x0800f83c
 800cc2c:	0800f7fc 	.word	0x0800f7fc

0800cc30 <__swbuf_r>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	460e      	mov	r6, r1
 800cc34:	4614      	mov	r4, r2
 800cc36:	4605      	mov	r5, r0
 800cc38:	b118      	cbz	r0, 800cc42 <__swbuf_r+0x12>
 800cc3a:	6983      	ldr	r3, [r0, #24]
 800cc3c:	b90b      	cbnz	r3, 800cc42 <__swbuf_r+0x12>
 800cc3e:	f000 ffeb 	bl	800dc18 <__sinit>
 800cc42:	4b21      	ldr	r3, [pc, #132]	; (800ccc8 <__swbuf_r+0x98>)
 800cc44:	429c      	cmp	r4, r3
 800cc46:	d12a      	bne.n	800cc9e <__swbuf_r+0x6e>
 800cc48:	686c      	ldr	r4, [r5, #4]
 800cc4a:	69a3      	ldr	r3, [r4, #24]
 800cc4c:	60a3      	str	r3, [r4, #8]
 800cc4e:	89a3      	ldrh	r3, [r4, #12]
 800cc50:	071a      	lsls	r2, r3, #28
 800cc52:	d52e      	bpl.n	800ccb2 <__swbuf_r+0x82>
 800cc54:	6923      	ldr	r3, [r4, #16]
 800cc56:	b363      	cbz	r3, 800ccb2 <__swbuf_r+0x82>
 800cc58:	6923      	ldr	r3, [r4, #16]
 800cc5a:	6820      	ldr	r0, [r4, #0]
 800cc5c:	1ac0      	subs	r0, r0, r3
 800cc5e:	6963      	ldr	r3, [r4, #20]
 800cc60:	b2f6      	uxtb	r6, r6
 800cc62:	4283      	cmp	r3, r0
 800cc64:	4637      	mov	r7, r6
 800cc66:	dc04      	bgt.n	800cc72 <__swbuf_r+0x42>
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4628      	mov	r0, r5
 800cc6c:	f000 ff6a 	bl	800db44 <_fflush_r>
 800cc70:	bb28      	cbnz	r0, 800ccbe <__swbuf_r+0x8e>
 800cc72:	68a3      	ldr	r3, [r4, #8]
 800cc74:	3b01      	subs	r3, #1
 800cc76:	60a3      	str	r3, [r4, #8]
 800cc78:	6823      	ldr	r3, [r4, #0]
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	701e      	strb	r6, [r3, #0]
 800cc80:	6963      	ldr	r3, [r4, #20]
 800cc82:	3001      	adds	r0, #1
 800cc84:	4283      	cmp	r3, r0
 800cc86:	d004      	beq.n	800cc92 <__swbuf_r+0x62>
 800cc88:	89a3      	ldrh	r3, [r4, #12]
 800cc8a:	07db      	lsls	r3, r3, #31
 800cc8c:	d519      	bpl.n	800ccc2 <__swbuf_r+0x92>
 800cc8e:	2e0a      	cmp	r6, #10
 800cc90:	d117      	bne.n	800ccc2 <__swbuf_r+0x92>
 800cc92:	4621      	mov	r1, r4
 800cc94:	4628      	mov	r0, r5
 800cc96:	f000 ff55 	bl	800db44 <_fflush_r>
 800cc9a:	b190      	cbz	r0, 800ccc2 <__swbuf_r+0x92>
 800cc9c:	e00f      	b.n	800ccbe <__swbuf_r+0x8e>
 800cc9e:	4b0b      	ldr	r3, [pc, #44]	; (800cccc <__swbuf_r+0x9c>)
 800cca0:	429c      	cmp	r4, r3
 800cca2:	d101      	bne.n	800cca8 <__swbuf_r+0x78>
 800cca4:	68ac      	ldr	r4, [r5, #8]
 800cca6:	e7d0      	b.n	800cc4a <__swbuf_r+0x1a>
 800cca8:	4b09      	ldr	r3, [pc, #36]	; (800ccd0 <__swbuf_r+0xa0>)
 800ccaa:	429c      	cmp	r4, r3
 800ccac:	bf08      	it	eq
 800ccae:	68ec      	ldreq	r4, [r5, #12]
 800ccb0:	e7cb      	b.n	800cc4a <__swbuf_r+0x1a>
 800ccb2:	4621      	mov	r1, r4
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	f000 f80d 	bl	800ccd4 <__swsetup_r>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d0cc      	beq.n	800cc58 <__swbuf_r+0x28>
 800ccbe:	f04f 37ff 	mov.w	r7, #4294967295
 800ccc2:	4638      	mov	r0, r7
 800ccc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	0800f81c 	.word	0x0800f81c
 800cccc:	0800f83c 	.word	0x0800f83c
 800ccd0:	0800f7fc 	.word	0x0800f7fc

0800ccd4 <__swsetup_r>:
 800ccd4:	4b32      	ldr	r3, [pc, #200]	; (800cda0 <__swsetup_r+0xcc>)
 800ccd6:	b570      	push	{r4, r5, r6, lr}
 800ccd8:	681d      	ldr	r5, [r3, #0]
 800ccda:	4606      	mov	r6, r0
 800ccdc:	460c      	mov	r4, r1
 800ccde:	b125      	cbz	r5, 800ccea <__swsetup_r+0x16>
 800cce0:	69ab      	ldr	r3, [r5, #24]
 800cce2:	b913      	cbnz	r3, 800ccea <__swsetup_r+0x16>
 800cce4:	4628      	mov	r0, r5
 800cce6:	f000 ff97 	bl	800dc18 <__sinit>
 800ccea:	4b2e      	ldr	r3, [pc, #184]	; (800cda4 <__swsetup_r+0xd0>)
 800ccec:	429c      	cmp	r4, r3
 800ccee:	d10f      	bne.n	800cd10 <__swsetup_r+0x3c>
 800ccf0:	686c      	ldr	r4, [r5, #4]
 800ccf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	0715      	lsls	r5, r2, #28
 800ccfa:	d42c      	bmi.n	800cd56 <__swsetup_r+0x82>
 800ccfc:	06d0      	lsls	r0, r2, #27
 800ccfe:	d411      	bmi.n	800cd24 <__swsetup_r+0x50>
 800cd00:	2209      	movs	r2, #9
 800cd02:	6032      	str	r2, [r6, #0]
 800cd04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd08:	81a3      	strh	r3, [r4, #12]
 800cd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0e:	e03e      	b.n	800cd8e <__swsetup_r+0xba>
 800cd10:	4b25      	ldr	r3, [pc, #148]	; (800cda8 <__swsetup_r+0xd4>)
 800cd12:	429c      	cmp	r4, r3
 800cd14:	d101      	bne.n	800cd1a <__swsetup_r+0x46>
 800cd16:	68ac      	ldr	r4, [r5, #8]
 800cd18:	e7eb      	b.n	800ccf2 <__swsetup_r+0x1e>
 800cd1a:	4b24      	ldr	r3, [pc, #144]	; (800cdac <__swsetup_r+0xd8>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	bf08      	it	eq
 800cd20:	68ec      	ldreq	r4, [r5, #12]
 800cd22:	e7e6      	b.n	800ccf2 <__swsetup_r+0x1e>
 800cd24:	0751      	lsls	r1, r2, #29
 800cd26:	d512      	bpl.n	800cd4e <__swsetup_r+0x7a>
 800cd28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd2a:	b141      	cbz	r1, 800cd3e <__swsetup_r+0x6a>
 800cd2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd30:	4299      	cmp	r1, r3
 800cd32:	d002      	beq.n	800cd3a <__swsetup_r+0x66>
 800cd34:	4630      	mov	r0, r6
 800cd36:	f001 fb5d 	bl	800e3f4 <_free_r>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd3e:	89a3      	ldrh	r3, [r4, #12]
 800cd40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd44:	81a3      	strh	r3, [r4, #12]
 800cd46:	2300      	movs	r3, #0
 800cd48:	6063      	str	r3, [r4, #4]
 800cd4a:	6923      	ldr	r3, [r4, #16]
 800cd4c:	6023      	str	r3, [r4, #0]
 800cd4e:	89a3      	ldrh	r3, [r4, #12]
 800cd50:	f043 0308 	orr.w	r3, r3, #8
 800cd54:	81a3      	strh	r3, [r4, #12]
 800cd56:	6923      	ldr	r3, [r4, #16]
 800cd58:	b94b      	cbnz	r3, 800cd6e <__swsetup_r+0x9a>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd64:	d003      	beq.n	800cd6e <__swsetup_r+0x9a>
 800cd66:	4621      	mov	r1, r4
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f001 f811 	bl	800dd90 <__smakebuf_r>
 800cd6e:	89a2      	ldrh	r2, [r4, #12]
 800cd70:	f012 0301 	ands.w	r3, r2, #1
 800cd74:	d00c      	beq.n	800cd90 <__swsetup_r+0xbc>
 800cd76:	2300      	movs	r3, #0
 800cd78:	60a3      	str	r3, [r4, #8]
 800cd7a:	6963      	ldr	r3, [r4, #20]
 800cd7c:	425b      	negs	r3, r3
 800cd7e:	61a3      	str	r3, [r4, #24]
 800cd80:	6923      	ldr	r3, [r4, #16]
 800cd82:	b953      	cbnz	r3, 800cd9a <__swsetup_r+0xc6>
 800cd84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cd8c:	d1ba      	bne.n	800cd04 <__swsetup_r+0x30>
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}
 800cd90:	0792      	lsls	r2, r2, #30
 800cd92:	bf58      	it	pl
 800cd94:	6963      	ldrpl	r3, [r4, #20]
 800cd96:	60a3      	str	r3, [r4, #8]
 800cd98:	e7f2      	b.n	800cd80 <__swsetup_r+0xac>
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	e7f7      	b.n	800cd8e <__swsetup_r+0xba>
 800cd9e:	bf00      	nop
 800cda0:	20001560 	.word	0x20001560
 800cda4:	0800f81c 	.word	0x0800f81c
 800cda8:	0800f83c 	.word	0x0800f83c
 800cdac:	0800f7fc 	.word	0x0800f7fc

0800cdb0 <quorem>:
 800cdb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb4:	6903      	ldr	r3, [r0, #16]
 800cdb6:	690c      	ldr	r4, [r1, #16]
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	4680      	mov	r8, r0
 800cdbc:	f2c0 8082 	blt.w	800cec4 <quorem+0x114>
 800cdc0:	3c01      	subs	r4, #1
 800cdc2:	f101 0714 	add.w	r7, r1, #20
 800cdc6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cdca:	f100 0614 	add.w	r6, r0, #20
 800cdce:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cdd2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cdd6:	eb06 030c 	add.w	r3, r6, ip
 800cdda:	3501      	adds	r5, #1
 800cddc:	eb07 090c 	add.w	r9, r7, ip
 800cde0:	9301      	str	r3, [sp, #4]
 800cde2:	fbb0 f5f5 	udiv	r5, r0, r5
 800cde6:	b395      	cbz	r5, 800ce4e <quorem+0x9e>
 800cde8:	f04f 0a00 	mov.w	sl, #0
 800cdec:	4638      	mov	r0, r7
 800cdee:	46b6      	mov	lr, r6
 800cdf0:	46d3      	mov	fp, sl
 800cdf2:	f850 2b04 	ldr.w	r2, [r0], #4
 800cdf6:	b293      	uxth	r3, r2
 800cdf8:	fb05 a303 	mla	r3, r5, r3, sl
 800cdfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	ebab 0303 	sub.w	r3, fp, r3
 800ce06:	0c12      	lsrs	r2, r2, #16
 800ce08:	f8de b000 	ldr.w	fp, [lr]
 800ce0c:	fb05 a202 	mla	r2, r5, r2, sl
 800ce10:	fa13 f38b 	uxtah	r3, r3, fp
 800ce14:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ce18:	fa1f fb82 	uxth.w	fp, r2
 800ce1c:	f8de 2000 	ldr.w	r2, [lr]
 800ce20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ce24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce2e:	4581      	cmp	r9, r0
 800ce30:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ce34:	f84e 3b04 	str.w	r3, [lr], #4
 800ce38:	d2db      	bcs.n	800cdf2 <quorem+0x42>
 800ce3a:	f856 300c 	ldr.w	r3, [r6, ip]
 800ce3e:	b933      	cbnz	r3, 800ce4e <quorem+0x9e>
 800ce40:	9b01      	ldr	r3, [sp, #4]
 800ce42:	3b04      	subs	r3, #4
 800ce44:	429e      	cmp	r6, r3
 800ce46:	461a      	mov	r2, r3
 800ce48:	d330      	bcc.n	800ceac <quorem+0xfc>
 800ce4a:	f8c8 4010 	str.w	r4, [r8, #16]
 800ce4e:	4640      	mov	r0, r8
 800ce50:	f001 f9fc 	bl	800e24c <__mcmp>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	db25      	blt.n	800cea4 <quorem+0xf4>
 800ce58:	3501      	adds	r5, #1
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f04f 0c00 	mov.w	ip, #0
 800ce60:	f857 2b04 	ldr.w	r2, [r7], #4
 800ce64:	f8d0 e000 	ldr.w	lr, [r0]
 800ce68:	b293      	uxth	r3, r2
 800ce6a:	ebac 0303 	sub.w	r3, ip, r3
 800ce6e:	0c12      	lsrs	r2, r2, #16
 800ce70:	fa13 f38e 	uxtah	r3, r3, lr
 800ce74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ce78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce82:	45b9      	cmp	r9, r7
 800ce84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce88:	f840 3b04 	str.w	r3, [r0], #4
 800ce8c:	d2e8      	bcs.n	800ce60 <quorem+0xb0>
 800ce8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ce92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ce96:	b92a      	cbnz	r2, 800cea4 <quorem+0xf4>
 800ce98:	3b04      	subs	r3, #4
 800ce9a:	429e      	cmp	r6, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	d30b      	bcc.n	800ceb8 <quorem+0x108>
 800cea0:	f8c8 4010 	str.w	r4, [r8, #16]
 800cea4:	4628      	mov	r0, r5
 800cea6:	b003      	add	sp, #12
 800cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceac:	6812      	ldr	r2, [r2, #0]
 800ceae:	3b04      	subs	r3, #4
 800ceb0:	2a00      	cmp	r2, #0
 800ceb2:	d1ca      	bne.n	800ce4a <quorem+0x9a>
 800ceb4:	3c01      	subs	r4, #1
 800ceb6:	e7c5      	b.n	800ce44 <quorem+0x94>
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	3b04      	subs	r3, #4
 800cebc:	2a00      	cmp	r2, #0
 800cebe:	d1ef      	bne.n	800cea0 <quorem+0xf0>
 800cec0:	3c01      	subs	r4, #1
 800cec2:	e7ea      	b.n	800ce9a <quorem+0xea>
 800cec4:	2000      	movs	r0, #0
 800cec6:	e7ee      	b.n	800cea6 <quorem+0xf6>

0800cec8 <_dtoa_r>:
 800cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	ec57 6b10 	vmov	r6, r7, d0
 800ced0:	b097      	sub	sp, #92	; 0x5c
 800ced2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ced4:	9106      	str	r1, [sp, #24]
 800ced6:	4604      	mov	r4, r0
 800ced8:	920b      	str	r2, [sp, #44]	; 0x2c
 800ceda:	9312      	str	r3, [sp, #72]	; 0x48
 800cedc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cee0:	e9cd 6700 	strd	r6, r7, [sp]
 800cee4:	b93d      	cbnz	r5, 800cef6 <_dtoa_r+0x2e>
 800cee6:	2010      	movs	r0, #16
 800cee8:	f000 ff92 	bl	800de10 <malloc>
 800ceec:	6260      	str	r0, [r4, #36]	; 0x24
 800ceee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cef2:	6005      	str	r5, [r0, #0]
 800cef4:	60c5      	str	r5, [r0, #12]
 800cef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cef8:	6819      	ldr	r1, [r3, #0]
 800cefa:	b151      	cbz	r1, 800cf12 <_dtoa_r+0x4a>
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	604a      	str	r2, [r1, #4]
 800cf00:	2301      	movs	r3, #1
 800cf02:	4093      	lsls	r3, r2
 800cf04:	608b      	str	r3, [r1, #8]
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 ffbe 	bl	800de88 <_Bfree>
 800cf0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf0e:	2200      	movs	r2, #0
 800cf10:	601a      	str	r2, [r3, #0]
 800cf12:	1e3b      	subs	r3, r7, #0
 800cf14:	bfbb      	ittet	lt
 800cf16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cf1a:	9301      	strlt	r3, [sp, #4]
 800cf1c:	2300      	movge	r3, #0
 800cf1e:	2201      	movlt	r2, #1
 800cf20:	bfac      	ite	ge
 800cf22:	f8c8 3000 	strge.w	r3, [r8]
 800cf26:	f8c8 2000 	strlt.w	r2, [r8]
 800cf2a:	4baf      	ldr	r3, [pc, #700]	; (800d1e8 <_dtoa_r+0x320>)
 800cf2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cf30:	ea33 0308 	bics.w	r3, r3, r8
 800cf34:	d114      	bne.n	800cf60 <_dtoa_r+0x98>
 800cf36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf38:	f242 730f 	movw	r3, #9999	; 0x270f
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	9b00      	ldr	r3, [sp, #0]
 800cf40:	b923      	cbnz	r3, 800cf4c <_dtoa_r+0x84>
 800cf42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cf46:	2800      	cmp	r0, #0
 800cf48:	f000 8542 	beq.w	800d9d0 <_dtoa_r+0xb08>
 800cf4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d1fc <_dtoa_r+0x334>
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f000 8544 	beq.w	800d9e0 <_dtoa_r+0xb18>
 800cf58:	f10b 0303 	add.w	r3, fp, #3
 800cf5c:	f000 bd3e 	b.w	800d9dc <_dtoa_r+0xb14>
 800cf60:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf64:	2200      	movs	r2, #0
 800cf66:	2300      	movs	r3, #0
 800cf68:	4630      	mov	r0, r6
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	f7f3 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf70:	4681      	mov	r9, r0
 800cf72:	b168      	cbz	r0, 800cf90 <_dtoa_r+0xc8>
 800cf74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf76:	2301      	movs	r3, #1
 800cf78:	6013      	str	r3, [r2, #0]
 800cf7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f000 8524 	beq.w	800d9ca <_dtoa_r+0xb02>
 800cf82:	4b9a      	ldr	r3, [pc, #616]	; (800d1ec <_dtoa_r+0x324>)
 800cf84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cf86:	f103 3bff 	add.w	fp, r3, #4294967295
 800cf8a:	6013      	str	r3, [r2, #0]
 800cf8c:	f000 bd28 	b.w	800d9e0 <_dtoa_r+0xb18>
 800cf90:	aa14      	add	r2, sp, #80	; 0x50
 800cf92:	a915      	add	r1, sp, #84	; 0x54
 800cf94:	ec47 6b10 	vmov	d0, r6, r7
 800cf98:	4620      	mov	r0, r4
 800cf9a:	f001 f9ce 	bl	800e33a <__d2b>
 800cf9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cfa2:	9004      	str	r0, [sp, #16]
 800cfa4:	2d00      	cmp	r5, #0
 800cfa6:	d07c      	beq.n	800d0a2 <_dtoa_r+0x1da>
 800cfa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cfb0:	46b2      	mov	sl, r6
 800cfb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cfb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cfba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	4b8b      	ldr	r3, [pc, #556]	; (800d1f0 <_dtoa_r+0x328>)
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	4659      	mov	r1, fp
 800cfc6:	f7f3 f95f 	bl	8000288 <__aeabi_dsub>
 800cfca:	a381      	add	r3, pc, #516	; (adr r3, 800d1d0 <_dtoa_r+0x308>)
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 fb12 	bl	80005f8 <__aeabi_dmul>
 800cfd4:	a380      	add	r3, pc, #512	; (adr r3, 800d1d8 <_dtoa_r+0x310>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7f3 f957 	bl	800028c <__adddf3>
 800cfde:	4606      	mov	r6, r0
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	460f      	mov	r7, r1
 800cfe4:	f7f3 fa9e 	bl	8000524 <__aeabi_i2d>
 800cfe8:	a37d      	add	r3, pc, #500	; (adr r3, 800d1e0 <_dtoa_r+0x318>)
 800cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfee:	f7f3 fb03 	bl	80005f8 <__aeabi_dmul>
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	4630      	mov	r0, r6
 800cff8:	4639      	mov	r1, r7
 800cffa:	f7f3 f947 	bl	800028c <__adddf3>
 800cffe:	4606      	mov	r6, r0
 800d000:	460f      	mov	r7, r1
 800d002:	f7f3 fda9 	bl	8000b58 <__aeabi_d2iz>
 800d006:	2200      	movs	r2, #0
 800d008:	4682      	mov	sl, r0
 800d00a:	2300      	movs	r3, #0
 800d00c:	4630      	mov	r0, r6
 800d00e:	4639      	mov	r1, r7
 800d010:	f7f3 fd64 	bl	8000adc <__aeabi_dcmplt>
 800d014:	b148      	cbz	r0, 800d02a <_dtoa_r+0x162>
 800d016:	4650      	mov	r0, sl
 800d018:	f7f3 fa84 	bl	8000524 <__aeabi_i2d>
 800d01c:	4632      	mov	r2, r6
 800d01e:	463b      	mov	r3, r7
 800d020:	f7f3 fd52 	bl	8000ac8 <__aeabi_dcmpeq>
 800d024:	b908      	cbnz	r0, 800d02a <_dtoa_r+0x162>
 800d026:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d02a:	f1ba 0f16 	cmp.w	sl, #22
 800d02e:	d859      	bhi.n	800d0e4 <_dtoa_r+0x21c>
 800d030:	4970      	ldr	r1, [pc, #448]	; (800d1f4 <_dtoa_r+0x32c>)
 800d032:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d03a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d03e:	f7f3 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 800d042:	2800      	cmp	r0, #0
 800d044:	d050      	beq.n	800d0e8 <_dtoa_r+0x220>
 800d046:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d04a:	2300      	movs	r3, #0
 800d04c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d04e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d050:	1b5d      	subs	r5, r3, r5
 800d052:	f1b5 0801 	subs.w	r8, r5, #1
 800d056:	bf49      	itett	mi
 800d058:	f1c5 0301 	rsbmi	r3, r5, #1
 800d05c:	2300      	movpl	r3, #0
 800d05e:	9305      	strmi	r3, [sp, #20]
 800d060:	f04f 0800 	movmi.w	r8, #0
 800d064:	bf58      	it	pl
 800d066:	9305      	strpl	r3, [sp, #20]
 800d068:	f1ba 0f00 	cmp.w	sl, #0
 800d06c:	db3e      	blt.n	800d0ec <_dtoa_r+0x224>
 800d06e:	2300      	movs	r3, #0
 800d070:	44d0      	add	r8, sl
 800d072:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d076:	9307      	str	r3, [sp, #28]
 800d078:	9b06      	ldr	r3, [sp, #24]
 800d07a:	2b09      	cmp	r3, #9
 800d07c:	f200 8090 	bhi.w	800d1a0 <_dtoa_r+0x2d8>
 800d080:	2b05      	cmp	r3, #5
 800d082:	bfc4      	itt	gt
 800d084:	3b04      	subgt	r3, #4
 800d086:	9306      	strgt	r3, [sp, #24]
 800d088:	9b06      	ldr	r3, [sp, #24]
 800d08a:	f1a3 0302 	sub.w	r3, r3, #2
 800d08e:	bfcc      	ite	gt
 800d090:	2500      	movgt	r5, #0
 800d092:	2501      	movle	r5, #1
 800d094:	2b03      	cmp	r3, #3
 800d096:	f200 808f 	bhi.w	800d1b8 <_dtoa_r+0x2f0>
 800d09a:	e8df f003 	tbb	[pc, r3]
 800d09e:	7f7d      	.short	0x7f7d
 800d0a0:	7131      	.short	0x7131
 800d0a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d0a6:	441d      	add	r5, r3
 800d0a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d0ac:	2820      	cmp	r0, #32
 800d0ae:	dd13      	ble.n	800d0d8 <_dtoa_r+0x210>
 800d0b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d0b4:	9b00      	ldr	r3, [sp, #0]
 800d0b6:	fa08 f800 	lsl.w	r8, r8, r0
 800d0ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d0be:	fa23 f000 	lsr.w	r0, r3, r0
 800d0c2:	ea48 0000 	orr.w	r0, r8, r0
 800d0c6:	f7f3 fa1d 	bl	8000504 <__aeabi_ui2d>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	4682      	mov	sl, r0
 800d0ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d0d2:	3d01      	subs	r5, #1
 800d0d4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0d6:	e772      	b.n	800cfbe <_dtoa_r+0xf6>
 800d0d8:	9b00      	ldr	r3, [sp, #0]
 800d0da:	f1c0 0020 	rsb	r0, r0, #32
 800d0de:	fa03 f000 	lsl.w	r0, r3, r0
 800d0e2:	e7f0      	b.n	800d0c6 <_dtoa_r+0x1fe>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e7b1      	b.n	800d04c <_dtoa_r+0x184>
 800d0e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d0ea:	e7b0      	b.n	800d04e <_dtoa_r+0x186>
 800d0ec:	9b05      	ldr	r3, [sp, #20]
 800d0ee:	eba3 030a 	sub.w	r3, r3, sl
 800d0f2:	9305      	str	r3, [sp, #20]
 800d0f4:	f1ca 0300 	rsb	r3, sl, #0
 800d0f8:	9307      	str	r3, [sp, #28]
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	930e      	str	r3, [sp, #56]	; 0x38
 800d0fe:	e7bb      	b.n	800d078 <_dtoa_r+0x1b0>
 800d100:	2301      	movs	r3, #1
 800d102:	930a      	str	r3, [sp, #40]	; 0x28
 800d104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d106:	2b00      	cmp	r3, #0
 800d108:	dd59      	ble.n	800d1be <_dtoa_r+0x2f6>
 800d10a:	9302      	str	r3, [sp, #8]
 800d10c:	4699      	mov	r9, r3
 800d10e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d110:	2200      	movs	r2, #0
 800d112:	6072      	str	r2, [r6, #4]
 800d114:	2204      	movs	r2, #4
 800d116:	f102 0014 	add.w	r0, r2, #20
 800d11a:	4298      	cmp	r0, r3
 800d11c:	6871      	ldr	r1, [r6, #4]
 800d11e:	d953      	bls.n	800d1c8 <_dtoa_r+0x300>
 800d120:	4620      	mov	r0, r4
 800d122:	f000 fe7d 	bl	800de20 <_Balloc>
 800d126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d128:	6030      	str	r0, [r6, #0]
 800d12a:	f1b9 0f0e 	cmp.w	r9, #14
 800d12e:	f8d3 b000 	ldr.w	fp, [r3]
 800d132:	f200 80e6 	bhi.w	800d302 <_dtoa_r+0x43a>
 800d136:	2d00      	cmp	r5, #0
 800d138:	f000 80e3 	beq.w	800d302 <_dtoa_r+0x43a>
 800d13c:	ed9d 7b00 	vldr	d7, [sp]
 800d140:	f1ba 0f00 	cmp.w	sl, #0
 800d144:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d148:	dd74      	ble.n	800d234 <_dtoa_r+0x36c>
 800d14a:	4a2a      	ldr	r2, [pc, #168]	; (800d1f4 <_dtoa_r+0x32c>)
 800d14c:	f00a 030f 	and.w	r3, sl, #15
 800d150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d154:	ed93 7b00 	vldr	d7, [r3]
 800d158:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d15c:	06f0      	lsls	r0, r6, #27
 800d15e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d162:	d565      	bpl.n	800d230 <_dtoa_r+0x368>
 800d164:	4b24      	ldr	r3, [pc, #144]	; (800d1f8 <_dtoa_r+0x330>)
 800d166:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d16a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d16e:	f7f3 fb6d 	bl	800084c <__aeabi_ddiv>
 800d172:	e9cd 0100 	strd	r0, r1, [sp]
 800d176:	f006 060f 	and.w	r6, r6, #15
 800d17a:	2503      	movs	r5, #3
 800d17c:	4f1e      	ldr	r7, [pc, #120]	; (800d1f8 <_dtoa_r+0x330>)
 800d17e:	e04c      	b.n	800d21a <_dtoa_r+0x352>
 800d180:	2301      	movs	r3, #1
 800d182:	930a      	str	r3, [sp, #40]	; 0x28
 800d184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d186:	4453      	add	r3, sl
 800d188:	f103 0901 	add.w	r9, r3, #1
 800d18c:	9302      	str	r3, [sp, #8]
 800d18e:	464b      	mov	r3, r9
 800d190:	2b01      	cmp	r3, #1
 800d192:	bfb8      	it	lt
 800d194:	2301      	movlt	r3, #1
 800d196:	e7ba      	b.n	800d10e <_dtoa_r+0x246>
 800d198:	2300      	movs	r3, #0
 800d19a:	e7b2      	b.n	800d102 <_dtoa_r+0x23a>
 800d19c:	2300      	movs	r3, #0
 800d19e:	e7f0      	b.n	800d182 <_dtoa_r+0x2ba>
 800d1a0:	2501      	movs	r5, #1
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	9306      	str	r3, [sp, #24]
 800d1a6:	950a      	str	r5, [sp, #40]	; 0x28
 800d1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ac:	9302      	str	r3, [sp, #8]
 800d1ae:	4699      	mov	r9, r3
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	2312      	movs	r3, #18
 800d1b4:	920b      	str	r2, [sp, #44]	; 0x2c
 800d1b6:	e7aa      	b.n	800d10e <_dtoa_r+0x246>
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	930a      	str	r3, [sp, #40]	; 0x28
 800d1bc:	e7f4      	b.n	800d1a8 <_dtoa_r+0x2e0>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	9302      	str	r3, [sp, #8]
 800d1c2:	4699      	mov	r9, r3
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	e7f5      	b.n	800d1b4 <_dtoa_r+0x2ec>
 800d1c8:	3101      	adds	r1, #1
 800d1ca:	6071      	str	r1, [r6, #4]
 800d1cc:	0052      	lsls	r2, r2, #1
 800d1ce:	e7a2      	b.n	800d116 <_dtoa_r+0x24e>
 800d1d0:	636f4361 	.word	0x636f4361
 800d1d4:	3fd287a7 	.word	0x3fd287a7
 800d1d8:	8b60c8b3 	.word	0x8b60c8b3
 800d1dc:	3fc68a28 	.word	0x3fc68a28
 800d1e0:	509f79fb 	.word	0x509f79fb
 800d1e4:	3fd34413 	.word	0x3fd34413
 800d1e8:	7ff00000 	.word	0x7ff00000
 800d1ec:	0800f7c9 	.word	0x0800f7c9
 800d1f0:	3ff80000 	.word	0x3ff80000
 800d1f4:	0800f888 	.word	0x0800f888
 800d1f8:	0800f860 	.word	0x0800f860
 800d1fc:	0800f7f5 	.word	0x0800f7f5
 800d200:	07f1      	lsls	r1, r6, #31
 800d202:	d508      	bpl.n	800d216 <_dtoa_r+0x34e>
 800d204:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d20c:	f7f3 f9f4 	bl	80005f8 <__aeabi_dmul>
 800d210:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d214:	3501      	adds	r5, #1
 800d216:	1076      	asrs	r6, r6, #1
 800d218:	3708      	adds	r7, #8
 800d21a:	2e00      	cmp	r6, #0
 800d21c:	d1f0      	bne.n	800d200 <_dtoa_r+0x338>
 800d21e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d222:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d226:	f7f3 fb11 	bl	800084c <__aeabi_ddiv>
 800d22a:	e9cd 0100 	strd	r0, r1, [sp]
 800d22e:	e01a      	b.n	800d266 <_dtoa_r+0x39e>
 800d230:	2502      	movs	r5, #2
 800d232:	e7a3      	b.n	800d17c <_dtoa_r+0x2b4>
 800d234:	f000 80a0 	beq.w	800d378 <_dtoa_r+0x4b0>
 800d238:	f1ca 0600 	rsb	r6, sl, #0
 800d23c:	4b9f      	ldr	r3, [pc, #636]	; (800d4bc <_dtoa_r+0x5f4>)
 800d23e:	4fa0      	ldr	r7, [pc, #640]	; (800d4c0 <_dtoa_r+0x5f8>)
 800d240:	f006 020f 	and.w	r2, r6, #15
 800d244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d250:	f7f3 f9d2 	bl	80005f8 <__aeabi_dmul>
 800d254:	e9cd 0100 	strd	r0, r1, [sp]
 800d258:	1136      	asrs	r6, r6, #4
 800d25a:	2300      	movs	r3, #0
 800d25c:	2502      	movs	r5, #2
 800d25e:	2e00      	cmp	r6, #0
 800d260:	d17f      	bne.n	800d362 <_dtoa_r+0x49a>
 800d262:	2b00      	cmp	r3, #0
 800d264:	d1e1      	bne.n	800d22a <_dtoa_r+0x362>
 800d266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 8087 	beq.w	800d37c <_dtoa_r+0x4b4>
 800d26e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d272:	2200      	movs	r2, #0
 800d274:	4b93      	ldr	r3, [pc, #588]	; (800d4c4 <_dtoa_r+0x5fc>)
 800d276:	4630      	mov	r0, r6
 800d278:	4639      	mov	r1, r7
 800d27a:	f7f3 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800d27e:	2800      	cmp	r0, #0
 800d280:	d07c      	beq.n	800d37c <_dtoa_r+0x4b4>
 800d282:	f1b9 0f00 	cmp.w	r9, #0
 800d286:	d079      	beq.n	800d37c <_dtoa_r+0x4b4>
 800d288:	9b02      	ldr	r3, [sp, #8]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	dd35      	ble.n	800d2fa <_dtoa_r+0x432>
 800d28e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d292:	9308      	str	r3, [sp, #32]
 800d294:	4639      	mov	r1, r7
 800d296:	2200      	movs	r2, #0
 800d298:	4b8b      	ldr	r3, [pc, #556]	; (800d4c8 <_dtoa_r+0x600>)
 800d29a:	4630      	mov	r0, r6
 800d29c:	f7f3 f9ac 	bl	80005f8 <__aeabi_dmul>
 800d2a0:	e9cd 0100 	strd	r0, r1, [sp]
 800d2a4:	9f02      	ldr	r7, [sp, #8]
 800d2a6:	3501      	adds	r5, #1
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f7f3 f93b 	bl	8000524 <__aeabi_i2d>
 800d2ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2b2:	f7f3 f9a1 	bl	80005f8 <__aeabi_dmul>
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	4b84      	ldr	r3, [pc, #528]	; (800d4cc <_dtoa_r+0x604>)
 800d2ba:	f7f2 ffe7 	bl	800028c <__adddf3>
 800d2be:	4605      	mov	r5, r0
 800d2c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d2c4:	2f00      	cmp	r7, #0
 800d2c6:	d15d      	bne.n	800d384 <_dtoa_r+0x4bc>
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	4b81      	ldr	r3, [pc, #516]	; (800d4d0 <_dtoa_r+0x608>)
 800d2cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2d0:	f7f2 ffda 	bl	8000288 <__aeabi_dsub>
 800d2d4:	462a      	mov	r2, r5
 800d2d6:	4633      	mov	r3, r6
 800d2d8:	e9cd 0100 	strd	r0, r1, [sp]
 800d2dc:	f7f3 fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	f040 8288 	bne.w	800d7f6 <_dtoa_r+0x92e>
 800d2e6:	462a      	mov	r2, r5
 800d2e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d2ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2f0:	f7f3 fbf4 	bl	8000adc <__aeabi_dcmplt>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	f040 827c 	bne.w	800d7f2 <_dtoa_r+0x92a>
 800d2fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d2fe:	e9cd 2300 	strd	r2, r3, [sp]
 800d302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d304:	2b00      	cmp	r3, #0
 800d306:	f2c0 8150 	blt.w	800d5aa <_dtoa_r+0x6e2>
 800d30a:	f1ba 0f0e 	cmp.w	sl, #14
 800d30e:	f300 814c 	bgt.w	800d5aa <_dtoa_r+0x6e2>
 800d312:	4b6a      	ldr	r3, [pc, #424]	; (800d4bc <_dtoa_r+0x5f4>)
 800d314:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d318:	ed93 7b00 	vldr	d7, [r3]
 800d31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d31e:	2b00      	cmp	r3, #0
 800d320:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d324:	f280 80d8 	bge.w	800d4d8 <_dtoa_r+0x610>
 800d328:	f1b9 0f00 	cmp.w	r9, #0
 800d32c:	f300 80d4 	bgt.w	800d4d8 <_dtoa_r+0x610>
 800d330:	f040 825e 	bne.w	800d7f0 <_dtoa_r+0x928>
 800d334:	2200      	movs	r2, #0
 800d336:	4b66      	ldr	r3, [pc, #408]	; (800d4d0 <_dtoa_r+0x608>)
 800d338:	ec51 0b17 	vmov	r0, r1, d7
 800d33c:	f7f3 f95c 	bl	80005f8 <__aeabi_dmul>
 800d340:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d344:	f7f3 fbde 	bl	8000b04 <__aeabi_dcmpge>
 800d348:	464f      	mov	r7, r9
 800d34a:	464e      	mov	r6, r9
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f040 8234 	bne.w	800d7ba <_dtoa_r+0x8f2>
 800d352:	2331      	movs	r3, #49	; 0x31
 800d354:	f10b 0501 	add.w	r5, fp, #1
 800d358:	f88b 3000 	strb.w	r3, [fp]
 800d35c:	f10a 0a01 	add.w	sl, sl, #1
 800d360:	e22f      	b.n	800d7c2 <_dtoa_r+0x8fa>
 800d362:	07f2      	lsls	r2, r6, #31
 800d364:	d505      	bpl.n	800d372 <_dtoa_r+0x4aa>
 800d366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d36a:	f7f3 f945 	bl	80005f8 <__aeabi_dmul>
 800d36e:	3501      	adds	r5, #1
 800d370:	2301      	movs	r3, #1
 800d372:	1076      	asrs	r6, r6, #1
 800d374:	3708      	adds	r7, #8
 800d376:	e772      	b.n	800d25e <_dtoa_r+0x396>
 800d378:	2502      	movs	r5, #2
 800d37a:	e774      	b.n	800d266 <_dtoa_r+0x39e>
 800d37c:	f8cd a020 	str.w	sl, [sp, #32]
 800d380:	464f      	mov	r7, r9
 800d382:	e791      	b.n	800d2a8 <_dtoa_r+0x3e0>
 800d384:	4b4d      	ldr	r3, [pc, #308]	; (800d4bc <_dtoa_r+0x5f4>)
 800d386:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d38a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d390:	2b00      	cmp	r3, #0
 800d392:	d047      	beq.n	800d424 <_dtoa_r+0x55c>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	2000      	movs	r0, #0
 800d39a:	494e      	ldr	r1, [pc, #312]	; (800d4d4 <_dtoa_r+0x60c>)
 800d39c:	f7f3 fa56 	bl	800084c <__aeabi_ddiv>
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	4633      	mov	r3, r6
 800d3a4:	f7f2 ff70 	bl	8000288 <__aeabi_dsub>
 800d3a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d3ac:	465d      	mov	r5, fp
 800d3ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3b2:	f7f3 fbd1 	bl	8000b58 <__aeabi_d2iz>
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	f7f3 f8b4 	bl	8000524 <__aeabi_i2d>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3c4:	f7f2 ff60 	bl	8000288 <__aeabi_dsub>
 800d3c8:	3630      	adds	r6, #48	; 0x30
 800d3ca:	f805 6b01 	strb.w	r6, [r5], #1
 800d3ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d3d2:	e9cd 0100 	strd	r0, r1, [sp]
 800d3d6:	f7f3 fb81 	bl	8000adc <__aeabi_dcmplt>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d163      	bne.n	800d4a6 <_dtoa_r+0x5de>
 800d3de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	4937      	ldr	r1, [pc, #220]	; (800d4c4 <_dtoa_r+0x5fc>)
 800d3e6:	f7f2 ff4f 	bl	8000288 <__aeabi_dsub>
 800d3ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d3ee:	f7f3 fb75 	bl	8000adc <__aeabi_dcmplt>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	f040 80b7 	bne.w	800d566 <_dtoa_r+0x69e>
 800d3f8:	eba5 030b 	sub.w	r3, r5, fp
 800d3fc:	429f      	cmp	r7, r3
 800d3fe:	f77f af7c 	ble.w	800d2fa <_dtoa_r+0x432>
 800d402:	2200      	movs	r2, #0
 800d404:	4b30      	ldr	r3, [pc, #192]	; (800d4c8 <_dtoa_r+0x600>)
 800d406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d40a:	f7f3 f8f5 	bl	80005f8 <__aeabi_dmul>
 800d40e:	2200      	movs	r2, #0
 800d410:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d414:	4b2c      	ldr	r3, [pc, #176]	; (800d4c8 <_dtoa_r+0x600>)
 800d416:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d41a:	f7f3 f8ed 	bl	80005f8 <__aeabi_dmul>
 800d41e:	e9cd 0100 	strd	r0, r1, [sp]
 800d422:	e7c4      	b.n	800d3ae <_dtoa_r+0x4e6>
 800d424:	462a      	mov	r2, r5
 800d426:	4633      	mov	r3, r6
 800d428:	f7f3 f8e6 	bl	80005f8 <__aeabi_dmul>
 800d42c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d430:	eb0b 0507 	add.w	r5, fp, r7
 800d434:	465e      	mov	r6, fp
 800d436:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d43a:	f7f3 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800d43e:	4607      	mov	r7, r0
 800d440:	f7f3 f870 	bl	8000524 <__aeabi_i2d>
 800d444:	3730      	adds	r7, #48	; 0x30
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d44e:	f7f2 ff1b 	bl	8000288 <__aeabi_dsub>
 800d452:	f806 7b01 	strb.w	r7, [r6], #1
 800d456:	42ae      	cmp	r6, r5
 800d458:	e9cd 0100 	strd	r0, r1, [sp]
 800d45c:	f04f 0200 	mov.w	r2, #0
 800d460:	d126      	bne.n	800d4b0 <_dtoa_r+0x5e8>
 800d462:	4b1c      	ldr	r3, [pc, #112]	; (800d4d4 <_dtoa_r+0x60c>)
 800d464:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d468:	f7f2 ff10 	bl	800028c <__adddf3>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d474:	f7f3 fb50 	bl	8000b18 <__aeabi_dcmpgt>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d174      	bne.n	800d566 <_dtoa_r+0x69e>
 800d47c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d480:	2000      	movs	r0, #0
 800d482:	4914      	ldr	r1, [pc, #80]	; (800d4d4 <_dtoa_r+0x60c>)
 800d484:	f7f2 ff00 	bl	8000288 <__aeabi_dsub>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d490:	f7f3 fb24 	bl	8000adc <__aeabi_dcmplt>
 800d494:	2800      	cmp	r0, #0
 800d496:	f43f af30 	beq.w	800d2fa <_dtoa_r+0x432>
 800d49a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d49e:	2b30      	cmp	r3, #48	; 0x30
 800d4a0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d4a4:	d002      	beq.n	800d4ac <_dtoa_r+0x5e4>
 800d4a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d4aa:	e04a      	b.n	800d542 <_dtoa_r+0x67a>
 800d4ac:	4615      	mov	r5, r2
 800d4ae:	e7f4      	b.n	800d49a <_dtoa_r+0x5d2>
 800d4b0:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <_dtoa_r+0x600>)
 800d4b2:	f7f3 f8a1 	bl	80005f8 <__aeabi_dmul>
 800d4b6:	e9cd 0100 	strd	r0, r1, [sp]
 800d4ba:	e7bc      	b.n	800d436 <_dtoa_r+0x56e>
 800d4bc:	0800f888 	.word	0x0800f888
 800d4c0:	0800f860 	.word	0x0800f860
 800d4c4:	3ff00000 	.word	0x3ff00000
 800d4c8:	40240000 	.word	0x40240000
 800d4cc:	401c0000 	.word	0x401c0000
 800d4d0:	40140000 	.word	0x40140000
 800d4d4:	3fe00000 	.word	0x3fe00000
 800d4d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d4dc:	465d      	mov	r5, fp
 800d4de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4e2:	4630      	mov	r0, r6
 800d4e4:	4639      	mov	r1, r7
 800d4e6:	f7f3 f9b1 	bl	800084c <__aeabi_ddiv>
 800d4ea:	f7f3 fb35 	bl	8000b58 <__aeabi_d2iz>
 800d4ee:	4680      	mov	r8, r0
 800d4f0:	f7f3 f818 	bl	8000524 <__aeabi_i2d>
 800d4f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4f8:	f7f3 f87e 	bl	80005f8 <__aeabi_dmul>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d508:	f7f2 febe 	bl	8000288 <__aeabi_dsub>
 800d50c:	f805 6b01 	strb.w	r6, [r5], #1
 800d510:	eba5 060b 	sub.w	r6, r5, fp
 800d514:	45b1      	cmp	r9, r6
 800d516:	4602      	mov	r2, r0
 800d518:	460b      	mov	r3, r1
 800d51a:	d139      	bne.n	800d590 <_dtoa_r+0x6c8>
 800d51c:	f7f2 feb6 	bl	800028c <__adddf3>
 800d520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d524:	4606      	mov	r6, r0
 800d526:	460f      	mov	r7, r1
 800d528:	f7f3 faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800d52c:	b9c8      	cbnz	r0, 800d562 <_dtoa_r+0x69a>
 800d52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d532:	4630      	mov	r0, r6
 800d534:	4639      	mov	r1, r7
 800d536:	f7f3 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d53a:	b110      	cbz	r0, 800d542 <_dtoa_r+0x67a>
 800d53c:	f018 0f01 	tst.w	r8, #1
 800d540:	d10f      	bne.n	800d562 <_dtoa_r+0x69a>
 800d542:	9904      	ldr	r1, [sp, #16]
 800d544:	4620      	mov	r0, r4
 800d546:	f000 fc9f 	bl	800de88 <_Bfree>
 800d54a:	2300      	movs	r3, #0
 800d54c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d54e:	702b      	strb	r3, [r5, #0]
 800d550:	f10a 0301 	add.w	r3, sl, #1
 800d554:	6013      	str	r3, [r2, #0]
 800d556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 8241 	beq.w	800d9e0 <_dtoa_r+0xb18>
 800d55e:	601d      	str	r5, [r3, #0]
 800d560:	e23e      	b.n	800d9e0 <_dtoa_r+0xb18>
 800d562:	f8cd a020 	str.w	sl, [sp, #32]
 800d566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d56a:	2a39      	cmp	r2, #57	; 0x39
 800d56c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d570:	d108      	bne.n	800d584 <_dtoa_r+0x6bc>
 800d572:	459b      	cmp	fp, r3
 800d574:	d10a      	bne.n	800d58c <_dtoa_r+0x6c4>
 800d576:	9b08      	ldr	r3, [sp, #32]
 800d578:	3301      	adds	r3, #1
 800d57a:	9308      	str	r3, [sp, #32]
 800d57c:	2330      	movs	r3, #48	; 0x30
 800d57e:	f88b 3000 	strb.w	r3, [fp]
 800d582:	465b      	mov	r3, fp
 800d584:	781a      	ldrb	r2, [r3, #0]
 800d586:	3201      	adds	r2, #1
 800d588:	701a      	strb	r2, [r3, #0]
 800d58a:	e78c      	b.n	800d4a6 <_dtoa_r+0x5de>
 800d58c:	461d      	mov	r5, r3
 800d58e:	e7ea      	b.n	800d566 <_dtoa_r+0x69e>
 800d590:	2200      	movs	r2, #0
 800d592:	4b9b      	ldr	r3, [pc, #620]	; (800d800 <_dtoa_r+0x938>)
 800d594:	f7f3 f830 	bl	80005f8 <__aeabi_dmul>
 800d598:	2200      	movs	r2, #0
 800d59a:	2300      	movs	r3, #0
 800d59c:	4606      	mov	r6, r0
 800d59e:	460f      	mov	r7, r1
 800d5a0:	f7f3 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	d09a      	beq.n	800d4de <_dtoa_r+0x616>
 800d5a8:	e7cb      	b.n	800d542 <_dtoa_r+0x67a>
 800d5aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5ac:	2a00      	cmp	r2, #0
 800d5ae:	f000 808b 	beq.w	800d6c8 <_dtoa_r+0x800>
 800d5b2:	9a06      	ldr	r2, [sp, #24]
 800d5b4:	2a01      	cmp	r2, #1
 800d5b6:	dc6e      	bgt.n	800d696 <_dtoa_r+0x7ce>
 800d5b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d5ba:	2a00      	cmp	r2, #0
 800d5bc:	d067      	beq.n	800d68e <_dtoa_r+0x7c6>
 800d5be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d5c2:	9f07      	ldr	r7, [sp, #28]
 800d5c4:	9d05      	ldr	r5, [sp, #20]
 800d5c6:	9a05      	ldr	r2, [sp, #20]
 800d5c8:	2101      	movs	r1, #1
 800d5ca:	441a      	add	r2, r3
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	9205      	str	r2, [sp, #20]
 800d5d0:	4498      	add	r8, r3
 800d5d2:	f000 fcf9 	bl	800dfc8 <__i2b>
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	2d00      	cmp	r5, #0
 800d5da:	dd0c      	ble.n	800d5f6 <_dtoa_r+0x72e>
 800d5dc:	f1b8 0f00 	cmp.w	r8, #0
 800d5e0:	dd09      	ble.n	800d5f6 <_dtoa_r+0x72e>
 800d5e2:	4545      	cmp	r5, r8
 800d5e4:	9a05      	ldr	r2, [sp, #20]
 800d5e6:	462b      	mov	r3, r5
 800d5e8:	bfa8      	it	ge
 800d5ea:	4643      	movge	r3, r8
 800d5ec:	1ad2      	subs	r2, r2, r3
 800d5ee:	9205      	str	r2, [sp, #20]
 800d5f0:	1aed      	subs	r5, r5, r3
 800d5f2:	eba8 0803 	sub.w	r8, r8, r3
 800d5f6:	9b07      	ldr	r3, [sp, #28]
 800d5f8:	b1eb      	cbz	r3, 800d636 <_dtoa_r+0x76e>
 800d5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d067      	beq.n	800d6d0 <_dtoa_r+0x808>
 800d600:	b18f      	cbz	r7, 800d626 <_dtoa_r+0x75e>
 800d602:	4631      	mov	r1, r6
 800d604:	463a      	mov	r2, r7
 800d606:	4620      	mov	r0, r4
 800d608:	f000 fd7e 	bl	800e108 <__pow5mult>
 800d60c:	9a04      	ldr	r2, [sp, #16]
 800d60e:	4601      	mov	r1, r0
 800d610:	4606      	mov	r6, r0
 800d612:	4620      	mov	r0, r4
 800d614:	f000 fce1 	bl	800dfda <__multiply>
 800d618:	9904      	ldr	r1, [sp, #16]
 800d61a:	9008      	str	r0, [sp, #32]
 800d61c:	4620      	mov	r0, r4
 800d61e:	f000 fc33 	bl	800de88 <_Bfree>
 800d622:	9b08      	ldr	r3, [sp, #32]
 800d624:	9304      	str	r3, [sp, #16]
 800d626:	9b07      	ldr	r3, [sp, #28]
 800d628:	1bda      	subs	r2, r3, r7
 800d62a:	d004      	beq.n	800d636 <_dtoa_r+0x76e>
 800d62c:	9904      	ldr	r1, [sp, #16]
 800d62e:	4620      	mov	r0, r4
 800d630:	f000 fd6a 	bl	800e108 <__pow5mult>
 800d634:	9004      	str	r0, [sp, #16]
 800d636:	2101      	movs	r1, #1
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 fcc5 	bl	800dfc8 <__i2b>
 800d63e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d640:	4607      	mov	r7, r0
 800d642:	2b00      	cmp	r3, #0
 800d644:	f000 81d0 	beq.w	800d9e8 <_dtoa_r+0xb20>
 800d648:	461a      	mov	r2, r3
 800d64a:	4601      	mov	r1, r0
 800d64c:	4620      	mov	r0, r4
 800d64e:	f000 fd5b 	bl	800e108 <__pow5mult>
 800d652:	9b06      	ldr	r3, [sp, #24]
 800d654:	2b01      	cmp	r3, #1
 800d656:	4607      	mov	r7, r0
 800d658:	dc40      	bgt.n	800d6dc <_dtoa_r+0x814>
 800d65a:	9b00      	ldr	r3, [sp, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d139      	bne.n	800d6d4 <_dtoa_r+0x80c>
 800d660:	9b01      	ldr	r3, [sp, #4]
 800d662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d666:	2b00      	cmp	r3, #0
 800d668:	d136      	bne.n	800d6d8 <_dtoa_r+0x810>
 800d66a:	9b01      	ldr	r3, [sp, #4]
 800d66c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d670:	0d1b      	lsrs	r3, r3, #20
 800d672:	051b      	lsls	r3, r3, #20
 800d674:	b12b      	cbz	r3, 800d682 <_dtoa_r+0x7ba>
 800d676:	9b05      	ldr	r3, [sp, #20]
 800d678:	3301      	adds	r3, #1
 800d67a:	9305      	str	r3, [sp, #20]
 800d67c:	f108 0801 	add.w	r8, r8, #1
 800d680:	2301      	movs	r3, #1
 800d682:	9307      	str	r3, [sp, #28]
 800d684:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d686:	2b00      	cmp	r3, #0
 800d688:	d12a      	bne.n	800d6e0 <_dtoa_r+0x818>
 800d68a:	2001      	movs	r0, #1
 800d68c:	e030      	b.n	800d6f0 <_dtoa_r+0x828>
 800d68e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d690:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d694:	e795      	b.n	800d5c2 <_dtoa_r+0x6fa>
 800d696:	9b07      	ldr	r3, [sp, #28]
 800d698:	f109 37ff 	add.w	r7, r9, #4294967295
 800d69c:	42bb      	cmp	r3, r7
 800d69e:	bfbf      	itttt	lt
 800d6a0:	9b07      	ldrlt	r3, [sp, #28]
 800d6a2:	9707      	strlt	r7, [sp, #28]
 800d6a4:	1afa      	sublt	r2, r7, r3
 800d6a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d6a8:	bfbb      	ittet	lt
 800d6aa:	189b      	addlt	r3, r3, r2
 800d6ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d6ae:	1bdf      	subge	r7, r3, r7
 800d6b0:	2700      	movlt	r7, #0
 800d6b2:	f1b9 0f00 	cmp.w	r9, #0
 800d6b6:	bfb5      	itete	lt
 800d6b8:	9b05      	ldrlt	r3, [sp, #20]
 800d6ba:	9d05      	ldrge	r5, [sp, #20]
 800d6bc:	eba3 0509 	sublt.w	r5, r3, r9
 800d6c0:	464b      	movge	r3, r9
 800d6c2:	bfb8      	it	lt
 800d6c4:	2300      	movlt	r3, #0
 800d6c6:	e77e      	b.n	800d5c6 <_dtoa_r+0x6fe>
 800d6c8:	9f07      	ldr	r7, [sp, #28]
 800d6ca:	9d05      	ldr	r5, [sp, #20]
 800d6cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d6ce:	e783      	b.n	800d5d8 <_dtoa_r+0x710>
 800d6d0:	9a07      	ldr	r2, [sp, #28]
 800d6d2:	e7ab      	b.n	800d62c <_dtoa_r+0x764>
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	e7d4      	b.n	800d682 <_dtoa_r+0x7ba>
 800d6d8:	9b00      	ldr	r3, [sp, #0]
 800d6da:	e7d2      	b.n	800d682 <_dtoa_r+0x7ba>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	9307      	str	r3, [sp, #28]
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d6e6:	6918      	ldr	r0, [r3, #16]
 800d6e8:	f000 fc20 	bl	800df2c <__hi0bits>
 800d6ec:	f1c0 0020 	rsb	r0, r0, #32
 800d6f0:	4440      	add	r0, r8
 800d6f2:	f010 001f 	ands.w	r0, r0, #31
 800d6f6:	d047      	beq.n	800d788 <_dtoa_r+0x8c0>
 800d6f8:	f1c0 0320 	rsb	r3, r0, #32
 800d6fc:	2b04      	cmp	r3, #4
 800d6fe:	dd3b      	ble.n	800d778 <_dtoa_r+0x8b0>
 800d700:	9b05      	ldr	r3, [sp, #20]
 800d702:	f1c0 001c 	rsb	r0, r0, #28
 800d706:	4403      	add	r3, r0
 800d708:	9305      	str	r3, [sp, #20]
 800d70a:	4405      	add	r5, r0
 800d70c:	4480      	add	r8, r0
 800d70e:	9b05      	ldr	r3, [sp, #20]
 800d710:	2b00      	cmp	r3, #0
 800d712:	dd05      	ble.n	800d720 <_dtoa_r+0x858>
 800d714:	461a      	mov	r2, r3
 800d716:	9904      	ldr	r1, [sp, #16]
 800d718:	4620      	mov	r0, r4
 800d71a:	f000 fd43 	bl	800e1a4 <__lshift>
 800d71e:	9004      	str	r0, [sp, #16]
 800d720:	f1b8 0f00 	cmp.w	r8, #0
 800d724:	dd05      	ble.n	800d732 <_dtoa_r+0x86a>
 800d726:	4639      	mov	r1, r7
 800d728:	4642      	mov	r2, r8
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 fd3a 	bl	800e1a4 <__lshift>
 800d730:	4607      	mov	r7, r0
 800d732:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d734:	b353      	cbz	r3, 800d78c <_dtoa_r+0x8c4>
 800d736:	4639      	mov	r1, r7
 800d738:	9804      	ldr	r0, [sp, #16]
 800d73a:	f000 fd87 	bl	800e24c <__mcmp>
 800d73e:	2800      	cmp	r0, #0
 800d740:	da24      	bge.n	800d78c <_dtoa_r+0x8c4>
 800d742:	2300      	movs	r3, #0
 800d744:	220a      	movs	r2, #10
 800d746:	9904      	ldr	r1, [sp, #16]
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 fbb4 	bl	800deb6 <__multadd>
 800d74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d750:	9004      	str	r0, [sp, #16]
 800d752:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 814d 	beq.w	800d9f6 <_dtoa_r+0xb2e>
 800d75c:	2300      	movs	r3, #0
 800d75e:	4631      	mov	r1, r6
 800d760:	220a      	movs	r2, #10
 800d762:	4620      	mov	r0, r4
 800d764:	f000 fba7 	bl	800deb6 <__multadd>
 800d768:	9b02      	ldr	r3, [sp, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	4606      	mov	r6, r0
 800d76e:	dc4f      	bgt.n	800d810 <_dtoa_r+0x948>
 800d770:	9b06      	ldr	r3, [sp, #24]
 800d772:	2b02      	cmp	r3, #2
 800d774:	dd4c      	ble.n	800d810 <_dtoa_r+0x948>
 800d776:	e011      	b.n	800d79c <_dtoa_r+0x8d4>
 800d778:	d0c9      	beq.n	800d70e <_dtoa_r+0x846>
 800d77a:	9a05      	ldr	r2, [sp, #20]
 800d77c:	331c      	adds	r3, #28
 800d77e:	441a      	add	r2, r3
 800d780:	9205      	str	r2, [sp, #20]
 800d782:	441d      	add	r5, r3
 800d784:	4498      	add	r8, r3
 800d786:	e7c2      	b.n	800d70e <_dtoa_r+0x846>
 800d788:	4603      	mov	r3, r0
 800d78a:	e7f6      	b.n	800d77a <_dtoa_r+0x8b2>
 800d78c:	f1b9 0f00 	cmp.w	r9, #0
 800d790:	dc38      	bgt.n	800d804 <_dtoa_r+0x93c>
 800d792:	9b06      	ldr	r3, [sp, #24]
 800d794:	2b02      	cmp	r3, #2
 800d796:	dd35      	ble.n	800d804 <_dtoa_r+0x93c>
 800d798:	f8cd 9008 	str.w	r9, [sp, #8]
 800d79c:	9b02      	ldr	r3, [sp, #8]
 800d79e:	b963      	cbnz	r3, 800d7ba <_dtoa_r+0x8f2>
 800d7a0:	4639      	mov	r1, r7
 800d7a2:	2205      	movs	r2, #5
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f000 fb86 	bl	800deb6 <__multadd>
 800d7aa:	4601      	mov	r1, r0
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	9804      	ldr	r0, [sp, #16]
 800d7b0:	f000 fd4c 	bl	800e24c <__mcmp>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	f73f adcc 	bgt.w	800d352 <_dtoa_r+0x48a>
 800d7ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7bc:	465d      	mov	r5, fp
 800d7be:	ea6f 0a03 	mvn.w	sl, r3
 800d7c2:	f04f 0900 	mov.w	r9, #0
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f000 fb5d 	bl	800de88 <_Bfree>
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	f43f aeb7 	beq.w	800d542 <_dtoa_r+0x67a>
 800d7d4:	f1b9 0f00 	cmp.w	r9, #0
 800d7d8:	d005      	beq.n	800d7e6 <_dtoa_r+0x91e>
 800d7da:	45b1      	cmp	r9, r6
 800d7dc:	d003      	beq.n	800d7e6 <_dtoa_r+0x91e>
 800d7de:	4649      	mov	r1, r9
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f000 fb51 	bl	800de88 <_Bfree>
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 fb4d 	bl	800de88 <_Bfree>
 800d7ee:	e6a8      	b.n	800d542 <_dtoa_r+0x67a>
 800d7f0:	2700      	movs	r7, #0
 800d7f2:	463e      	mov	r6, r7
 800d7f4:	e7e1      	b.n	800d7ba <_dtoa_r+0x8f2>
 800d7f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d7fa:	463e      	mov	r6, r7
 800d7fc:	e5a9      	b.n	800d352 <_dtoa_r+0x48a>
 800d7fe:	bf00      	nop
 800d800:	40240000 	.word	0x40240000
 800d804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d806:	f8cd 9008 	str.w	r9, [sp, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 80fa 	beq.w	800da04 <_dtoa_r+0xb3c>
 800d810:	2d00      	cmp	r5, #0
 800d812:	dd05      	ble.n	800d820 <_dtoa_r+0x958>
 800d814:	4631      	mov	r1, r6
 800d816:	462a      	mov	r2, r5
 800d818:	4620      	mov	r0, r4
 800d81a:	f000 fcc3 	bl	800e1a4 <__lshift>
 800d81e:	4606      	mov	r6, r0
 800d820:	9b07      	ldr	r3, [sp, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d04c      	beq.n	800d8c0 <_dtoa_r+0x9f8>
 800d826:	6871      	ldr	r1, [r6, #4]
 800d828:	4620      	mov	r0, r4
 800d82a:	f000 faf9 	bl	800de20 <_Balloc>
 800d82e:	6932      	ldr	r2, [r6, #16]
 800d830:	3202      	adds	r2, #2
 800d832:	4605      	mov	r5, r0
 800d834:	0092      	lsls	r2, r2, #2
 800d836:	f106 010c 	add.w	r1, r6, #12
 800d83a:	300c      	adds	r0, #12
 800d83c:	f7fe fc46 	bl	800c0cc <memcpy>
 800d840:	2201      	movs	r2, #1
 800d842:	4629      	mov	r1, r5
 800d844:	4620      	mov	r0, r4
 800d846:	f000 fcad 	bl	800e1a4 <__lshift>
 800d84a:	9b00      	ldr	r3, [sp, #0]
 800d84c:	f8cd b014 	str.w	fp, [sp, #20]
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	46b1      	mov	r9, r6
 800d856:	9307      	str	r3, [sp, #28]
 800d858:	4606      	mov	r6, r0
 800d85a:	4639      	mov	r1, r7
 800d85c:	9804      	ldr	r0, [sp, #16]
 800d85e:	f7ff faa7 	bl	800cdb0 <quorem>
 800d862:	4649      	mov	r1, r9
 800d864:	4605      	mov	r5, r0
 800d866:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d86a:	9804      	ldr	r0, [sp, #16]
 800d86c:	f000 fcee 	bl	800e24c <__mcmp>
 800d870:	4632      	mov	r2, r6
 800d872:	9000      	str	r0, [sp, #0]
 800d874:	4639      	mov	r1, r7
 800d876:	4620      	mov	r0, r4
 800d878:	f000 fd02 	bl	800e280 <__mdiff>
 800d87c:	68c3      	ldr	r3, [r0, #12]
 800d87e:	4602      	mov	r2, r0
 800d880:	bb03      	cbnz	r3, 800d8c4 <_dtoa_r+0x9fc>
 800d882:	4601      	mov	r1, r0
 800d884:	9008      	str	r0, [sp, #32]
 800d886:	9804      	ldr	r0, [sp, #16]
 800d888:	f000 fce0 	bl	800e24c <__mcmp>
 800d88c:	9a08      	ldr	r2, [sp, #32]
 800d88e:	4603      	mov	r3, r0
 800d890:	4611      	mov	r1, r2
 800d892:	4620      	mov	r0, r4
 800d894:	9308      	str	r3, [sp, #32]
 800d896:	f000 faf7 	bl	800de88 <_Bfree>
 800d89a:	9b08      	ldr	r3, [sp, #32]
 800d89c:	b9a3      	cbnz	r3, 800d8c8 <_dtoa_r+0xa00>
 800d89e:	9a06      	ldr	r2, [sp, #24]
 800d8a0:	b992      	cbnz	r2, 800d8c8 <_dtoa_r+0xa00>
 800d8a2:	9a07      	ldr	r2, [sp, #28]
 800d8a4:	b982      	cbnz	r2, 800d8c8 <_dtoa_r+0xa00>
 800d8a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d8aa:	d029      	beq.n	800d900 <_dtoa_r+0xa38>
 800d8ac:	9b00      	ldr	r3, [sp, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	dd01      	ble.n	800d8b6 <_dtoa_r+0x9ee>
 800d8b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d8b6:	9b05      	ldr	r3, [sp, #20]
 800d8b8:	1c5d      	adds	r5, r3, #1
 800d8ba:	f883 8000 	strb.w	r8, [r3]
 800d8be:	e782      	b.n	800d7c6 <_dtoa_r+0x8fe>
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	e7c2      	b.n	800d84a <_dtoa_r+0x982>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e7e3      	b.n	800d890 <_dtoa_r+0x9c8>
 800d8c8:	9a00      	ldr	r2, [sp, #0]
 800d8ca:	2a00      	cmp	r2, #0
 800d8cc:	db04      	blt.n	800d8d8 <_dtoa_r+0xa10>
 800d8ce:	d125      	bne.n	800d91c <_dtoa_r+0xa54>
 800d8d0:	9a06      	ldr	r2, [sp, #24]
 800d8d2:	bb1a      	cbnz	r2, 800d91c <_dtoa_r+0xa54>
 800d8d4:	9a07      	ldr	r2, [sp, #28]
 800d8d6:	bb0a      	cbnz	r2, 800d91c <_dtoa_r+0xa54>
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	ddec      	ble.n	800d8b6 <_dtoa_r+0x9ee>
 800d8dc:	2201      	movs	r2, #1
 800d8de:	9904      	ldr	r1, [sp, #16]
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f000 fc5f 	bl	800e1a4 <__lshift>
 800d8e6:	4639      	mov	r1, r7
 800d8e8:	9004      	str	r0, [sp, #16]
 800d8ea:	f000 fcaf 	bl	800e24c <__mcmp>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	dc03      	bgt.n	800d8fa <_dtoa_r+0xa32>
 800d8f2:	d1e0      	bne.n	800d8b6 <_dtoa_r+0x9ee>
 800d8f4:	f018 0f01 	tst.w	r8, #1
 800d8f8:	d0dd      	beq.n	800d8b6 <_dtoa_r+0x9ee>
 800d8fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d8fe:	d1d8      	bne.n	800d8b2 <_dtoa_r+0x9ea>
 800d900:	9b05      	ldr	r3, [sp, #20]
 800d902:	9a05      	ldr	r2, [sp, #20]
 800d904:	1c5d      	adds	r5, r3, #1
 800d906:	2339      	movs	r3, #57	; 0x39
 800d908:	7013      	strb	r3, [r2, #0]
 800d90a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d90e:	2b39      	cmp	r3, #57	; 0x39
 800d910:	f105 32ff 	add.w	r2, r5, #4294967295
 800d914:	d04f      	beq.n	800d9b6 <_dtoa_r+0xaee>
 800d916:	3301      	adds	r3, #1
 800d918:	7013      	strb	r3, [r2, #0]
 800d91a:	e754      	b.n	800d7c6 <_dtoa_r+0x8fe>
 800d91c:	9a05      	ldr	r2, [sp, #20]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f102 0501 	add.w	r5, r2, #1
 800d924:	dd06      	ble.n	800d934 <_dtoa_r+0xa6c>
 800d926:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d92a:	d0e9      	beq.n	800d900 <_dtoa_r+0xa38>
 800d92c:	f108 0801 	add.w	r8, r8, #1
 800d930:	9b05      	ldr	r3, [sp, #20]
 800d932:	e7c2      	b.n	800d8ba <_dtoa_r+0x9f2>
 800d934:	9a02      	ldr	r2, [sp, #8]
 800d936:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d93a:	eba5 030b 	sub.w	r3, r5, fp
 800d93e:	4293      	cmp	r3, r2
 800d940:	d021      	beq.n	800d986 <_dtoa_r+0xabe>
 800d942:	2300      	movs	r3, #0
 800d944:	220a      	movs	r2, #10
 800d946:	9904      	ldr	r1, [sp, #16]
 800d948:	4620      	mov	r0, r4
 800d94a:	f000 fab4 	bl	800deb6 <__multadd>
 800d94e:	45b1      	cmp	r9, r6
 800d950:	9004      	str	r0, [sp, #16]
 800d952:	f04f 0300 	mov.w	r3, #0
 800d956:	f04f 020a 	mov.w	r2, #10
 800d95a:	4649      	mov	r1, r9
 800d95c:	4620      	mov	r0, r4
 800d95e:	d105      	bne.n	800d96c <_dtoa_r+0xaa4>
 800d960:	f000 faa9 	bl	800deb6 <__multadd>
 800d964:	4681      	mov	r9, r0
 800d966:	4606      	mov	r6, r0
 800d968:	9505      	str	r5, [sp, #20]
 800d96a:	e776      	b.n	800d85a <_dtoa_r+0x992>
 800d96c:	f000 faa3 	bl	800deb6 <__multadd>
 800d970:	4631      	mov	r1, r6
 800d972:	4681      	mov	r9, r0
 800d974:	2300      	movs	r3, #0
 800d976:	220a      	movs	r2, #10
 800d978:	4620      	mov	r0, r4
 800d97a:	f000 fa9c 	bl	800deb6 <__multadd>
 800d97e:	4606      	mov	r6, r0
 800d980:	e7f2      	b.n	800d968 <_dtoa_r+0xaa0>
 800d982:	f04f 0900 	mov.w	r9, #0
 800d986:	2201      	movs	r2, #1
 800d988:	9904      	ldr	r1, [sp, #16]
 800d98a:	4620      	mov	r0, r4
 800d98c:	f000 fc0a 	bl	800e1a4 <__lshift>
 800d990:	4639      	mov	r1, r7
 800d992:	9004      	str	r0, [sp, #16]
 800d994:	f000 fc5a 	bl	800e24c <__mcmp>
 800d998:	2800      	cmp	r0, #0
 800d99a:	dcb6      	bgt.n	800d90a <_dtoa_r+0xa42>
 800d99c:	d102      	bne.n	800d9a4 <_dtoa_r+0xadc>
 800d99e:	f018 0f01 	tst.w	r8, #1
 800d9a2:	d1b2      	bne.n	800d90a <_dtoa_r+0xa42>
 800d9a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9a8:	2b30      	cmp	r3, #48	; 0x30
 800d9aa:	f105 32ff 	add.w	r2, r5, #4294967295
 800d9ae:	f47f af0a 	bne.w	800d7c6 <_dtoa_r+0x8fe>
 800d9b2:	4615      	mov	r5, r2
 800d9b4:	e7f6      	b.n	800d9a4 <_dtoa_r+0xadc>
 800d9b6:	4593      	cmp	fp, r2
 800d9b8:	d105      	bne.n	800d9c6 <_dtoa_r+0xafe>
 800d9ba:	2331      	movs	r3, #49	; 0x31
 800d9bc:	f10a 0a01 	add.w	sl, sl, #1
 800d9c0:	f88b 3000 	strb.w	r3, [fp]
 800d9c4:	e6ff      	b.n	800d7c6 <_dtoa_r+0x8fe>
 800d9c6:	4615      	mov	r5, r2
 800d9c8:	e79f      	b.n	800d90a <_dtoa_r+0xa42>
 800d9ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 800da30 <_dtoa_r+0xb68>
 800d9ce:	e007      	b.n	800d9e0 <_dtoa_r+0xb18>
 800d9d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800da34 <_dtoa_r+0xb6c>
 800d9d6:	b11b      	cbz	r3, 800d9e0 <_dtoa_r+0xb18>
 800d9d8:	f10b 0308 	add.w	r3, fp, #8
 800d9dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d9de:	6013      	str	r3, [r2, #0]
 800d9e0:	4658      	mov	r0, fp
 800d9e2:	b017      	add	sp, #92	; 0x5c
 800d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e8:	9b06      	ldr	r3, [sp, #24]
 800d9ea:	2b01      	cmp	r3, #1
 800d9ec:	f77f ae35 	ble.w	800d65a <_dtoa_r+0x792>
 800d9f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9f2:	9307      	str	r3, [sp, #28]
 800d9f4:	e649      	b.n	800d68a <_dtoa_r+0x7c2>
 800d9f6:	9b02      	ldr	r3, [sp, #8]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	dc03      	bgt.n	800da04 <_dtoa_r+0xb3c>
 800d9fc:	9b06      	ldr	r3, [sp, #24]
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	f73f aecc 	bgt.w	800d79c <_dtoa_r+0x8d4>
 800da04:	465d      	mov	r5, fp
 800da06:	4639      	mov	r1, r7
 800da08:	9804      	ldr	r0, [sp, #16]
 800da0a:	f7ff f9d1 	bl	800cdb0 <quorem>
 800da0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800da12:	f805 8b01 	strb.w	r8, [r5], #1
 800da16:	9a02      	ldr	r2, [sp, #8]
 800da18:	eba5 030b 	sub.w	r3, r5, fp
 800da1c:	429a      	cmp	r2, r3
 800da1e:	ddb0      	ble.n	800d982 <_dtoa_r+0xaba>
 800da20:	2300      	movs	r3, #0
 800da22:	220a      	movs	r2, #10
 800da24:	9904      	ldr	r1, [sp, #16]
 800da26:	4620      	mov	r0, r4
 800da28:	f000 fa45 	bl	800deb6 <__multadd>
 800da2c:	9004      	str	r0, [sp, #16]
 800da2e:	e7ea      	b.n	800da06 <_dtoa_r+0xb3e>
 800da30:	0800f7c8 	.word	0x0800f7c8
 800da34:	0800f7ec 	.word	0x0800f7ec

0800da38 <__sflush_r>:
 800da38:	898a      	ldrh	r2, [r1, #12]
 800da3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3e:	4605      	mov	r5, r0
 800da40:	0710      	lsls	r0, r2, #28
 800da42:	460c      	mov	r4, r1
 800da44:	d458      	bmi.n	800daf8 <__sflush_r+0xc0>
 800da46:	684b      	ldr	r3, [r1, #4]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	dc05      	bgt.n	800da58 <__sflush_r+0x20>
 800da4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da4e:	2b00      	cmp	r3, #0
 800da50:	dc02      	bgt.n	800da58 <__sflush_r+0x20>
 800da52:	2000      	movs	r0, #0
 800da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da5a:	2e00      	cmp	r6, #0
 800da5c:	d0f9      	beq.n	800da52 <__sflush_r+0x1a>
 800da5e:	2300      	movs	r3, #0
 800da60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da64:	682f      	ldr	r7, [r5, #0]
 800da66:	6a21      	ldr	r1, [r4, #32]
 800da68:	602b      	str	r3, [r5, #0]
 800da6a:	d032      	beq.n	800dad2 <__sflush_r+0x9a>
 800da6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da6e:	89a3      	ldrh	r3, [r4, #12]
 800da70:	075a      	lsls	r2, r3, #29
 800da72:	d505      	bpl.n	800da80 <__sflush_r+0x48>
 800da74:	6863      	ldr	r3, [r4, #4]
 800da76:	1ac0      	subs	r0, r0, r3
 800da78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da7a:	b10b      	cbz	r3, 800da80 <__sflush_r+0x48>
 800da7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da7e:	1ac0      	subs	r0, r0, r3
 800da80:	2300      	movs	r3, #0
 800da82:	4602      	mov	r2, r0
 800da84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da86:	6a21      	ldr	r1, [r4, #32]
 800da88:	4628      	mov	r0, r5
 800da8a:	47b0      	blx	r6
 800da8c:	1c43      	adds	r3, r0, #1
 800da8e:	89a3      	ldrh	r3, [r4, #12]
 800da90:	d106      	bne.n	800daa0 <__sflush_r+0x68>
 800da92:	6829      	ldr	r1, [r5, #0]
 800da94:	291d      	cmp	r1, #29
 800da96:	d848      	bhi.n	800db2a <__sflush_r+0xf2>
 800da98:	4a29      	ldr	r2, [pc, #164]	; (800db40 <__sflush_r+0x108>)
 800da9a:	40ca      	lsrs	r2, r1
 800da9c:	07d6      	lsls	r6, r2, #31
 800da9e:	d544      	bpl.n	800db2a <__sflush_r+0xf2>
 800daa0:	2200      	movs	r2, #0
 800daa2:	6062      	str	r2, [r4, #4]
 800daa4:	04d9      	lsls	r1, r3, #19
 800daa6:	6922      	ldr	r2, [r4, #16]
 800daa8:	6022      	str	r2, [r4, #0]
 800daaa:	d504      	bpl.n	800dab6 <__sflush_r+0x7e>
 800daac:	1c42      	adds	r2, r0, #1
 800daae:	d101      	bne.n	800dab4 <__sflush_r+0x7c>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	b903      	cbnz	r3, 800dab6 <__sflush_r+0x7e>
 800dab4:	6560      	str	r0, [r4, #84]	; 0x54
 800dab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dab8:	602f      	str	r7, [r5, #0]
 800daba:	2900      	cmp	r1, #0
 800dabc:	d0c9      	beq.n	800da52 <__sflush_r+0x1a>
 800dabe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dac2:	4299      	cmp	r1, r3
 800dac4:	d002      	beq.n	800dacc <__sflush_r+0x94>
 800dac6:	4628      	mov	r0, r5
 800dac8:	f000 fc94 	bl	800e3f4 <_free_r>
 800dacc:	2000      	movs	r0, #0
 800dace:	6360      	str	r0, [r4, #52]	; 0x34
 800dad0:	e7c0      	b.n	800da54 <__sflush_r+0x1c>
 800dad2:	2301      	movs	r3, #1
 800dad4:	4628      	mov	r0, r5
 800dad6:	47b0      	blx	r6
 800dad8:	1c41      	adds	r1, r0, #1
 800dada:	d1c8      	bne.n	800da6e <__sflush_r+0x36>
 800dadc:	682b      	ldr	r3, [r5, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d0c5      	beq.n	800da6e <__sflush_r+0x36>
 800dae2:	2b1d      	cmp	r3, #29
 800dae4:	d001      	beq.n	800daea <__sflush_r+0xb2>
 800dae6:	2b16      	cmp	r3, #22
 800dae8:	d101      	bne.n	800daee <__sflush_r+0xb6>
 800daea:	602f      	str	r7, [r5, #0]
 800daec:	e7b1      	b.n	800da52 <__sflush_r+0x1a>
 800daee:	89a3      	ldrh	r3, [r4, #12]
 800daf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf4:	81a3      	strh	r3, [r4, #12]
 800daf6:	e7ad      	b.n	800da54 <__sflush_r+0x1c>
 800daf8:	690f      	ldr	r7, [r1, #16]
 800dafa:	2f00      	cmp	r7, #0
 800dafc:	d0a9      	beq.n	800da52 <__sflush_r+0x1a>
 800dafe:	0793      	lsls	r3, r2, #30
 800db00:	680e      	ldr	r6, [r1, #0]
 800db02:	bf08      	it	eq
 800db04:	694b      	ldreq	r3, [r1, #20]
 800db06:	600f      	str	r7, [r1, #0]
 800db08:	bf18      	it	ne
 800db0a:	2300      	movne	r3, #0
 800db0c:	eba6 0807 	sub.w	r8, r6, r7
 800db10:	608b      	str	r3, [r1, #8]
 800db12:	f1b8 0f00 	cmp.w	r8, #0
 800db16:	dd9c      	ble.n	800da52 <__sflush_r+0x1a>
 800db18:	4643      	mov	r3, r8
 800db1a:	463a      	mov	r2, r7
 800db1c:	6a21      	ldr	r1, [r4, #32]
 800db1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db20:	4628      	mov	r0, r5
 800db22:	47b0      	blx	r6
 800db24:	2800      	cmp	r0, #0
 800db26:	dc06      	bgt.n	800db36 <__sflush_r+0xfe>
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db2e:	81a3      	strh	r3, [r4, #12]
 800db30:	f04f 30ff 	mov.w	r0, #4294967295
 800db34:	e78e      	b.n	800da54 <__sflush_r+0x1c>
 800db36:	4407      	add	r7, r0
 800db38:	eba8 0800 	sub.w	r8, r8, r0
 800db3c:	e7e9      	b.n	800db12 <__sflush_r+0xda>
 800db3e:	bf00      	nop
 800db40:	20400001 	.word	0x20400001

0800db44 <_fflush_r>:
 800db44:	b538      	push	{r3, r4, r5, lr}
 800db46:	690b      	ldr	r3, [r1, #16]
 800db48:	4605      	mov	r5, r0
 800db4a:	460c      	mov	r4, r1
 800db4c:	b1db      	cbz	r3, 800db86 <_fflush_r+0x42>
 800db4e:	b118      	cbz	r0, 800db58 <_fflush_r+0x14>
 800db50:	6983      	ldr	r3, [r0, #24]
 800db52:	b90b      	cbnz	r3, 800db58 <_fflush_r+0x14>
 800db54:	f000 f860 	bl	800dc18 <__sinit>
 800db58:	4b0c      	ldr	r3, [pc, #48]	; (800db8c <_fflush_r+0x48>)
 800db5a:	429c      	cmp	r4, r3
 800db5c:	d109      	bne.n	800db72 <_fflush_r+0x2e>
 800db5e:	686c      	ldr	r4, [r5, #4]
 800db60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db64:	b17b      	cbz	r3, 800db86 <_fflush_r+0x42>
 800db66:	4621      	mov	r1, r4
 800db68:	4628      	mov	r0, r5
 800db6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db6e:	f7ff bf63 	b.w	800da38 <__sflush_r>
 800db72:	4b07      	ldr	r3, [pc, #28]	; (800db90 <_fflush_r+0x4c>)
 800db74:	429c      	cmp	r4, r3
 800db76:	d101      	bne.n	800db7c <_fflush_r+0x38>
 800db78:	68ac      	ldr	r4, [r5, #8]
 800db7a:	e7f1      	b.n	800db60 <_fflush_r+0x1c>
 800db7c:	4b05      	ldr	r3, [pc, #20]	; (800db94 <_fflush_r+0x50>)
 800db7e:	429c      	cmp	r4, r3
 800db80:	bf08      	it	eq
 800db82:	68ec      	ldreq	r4, [r5, #12]
 800db84:	e7ec      	b.n	800db60 <_fflush_r+0x1c>
 800db86:	2000      	movs	r0, #0
 800db88:	bd38      	pop	{r3, r4, r5, pc}
 800db8a:	bf00      	nop
 800db8c:	0800f81c 	.word	0x0800f81c
 800db90:	0800f83c 	.word	0x0800f83c
 800db94:	0800f7fc 	.word	0x0800f7fc

0800db98 <std>:
 800db98:	2300      	movs	r3, #0
 800db9a:	b510      	push	{r4, lr}
 800db9c:	4604      	mov	r4, r0
 800db9e:	e9c0 3300 	strd	r3, r3, [r0]
 800dba2:	6083      	str	r3, [r0, #8]
 800dba4:	8181      	strh	r1, [r0, #12]
 800dba6:	6643      	str	r3, [r0, #100]	; 0x64
 800dba8:	81c2      	strh	r2, [r0, #14]
 800dbaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbae:	6183      	str	r3, [r0, #24]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	2208      	movs	r2, #8
 800dbb4:	305c      	adds	r0, #92	; 0x5c
 800dbb6:	f7fe faad 	bl	800c114 <memset>
 800dbba:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <std+0x38>)
 800dbbc:	6263      	str	r3, [r4, #36]	; 0x24
 800dbbe:	4b05      	ldr	r3, [pc, #20]	; (800dbd4 <std+0x3c>)
 800dbc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbc2:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <std+0x40>)
 800dbc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbc6:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <std+0x44>)
 800dbc8:	6224      	str	r4, [r4, #32]
 800dbca:	6323      	str	r3, [r4, #48]	; 0x30
 800dbcc:	bd10      	pop	{r4, pc}
 800dbce:	bf00      	nop
 800dbd0:	0800e7e5 	.word	0x0800e7e5
 800dbd4:	0800e807 	.word	0x0800e807
 800dbd8:	0800e83f 	.word	0x0800e83f
 800dbdc:	0800e863 	.word	0x0800e863

0800dbe0 <_cleanup_r>:
 800dbe0:	4901      	ldr	r1, [pc, #4]	; (800dbe8 <_cleanup_r+0x8>)
 800dbe2:	f000 b885 	b.w	800dcf0 <_fwalk_reent>
 800dbe6:	bf00      	nop
 800dbe8:	0800db45 	.word	0x0800db45

0800dbec <__sfmoreglue>:
 800dbec:	b570      	push	{r4, r5, r6, lr}
 800dbee:	1e4a      	subs	r2, r1, #1
 800dbf0:	2568      	movs	r5, #104	; 0x68
 800dbf2:	4355      	muls	r5, r2
 800dbf4:	460e      	mov	r6, r1
 800dbf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dbfa:	f000 fc49 	bl	800e490 <_malloc_r>
 800dbfe:	4604      	mov	r4, r0
 800dc00:	b140      	cbz	r0, 800dc14 <__sfmoreglue+0x28>
 800dc02:	2100      	movs	r1, #0
 800dc04:	e9c0 1600 	strd	r1, r6, [r0]
 800dc08:	300c      	adds	r0, #12
 800dc0a:	60a0      	str	r0, [r4, #8]
 800dc0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc10:	f7fe fa80 	bl	800c114 <memset>
 800dc14:	4620      	mov	r0, r4
 800dc16:	bd70      	pop	{r4, r5, r6, pc}

0800dc18 <__sinit>:
 800dc18:	6983      	ldr	r3, [r0, #24]
 800dc1a:	b510      	push	{r4, lr}
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	bb33      	cbnz	r3, 800dc6e <__sinit+0x56>
 800dc20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800dc24:	6503      	str	r3, [r0, #80]	; 0x50
 800dc26:	4b12      	ldr	r3, [pc, #72]	; (800dc70 <__sinit+0x58>)
 800dc28:	4a12      	ldr	r2, [pc, #72]	; (800dc74 <__sinit+0x5c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6282      	str	r2, [r0, #40]	; 0x28
 800dc2e:	4298      	cmp	r0, r3
 800dc30:	bf04      	itt	eq
 800dc32:	2301      	moveq	r3, #1
 800dc34:	6183      	streq	r3, [r0, #24]
 800dc36:	f000 f81f 	bl	800dc78 <__sfp>
 800dc3a:	6060      	str	r0, [r4, #4]
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f000 f81b 	bl	800dc78 <__sfp>
 800dc42:	60a0      	str	r0, [r4, #8]
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 f817 	bl	800dc78 <__sfp>
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	60e0      	str	r0, [r4, #12]
 800dc4e:	2104      	movs	r1, #4
 800dc50:	6860      	ldr	r0, [r4, #4]
 800dc52:	f7ff ffa1 	bl	800db98 <std>
 800dc56:	2201      	movs	r2, #1
 800dc58:	2109      	movs	r1, #9
 800dc5a:	68a0      	ldr	r0, [r4, #8]
 800dc5c:	f7ff ff9c 	bl	800db98 <std>
 800dc60:	2202      	movs	r2, #2
 800dc62:	2112      	movs	r1, #18
 800dc64:	68e0      	ldr	r0, [r4, #12]
 800dc66:	f7ff ff97 	bl	800db98 <std>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	61a3      	str	r3, [r4, #24]
 800dc6e:	bd10      	pop	{r4, pc}
 800dc70:	0800f7b8 	.word	0x0800f7b8
 800dc74:	0800dbe1 	.word	0x0800dbe1

0800dc78 <__sfp>:
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <__sfp+0x70>)
 800dc7c:	681e      	ldr	r6, [r3, #0]
 800dc7e:	69b3      	ldr	r3, [r6, #24]
 800dc80:	4607      	mov	r7, r0
 800dc82:	b913      	cbnz	r3, 800dc8a <__sfp+0x12>
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7ff ffc7 	bl	800dc18 <__sinit>
 800dc8a:	3648      	adds	r6, #72	; 0x48
 800dc8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	d503      	bpl.n	800dc9c <__sfp+0x24>
 800dc94:	6833      	ldr	r3, [r6, #0]
 800dc96:	b133      	cbz	r3, 800dca6 <__sfp+0x2e>
 800dc98:	6836      	ldr	r6, [r6, #0]
 800dc9a:	e7f7      	b.n	800dc8c <__sfp+0x14>
 800dc9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dca0:	b16d      	cbz	r5, 800dcbe <__sfp+0x46>
 800dca2:	3468      	adds	r4, #104	; 0x68
 800dca4:	e7f4      	b.n	800dc90 <__sfp+0x18>
 800dca6:	2104      	movs	r1, #4
 800dca8:	4638      	mov	r0, r7
 800dcaa:	f7ff ff9f 	bl	800dbec <__sfmoreglue>
 800dcae:	6030      	str	r0, [r6, #0]
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d1f1      	bne.n	800dc98 <__sfp+0x20>
 800dcb4:	230c      	movs	r3, #12
 800dcb6:	603b      	str	r3, [r7, #0]
 800dcb8:	4604      	mov	r4, r0
 800dcba:	4620      	mov	r0, r4
 800dcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcbe:	4b0b      	ldr	r3, [pc, #44]	; (800dcec <__sfp+0x74>)
 800dcc0:	6665      	str	r5, [r4, #100]	; 0x64
 800dcc2:	e9c4 5500 	strd	r5, r5, [r4]
 800dcc6:	60a5      	str	r5, [r4, #8]
 800dcc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dccc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dcd0:	2208      	movs	r2, #8
 800dcd2:	4629      	mov	r1, r5
 800dcd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dcd8:	f7fe fa1c 	bl	800c114 <memset>
 800dcdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dce4:	e7e9      	b.n	800dcba <__sfp+0x42>
 800dce6:	bf00      	nop
 800dce8:	0800f7b8 	.word	0x0800f7b8
 800dcec:	ffff0001 	.word	0xffff0001

0800dcf0 <_fwalk_reent>:
 800dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf4:	4680      	mov	r8, r0
 800dcf6:	4689      	mov	r9, r1
 800dcf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dcfc:	2600      	movs	r6, #0
 800dcfe:	b914      	cbnz	r4, 800dd06 <_fwalk_reent+0x16>
 800dd00:	4630      	mov	r0, r6
 800dd02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800dd0a:	3f01      	subs	r7, #1
 800dd0c:	d501      	bpl.n	800dd12 <_fwalk_reent+0x22>
 800dd0e:	6824      	ldr	r4, [r4, #0]
 800dd10:	e7f5      	b.n	800dcfe <_fwalk_reent+0xe>
 800dd12:	89ab      	ldrh	r3, [r5, #12]
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d907      	bls.n	800dd28 <_fwalk_reent+0x38>
 800dd18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	d003      	beq.n	800dd28 <_fwalk_reent+0x38>
 800dd20:	4629      	mov	r1, r5
 800dd22:	4640      	mov	r0, r8
 800dd24:	47c8      	blx	r9
 800dd26:	4306      	orrs	r6, r0
 800dd28:	3568      	adds	r5, #104	; 0x68
 800dd2a:	e7ee      	b.n	800dd0a <_fwalk_reent+0x1a>

0800dd2c <_localeconv_r>:
 800dd2c:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <_localeconv_r+0x14>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6a18      	ldr	r0, [r3, #32]
 800dd32:	4b04      	ldr	r3, [pc, #16]	; (800dd44 <_localeconv_r+0x18>)
 800dd34:	2800      	cmp	r0, #0
 800dd36:	bf08      	it	eq
 800dd38:	4618      	moveq	r0, r3
 800dd3a:	30f0      	adds	r0, #240	; 0xf0
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	20001560 	.word	0x20001560
 800dd44:	200015c4 	.word	0x200015c4

0800dd48 <__swhatbuf_r>:
 800dd48:	b570      	push	{r4, r5, r6, lr}
 800dd4a:	460e      	mov	r6, r1
 800dd4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd50:	2900      	cmp	r1, #0
 800dd52:	b096      	sub	sp, #88	; 0x58
 800dd54:	4614      	mov	r4, r2
 800dd56:	461d      	mov	r5, r3
 800dd58:	da07      	bge.n	800dd6a <__swhatbuf_r+0x22>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	602b      	str	r3, [r5, #0]
 800dd5e:	89b3      	ldrh	r3, [r6, #12]
 800dd60:	061a      	lsls	r2, r3, #24
 800dd62:	d410      	bmi.n	800dd86 <__swhatbuf_r+0x3e>
 800dd64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd68:	e00e      	b.n	800dd88 <__swhatbuf_r+0x40>
 800dd6a:	466a      	mov	r2, sp
 800dd6c:	f000 fda0 	bl	800e8b0 <_fstat_r>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	dbf2      	blt.n	800dd5a <__swhatbuf_r+0x12>
 800dd74:	9a01      	ldr	r2, [sp, #4]
 800dd76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dd7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dd7e:	425a      	negs	r2, r3
 800dd80:	415a      	adcs	r2, r3
 800dd82:	602a      	str	r2, [r5, #0]
 800dd84:	e7ee      	b.n	800dd64 <__swhatbuf_r+0x1c>
 800dd86:	2340      	movs	r3, #64	; 0x40
 800dd88:	2000      	movs	r0, #0
 800dd8a:	6023      	str	r3, [r4, #0]
 800dd8c:	b016      	add	sp, #88	; 0x58
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}

0800dd90 <__smakebuf_r>:
 800dd90:	898b      	ldrh	r3, [r1, #12]
 800dd92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd94:	079d      	lsls	r5, r3, #30
 800dd96:	4606      	mov	r6, r0
 800dd98:	460c      	mov	r4, r1
 800dd9a:	d507      	bpl.n	800ddac <__smakebuf_r+0x1c>
 800dd9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	6123      	str	r3, [r4, #16]
 800dda4:	2301      	movs	r3, #1
 800dda6:	6163      	str	r3, [r4, #20]
 800dda8:	b002      	add	sp, #8
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}
 800ddac:	ab01      	add	r3, sp, #4
 800ddae:	466a      	mov	r2, sp
 800ddb0:	f7ff ffca 	bl	800dd48 <__swhatbuf_r>
 800ddb4:	9900      	ldr	r1, [sp, #0]
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f000 fb69 	bl	800e490 <_malloc_r>
 800ddbe:	b948      	cbnz	r0, 800ddd4 <__smakebuf_r+0x44>
 800ddc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddc4:	059a      	lsls	r2, r3, #22
 800ddc6:	d4ef      	bmi.n	800dda8 <__smakebuf_r+0x18>
 800ddc8:	f023 0303 	bic.w	r3, r3, #3
 800ddcc:	f043 0302 	orr.w	r3, r3, #2
 800ddd0:	81a3      	strh	r3, [r4, #12]
 800ddd2:	e7e3      	b.n	800dd9c <__smakebuf_r+0xc>
 800ddd4:	4b0d      	ldr	r3, [pc, #52]	; (800de0c <__smakebuf_r+0x7c>)
 800ddd6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ddd8:	89a3      	ldrh	r3, [r4, #12]
 800ddda:	6020      	str	r0, [r4, #0]
 800dddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dde0:	81a3      	strh	r3, [r4, #12]
 800dde2:	9b00      	ldr	r3, [sp, #0]
 800dde4:	6163      	str	r3, [r4, #20]
 800dde6:	9b01      	ldr	r3, [sp, #4]
 800dde8:	6120      	str	r0, [r4, #16]
 800ddea:	b15b      	cbz	r3, 800de04 <__smakebuf_r+0x74>
 800ddec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddf0:	4630      	mov	r0, r6
 800ddf2:	f000 fd6f 	bl	800e8d4 <_isatty_r>
 800ddf6:	b128      	cbz	r0, 800de04 <__smakebuf_r+0x74>
 800ddf8:	89a3      	ldrh	r3, [r4, #12]
 800ddfa:	f023 0303 	bic.w	r3, r3, #3
 800ddfe:	f043 0301 	orr.w	r3, r3, #1
 800de02:	81a3      	strh	r3, [r4, #12]
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	431d      	orrs	r5, r3
 800de08:	81a5      	strh	r5, [r4, #12]
 800de0a:	e7cd      	b.n	800dda8 <__smakebuf_r+0x18>
 800de0c:	0800dbe1 	.word	0x0800dbe1

0800de10 <malloc>:
 800de10:	4b02      	ldr	r3, [pc, #8]	; (800de1c <malloc+0xc>)
 800de12:	4601      	mov	r1, r0
 800de14:	6818      	ldr	r0, [r3, #0]
 800de16:	f000 bb3b 	b.w	800e490 <_malloc_r>
 800de1a:	bf00      	nop
 800de1c:	20001560 	.word	0x20001560

0800de20 <_Balloc>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800de24:	4604      	mov	r4, r0
 800de26:	460e      	mov	r6, r1
 800de28:	b93d      	cbnz	r5, 800de3a <_Balloc+0x1a>
 800de2a:	2010      	movs	r0, #16
 800de2c:	f7ff fff0 	bl	800de10 <malloc>
 800de30:	6260      	str	r0, [r4, #36]	; 0x24
 800de32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de36:	6005      	str	r5, [r0, #0]
 800de38:	60c5      	str	r5, [r0, #12]
 800de3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800de3c:	68eb      	ldr	r3, [r5, #12]
 800de3e:	b183      	cbz	r3, 800de62 <_Balloc+0x42>
 800de40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de42:	68db      	ldr	r3, [r3, #12]
 800de44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800de48:	b9b8      	cbnz	r0, 800de7a <_Balloc+0x5a>
 800de4a:	2101      	movs	r1, #1
 800de4c:	fa01 f506 	lsl.w	r5, r1, r6
 800de50:	1d6a      	adds	r2, r5, #5
 800de52:	0092      	lsls	r2, r2, #2
 800de54:	4620      	mov	r0, r4
 800de56:	f000 fabf 	bl	800e3d8 <_calloc_r>
 800de5a:	b160      	cbz	r0, 800de76 <_Balloc+0x56>
 800de5c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800de60:	e00e      	b.n	800de80 <_Balloc+0x60>
 800de62:	2221      	movs	r2, #33	; 0x21
 800de64:	2104      	movs	r1, #4
 800de66:	4620      	mov	r0, r4
 800de68:	f000 fab6 	bl	800e3d8 <_calloc_r>
 800de6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de6e:	60e8      	str	r0, [r5, #12]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d1e4      	bne.n	800de40 <_Balloc+0x20>
 800de76:	2000      	movs	r0, #0
 800de78:	bd70      	pop	{r4, r5, r6, pc}
 800de7a:	6802      	ldr	r2, [r0, #0]
 800de7c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800de80:	2300      	movs	r3, #0
 800de82:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de86:	e7f7      	b.n	800de78 <_Balloc+0x58>

0800de88 <_Bfree>:
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800de8c:	4606      	mov	r6, r0
 800de8e:	460d      	mov	r5, r1
 800de90:	b93c      	cbnz	r4, 800dea2 <_Bfree+0x1a>
 800de92:	2010      	movs	r0, #16
 800de94:	f7ff ffbc 	bl	800de10 <malloc>
 800de98:	6270      	str	r0, [r6, #36]	; 0x24
 800de9a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de9e:	6004      	str	r4, [r0, #0]
 800dea0:	60c4      	str	r4, [r0, #12]
 800dea2:	b13d      	cbz	r5, 800deb4 <_Bfree+0x2c>
 800dea4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dea6:	686a      	ldr	r2, [r5, #4]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800deae:	6029      	str	r1, [r5, #0]
 800deb0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800deb4:	bd70      	pop	{r4, r5, r6, pc}

0800deb6 <__multadd>:
 800deb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deba:	690d      	ldr	r5, [r1, #16]
 800debc:	461f      	mov	r7, r3
 800debe:	4606      	mov	r6, r0
 800dec0:	460c      	mov	r4, r1
 800dec2:	f101 0c14 	add.w	ip, r1, #20
 800dec6:	2300      	movs	r3, #0
 800dec8:	f8dc 0000 	ldr.w	r0, [ip]
 800decc:	b281      	uxth	r1, r0
 800dece:	fb02 7101 	mla	r1, r2, r1, r7
 800ded2:	0c0f      	lsrs	r7, r1, #16
 800ded4:	0c00      	lsrs	r0, r0, #16
 800ded6:	fb02 7000 	mla	r0, r2, r0, r7
 800deda:	b289      	uxth	r1, r1
 800dedc:	3301      	adds	r3, #1
 800dede:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dee2:	429d      	cmp	r5, r3
 800dee4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dee8:	f84c 1b04 	str.w	r1, [ip], #4
 800deec:	dcec      	bgt.n	800dec8 <__multadd+0x12>
 800deee:	b1d7      	cbz	r7, 800df26 <__multadd+0x70>
 800def0:	68a3      	ldr	r3, [r4, #8]
 800def2:	42ab      	cmp	r3, r5
 800def4:	dc12      	bgt.n	800df1c <__multadd+0x66>
 800def6:	6861      	ldr	r1, [r4, #4]
 800def8:	4630      	mov	r0, r6
 800defa:	3101      	adds	r1, #1
 800defc:	f7ff ff90 	bl	800de20 <_Balloc>
 800df00:	6922      	ldr	r2, [r4, #16]
 800df02:	3202      	adds	r2, #2
 800df04:	f104 010c 	add.w	r1, r4, #12
 800df08:	4680      	mov	r8, r0
 800df0a:	0092      	lsls	r2, r2, #2
 800df0c:	300c      	adds	r0, #12
 800df0e:	f7fe f8dd 	bl	800c0cc <memcpy>
 800df12:	4621      	mov	r1, r4
 800df14:	4630      	mov	r0, r6
 800df16:	f7ff ffb7 	bl	800de88 <_Bfree>
 800df1a:	4644      	mov	r4, r8
 800df1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df20:	3501      	adds	r5, #1
 800df22:	615f      	str	r7, [r3, #20]
 800df24:	6125      	str	r5, [r4, #16]
 800df26:	4620      	mov	r0, r4
 800df28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800df2c <__hi0bits>:
 800df2c:	0c02      	lsrs	r2, r0, #16
 800df2e:	0412      	lsls	r2, r2, #16
 800df30:	4603      	mov	r3, r0
 800df32:	b9b2      	cbnz	r2, 800df62 <__hi0bits+0x36>
 800df34:	0403      	lsls	r3, r0, #16
 800df36:	2010      	movs	r0, #16
 800df38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800df3c:	bf04      	itt	eq
 800df3e:	021b      	lsleq	r3, r3, #8
 800df40:	3008      	addeq	r0, #8
 800df42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800df46:	bf04      	itt	eq
 800df48:	011b      	lsleq	r3, r3, #4
 800df4a:	3004      	addeq	r0, #4
 800df4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800df50:	bf04      	itt	eq
 800df52:	009b      	lsleq	r3, r3, #2
 800df54:	3002      	addeq	r0, #2
 800df56:	2b00      	cmp	r3, #0
 800df58:	db06      	blt.n	800df68 <__hi0bits+0x3c>
 800df5a:	005b      	lsls	r3, r3, #1
 800df5c:	d503      	bpl.n	800df66 <__hi0bits+0x3a>
 800df5e:	3001      	adds	r0, #1
 800df60:	4770      	bx	lr
 800df62:	2000      	movs	r0, #0
 800df64:	e7e8      	b.n	800df38 <__hi0bits+0xc>
 800df66:	2020      	movs	r0, #32
 800df68:	4770      	bx	lr

0800df6a <__lo0bits>:
 800df6a:	6803      	ldr	r3, [r0, #0]
 800df6c:	f013 0207 	ands.w	r2, r3, #7
 800df70:	4601      	mov	r1, r0
 800df72:	d00b      	beq.n	800df8c <__lo0bits+0x22>
 800df74:	07da      	lsls	r2, r3, #31
 800df76:	d423      	bmi.n	800dfc0 <__lo0bits+0x56>
 800df78:	0798      	lsls	r0, r3, #30
 800df7a:	bf49      	itett	mi
 800df7c:	085b      	lsrmi	r3, r3, #1
 800df7e:	089b      	lsrpl	r3, r3, #2
 800df80:	2001      	movmi	r0, #1
 800df82:	600b      	strmi	r3, [r1, #0]
 800df84:	bf5c      	itt	pl
 800df86:	600b      	strpl	r3, [r1, #0]
 800df88:	2002      	movpl	r0, #2
 800df8a:	4770      	bx	lr
 800df8c:	b298      	uxth	r0, r3
 800df8e:	b9a8      	cbnz	r0, 800dfbc <__lo0bits+0x52>
 800df90:	0c1b      	lsrs	r3, r3, #16
 800df92:	2010      	movs	r0, #16
 800df94:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df98:	bf04      	itt	eq
 800df9a:	0a1b      	lsreq	r3, r3, #8
 800df9c:	3008      	addeq	r0, #8
 800df9e:	071a      	lsls	r2, r3, #28
 800dfa0:	bf04      	itt	eq
 800dfa2:	091b      	lsreq	r3, r3, #4
 800dfa4:	3004      	addeq	r0, #4
 800dfa6:	079a      	lsls	r2, r3, #30
 800dfa8:	bf04      	itt	eq
 800dfaa:	089b      	lsreq	r3, r3, #2
 800dfac:	3002      	addeq	r0, #2
 800dfae:	07da      	lsls	r2, r3, #31
 800dfb0:	d402      	bmi.n	800dfb8 <__lo0bits+0x4e>
 800dfb2:	085b      	lsrs	r3, r3, #1
 800dfb4:	d006      	beq.n	800dfc4 <__lo0bits+0x5a>
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	600b      	str	r3, [r1, #0]
 800dfba:	4770      	bx	lr
 800dfbc:	4610      	mov	r0, r2
 800dfbe:	e7e9      	b.n	800df94 <__lo0bits+0x2a>
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	4770      	bx	lr
 800dfc4:	2020      	movs	r0, #32
 800dfc6:	4770      	bx	lr

0800dfc8 <__i2b>:
 800dfc8:	b510      	push	{r4, lr}
 800dfca:	460c      	mov	r4, r1
 800dfcc:	2101      	movs	r1, #1
 800dfce:	f7ff ff27 	bl	800de20 <_Balloc>
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	6144      	str	r4, [r0, #20]
 800dfd6:	6102      	str	r2, [r0, #16]
 800dfd8:	bd10      	pop	{r4, pc}

0800dfda <__multiply>:
 800dfda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfde:	4614      	mov	r4, r2
 800dfe0:	690a      	ldr	r2, [r1, #16]
 800dfe2:	6923      	ldr	r3, [r4, #16]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	bfb8      	it	lt
 800dfe8:	460b      	movlt	r3, r1
 800dfea:	4688      	mov	r8, r1
 800dfec:	bfbc      	itt	lt
 800dfee:	46a0      	movlt	r8, r4
 800dff0:	461c      	movlt	r4, r3
 800dff2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dff6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dffa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dffe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e002:	eb07 0609 	add.w	r6, r7, r9
 800e006:	42b3      	cmp	r3, r6
 800e008:	bfb8      	it	lt
 800e00a:	3101      	addlt	r1, #1
 800e00c:	f7ff ff08 	bl	800de20 <_Balloc>
 800e010:	f100 0514 	add.w	r5, r0, #20
 800e014:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e018:	462b      	mov	r3, r5
 800e01a:	2200      	movs	r2, #0
 800e01c:	4573      	cmp	r3, lr
 800e01e:	d316      	bcc.n	800e04e <__multiply+0x74>
 800e020:	f104 0214 	add.w	r2, r4, #20
 800e024:	f108 0114 	add.w	r1, r8, #20
 800e028:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e02c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	9b00      	ldr	r3, [sp, #0]
 800e034:	9201      	str	r2, [sp, #4]
 800e036:	4293      	cmp	r3, r2
 800e038:	d80c      	bhi.n	800e054 <__multiply+0x7a>
 800e03a:	2e00      	cmp	r6, #0
 800e03c:	dd03      	ble.n	800e046 <__multiply+0x6c>
 800e03e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e042:	2b00      	cmp	r3, #0
 800e044:	d05d      	beq.n	800e102 <__multiply+0x128>
 800e046:	6106      	str	r6, [r0, #16]
 800e048:	b003      	add	sp, #12
 800e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04e:	f843 2b04 	str.w	r2, [r3], #4
 800e052:	e7e3      	b.n	800e01c <__multiply+0x42>
 800e054:	f8b2 b000 	ldrh.w	fp, [r2]
 800e058:	f1bb 0f00 	cmp.w	fp, #0
 800e05c:	d023      	beq.n	800e0a6 <__multiply+0xcc>
 800e05e:	4689      	mov	r9, r1
 800e060:	46ac      	mov	ip, r5
 800e062:	f04f 0800 	mov.w	r8, #0
 800e066:	f859 4b04 	ldr.w	r4, [r9], #4
 800e06a:	f8dc a000 	ldr.w	sl, [ip]
 800e06e:	b2a3      	uxth	r3, r4
 800e070:	fa1f fa8a 	uxth.w	sl, sl
 800e074:	fb0b a303 	mla	r3, fp, r3, sl
 800e078:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e07c:	f8dc 4000 	ldr.w	r4, [ip]
 800e080:	4443      	add	r3, r8
 800e082:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e086:	fb0b 840a 	mla	r4, fp, sl, r8
 800e08a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e08e:	46e2      	mov	sl, ip
 800e090:	b29b      	uxth	r3, r3
 800e092:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e096:	454f      	cmp	r7, r9
 800e098:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e09c:	f84a 3b04 	str.w	r3, [sl], #4
 800e0a0:	d82b      	bhi.n	800e0fa <__multiply+0x120>
 800e0a2:	f8cc 8004 	str.w	r8, [ip, #4]
 800e0a6:	9b01      	ldr	r3, [sp, #4]
 800e0a8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e0ac:	3204      	adds	r2, #4
 800e0ae:	f1ba 0f00 	cmp.w	sl, #0
 800e0b2:	d020      	beq.n	800e0f6 <__multiply+0x11c>
 800e0b4:	682b      	ldr	r3, [r5, #0]
 800e0b6:	4689      	mov	r9, r1
 800e0b8:	46a8      	mov	r8, r5
 800e0ba:	f04f 0b00 	mov.w	fp, #0
 800e0be:	f8b9 c000 	ldrh.w	ip, [r9]
 800e0c2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e0c6:	fb0a 440c 	mla	r4, sl, ip, r4
 800e0ca:	445c      	add	r4, fp
 800e0cc:	46c4      	mov	ip, r8
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e0d4:	f84c 3b04 	str.w	r3, [ip], #4
 800e0d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0dc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e0e0:	0c1b      	lsrs	r3, r3, #16
 800e0e2:	fb0a b303 	mla	r3, sl, r3, fp
 800e0e6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e0ea:	454f      	cmp	r7, r9
 800e0ec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e0f0:	d805      	bhi.n	800e0fe <__multiply+0x124>
 800e0f2:	f8c8 3004 	str.w	r3, [r8, #4]
 800e0f6:	3504      	adds	r5, #4
 800e0f8:	e79b      	b.n	800e032 <__multiply+0x58>
 800e0fa:	46d4      	mov	ip, sl
 800e0fc:	e7b3      	b.n	800e066 <__multiply+0x8c>
 800e0fe:	46e0      	mov	r8, ip
 800e100:	e7dd      	b.n	800e0be <__multiply+0xe4>
 800e102:	3e01      	subs	r6, #1
 800e104:	e799      	b.n	800e03a <__multiply+0x60>
	...

0800e108 <__pow5mult>:
 800e108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e10c:	4615      	mov	r5, r2
 800e10e:	f012 0203 	ands.w	r2, r2, #3
 800e112:	4606      	mov	r6, r0
 800e114:	460f      	mov	r7, r1
 800e116:	d007      	beq.n	800e128 <__pow5mult+0x20>
 800e118:	3a01      	subs	r2, #1
 800e11a:	4c21      	ldr	r4, [pc, #132]	; (800e1a0 <__pow5mult+0x98>)
 800e11c:	2300      	movs	r3, #0
 800e11e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e122:	f7ff fec8 	bl	800deb6 <__multadd>
 800e126:	4607      	mov	r7, r0
 800e128:	10ad      	asrs	r5, r5, #2
 800e12a:	d035      	beq.n	800e198 <__pow5mult+0x90>
 800e12c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e12e:	b93c      	cbnz	r4, 800e140 <__pow5mult+0x38>
 800e130:	2010      	movs	r0, #16
 800e132:	f7ff fe6d 	bl	800de10 <malloc>
 800e136:	6270      	str	r0, [r6, #36]	; 0x24
 800e138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e13c:	6004      	str	r4, [r0, #0]
 800e13e:	60c4      	str	r4, [r0, #12]
 800e140:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e148:	b94c      	cbnz	r4, 800e15e <__pow5mult+0x56>
 800e14a:	f240 2171 	movw	r1, #625	; 0x271
 800e14e:	4630      	mov	r0, r6
 800e150:	f7ff ff3a 	bl	800dfc8 <__i2b>
 800e154:	2300      	movs	r3, #0
 800e156:	f8c8 0008 	str.w	r0, [r8, #8]
 800e15a:	4604      	mov	r4, r0
 800e15c:	6003      	str	r3, [r0, #0]
 800e15e:	f04f 0800 	mov.w	r8, #0
 800e162:	07eb      	lsls	r3, r5, #31
 800e164:	d50a      	bpl.n	800e17c <__pow5mult+0x74>
 800e166:	4639      	mov	r1, r7
 800e168:	4622      	mov	r2, r4
 800e16a:	4630      	mov	r0, r6
 800e16c:	f7ff ff35 	bl	800dfda <__multiply>
 800e170:	4639      	mov	r1, r7
 800e172:	4681      	mov	r9, r0
 800e174:	4630      	mov	r0, r6
 800e176:	f7ff fe87 	bl	800de88 <_Bfree>
 800e17a:	464f      	mov	r7, r9
 800e17c:	106d      	asrs	r5, r5, #1
 800e17e:	d00b      	beq.n	800e198 <__pow5mult+0x90>
 800e180:	6820      	ldr	r0, [r4, #0]
 800e182:	b938      	cbnz	r0, 800e194 <__pow5mult+0x8c>
 800e184:	4622      	mov	r2, r4
 800e186:	4621      	mov	r1, r4
 800e188:	4630      	mov	r0, r6
 800e18a:	f7ff ff26 	bl	800dfda <__multiply>
 800e18e:	6020      	str	r0, [r4, #0]
 800e190:	f8c0 8000 	str.w	r8, [r0]
 800e194:	4604      	mov	r4, r0
 800e196:	e7e4      	b.n	800e162 <__pow5mult+0x5a>
 800e198:	4638      	mov	r0, r7
 800e19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e19e:	bf00      	nop
 800e1a0:	0800f950 	.word	0x0800f950

0800e1a4 <__lshift>:
 800e1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a8:	460c      	mov	r4, r1
 800e1aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1ae:	6923      	ldr	r3, [r4, #16]
 800e1b0:	6849      	ldr	r1, [r1, #4]
 800e1b2:	eb0a 0903 	add.w	r9, sl, r3
 800e1b6:	68a3      	ldr	r3, [r4, #8]
 800e1b8:	4607      	mov	r7, r0
 800e1ba:	4616      	mov	r6, r2
 800e1bc:	f109 0501 	add.w	r5, r9, #1
 800e1c0:	42ab      	cmp	r3, r5
 800e1c2:	db32      	blt.n	800e22a <__lshift+0x86>
 800e1c4:	4638      	mov	r0, r7
 800e1c6:	f7ff fe2b 	bl	800de20 <_Balloc>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	4680      	mov	r8, r0
 800e1ce:	f100 0114 	add.w	r1, r0, #20
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	4553      	cmp	r3, sl
 800e1d6:	db2b      	blt.n	800e230 <__lshift+0x8c>
 800e1d8:	6920      	ldr	r0, [r4, #16]
 800e1da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1de:	f104 0314 	add.w	r3, r4, #20
 800e1e2:	f016 021f 	ands.w	r2, r6, #31
 800e1e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1ee:	d025      	beq.n	800e23c <__lshift+0x98>
 800e1f0:	f1c2 0e20 	rsb	lr, r2, #32
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	681e      	ldr	r6, [r3, #0]
 800e1f8:	468a      	mov	sl, r1
 800e1fa:	4096      	lsls	r6, r2
 800e1fc:	4330      	orrs	r0, r6
 800e1fe:	f84a 0b04 	str.w	r0, [sl], #4
 800e202:	f853 0b04 	ldr.w	r0, [r3], #4
 800e206:	459c      	cmp	ip, r3
 800e208:	fa20 f00e 	lsr.w	r0, r0, lr
 800e20c:	d814      	bhi.n	800e238 <__lshift+0x94>
 800e20e:	6048      	str	r0, [r1, #4]
 800e210:	b108      	cbz	r0, 800e216 <__lshift+0x72>
 800e212:	f109 0502 	add.w	r5, r9, #2
 800e216:	3d01      	subs	r5, #1
 800e218:	4638      	mov	r0, r7
 800e21a:	f8c8 5010 	str.w	r5, [r8, #16]
 800e21e:	4621      	mov	r1, r4
 800e220:	f7ff fe32 	bl	800de88 <_Bfree>
 800e224:	4640      	mov	r0, r8
 800e226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e22a:	3101      	adds	r1, #1
 800e22c:	005b      	lsls	r3, r3, #1
 800e22e:	e7c7      	b.n	800e1c0 <__lshift+0x1c>
 800e230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e234:	3301      	adds	r3, #1
 800e236:	e7cd      	b.n	800e1d4 <__lshift+0x30>
 800e238:	4651      	mov	r1, sl
 800e23a:	e7dc      	b.n	800e1f6 <__lshift+0x52>
 800e23c:	3904      	subs	r1, #4
 800e23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e242:	f841 2f04 	str.w	r2, [r1, #4]!
 800e246:	459c      	cmp	ip, r3
 800e248:	d8f9      	bhi.n	800e23e <__lshift+0x9a>
 800e24a:	e7e4      	b.n	800e216 <__lshift+0x72>

0800e24c <__mcmp>:
 800e24c:	6903      	ldr	r3, [r0, #16]
 800e24e:	690a      	ldr	r2, [r1, #16]
 800e250:	1a9b      	subs	r3, r3, r2
 800e252:	b530      	push	{r4, r5, lr}
 800e254:	d10c      	bne.n	800e270 <__mcmp+0x24>
 800e256:	0092      	lsls	r2, r2, #2
 800e258:	3014      	adds	r0, #20
 800e25a:	3114      	adds	r1, #20
 800e25c:	1884      	adds	r4, r0, r2
 800e25e:	4411      	add	r1, r2
 800e260:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e264:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e268:	4295      	cmp	r5, r2
 800e26a:	d003      	beq.n	800e274 <__mcmp+0x28>
 800e26c:	d305      	bcc.n	800e27a <__mcmp+0x2e>
 800e26e:	2301      	movs	r3, #1
 800e270:	4618      	mov	r0, r3
 800e272:	bd30      	pop	{r4, r5, pc}
 800e274:	42a0      	cmp	r0, r4
 800e276:	d3f3      	bcc.n	800e260 <__mcmp+0x14>
 800e278:	e7fa      	b.n	800e270 <__mcmp+0x24>
 800e27a:	f04f 33ff 	mov.w	r3, #4294967295
 800e27e:	e7f7      	b.n	800e270 <__mcmp+0x24>

0800e280 <__mdiff>:
 800e280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e284:	460d      	mov	r5, r1
 800e286:	4607      	mov	r7, r0
 800e288:	4611      	mov	r1, r2
 800e28a:	4628      	mov	r0, r5
 800e28c:	4614      	mov	r4, r2
 800e28e:	f7ff ffdd 	bl	800e24c <__mcmp>
 800e292:	1e06      	subs	r6, r0, #0
 800e294:	d108      	bne.n	800e2a8 <__mdiff+0x28>
 800e296:	4631      	mov	r1, r6
 800e298:	4638      	mov	r0, r7
 800e29a:	f7ff fdc1 	bl	800de20 <_Balloc>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2a8:	bfa4      	itt	ge
 800e2aa:	4623      	movge	r3, r4
 800e2ac:	462c      	movge	r4, r5
 800e2ae:	4638      	mov	r0, r7
 800e2b0:	6861      	ldr	r1, [r4, #4]
 800e2b2:	bfa6      	itte	ge
 800e2b4:	461d      	movge	r5, r3
 800e2b6:	2600      	movge	r6, #0
 800e2b8:	2601      	movlt	r6, #1
 800e2ba:	f7ff fdb1 	bl	800de20 <_Balloc>
 800e2be:	692b      	ldr	r3, [r5, #16]
 800e2c0:	60c6      	str	r6, [r0, #12]
 800e2c2:	6926      	ldr	r6, [r4, #16]
 800e2c4:	f105 0914 	add.w	r9, r5, #20
 800e2c8:	f104 0214 	add.w	r2, r4, #20
 800e2cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e2d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e2d4:	f100 0514 	add.w	r5, r0, #20
 800e2d8:	f04f 0e00 	mov.w	lr, #0
 800e2dc:	f852 ab04 	ldr.w	sl, [r2], #4
 800e2e0:	f859 4b04 	ldr.w	r4, [r9], #4
 800e2e4:	fa1e f18a 	uxtah	r1, lr, sl
 800e2e8:	b2a3      	uxth	r3, r4
 800e2ea:	1ac9      	subs	r1, r1, r3
 800e2ec:	0c23      	lsrs	r3, r4, #16
 800e2ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e2f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e2f6:	b289      	uxth	r1, r1
 800e2f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e2fc:	45c8      	cmp	r8, r9
 800e2fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e302:	4694      	mov	ip, r2
 800e304:	f845 3b04 	str.w	r3, [r5], #4
 800e308:	d8e8      	bhi.n	800e2dc <__mdiff+0x5c>
 800e30a:	45bc      	cmp	ip, r7
 800e30c:	d304      	bcc.n	800e318 <__mdiff+0x98>
 800e30e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e312:	b183      	cbz	r3, 800e336 <__mdiff+0xb6>
 800e314:	6106      	str	r6, [r0, #16]
 800e316:	e7c5      	b.n	800e2a4 <__mdiff+0x24>
 800e318:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e31c:	fa1e f381 	uxtah	r3, lr, r1
 800e320:	141a      	asrs	r2, r3, #16
 800e322:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e326:	b29b      	uxth	r3, r3
 800e328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e32c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e330:	f845 3b04 	str.w	r3, [r5], #4
 800e334:	e7e9      	b.n	800e30a <__mdiff+0x8a>
 800e336:	3e01      	subs	r6, #1
 800e338:	e7e9      	b.n	800e30e <__mdiff+0x8e>

0800e33a <__d2b>:
 800e33a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e33e:	460e      	mov	r6, r1
 800e340:	2101      	movs	r1, #1
 800e342:	ec59 8b10 	vmov	r8, r9, d0
 800e346:	4615      	mov	r5, r2
 800e348:	f7ff fd6a 	bl	800de20 <_Balloc>
 800e34c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e350:	4607      	mov	r7, r0
 800e352:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e356:	bb34      	cbnz	r4, 800e3a6 <__d2b+0x6c>
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	f1b8 0300 	subs.w	r3, r8, #0
 800e35e:	d027      	beq.n	800e3b0 <__d2b+0x76>
 800e360:	a802      	add	r0, sp, #8
 800e362:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e366:	f7ff fe00 	bl	800df6a <__lo0bits>
 800e36a:	9900      	ldr	r1, [sp, #0]
 800e36c:	b1f0      	cbz	r0, 800e3ac <__d2b+0x72>
 800e36e:	9a01      	ldr	r2, [sp, #4]
 800e370:	f1c0 0320 	rsb	r3, r0, #32
 800e374:	fa02 f303 	lsl.w	r3, r2, r3
 800e378:	430b      	orrs	r3, r1
 800e37a:	40c2      	lsrs	r2, r0
 800e37c:	617b      	str	r3, [r7, #20]
 800e37e:	9201      	str	r2, [sp, #4]
 800e380:	9b01      	ldr	r3, [sp, #4]
 800e382:	61bb      	str	r3, [r7, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	bf14      	ite	ne
 800e388:	2102      	movne	r1, #2
 800e38a:	2101      	moveq	r1, #1
 800e38c:	6139      	str	r1, [r7, #16]
 800e38e:	b1c4      	cbz	r4, 800e3c2 <__d2b+0x88>
 800e390:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e394:	4404      	add	r4, r0
 800e396:	6034      	str	r4, [r6, #0]
 800e398:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e39c:	6028      	str	r0, [r5, #0]
 800e39e:	4638      	mov	r0, r7
 800e3a0:	b003      	add	sp, #12
 800e3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3aa:	e7d5      	b.n	800e358 <__d2b+0x1e>
 800e3ac:	6179      	str	r1, [r7, #20]
 800e3ae:	e7e7      	b.n	800e380 <__d2b+0x46>
 800e3b0:	a801      	add	r0, sp, #4
 800e3b2:	f7ff fdda 	bl	800df6a <__lo0bits>
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	617b      	str	r3, [r7, #20]
 800e3ba:	2101      	movs	r1, #1
 800e3bc:	6139      	str	r1, [r7, #16]
 800e3be:	3020      	adds	r0, #32
 800e3c0:	e7e5      	b.n	800e38e <__d2b+0x54>
 800e3c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e3c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e3ca:	6030      	str	r0, [r6, #0]
 800e3cc:	6918      	ldr	r0, [r3, #16]
 800e3ce:	f7ff fdad 	bl	800df2c <__hi0bits>
 800e3d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e3d6:	e7e1      	b.n	800e39c <__d2b+0x62>

0800e3d8 <_calloc_r>:
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	fb02 f401 	mul.w	r4, r2, r1
 800e3de:	4621      	mov	r1, r4
 800e3e0:	f000 f856 	bl	800e490 <_malloc_r>
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	b118      	cbz	r0, 800e3f0 <_calloc_r+0x18>
 800e3e8:	4622      	mov	r2, r4
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	f7fd fe92 	bl	800c114 <memset>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}

0800e3f4 <_free_r>:
 800e3f4:	b538      	push	{r3, r4, r5, lr}
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	2900      	cmp	r1, #0
 800e3fa:	d045      	beq.n	800e488 <_free_r+0x94>
 800e3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e400:	1f0c      	subs	r4, r1, #4
 800e402:	2b00      	cmp	r3, #0
 800e404:	bfb8      	it	lt
 800e406:	18e4      	addlt	r4, r4, r3
 800e408:	f000 fa98 	bl	800e93c <__malloc_lock>
 800e40c:	4a1f      	ldr	r2, [pc, #124]	; (800e48c <_free_r+0x98>)
 800e40e:	6813      	ldr	r3, [r2, #0]
 800e410:	4610      	mov	r0, r2
 800e412:	b933      	cbnz	r3, 800e422 <_free_r+0x2e>
 800e414:	6063      	str	r3, [r4, #4]
 800e416:	6014      	str	r4, [r2, #0]
 800e418:	4628      	mov	r0, r5
 800e41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e41e:	f000 ba8e 	b.w	800e93e <__malloc_unlock>
 800e422:	42a3      	cmp	r3, r4
 800e424:	d90c      	bls.n	800e440 <_free_r+0x4c>
 800e426:	6821      	ldr	r1, [r4, #0]
 800e428:	1862      	adds	r2, r4, r1
 800e42a:	4293      	cmp	r3, r2
 800e42c:	bf04      	itt	eq
 800e42e:	681a      	ldreq	r2, [r3, #0]
 800e430:	685b      	ldreq	r3, [r3, #4]
 800e432:	6063      	str	r3, [r4, #4]
 800e434:	bf04      	itt	eq
 800e436:	1852      	addeq	r2, r2, r1
 800e438:	6022      	streq	r2, [r4, #0]
 800e43a:	6004      	str	r4, [r0, #0]
 800e43c:	e7ec      	b.n	800e418 <_free_r+0x24>
 800e43e:	4613      	mov	r3, r2
 800e440:	685a      	ldr	r2, [r3, #4]
 800e442:	b10a      	cbz	r2, 800e448 <_free_r+0x54>
 800e444:	42a2      	cmp	r2, r4
 800e446:	d9fa      	bls.n	800e43e <_free_r+0x4a>
 800e448:	6819      	ldr	r1, [r3, #0]
 800e44a:	1858      	adds	r0, r3, r1
 800e44c:	42a0      	cmp	r0, r4
 800e44e:	d10b      	bne.n	800e468 <_free_r+0x74>
 800e450:	6820      	ldr	r0, [r4, #0]
 800e452:	4401      	add	r1, r0
 800e454:	1858      	adds	r0, r3, r1
 800e456:	4282      	cmp	r2, r0
 800e458:	6019      	str	r1, [r3, #0]
 800e45a:	d1dd      	bne.n	800e418 <_free_r+0x24>
 800e45c:	6810      	ldr	r0, [r2, #0]
 800e45e:	6852      	ldr	r2, [r2, #4]
 800e460:	605a      	str	r2, [r3, #4]
 800e462:	4401      	add	r1, r0
 800e464:	6019      	str	r1, [r3, #0]
 800e466:	e7d7      	b.n	800e418 <_free_r+0x24>
 800e468:	d902      	bls.n	800e470 <_free_r+0x7c>
 800e46a:	230c      	movs	r3, #12
 800e46c:	602b      	str	r3, [r5, #0]
 800e46e:	e7d3      	b.n	800e418 <_free_r+0x24>
 800e470:	6820      	ldr	r0, [r4, #0]
 800e472:	1821      	adds	r1, r4, r0
 800e474:	428a      	cmp	r2, r1
 800e476:	bf04      	itt	eq
 800e478:	6811      	ldreq	r1, [r2, #0]
 800e47a:	6852      	ldreq	r2, [r2, #4]
 800e47c:	6062      	str	r2, [r4, #4]
 800e47e:	bf04      	itt	eq
 800e480:	1809      	addeq	r1, r1, r0
 800e482:	6021      	streq	r1, [r4, #0]
 800e484:	605c      	str	r4, [r3, #4]
 800e486:	e7c7      	b.n	800e418 <_free_r+0x24>
 800e488:	bd38      	pop	{r3, r4, r5, pc}
 800e48a:	bf00      	nop
 800e48c:	20001a88 	.word	0x20001a88

0800e490 <_malloc_r>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	1ccd      	adds	r5, r1, #3
 800e494:	f025 0503 	bic.w	r5, r5, #3
 800e498:	3508      	adds	r5, #8
 800e49a:	2d0c      	cmp	r5, #12
 800e49c:	bf38      	it	cc
 800e49e:	250c      	movcc	r5, #12
 800e4a0:	2d00      	cmp	r5, #0
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	db01      	blt.n	800e4aa <_malloc_r+0x1a>
 800e4a6:	42a9      	cmp	r1, r5
 800e4a8:	d903      	bls.n	800e4b2 <_malloc_r+0x22>
 800e4aa:	230c      	movs	r3, #12
 800e4ac:	6033      	str	r3, [r6, #0]
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	bd70      	pop	{r4, r5, r6, pc}
 800e4b2:	f000 fa43 	bl	800e93c <__malloc_lock>
 800e4b6:	4a21      	ldr	r2, [pc, #132]	; (800e53c <_malloc_r+0xac>)
 800e4b8:	6814      	ldr	r4, [r2, #0]
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	b991      	cbnz	r1, 800e4e4 <_malloc_r+0x54>
 800e4be:	4c20      	ldr	r4, [pc, #128]	; (800e540 <_malloc_r+0xb0>)
 800e4c0:	6823      	ldr	r3, [r4, #0]
 800e4c2:	b91b      	cbnz	r3, 800e4cc <_malloc_r+0x3c>
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f000 f97d 	bl	800e7c4 <_sbrk_r>
 800e4ca:	6020      	str	r0, [r4, #0]
 800e4cc:	4629      	mov	r1, r5
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f000 f978 	bl	800e7c4 <_sbrk_r>
 800e4d4:	1c43      	adds	r3, r0, #1
 800e4d6:	d124      	bne.n	800e522 <_malloc_r+0x92>
 800e4d8:	230c      	movs	r3, #12
 800e4da:	6033      	str	r3, [r6, #0]
 800e4dc:	4630      	mov	r0, r6
 800e4de:	f000 fa2e 	bl	800e93e <__malloc_unlock>
 800e4e2:	e7e4      	b.n	800e4ae <_malloc_r+0x1e>
 800e4e4:	680b      	ldr	r3, [r1, #0]
 800e4e6:	1b5b      	subs	r3, r3, r5
 800e4e8:	d418      	bmi.n	800e51c <_malloc_r+0x8c>
 800e4ea:	2b0b      	cmp	r3, #11
 800e4ec:	d90f      	bls.n	800e50e <_malloc_r+0x7e>
 800e4ee:	600b      	str	r3, [r1, #0]
 800e4f0:	50cd      	str	r5, [r1, r3]
 800e4f2:	18cc      	adds	r4, r1, r3
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f000 fa22 	bl	800e93e <__malloc_unlock>
 800e4fa:	f104 000b 	add.w	r0, r4, #11
 800e4fe:	1d23      	adds	r3, r4, #4
 800e500:	f020 0007 	bic.w	r0, r0, #7
 800e504:	1ac3      	subs	r3, r0, r3
 800e506:	d0d3      	beq.n	800e4b0 <_malloc_r+0x20>
 800e508:	425a      	negs	r2, r3
 800e50a:	50e2      	str	r2, [r4, r3]
 800e50c:	e7d0      	b.n	800e4b0 <_malloc_r+0x20>
 800e50e:	428c      	cmp	r4, r1
 800e510:	684b      	ldr	r3, [r1, #4]
 800e512:	bf16      	itet	ne
 800e514:	6063      	strne	r3, [r4, #4]
 800e516:	6013      	streq	r3, [r2, #0]
 800e518:	460c      	movne	r4, r1
 800e51a:	e7eb      	b.n	800e4f4 <_malloc_r+0x64>
 800e51c:	460c      	mov	r4, r1
 800e51e:	6849      	ldr	r1, [r1, #4]
 800e520:	e7cc      	b.n	800e4bc <_malloc_r+0x2c>
 800e522:	1cc4      	adds	r4, r0, #3
 800e524:	f024 0403 	bic.w	r4, r4, #3
 800e528:	42a0      	cmp	r0, r4
 800e52a:	d005      	beq.n	800e538 <_malloc_r+0xa8>
 800e52c:	1a21      	subs	r1, r4, r0
 800e52e:	4630      	mov	r0, r6
 800e530:	f000 f948 	bl	800e7c4 <_sbrk_r>
 800e534:	3001      	adds	r0, #1
 800e536:	d0cf      	beq.n	800e4d8 <_malloc_r+0x48>
 800e538:	6025      	str	r5, [r4, #0]
 800e53a:	e7db      	b.n	800e4f4 <_malloc_r+0x64>
 800e53c:	20001a88 	.word	0x20001a88
 800e540:	20001a8c 	.word	0x20001a8c

0800e544 <__sfputc_r>:
 800e544:	6893      	ldr	r3, [r2, #8]
 800e546:	3b01      	subs	r3, #1
 800e548:	2b00      	cmp	r3, #0
 800e54a:	b410      	push	{r4}
 800e54c:	6093      	str	r3, [r2, #8]
 800e54e:	da08      	bge.n	800e562 <__sfputc_r+0x1e>
 800e550:	6994      	ldr	r4, [r2, #24]
 800e552:	42a3      	cmp	r3, r4
 800e554:	db01      	blt.n	800e55a <__sfputc_r+0x16>
 800e556:	290a      	cmp	r1, #10
 800e558:	d103      	bne.n	800e562 <__sfputc_r+0x1e>
 800e55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e55e:	f7fe bb67 	b.w	800cc30 <__swbuf_r>
 800e562:	6813      	ldr	r3, [r2, #0]
 800e564:	1c58      	adds	r0, r3, #1
 800e566:	6010      	str	r0, [r2, #0]
 800e568:	7019      	strb	r1, [r3, #0]
 800e56a:	4608      	mov	r0, r1
 800e56c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e570:	4770      	bx	lr

0800e572 <__sfputs_r>:
 800e572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e574:	4606      	mov	r6, r0
 800e576:	460f      	mov	r7, r1
 800e578:	4614      	mov	r4, r2
 800e57a:	18d5      	adds	r5, r2, r3
 800e57c:	42ac      	cmp	r4, r5
 800e57e:	d101      	bne.n	800e584 <__sfputs_r+0x12>
 800e580:	2000      	movs	r0, #0
 800e582:	e007      	b.n	800e594 <__sfputs_r+0x22>
 800e584:	463a      	mov	r2, r7
 800e586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e58a:	4630      	mov	r0, r6
 800e58c:	f7ff ffda 	bl	800e544 <__sfputc_r>
 800e590:	1c43      	adds	r3, r0, #1
 800e592:	d1f3      	bne.n	800e57c <__sfputs_r+0xa>
 800e594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e598 <_vfiprintf_r>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	460c      	mov	r4, r1
 800e59e:	b09d      	sub	sp, #116	; 0x74
 800e5a0:	4617      	mov	r7, r2
 800e5a2:	461d      	mov	r5, r3
 800e5a4:	4606      	mov	r6, r0
 800e5a6:	b118      	cbz	r0, 800e5b0 <_vfiprintf_r+0x18>
 800e5a8:	6983      	ldr	r3, [r0, #24]
 800e5aa:	b90b      	cbnz	r3, 800e5b0 <_vfiprintf_r+0x18>
 800e5ac:	f7ff fb34 	bl	800dc18 <__sinit>
 800e5b0:	4b7c      	ldr	r3, [pc, #496]	; (800e7a4 <_vfiprintf_r+0x20c>)
 800e5b2:	429c      	cmp	r4, r3
 800e5b4:	d158      	bne.n	800e668 <_vfiprintf_r+0xd0>
 800e5b6:	6874      	ldr	r4, [r6, #4]
 800e5b8:	89a3      	ldrh	r3, [r4, #12]
 800e5ba:	0718      	lsls	r0, r3, #28
 800e5bc:	d55e      	bpl.n	800e67c <_vfiprintf_r+0xe4>
 800e5be:	6923      	ldr	r3, [r4, #16]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d05b      	beq.n	800e67c <_vfiprintf_r+0xe4>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5c8:	2320      	movs	r3, #32
 800e5ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5ce:	2330      	movs	r3, #48	; 0x30
 800e5d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5d4:	9503      	str	r5, [sp, #12]
 800e5d6:	f04f 0b01 	mov.w	fp, #1
 800e5da:	46b8      	mov	r8, r7
 800e5dc:	4645      	mov	r5, r8
 800e5de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e5e2:	b10b      	cbz	r3, 800e5e8 <_vfiprintf_r+0x50>
 800e5e4:	2b25      	cmp	r3, #37	; 0x25
 800e5e6:	d154      	bne.n	800e692 <_vfiprintf_r+0xfa>
 800e5e8:	ebb8 0a07 	subs.w	sl, r8, r7
 800e5ec:	d00b      	beq.n	800e606 <_vfiprintf_r+0x6e>
 800e5ee:	4653      	mov	r3, sl
 800e5f0:	463a      	mov	r2, r7
 800e5f2:	4621      	mov	r1, r4
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f7ff ffbc 	bl	800e572 <__sfputs_r>
 800e5fa:	3001      	adds	r0, #1
 800e5fc:	f000 80c2 	beq.w	800e784 <_vfiprintf_r+0x1ec>
 800e600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e602:	4453      	add	r3, sl
 800e604:	9309      	str	r3, [sp, #36]	; 0x24
 800e606:	f898 3000 	ldrb.w	r3, [r8]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	f000 80ba 	beq.w	800e784 <_vfiprintf_r+0x1ec>
 800e610:	2300      	movs	r3, #0
 800e612:	f04f 32ff 	mov.w	r2, #4294967295
 800e616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e61a:	9304      	str	r3, [sp, #16]
 800e61c:	9307      	str	r3, [sp, #28]
 800e61e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e622:	931a      	str	r3, [sp, #104]	; 0x68
 800e624:	46a8      	mov	r8, r5
 800e626:	2205      	movs	r2, #5
 800e628:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e62c:	485e      	ldr	r0, [pc, #376]	; (800e7a8 <_vfiprintf_r+0x210>)
 800e62e:	f7f1 fdd7 	bl	80001e0 <memchr>
 800e632:	9b04      	ldr	r3, [sp, #16]
 800e634:	bb78      	cbnz	r0, 800e696 <_vfiprintf_r+0xfe>
 800e636:	06d9      	lsls	r1, r3, #27
 800e638:	bf44      	itt	mi
 800e63a:	2220      	movmi	r2, #32
 800e63c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e640:	071a      	lsls	r2, r3, #28
 800e642:	bf44      	itt	mi
 800e644:	222b      	movmi	r2, #43	; 0x2b
 800e646:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e64a:	782a      	ldrb	r2, [r5, #0]
 800e64c:	2a2a      	cmp	r2, #42	; 0x2a
 800e64e:	d02a      	beq.n	800e6a6 <_vfiprintf_r+0x10e>
 800e650:	9a07      	ldr	r2, [sp, #28]
 800e652:	46a8      	mov	r8, r5
 800e654:	2000      	movs	r0, #0
 800e656:	250a      	movs	r5, #10
 800e658:	4641      	mov	r1, r8
 800e65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e65e:	3b30      	subs	r3, #48	; 0x30
 800e660:	2b09      	cmp	r3, #9
 800e662:	d969      	bls.n	800e738 <_vfiprintf_r+0x1a0>
 800e664:	b360      	cbz	r0, 800e6c0 <_vfiprintf_r+0x128>
 800e666:	e024      	b.n	800e6b2 <_vfiprintf_r+0x11a>
 800e668:	4b50      	ldr	r3, [pc, #320]	; (800e7ac <_vfiprintf_r+0x214>)
 800e66a:	429c      	cmp	r4, r3
 800e66c:	d101      	bne.n	800e672 <_vfiprintf_r+0xda>
 800e66e:	68b4      	ldr	r4, [r6, #8]
 800e670:	e7a2      	b.n	800e5b8 <_vfiprintf_r+0x20>
 800e672:	4b4f      	ldr	r3, [pc, #316]	; (800e7b0 <_vfiprintf_r+0x218>)
 800e674:	429c      	cmp	r4, r3
 800e676:	bf08      	it	eq
 800e678:	68f4      	ldreq	r4, [r6, #12]
 800e67a:	e79d      	b.n	800e5b8 <_vfiprintf_r+0x20>
 800e67c:	4621      	mov	r1, r4
 800e67e:	4630      	mov	r0, r6
 800e680:	f7fe fb28 	bl	800ccd4 <__swsetup_r>
 800e684:	2800      	cmp	r0, #0
 800e686:	d09d      	beq.n	800e5c4 <_vfiprintf_r+0x2c>
 800e688:	f04f 30ff 	mov.w	r0, #4294967295
 800e68c:	b01d      	add	sp, #116	; 0x74
 800e68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e692:	46a8      	mov	r8, r5
 800e694:	e7a2      	b.n	800e5dc <_vfiprintf_r+0x44>
 800e696:	4a44      	ldr	r2, [pc, #272]	; (800e7a8 <_vfiprintf_r+0x210>)
 800e698:	1a80      	subs	r0, r0, r2
 800e69a:	fa0b f000 	lsl.w	r0, fp, r0
 800e69e:	4318      	orrs	r0, r3
 800e6a0:	9004      	str	r0, [sp, #16]
 800e6a2:	4645      	mov	r5, r8
 800e6a4:	e7be      	b.n	800e624 <_vfiprintf_r+0x8c>
 800e6a6:	9a03      	ldr	r2, [sp, #12]
 800e6a8:	1d11      	adds	r1, r2, #4
 800e6aa:	6812      	ldr	r2, [r2, #0]
 800e6ac:	9103      	str	r1, [sp, #12]
 800e6ae:	2a00      	cmp	r2, #0
 800e6b0:	db01      	blt.n	800e6b6 <_vfiprintf_r+0x11e>
 800e6b2:	9207      	str	r2, [sp, #28]
 800e6b4:	e004      	b.n	800e6c0 <_vfiprintf_r+0x128>
 800e6b6:	4252      	negs	r2, r2
 800e6b8:	f043 0302 	orr.w	r3, r3, #2
 800e6bc:	9207      	str	r2, [sp, #28]
 800e6be:	9304      	str	r3, [sp, #16]
 800e6c0:	f898 3000 	ldrb.w	r3, [r8]
 800e6c4:	2b2e      	cmp	r3, #46	; 0x2e
 800e6c6:	d10e      	bne.n	800e6e6 <_vfiprintf_r+0x14e>
 800e6c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e6cc:	2b2a      	cmp	r3, #42	; 0x2a
 800e6ce:	d138      	bne.n	800e742 <_vfiprintf_r+0x1aa>
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	1d1a      	adds	r2, r3, #4
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	9203      	str	r2, [sp, #12]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	bfb8      	it	lt
 800e6dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6e0:	f108 0802 	add.w	r8, r8, #2
 800e6e4:	9305      	str	r3, [sp, #20]
 800e6e6:	4d33      	ldr	r5, [pc, #204]	; (800e7b4 <_vfiprintf_r+0x21c>)
 800e6e8:	f898 1000 	ldrb.w	r1, [r8]
 800e6ec:	2203      	movs	r2, #3
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f7f1 fd76 	bl	80001e0 <memchr>
 800e6f4:	b140      	cbz	r0, 800e708 <_vfiprintf_r+0x170>
 800e6f6:	2340      	movs	r3, #64	; 0x40
 800e6f8:	1b40      	subs	r0, r0, r5
 800e6fa:	fa03 f000 	lsl.w	r0, r3, r0
 800e6fe:	9b04      	ldr	r3, [sp, #16]
 800e700:	4303      	orrs	r3, r0
 800e702:	f108 0801 	add.w	r8, r8, #1
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	f898 1000 	ldrb.w	r1, [r8]
 800e70c:	482a      	ldr	r0, [pc, #168]	; (800e7b8 <_vfiprintf_r+0x220>)
 800e70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e712:	2206      	movs	r2, #6
 800e714:	f108 0701 	add.w	r7, r8, #1
 800e718:	f7f1 fd62 	bl	80001e0 <memchr>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d037      	beq.n	800e790 <_vfiprintf_r+0x1f8>
 800e720:	4b26      	ldr	r3, [pc, #152]	; (800e7bc <_vfiprintf_r+0x224>)
 800e722:	bb1b      	cbnz	r3, 800e76c <_vfiprintf_r+0x1d4>
 800e724:	9b03      	ldr	r3, [sp, #12]
 800e726:	3307      	adds	r3, #7
 800e728:	f023 0307 	bic.w	r3, r3, #7
 800e72c:	3308      	adds	r3, #8
 800e72e:	9303      	str	r3, [sp, #12]
 800e730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e732:	444b      	add	r3, r9
 800e734:	9309      	str	r3, [sp, #36]	; 0x24
 800e736:	e750      	b.n	800e5da <_vfiprintf_r+0x42>
 800e738:	fb05 3202 	mla	r2, r5, r2, r3
 800e73c:	2001      	movs	r0, #1
 800e73e:	4688      	mov	r8, r1
 800e740:	e78a      	b.n	800e658 <_vfiprintf_r+0xc0>
 800e742:	2300      	movs	r3, #0
 800e744:	f108 0801 	add.w	r8, r8, #1
 800e748:	9305      	str	r3, [sp, #20]
 800e74a:	4619      	mov	r1, r3
 800e74c:	250a      	movs	r5, #10
 800e74e:	4640      	mov	r0, r8
 800e750:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e754:	3a30      	subs	r2, #48	; 0x30
 800e756:	2a09      	cmp	r2, #9
 800e758:	d903      	bls.n	800e762 <_vfiprintf_r+0x1ca>
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d0c3      	beq.n	800e6e6 <_vfiprintf_r+0x14e>
 800e75e:	9105      	str	r1, [sp, #20]
 800e760:	e7c1      	b.n	800e6e6 <_vfiprintf_r+0x14e>
 800e762:	fb05 2101 	mla	r1, r5, r1, r2
 800e766:	2301      	movs	r3, #1
 800e768:	4680      	mov	r8, r0
 800e76a:	e7f0      	b.n	800e74e <_vfiprintf_r+0x1b6>
 800e76c:	ab03      	add	r3, sp, #12
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	4622      	mov	r2, r4
 800e772:	4b13      	ldr	r3, [pc, #76]	; (800e7c0 <_vfiprintf_r+0x228>)
 800e774:	a904      	add	r1, sp, #16
 800e776:	4630      	mov	r0, r6
 800e778:	f7fd fd68 	bl	800c24c <_printf_float>
 800e77c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e780:	4681      	mov	r9, r0
 800e782:	d1d5      	bne.n	800e730 <_vfiprintf_r+0x198>
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	065b      	lsls	r3, r3, #25
 800e788:	f53f af7e 	bmi.w	800e688 <_vfiprintf_r+0xf0>
 800e78c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e78e:	e77d      	b.n	800e68c <_vfiprintf_r+0xf4>
 800e790:	ab03      	add	r3, sp, #12
 800e792:	9300      	str	r3, [sp, #0]
 800e794:	4622      	mov	r2, r4
 800e796:	4b0a      	ldr	r3, [pc, #40]	; (800e7c0 <_vfiprintf_r+0x228>)
 800e798:	a904      	add	r1, sp, #16
 800e79a:	4630      	mov	r0, r6
 800e79c:	f7fe f80c 	bl	800c7b8 <_printf_i>
 800e7a0:	e7ec      	b.n	800e77c <_vfiprintf_r+0x1e4>
 800e7a2:	bf00      	nop
 800e7a4:	0800f81c 	.word	0x0800f81c
 800e7a8:	0800f95c 	.word	0x0800f95c
 800e7ac:	0800f83c 	.word	0x0800f83c
 800e7b0:	0800f7fc 	.word	0x0800f7fc
 800e7b4:	0800f962 	.word	0x0800f962
 800e7b8:	0800f966 	.word	0x0800f966
 800e7bc:	0800c24d 	.word	0x0800c24d
 800e7c0:	0800e573 	.word	0x0800e573

0800e7c4 <_sbrk_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4c06      	ldr	r4, [pc, #24]	; (800e7e0 <_sbrk_r+0x1c>)
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4605      	mov	r5, r0
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	f7f7 fafa 	bl	8005dc8 <_sbrk>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	d102      	bne.n	800e7de <_sbrk_r+0x1a>
 800e7d8:	6823      	ldr	r3, [r4, #0]
 800e7da:	b103      	cbz	r3, 800e7de <_sbrk_r+0x1a>
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	bd38      	pop	{r3, r4, r5, pc}
 800e7e0:	20002cbc 	.word	0x20002cbc

0800e7e4 <__sread>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ec:	f000 f8a8 	bl	800e940 <_read_r>
 800e7f0:	2800      	cmp	r0, #0
 800e7f2:	bfab      	itete	ge
 800e7f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800e7f8:	181b      	addge	r3, r3, r0
 800e7fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7fe:	bfac      	ite	ge
 800e800:	6563      	strge	r3, [r4, #84]	; 0x54
 800e802:	81a3      	strhlt	r3, [r4, #12]
 800e804:	bd10      	pop	{r4, pc}

0800e806 <__swrite>:
 800e806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e80a:	461f      	mov	r7, r3
 800e80c:	898b      	ldrh	r3, [r1, #12]
 800e80e:	05db      	lsls	r3, r3, #23
 800e810:	4605      	mov	r5, r0
 800e812:	460c      	mov	r4, r1
 800e814:	4616      	mov	r6, r2
 800e816:	d505      	bpl.n	800e824 <__swrite+0x1e>
 800e818:	2302      	movs	r3, #2
 800e81a:	2200      	movs	r2, #0
 800e81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e820:	f000 f868 	bl	800e8f4 <_lseek_r>
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e82a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e82e:	81a3      	strh	r3, [r4, #12]
 800e830:	4632      	mov	r2, r6
 800e832:	463b      	mov	r3, r7
 800e834:	4628      	mov	r0, r5
 800e836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e83a:	f000 b817 	b.w	800e86c <_write_r>

0800e83e <__sseek>:
 800e83e:	b510      	push	{r4, lr}
 800e840:	460c      	mov	r4, r1
 800e842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e846:	f000 f855 	bl	800e8f4 <_lseek_r>
 800e84a:	1c43      	adds	r3, r0, #1
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	bf15      	itete	ne
 800e850:	6560      	strne	r0, [r4, #84]	; 0x54
 800e852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e85a:	81a3      	strheq	r3, [r4, #12]
 800e85c:	bf18      	it	ne
 800e85e:	81a3      	strhne	r3, [r4, #12]
 800e860:	bd10      	pop	{r4, pc}

0800e862 <__sclose>:
 800e862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e866:	f000 b813 	b.w	800e890 <_close_r>
	...

0800e86c <_write_r>:
 800e86c:	b538      	push	{r3, r4, r5, lr}
 800e86e:	4c07      	ldr	r4, [pc, #28]	; (800e88c <_write_r+0x20>)
 800e870:	4605      	mov	r5, r0
 800e872:	4608      	mov	r0, r1
 800e874:	4611      	mov	r1, r2
 800e876:	2200      	movs	r2, #0
 800e878:	6022      	str	r2, [r4, #0]
 800e87a:	461a      	mov	r2, r3
 800e87c:	f7f3 ff7a 	bl	8002774 <_write>
 800e880:	1c43      	adds	r3, r0, #1
 800e882:	d102      	bne.n	800e88a <_write_r+0x1e>
 800e884:	6823      	ldr	r3, [r4, #0]
 800e886:	b103      	cbz	r3, 800e88a <_write_r+0x1e>
 800e888:	602b      	str	r3, [r5, #0]
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	20002cbc 	.word	0x20002cbc

0800e890 <_close_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4c06      	ldr	r4, [pc, #24]	; (800e8ac <_close_r+0x1c>)
 800e894:	2300      	movs	r3, #0
 800e896:	4605      	mov	r5, r0
 800e898:	4608      	mov	r0, r1
 800e89a:	6023      	str	r3, [r4, #0]
 800e89c:	f7f3 ff94 	bl	80027c8 <_close>
 800e8a0:	1c43      	adds	r3, r0, #1
 800e8a2:	d102      	bne.n	800e8aa <_close_r+0x1a>
 800e8a4:	6823      	ldr	r3, [r4, #0]
 800e8a6:	b103      	cbz	r3, 800e8aa <_close_r+0x1a>
 800e8a8:	602b      	str	r3, [r5, #0]
 800e8aa:	bd38      	pop	{r3, r4, r5, pc}
 800e8ac:	20002cbc 	.word	0x20002cbc

0800e8b0 <_fstat_r>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	4c07      	ldr	r4, [pc, #28]	; (800e8d0 <_fstat_r+0x20>)
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	4608      	mov	r0, r1
 800e8ba:	4611      	mov	r1, r2
 800e8bc:	6023      	str	r3, [r4, #0]
 800e8be:	f7f3 ffd3 	bl	8002868 <_fstat>
 800e8c2:	1c43      	adds	r3, r0, #1
 800e8c4:	d102      	bne.n	800e8cc <_fstat_r+0x1c>
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	b103      	cbz	r3, 800e8cc <_fstat_r+0x1c>
 800e8ca:	602b      	str	r3, [r5, #0]
 800e8cc:	bd38      	pop	{r3, r4, r5, pc}
 800e8ce:	bf00      	nop
 800e8d0:	20002cbc 	.word	0x20002cbc

0800e8d4 <_isatty_r>:
 800e8d4:	b538      	push	{r3, r4, r5, lr}
 800e8d6:	4c06      	ldr	r4, [pc, #24]	; (800e8f0 <_isatty_r+0x1c>)
 800e8d8:	2300      	movs	r3, #0
 800e8da:	4605      	mov	r5, r0
 800e8dc:	4608      	mov	r0, r1
 800e8de:	6023      	str	r3, [r4, #0]
 800e8e0:	f7f3 ff32 	bl	8002748 <_isatty>
 800e8e4:	1c43      	adds	r3, r0, #1
 800e8e6:	d102      	bne.n	800e8ee <_isatty_r+0x1a>
 800e8e8:	6823      	ldr	r3, [r4, #0]
 800e8ea:	b103      	cbz	r3, 800e8ee <_isatty_r+0x1a>
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	bd38      	pop	{r3, r4, r5, pc}
 800e8f0:	20002cbc 	.word	0x20002cbc

0800e8f4 <_lseek_r>:
 800e8f4:	b538      	push	{r3, r4, r5, lr}
 800e8f6:	4c07      	ldr	r4, [pc, #28]	; (800e914 <_lseek_r+0x20>)
 800e8f8:	4605      	mov	r5, r0
 800e8fa:	4608      	mov	r0, r1
 800e8fc:	4611      	mov	r1, r2
 800e8fe:	2200      	movs	r2, #0
 800e900:	6022      	str	r2, [r4, #0]
 800e902:	461a      	mov	r2, r3
 800e904:	f7f3 ff77 	bl	80027f6 <_lseek>
 800e908:	1c43      	adds	r3, r0, #1
 800e90a:	d102      	bne.n	800e912 <_lseek_r+0x1e>
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	b103      	cbz	r3, 800e912 <_lseek_r+0x1e>
 800e910:	602b      	str	r3, [r5, #0]
 800e912:	bd38      	pop	{r3, r4, r5, pc}
 800e914:	20002cbc 	.word	0x20002cbc

0800e918 <__ascii_mbtowc>:
 800e918:	b082      	sub	sp, #8
 800e91a:	b901      	cbnz	r1, 800e91e <__ascii_mbtowc+0x6>
 800e91c:	a901      	add	r1, sp, #4
 800e91e:	b142      	cbz	r2, 800e932 <__ascii_mbtowc+0x1a>
 800e920:	b14b      	cbz	r3, 800e936 <__ascii_mbtowc+0x1e>
 800e922:	7813      	ldrb	r3, [r2, #0]
 800e924:	600b      	str	r3, [r1, #0]
 800e926:	7812      	ldrb	r2, [r2, #0]
 800e928:	1c10      	adds	r0, r2, #0
 800e92a:	bf18      	it	ne
 800e92c:	2001      	movne	r0, #1
 800e92e:	b002      	add	sp, #8
 800e930:	4770      	bx	lr
 800e932:	4610      	mov	r0, r2
 800e934:	e7fb      	b.n	800e92e <__ascii_mbtowc+0x16>
 800e936:	f06f 0001 	mvn.w	r0, #1
 800e93a:	e7f8      	b.n	800e92e <__ascii_mbtowc+0x16>

0800e93c <__malloc_lock>:
 800e93c:	4770      	bx	lr

0800e93e <__malloc_unlock>:
 800e93e:	4770      	bx	lr

0800e940 <_read_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4c07      	ldr	r4, [pc, #28]	; (800e960 <_read_r+0x20>)
 800e944:	4605      	mov	r5, r0
 800e946:	4608      	mov	r0, r1
 800e948:	4611      	mov	r1, r2
 800e94a:	2200      	movs	r2, #0
 800e94c:	6022      	str	r2, [r4, #0]
 800e94e:	461a      	mov	r2, r3
 800e950:	f7f3 ff62 	bl	8002818 <_read>
 800e954:	1c43      	adds	r3, r0, #1
 800e956:	d102      	bne.n	800e95e <_read_r+0x1e>
 800e958:	6823      	ldr	r3, [r4, #0]
 800e95a:	b103      	cbz	r3, 800e95e <_read_r+0x1e>
 800e95c:	602b      	str	r3, [r5, #0]
 800e95e:	bd38      	pop	{r3, r4, r5, pc}
 800e960:	20002cbc 	.word	0x20002cbc

0800e964 <__ascii_wctomb>:
 800e964:	b149      	cbz	r1, 800e97a <__ascii_wctomb+0x16>
 800e966:	2aff      	cmp	r2, #255	; 0xff
 800e968:	bf85      	ittet	hi
 800e96a:	238a      	movhi	r3, #138	; 0x8a
 800e96c:	6003      	strhi	r3, [r0, #0]
 800e96e:	700a      	strbls	r2, [r1, #0]
 800e970:	f04f 30ff 	movhi.w	r0, #4294967295
 800e974:	bf98      	it	ls
 800e976:	2001      	movls	r0, #1
 800e978:	4770      	bx	lr
 800e97a:	4608      	mov	r0, r1
 800e97c:	4770      	bx	lr
	...

0800e980 <sinf>:
 800e980:	ee10 3a10 	vmov	r3, s0
 800e984:	b507      	push	{r0, r1, r2, lr}
 800e986:	4a1d      	ldr	r2, [pc, #116]	; (800e9fc <sinf+0x7c>)
 800e988:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e98c:	4293      	cmp	r3, r2
 800e98e:	dc05      	bgt.n	800e99c <sinf+0x1c>
 800e990:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800ea00 <sinf+0x80>
 800e994:	2000      	movs	r0, #0
 800e996:	f000 fdd5 	bl	800f544 <__kernel_sinf>
 800e99a:	e004      	b.n	800e9a6 <sinf+0x26>
 800e99c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e9a0:	db04      	blt.n	800e9ac <sinf+0x2c>
 800e9a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e9a6:	b003      	add	sp, #12
 800e9a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9ac:	4668      	mov	r0, sp
 800e9ae:	f000 f9b9 	bl	800ed24 <__ieee754_rem_pio2f>
 800e9b2:	f000 0003 	and.w	r0, r0, #3
 800e9b6:	2801      	cmp	r0, #1
 800e9b8:	d008      	beq.n	800e9cc <sinf+0x4c>
 800e9ba:	2802      	cmp	r0, #2
 800e9bc:	d00d      	beq.n	800e9da <sinf+0x5a>
 800e9be:	b9b0      	cbnz	r0, 800e9ee <sinf+0x6e>
 800e9c0:	2001      	movs	r0, #1
 800e9c2:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9c6:	ed9d 0a00 	vldr	s0, [sp]
 800e9ca:	e7e4      	b.n	800e996 <sinf+0x16>
 800e9cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9d0:	ed9d 0a00 	vldr	s0, [sp]
 800e9d4:	f000 fad6 	bl	800ef84 <__kernel_cosf>
 800e9d8:	e7e5      	b.n	800e9a6 <sinf+0x26>
 800e9da:	2001      	movs	r0, #1
 800e9dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9e0:	ed9d 0a00 	vldr	s0, [sp]
 800e9e4:	f000 fdae 	bl	800f544 <__kernel_sinf>
 800e9e8:	eeb1 0a40 	vneg.f32	s0, s0
 800e9ec:	e7db      	b.n	800e9a6 <sinf+0x26>
 800e9ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9f2:	ed9d 0a00 	vldr	s0, [sp]
 800e9f6:	f000 fac5 	bl	800ef84 <__kernel_cosf>
 800e9fa:	e7f5      	b.n	800e9e8 <sinf+0x68>
 800e9fc:	3f490fd8 	.word	0x3f490fd8
 800ea00:	00000000 	.word	0x00000000

0800ea04 <asinf>:
 800ea04:	b510      	push	{r4, lr}
 800ea06:	ed2d 8b02 	vpush	{d8}
 800ea0a:	4c27      	ldr	r4, [pc, #156]	; (800eaa8 <asinf+0xa4>)
 800ea0c:	b08a      	sub	sp, #40	; 0x28
 800ea0e:	eeb0 8a40 	vmov.f32	s16, s0
 800ea12:	f000 f89f 	bl	800eb54 <__ieee754_asinf>
 800ea16:	f994 3000 	ldrsb.w	r3, [r4]
 800ea1a:	3301      	adds	r3, #1
 800ea1c:	eef0 8a40 	vmov.f32	s17, s0
 800ea20:	d03c      	beq.n	800ea9c <asinf+0x98>
 800ea22:	eeb4 8a48 	vcmp.f32	s16, s16
 800ea26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2a:	d637      	bvs.n	800ea9c <asinf+0x98>
 800ea2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ea30:	f000 fdda 	bl	800f5e8 <fabsf>
 800ea34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ea3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea40:	dd2c      	ble.n	800ea9c <asinf+0x98>
 800ea42:	2301      	movs	r3, #1
 800ea44:	9300      	str	r3, [sp, #0]
 800ea46:	4b19      	ldr	r3, [pc, #100]	; (800eaac <asinf+0xa8>)
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	ee18 0a10 	vmov	r0, s16
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9308      	str	r3, [sp, #32]
 800ea52:	f7f1 fd79 	bl	8000548 <__aeabi_f2d>
 800ea56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea5e:	4814      	ldr	r0, [pc, #80]	; (800eab0 <asinf+0xac>)
 800ea60:	f000 fdba 	bl	800f5d8 <nan>
 800ea64:	f994 3000 	ldrsb.w	r3, [r4]
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ea6e:	d104      	bne.n	800ea7a <asinf+0x76>
 800ea70:	f7fd fb02 	bl	800c078 <__errno>
 800ea74:	2321      	movs	r3, #33	; 0x21
 800ea76:	6003      	str	r3, [r0, #0]
 800ea78:	e004      	b.n	800ea84 <asinf+0x80>
 800ea7a:	4668      	mov	r0, sp
 800ea7c:	f000 fdaa 	bl	800f5d4 <matherr>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d0f5      	beq.n	800ea70 <asinf+0x6c>
 800ea84:	9b08      	ldr	r3, [sp, #32]
 800ea86:	b11b      	cbz	r3, 800ea90 <asinf+0x8c>
 800ea88:	f7fd faf6 	bl	800c078 <__errno>
 800ea8c:	9b08      	ldr	r3, [sp, #32]
 800ea8e:	6003      	str	r3, [r0, #0]
 800ea90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea94:	f7f2 f888 	bl	8000ba8 <__aeabi_d2f>
 800ea98:	ee08 0a90 	vmov	s17, r0
 800ea9c:	eeb0 0a68 	vmov.f32	s0, s17
 800eaa0:	b00a      	add	sp, #40	; 0x28
 800eaa2:	ecbd 8b02 	vpop	{d8}
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	20001730 	.word	0x20001730
 800eaac:	0800fa78 	.word	0x0800fa78
 800eab0:	0800f961 	.word	0x0800f961

0800eab4 <sqrtf>:
 800eab4:	b510      	push	{r4, lr}
 800eab6:	ed2d 8b02 	vpush	{d8}
 800eaba:	b08a      	sub	sp, #40	; 0x28
 800eabc:	eeb0 8a40 	vmov.f32	s16, s0
 800eac0:	f000 fa5c 	bl	800ef7c <__ieee754_sqrtf>
 800eac4:	4b21      	ldr	r3, [pc, #132]	; (800eb4c <sqrtf+0x98>)
 800eac6:	f993 4000 	ldrsb.w	r4, [r3]
 800eaca:	1c63      	adds	r3, r4, #1
 800eacc:	d02c      	beq.n	800eb28 <sqrtf+0x74>
 800eace:	eeb4 8a48 	vcmp.f32	s16, s16
 800ead2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead6:	d627      	bvs.n	800eb28 <sqrtf+0x74>
 800ead8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae0:	d522      	bpl.n	800eb28 <sqrtf+0x74>
 800eae2:	2301      	movs	r3, #1
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	4b1a      	ldr	r3, [pc, #104]	; (800eb50 <sqrtf+0x9c>)
 800eae8:	9301      	str	r3, [sp, #4]
 800eaea:	ee18 0a10 	vmov	r0, s16
 800eaee:	2300      	movs	r3, #0
 800eaf0:	9308      	str	r3, [sp, #32]
 800eaf2:	f7f1 fd29 	bl	8000548 <__aeabi_f2d>
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eafc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb00:	2300      	movs	r3, #0
 800eb02:	b9ac      	cbnz	r4, 800eb30 <sqrtf+0x7c>
 800eb04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb08:	4668      	mov	r0, sp
 800eb0a:	f000 fd63 	bl	800f5d4 <matherr>
 800eb0e:	b1b8      	cbz	r0, 800eb40 <sqrtf+0x8c>
 800eb10:	9b08      	ldr	r3, [sp, #32]
 800eb12:	b11b      	cbz	r3, 800eb1c <sqrtf+0x68>
 800eb14:	f7fd fab0 	bl	800c078 <__errno>
 800eb18:	9b08      	ldr	r3, [sp, #32]
 800eb1a:	6003      	str	r3, [r0, #0]
 800eb1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb20:	f7f2 f842 	bl	8000ba8 <__aeabi_d2f>
 800eb24:	ee00 0a10 	vmov	s0, r0
 800eb28:	b00a      	add	sp, #40	; 0x28
 800eb2a:	ecbd 8b02 	vpop	{d8}
 800eb2e:	bd10      	pop	{r4, pc}
 800eb30:	4610      	mov	r0, r2
 800eb32:	4619      	mov	r1, r3
 800eb34:	f7f1 fe8a 	bl	800084c <__aeabi_ddiv>
 800eb38:	2c02      	cmp	r4, #2
 800eb3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800eb3e:	d1e3      	bne.n	800eb08 <sqrtf+0x54>
 800eb40:	f7fd fa9a 	bl	800c078 <__errno>
 800eb44:	2321      	movs	r3, #33	; 0x21
 800eb46:	6003      	str	r3, [r0, #0]
 800eb48:	e7e2      	b.n	800eb10 <sqrtf+0x5c>
 800eb4a:	bf00      	nop
 800eb4c:	20001730 	.word	0x20001730
 800eb50:	0800fa7e 	.word	0x0800fa7e

0800eb54 <__ieee754_asinf>:
 800eb54:	b538      	push	{r3, r4, r5, lr}
 800eb56:	ee10 5a10 	vmov	r5, s0
 800eb5a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800eb5e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800eb62:	ed2d 8b04 	vpush	{d8-d9}
 800eb66:	d10c      	bne.n	800eb82 <__ieee754_asinf+0x2e>
 800eb68:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800ece4 <__ieee754_asinf+0x190>
 800eb6c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800ece8 <__ieee754_asinf+0x194>
 800eb70:	ee60 7a27 	vmul.f32	s15, s0, s15
 800eb74:	eee0 7a07 	vfma.f32	s15, s0, s14
 800eb78:	eeb0 0a67 	vmov.f32	s0, s15
 800eb7c:	ecbd 8b04 	vpop	{d8-d9}
 800eb80:	bd38      	pop	{r3, r4, r5, pc}
 800eb82:	dd04      	ble.n	800eb8e <__ieee754_asinf+0x3a>
 800eb84:	ee70 7a40 	vsub.f32	s15, s0, s0
 800eb88:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800eb8c:	e7f6      	b.n	800eb7c <__ieee754_asinf+0x28>
 800eb8e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800eb92:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800eb96:	da0b      	bge.n	800ebb0 <__ieee754_asinf+0x5c>
 800eb98:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800eb9c:	da52      	bge.n	800ec44 <__ieee754_asinf+0xf0>
 800eb9e:	eddf 7a53 	vldr	s15, [pc, #332]	; 800ecec <__ieee754_asinf+0x198>
 800eba2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800eba6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800ebaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebae:	dce5      	bgt.n	800eb7c <__ieee754_asinf+0x28>
 800ebb0:	f000 fd1a 	bl	800f5e8 <fabsf>
 800ebb4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800ebb8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800ebbc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800ebc0:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800ecf0 <__ieee754_asinf+0x19c>
 800ebc4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ecf4 <__ieee754_asinf+0x1a0>
 800ebc8:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800ecf8 <__ieee754_asinf+0x1a4>
 800ebcc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800ebd0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ecfc <__ieee754_asinf+0x1a8>
 800ebd4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ebd8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ed00 <__ieee754_asinf+0x1ac>
 800ebdc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ebe0:	eddf 7a48 	vldr	s15, [pc, #288]	; 800ed04 <__ieee754_asinf+0x1b0>
 800ebe4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ebe8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ed08 <__ieee754_asinf+0x1b4>
 800ebec:	eea7 9a88 	vfma.f32	s18, s15, s16
 800ebf0:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ed0c <__ieee754_asinf+0x1b8>
 800ebf4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800ebf8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800ed10 <__ieee754_asinf+0x1bc>
 800ebfc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ec00:	eddf 7a44 	vldr	s15, [pc, #272]	; 800ed14 <__ieee754_asinf+0x1c0>
 800ec04:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ec08:	eeb0 0a48 	vmov.f32	s0, s16
 800ec0c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800ec10:	f000 f9b4 	bl	800ef7c <__ieee754_sqrtf>
 800ec14:	4b40      	ldr	r3, [pc, #256]	; (800ed18 <__ieee754_asinf+0x1c4>)
 800ec16:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ec1a:	429c      	cmp	r4, r3
 800ec1c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ec20:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ec24:	dd3d      	ble.n	800eca2 <__ieee754_asinf+0x14e>
 800ec26:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ec2a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800ed1c <__ieee754_asinf+0x1c8>
 800ec2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ec32:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800ece8 <__ieee754_asinf+0x194>
 800ec36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec3a:	2d00      	cmp	r5, #0
 800ec3c:	bfd8      	it	le
 800ec3e:	eeb1 0a40 	vnegle.f32	s0, s0
 800ec42:	e79b      	b.n	800eb7c <__ieee754_asinf+0x28>
 800ec44:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ec48:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ecf0 <__ieee754_asinf+0x19c>
 800ec4c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800ecf4 <__ieee754_asinf+0x1a0>
 800ec50:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800ed08 <__ieee754_asinf+0x1b4>
 800ec54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ec58:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ecfc <__ieee754_asinf+0x1a8>
 800ec5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec60:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800ed00 <__ieee754_asinf+0x1ac>
 800ec64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ec68:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ed04 <__ieee754_asinf+0x1b0>
 800ec6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ec70:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800ecf8 <__ieee754_asinf+0x1a4>
 800ec74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ec78:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ed0c <__ieee754_asinf+0x1b8>
 800ec7c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ec80:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800ed10 <__ieee754_asinf+0x1bc>
 800ec84:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ec88:	eddf 6a22 	vldr	s13, [pc, #136]	; 800ed14 <__ieee754_asinf+0x1c0>
 800ec8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ec90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec94:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ec98:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ec9c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800eca0:	e76c      	b.n	800eb7c <__ieee754_asinf+0x28>
 800eca2:	ee10 3a10 	vmov	r3, s0
 800eca6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ecaa:	f023 030f 	bic.w	r3, r3, #15
 800ecae:	ee07 3a90 	vmov	s15, r3
 800ecb2:	eef1 6a67 	vneg.f32	s13, s15
 800ecb6:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800ecba:	ee70 5a00 	vadd.f32	s11, s0, s0
 800ecbe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ecc2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ece4 <__ieee754_asinf+0x190>
 800ecc6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800ecca:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ed20 <__ieee754_asinf+0x1cc>
 800ecce:	eee5 7a47 	vfms.f32	s15, s10, s14
 800ecd2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800ecd6:	eeb0 6a40 	vmov.f32	s12, s0
 800ecda:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ecde:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ece2:	e7a8      	b.n	800ec36 <__ieee754_asinf+0xe2>
 800ece4:	b33bbd2e 	.word	0xb33bbd2e
 800ece8:	3fc90fdb 	.word	0x3fc90fdb
 800ecec:	7149f2ca 	.word	0x7149f2ca
 800ecf0:	3811ef08 	.word	0x3811ef08
 800ecf4:	3a4f7f04 	.word	0x3a4f7f04
 800ecf8:	3e2aaaab 	.word	0x3e2aaaab
 800ecfc:	bd241146 	.word	0xbd241146
 800ed00:	3e4e0aa8 	.word	0x3e4e0aa8
 800ed04:	bea6b090 	.word	0xbea6b090
 800ed08:	3d9dc62e 	.word	0x3d9dc62e
 800ed0c:	bf303361 	.word	0xbf303361
 800ed10:	4001572d 	.word	0x4001572d
 800ed14:	c019d139 	.word	0xc019d139
 800ed18:	3f799999 	.word	0x3f799999
 800ed1c:	333bbd2e 	.word	0x333bbd2e
 800ed20:	3f490fdb 	.word	0x3f490fdb

0800ed24 <__ieee754_rem_pio2f>:
 800ed24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed26:	ee10 6a10 	vmov	r6, s0
 800ed2a:	4b86      	ldr	r3, [pc, #536]	; (800ef44 <__ieee754_rem_pio2f+0x220>)
 800ed2c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800ed30:	429c      	cmp	r4, r3
 800ed32:	b087      	sub	sp, #28
 800ed34:	4605      	mov	r5, r0
 800ed36:	dc05      	bgt.n	800ed44 <__ieee754_rem_pio2f+0x20>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	ed85 0a00 	vstr	s0, [r5]
 800ed3e:	6043      	str	r3, [r0, #4]
 800ed40:	2000      	movs	r0, #0
 800ed42:	e020      	b.n	800ed86 <__ieee754_rem_pio2f+0x62>
 800ed44:	4b80      	ldr	r3, [pc, #512]	; (800ef48 <__ieee754_rem_pio2f+0x224>)
 800ed46:	429c      	cmp	r4, r3
 800ed48:	dc38      	bgt.n	800edbc <__ieee754_rem_pio2f+0x98>
 800ed4a:	2e00      	cmp	r6, #0
 800ed4c:	f024 040f 	bic.w	r4, r4, #15
 800ed50:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800ef4c <__ieee754_rem_pio2f+0x228>
 800ed54:	4b7e      	ldr	r3, [pc, #504]	; (800ef50 <__ieee754_rem_pio2f+0x22c>)
 800ed56:	dd18      	ble.n	800ed8a <__ieee754_rem_pio2f+0x66>
 800ed58:	429c      	cmp	r4, r3
 800ed5a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ed5e:	bf09      	itett	eq
 800ed60:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800ef54 <__ieee754_rem_pio2f+0x230>
 800ed64:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800ef58 <__ieee754_rem_pio2f+0x234>
 800ed68:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ed6c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800ef5c <__ieee754_rem_pio2f+0x238>
 800ed70:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800ed74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ed78:	edc0 6a00 	vstr	s13, [r0]
 800ed7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed80:	edc0 7a01 	vstr	s15, [r0, #4]
 800ed84:	2001      	movs	r0, #1
 800ed86:	b007      	add	sp, #28
 800ed88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed8a:	429c      	cmp	r4, r3
 800ed8c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ed90:	bf09      	itett	eq
 800ed92:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800ef54 <__ieee754_rem_pio2f+0x230>
 800ed96:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800ef58 <__ieee754_rem_pio2f+0x234>
 800ed9a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ed9e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800ef5c <__ieee754_rem_pio2f+0x238>
 800eda2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800eda6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800edaa:	edc0 6a00 	vstr	s13, [r0]
 800edae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edb2:	edc0 7a01 	vstr	s15, [r0, #4]
 800edb6:	f04f 30ff 	mov.w	r0, #4294967295
 800edba:	e7e4      	b.n	800ed86 <__ieee754_rem_pio2f+0x62>
 800edbc:	4b68      	ldr	r3, [pc, #416]	; (800ef60 <__ieee754_rem_pio2f+0x23c>)
 800edbe:	429c      	cmp	r4, r3
 800edc0:	dc71      	bgt.n	800eea6 <__ieee754_rem_pio2f+0x182>
 800edc2:	f000 fc11 	bl	800f5e8 <fabsf>
 800edc6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ef64 <__ieee754_rem_pio2f+0x240>
 800edca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800edce:	eee0 7a07 	vfma.f32	s15, s0, s14
 800edd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800edd6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800edda:	ee17 0a90 	vmov	r0, s15
 800edde:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800ef4c <__ieee754_rem_pio2f+0x228>
 800ede2:	eeb1 7a46 	vneg.f32	s14, s12
 800ede6:	eea7 0a27 	vfma.f32	s0, s14, s15
 800edea:	281f      	cmp	r0, #31
 800edec:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800ef58 <__ieee754_rem_pio2f+0x234>
 800edf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800edf4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800edf8:	ee16 3a90 	vmov	r3, s13
 800edfc:	dc1c      	bgt.n	800ee38 <__ieee754_rem_pio2f+0x114>
 800edfe:	1e47      	subs	r7, r0, #1
 800ee00:	4959      	ldr	r1, [pc, #356]	; (800ef68 <__ieee754_rem_pio2f+0x244>)
 800ee02:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ee06:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ee0a:	428a      	cmp	r2, r1
 800ee0c:	d014      	beq.n	800ee38 <__ieee754_rem_pio2f+0x114>
 800ee0e:	602b      	str	r3, [r5, #0]
 800ee10:	ed95 7a00 	vldr	s14, [r5]
 800ee14:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ee18:	2e00      	cmp	r6, #0
 800ee1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ee1e:	ed85 0a01 	vstr	s0, [r5, #4]
 800ee22:	dab0      	bge.n	800ed86 <__ieee754_rem_pio2f+0x62>
 800ee24:	eeb1 7a47 	vneg.f32	s14, s14
 800ee28:	eeb1 0a40 	vneg.f32	s0, s0
 800ee2c:	ed85 7a00 	vstr	s14, [r5]
 800ee30:	ed85 0a01 	vstr	s0, [r5, #4]
 800ee34:	4240      	negs	r0, r0
 800ee36:	e7a6      	b.n	800ed86 <__ieee754_rem_pio2f+0x62>
 800ee38:	15e4      	asrs	r4, r4, #23
 800ee3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee3e:	1aa2      	subs	r2, r4, r2
 800ee40:	2a08      	cmp	r2, #8
 800ee42:	dde4      	ble.n	800ee0e <__ieee754_rem_pio2f+0xea>
 800ee44:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ef54 <__ieee754_rem_pio2f+0x230>
 800ee48:	eef0 6a40 	vmov.f32	s13, s0
 800ee4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ee50:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ee54:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ee58:	eddf 7a40 	vldr	s15, [pc, #256]	; 800ef5c <__ieee754_rem_pio2f+0x238>
 800ee5c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800ee60:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ee64:	eef0 7a40 	vmov.f32	s15, s0
 800ee68:	ee15 3a90 	vmov	r3, s11
 800ee6c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee70:	1aa4      	subs	r4, r4, r2
 800ee72:	2c19      	cmp	r4, #25
 800ee74:	dc04      	bgt.n	800ee80 <__ieee754_rem_pio2f+0x15c>
 800ee76:	edc5 5a00 	vstr	s11, [r5]
 800ee7a:	eeb0 0a66 	vmov.f32	s0, s13
 800ee7e:	e7c7      	b.n	800ee10 <__ieee754_rem_pio2f+0xec>
 800ee80:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800ef6c <__ieee754_rem_pio2f+0x248>
 800ee84:	eeb0 0a66 	vmov.f32	s0, s13
 800ee88:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ee8c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ee90:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ee94:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ef70 <__ieee754_rem_pio2f+0x24c>
 800ee98:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800ee9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eea0:	ed85 7a00 	vstr	s14, [r5]
 800eea4:	e7b4      	b.n	800ee10 <__ieee754_rem_pio2f+0xec>
 800eea6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800eeaa:	db06      	blt.n	800eeba <__ieee754_rem_pio2f+0x196>
 800eeac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800eeb0:	edc0 7a01 	vstr	s15, [r0, #4]
 800eeb4:	edc0 7a00 	vstr	s15, [r0]
 800eeb8:	e742      	b.n	800ed40 <__ieee754_rem_pio2f+0x1c>
 800eeba:	15e2      	asrs	r2, r4, #23
 800eebc:	3a86      	subs	r2, #134	; 0x86
 800eebe:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800eec2:	ee07 3a90 	vmov	s15, r3
 800eec6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800eeca:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800ef74 <__ieee754_rem_pio2f+0x250>
 800eece:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eed6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800eeda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eede:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800eee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eeea:	ed8d 7a04 	vstr	s14, [sp, #16]
 800eeee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eef2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefa:	edcd 7a05 	vstr	s15, [sp, #20]
 800eefe:	d11e      	bne.n	800ef3e <__ieee754_rem_pio2f+0x21a>
 800ef00:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ef04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef08:	bf0c      	ite	eq
 800ef0a:	2301      	moveq	r3, #1
 800ef0c:	2302      	movne	r3, #2
 800ef0e:	491a      	ldr	r1, [pc, #104]	; (800ef78 <__ieee754_rem_pio2f+0x254>)
 800ef10:	9101      	str	r1, [sp, #4]
 800ef12:	2102      	movs	r1, #2
 800ef14:	9100      	str	r1, [sp, #0]
 800ef16:	a803      	add	r0, sp, #12
 800ef18:	4629      	mov	r1, r5
 800ef1a:	f000 f891 	bl	800f040 <__kernel_rem_pio2f>
 800ef1e:	2e00      	cmp	r6, #0
 800ef20:	f6bf af31 	bge.w	800ed86 <__ieee754_rem_pio2f+0x62>
 800ef24:	edd5 7a00 	vldr	s15, [r5]
 800ef28:	eef1 7a67 	vneg.f32	s15, s15
 800ef2c:	edc5 7a00 	vstr	s15, [r5]
 800ef30:	edd5 7a01 	vldr	s15, [r5, #4]
 800ef34:	eef1 7a67 	vneg.f32	s15, s15
 800ef38:	edc5 7a01 	vstr	s15, [r5, #4]
 800ef3c:	e77a      	b.n	800ee34 <__ieee754_rem_pio2f+0x110>
 800ef3e:	2303      	movs	r3, #3
 800ef40:	e7e5      	b.n	800ef0e <__ieee754_rem_pio2f+0x1ea>
 800ef42:	bf00      	nop
 800ef44:	3f490fd8 	.word	0x3f490fd8
 800ef48:	4016cbe3 	.word	0x4016cbe3
 800ef4c:	3fc90f80 	.word	0x3fc90f80
 800ef50:	3fc90fd0 	.word	0x3fc90fd0
 800ef54:	37354400 	.word	0x37354400
 800ef58:	37354443 	.word	0x37354443
 800ef5c:	2e85a308 	.word	0x2e85a308
 800ef60:	43490f80 	.word	0x43490f80
 800ef64:	3f22f984 	.word	0x3f22f984
 800ef68:	0800fa84 	.word	0x0800fa84
 800ef6c:	2e85a300 	.word	0x2e85a300
 800ef70:	248d3132 	.word	0x248d3132
 800ef74:	43800000 	.word	0x43800000
 800ef78:	0800fb04 	.word	0x0800fb04

0800ef7c <__ieee754_sqrtf>:
 800ef7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ef80:	4770      	bx	lr
	...

0800ef84 <__kernel_cosf>:
 800ef84:	ee10 3a10 	vmov	r3, s0
 800ef88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef8c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ef90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef94:	da05      	bge.n	800efa2 <__kernel_cosf+0x1e>
 800ef96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ef9a:	ee17 2a90 	vmov	r2, s15
 800ef9e:	2a00      	cmp	r2, #0
 800efa0:	d03b      	beq.n	800f01a <__kernel_cosf+0x96>
 800efa2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800efa6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800efaa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f020 <__kernel_cosf+0x9c>
 800efae:	4a1d      	ldr	r2, [pc, #116]	; (800f024 <__kernel_cosf+0xa0>)
 800efb0:	ee66 7a07 	vmul.f32	s15, s12, s14
 800efb4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800f028 <__kernel_cosf+0xa4>
 800efb8:	eea6 7a25 	vfma.f32	s14, s12, s11
 800efbc:	4293      	cmp	r3, r2
 800efbe:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800f02c <__kernel_cosf+0xa8>
 800efc2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800efc6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800f030 <__kernel_cosf+0xac>
 800efca:	eea5 7a86 	vfma.f32	s14, s11, s12
 800efce:	eddf 5a19 	vldr	s11, [pc, #100]	; 800f034 <__kernel_cosf+0xb0>
 800efd2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800efd6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800f038 <__kernel_cosf+0xb4>
 800efda:	eea5 7a86 	vfma.f32	s14, s11, s12
 800efde:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800efe2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800efe6:	eee6 0a07 	vfma.f32	s1, s12, s14
 800efea:	dc04      	bgt.n	800eff6 <__kernel_cosf+0x72>
 800efec:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800eff0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800eff4:	4770      	bx	lr
 800eff6:	4a11      	ldr	r2, [pc, #68]	; (800f03c <__kernel_cosf+0xb8>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	bfda      	itte	le
 800effc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f000:	ee07 3a10 	vmovle	s14, r3
 800f004:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800f008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f00c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800f010:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f014:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f018:	4770      	bx	lr
 800f01a:	eeb0 0a66 	vmov.f32	s0, s13
 800f01e:	4770      	bx	lr
 800f020:	ad47d74e 	.word	0xad47d74e
 800f024:	3e999999 	.word	0x3e999999
 800f028:	310f74f6 	.word	0x310f74f6
 800f02c:	b493f27c 	.word	0xb493f27c
 800f030:	37d00d01 	.word	0x37d00d01
 800f034:	bab60b61 	.word	0xbab60b61
 800f038:	3d2aaaab 	.word	0x3d2aaaab
 800f03c:	3f480000 	.word	0x3f480000

0800f040 <__kernel_rem_pio2f>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	ed2d 8b04 	vpush	{d8-d9}
 800f048:	b0d7      	sub	sp, #348	; 0x15c
 800f04a:	469b      	mov	fp, r3
 800f04c:	460e      	mov	r6, r1
 800f04e:	4bbe      	ldr	r3, [pc, #760]	; (800f348 <__kernel_rem_pio2f+0x308>)
 800f050:	9964      	ldr	r1, [sp, #400]	; 0x190
 800f052:	9002      	str	r0, [sp, #8]
 800f054:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800f058:	9865      	ldr	r0, [sp, #404]	; 0x194
 800f05a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800f358 <__kernel_rem_pio2f+0x318>
 800f05e:	1ed1      	subs	r1, r2, #3
 800f060:	2308      	movs	r3, #8
 800f062:	fb91 f1f3 	sdiv	r1, r1, r3
 800f066:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800f06a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800f06e:	1c4c      	adds	r4, r1, #1
 800f070:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800f074:	eba1 050a 	sub.w	r5, r1, sl
 800f078:	aa1a      	add	r2, sp, #104	; 0x68
 800f07a:	eb09 070a 	add.w	r7, r9, sl
 800f07e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800f082:	4696      	mov	lr, r2
 800f084:	2300      	movs	r3, #0
 800f086:	42bb      	cmp	r3, r7
 800f088:	dd0f      	ble.n	800f0aa <__kernel_rem_pio2f+0x6a>
 800f08a:	af42      	add	r7, sp, #264	; 0x108
 800f08c:	2200      	movs	r2, #0
 800f08e:	454a      	cmp	r2, r9
 800f090:	dc27      	bgt.n	800f0e2 <__kernel_rem_pio2f+0xa2>
 800f092:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800f096:	eb0b 0302 	add.w	r3, fp, r2
 800f09a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800f09e:	9d02      	ldr	r5, [sp, #8]
 800f0a0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800f358 <__kernel_rem_pio2f+0x318>
 800f0a4:	f04f 0c00 	mov.w	ip, #0
 800f0a8:	e015      	b.n	800f0d6 <__kernel_rem_pio2f+0x96>
 800f0aa:	42dd      	cmn	r5, r3
 800f0ac:	bf5d      	ittte	pl
 800f0ae:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800f0b2:	ee07 2a90 	vmovpl	s15, r2
 800f0b6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f0ba:	eef0 7a47 	vmovmi.f32	s15, s14
 800f0be:	ecee 7a01 	vstmia	lr!, {s15}
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	e7df      	b.n	800f086 <__kernel_rem_pio2f+0x46>
 800f0c6:	ecf5 6a01 	vldmia	r5!, {s13}
 800f0ca:	ed33 7a01 	vldmdb	r3!, {s14}
 800f0ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f0d2:	f10c 0c01 	add.w	ip, ip, #1
 800f0d6:	45d4      	cmp	ip, sl
 800f0d8:	ddf5      	ble.n	800f0c6 <__kernel_rem_pio2f+0x86>
 800f0da:	ece7 7a01 	vstmia	r7!, {s15}
 800f0de:	3201      	adds	r2, #1
 800f0e0:	e7d5      	b.n	800f08e <__kernel_rem_pio2f+0x4e>
 800f0e2:	ab06      	add	r3, sp, #24
 800f0e4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800f354 <__kernel_rem_pio2f+0x314>
 800f0ee:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800f350 <__kernel_rem_pio2f+0x310>
 800f0f2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800f0f6:	9303      	str	r3, [sp, #12]
 800f0f8:	464d      	mov	r5, r9
 800f0fa:	ab56      	add	r3, sp, #344	; 0x158
 800f0fc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800f100:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f104:	3f01      	subs	r7, #1
 800f106:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800f10a:	00bf      	lsls	r7, r7, #2
 800f10c:	ab56      	add	r3, sp, #344	; 0x158
 800f10e:	19da      	adds	r2, r3, r7
 800f110:	3a4c      	subs	r2, #76	; 0x4c
 800f112:	2300      	movs	r3, #0
 800f114:	1ae9      	subs	r1, r5, r3
 800f116:	2900      	cmp	r1, #0
 800f118:	dc4c      	bgt.n	800f1b4 <__kernel_rem_pio2f+0x174>
 800f11a:	4620      	mov	r0, r4
 800f11c:	f000 faae 	bl	800f67c <scalbnf>
 800f120:	eeb0 8a40 	vmov.f32	s16, s0
 800f124:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f128:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f12c:	f000 fa64 	bl	800f5f8 <floorf>
 800f130:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f134:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f138:	2c00      	cmp	r4, #0
 800f13a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f13e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f146:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f14a:	dd48      	ble.n	800f1de <__kernel_rem_pio2f+0x19e>
 800f14c:	1e69      	subs	r1, r5, #1
 800f14e:	ab06      	add	r3, sp, #24
 800f150:	f1c4 0008 	rsb	r0, r4, #8
 800f154:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800f158:	9a01      	ldr	r2, [sp, #4]
 800f15a:	fa4c f300 	asr.w	r3, ip, r0
 800f15e:	441a      	add	r2, r3
 800f160:	4083      	lsls	r3, r0
 800f162:	9201      	str	r2, [sp, #4]
 800f164:	ebac 0203 	sub.w	r2, ip, r3
 800f168:	ab06      	add	r3, sp, #24
 800f16a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f16e:	f1c4 0307 	rsb	r3, r4, #7
 800f172:	fa42 f803 	asr.w	r8, r2, r3
 800f176:	f1b8 0f00 	cmp.w	r8, #0
 800f17a:	dd41      	ble.n	800f200 <__kernel_rem_pio2f+0x1c0>
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	2000      	movs	r0, #0
 800f180:	3301      	adds	r3, #1
 800f182:	9301      	str	r3, [sp, #4]
 800f184:	4601      	mov	r1, r0
 800f186:	4285      	cmp	r5, r0
 800f188:	dc6d      	bgt.n	800f266 <__kernel_rem_pio2f+0x226>
 800f18a:	2c00      	cmp	r4, #0
 800f18c:	dd04      	ble.n	800f198 <__kernel_rem_pio2f+0x158>
 800f18e:	2c01      	cmp	r4, #1
 800f190:	d07e      	beq.n	800f290 <__kernel_rem_pio2f+0x250>
 800f192:	2c02      	cmp	r4, #2
 800f194:	f000 8086 	beq.w	800f2a4 <__kernel_rem_pio2f+0x264>
 800f198:	f1b8 0f02 	cmp.w	r8, #2
 800f19c:	d130      	bne.n	800f200 <__kernel_rem_pio2f+0x1c0>
 800f19e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f1a2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f1a6:	b359      	cbz	r1, 800f200 <__kernel_rem_pio2f+0x1c0>
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 fa67 	bl	800f67c <scalbnf>
 800f1ae:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f1b2:	e025      	b.n	800f200 <__kernel_rem_pio2f+0x1c0>
 800f1b4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f1b8:	a806      	add	r0, sp, #24
 800f1ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1c2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f1c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f1ca:	ee10 1a10 	vmov	r1, s0
 800f1ce:	ed32 0a01 	vldmdb	r2!, {s0}
 800f1d2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800f1d6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f1da:	3301      	adds	r3, #1
 800f1dc:	e79a      	b.n	800f114 <__kernel_rem_pio2f+0xd4>
 800f1de:	d106      	bne.n	800f1ee <__kernel_rem_pio2f+0x1ae>
 800f1e0:	1e6b      	subs	r3, r5, #1
 800f1e2:	aa06      	add	r2, sp, #24
 800f1e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1e8:	ea4f 2822 	mov.w	r8, r2, asr #8
 800f1ec:	e7c3      	b.n	800f176 <__kernel_rem_pio2f+0x136>
 800f1ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f1f2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f1f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fa:	da31      	bge.n	800f260 <__kernel_rem_pio2f+0x220>
 800f1fc:	f04f 0800 	mov.w	r8, #0
 800f200:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f208:	f040 80a8 	bne.w	800f35c <__kernel_rem_pio2f+0x31c>
 800f20c:	1e6b      	subs	r3, r5, #1
 800f20e:	4618      	mov	r0, r3
 800f210:	2200      	movs	r2, #0
 800f212:	4548      	cmp	r0, r9
 800f214:	da4d      	bge.n	800f2b2 <__kernel_rem_pio2f+0x272>
 800f216:	2a00      	cmp	r2, #0
 800f218:	f000 8087 	beq.w	800f32a <__kernel_rem_pio2f+0x2ea>
 800f21c:	aa06      	add	r2, sp, #24
 800f21e:	3c08      	subs	r4, #8
 800f220:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f224:	2900      	cmp	r1, #0
 800f226:	f000 808d 	beq.w	800f344 <__kernel_rem_pio2f+0x304>
 800f22a:	4620      	mov	r0, r4
 800f22c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f230:	9302      	str	r3, [sp, #8]
 800f232:	f000 fa23 	bl	800f67c <scalbnf>
 800f236:	9b02      	ldr	r3, [sp, #8]
 800f238:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f354 <__kernel_rem_pio2f+0x314>
 800f23c:	0099      	lsls	r1, r3, #2
 800f23e:	aa42      	add	r2, sp, #264	; 0x108
 800f240:	1850      	adds	r0, r2, r1
 800f242:	1d05      	adds	r5, r0, #4
 800f244:	461c      	mov	r4, r3
 800f246:	2c00      	cmp	r4, #0
 800f248:	f280 80b8 	bge.w	800f3bc <__kernel_rem_pio2f+0x37c>
 800f24c:	2500      	movs	r5, #0
 800f24e:	1b5c      	subs	r4, r3, r5
 800f250:	2c00      	cmp	r4, #0
 800f252:	f2c0 80d8 	blt.w	800f406 <__kernel_rem_pio2f+0x3c6>
 800f256:	4f3d      	ldr	r7, [pc, #244]	; (800f34c <__kernel_rem_pio2f+0x30c>)
 800f258:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800f358 <__kernel_rem_pio2f+0x318>
 800f25c:	2400      	movs	r4, #0
 800f25e:	e0c6      	b.n	800f3ee <__kernel_rem_pio2f+0x3ae>
 800f260:	f04f 0802 	mov.w	r8, #2
 800f264:	e78a      	b.n	800f17c <__kernel_rem_pio2f+0x13c>
 800f266:	ab06      	add	r3, sp, #24
 800f268:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f26c:	b949      	cbnz	r1, 800f282 <__kernel_rem_pio2f+0x242>
 800f26e:	b12b      	cbz	r3, 800f27c <__kernel_rem_pio2f+0x23c>
 800f270:	aa06      	add	r2, sp, #24
 800f272:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800f276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f27a:	2301      	movs	r3, #1
 800f27c:	3001      	adds	r0, #1
 800f27e:	4619      	mov	r1, r3
 800f280:	e781      	b.n	800f186 <__kernel_rem_pio2f+0x146>
 800f282:	aa06      	add	r2, sp, #24
 800f284:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800f288:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f28c:	460b      	mov	r3, r1
 800f28e:	e7f5      	b.n	800f27c <__kernel_rem_pio2f+0x23c>
 800f290:	1e68      	subs	r0, r5, #1
 800f292:	ab06      	add	r3, sp, #24
 800f294:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f29c:	aa06      	add	r2, sp, #24
 800f29e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800f2a2:	e779      	b.n	800f198 <__kernel_rem_pio2f+0x158>
 800f2a4:	1e68      	subs	r0, r5, #1
 800f2a6:	ab06      	add	r3, sp, #24
 800f2a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f2ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2b0:	e7f4      	b.n	800f29c <__kernel_rem_pio2f+0x25c>
 800f2b2:	a906      	add	r1, sp, #24
 800f2b4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f2b8:	3801      	subs	r0, #1
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	e7a9      	b.n	800f212 <__kernel_rem_pio2f+0x1d2>
 800f2be:	f10c 0c01 	add.w	ip, ip, #1
 800f2c2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f2c6:	2a00      	cmp	r2, #0
 800f2c8:	d0f9      	beq.n	800f2be <__kernel_rem_pio2f+0x27e>
 800f2ca:	eb0b 0305 	add.w	r3, fp, r5
 800f2ce:	aa1a      	add	r2, sp, #104	; 0x68
 800f2d0:	009b      	lsls	r3, r3, #2
 800f2d2:	1898      	adds	r0, r3, r2
 800f2d4:	3004      	adds	r0, #4
 800f2d6:	1c69      	adds	r1, r5, #1
 800f2d8:	3704      	adds	r7, #4
 800f2da:	2200      	movs	r2, #0
 800f2dc:	4465      	add	r5, ip
 800f2de:	9005      	str	r0, [sp, #20]
 800f2e0:	428d      	cmp	r5, r1
 800f2e2:	f6ff af0a 	blt.w	800f0fa <__kernel_rem_pio2f+0xba>
 800f2e6:	a81a      	add	r0, sp, #104	; 0x68
 800f2e8:	eb02 0c03 	add.w	ip, r2, r3
 800f2ec:	4484      	add	ip, r0
 800f2ee:	9803      	ldr	r0, [sp, #12]
 800f2f0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f2f4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800f2f8:	9001      	str	r0, [sp, #4]
 800f2fa:	ee07 0a90 	vmov	s15, r0
 800f2fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f302:	9805      	ldr	r0, [sp, #20]
 800f304:	edcc 7a00 	vstr	s15, [ip]
 800f308:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f358 <__kernel_rem_pio2f+0x318>
 800f30c:	eb00 0802 	add.w	r8, r0, r2
 800f310:	f04f 0c00 	mov.w	ip, #0
 800f314:	45d4      	cmp	ip, sl
 800f316:	dd0c      	ble.n	800f332 <__kernel_rem_pio2f+0x2f2>
 800f318:	eb02 0c07 	add.w	ip, r2, r7
 800f31c:	a842      	add	r0, sp, #264	; 0x108
 800f31e:	4484      	add	ip, r0
 800f320:	edcc 7a01 	vstr	s15, [ip, #4]
 800f324:	3101      	adds	r1, #1
 800f326:	3204      	adds	r2, #4
 800f328:	e7da      	b.n	800f2e0 <__kernel_rem_pio2f+0x2a0>
 800f32a:	9b04      	ldr	r3, [sp, #16]
 800f32c:	f04f 0c01 	mov.w	ip, #1
 800f330:	e7c7      	b.n	800f2c2 <__kernel_rem_pio2f+0x282>
 800f332:	ecfe 6a01 	vldmia	lr!, {s13}
 800f336:	ed38 7a01 	vldmdb	r8!, {s14}
 800f33a:	f10c 0c01 	add.w	ip, ip, #1
 800f33e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f342:	e7e7      	b.n	800f314 <__kernel_rem_pio2f+0x2d4>
 800f344:	3b01      	subs	r3, #1
 800f346:	e769      	b.n	800f21c <__kernel_rem_pio2f+0x1dc>
 800f348:	0800fe48 	.word	0x0800fe48
 800f34c:	0800fe1c 	.word	0x0800fe1c
 800f350:	43800000 	.word	0x43800000
 800f354:	3b800000 	.word	0x3b800000
 800f358:	00000000 	.word	0x00000000
 800f35c:	4260      	negs	r0, r4
 800f35e:	eeb0 0a48 	vmov.f32	s0, s16
 800f362:	f000 f98b 	bl	800f67c <scalbnf>
 800f366:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800f350 <__kernel_rem_pio2f+0x310>
 800f36a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f372:	db1a      	blt.n	800f3aa <__kernel_rem_pio2f+0x36a>
 800f374:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f354 <__kernel_rem_pio2f+0x314>
 800f378:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f37c:	aa06      	add	r2, sp, #24
 800f37e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f382:	a906      	add	r1, sp, #24
 800f384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f388:	3408      	adds	r4, #8
 800f38a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f38e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f392:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f396:	ee10 3a10 	vmov	r3, s0
 800f39a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f39e:	1c6b      	adds	r3, r5, #1
 800f3a0:	ee17 2a90 	vmov	r2, s15
 800f3a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f3a8:	e73f      	b.n	800f22a <__kernel_rem_pio2f+0x1ea>
 800f3aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f3ae:	aa06      	add	r2, sp, #24
 800f3b0:	ee10 3a10 	vmov	r3, s0
 800f3b4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800f3b8:	462b      	mov	r3, r5
 800f3ba:	e736      	b.n	800f22a <__kernel_rem_pio2f+0x1ea>
 800f3bc:	aa06      	add	r2, sp, #24
 800f3be:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f3c2:	9202      	str	r2, [sp, #8]
 800f3c4:	ee07 2a90 	vmov	s15, r2
 800f3c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f3cc:	3c01      	subs	r4, #1
 800f3ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f3d2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f3d6:	ed65 7a01 	vstmdb	r5!, {s15}
 800f3da:	e734      	b.n	800f246 <__kernel_rem_pio2f+0x206>
 800f3dc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800f3e0:	ecf7 6a01 	vldmia	r7!, {s13}
 800f3e4:	ed9c 7a00 	vldr	s14, [ip]
 800f3e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f3ec:	3401      	adds	r4, #1
 800f3ee:	454c      	cmp	r4, r9
 800f3f0:	dc01      	bgt.n	800f3f6 <__kernel_rem_pio2f+0x3b6>
 800f3f2:	42a5      	cmp	r5, r4
 800f3f4:	daf2      	bge.n	800f3dc <__kernel_rem_pio2f+0x39c>
 800f3f6:	aa56      	add	r2, sp, #344	; 0x158
 800f3f8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800f3fc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800f400:	3501      	adds	r5, #1
 800f402:	3804      	subs	r0, #4
 800f404:	e723      	b.n	800f24e <__kernel_rem_pio2f+0x20e>
 800f406:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f408:	2a03      	cmp	r2, #3
 800f40a:	d84d      	bhi.n	800f4a8 <__kernel_rem_pio2f+0x468>
 800f40c:	e8df f002 	tbb	[pc, r2]
 800f410:	021f1f3e 	.word	0x021f1f3e
 800f414:	aa56      	add	r2, sp, #344	; 0x158
 800f416:	4411      	add	r1, r2
 800f418:	399c      	subs	r1, #156	; 0x9c
 800f41a:	4608      	mov	r0, r1
 800f41c:	461c      	mov	r4, r3
 800f41e:	2c00      	cmp	r4, #0
 800f420:	dc5f      	bgt.n	800f4e2 <__kernel_rem_pio2f+0x4a2>
 800f422:	4608      	mov	r0, r1
 800f424:	461c      	mov	r4, r3
 800f426:	2c01      	cmp	r4, #1
 800f428:	dc6b      	bgt.n	800f502 <__kernel_rem_pio2f+0x4c2>
 800f42a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800f358 <__kernel_rem_pio2f+0x318>
 800f42e:	2b01      	cmp	r3, #1
 800f430:	dc77      	bgt.n	800f522 <__kernel_rem_pio2f+0x4e2>
 800f432:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800f436:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800f43a:	f1b8 0f00 	cmp.w	r8, #0
 800f43e:	d176      	bne.n	800f52e <__kernel_rem_pio2f+0x4ee>
 800f440:	edc6 6a00 	vstr	s13, [r6]
 800f444:	ed86 7a01 	vstr	s14, [r6, #4]
 800f448:	edc6 7a02 	vstr	s15, [r6, #8]
 800f44c:	e02c      	b.n	800f4a8 <__kernel_rem_pio2f+0x468>
 800f44e:	aa56      	add	r2, sp, #344	; 0x158
 800f450:	4411      	add	r1, r2
 800f452:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800f358 <__kernel_rem_pio2f+0x318>
 800f456:	399c      	subs	r1, #156	; 0x9c
 800f458:	4618      	mov	r0, r3
 800f45a:	2800      	cmp	r0, #0
 800f45c:	da32      	bge.n	800f4c4 <__kernel_rem_pio2f+0x484>
 800f45e:	f1b8 0f00 	cmp.w	r8, #0
 800f462:	d035      	beq.n	800f4d0 <__kernel_rem_pio2f+0x490>
 800f464:	eef1 7a47 	vneg.f32	s15, s14
 800f468:	edc6 7a00 	vstr	s15, [r6]
 800f46c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800f470:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f474:	a82f      	add	r0, sp, #188	; 0xbc
 800f476:	2101      	movs	r1, #1
 800f478:	428b      	cmp	r3, r1
 800f47a:	da2c      	bge.n	800f4d6 <__kernel_rem_pio2f+0x496>
 800f47c:	f1b8 0f00 	cmp.w	r8, #0
 800f480:	d001      	beq.n	800f486 <__kernel_rem_pio2f+0x446>
 800f482:	eef1 7a67 	vneg.f32	s15, s15
 800f486:	edc6 7a01 	vstr	s15, [r6, #4]
 800f48a:	e00d      	b.n	800f4a8 <__kernel_rem_pio2f+0x468>
 800f48c:	aa56      	add	r2, sp, #344	; 0x158
 800f48e:	4411      	add	r1, r2
 800f490:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800f358 <__kernel_rem_pio2f+0x318>
 800f494:	399c      	subs	r1, #156	; 0x9c
 800f496:	2b00      	cmp	r3, #0
 800f498:	da0e      	bge.n	800f4b8 <__kernel_rem_pio2f+0x478>
 800f49a:	f1b8 0f00 	cmp.w	r8, #0
 800f49e:	d001      	beq.n	800f4a4 <__kernel_rem_pio2f+0x464>
 800f4a0:	eef1 7a67 	vneg.f32	s15, s15
 800f4a4:	edc6 7a00 	vstr	s15, [r6]
 800f4a8:	9b01      	ldr	r3, [sp, #4]
 800f4aa:	f003 0007 	and.w	r0, r3, #7
 800f4ae:	b057      	add	sp, #348	; 0x15c
 800f4b0:	ecbd 8b04 	vpop	{d8-d9}
 800f4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b8:	ed31 7a01 	vldmdb	r1!, {s14}
 800f4bc:	3b01      	subs	r3, #1
 800f4be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4c2:	e7e8      	b.n	800f496 <__kernel_rem_pio2f+0x456>
 800f4c4:	ed71 7a01 	vldmdb	r1!, {s15}
 800f4c8:	3801      	subs	r0, #1
 800f4ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f4ce:	e7c4      	b.n	800f45a <__kernel_rem_pio2f+0x41a>
 800f4d0:	eef0 7a47 	vmov.f32	s15, s14
 800f4d4:	e7c8      	b.n	800f468 <__kernel_rem_pio2f+0x428>
 800f4d6:	ecb0 7a01 	vldmia	r0!, {s14}
 800f4da:	3101      	adds	r1, #1
 800f4dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4e0:	e7ca      	b.n	800f478 <__kernel_rem_pio2f+0x438>
 800f4e2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f4e6:	ed70 6a01 	vldmdb	r0!, {s13}
 800f4ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f4ee:	3c01      	subs	r4, #1
 800f4f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4f4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f4f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4fc:	edc0 7a00 	vstr	s15, [r0]
 800f500:	e78d      	b.n	800f41e <__kernel_rem_pio2f+0x3de>
 800f502:	ed50 7a02 	vldr	s15, [r0, #-8]
 800f506:	ed70 6a01 	vldmdb	r0!, {s13}
 800f50a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f50e:	3c01      	subs	r4, #1
 800f510:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f514:	ed00 7a01 	vstr	s14, [r0, #-4]
 800f518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f51c:	edc0 7a00 	vstr	s15, [r0]
 800f520:	e781      	b.n	800f426 <__kernel_rem_pio2f+0x3e6>
 800f522:	ed31 7a01 	vldmdb	r1!, {s14}
 800f526:	3b01      	subs	r3, #1
 800f528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f52c:	e77f      	b.n	800f42e <__kernel_rem_pio2f+0x3ee>
 800f52e:	eef1 6a66 	vneg.f32	s13, s13
 800f532:	eeb1 7a47 	vneg.f32	s14, s14
 800f536:	edc6 6a00 	vstr	s13, [r6]
 800f53a:	ed86 7a01 	vstr	s14, [r6, #4]
 800f53e:	eef1 7a67 	vneg.f32	s15, s15
 800f542:	e781      	b.n	800f448 <__kernel_rem_pio2f+0x408>

0800f544 <__kernel_sinf>:
 800f544:	ee10 3a10 	vmov	r3, s0
 800f548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f54c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f550:	da04      	bge.n	800f55c <__kernel_sinf+0x18>
 800f552:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f556:	ee17 3a90 	vmov	r3, s15
 800f55a:	b35b      	cbz	r3, 800f5b4 <__kernel_sinf+0x70>
 800f55c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f560:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f5b8 <__kernel_sinf+0x74>
 800f564:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800f5bc <__kernel_sinf+0x78>
 800f568:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f56c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f5c0 <__kernel_sinf+0x7c>
 800f570:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f574:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f5c4 <__kernel_sinf+0x80>
 800f578:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f57c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f5c8 <__kernel_sinf+0x84>
 800f580:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f584:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f588:	b930      	cbnz	r0, 800f598 <__kernel_sinf+0x54>
 800f58a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800f5cc <__kernel_sinf+0x88>
 800f58e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f592:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f596:	4770      	bx	lr
 800f598:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f59c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f5a0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f5a4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f5a8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f5d0 <__kernel_sinf+0x8c>
 800f5ac:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f5b0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	2f2ec9d3 	.word	0x2f2ec9d3
 800f5bc:	b2d72f34 	.word	0xb2d72f34
 800f5c0:	3638ef1b 	.word	0x3638ef1b
 800f5c4:	b9500d01 	.word	0xb9500d01
 800f5c8:	3c088889 	.word	0x3c088889
 800f5cc:	be2aaaab 	.word	0xbe2aaaab
 800f5d0:	3e2aaaab 	.word	0x3e2aaaab

0800f5d4 <matherr>:
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	4770      	bx	lr

0800f5d8 <nan>:
 800f5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f5e0 <nan+0x8>
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	00000000 	.word	0x00000000
 800f5e4:	7ff80000 	.word	0x7ff80000

0800f5e8 <fabsf>:
 800f5e8:	ee10 3a10 	vmov	r3, s0
 800f5ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5f0:	ee00 3a10 	vmov	s0, r3
 800f5f4:	4770      	bx	lr
	...

0800f5f8 <floorf>:
 800f5f8:	ee10 3a10 	vmov	r3, s0
 800f5fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f600:	0dca      	lsrs	r2, r1, #23
 800f602:	3a7f      	subs	r2, #127	; 0x7f
 800f604:	2a16      	cmp	r2, #22
 800f606:	dc2a      	bgt.n	800f65e <floorf+0x66>
 800f608:	2a00      	cmp	r2, #0
 800f60a:	da11      	bge.n	800f630 <floorf+0x38>
 800f60c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f670 <floorf+0x78>
 800f610:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f614:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f61c:	dd05      	ble.n	800f62a <floorf+0x32>
 800f61e:	2b00      	cmp	r3, #0
 800f620:	da23      	bge.n	800f66a <floorf+0x72>
 800f622:	4a14      	ldr	r2, [pc, #80]	; (800f674 <floorf+0x7c>)
 800f624:	2900      	cmp	r1, #0
 800f626:	bf18      	it	ne
 800f628:	4613      	movne	r3, r2
 800f62a:	ee00 3a10 	vmov	s0, r3
 800f62e:	4770      	bx	lr
 800f630:	4911      	ldr	r1, [pc, #68]	; (800f678 <floorf+0x80>)
 800f632:	4111      	asrs	r1, r2
 800f634:	420b      	tst	r3, r1
 800f636:	d0fa      	beq.n	800f62e <floorf+0x36>
 800f638:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f670 <floorf+0x78>
 800f63c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f640:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f648:	ddef      	ble.n	800f62a <floorf+0x32>
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	bfbe      	ittt	lt
 800f64e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f652:	fa40 f202 	asrlt.w	r2, r0, r2
 800f656:	189b      	addlt	r3, r3, r2
 800f658:	ea23 0301 	bic.w	r3, r3, r1
 800f65c:	e7e5      	b.n	800f62a <floorf+0x32>
 800f65e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f662:	d3e4      	bcc.n	800f62e <floorf+0x36>
 800f664:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f668:	4770      	bx	lr
 800f66a:	2300      	movs	r3, #0
 800f66c:	e7dd      	b.n	800f62a <floorf+0x32>
 800f66e:	bf00      	nop
 800f670:	7149f2ca 	.word	0x7149f2ca
 800f674:	bf800000 	.word	0xbf800000
 800f678:	007fffff 	.word	0x007fffff

0800f67c <scalbnf>:
 800f67c:	b508      	push	{r3, lr}
 800f67e:	ee10 2a10 	vmov	r2, s0
 800f682:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f686:	ed2d 8b02 	vpush	{d8}
 800f68a:	eef0 0a40 	vmov.f32	s1, s0
 800f68e:	d004      	beq.n	800f69a <scalbnf+0x1e>
 800f690:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f694:	d306      	bcc.n	800f6a4 <scalbnf+0x28>
 800f696:	ee70 0a00 	vadd.f32	s1, s0, s0
 800f69a:	ecbd 8b02 	vpop	{d8}
 800f69e:	eeb0 0a60 	vmov.f32	s0, s1
 800f6a2:	bd08      	pop	{r3, pc}
 800f6a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f6a8:	d21c      	bcs.n	800f6e4 <scalbnf+0x68>
 800f6aa:	4b1f      	ldr	r3, [pc, #124]	; (800f728 <scalbnf+0xac>)
 800f6ac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f72c <scalbnf+0xb0>
 800f6b0:	4298      	cmp	r0, r3
 800f6b2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800f6b6:	db10      	blt.n	800f6da <scalbnf+0x5e>
 800f6b8:	ee10 2a90 	vmov	r2, s1
 800f6bc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800f6c0:	3b19      	subs	r3, #25
 800f6c2:	4403      	add	r3, r0
 800f6c4:	2bfe      	cmp	r3, #254	; 0xfe
 800f6c6:	dd0f      	ble.n	800f6e8 <scalbnf+0x6c>
 800f6c8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800f730 <scalbnf+0xb4>
 800f6cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f6d0:	f000 f834 	bl	800f73c <copysignf>
 800f6d4:	ee60 0a08 	vmul.f32	s1, s0, s16
 800f6d8:	e7df      	b.n	800f69a <scalbnf+0x1e>
 800f6da:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f734 <scalbnf+0xb8>
 800f6de:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f6e2:	e7da      	b.n	800f69a <scalbnf+0x1e>
 800f6e4:	0ddb      	lsrs	r3, r3, #23
 800f6e6:	e7ec      	b.n	800f6c2 <scalbnf+0x46>
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	dd06      	ble.n	800f6fa <scalbnf+0x7e>
 800f6ec:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f6f0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f6f4:	ee00 3a90 	vmov	s1, r3
 800f6f8:	e7cf      	b.n	800f69a <scalbnf+0x1e>
 800f6fa:	f113 0f16 	cmn.w	r3, #22
 800f6fe:	da06      	bge.n	800f70e <scalbnf+0x92>
 800f700:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f704:	4298      	cmp	r0, r3
 800f706:	dcdf      	bgt.n	800f6c8 <scalbnf+0x4c>
 800f708:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800f734 <scalbnf+0xb8>
 800f70c:	e7de      	b.n	800f6cc <scalbnf+0x50>
 800f70e:	3319      	adds	r3, #25
 800f710:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800f714:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f718:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f738 <scalbnf+0xbc>
 800f71c:	ee07 3a10 	vmov	s14, r3
 800f720:	ee67 0a27 	vmul.f32	s1, s14, s15
 800f724:	e7b9      	b.n	800f69a <scalbnf+0x1e>
 800f726:	bf00      	nop
 800f728:	ffff3cb0 	.word	0xffff3cb0
 800f72c:	4c000000 	.word	0x4c000000
 800f730:	7149f2ca 	.word	0x7149f2ca
 800f734:	0da24260 	.word	0x0da24260
 800f738:	33000000 	.word	0x33000000

0800f73c <copysignf>:
 800f73c:	ee10 3a10 	vmov	r3, s0
 800f740:	ee10 2a90 	vmov	r2, s1
 800f744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f748:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f74c:	4313      	orrs	r3, r2
 800f74e:	ee00 3a10 	vmov	s0, r3
 800f752:	4770      	bx	lr

0800f754 <_init>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	bf00      	nop
 800f758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75a:	bc08      	pop	{r3}
 800f75c:	469e      	mov	lr, r3
 800f75e:	4770      	bx	lr

0800f760 <_fini>:
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	bf00      	nop
 800f764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f766:	bc08      	pop	{r3}
 800f768:	469e      	mov	lr, r3
 800f76a:	4770      	bx	lr
