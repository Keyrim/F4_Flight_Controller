
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004558  08004558  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004560  08004560  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  2000000c  08004574  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08004574  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120c0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002817  00000000  00000000  000320fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00034918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010f0  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020722  00000000  00000000  00036c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f4a1  00000000  00000000  0005735a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3e4d  00000000  00000000  000667fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a648  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bfc  00000000  00000000  0012a6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004520 	.word	0x08004520

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004520 	.word	0x08004520

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80004da:	4b21      	ldr	r3, [pc, #132]	; (8000560 <MX_ADC2_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	; (8000564 <MX_ADC2_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	; (8000560 <MX_ADC2_Init+0x98>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_ADC2_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_ADC2_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	; (8000560 <MX_ADC2_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_ADC2_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_ADC2_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_ADC2_Init+0x98>)
 800050a:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_ADC2_Init+0xa0>)
 800050c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_ADC2_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_ADC2_Init+0x98>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_ADC2_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_ADC2_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <MX_ADC2_Init+0x98>)
 800052a:	f001 f8eb 	bl	8001704 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 fb14 	bl	8000b60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000538:	230b      	movs	r3, #11
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_ADC2_Init+0x98>)
 800054a:	f001 f91f 	bl	800178c <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 fb04 	bl	8000b60 <Error_Handler>
  }

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028
 8000564:	40012100 	.word	0x40012100
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a3c      	ldr	r2, [pc, #240]	; (800067c <HAL_ADC_MspInit+0x110>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d171      	bne.n	8000672 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <HAL_ADC_MspInit+0x114>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000596:	4a3a      	ldr	r2, [pc, #232]	; (8000680 <HAL_ADC_MspInit+0x114>)
 8000598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059c:	6453      	str	r3, [r2, #68]	; 0x44
 800059e:	4b38      	ldr	r3, [pc, #224]	; (8000680 <HAL_ADC_MspInit+0x114>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b34      	ldr	r3, [pc, #208]	; (8000680 <HAL_ADC_MspInit+0x114>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a33      	ldr	r2, [pc, #204]	; (8000680 <HAL_ADC_MspInit+0x114>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <HAL_ADC_MspInit+0x114>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <HAL_ADC_MspInit+0x114>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a2c      	ldr	r2, [pc, #176]	; (8000680 <HAL_ADC_MspInit+0x114>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <HAL_ADC_MspInit+0x114>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	4823      	ldr	r0, [pc, #140]	; (8000684 <HAL_ADC_MspInit+0x118>)
 80005f6:	f001 fee1 	bl	80023bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 80005fa:	2302      	movs	r3, #2
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005fe:	2303      	movs	r3, #3
 8000600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	481e      	ldr	r0, [pc, #120]	; (8000688 <HAL_ADC_MspInit+0x11c>)
 800060e:	f001 fed5 	bl	80023bc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <HAL_ADC_MspInit+0x120>)
 8000614:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <HAL_ADC_MspInit+0x124>)
 8000616:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <HAL_ADC_MspInit+0x120>)
 800061a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800061e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <HAL_ADC_MspInit+0x120>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <HAL_ADC_MspInit+0x120>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <HAL_ADC_MspInit+0x120>)
 800062e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000632:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_ADC_MspInit+0x120>)
 8000636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800063a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <HAL_ADC_MspInit+0x120>)
 800063e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000642:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <HAL_ADC_MspInit+0x120>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_ADC_MspInit+0x120>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <HAL_ADC_MspInit+0x120>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <HAL_ADC_MspInit+0x120>)
 8000658:	f001 fbc8 	bl	8001dec <HAL_DMA_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000662:	f000 fa7d 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a08      	ldr	r2, [pc, #32]	; (800068c <HAL_ADC_MspInit+0x120>)
 800066a:	639a      	str	r2, [r3, #56]	; 0x38
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_ADC_MspInit+0x120>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	; 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40012100 	.word	0x40012100
 8000680:	40023800 	.word	0x40023800
 8000684:	40020800 	.word	0x40020800
 8000688:	40020400 	.word	0x40020400
 800068c:	20000070 	.word	0x20000070
 8000690:	40026440 	.word	0x40026440

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <MX_DMA_Init+0xd8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a32      	ldr	r2, [pc, #200]	; (800076c <MX_DMA_Init+0xd8>)
 80006a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b30      	ldr	r3, [pc, #192]	; (800076c <MX_DMA_Init+0xd8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_DMA_Init+0xd8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2b      	ldr	r2, [pc, #172]	; (800076c <MX_DMA_Init+0xd8>)
 80006c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_DMA_Init+0xd8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	200b      	movs	r0, #11
 80006d8:	f001 fb51 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006dc:	200b      	movs	r0, #11
 80006de:	f001 fb6a 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	200e      	movs	r0, #14
 80006e8:	f001 fb49 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80006ec:	200e      	movs	r0, #14
 80006ee:	f001 fb62 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	200f      	movs	r0, #15
 80006f8:	f001 fb41 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80006fc:	200f      	movs	r0, #15
 80006fe:	f001 fb5a 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	2011      	movs	r0, #17
 8000708:	f001 fb39 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800070c:	2011      	movs	r0, #17
 800070e:	f001 fb52 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	202f      	movs	r0, #47	; 0x2f
 8000718:	f001 fb31 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800071c:	202f      	movs	r0, #47	; 0x2f
 800071e:	f001 fb4a 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	2038      	movs	r0, #56	; 0x38
 8000728:	f001 fb29 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800072c:	2038      	movs	r0, #56	; 0x38
 800072e:	f001 fb42 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	203a      	movs	r0, #58	; 0x3a
 8000738:	f001 fb21 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800073c:	203a      	movs	r0, #58	; 0x3a
 800073e:	f001 fb3a 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	203b      	movs	r0, #59	; 0x3b
 8000748:	f001 fb19 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800074c:	203b      	movs	r0, #59	; 0x3b
 800074e:	f001 fb32 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2045      	movs	r0, #69	; 0x45
 8000758:	f001 fb11 	bl	8001d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800075c:	2045      	movs	r0, #69	; 0x45
 800075e:	f001 fb2a 	bl	8001db6 <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b41      	ldr	r3, [pc, #260]	; (8000890 <MX_GPIO_Init+0x120>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a40      	ldr	r2, [pc, #256]	; (8000890 <MX_GPIO_Init+0x120>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <MX_GPIO_Init+0x120>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <MX_GPIO_Init+0x120>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a39      	ldr	r2, [pc, #228]	; (8000890 <MX_GPIO_Init+0x120>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_GPIO_Init+0x120>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b33      	ldr	r3, [pc, #204]	; (8000890 <MX_GPIO_Init+0x120>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a32      	ldr	r2, [pc, #200]	; (8000890 <MX_GPIO_Init+0x120>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b30      	ldr	r3, [pc, #192]	; (8000890 <MX_GPIO_Init+0x120>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_GPIO_Init+0x120>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a2b      	ldr	r2, [pc, #172]	; (8000890 <MX_GPIO_Init+0x120>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_GPIO_Init+0x120>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24e 211d 	movw	r1, #57885	; 0xe21d
 80007fc:	4825      	ldr	r0, [pc, #148]	; (8000894 <MX_GPIO_Init+0x124>)
 80007fe:	f001 ff77 	bl	80026f0 <HAL_GPIO_WritePin>
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2101      	movs	r1, #1
 8000806:	4824      	ldr	r0, [pc, #144]	; (8000898 <MX_GPIO_Init+0x128>)
 8000808:	f001 ff72 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000812:	4822      	ldr	r0, [pc, #136]	; (800089c <MX_GPIO_Init+0x12c>)
 8000814:	f001 ff6c 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8000818:	f24e 231d 	movw	r3, #57885	; 0xe21d
 800081c:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4818      	ldr	r0, [pc, #96]	; (8000894 <MX_GPIO_Init+0x124>)
 8000832:	f001 fdc3 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8000836:	2301      	movs	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_GPIO_Init+0x128>)
 800084e:	f001 fdb5 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8000852:	2302      	movs	r3, #2
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_GPIO_Init+0x128>)
 8000866:	f001 fda9 	bl	80023bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4806      	ldr	r0, [pc, #24]	; (800089c <MX_GPIO_Init+0x12c>)
 8000884:	f001 fd9a 	bl	80023bc <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40020800 	.word	0x40020800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020400 	.word	0x40020400

080008a0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f001 ff21 	bl	8002724 <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 f93a 	bl	8000b60 <Error_Handler>
  }

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000130 	.word	0x20000130
 80008f4:	40005400 	.word	0x40005400
 80008f8:	00061a80 	.word	0x00061a80

080008fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a47      	ldr	r2, [pc, #284]	; (8000a38 <HAL_I2C_MspInit+0x13c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	f040 8088 	bne.w	8000a30 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <HAL_I2C_MspInit+0x140>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a44      	ldr	r2, [pc, #272]	; (8000a3c <HAL_I2C_MspInit+0x140>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <HAL_I2C_MspInit+0x140>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800093c:	23c0      	movs	r3, #192	; 0xc0
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	483a      	ldr	r0, [pc, #232]	; (8000a40 <HAL_I2C_MspInit+0x144>)
 8000958:	f001 fd30 	bl	80023bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <HAL_I2C_MspInit+0x140>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a35      	ldr	r2, [pc, #212]	; (8000a3c <HAL_I2C_MspInit+0x140>)
 8000966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <HAL_I2C_MspInit+0x140>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 800097a:	4a33      	ldr	r2, [pc, #204]	; (8000a48 <HAL_I2C_MspInit+0x14c>)
 800097c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 8000980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000984:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000986:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b2c      	ldr	r3, [pc, #176]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 8000994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000998:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80009a6:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b2:	4b24      	ldr	r3, [pc, #144]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80009b8:	4822      	ldr	r0, [pc, #136]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 80009ba:	f001 fa17 	bl	8001dec <HAL_DMA_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80009c4:	f000 f8cc 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 80009cc:	639a      	str	r2, [r3, #56]	; 0x38
 80009ce:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <HAL_I2C_MspInit+0x148>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <HAL_I2C_MspInit+0x154>)
 80009d8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 80009dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009e0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 80009e4:	2240      	movs	r2, #64	; 0x40
 80009e6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 80009f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 8000a16:	f001 f9e9 	bl	8001dec <HAL_DMA_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8000a20:	f000 f89e 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 8000a28:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_I2C_MspInit+0x150>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	20000184 	.word	0x20000184
 8000a48:	40026010 	.word	0x40026010
 8000a4c:	200000d0 	.word	0x200000d0
 8000a50:	400260b8 	.word	0x400260b8

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f000 fde2 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f816 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a60:	f7ff fe86 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a64:	f7ff fe16 	bl	8000694 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a68:	f7ff ff1a 	bl	80008a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a6c:	f000 f880 	bl	8000b70 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a70:	f000 f8b4 	bl	8000bdc <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a74:	f000 faf4 	bl	8001060 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a78:	f000 fc12 	bl	80012a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a7c:	f000 fc3a 	bl	80012f4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000a80:	f000 fc62 	bl	8001348 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8000a84:	f7ff fd20 	bl	80004c8 <MX_ADC2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <main+0x34>
	...

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 fd38 	bl	8004510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2310      	movs	r3, #16
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000afc:	2308      	movs	r3, #8
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b00:	23a8      	movs	r3, #168	; 0xa8
 8000b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b04:	2302      	movs	r3, #2
 8000b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	f107 0320 	add.w	r3, r7, #32
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 ff3f 	bl	8002994 <HAL_RCC_OscConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b1c:	f000 f820 	bl	8000b60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	2302      	movs	r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 f998 	bl	8002e74 <HAL_RCC_ClockConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b4a:	f000 f809 	bl	8000b60 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000b74:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <MX_SPI1_Init+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ba0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_SPI1_Init+0x64>)
 8000bc2:	f002 fb23 	bl	800320c <HAL_SPI_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bcc:	f7ff ffc8 	bl	8000b60 <Error_Handler>
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000029c 	.word	0x2000029c
 8000bd8:	40013000 	.word	0x40013000

08000bdc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <MX_SPI2_Init+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000be8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c10:	2228      	movs	r2, #40	; 0x28
 8000c12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c28:	220a      	movs	r2, #10
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_SPI2_Init+0x64>)
 8000c2e:	f002 faed 	bl	800320c <HAL_SPI_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c38:	f7ff ff92 	bl	8000b60 <Error_Handler>
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200001e4 	.word	0x200001e4
 8000c44:	40003800 	.word	0x40003800

08000c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a8e      	ldr	r2, [pc, #568]	; (8000ea0 <HAL_SPI_MspInit+0x258>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f040 8089 	bne.w	8000d7e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
 8000c70:	4b8c      	ldr	r3, [pc, #560]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c74:	4a8b      	ldr	r2, [pc, #556]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7c:	4b89      	ldr	r3, [pc, #548]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	4b85      	ldr	r3, [pc, #532]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a84      	ldr	r2, [pc, #528]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
 8000c98:	4b82      	ldr	r3, [pc, #520]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ca4:	23e0      	movs	r3, #224	; 0xe0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	487a      	ldr	r0, [pc, #488]	; (8000ea8 <HAL_SPI_MspInit+0x260>)
 8000cc0:	f001 fb7c 	bl	80023bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000cc4:	4b79      	ldr	r3, [pc, #484]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000cc6:	4a7a      	ldr	r2, [pc, #488]	; (8000eb0 <HAL_SPI_MspInit+0x268>)
 8000cc8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000cca:	4b78      	ldr	r3, [pc, #480]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000ccc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000cd0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd2:	4b76      	ldr	r3, [pc, #472]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd8:	4b74      	ldr	r3, [pc, #464]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cde:	4b73      	ldr	r3, [pc, #460]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce6:	4b71      	ldr	r3, [pc, #452]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cec:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000cf2:	4b6e      	ldr	r3, [pc, #440]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cf8:	4b6c      	ldr	r3, [pc, #432]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfe:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d04:	4869      	ldr	r0, [pc, #420]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000d06:	f001 f871 	bl	8001dec <HAL_DMA_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000d10:	f7ff ff26 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a65      	ldr	r2, [pc, #404]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000d18:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d1a:	4a64      	ldr	r2, [pc, #400]	; (8000eac <HAL_SPI_MspInit+0x264>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000d20:	4b64      	ldr	r3, [pc, #400]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d22:	4a65      	ldr	r2, [pc, #404]	; (8000eb8 <HAL_SPI_MspInit+0x270>)
 8000d24:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000d26:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d28:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2e:	4b61      	ldr	r3, [pc, #388]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d30:	2240      	movs	r2, #64	; 0x40
 8000d32:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d34:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3a:	4b5e      	ldr	r3, [pc, #376]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d40:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d42:	4b5c      	ldr	r3, [pc, #368]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d48:	4b5a      	ldr	r3, [pc, #360]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d54:	4b57      	ldr	r3, [pc, #348]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d60:	4854      	ldr	r0, [pc, #336]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d62:	f001 f843 	bl	8001dec <HAL_DMA_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8000d6c:	f7ff fef8 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a50      	ldr	r2, [pc, #320]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d74:	649a      	str	r2, [r3, #72]	; 0x48
 8000d76:	4a4f      	ldr	r2, [pc, #316]	; (8000eb4 <HAL_SPI_MspInit+0x26c>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d7c:	e08c      	b.n	8000e98 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a4e      	ldr	r2, [pc, #312]	; (8000ebc <HAL_SPI_MspInit+0x274>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	f040 8087 	bne.w	8000e98 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a44      	ldr	r2, [pc, #272]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a3d      	ldr	r2, [pc, #244]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <HAL_SPI_MspInit+0x25c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000dc2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4838      	ldr	r0, [pc, #224]	; (8000ec0 <HAL_SPI_MspInit+0x278>)
 8000de0:	f001 faec 	bl	80023bc <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000de4:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000de6:	4a38      	ldr	r2, [pc, #224]	; (8000ec8 <HAL_SPI_MspInit+0x280>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000dea:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df0:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e02:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000e10:	4b2c      	ldr	r3, [pc, #176]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000e22:	4828      	ldr	r0, [pc, #160]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e24:	f000 ffe2 	bl	8001dec <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8000e2e:	f7ff fe97 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e36:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e38:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <HAL_SPI_MspInit+0x27c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e40:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <HAL_SPI_MspInit+0x288>)
 8000e42:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e4c:	2240      	movs	r2, #64	; 0x40
 8000e4e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000e7c:	4813      	ldr	r0, [pc, #76]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e7e:	f000 ffb5 	bl	8001dec <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8000e88:	f7ff fe6a 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e90:	649a      	str	r2, [r3, #72]	; 0x48
 8000e92:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_SPI_MspInit+0x284>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40013000 	.word	0x40013000
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	200002f4 	.word	0x200002f4
 8000eb0:	40026410 	.word	0x40026410
 8000eb4:	200003b4 	.word	0x200003b4
 8000eb8:	40026458 	.word	0x40026458
 8000ebc:	40003800 	.word	0x40003800
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	2000023c 	.word	0x2000023c
 8000ec8:	40026058 	.word	0x40026058
 8000ecc:	20000354 	.word	0x20000354
 8000ed0:	40026070 	.word	0x40026070

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f78:	f000 fba4 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Stream0_IRQHandler+0x10>)
 8000f86:	f000 ffdf 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000184 	.word	0x20000184

08000f94 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA1_Stream3_IRQHandler+0x10>)
 8000f9a:	f000 ffd5 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000023c 	.word	0x2000023c

08000fa8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA1_Stream4_IRQHandler+0x10>)
 8000fae:	f000 ffcb 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000354 	.word	0x20000354

08000fbc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <DMA1_Stream6_IRQHandler+0x10>)
 8000fc2:	f000 ffc1 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200004f4 	.word	0x200004f4

08000fd0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <DMA1_Stream7_IRQHandler+0x10>)
 8000fd6:	f000 ffb7 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000d0 	.word	0x200000d0

08000fe4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <DMA2_Stream0_IRQHandler+0x10>)
 8000fea:	f000 ffad 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002f4 	.word	0x200002f4

08000ff8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <DMA2_Stream2_IRQHandler+0x10>)
 8000ffe:	f000 ffa3 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000070 	.word	0x20000070

0800100c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA2_Stream3_IRQHandler+0x10>)
 8001012:	f000 ff99 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200003b4 	.word	0x200003b4

08001020 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <DMA2_Stream6_IRQHandler+0x10>)
 8001026:	f000 ff8f 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000494 	.word	0x20000494

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <SystemInit+0x28>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <SystemInit+0x28>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <SystemInit+0x28>)
 800104a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800104e:	609a      	str	r2, [r3, #8]
#endif
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b096      	sub	sp, #88	; 0x58
 8001064:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
 800108e:	615a      	str	r2, [r3, #20]
 8001090:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2220      	movs	r2, #32
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fa39 	bl	8004510 <memset>

  htim1.Instance = TIM1;
 800109e:	4b50      	ldr	r3, [pc, #320]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010a0:	4a50      	ldr	r2, [pc, #320]	; (80011e4 <MX_TIM1_Init+0x184>)
 80010a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010a4:	4b4e      	ldr	r3, [pc, #312]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010aa:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010b0:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b8:	4b49      	ldr	r3, [pc, #292]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010ca:	4845      	ldr	r0, [pc, #276]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010cc:	f002 f902 	bl	80032d4 <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010d6:	f7ff fd43 	bl	8000b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e4:	4619      	mov	r1, r3
 80010e6:	483e      	ldr	r0, [pc, #248]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010e8:	f002 f9b4 	bl	8003454 <HAL_TIM_ConfigClockSource>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010f2:	f7ff fd35 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80010f6:	483a      	ldr	r0, [pc, #232]	; (80011e0 <MX_TIM1_Init+0x180>)
 80010f8:	f002 f917 	bl	800332a <HAL_TIM_OC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001102:	f7ff fd2d 	bl	8000b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001112:	4619      	mov	r1, r3
 8001114:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_TIM1_Init+0x180>)
 8001116:	f002 fd3f 	bl	8003b98 <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001120:	f7ff fd1e 	bl	8000b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	2200      	movs	r2, #0
 8001146:	4619      	mov	r1, r3
 8001148:	4825      	ldr	r0, [pc, #148]	; (80011e0 <MX_TIM1_Init+0x180>)
 800114a:	f002 f923 	bl	8003394 <HAL_TIM_OC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001154:	f7ff fd04 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	2204      	movs	r2, #4
 800115e:	4619      	mov	r1, r3
 8001160:	481f      	ldr	r0, [pc, #124]	; (80011e0 <MX_TIM1_Init+0x180>)
 8001162:	f002 f917 	bl	8003394 <HAL_TIM_OC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800116c:	f7ff fcf8 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	2208      	movs	r2, #8
 8001176:	4619      	mov	r1, r3
 8001178:	4819      	ldr	r0, [pc, #100]	; (80011e0 <MX_TIM1_Init+0x180>)
 800117a:	f002 f90b 	bl	8003394 <HAL_TIM_OC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001184:	f7ff fcec 	bl	8000b60 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	220c      	movs	r2, #12
 800118e:	4619      	mov	r1, r3
 8001190:	4813      	ldr	r0, [pc, #76]	; (80011e0 <MX_TIM1_Init+0x180>)
 8001192:	f002 f8ff 	bl	8003394 <HAL_TIM_OC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800119c:	f7ff fce0 	bl	8000b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_TIM1_Init+0x180>)
 80011c4:	f002 fd64 	bl	8003c90 <HAL_TIMEx_ConfigBreakDeadTime>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80011ce:	f7ff fcc7 	bl	8000b60 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_TIM1_Init+0x180>)
 80011d4:	f000 f82a 	bl	800122c <HAL_TIM_MspPostInit>

}
 80011d8:	bf00      	nop
 80011da:	3758      	adds	r7, #88	; 0x58
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000414 	.word	0x20000414
 80011e4:	40010000 	.word	0x40010000

080011e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_Base_MspInit+0x3c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10d      	bne.n	8001216 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_TIM_Base_MspInit+0x40>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_TIM_Base_MspInit+0x40>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_TIM_Base_MspInit+0x40>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40010000 	.word	0x40010000
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <HAL_TIM_MspPostInit+0x68>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d11e      	bne.n	800128c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_TIM_MspPostInit+0x6c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_TIM_MspPostInit+0x6c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_TIM_MspPostInit+0x6c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800126a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800126e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_TIM_MspPostInit+0x70>)
 8001288:	f001 f898 	bl	80023bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010000 	.word	0x40010000
 8001298:	40023800 	.word	0x40023800
 800129c:	40020000 	.word	0x40020000

080012a0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART2_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART2_UART_Init+0x4c>)
 80012d8:	f002 fd2c 	bl	8003d34 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f7ff fc3d 	bl	8000b60 <Error_Handler>
  }

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000594 	.word	0x20000594
 80012f0:	40004400 	.word	0x40004400

080012f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_USART3_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART3_UART_Init+0x4c>)
 800132c:	f002 fd02 	bl	8003d34 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001336:	f7ff fc13 	bl	8000b60 <Error_Handler>
  }

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000454 	.word	0x20000454
 8001344:	40004800 	.word	0x40004800

08001348 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_USART6_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USART6_UART_Init+0x4c>)
 8001380:	f002 fcd8 	bl	8003d34 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f7ff fbe9 	bl	8000b60 <Error_Handler>
  }

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000554 	.word	0x20000554
 8001398:	40011400 	.word	0x40011400

0800139c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a79      	ldr	r2, [pc, #484]	; (80015a0 <HAL_UART_MspInit+0x204>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d15a      	bne.n	8001474 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b75      	ldr	r3, [pc, #468]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	623b      	str	r3, [r7, #32]
 80013d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
 80013de:	4b71      	ldr	r3, [pc, #452]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a70      	ldr	r2, [pc, #448]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013f6:	230c      	movs	r3, #12
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001406:	2307      	movs	r3, #7
 8001408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4865      	ldr	r0, [pc, #404]	; (80015a8 <HAL_UART_MspInit+0x20c>)
 8001412:	f000 ffd3 	bl	80023bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_UART_MspInit+0x210>)
 8001418:	4a65      	ldr	r2, [pc, #404]	; (80015b0 <HAL_UART_MspInit+0x214>)
 800141a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800141c:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_UART_MspInit+0x210>)
 800141e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001422:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001424:	4b61      	ldr	r3, [pc, #388]	; (80015ac <HAL_UART_MspInit+0x210>)
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <HAL_UART_MspInit+0x210>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001430:	4b5e      	ldr	r3, [pc, #376]	; (80015ac <HAL_UART_MspInit+0x210>)
 8001432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001436:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001438:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <HAL_UART_MspInit+0x210>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143e:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <HAL_UART_MspInit+0x210>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001444:	4b59      	ldr	r3, [pc, #356]	; (80015ac <HAL_UART_MspInit+0x210>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800144a:	4b58      	ldr	r3, [pc, #352]	; (80015ac <HAL_UART_MspInit+0x210>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001450:	4b56      	ldr	r3, [pc, #344]	; (80015ac <HAL_UART_MspInit+0x210>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001456:	4855      	ldr	r0, [pc, #340]	; (80015ac <HAL_UART_MspInit+0x210>)
 8001458:	f000 fcc8 	bl	8001dec <HAL_DMA_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001462:	f7ff fb7d 	bl	8000b60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a50      	ldr	r2, [pc, #320]	; (80015ac <HAL_UART_MspInit+0x210>)
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_UART_MspInit+0x210>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001472:	e091      	b.n	8001598 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <HAL_UART_MspInit+0x218>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12d      	bne.n	80014da <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b48      	ldr	r3, [pc, #288]	; (80015a4 <HAL_UART_MspInit+0x208>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a47      	ldr	r2, [pc, #284]	; (80015a4 <HAL_UART_MspInit+0x208>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <HAL_UART_MspInit+0x208>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a40      	ldr	r2, [pc, #256]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b3e      	ldr	r3, [pc, #248]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c8:	2307      	movs	r3, #7
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	4839      	ldr	r0, [pc, #228]	; (80015b8 <HAL_UART_MspInit+0x21c>)
 80014d4:	f000 ff72 	bl	80023bc <HAL_GPIO_Init>
}
 80014d8:	e05e      	b.n	8001598 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART6)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a37      	ldr	r2, [pc, #220]	; (80015bc <HAL_UART_MspInit+0x220>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d159      	bne.n	8001598 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80014ee:	f043 0320 	orr.w	r3, r3, #32
 80014f2:	6453      	str	r3, [r2, #68]	; 0x44
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_UART_MspInit+0x208>)
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f003 0320 	and.w	r3, r3, #32
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_UART_MspInit+0x208>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_UART_MspInit+0x208>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_UART_MspInit+0x208>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800152c:	2308      	movs	r3, #8
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4822      	ldr	r0, [pc, #136]	; (80015c0 <HAL_UART_MspInit+0x224>)
 8001538:	f000 ff40 	bl	80023bc <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800153c:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_UART_MspInit+0x228>)
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <HAL_UART_MspInit+0x22c>)
 8001540:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001542:	4b20      	ldr	r3, [pc, #128]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001544:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001548:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800154a:	4b1e      	ldr	r3, [pc, #120]	; (80015c4 <HAL_UART_MspInit+0x228>)
 800154c:	2240      	movs	r2, #64	; 0x40
 800154e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_UART_MspInit+0x228>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001570:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800157c:	4811      	ldr	r0, [pc, #68]	; (80015c4 <HAL_UART_MspInit+0x228>)
 800157e:	f000 fc35 	bl	8001dec <HAL_DMA_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8001588:	f7ff faea 	bl	8000b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_UART_MspInit+0x228>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	200004f4 	.word	0x200004f4
 80015b0:	400260a0 	.word	0x400260a0
 80015b4:	40004800 	.word	0x40004800
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40011400 	.word	0x40011400
 80015c0:	40020800 	.word	0x40020800
 80015c4:	20000494 	.word	0x20000494
 80015c8:	400264a0 	.word	0x400264a0

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015d2:	e003      	b.n	80015dc <LoopCopyDataInit>

080015d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015da:	3104      	adds	r1, #4

080015dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015e4:	d3f6      	bcc.n	80015d4 <CopyDataInit>
  ldr  r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015e8:	e002      	b.n	80015f0 <LoopFillZerobss>

080015ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015ec:	f842 3b04 	str.w	r3, [r2], #4

080015f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015f4:	d3f9      	bcc.n	80015ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015f6:	f7ff fd1d 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f002 ff65 	bl	80044c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fa29 	bl	8000a54 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001604:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001608:	08004568 	.word	0x08004568
  ldr  r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001610:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001614:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001618:	200005d8 	.word	0x200005d8

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 fb8d 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fc3e 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fba5 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 fb6d 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	200005d4 	.word	0x200005d4

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200005d4 	.word	0x200005d4

08001704 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e033      	b.n	8001782 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7fe ff22 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800174a:	f023 0302 	bic.w	r3, r3, #2
 800174e:	f043 0202 	orr.w	r2, r3, #2
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f93a 	bl	80019d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40
 8001772:	e001      	b.n	8001778 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x1c>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e105      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x228>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	d925      	bls.n	8001804 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	3b1e      	subs	r3, #30
 80017ce:	2207      	movs	r2, #7
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43da      	mvns	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	400a      	ands	r2, r1
 80017dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68d9      	ldr	r1, [r3, #12]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4403      	add	r3, r0
 80017f6:	3b1e      	subs	r3, #30
 80017f8:	409a      	lsls	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	e022      	b.n	800184a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6919      	ldr	r1, [r3, #16]
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	2207      	movs	r2, #7
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	400a      	ands	r2, r1
 8001826:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6919      	ldr	r1, [r3, #16]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	4603      	mov	r3, r0
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4403      	add	r3, r0
 8001840:	409a      	lsls	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b06      	cmp	r3, #6
 8001850:	d824      	bhi.n	800189c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	3b05      	subs	r3, #5
 8001864:	221f      	movs	r2, #31
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	3b05      	subs	r3, #5
 800188e:	fa00 f203 	lsl.w	r2, r0, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	635a      	str	r2, [r3, #52]	; 0x34
 800189a:	e04c      	b.n	8001936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b0c      	cmp	r3, #12
 80018a2:	d824      	bhi.n	80018ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b23      	subs	r3, #35	; 0x23
 80018b6:	221f      	movs	r2, #31
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43da      	mvns	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	400a      	ands	r2, r1
 80018c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b23      	subs	r3, #35	; 0x23
 80018e0:	fa00 f203 	lsl.w	r2, r0, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
 80018ec:	e023      	b.n	8001936 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	3b41      	subs	r3, #65	; 0x41
 8001900:	221f      	movs	r2, #31
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	400a      	ands	r2, r1
 800190e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	4618      	mov	r0, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b41      	subs	r3, #65	; 0x41
 800192a:	fa00 f203 	lsl.w	r2, r0, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_ADC_ConfigChannel+0x234>)
 8001938:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_ADC_ConfigChannel+0x238>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d109      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1cc>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b12      	cmp	r3, #18
 800194a:	d105      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a19      	ldr	r2, [pc, #100]	; (80019c4 <HAL_ADC_ConfigChannel+0x238>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d123      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x21e>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d003      	beq.n	8001972 <HAL_ADC_ConfigChannel+0x1e6>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b11      	cmp	r3, #17
 8001970:	d11b      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b10      	cmp	r3, #16
 8001984:	d111      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <HAL_ADC_ConfigChannel+0x240>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0c9a      	lsrs	r2, r3, #18
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800199c:	e002      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f9      	bne.n	800199e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40012300 	.word	0x40012300
 80019c4:	40012000 	.word	0x40012000
 80019c8:	20000000 	.word	0x20000000
 80019cc:	431bde83 	.word	0x431bde83

080019d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d8:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <ADC_Init+0x1f0>)
 80019da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	021a      	lsls	r2, r3, #8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <ADC_Init+0x1f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6899      	ldr	r1, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6899      	ldr	r1, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e00f      	b.n	8001ace <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001abc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0202 	bic.w	r2, r2, #2
 8001adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6899      	ldr	r1, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7e1b      	ldrb	r3, [r3, #24]
 8001ae8:	005a      	lsls	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d01b      	beq.n	8001b34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	3b01      	subs	r3, #1
 8001b28:	035a      	lsls	r2, r3, #13
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	e007      	b.n	8001b44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	051a      	lsls	r2, r3, #20
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6899      	ldr	r1, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b86:	025a      	lsls	r2, r3, #9
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	029a      	lsls	r2, r3, #10
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40012300 	.word	0x40012300
 8001bc4:	0f000001 	.word	0x0f000001

08001bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be4:	4013      	ands	r3, r2
 8001be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfa:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	60d3      	str	r3, [r2, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <__NVIC_EnableIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff8e 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff29 	bl	8001bc8 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff3e 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff8e 	bl	8001cbc <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5d 	bl	8001c68 <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff31 	bl	8001c2c <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff fc78 	bl	80016ec <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e099      	b.n	8001f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2202      	movs	r2, #2
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e28:	e00f      	b.n	8001e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e2a:	f7ff fc5f 	bl	80016ec <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d908      	bls.n	8001e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e078      	b.n	8001f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e8      	bne.n	8001e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_DMA_Init+0x158>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4313      	orrs	r3, r2
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f023 0307 	bic.w	r3, r3, #7
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d117      	bne.n	8001f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f9e9 	bl	80022c8 <DMA_CheckFifoParam>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f9a0 	bl	800225c <DMA_CalcBaseAndBitshift>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	223f      	movs	r2, #63	; 0x3f
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	f010803f 	.word	0xf010803f

08001f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f54:	4b92      	ldr	r3, [pc, #584]	; (80021a0 <HAL_DMA_IRQHandler+0x258>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a92      	ldr	r2, [pc, #584]	; (80021a4 <HAL_DMA_IRQHandler+0x25c>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2208      	movs	r2, #8
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2204      	movs	r2, #4
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2204      	movs	r2, #4
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2210      	movs	r2, #16
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d043      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2210      	movs	r2, #16
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d018      	beq.n	800208a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e01f      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e016      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2220      	movs	r2, #32
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 808e 	beq.w	80021e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8086 	beq.w	80021e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2220      	movs	r2, #32
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d136      	bne.n	8002160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0216 	bic.w	r2, r2, #22
 8002100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_DMA_IRQHandler+0x1da>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0208 	bic.w	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d07d      	beq.n	8002252 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
        }
        return;
 800215e:	e078      	b.n	8002252 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01c      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d108      	bne.n	800218e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d030      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e02b      	b.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d027      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e022      	b.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
 80021a0:	20000000 	.word	0x20000000
 80021a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0210 	bic.w	r2, r2, #16
 80021c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d032      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d022      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2205      	movs	r2, #5
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	429a      	cmp	r2, r3
 800221c:	d307      	bcc.n	800222e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f2      	bne.n	8002212 <HAL_DMA_IRQHandler+0x2ca>
 800222c:	e000      	b.n	8002230 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800222e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e000      	b.n	8002254 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002252:	bf00      	nop
    }
  }
}
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop

0800225c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3b10      	subs	r3, #16
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <DMA_CalcBaseAndBitshift+0x64>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002276:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d909      	bls.n	800229e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	1d1a      	adds	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	659a      	str	r2, [r3, #88]	; 0x58
 800229c:	e007      	b.n	80022ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	aaaaaaab 	.word	0xaaaaaaab
 80022c4:	08004550 	.word	0x08004550

080022c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11f      	bne.n	8002322 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d855      	bhi.n	8002394 <DMA_CheckFifoParam+0xcc>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <DMA_CheckFifoParam+0x28>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002301 	.word	0x08002301
 80022f4:	08002313 	.word	0x08002313
 80022f8:	08002301 	.word	0x08002301
 80022fc:	08002395 	.word	0x08002395
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d045      	beq.n	8002398 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002310:	e042      	b.n	8002398 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800231a:	d13f      	bne.n	800239c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002320:	e03c      	b.n	800239c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232a:	d121      	bne.n	8002370 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d836      	bhi.n	80023a0 <DMA_CheckFifoParam+0xd8>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <DMA_CheckFifoParam+0x70>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002349 	.word	0x08002349
 800233c:	0800234f 	.word	0x0800234f
 8002340:	08002349 	.word	0x08002349
 8002344:	08002361 	.word	0x08002361
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      break;
 800234c:	e02f      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d024      	beq.n	80023a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235e:	e021      	b.n	80023a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002368:	d11e      	bne.n	80023a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800236e:	e01b      	b.n	80023a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d902      	bls.n	800237c <DMA_CheckFifoParam+0xb4>
 8002376:	2b03      	cmp	r3, #3
 8002378:	d003      	beq.n	8002382 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800237a:	e018      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e015      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00e      	beq.n	80023ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      break;
 8002392:	e00b      	b.n	80023ac <DMA_CheckFifoParam+0xe4>
      break;
 8002394:	bf00      	nop
 8002396:	e00a      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;
 8002398:	bf00      	nop
 800239a:	e008      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;
 800239c:	bf00      	nop
 800239e:	e006      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;
 80023a0:	bf00      	nop
 80023a2:	e004      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;
 80023a4:	bf00      	nop
 80023a6:	e002      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;   
 80023a8:	bf00      	nop
 80023aa:	e000      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;
 80023ac:	bf00      	nop
    }
  } 
  
  return status; 
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	e16b      	b.n	80026b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	f040 815a 	bne.w	80026aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d00b      	beq.n	8002416 <HAL_GPIO_Init+0x5a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800240a:	2b11      	cmp	r3, #17
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b12      	cmp	r3, #18
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0xfc>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d123      	bne.n	8002500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	08da      	lsrs	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3208      	adds	r2, #8
 80024c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08da      	lsrs	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3208      	adds	r2, #8
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80b4 	beq.w	80026aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b5f      	ldr	r3, [pc, #380]	; (80026c4 <HAL_GPIO_Init+0x308>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a5e      	ldr	r2, [pc, #376]	; (80026c4 <HAL_GPIO_Init+0x308>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <HAL_GPIO_Init+0x308>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255e:	4a5a      	ldr	r2, [pc, #360]	; (80026c8 <HAL_GPIO_Init+0x30c>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	220f      	movs	r2, #15
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a51      	ldr	r2, [pc, #324]	; (80026cc <HAL_GPIO_Init+0x310>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d02b      	beq.n	80025e2 <HAL_GPIO_Init+0x226>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a50      	ldr	r2, [pc, #320]	; (80026d0 <HAL_GPIO_Init+0x314>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x222>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4f      	ldr	r2, [pc, #316]	; (80026d4 <HAL_GPIO_Init+0x318>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x21e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4e      	ldr	r2, [pc, #312]	; (80026d8 <HAL_GPIO_Init+0x31c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x21a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4d      	ldr	r2, [pc, #308]	; (80026dc <HAL_GPIO_Init+0x320>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x216>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4c      	ldr	r2, [pc, #304]	; (80026e0 <HAL_GPIO_Init+0x324>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x212>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4b      	ldr	r2, [pc, #300]	; (80026e4 <HAL_GPIO_Init+0x328>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x20e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a4a      	ldr	r2, [pc, #296]	; (80026e8 <HAL_GPIO_Init+0x32c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x20a>
 80025c2:	2307      	movs	r3, #7
 80025c4:	e00e      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025c6:	2308      	movs	r3, #8
 80025c8:	e00c      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025ca:	2306      	movs	r3, #6
 80025cc:	e00a      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025ce:	2305      	movs	r3, #5
 80025d0:	e008      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025d2:	2304      	movs	r3, #4
 80025d4:	e006      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025d6:	2303      	movs	r3, #3
 80025d8:	e004      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025da:	2302      	movs	r3, #2
 80025dc:	e002      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_GPIO_Init+0x228>
 80025e2:	2300      	movs	r3, #0
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	f002 0203 	and.w	r2, r2, #3
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	4093      	lsls	r3, r2
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f4:	4934      	ldr	r1, [pc, #208]	; (80026c8 <HAL_GPIO_Init+0x30c>)
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_GPIO_Init+0x330>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002626:	4a31      	ldr	r2, [pc, #196]	; (80026ec <HAL_GPIO_Init+0x330>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800262c:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_GPIO_Init+0x330>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002650:	4a26      	ldr	r2, [pc, #152]	; (80026ec <HAL_GPIO_Init+0x330>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b25      	ldr	r3, [pc, #148]	; (80026ec <HAL_GPIO_Init+0x330>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_GPIO_Init+0x330>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <HAL_GPIO_Init+0x330>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_GPIO_Init+0x330>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	f67f ae90 	bls.w	80023d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b8:	bf00      	nop
 80026ba:	3724      	adds	r7, #36	; 0x24
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40021400 	.word	0x40021400
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40021c00 	.word	0x40021c00
 80026ec:	40013c00 	.word	0x40013c00

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800270c:	e003      	b.n	8002716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270e:	887b      	ldrh	r3, [r7, #2]
 8002710:	041a      	lsls	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e11f      	b.n	8002976 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f8d6 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f000 fd18 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a7b      	ldr	r2, [pc, #492]	; (8002980 <HAL_I2C_Init+0x25c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x84>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <HAL_I2C_Init+0x260>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x92>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a77      	ldr	r2, [pc, #476]	; (8002988 <HAL_I2C_Init+0x264>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0db      	b.n	8002976 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a72      	ldr	r2, [pc, #456]	; (800298c <HAL_I2C_Init+0x268>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a64      	ldr	r2, [pc, #400]	; (8002980 <HAL_I2C_Init+0x25c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d802      	bhi.n	80027f8 <HAL_I2C_Init+0xd4>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	e009      	b.n	800280c <HAL_I2C_Init+0xe8>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a63      	ldr	r2, [pc, #396]	; (8002990 <HAL_I2C_Init+0x26c>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800281e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4956      	ldr	r1, [pc, #344]	; (8002980 <HAL_I2C_Init+0x25c>)
 8002828:	428b      	cmp	r3, r1
 800282a:	d80d      	bhi.n	8002848 <HAL_I2C_Init+0x124>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e59      	subs	r1, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb1 f3f3 	udiv	r3, r1, r3
 800283a:	3301      	adds	r3, #1
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	bf38      	it	cc
 8002844:	2304      	movcc	r3, #4
 8002846:	e04f      	b.n	80028e8 <HAL_I2C_Init+0x1c4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <HAL_I2C_Init+0x150>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e58      	subs	r0, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	440b      	add	r3, r1
 800285e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002862:	3301      	adds	r3, #1
 8002864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2301      	moveq	r3, #1
 800286e:	2300      	movne	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	e012      	b.n	800289a <HAL_I2C_Init+0x176>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1e58      	subs	r0, r3, #1
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6859      	ldr	r1, [r3, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	0099      	lsls	r1, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	fbb0 f3f3 	udiv	r3, r0, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Init+0x17e>
 800289e:	2301      	movs	r3, #1
 80028a0:	e022      	b.n	80028e8 <HAL_I2C_Init+0x1c4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10e      	bne.n	80028c8 <HAL_I2C_Init+0x1a4>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1e58      	subs	r0, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6859      	ldr	r1, [r3, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	440b      	add	r3, r1
 80028b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c6:	e00f      	b.n	80028e8 <HAL_I2C_Init+0x1c4>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1e58      	subs	r0, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	0099      	lsls	r1, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	fbb0 f3f3 	udiv	r3, r0, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6809      	ldr	r1, [r1, #0]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69da      	ldr	r2, [r3, #28]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002916:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6911      	ldr	r1, [r2, #16]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	4311      	orrs	r1, r2
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	430b      	orrs	r3, r1
 800292a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	000186a0 	.word	0x000186a0
 8002984:	001e847f 	.word	0x001e847f
 8002988:	003d08ff 	.word	0x003d08ff
 800298c:	431bde83 	.word	0x431bde83
 8002990:	10624dd3 	.word	0x10624dd3

08002994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e25b      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d075      	beq.n	8002a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029b2:	4ba3      	ldr	r3, [pc, #652]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d00c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029be:	4ba0      	ldr	r3, [pc, #640]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d112      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ca:	4b9d      	ldr	r3, [pc, #628]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d6:	d10b      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d8:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d05b      	beq.n	8002a9c <HAL_RCC_OscConfig+0x108>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d157      	bne.n	8002a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e236      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f8:	d106      	bne.n	8002a08 <HAL_RCC_OscConfig+0x74>
 80029fa:	4b91      	ldr	r3, [pc, #580]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a90      	ldr	r2, [pc, #576]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e01d      	b.n	8002a44 <HAL_RCC_OscConfig+0xb0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8a      	ldr	r2, [pc, #552]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b88      	ldr	r3, [pc, #544]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a87      	ldr	r2, [pc, #540]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0xb0>
 8002a2c:	4b84      	ldr	r3, [pc, #528]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a83      	ldr	r2, [pc, #524]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d013      	beq.n	8002a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fe4e 	bl	80016ec <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe fe4a 	bl	80016ec <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1fb      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	4b76      	ldr	r3, [pc, #472]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0xc0>
 8002a72:	e014      	b.n	8002a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a74:	f7fe fe3a 	bl	80016ec <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fe36 	bl	80016ec <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	; 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e1e7      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0xe8>
 8002a9a:	e000      	b.n	8002a9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d063      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aaa:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 030c 	and.w	r3, r3, #12
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ab6:	4b62      	ldr	r3, [pc, #392]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d11c      	bne.n	8002afc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ac2:	4b5f      	ldr	r3, [pc, #380]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	4b5c      	ldr	r3, [pc, #368]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x152>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1bb      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4952      	ldr	r1, [pc, #328]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	e03a      	b.n	8002b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCC_OscConfig+0x2b0>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fdef 	bl	80016ec <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe fdeb 	bl	80016ec <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e19c      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f0      	beq.n	8002b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4940      	ldr	r1, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	600b      	str	r3, [r1, #0]
 8002b44:	e015      	b.n	8002b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b46:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <HAL_RCC_OscConfig+0x2b0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fdce 	bl	80016ec <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b54:	f7fe fdca 	bl	80016ec <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e17b      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d030      	beq.n	8002be0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCC_OscConfig+0x2b4>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fdae 	bl	80016ec <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b94:	f7fe fdaa 	bl	80016ec <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e15b      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x200>
 8002bb2:	e015      	b.n	8002be0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x2b4>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7fe fd97 	bl	80016ec <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fd93 	bl	80016ec <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e144      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 80a0 	beq.w	8002d2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a0e      	ldr	r2, [pc, #56]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_RCC_OscConfig+0x2b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d121      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_RCC_OscConfig+0x2b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_RCC_OscConfig+0x2b8>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fd59 	bl	80016ec <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e011      	b.n	8002c62 <HAL_RCC_OscConfig+0x2ce>
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	42470000 	.word	0x42470000
 8002c48:	42470e80 	.word	0x42470e80
 8002c4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe fd4c 	bl	80016ec <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0fd      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b81      	ldr	r3, [pc, #516]	; (8002e68 <HAL_RCC_OscConfig+0x4d4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d106      	bne.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
 8002c76:	4b7d      	ldr	r3, [pc, #500]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	4a7c      	ldr	r2, [pc, #496]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6713      	str	r3, [r2, #112]	; 0x70
 8002c82:	e01c      	b.n	8002cbe <HAL_RCC_OscConfig+0x32a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c8c:	4b77      	ldr	r3, [pc, #476]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a76      	ldr	r2, [pc, #472]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	4b74      	ldr	r3, [pc, #464]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	4a73      	ldr	r2, [pc, #460]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ca4:	e00b      	b.n	8002cbe <HAL_RCC_OscConfig+0x32a>
 8002ca6:	4b71      	ldr	r3, [pc, #452]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	4a70      	ldr	r2, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb2:	4b6e      	ldr	r3, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a6d      	ldr	r2, [pc, #436]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d015      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fd11 	bl	80016ec <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fd0d 	bl	80016ec <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0bc      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ee      	beq.n	8002cce <HAL_RCC_OscConfig+0x33a>
 8002cf0:	e014      	b.n	8002d1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fcfb 	bl	80016ec <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe fcf7 	bl	80016ec <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0a6      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	4a51      	ldr	r2, [pc, #324]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8092 	beq.w	8002e5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d05c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d141      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4c:	4b48      	ldr	r3, [pc, #288]	; (8002e70 <HAL_RCC_OscConfig+0x4dc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe fccb 	bl	80016ec <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe fcc7 	bl	80016ec <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e078      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	019b      	lsls	r3, r3, #6
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	3b01      	subs	r3, #1
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	4933      	ldr	r1, [pc, #204]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da2:	4b33      	ldr	r3, [pc, #204]	; (8002e70 <HAL_RCC_OscConfig+0x4dc>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fca0 	bl	80016ec <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fc9c 	bl	80016ec <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e04d      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x41c>
 8002dce:	e045      	b.n	8002e5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_RCC_OscConfig+0x4dc>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fc89 	bl	80016ec <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fc85 	bl	80016ec <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e036      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x44a>
 8002dfc:	e02e      	b.n	8002e5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e029      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e0a:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_RCC_OscConfig+0x4d8>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d115      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e32:	4013      	ands	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d106      	bne.n	8002e58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470060 	.word	0x42470060

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0cc      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b68      	ldr	r3, [pc, #416]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d90c      	bls.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b65      	ldr	r3, [pc, #404]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0b8      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d020      	beq.n	8002efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ec8:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a58      	ldr	r2, [pc, #352]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	494d      	ldr	r1, [pc, #308]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d044      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f12:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d119      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f42:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e067      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f023 0203 	bic.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4934      	ldr	r1, [pc, #208]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f64:	f7fe fbc2 	bl	80016ec <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	e00a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f6c:	f7fe fbbe 	bl	80016ec <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e04f      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f82:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 020c 	and.w	r2, r3, #12
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d1eb      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d20c      	bcs.n	8002fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e032      	b.n	8003022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d009      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ffa:	f000 f821 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	5cd3      	ldrb	r3, [r2, r3]
 800300e:	fa21 f303 	lsr.w	r3, r1, r3
 8003012:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe fb22 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023c00 	.word	0x40023c00
 8003030:	40023800 	.word	0x40023800
 8003034:	08004538 	.word	0x08004538
 8003038:	20000000 	.word	0x20000000
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003056:	4b50      	ldr	r3, [pc, #320]	; (8003198 <HAL_RCC_GetSysClockFreq+0x158>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b04      	cmp	r3, #4
 8003060:	d007      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x32>
 8003062:	2b08      	cmp	r3, #8
 8003064:	d008      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x38>
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 808d 	bne.w	8003186 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCC_GetSysClockFreq+0x15c>)
 800306e:	60bb      	str	r3, [r7, #8]
       break;
 8003070:	e08c      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003072:	4b4b      	ldr	r3, [pc, #300]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003074:	60bb      	str	r3, [r7, #8]
      break;
 8003076:	e089      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_RCC_GetSysClockFreq+0x158>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003080:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003082:	4b45      	ldr	r3, [pc, #276]	; (8003198 <HAL_RCC_GetSysClockFreq+0x158>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d023      	beq.n	80030d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308e:	4b42      	ldr	r3, [pc, #264]	; (8003198 <HAL_RCC_GetSysClockFreq+0x158>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	099b      	lsrs	r3, r3, #6
 8003094:	f04f 0400 	mov.w	r4, #0
 8003098:	f240 11ff 	movw	r1, #511	; 0x1ff
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	ea03 0501 	and.w	r5, r3, r1
 80030a4:	ea04 0602 	and.w	r6, r4, r2
 80030a8:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80030aa:	fb02 f106 	mul.w	r1, r2, r6
 80030ae:	2200      	movs	r2, #0
 80030b0:	fb02 f205 	mul.w	r2, r2, r5
 80030b4:	440a      	add	r2, r1
 80030b6:	493a      	ldr	r1, [pc, #232]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80030b8:	fba5 0101 	umull	r0, r1, r5, r1
 80030bc:	1853      	adds	r3, r2, r1
 80030be:	4619      	mov	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f04f 0400 	mov.w	r4, #0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4623      	mov	r3, r4
 80030ca:	f7fd f87d 	bl	80001c8 <__aeabi_uldivmod>
 80030ce:	4603      	mov	r3, r0
 80030d0:	460c      	mov	r4, r1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e049      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d6:	4b30      	ldr	r3, [pc, #192]	; (8003198 <HAL_RCC_GetSysClockFreq+0x158>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	f04f 0400 	mov.w	r4, #0
 80030e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	ea03 0501 	and.w	r5, r3, r1
 80030ec:	ea04 0602 	and.w	r6, r4, r2
 80030f0:	4629      	mov	r1, r5
 80030f2:	4632      	mov	r2, r6
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f04f 0400 	mov.w	r4, #0
 80030fc:	0154      	lsls	r4, r2, #5
 80030fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003102:	014b      	lsls	r3, r1, #5
 8003104:	4619      	mov	r1, r3
 8003106:	4622      	mov	r2, r4
 8003108:	1b49      	subs	r1, r1, r5
 800310a:	eb62 0206 	sbc.w	r2, r2, r6
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	f04f 0400 	mov.w	r4, #0
 8003116:	0194      	lsls	r4, r2, #6
 8003118:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800311c:	018b      	lsls	r3, r1, #6
 800311e:	1a5b      	subs	r3, r3, r1
 8003120:	eb64 0402 	sbc.w	r4, r4, r2
 8003124:	f04f 0100 	mov.w	r1, #0
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	00e2      	lsls	r2, r4, #3
 800312e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003132:	00d9      	lsls	r1, r3, #3
 8003134:	460b      	mov	r3, r1
 8003136:	4614      	mov	r4, r2
 8003138:	195b      	adds	r3, r3, r5
 800313a:	eb44 0406 	adc.w	r4, r4, r6
 800313e:	f04f 0100 	mov.w	r1, #0
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	02a2      	lsls	r2, r4, #10
 8003148:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800314c:	0299      	lsls	r1, r3, #10
 800314e:	460b      	mov	r3, r1
 8003150:	4614      	mov	r4, r2
 8003152:	4618      	mov	r0, r3
 8003154:	4621      	mov	r1, r4
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f04f 0400 	mov.w	r4, #0
 800315c:	461a      	mov	r2, r3
 800315e:	4623      	mov	r3, r4
 8003160:	f7fd f832 	bl	80001c8 <__aeabi_uldivmod>
 8003164:	4603      	mov	r3, r0
 8003166:	460c      	mov	r4, r1
 8003168:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_GetSysClockFreq+0x158>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	3301      	adds	r3, #1
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	60bb      	str	r3, [r7, #8]
      break;
 8003184:	e002      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003188:	60bb      	str	r3, [r7, #8]
      break;
 800318a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318c:	68bb      	ldr	r3, [r7, #8]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	00f42400 	.word	0x00f42400
 80031a0:	017d7840 	.word	0x017d7840

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff0 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c4:	4601      	mov	r1, r0
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40023800 	.word	0x40023800
 80031e0:	08004548 	.word	0x08004548

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031e8:	f7ff ffdc 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031ec:	4601      	mov	r1, r0
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0b5b      	lsrs	r3, r3, #13
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4a03      	ldr	r2, [pc, #12]	; (8003208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40023800 	.word	0x40023800
 8003208:	08004548 	.word	0x08004548

0800320c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e056      	b.n	80032cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fd fd05 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003254:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	ea42 0103 	orr.w	r1, r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	f003 0104 	and.w	r1, r3, #4
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e01d      	b.n	8003322 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fd ff74 	bl	80011e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 f956 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e01d      	b.n	8003378 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f815 	bl	8003380 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 f92b 	bl	80035c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_OC_ConfigChannel+0x1a>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e04e      	b.n	800344c <HAL_TIM_OC_ConfigChannel+0xb8>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d839      	bhi.n	8003438 <HAL_TIM_OC_ConfigChannel+0xa4>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <HAL_TIM_OC_ConfigChannel+0x38>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003439 	.word	0x08003439
 80033d4:	08003439 	.word	0x08003439
 80033d8:	08003439 	.word	0x08003439
 80033dc:	0800340f 	.word	0x0800340f
 80033e0:	08003439 	.word	0x08003439
 80033e4:	08003439 	.word	0x08003439
 80033e8:	08003439 	.word	0x08003439
 80033ec:	0800341d 	.word	0x0800341d
 80033f0:	08003439 	.word	0x08003439
 80033f4:	08003439 	.word	0x08003439
 80033f8:	08003439 	.word	0x08003439
 80033fc:	0800342b 	.word	0x0800342b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f97c 	bl	8003704 <TIM_OC1_SetConfig>
      break;
 800340c:	e015      	b.n	800343a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 f9e5 	bl	80037e4 <TIM_OC2_SetConfig>
      break;
 800341a:	e00e      	b.n	800343a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fa54 	bl	80038d0 <TIM_OC3_SetConfig>
      break;
 8003428:	e007      	b.n	800343a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fac1 	bl	80039b8 <TIM_OC4_SetConfig>
      break;
 8003436:	e000      	b.n	800343a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003438:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_TIM_ConfigClockSource+0x18>
 8003468:	2302      	movs	r3, #2
 800346a:	e0a6      	b.n	80035ba <HAL_TIM_ConfigClockSource+0x166>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800348a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003492:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d067      	beq.n	8003574 <HAL_TIM_ConfigClockSource+0x120>
 80034a4:	2b40      	cmp	r3, #64	; 0x40
 80034a6:	d80b      	bhi.n	80034c0 <HAL_TIM_ConfigClockSource+0x6c>
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d073      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0x140>
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d802      	bhi.n	80034b6 <HAL_TIM_ConfigClockSource+0x62>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d06f      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80034b4:	e078      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d06c      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0x140>
 80034ba:	2b30      	cmp	r3, #48	; 0x30
 80034bc:	d06a      	beq.n	8003594 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80034be:	e073      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034c0:	2b70      	cmp	r3, #112	; 0x70
 80034c2:	d00d      	beq.n	80034e0 <HAL_TIM_ConfigClockSource+0x8c>
 80034c4:	2b70      	cmp	r3, #112	; 0x70
 80034c6:	d804      	bhi.n	80034d2 <HAL_TIM_ConfigClockSource+0x7e>
 80034c8:	2b50      	cmp	r3, #80	; 0x50
 80034ca:	d033      	beq.n	8003534 <HAL_TIM_ConfigClockSource+0xe0>
 80034cc:	2b60      	cmp	r3, #96	; 0x60
 80034ce:	d041      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80034d0:	e06a      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d6:	d066      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x152>
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d017      	beq.n	800350e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80034de:	e063      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f000 fb32 	bl	8003b58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003502:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]
      break;
 800350c:	e04c      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f000 fb1b 	bl	8003b58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003530:	609a      	str	r2, [r3, #8]
      break;
 8003532:	e039      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	461a      	mov	r2, r3
 8003542:	f000 fa8f 	bl	8003a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2150      	movs	r1, #80	; 0x50
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fae8 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003552:	e029      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	461a      	mov	r2, r3
 8003562:	f000 faae 	bl	8003ac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2160      	movs	r1, #96	; 0x60
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fad8 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003572:	e019      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6859      	ldr	r1, [r3, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	461a      	mov	r2, r3
 8003582:	f000 fa6f 	bl	8003a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2140      	movs	r1, #64	; 0x40
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fac8 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 8003592:	e009      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f000 fabf 	bl	8003b22 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e000      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80035a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a40      	ldr	r2, [pc, #256]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d013      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e2:	d00f      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <TIM_Base_SetConfig+0x118>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3b      	ldr	r2, [pc, #236]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <TIM_Base_SetConfig+0x40>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a3a      	ldr	r2, [pc, #232]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d108      	bne.n	8003616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d02b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003624:	d027      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	; (80036dc <TIM_Base_SetConfig+0x118>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d023      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <TIM_Base_SetConfig+0x11c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <TIM_Base_SetConfig+0x120>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d017      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <TIM_Base_SetConfig+0x128>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <TIM_Base_SetConfig+0x12c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00f      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <TIM_Base_SetConfig+0x130>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d00b      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <TIM_Base_SetConfig+0x134>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d007      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a24      	ldr	r2, [pc, #144]	; (80036fc <TIM_Base_SetConfig+0x138>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d003      	beq.n	8003676 <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <TIM_Base_SetConfig+0x13c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d108      	bne.n	8003688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <TIM_Base_SetConfig+0x114>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0xf8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <TIM_Base_SetConfig+0x124>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	40001800 	.word	0x40001800
 80036fc:	40001c00 	.word	0x40001c00
 8003700:	40002000 	.word	0x40002000

08003704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f023 0201 	bic.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0303 	bic.w	r3, r3, #3
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a20      	ldr	r2, [pc, #128]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_OC1_SetConfig+0x64>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1f      	ldr	r2, [pc, #124]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a15      	ldr	r2, [pc, #84]	; (80037dc <TIM_OC1_SetConfig+0xd8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_OC1_SetConfig+0x8e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC1_SetConfig+0xdc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d111      	bne.n	80037b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	621a      	str	r2, [r3, #32]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40010400 	.word	0x40010400

080037e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0320 	bic.w	r3, r3, #32
 800382e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0x68>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a21      	ldr	r2, [pc, #132]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <TIM_OC2_SetConfig+0xe4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d003      	beq.n	8003878 <TIM_OC2_SetConfig+0x94>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <TIM_OC2_SetConfig+0xe8>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d113      	bne.n	80038a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40010400 	.word	0x40010400

080038d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	021b      	lsls	r3, r3, #8
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_OC3_SetConfig+0x66>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800393c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <TIM_OC3_SetConfig+0xe0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d003      	beq.n	8003962 <TIM_OC3_SetConfig+0x92>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <TIM_OC3_SetConfig+0xe4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d113      	bne.n	800398a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	621a      	str	r2, [r3, #32]
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010400 	.word	0x40010400

080039b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <TIM_OC4_SetConfig+0xa4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_OC4_SetConfig+0x68>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a11      	ldr	r2, [pc, #68]	; (8003a60 <TIM_OC4_SetConfig+0xa8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d109      	bne.n	8003a34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0201 	bic.w	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 030a 	bic.w	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	621a      	str	r2, [r3, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b085      	sub	sp, #20
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f043 0307 	orr.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	021a      	lsls	r2, r3, #8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e05a      	b.n	8003c66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d01d      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1d      	ldr	r2, [pc, #116]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a17      	ldr	r2, [pc, #92]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d10c      	bne.n	8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40000c00 	.word	0x40000c00
 8003c84:	40010400 	.word	0x40010400
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40001800 	.word	0x40001800

08003c90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e03d      	b.n	8003d28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e03f      	b.n	8003dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d106      	bne.n	8003d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd fb1e 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f829 	bl	8003dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003e12:	f023 030c 	bic.w	r3, r3, #12
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3e:	f040 818b 	bne.w	8004158 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4ac1      	ldr	r2, [pc, #772]	; (800414c <UART_SetConfig+0x37c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d005      	beq.n	8003e58 <UART_SetConfig+0x88>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4abf      	ldr	r2, [pc, #764]	; (8004150 <UART_SetConfig+0x380>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	f040 80bd 	bne.w	8003fd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7ff f9c4 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8003e5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	461d      	mov	r5, r3
 8003e62:	f04f 0600 	mov.w	r6, #0
 8003e66:	46a8      	mov	r8, r5
 8003e68:	46b1      	mov	r9, r6
 8003e6a:	eb18 0308 	adds.w	r3, r8, r8
 8003e6e:	eb49 0409 	adc.w	r4, r9, r9
 8003e72:	4698      	mov	r8, r3
 8003e74:	46a1      	mov	r9, r4
 8003e76:	eb18 0805 	adds.w	r8, r8, r5
 8003e7a:	eb49 0906 	adc.w	r9, r9, r6
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e92:	4688      	mov	r8, r1
 8003e94:	4691      	mov	r9, r2
 8003e96:	eb18 0005 	adds.w	r0, r8, r5
 8003e9a:	eb49 0106 	adc.w	r1, r9, r6
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	461d      	mov	r5, r3
 8003ea4:	f04f 0600 	mov.w	r6, #0
 8003ea8:	196b      	adds	r3, r5, r5
 8003eaa:	eb46 0406 	adc.w	r4, r6, r6
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4623      	mov	r3, r4
 8003eb2:	f7fc f989 	bl	80001c8 <__aeabi_uldivmod>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	460c      	mov	r4, r1
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4ba5      	ldr	r3, [pc, #660]	; (8004154 <UART_SetConfig+0x384>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	461d      	mov	r5, r3
 8003ecc:	f04f 0600 	mov.w	r6, #0
 8003ed0:	46a9      	mov	r9, r5
 8003ed2:	46b2      	mov	sl, r6
 8003ed4:	eb19 0309 	adds.w	r3, r9, r9
 8003ed8:	eb4a 040a 	adc.w	r4, sl, sl
 8003edc:	4699      	mov	r9, r3
 8003ede:	46a2      	mov	sl, r4
 8003ee0:	eb19 0905 	adds.w	r9, r9, r5
 8003ee4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ee8:	f04f 0100 	mov.w	r1, #0
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ef8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003efc:	4689      	mov	r9, r1
 8003efe:	4692      	mov	sl, r2
 8003f00:	eb19 0005 	adds.w	r0, r9, r5
 8003f04:	eb4a 0106 	adc.w	r1, sl, r6
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	f04f 0600 	mov.w	r6, #0
 8003f12:	196b      	adds	r3, r5, r5
 8003f14:	eb46 0406 	adc.w	r4, r6, r6
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	f7fc f954 	bl	80001c8 <__aeabi_uldivmod>
 8003f20:	4603      	mov	r3, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b8b      	ldr	r3, [pc, #556]	; (8004154 <UART_SetConfig+0x384>)
 8003f28:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	2164      	movs	r1, #100	; 0x64
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3332      	adds	r3, #50	; 0x32
 8003f3a:	4a86      	ldr	r2, [pc, #536]	; (8004154 <UART_SetConfig+0x384>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f48:	4498      	add	r8, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	461d      	mov	r5, r3
 8003f4e:	f04f 0600 	mov.w	r6, #0
 8003f52:	46a9      	mov	r9, r5
 8003f54:	46b2      	mov	sl, r6
 8003f56:	eb19 0309 	adds.w	r3, r9, r9
 8003f5a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f5e:	4699      	mov	r9, r3
 8003f60:	46a2      	mov	sl, r4
 8003f62:	eb19 0905 	adds.w	r9, r9, r5
 8003f66:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f7e:	4689      	mov	r9, r1
 8003f80:	4692      	mov	sl, r2
 8003f82:	eb19 0005 	adds.w	r0, r9, r5
 8003f86:	eb4a 0106 	adc.w	r1, sl, r6
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	461d      	mov	r5, r3
 8003f90:	f04f 0600 	mov.w	r6, #0
 8003f94:	196b      	adds	r3, r5, r5
 8003f96:	eb46 0406 	adc.w	r4, r6, r6
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4623      	mov	r3, r4
 8003f9e:	f7fc f913 	bl	80001c8 <__aeabi_uldivmod>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4b6a      	ldr	r3, [pc, #424]	; (8004154 <UART_SetConfig+0x384>)
 8003faa:	fba3 1302 	umull	r1, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2164      	movs	r1, #100	; 0x64
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	3332      	adds	r3, #50	; 0x32
 8003fbc:	4a65      	ldr	r2, [pc, #404]	; (8004154 <UART_SetConfig+0x384>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	f003 0207 	and.w	r2, r3, #7
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4442      	add	r2, r8
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	e26f      	b.n	80044b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fd2:	f7ff f8f3 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8003fd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	461d      	mov	r5, r3
 8003fdc:	f04f 0600 	mov.w	r6, #0
 8003fe0:	46a8      	mov	r8, r5
 8003fe2:	46b1      	mov	r9, r6
 8003fe4:	eb18 0308 	adds.w	r3, r8, r8
 8003fe8:	eb49 0409 	adc.w	r4, r9, r9
 8003fec:	4698      	mov	r8, r3
 8003fee:	46a1      	mov	r9, r4
 8003ff0:	eb18 0805 	adds.w	r8, r8, r5
 8003ff4:	eb49 0906 	adc.w	r9, r9, r6
 8003ff8:	f04f 0100 	mov.w	r1, #0
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004004:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004008:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800400c:	4688      	mov	r8, r1
 800400e:	4691      	mov	r9, r2
 8004010:	eb18 0005 	adds.w	r0, r8, r5
 8004014:	eb49 0106 	adc.w	r1, r9, r6
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	461d      	mov	r5, r3
 800401e:	f04f 0600 	mov.w	r6, #0
 8004022:	196b      	adds	r3, r5, r5
 8004024:	eb46 0406 	adc.w	r4, r6, r6
 8004028:	461a      	mov	r2, r3
 800402a:	4623      	mov	r3, r4
 800402c:	f7fc f8cc 	bl	80001c8 <__aeabi_uldivmod>
 8004030:	4603      	mov	r3, r0
 8004032:	460c      	mov	r4, r1
 8004034:	461a      	mov	r2, r3
 8004036:	4b47      	ldr	r3, [pc, #284]	; (8004154 <UART_SetConfig+0x384>)
 8004038:	fba3 2302 	umull	r2, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	461d      	mov	r5, r3
 8004046:	f04f 0600 	mov.w	r6, #0
 800404a:	46a9      	mov	r9, r5
 800404c:	46b2      	mov	sl, r6
 800404e:	eb19 0309 	adds.w	r3, r9, r9
 8004052:	eb4a 040a 	adc.w	r4, sl, sl
 8004056:	4699      	mov	r9, r3
 8004058:	46a2      	mov	sl, r4
 800405a:	eb19 0905 	adds.w	r9, r9, r5
 800405e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800406e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004072:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004076:	4689      	mov	r9, r1
 8004078:	4692      	mov	sl, r2
 800407a:	eb19 0005 	adds.w	r0, r9, r5
 800407e:	eb4a 0106 	adc.w	r1, sl, r6
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	461d      	mov	r5, r3
 8004088:	f04f 0600 	mov.w	r6, #0
 800408c:	196b      	adds	r3, r5, r5
 800408e:	eb46 0406 	adc.w	r4, r6, r6
 8004092:	461a      	mov	r2, r3
 8004094:	4623      	mov	r3, r4
 8004096:	f7fc f897 	bl	80001c8 <__aeabi_uldivmod>
 800409a:	4603      	mov	r3, r0
 800409c:	460c      	mov	r4, r1
 800409e:	461a      	mov	r2, r3
 80040a0:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <UART_SetConfig+0x384>)
 80040a2:	fba3 1302 	umull	r1, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2164      	movs	r1, #100	; 0x64
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a27      	ldr	r2, [pc, #156]	; (8004154 <UART_SetConfig+0x384>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040c2:	4498      	add	r8, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	461d      	mov	r5, r3
 80040c8:	f04f 0600 	mov.w	r6, #0
 80040cc:	46a9      	mov	r9, r5
 80040ce:	46b2      	mov	sl, r6
 80040d0:	eb19 0309 	adds.w	r3, r9, r9
 80040d4:	eb4a 040a 	adc.w	r4, sl, sl
 80040d8:	4699      	mov	r9, r3
 80040da:	46a2      	mov	sl, r4
 80040dc:	eb19 0905 	adds.w	r9, r9, r5
 80040e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80040e4:	f04f 0100 	mov.w	r1, #0
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f8:	4689      	mov	r9, r1
 80040fa:	4692      	mov	sl, r2
 80040fc:	eb19 0005 	adds.w	r0, r9, r5
 8004100:	eb4a 0106 	adc.w	r1, sl, r6
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	461d      	mov	r5, r3
 800410a:	f04f 0600 	mov.w	r6, #0
 800410e:	196b      	adds	r3, r5, r5
 8004110:	eb46 0406 	adc.w	r4, r6, r6
 8004114:	461a      	mov	r2, r3
 8004116:	4623      	mov	r3, r4
 8004118:	f7fc f856 	bl	80001c8 <__aeabi_uldivmod>
 800411c:	4603      	mov	r3, r0
 800411e:	460c      	mov	r4, r1
 8004120:	461a      	mov	r2, r3
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <UART_SetConfig+0x384>)
 8004124:	fba3 1302 	umull	r1, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	2164      	movs	r1, #100	; 0x64
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	3332      	adds	r3, #50	; 0x32
 8004136:	4a07      	ldr	r2, [pc, #28]	; (8004154 <UART_SetConfig+0x384>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	f003 0207 	and.w	r2, r3, #7
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4442      	add	r2, r8
 8004148:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800414a:	e1b2      	b.n	80044b2 <UART_SetConfig+0x6e2>
 800414c:	40011000 	.word	0x40011000
 8004150:	40011400 	.word	0x40011400
 8004154:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4ad7      	ldr	r2, [pc, #860]	; (80044bc <UART_SetConfig+0x6ec>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d005      	beq.n	800416e <UART_SetConfig+0x39e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4ad6      	ldr	r2, [pc, #856]	; (80044c0 <UART_SetConfig+0x6f0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	f040 80d1 	bne.w	8004310 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800416e:	f7ff f839 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8004172:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	469a      	mov	sl, r3
 8004178:	f04f 0b00 	mov.w	fp, #0
 800417c:	46d0      	mov	r8, sl
 800417e:	46d9      	mov	r9, fp
 8004180:	eb18 0308 	adds.w	r3, r8, r8
 8004184:	eb49 0409 	adc.w	r4, r9, r9
 8004188:	4698      	mov	r8, r3
 800418a:	46a1      	mov	r9, r4
 800418c:	eb18 080a 	adds.w	r8, r8, sl
 8004190:	eb49 090b 	adc.w	r9, r9, fp
 8004194:	f04f 0100 	mov.w	r1, #0
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80041a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80041a8:	4688      	mov	r8, r1
 80041aa:	4691      	mov	r9, r2
 80041ac:	eb1a 0508 	adds.w	r5, sl, r8
 80041b0:	eb4b 0609 	adc.w	r6, fp, r9
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	f04f 0400 	mov.w	r4, #0
 80041c6:	0094      	lsls	r4, r2, #2
 80041c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041cc:	008b      	lsls	r3, r1, #2
 80041ce:	461a      	mov	r2, r3
 80041d0:	4623      	mov	r3, r4
 80041d2:	4628      	mov	r0, r5
 80041d4:	4631      	mov	r1, r6
 80041d6:	f7fb fff7 	bl	80001c8 <__aeabi_uldivmod>
 80041da:	4603      	mov	r3, r0
 80041dc:	460c      	mov	r4, r1
 80041de:	461a      	mov	r2, r3
 80041e0:	4bb8      	ldr	r3, [pc, #736]	; (80044c4 <UART_SetConfig+0x6f4>)
 80041e2:	fba3 2302 	umull	r2, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	469b      	mov	fp, r3
 80041f0:	f04f 0c00 	mov.w	ip, #0
 80041f4:	46d9      	mov	r9, fp
 80041f6:	46e2      	mov	sl, ip
 80041f8:	eb19 0309 	adds.w	r3, r9, r9
 80041fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004200:	4699      	mov	r9, r3
 8004202:	46a2      	mov	sl, r4
 8004204:	eb19 090b 	adds.w	r9, r9, fp
 8004208:	eb4a 0a0c 	adc.w	sl, sl, ip
 800420c:	f04f 0100 	mov.w	r1, #0
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800421c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004220:	4689      	mov	r9, r1
 8004222:	4692      	mov	sl, r2
 8004224:	eb1b 0509 	adds.w	r5, fp, r9
 8004228:	eb4c 060a 	adc.w	r6, ip, sl
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	0094      	lsls	r4, r2, #2
 8004240:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004244:	008b      	lsls	r3, r1, #2
 8004246:	461a      	mov	r2, r3
 8004248:	4623      	mov	r3, r4
 800424a:	4628      	mov	r0, r5
 800424c:	4631      	mov	r1, r6
 800424e:	f7fb ffbb 	bl	80001c8 <__aeabi_uldivmod>
 8004252:	4603      	mov	r3, r0
 8004254:	460c      	mov	r4, r1
 8004256:	461a      	mov	r2, r3
 8004258:	4b9a      	ldr	r3, [pc, #616]	; (80044c4 <UART_SetConfig+0x6f4>)
 800425a:	fba3 1302 	umull	r1, r3, r3, r2
 800425e:	095b      	lsrs	r3, r3, #5
 8004260:	2164      	movs	r1, #100	; 0x64
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	3332      	adds	r3, #50	; 0x32
 800426c:	4a95      	ldr	r2, [pc, #596]	; (80044c4 <UART_SetConfig+0x6f4>)
 800426e:	fba2 2303 	umull	r2, r3, r2, r3
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004278:	4498      	add	r8, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	469b      	mov	fp, r3
 800427e:	f04f 0c00 	mov.w	ip, #0
 8004282:	46d9      	mov	r9, fp
 8004284:	46e2      	mov	sl, ip
 8004286:	eb19 0309 	adds.w	r3, r9, r9
 800428a:	eb4a 040a 	adc.w	r4, sl, sl
 800428e:	4699      	mov	r9, r3
 8004290:	46a2      	mov	sl, r4
 8004292:	eb19 090b 	adds.w	r9, r9, fp
 8004296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042ae:	4689      	mov	r9, r1
 80042b0:	4692      	mov	sl, r2
 80042b2:	eb1b 0509 	adds.w	r5, fp, r9
 80042b6:	eb4c 060a 	adc.w	r6, ip, sl
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f04f 0400 	mov.w	r4, #0
 80042cc:	0094      	lsls	r4, r2, #2
 80042ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d2:	008b      	lsls	r3, r1, #2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	4628      	mov	r0, r5
 80042da:	4631      	mov	r1, r6
 80042dc:	f7fb ff74 	bl	80001c8 <__aeabi_uldivmod>
 80042e0:	4603      	mov	r3, r0
 80042e2:	460c      	mov	r4, r1
 80042e4:	461a      	mov	r2, r3
 80042e6:	4b77      	ldr	r3, [pc, #476]	; (80044c4 <UART_SetConfig+0x6f4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	3332      	adds	r3, #50	; 0x32
 80042fa:	4a72      	ldr	r2, [pc, #456]	; (80044c4 <UART_SetConfig+0x6f4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 020f 	and.w	r2, r3, #15
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4442      	add	r2, r8
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	e0d0      	b.n	80044b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe ff54 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8004314:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	469a      	mov	sl, r3
 800431a:	f04f 0b00 	mov.w	fp, #0
 800431e:	46d0      	mov	r8, sl
 8004320:	46d9      	mov	r9, fp
 8004322:	eb18 0308 	adds.w	r3, r8, r8
 8004326:	eb49 0409 	adc.w	r4, r9, r9
 800432a:	4698      	mov	r8, r3
 800432c:	46a1      	mov	r9, r4
 800432e:	eb18 080a 	adds.w	r8, r8, sl
 8004332:	eb49 090b 	adc.w	r9, r9, fp
 8004336:	f04f 0100 	mov.w	r1, #0
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004342:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004346:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800434a:	4688      	mov	r8, r1
 800434c:	4691      	mov	r9, r2
 800434e:	eb1a 0508 	adds.w	r5, sl, r8
 8004352:	eb4b 0609 	adc.w	r6, fp, r9
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4619      	mov	r1, r3
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	f04f 0400 	mov.w	r4, #0
 8004368:	0094      	lsls	r4, r2, #2
 800436a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	461a      	mov	r2, r3
 8004372:	4623      	mov	r3, r4
 8004374:	4628      	mov	r0, r5
 8004376:	4631      	mov	r1, r6
 8004378:	f7fb ff26 	bl	80001c8 <__aeabi_uldivmod>
 800437c:	4603      	mov	r3, r0
 800437e:	460c      	mov	r4, r1
 8004380:	461a      	mov	r2, r3
 8004382:	4b50      	ldr	r3, [pc, #320]	; (80044c4 <UART_SetConfig+0x6f4>)
 8004384:	fba3 2302 	umull	r2, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	469b      	mov	fp, r3
 8004392:	f04f 0c00 	mov.w	ip, #0
 8004396:	46d9      	mov	r9, fp
 8004398:	46e2      	mov	sl, ip
 800439a:	eb19 0309 	adds.w	r3, r9, r9
 800439e:	eb4a 040a 	adc.w	r4, sl, sl
 80043a2:	4699      	mov	r9, r3
 80043a4:	46a2      	mov	sl, r4
 80043a6:	eb19 090b 	adds.w	r9, r9, fp
 80043aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043c2:	4689      	mov	r9, r1
 80043c4:	4692      	mov	sl, r2
 80043c6:	eb1b 0509 	adds.w	r5, fp, r9
 80043ca:	eb4c 060a 	adc.w	r6, ip, sl
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4619      	mov	r1, r3
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	f04f 0400 	mov.w	r4, #0
 80043e0:	0094      	lsls	r4, r2, #2
 80043e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043e6:	008b      	lsls	r3, r1, #2
 80043e8:	461a      	mov	r2, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	4628      	mov	r0, r5
 80043ee:	4631      	mov	r1, r6
 80043f0:	f7fb feea 	bl	80001c8 <__aeabi_uldivmod>
 80043f4:	4603      	mov	r3, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <UART_SetConfig+0x6f4>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	; 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	3332      	adds	r3, #50	; 0x32
 800440e:	4a2d      	ldr	r2, [pc, #180]	; (80044c4 <UART_SetConfig+0x6f4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441a:	4498      	add	r8, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	469b      	mov	fp, r3
 8004420:	f04f 0c00 	mov.w	ip, #0
 8004424:	46d9      	mov	r9, fp
 8004426:	46e2      	mov	sl, ip
 8004428:	eb19 0309 	adds.w	r3, r9, r9
 800442c:	eb4a 040a 	adc.w	r4, sl, sl
 8004430:	4699      	mov	r9, r3
 8004432:	46a2      	mov	sl, r4
 8004434:	eb19 090b 	adds.w	r9, r9, fp
 8004438:	eb4a 0a0c 	adc.w	sl, sl, ip
 800443c:	f04f 0100 	mov.w	r1, #0
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004448:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800444c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004450:	4689      	mov	r9, r1
 8004452:	4692      	mov	sl, r2
 8004454:	eb1b 0509 	adds.w	r5, fp, r9
 8004458:	eb4c 060a 	adc.w	r6, ip, sl
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4619      	mov	r1, r3
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	f04f 0400 	mov.w	r4, #0
 800446e:	0094      	lsls	r4, r2, #2
 8004470:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004474:	008b      	lsls	r3, r1, #2
 8004476:	461a      	mov	r2, r3
 8004478:	4623      	mov	r3, r4
 800447a:	4628      	mov	r0, r5
 800447c:	4631      	mov	r1, r6
 800447e:	f7fb fea3 	bl	80001c8 <__aeabi_uldivmod>
 8004482:	4603      	mov	r3, r0
 8004484:	460c      	mov	r4, r1
 8004486:	461a      	mov	r2, r3
 8004488:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <UART_SetConfig+0x6f4>)
 800448a:	fba3 1302 	umull	r1, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2164      	movs	r1, #100	; 0x64
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	3332      	adds	r3, #50	; 0x32
 800449c:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <UART_SetConfig+0x6f4>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4442      	add	r2, r8
 80044ae:	609a      	str	r2, [r3, #8]
}
 80044b0:	e7ff      	b.n	80044b2 <UART_SetConfig+0x6e2>
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044bc:	40011000 	.word	0x40011000
 80044c0:	40011400 	.word	0x40011400
 80044c4:	51eb851f 	.word	0x51eb851f

080044c8 <__libc_init_array>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4e0d      	ldr	r6, [pc, #52]	; (8004500 <__libc_init_array+0x38>)
 80044cc:	4c0d      	ldr	r4, [pc, #52]	; (8004504 <__libc_init_array+0x3c>)
 80044ce:	1ba4      	subs	r4, r4, r6
 80044d0:	10a4      	asrs	r4, r4, #2
 80044d2:	2500      	movs	r5, #0
 80044d4:	42a5      	cmp	r5, r4
 80044d6:	d109      	bne.n	80044ec <__libc_init_array+0x24>
 80044d8:	4e0b      	ldr	r6, [pc, #44]	; (8004508 <__libc_init_array+0x40>)
 80044da:	4c0c      	ldr	r4, [pc, #48]	; (800450c <__libc_init_array+0x44>)
 80044dc:	f000 f820 	bl	8004520 <_init>
 80044e0:	1ba4      	subs	r4, r4, r6
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	2500      	movs	r5, #0
 80044e6:	42a5      	cmp	r5, r4
 80044e8:	d105      	bne.n	80044f6 <__libc_init_array+0x2e>
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044f0:	4798      	blx	r3
 80044f2:	3501      	adds	r5, #1
 80044f4:	e7ee      	b.n	80044d4 <__libc_init_array+0xc>
 80044f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044fa:	4798      	blx	r3
 80044fc:	3501      	adds	r5, #1
 80044fe:	e7f2      	b.n	80044e6 <__libc_init_array+0x1e>
 8004500:	08004560 	.word	0x08004560
 8004504:	08004560 	.word	0x08004560
 8004508:	08004560 	.word	0x08004560
 800450c:	08004564 	.word	0x08004564

08004510 <memset>:
 8004510:	4402      	add	r2, r0
 8004512:	4603      	mov	r3, r0
 8004514:	4293      	cmp	r3, r2
 8004516:	d100      	bne.n	800451a <memset+0xa>
 8004518:	4770      	bx	lr
 800451a:	f803 1b01 	strb.w	r1, [r3], #1
 800451e:	e7f9      	b.n	8004514 <memset+0x4>

08004520 <_init>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	bf00      	nop
 8004524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004526:	bc08      	pop	{r3}
 8004528:	469e      	mov	lr, r3
 800452a:	4770      	bx	lr

0800452c <_fini>:
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	bf00      	nop
 8004530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004532:	bc08      	pop	{r3}
 8004534:	469e      	mov	lr, r3
 8004536:	4770      	bx	lr
