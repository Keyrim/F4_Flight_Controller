
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ac0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08014c50  08014c50  00024c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801535c  0801535c  00031f80  2**0
                  CONTENTS
  4 .ARM          00000008  0801535c  0801535c  0002535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015364  08015364  00031f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015364  08015364  00025364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015368  08015368  00025368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001f80  20000000  0801536c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca8  20001f80  080172ec  00031f80  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c28  080172ec  00033c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054a8b  00000000  00000000  00031fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e4d  00000000  00000000  00086a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c78  00000000  00000000  0008e888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001910  00000000  00000000  00090500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002dc00  00000000  00000000  00091e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00031ca0  00000000  00000000  000bfa10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf0f4  00000000  00000000  000f16b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c07a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008098  00000000  00000000  001c0820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001f80 	.word	0x20001f80
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c38 	.word	0x08014c38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001f84 	.word	0x20001f84
 80001cc:	08014c38 	.word	0x08014c38

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:



static uint8_t name_flight_mode[] = "Flight Mode";

void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4ab4      	ldr	r2, [pc, #720]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							FALSE);
 8000f56:	4bb4      	ldr	r3, [pc, #720]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f64:	4ab0      	ldr	r2, [pc, #704]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4baf      	ldr	r3, [pc, #700]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4bae      	ldr	r3, [pc, #696]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f70:	4aae      	ldr	r2, [pc, #696]	; (800122c <DATA_LOGGER_Init+0x2e4>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4bac      	ldr	r3, [pc, #688]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4bab      	ldr	r3, [pc, #684]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							FALSE);
 8000f80:	4ba9      	ldr	r3, [pc, #676]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f90:	4aa5      	ldr	r2, [pc, #660]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4ba4      	ldr	r3, [pc, #656]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4ba2      	ldr	r3, [pc, #648]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f9e:	4aa4      	ldr	r2, [pc, #656]	; (8001230 <DATA_LOGGER_Init+0x2e8>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b9f      	ldr	r3, [pc, #636]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c

	//Angles acc
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						FALSE);
 8000fb0:	4b9d      	ldr	r3, [pc, #628]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000fc0:	4a99      	ldr	r2, [pc, #612]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc2:	6353      	str	r3, [r2, #52]	; 0x34
 8000fc4:	4b98      	ldr	r3, [pc, #608]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc6:	2229      	movs	r2, #41	; 0x29
 8000fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000fcc:	4b96      	ldr	r3, [pc, #600]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fce:	4a99      	ldr	r2, [pc, #612]	; (8001234 <DATA_LOGGER_Init+0x2ec>)
 8000fd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fd2:	4b95      	ldr	r3, [pc, #596]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd4:	220c      	movs	r2, #12
 8000fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000fda:	4b93      	ldr	r3, [pc, #588]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						FALSE);
 8000fe0:	4b91      	ldr	r3, [pc, #580]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8000fe8:	4b8e      	ldr	r3, [pc, #568]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000ff0:	4a8d      	ldr	r2, [pc, #564]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff4:	4b8c      	ldr	r3, [pc, #560]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ff6:	2229      	movs	r2, #41	; 0x29
 8000ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ffe:	4a8e      	ldr	r2, [pc, #568]	; (8001238 <DATA_LOGGER_Init+0x2f0>)
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
 8001002:	4b89      	ldr	r3, [pc, #548]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001004:	220d      	movs	r2, #13
 8001006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800100a:	4b87      	ldr	r3, [pc, #540]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800100c:	2200      	movs	r2, #0
 800100e:	65da      	str	r2, [r3, #92]	; 0x5c

	//Consignes angles
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_roll,					FALSE);
 8001010:	4b85      	ldr	r3, [pc, #532]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001012:	2224      	movs	r2, #36	; 0x24
 8001014:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8001018:	4b82      	ldr	r3, [pc, #520]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8001020:	4a81      	ldr	r2, [pc, #516]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001022:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
 8001026:	4b80      	ldr	r3, [pc, #512]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001028:	2229      	movs	r2, #41	; 0x29
 800102a:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800102e:	4b7e      	ldr	r3, [pc, #504]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001030:	4a82      	ldr	r2, [pc, #520]	; (800123c <DATA_LOGGER_Init+0x2f4>)
 8001032:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 8001036:	4b7c      	ldr	r3, [pc, #496]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001038:	220b      	movs	r2, #11
 800103a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 800103e:	4b7a      	ldr	r3, [pc, #488]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001040:	2200      	movs	r2, #0
 8001042:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_pitch,					FALSE);
 8001046:	4b78      	ldr	r3, [pc, #480]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001048:	2225      	movs	r2, #37	; 0x25
 800104a:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 800104e:	4b75      	ldr	r3, [pc, #468]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 8001056:	4a74      	ldr	r2, [pc, #464]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001058:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
 800105c:	4b72      	ldr	r3, [pc, #456]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800105e:	2229      	movs	r2, #41	; 0x29
 8001060:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 8001064:	4b70      	ldr	r3, [pc, #448]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001066:	4a76      	ldr	r2, [pc, #472]	; (8001240 <DATA_LOGGER_Init+0x2f8>)
 8001068:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 800106c:	4b6e      	ldr	r3, [pc, #440]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800106e:	220c      	movs	r2, #12
 8001070:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 8001074:	4b6c      	ldr	r3, [pc, #432]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001076:	2200      	movs	r2, #0
 8001078:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

	//Pid gyro roll
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].output, 		DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll, 						FALSE);
 800107c:	4b6a      	ldr	r3, [pc, #424]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800107e:	221e      	movs	r2, #30
 8001080:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8001084:	4b67      	ldr	r3, [pc, #412]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f503 6323 	add.w	r3, r3, #2608	; 0xa30
 800108c:	4a66      	ldr	r2, [pc, #408]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800108e:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
 8001092:	4b65      	ldr	r3, [pc, #404]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001094:	2229      	movs	r2, #41	; 0x29
 8001096:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 800109a:	4b63      	ldr	r3, [pc, #396]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800109c:	4a69      	ldr	r2, [pc, #420]	; (8001244 <DATA_LOGGER_Init+0x2fc>)
 800109e:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 80010a2:	4b61      	ldr	r3, [pc, #388]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a4:	220d      	movs	r2, #13
 80010a6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 80010aa:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_P, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].P, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_p, 						FALSE);
 80010b2:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010b4:	221f      	movs	r2, #31
 80010b6:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 80010ba:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f603 2334 	addw	r3, r3, #2612	; 0xa34
 80010c2:	4a59      	ldr	r2, [pc, #356]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010c4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 80010c8:	4b57      	ldr	r3, [pc, #348]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ca:	2229      	movs	r2, #41	; 0x29
 80010cc:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 80010d0:	4b55      	ldr	r3, [pc, #340]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010d2:	4a5d      	ldr	r2, [pc, #372]	; (8001248 <DATA_LOGGER_Init+0x300>)
 80010d4:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010da:	220d      	movs	r2, #13
 80010dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_I, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].I, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_i, 						FALSE);
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ea:	2221      	movs	r2, #33	; 0x21
 80010ec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 80010f0:	4b4c      	ldr	r3, [pc, #304]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010fa:	f8c2 331c 	str.w	r3, [r2, #796]	; 0x31c
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001100:	2229      	movs	r2, #41	; 0x29
 8001102:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <DATA_LOGGER_Init+0x304>)
 800110a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001110:	220d      	movs	r2, #13
 8001112:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 8001116:	4b44      	ldr	r3, [pc, #272]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001118:	2200      	movs	r2, #0
 800111a:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_D, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].D, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_d, 						FALSE);
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001120:	2220      	movs	r2, #32
 8001122:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f603 233c 	addw	r3, r3, #2620	; 0xa3c
 800112e:	4a3e      	ldr	r2, [pc, #248]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001130:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001136:	2229      	movs	r2, #41	; 0x29
 8001138:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 800113c:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800113e:	4a44      	ldr	r2, [pc, #272]	; (8001250 <DATA_LOGGER_Init+0x308>)
 8001140:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 8001144:	4b38      	ldr	r3, [pc, #224]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001146:	220d      	movs	r2, #13
 8001148:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800114e:	2200      	movs	r2, #0
 8001150:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

	// Autres pid gyro
	DEFINE_DATA(DATA_ID_PID_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_PITCH].output, 	DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_pitch, 						FALSE);
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001156:	2222      	movs	r2, #34	; 0x22
 8001158:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f603 237c 	addw	r3, r3, #2684	; 0xa7c
 8001164:	4a30      	ldr	r2, [pc, #192]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001166:	f8c2 3334 	str.w	r3, [r2, #820]	; 0x334
 800116a:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800116c:	2229      	movs	r2, #41	; 0x29
 800116e:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001174:	4a37      	ldr	r2, [pc, #220]	; (8001254 <DATA_LOGGER_Init+0x30c>)
 8001176:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 800117a:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800117c:	220e      	movs	r2, #14
 800117e:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 8001182:	4b29      	ldr	r3, [pc, #164]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001184:	2200      	movs	r2, #0
 8001186:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	DEFINE_DATA(DATA_ID_PID_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_YAW].output, 		DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_yaw, 							FALSE);
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800118c:	2223      	movs	r2, #35	; 0x23
 800118e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 8001192:	4b24      	ldr	r3, [pc, #144]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 800119a:	4a23      	ldr	r2, [pc, #140]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800119c:	f8c2 334c 	str.w	r3, [r2, #844]	; 0x34c
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011a2:	2229      	movs	r2, #41	; 0x29
 80011a4:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011aa:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <DATA_LOGGER_Init+0x310>)
 80011ac:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							FALSE);
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3344      	adds	r3, #68	; 0x44
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011d0:	6653      	str	r3, [r2, #100]	; 0x64
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011d4:	2229      	movs	r2, #41	; 0x29
 80011d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011dc:	4a1f      	ldr	r2, [pc, #124]	; (800125c <DATA_LOGGER_Init+0x314>)
 80011de:	66da      	str	r2, [r3, #108]	; 0x6c
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	675a      	str	r2, [r3, #116]	; 0x74
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							FALSE);
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011f0:	2205      	movs	r2, #5
 80011f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3348      	adds	r3, #72	; 0x48
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011fe:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001202:	2229      	movs	r2, #41	; 0x29
 8001204:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <DATA_LOGGER_Init+0x318>)
 800120c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001212:	220a      	movs	r2, #10
 8001214:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800121a:	2200      	movs	r2, #0
 800121c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001220:	e020      	b.n	8001264 <DATA_LOGGER_Init+0x31c>
 8001222:	bf00      	nop
 8001224:	20001f9c 	.word	0x20001f9c
 8001228:	20001fa0 	.word	0x20001fa0
 800122c:	20000004 	.word	0x20000004
 8001230:	20000010 	.word	0x20000010
 8001234:	2000001c 	.word	0x2000001c
 8001238:	2000002c 	.word	0x2000002c
 800123c:	2000003c 	.word	0x2000003c
 8001240:	20000048 	.word	0x20000048
 8001244:	200001e4 	.word	0x200001e4
 8001248:	200001f4 	.word	0x200001f4
 800124c:	20000204 	.word	0x20000204
 8001250:	20000214 	.word	0x20000214
 8001254:	20000224 	.word	0x20000224
 8001258:	20000234 	.word	0x20000234
 800125c:	20000058 	.word	0x20000058
 8001260:	20000064 	.word	0x20000064
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					FALSE);
 8001264:	4bbe      	ldr	r3, [pc, #760]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001266:	2206      	movs	r2, #6
 8001268:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800126c:	4bbd      	ldr	r3, [pc, #756]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	334c      	adds	r3, #76	; 0x4c
 8001272:	4abb      	ldr	r2, [pc, #748]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001278:	4bb9      	ldr	r3, [pc, #740]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800127a:	2229      	movs	r2, #41	; 0x29
 800127c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8001280:	4bb7      	ldr	r3, [pc, #732]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001282:	4ab9      	ldr	r2, [pc, #740]	; (8001568 <DATA_LOGGER_Init+0x620>)
 8001284:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001288:	4bb5      	ldr	r3, [pc, #724]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800128a:	2208      	movs	r2, #8
 800128c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8001290:	4bb3      	ldr	r3, [pc, #716]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001292:	2200      	movs	r2, #0
 8001294:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								FALSE);
 8001298:	4bb1      	ldr	r3, [pc, #708]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800129a:	220a      	movs	r2, #10
 800129c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80012a0:	4bb0      	ldr	r3, [pc, #704]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	33b8      	adds	r3, #184	; 0xb8
 80012a6:	4aae      	ldr	r2, [pc, #696]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ac:	4bac      	ldr	r3, [pc, #688]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012ae:	222b      	movs	r2, #43	; 0x2b
 80012b0:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80012b4:	4baa      	ldr	r3, [pc, #680]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012b6:	4aad      	ldr	r2, [pc, #692]	; (800156c <DATA_LOGGER_Init+0x624>)
 80012b8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80012bc:	4ba8      	ldr	r3, [pc, #672]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012be:	2208      	movs	r2, #8
 80012c0:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80012c4:	4ba6      	ldr	r3, [pc, #664]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							FALSE);
 80012cc:	4ba4      	ldr	r3, [pc, #656]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012ce:	220b      	movs	r2, #11
 80012d0:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80012d4:	4ba3      	ldr	r3, [pc, #652]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	33bc      	adds	r3, #188	; 0xbc
 80012da:	4aa1      	ldr	r2, [pc, #644]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80012e0:	4b9f      	ldr	r3, [pc, #636]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012e2:	222b      	movs	r2, #43	; 0x2b
 80012e4:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 80012e8:	4b9d      	ldr	r3, [pc, #628]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012ea:	4aa1      	ldr	r2, [pc, #644]	; (8001570 <DATA_LOGGER_Init+0x628>)
 80012ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80012f0:	4b9b      	ldr	r3, [pc, #620]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012f2:	2209      	movs	r2, #9
 80012f4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 80012f8:	4b99      	ldr	r3, [pc, #612]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								FALSE);
 8001300:	4b97      	ldr	r3, [pc, #604]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001302:	220c      	movs	r2, #12
 8001304:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8001308:	4b96      	ldr	r3, [pc, #600]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	33c0      	adds	r3, #192	; 0xc0
 800130e:	4a94      	ldr	r2, [pc, #592]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001310:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8001314:	4b92      	ldr	r3, [pc, #584]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001316:	222b      	movs	r2, #43	; 0x2b
 8001318:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 800131c:	4b90      	ldr	r3, [pc, #576]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800131e:	4a95      	ldr	r2, [pc, #596]	; (8001574 <DATA_LOGGER_Init+0x62c>)
 8001320:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8001324:	4b8e      	ldr	r3, [pc, #568]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001326:	2207      	movs	r2, #7
 8001328:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800132c:	4b8c      	ldr	r3, [pc, #560]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800132e:	2200      	movs	r2, #0
 8001330:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							FALSE);
 8001334:	4b8a      	ldr	r3, [pc, #552]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001336:	220d      	movs	r2, #13
 8001338:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 800133c:	4b89      	ldr	r3, [pc, #548]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001344:	4a86      	ldr	r2, [pc, #536]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001346:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 800134a:	4b85      	ldr	r3, [pc, #532]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800134c:	222b      	movs	r2, #43	; 0x2b
 800134e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 8001352:	4b83      	ldr	r3, [pc, #524]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001354:	4a88      	ldr	r2, [pc, #544]	; (8001578 <DATA_LOGGER_Init+0x630>)
 8001356:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800135c:	220c      	movs	r2, #12
 800135e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8001362:	4b7f      	ldr	r3, [pc, #508]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001364:	2200      	movs	r2, #0
 8001366:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						FALSE);
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800136c:	220e      	movs	r2, #14
 800136e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 8001372:	4b7c      	ldr	r3, [pc, #496]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800137a:	3304      	adds	r3, #4
 800137c:	4a78      	ldr	r2, [pc, #480]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800137e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001384:	222b      	movs	r2, #43	; 0x2b
 8001386:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 800138a:	4b75      	ldr	r3, [pc, #468]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800138c:	4a7b      	ldr	r2, [pc, #492]	; (800157c <DATA_LOGGER_Init+0x634>)
 800138e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8001392:	4b73      	ldr	r3, [pc, #460]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001394:	220d      	movs	r2, #13
 8001396:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 800139a:	4b71      	ldr	r3, [pc, #452]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800139c:	2200      	movs	r2, #0
 800139e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							FALSE);
 80013a2:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013a4:	220f      	movs	r2, #15
 80013a6:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 80013aa:	4b6e      	ldr	r3, [pc, #440]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80013b2:	3308      	adds	r3, #8
 80013b4:	4a6a      	ldr	r2, [pc, #424]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013b6:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 80013ba:	4b69      	ldr	r3, [pc, #420]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013bc:	222b      	movs	r2, #43	; 0x2b
 80013be:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013c4:	4a6e      	ldr	r2, [pc, #440]	; (8001580 <DATA_LOGGER_Init+0x638>)
 80013c6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 80013ca:	4b65      	ldr	r3, [pc, #404]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013cc:	220b      	movs	r2, #11
 80013ce:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 80013d2:	4b63      	ldr	r3, [pc, #396]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	//Acceleration dans le ref de la terre
	DEFINE_DATA(DATA_ID_ACC_X, (uint8_t*)&sys->position.acceleration[POSITION_AXE_X], 											DATA_FORMAT_16B_FLOAT_3D, 	name_x_acc, 								FALSE);
 80013da:	4b61      	ldr	r3, [pc, #388]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013dc:	2210      	movs	r2, #16
 80013de:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 80013e2:	4b60      	ldr	r3, [pc, #384]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 80013ea:	4a5d      	ldr	r2, [pc, #372]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013ec:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 80013f0:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013f2:	222b      	movs	r2, #43	; 0x2b
 80013f4:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 80013f8:	4b59      	ldr	r3, [pc, #356]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013fa:	4a62      	ldr	r2, [pc, #392]	; (8001584 <DATA_LOGGER_Init+0x63c>)
 80013fc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8001400:	4b57      	ldr	r3, [pc, #348]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001402:	2205      	movs	r2, #5
 8001404:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800140a:	2200      	movs	r2, #0
 800140c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	DEFINE_DATA(DATA_ID_ACC_Y, (uint8_t*)&sys->position.acceleration[POSITION_AXE_Y], 											DATA_FORMAT_16B_FLOAT_3D, 	name_y_acc, 								FALSE);
 8001410:	4b53      	ldr	r3, [pc, #332]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001412:	2211      	movs	r2, #17
 8001414:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8001418:	4b52      	ldr	r3, [pc, #328]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f503 7333 	add.w	r3, r3, #716	; 0x2cc
 8001420:	4a4f      	ldr	r2, [pc, #316]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001422:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8001426:	4b4e      	ldr	r3, [pc, #312]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001428:	222b      	movs	r2, #43	; 0x2b
 800142a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001430:	4a55      	ldr	r2, [pc, #340]	; (8001588 <DATA_LOGGER_Init+0x640>)
 8001432:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001438:	2205      	movs	r2, #5
 800143a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001440:	2200      	movs	r2, #0
 8001442:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	DEFINE_DATA(DATA_ID_ACC_Z, (uint8_t*)&sys->position.acc_raw[POSITION_AXE_Z], 												DATA_FORMAT_16B_FLOAT_3D, 	name_z_acc, 								TRUE);
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001448:	2212      	movs	r2, #18
 800144a:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8001456:	4a42      	ldr	r2, [pc, #264]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001458:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 800145c:	4b40      	ldr	r3, [pc, #256]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800145e:	222b      	movs	r2, #43	; 0x2b
 8001460:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 8001464:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001466:	4a49      	ldr	r2, [pc, #292]	; (800158c <DATA_LOGGER_Init+0x644>)
 8001468:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 800146c:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800146e:	2205      	movs	r2, #5
 8001470:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001476:	2201      	movs	r2, #1
 8001478:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

	//Vitesse dans le ref de la terre
	DEFINE_DATA(DATA_ID_SPEED_X, (uint8_t*)&sys->position.velocity[POSITION_AXE_X], 											DATA_FORMAT_16B_FLOAT_2D, 	name_x_speed, 								FALSE);
 800147c:	4b38      	ldr	r3, [pc, #224]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800147e:	2213      	movs	r2, #19
 8001480:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800148c:	4a34      	ldr	r2, [pc, #208]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800148e:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001494:	222a      	movs	r2, #42	; 0x2a
 8001496:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800149c:	4a3c      	ldr	r2, [pc, #240]	; (8001590 <DATA_LOGGER_Init+0x648>)
 800149e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	DEFINE_DATA(DATA_ID_SPEED_Y, (uint8_t*)&sys->position.velocity[POSITION_AXE_Y], 											DATA_FORMAT_16B_FLOAT_2D, 	name_y_speed, 								FALSE);
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014b4:	2214      	movs	r2, #20
 80014b6:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80014c2:	4a27      	ldr	r2, [pc, #156]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014c4:	f8c2 31e4 	str.w	r3, [r2, #484]	; 0x1e4
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014ca:	222a      	movs	r2, #42	; 0x2a
 80014cc:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014d2:	4a30      	ldr	r2, [pc, #192]	; (8001594 <DATA_LOGGER_Init+0x64c>)
 80014d4:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014da:	2207      	movs	r2, #7
 80014dc:	f883 21f0 	strb.w	r2, [r3, #496]	; 0x1f0
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	DEFINE_DATA(DATA_ID_SPEED_Z, (uint8_t*)&sys->position.velocity[POSITION_AXE_Z], 											DATA_FORMAT_16B_FLOAT_2D, 	name_z_speed, 								TRUE);
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014ea:	2215      	movs	r2, #21
 80014ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014fa:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001500:	222a      	movs	r2, #42	; 0x2a
 8001502:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001508:	4a23      	ldr	r2, [pc, #140]	; (8001598 <DATA_LOGGER_Init+0x650>)
 800150a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001510:	2207      	movs	r2, #7
 8001512:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001518:	2201      	movs	r2, #1
 800151a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	//Position dans le ref de la terre
	DEFINE_DATA(DATA_ID_POS_X, (uint8_t*)&sys->position.position[POSITION_AXE_X], 												DATA_FORMAT_16B_FLOAT_3D, 	name_x_pos, 								FALSE);
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001520:	2216      	movs	r2, #22
 8001522:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001530:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001536:	222b      	movs	r2, #43	; 0x2b
 8001538:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <DATA_LOGGER_Init+0x654>)
 8001540:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001546:	2205      	movs	r2, #5
 8001548:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800154e:	2200      	movs	r2, #0
 8001550:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	DEFINE_DATA(DATA_ID_POS_Y, (uint8_t*)&sys->position.position[POSITION_AXE_Y], 												DATA_FORMAT_16B_FLOAT_3D, 	name_y_pos, 								FALSE);
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001556:	2217      	movs	r2, #23
 8001558:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 800155c:	e020      	b.n	80015a0 <DATA_LOGGER_Init+0x658>
 800155e:	bf00      	nop
 8001560:	20001fa0 	.word	0x20001fa0
 8001564:	20001f9c 	.word	0x20001f9c
 8001568:	20000070 	.word	0x20000070
 800156c:	2000007c 	.word	0x2000007c
 8001570:	20000088 	.word	0x20000088
 8001574:	20000094 	.word	0x20000094
 8001578:	2000009c 	.word	0x2000009c
 800157c:	200000ac 	.word	0x200000ac
 8001580:	200000bc 	.word	0x200000bc
 8001584:	200000c8 	.word	0x200000c8
 8001588:	200000d0 	.word	0x200000d0
 800158c:	200000d8 	.word	0x200000d8
 8001590:	200000e0 	.word	0x200000e0
 8001594:	200000e8 	.word	0x200000e8
 8001598:	200000f0 	.word	0x200000f0
 800159c:	200000f8 	.word	0x200000f8
 80015a0:	4bbe      	ldr	r3, [pc, #760]	; (800189c <DATA_LOGGER_Init+0x954>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80015a8:	4abd      	ldr	r2, [pc, #756]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015aa:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
 80015ae:	4bbc      	ldr	r3, [pc, #752]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015b0:	222b      	movs	r2, #43	; 0x2b
 80015b2:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80015b6:	4bba      	ldr	r3, [pc, #744]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015b8:	4aba      	ldr	r2, [pc, #744]	; (80018a4 <DATA_LOGGER_Init+0x95c>)
 80015ba:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 80015be:	4bb8      	ldr	r3, [pc, #736]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015c0:	2205      	movs	r2, #5
 80015c2:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80015c6:	4bb6      	ldr	r3, [pc, #728]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	DEFINE_DATA(DATA_ID_POS_Z, (uint8_t*)&sys->position.position[POSITION_AXE_Z], 												DATA_FORMAT_16B_FLOAT_3D, 	name_z_pos, 								FALSE);
 80015ce:	4bb4      	ldr	r3, [pc, #720]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015d0:	2218      	movs	r2, #24
 80015d2:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80015d6:	4bb1      	ldr	r3, [pc, #708]	; (800189c <DATA_LOGGER_Init+0x954>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80015de:	4ab0      	ldr	r2, [pc, #704]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015e0:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 80015e4:	4bae      	ldr	r3, [pc, #696]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015e6:	222b      	movs	r2, #43	; 0x2b
 80015e8:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80015ec:	4bac      	ldr	r3, [pc, #688]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015ee:	4aae      	ldr	r2, [pc, #696]	; (80018a8 <DATA_LOGGER_Init+0x960>)
 80015f0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80015f4:	4baa      	ldr	r3, [pc, #680]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015f6:	2205      	movs	r2, #5
 80015f8:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 80015fc:	4ba8      	ldr	r3, [pc, #672]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

	//Consigne position
	DEFINE_DATA(DATA_ID_CONSIGNE_POS_Z, (uint8_t*)&sys->regulation.position.consigne_position[POSITION_AXE_Z], 					DATA_FORMAT_16B_FLOAT_3D, 	name_consigne_pos_z, 						FALSE);
 8001604:	4ba6      	ldr	r3, [pc, #664]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001606:	2226      	movs	r2, #38	; 0x26
 8001608:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 800160c:	4ba3      	ldr	r3, [pc, #652]	; (800189c <DATA_LOGGER_Init+0x954>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8001614:	4aa2      	ldr	r2, [pc, #648]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001616:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
 800161a:	4ba1      	ldr	r3, [pc, #644]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800161c:	222b      	movs	r2, #43	; 0x2b
 800161e:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 8001622:	4b9f      	ldr	r3, [pc, #636]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001624:	4aa1      	ldr	r2, [pc, #644]	; (80018ac <DATA_LOGGER_Init+0x964>)
 8001626:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
 800162a:	4b9d      	ldr	r3, [pc, #628]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800162c:	220c      	movs	r2, #12
 800162e:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 8001632:	4b9b      	ldr	r3, [pc, #620]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001634:	2200      	movs	r2, #0
 8001636:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4


	//Pid position
	DEFINE_DATA(DATA_ID_PID_POS_Z, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].output, 					DATA_FORMAT_16B_FLOAT_1D, 	name_pid_pos_z, 							FALSE);
 800163a:	4b99      	ldr	r3, [pc, #612]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800163c:	2228      	movs	r2, #40	; 0x28
 800163e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8001642:	4b96      	ldr	r3, [pc, #600]	; (800189c <DATA_LOGGER_Init+0x954>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 800164a:	4a95      	ldr	r2, [pc, #596]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800164c:	f8c2 33c4 	str.w	r3, [r2, #964]	; 0x3c4
 8001650:	4b93      	ldr	r3, [pc, #588]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001652:	2229      	movs	r2, #41	; 0x29
 8001654:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 8001658:	4b91      	ldr	r3, [pc, #580]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800165a:	4a95      	ldr	r2, [pc, #596]	; (80018b0 <DATA_LOGGER_Init+0x968>)
 800165c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8001660:	4b8f      	ldr	r3, [pc, #572]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001662:	2209      	movs	r2, #9
 8001664:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 8001668:	4b8d      	ldr	r3, [pc, #564]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800166a:	2200      	movs	r2, #0
 800166c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
	DEFINE_DATA(DATA_ID_PID_POS_Z_P, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].P, 						DATA_FORMAT_16B_FLOAT_1D, 	name_p_pos_z, 								FALSE);
 8001670:	4b8b      	ldr	r3, [pc, #556]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001672:	2229      	movs	r2, #41	; 0x29
 8001674:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 8001678:	4b88      	ldr	r3, [pc, #544]	; (800189c <DATA_LOGGER_Init+0x954>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 635b 	add.w	r3, r3, #3504	; 0xdb0
 8001680:	4a87      	ldr	r2, [pc, #540]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001682:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
 8001686:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001688:	2229      	movs	r2, #41	; 0x29
 800168a:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 800168e:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001690:	4a88      	ldr	r2, [pc, #544]	; (80018b4 <DATA_LOGGER_Init+0x96c>)
 8001692:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 8001696:	4b82      	ldr	r3, [pc, #520]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001698:	2207      	movs	r2, #7
 800169a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 800169e:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
	DEFINE_DATA(DATA_ID_PID_POS_Z_I, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].I, 						DATA_FORMAT_16B_FLOAT_1D, 	name_i_pos_z, 								FALSE);
 80016a6:	4b7e      	ldr	r3, [pc, #504]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016a8:	222a      	movs	r2, #42	; 0x2a
 80016aa:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 80016ae:	4b7b      	ldr	r3, [pc, #492]	; (800189c <DATA_LOGGER_Init+0x954>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f603 53b4 	addw	r3, r3, #3508	; 0xdb4
 80016b6:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016b8:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
 80016bc:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016be:	2229      	movs	r2, #41	; 0x29
 80016c0:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 80016c4:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016c6:	4a7c      	ldr	r2, [pc, #496]	; (80018b8 <DATA_LOGGER_Init+0x970>)
 80016c8:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 80016cc:	4b74      	ldr	r3, [pc, #464]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016ce:	2207      	movs	r2, #7
 80016d0:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
 80016d4:	4b72      	ldr	r3, [pc, #456]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	DEFINE_DATA(DATA_ID_PID_POS_Z_D, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].D, 						DATA_FORMAT_16B_FLOAT_1D, 	name_d_pos_z, 								FALSE);
 80016dc:	4b70      	ldr	r3, [pc, #448]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016de:	222b      	movs	r2, #43	; 0x2b
 80016e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 80016e4:	4b6d      	ldr	r3, [pc, #436]	; (800189c <DATA_LOGGER_Init+0x954>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f603 53b8 	addw	r3, r3, #3512	; 0xdb8
 80016ec:	4a6c      	ldr	r2, [pc, #432]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016ee:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 80016f2:	4b6b      	ldr	r3, [pc, #428]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016f4:	2229      	movs	r2, #41	; 0x29
 80016f6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 80016fa:	4b69      	ldr	r3, [pc, #420]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016fc:	4a6f      	ldr	r2, [pc, #444]	; (80018bc <DATA_LOGGER_Init+0x974>)
 80016fe:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001704:	2207      	movs	r2, #7
 8001706:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 800170a:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800170c:	2200      	movs	r2, #0
 800170e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	//Consigne velocity
	DEFINE_DATA(DATA_ID_CONSIGNE_VELOCITY_Z, (uint8_t*)&sys->regulation.position.consigne_velocity[POSITION_AXE_Z], 			DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_velocity_z, 					FALSE);
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001714:	2227      	movs	r2, #39	; 0x27
 8001716:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 800171a:	4b60      	ldr	r3, [pc, #384]	; (800189c <DATA_LOGGER_Init+0x954>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f603 432c 	addw	r3, r3, #3116	; 0xc2c
 8001722:	4a5f      	ldr	r2, [pc, #380]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001724:	f8c2 33ac 	str.w	r3, [r2, #940]	; 0x3ac
 8001728:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800172a:	2229      	movs	r2, #41	; 0x29
 800172c:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8001730:	4b5b      	ldr	r3, [pc, #364]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001732:	4a63      	ldr	r2, [pc, #396]	; (80018c0 <DATA_LOGGER_Init+0x978>)
 8001734:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800173a:	220c      	movs	r2, #12
 800173c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8001740:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001742:	2200      	movs	r2, #0
 8001744:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

	//Pid velocity
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].output, 				DATA_FORMAT_16B_FLOAT_1D, 	name_pid_velocity_z, 					FALSE);
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800174a:	222c      	movs	r2, #44	; 0x2c
 800174c:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <DATA_LOGGER_Init+0x954>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 8001758:	4a51      	ldr	r2, [pc, #324]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800175a:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
 800175e:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001760:	2229      	movs	r2, #41	; 0x29
 8001762:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8001766:	4b4e      	ldr	r3, [pc, #312]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001768:	4a56      	ldr	r2, [pc, #344]	; (80018c4 <DATA_LOGGER_Init+0x97c>)
 800176a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
 800176e:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001770:	220a      	movs	r2, #10
 8001772:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8001776:	4b4a      	ldr	r3, [pc, #296]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001778:	2200      	movs	r2, #0
 800177a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z_P, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].P, 					DATA_FORMAT_16B_FLOAT_1D, 	name_p_velocity_z, 						FALSE);
 800177e:	4b48      	ldr	r3, [pc, #288]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001780:	222d      	movs	r2, #45	; 0x2d
 8001782:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8001786:	4b45      	ldr	r3, [pc, #276]	; (800189c <DATA_LOGGER_Init+0x954>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f603 43cc 	addw	r3, r3, #3276	; 0xccc
 800178e:	4a44      	ldr	r2, [pc, #272]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001790:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
 8001794:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001796:	2229      	movs	r2, #41	; 0x29
 8001798:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 800179c:	4b40      	ldr	r3, [pc, #256]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800179e:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <DATA_LOGGER_Init+0x980>)
 80017a0:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017a6:	2208      	movs	r2, #8
 80017a8:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z_I, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].I, 					DATA_FORMAT_16B_FLOAT_1D, 	name_i_velocity_z, 						FALSE);
 80017b4:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017b6:	222e      	movs	r2, #46	; 0x2e
 80017b8:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <DATA_LOGGER_Init+0x954>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 634d 	add.w	r3, r3, #3280	; 0xcd0
 80017c4:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017c6:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017cc:	2229      	movs	r2, #41	; 0x29
 80017ce:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 80017d2:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017d4:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <DATA_LOGGER_Init+0x984>)
 80017d6:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 80017da:	4b31      	ldr	r3, [pc, #196]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017dc:	2208      	movs	r2, #8
 80017de:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z_D, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].D, 					DATA_FORMAT_16B_FLOAT_1D, 	name_d_velocity_z, 						FALSE);
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017ec:	222f      	movs	r2, #47	; 0x2f
 80017ee:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <DATA_LOGGER_Init+0x954>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f603 43d4 	addw	r3, r3, #3284	; 0xcd4
 80017fa:	4a29      	ldr	r2, [pc, #164]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017fc:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001802:	2229      	movs	r2, #41	; 0x29
 8001804:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800180a:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <DATA_LOGGER_Init+0x988>)
 800180c:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001812:	2208      	movs	r2, #8
 8001814:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 8001818:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800181a:	2200      	movs	r2, #0
 800181c:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c

	//Consignes angles rates
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_roll_gyro, 							FALSE);
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001822:	221b      	movs	r2, #27
 8001824:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <DATA_LOGGER_Init+0x954>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001832:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001838:	2229      	movs	r2, #41	; 0x29
 800183a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001840:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <DATA_LOGGER_Init+0x98c>)
 8001842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001848:	220d      	movs	r2, #13
 800184a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001850:	2200      	movs	r2, #0
 8001852:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_pitch_gyro, 						FALSE);
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001858:	221c      	movs	r2, #28
 800185a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <DATA_LOGGER_Init+0x954>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001868:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800186e:	2229      	movs	r2, #41	; 0x29
 8001870:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001876:	4a18      	ldr	r2, [pc, #96]	; (80018d8 <DATA_LOGGER_Init+0x990>)
 8001878:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800187e:	220e      	movs	r2, #14
 8001880:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW], 		DATA_FORMAT_16B_FLOAT_1D, 	name_target_yaw_gyro, 		 					FALSE);
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800188e:	221d      	movs	r2, #29
 8001890:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8001894:	4b01      	ldr	r3, [pc, #4]	; (800189c <DATA_LOGGER_Init+0x954>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	e020      	b.n	80018dc <DATA_LOGGER_Init+0x994>
 800189a:	bf00      	nop
 800189c:	20001f9c 	.word	0x20001f9c
 80018a0:	20001fa0 	.word	0x20001fa0
 80018a4:	20000100 	.word	0x20000100
 80018a8:	20000108 	.word	0x20000108
 80018ac:	20000110 	.word	0x20000110
 80018b0:	20000130 	.word	0x20000130
 80018b4:	2000013c 	.word	0x2000013c
 80018b8:	20000144 	.word	0x20000144
 80018bc:	2000014c 	.word	0x2000014c
 80018c0:	20000120 	.word	0x20000120
 80018c4:	20000154 	.word	0x20000154
 80018c8:	20000160 	.word	0x20000160
 80018cc:	2000016c 	.word	0x2000016c
 80018d0:	20000178 	.word	0x20000178
 80018d4:	20000184 	.word	0x20000184
 80018d8:	20000194 	.word	0x20000194
 80018dc:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 80018e0:	4abe      	ldr	r2, [pc, #760]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80018e2:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
 80018e6:	4bbd      	ldr	r3, [pc, #756]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80018e8:	2229      	movs	r2, #41	; 0x29
 80018ea:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 80018ee:	4bbb      	ldr	r3, [pc, #748]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80018f0:	4abb      	ldr	r2, [pc, #748]	; (8001be0 <DATA_LOGGER_Init+0xc98>)
 80018f2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 80018f6:	4bb9      	ldr	r3, [pc, #740]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80018f8:	220c      	movs	r2, #12
 80018fa:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 80018fe:	4bb7      	ldr	r3, [pc, #732]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001900:	2200      	movs	r2, #0
 8001902:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 							FALSE);
 8001906:	4bb5      	ldr	r3, [pc, #724]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001908:	2207      	movs	r2, #7
 800190a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800190e:	4bb5      	ldr	r3, [pc, #724]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4ab1      	ldr	r2, [pc, #708]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001916:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 800191a:	4bb0      	ldr	r3, [pc, #704]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 800191c:	2229      	movs	r2, #41	; 0x29
 800191e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8001922:	4bae      	ldr	r3, [pc, #696]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001924:	4ab0      	ldr	r2, [pc, #704]	; (8001be8 <DATA_LOGGER_Init+0xca0>)
 8001926:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800192a:	4bac      	ldr	r3, [pc, #688]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 800192c:	220d      	movs	r2, #13
 800192e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8001932:	4baa      	ldr	r3, [pc, #680]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001934:	2200      	movs	r2, #0
 8001936:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,							FALSE);
 800193a:	4ba8      	ldr	r3, [pc, #672]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 800193c:	2208      	movs	r2, #8
 800193e:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8001942:	4ba8      	ldr	r3, [pc, #672]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4aa4      	ldr	r2, [pc, #656]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 800194a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
 800194e:	4ba3      	ldr	r3, [pc, #652]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001950:	2229      	movs	r2, #41	; 0x29
 8001952:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8001956:	4ba1      	ldr	r3, [pc, #644]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001958:	4aa4      	ldr	r2, [pc, #656]	; (8001bec <DATA_LOGGER_Init+0xca4>)
 800195a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800195e:	4b9f      	ldr	r3, [pc, #636]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001960:	220e      	movs	r2, #14
 8001962:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001966:	4b9d      	ldr	r3, [pc, #628]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001968:	2200      	movs	r2, #0
 800196a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 								FALSE);
 800196e:	4b9b      	ldr	r3, [pc, #620]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001970:	2209      	movs	r2, #9
 8001972:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8001976:	4b9b      	ldr	r3, [pc, #620]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	3308      	adds	r3, #8
 800197e:	4a97      	ldr	r2, [pc, #604]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001980:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001984:	4b95      	ldr	r3, [pc, #596]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001986:	2229      	movs	r2, #41	; 0x29
 8001988:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800198c:	4b93      	ldr	r3, [pc, #588]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 800198e:	4a98      	ldr	r2, [pc, #608]	; (8001bf0 <DATA_LOGGER_Init+0xca8>)
 8001990:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001994:	4b91      	ldr	r3, [pc, #580]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001996:	220c      	movs	r2, #12
 8001998:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 800199c:	4b8f      	ldr	r3, [pc, #572]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	//Barometer
	DEFINE_DATA(DATA_ID_PRESSURE_RAW, 		(uint8_t*)sys->sensors.baro.pressure_raw, 											DATA_FORMAT_16B_UINT16, 	name_pressure_raw, 								FALSE);
 80019a4:	4b8d      	ldr	r3, [pc, #564]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019a6:	2236      	movs	r2, #54	; 0x36
 80019a8:	f883 2518 	strb.w	r2, [r3, #1304]	; 0x518
 80019ac:	4b8d      	ldr	r3, [pc, #564]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80019b4:	4a89      	ldr	r2, [pc, #548]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019b6:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
 80019ba:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019bc:	222c      	movs	r2, #44	; 0x2c
 80019be:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
 80019c2:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019c4:	4a8b      	ldr	r2, [pc, #556]	; (8001bf4 <DATA_LOGGER_Init+0xcac>)
 80019c6:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
 80019ca:	4b84      	ldr	r3, [pc, #528]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019cc:	220c      	movs	r2, #12
 80019ce:	f883 2520 	strb.w	r2, [r3, #1312]	; 0x520
 80019d2:	4b82      	ldr	r3, [pc, #520]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	DEFINE_DATA(DATA_ID_PRESSURE, 		(uint8_t*)&sys->sensors.baro.pressure, 													DATA_FORMAT_16B_UINT16, 	name_pressure, 									FALSE);
 80019da:	4b80      	ldr	r3, [pc, #512]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019dc:	2235      	movs	r2, #53	; 0x35
 80019de:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80019e2:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80019ea:	4a7c      	ldr	r2, [pc, #496]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019ec:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80019f0:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019f2:	222c      	movs	r2, #44	; 0x2c
 80019f4:	f883 2501 	strb.w	r2, [r3, #1281]	; 0x501
 80019f8:	4b78      	ldr	r3, [pc, #480]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 80019fa:	4a7f      	ldr	r2, [pc, #508]	; (8001bf8 <DATA_LOGGER_Init+0xcb0>)
 80019fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
 8001a00:	4b76      	ldr	r3, [pc, #472]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	f883 2508 	strb.w	r2, [r3, #1288]	; 0x508
 8001a08:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	DEFINE_DATA(DATA_ID_TEMPERATURE, 	(uint8_t*)&sys->sensors.ms5611.temperature, 											DATA_FORMAT_16B_INT16, 		name_temperature, 								FALSE);
 8001a10:	4b72      	ldr	r3, [pc, #456]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a12:	2237      	movs	r2, #55	; 0x37
 8001a14:	f883 2530 	strb.w	r2, [r3, #1328]	; 0x530
 8001a18:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001a20:	4a6e      	ldr	r2, [pc, #440]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a22:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
 8001a26:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a28:	222d      	movs	r2, #45	; 0x2d
 8001a2a:	f883 2531 	strb.w	r2, [r3, #1329]	; 0x531
 8001a2e:	4b6b      	ldr	r3, [pc, #428]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a30:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <DATA_LOGGER_Init+0xcb4>)
 8001a32:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
 8001a36:	4b69      	ldr	r3, [pc, #420]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a38:	220b      	movs	r2, #11
 8001a3a:	f883 2538 	strb.w	r2, [r3, #1336]	; 0x538
 8001a3e:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	DEFINE_DATA(DATA_ID_ALTITUDE, 		(uint8_t*)&sys->sensors.baro.altitude, 													DATA_FORMAT_16B_FLOAT_3D, 	name_altitude, 									TRUE);
 8001a46:	4b65      	ldr	r3, [pc, #404]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a48:	2238      	movs	r2, #56	; 0x38
 8001a4a:	f883 2548 	strb.w	r2, [r3, #1352]	; 0x548
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8001a56:	4a61      	ldr	r2, [pc, #388]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a58:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
 8001a5c:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a5e:	222b      	movs	r2, #43	; 0x2b
 8001a60:	f883 2549 	strb.w	r2, [r3, #1353]	; 0x549
 8001a64:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a66:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <DATA_LOGGER_Init+0xcb8>)
 8001a68:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a6e:	2208      	movs	r2, #8
 8001a70:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
	DEFINE_DATA(DATA_ID_ALTITUDE_RAW, 		(uint8_t*)&sys->sensors.baro.altitude_raw, 											DATA_FORMAT_16B_FLOAT_3D, 	name_altitude_raw, 								FALSE);
 8001a7c:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a7e:	2239      	movs	r2, #57	; 0x39
 8001a80:	f883 2560 	strb.w	r2, [r3, #1376]	; 0x560
 8001a84:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001a8c:	4a53      	ldr	r2, [pc, #332]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a8e:	f8c2 355c 	str.w	r3, [r2, #1372]	; 0x55c
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a94:	222b      	movs	r2, #43	; 0x2b
 8001a96:	f883 2561 	strb.w	r2, [r3, #1377]	; 0x561
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001a9c:	4a59      	ldr	r2, [pc, #356]	; (8001c04 <DATA_LOGGER_Init+0xcbc>)
 8001a9e:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
 8001aa2:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	f883 2568 	strb.w	r2, [r3, #1384]	; 0x568
 8001aaa:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_config_request, 							FALSE);
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001ab4:	223a      	movs	r2, #58	; 0x3a
 8001ab6:	f883 2578 	strb.w	r2, [r3, #1400]	; 0x578
 8001aba:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
 8001ac2:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2579 	strb.w	r2, [r3, #1401]	; 0x579
 8001aca:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <DATA_LOGGER_Init+0xcc0>)
 8001ace:	f8c3 257c 	str.w	r2, [r3, #1404]	; 0x57c
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001ad4:	220b      	movs	r2, #11
 8001ad6:	f883 2580 	strb.w	r2, [r3, #1408]	; 0x580
 8001ada:	4b40      	ldr	r3, [pc, #256]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
	DEFINE_DATA(DATA_ID_DISABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_disable_asser_orientation,  				TRUE);
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001ae4:	223b      	movs	r2, #59	; 0x3b
 8001ae6:	f883 2590 	strb.w	r2, [r3, #1424]	; 0x590
 8001aea:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f8c3 258c 	str.w	r2, [r3, #1420]	; 0x58c
 8001af2:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2591 	strb.w	r2, [r3, #1425]	; 0x591
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001afc:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <DATA_LOGGER_Init+0xcc4>)
 8001afe:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b04:	220d      	movs	r2, #13
 8001b06:	f883 2598 	strb.w	r2, [r3, #1432]	; 0x598
 8001b0a:	4b34      	ldr	r3, [pc, #208]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c
	DEFINE_DATA(DATA_ID_ENABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_enable_asser_orientation, 					TRUE);
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b14:	223c      	movs	r2, #60	; 0x3c
 8001b16:	f883 25a8 	strb.w	r2, [r3, #1448]	; 0x5a8
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 25a9 	strb.w	r2, [r3, #1449]	; 0x5a9
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b2c:	4a38      	ldr	r2, [pc, #224]	; (8001c10 <DATA_LOGGER_Init+0xcc8>)
 8001b2e:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b34:	220c      	movs	r2, #12
 8001b36:	f883 25b0 	strb.w	r2, [r3, #1456]	; 0x5b0
 8001b3a:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
	DEFINE_DATA(DATA_ID_START_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 					TRUE);
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b44:	223d      	movs	r2, #61	; 0x3d
 8001b46:	f883 25c0 	strb.w	r2, [r3, #1472]	; 0x5c0
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f8c3 25bc 	str.w	r2, [r3, #1468]	; 0x5bc
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 25c1 	strb.w	r2, [r3, #1473]	; 0x5c1
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b5c:	4a2d      	ldr	r2, [pc, #180]	; (8001c14 <DATA_LOGGER_Init+0xccc>)
 8001b5e:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b64:	220e      	movs	r2, #14
 8001b66:	f883 25c8 	strb.w	r2, [r3, #1480]	; 0x5c8
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f8c3 25cc 	str.w	r2, [r3, #1484]	; 0x5cc
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 							TRUE);
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b74:	223e      	movs	r2, #62	; 0x3e
 8001b76:	f883 25d8 	strb.w	r2, [r3, #1496]	; 0x5d8
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 25d9 	strb.w	r2, [r3, #1497]	; 0x5d9
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b8c:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <DATA_LOGGER_Init+0xcd0>)
 8001b8e:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b94:	220d      	movs	r2, #13
 8001b96:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4

	//Propulsion
	DEFINE_DATA(DATA_ID_PROP_THRUST, (uint8_t*)&sys->propulsion.consigne[PROP_CONSIGNE_THRUST], 								DATA_FORMAT_16B_UINT16,  	name_prop_thrust, 								TRUE);
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001ba4:	2230      	movs	r2, #48	; 0x30
 8001ba6:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <DATA_LOGGER_Init+0xc9c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f603 231e 	addw	r3, r3, #2590	; 0xa1e
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001bb4:	f8c2 3484 	str.w	r3, [r2, #1156]	; 0x484
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001bba:	222c      	movs	r2, #44	; 0x2c
 8001bbc:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <DATA_LOGGER_Init+0xcd4>)
 8001bc4:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001bca:	220b      	movs	r2, #11
 8001bcc:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <DATA_LOGGER_Init+0xc94>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
 8001bd8:	e022      	b.n	8001c20 <DATA_LOGGER_Init+0xcd8>
 8001bda:	bf00      	nop
 8001bdc:	20001fa0 	.word	0x20001fa0
 8001be0:	200001a4 	.word	0x200001a4
 8001be4:	20001f9c 	.word	0x20001f9c
 8001be8:	200001b4 	.word	0x200001b4
 8001bec:	200001c4 	.word	0x200001c4
 8001bf0:	200001d4 	.word	0x200001d4
 8001bf4:	2000028c 	.word	0x2000028c
 8001bf8:	2000029c 	.word	0x2000029c
 8001bfc:	20000280 	.word	0x20000280
 8001c00:	200002a8 	.word	0x200002a8
 8001c04:	200002b4 	.word	0x200002b4
 8001c08:	200002c4 	.word	0x200002c4
 8001c0c:	200002e0 	.word	0x200002e0
 8001c10:	200002d0 	.word	0x200002d0
 8001c14:	200002f0 	.word	0x200002f0
 8001c18:	20000300 	.word	0x20000300
 8001c1c:	20000244 	.word	0x20000244
	DEFINE_DATA(DATA_ID_MOTOR_FL, 	(uint8_t*)&sys->propulsion.motors_outputs[MOTOR_FL], 										DATA_FORMAT_16B_UINT16,  	name_moteur_fl, 								FALSE);
 8001c20:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c22:	2231      	movs	r2, #49	; 0x31
 8001c24:	f883 24a0 	strb.w	r2, [r3, #1184]	; 0x4a0
 8001c28:	4b45      	ldr	r3, [pc, #276]	; (8001d40 <DATA_LOGGER_Init+0xdf8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f603 2326 	addw	r3, r3, #2598	; 0xa26
 8001c30:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c32:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c38:	222c      	movs	r2, #44	; 0x2c
 8001c3a:	f883 24a1 	strb.w	r2, [r3, #1185]	; 0x4a1
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c40:	4a40      	ldr	r2, [pc, #256]	; (8001d44 <DATA_LOGGER_Init+0xdfc>)
 8001c42:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c48:	2209      	movs	r2, #9
 8001c4a:	f883 24a8 	strb.w	r2, [r3, #1192]	; 0x4a8
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
	DEFINE_DATA(DATA_ID_MOTOR_FR, 	(uint8_t*)&sys->propulsion.motors_outputs[MOTOR_FR], 										DATA_FORMAT_16B_UINT16,  	name_moteur_fr, 								FALSE);
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c58:	2232      	movs	r2, #50	; 0x32
 8001c5a:	f883 24b8 	strb.w	r2, [r3, #1208]	; 0x4b8
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <DATA_LOGGER_Init+0xdf8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8001c66:	4a35      	ldr	r2, [pc, #212]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c68:	f8c2 34b4 	str.w	r3, [r2, #1204]	; 0x4b4
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c6e:	222c      	movs	r2, #44	; 0x2c
 8001c70:	f883 24b9 	strb.w	r2, [r3, #1209]	; 0x4b9
 8001c74:	4b31      	ldr	r3, [pc, #196]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c76:	4a34      	ldr	r2, [pc, #208]	; (8001d48 <DATA_LOGGER_Init+0xe00>)
 8001c78:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c7e:	2209      	movs	r2, #9
 8001c80:	f883 24c0 	strb.w	r2, [r3, #1216]	; 0x4c0
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	DEFINE_DATA(DATA_ID_MOTOR_BR, 	(uint8_t*)&sys->propulsion.motors_outputs[MOTOR_BR], 										DATA_FORMAT_16B_UINT16,  	name_moteur_br, 								FALSE);
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c8e:	2233      	movs	r2, #51	; 0x33
 8001c90:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <DATA_LOGGER_Init+0xdf8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001c9e:	f8c2 34cc 	str.w	r3, [r2, #1228]	; 0x4cc
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001ca4:	222c      	movs	r2, #44	; 0x2c
 8001ca6:	f883 24d1 	strb.w	r2, [r3, #1233]	; 0x4d1
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cac:	4a27      	ldr	r2, [pc, #156]	; (8001d4c <DATA_LOGGER_Init+0xe04>)
 8001cae:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cb4:	2209      	movs	r2, #9
 8001cb6:	f883 24d8 	strb.w	r2, [r3, #1240]	; 0x4d8
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
	DEFINE_DATA(DATA_ID_MOTOR_BL, 	(uint8_t*)&sys->propulsion.motors_outputs[MOTOR_BL], 										DATA_FORMAT_16B_UINT16,  	name_moteur_bl, 								FALSE);
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cc4:	2234      	movs	r2, #52	; 0x34
 8001cc6:	f883 24e8 	strb.w	r2, [r3, #1256]	; 0x4e8
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <DATA_LOGGER_Init+0xdf8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f603 2322 	addw	r3, r3, #2594	; 0xa22
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cd4:	f8c2 34e4 	str.w	r3, [r2, #1252]	; 0x4e4
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cda:	222c      	movs	r2, #44	; 0x2c
 8001cdc:	f883 24e9 	strb.w	r2, [r3, #1257]	; 0x4e9
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <DATA_LOGGER_Init+0xe08>)
 8001ce4:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cea:	2209      	movs	r2, #9
 8001cec:	f883 24f0 	strb.w	r2, [r3, #1264]	; 0x4f0
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8c3 24f4 	str.w	r2, [r3, #1268]	; 0x4f4




	//Others
	DEFINE_DATA(DATA_ID_FLIGHT_MODE, sys->soft.flight_mode, 																	DATA_FORMAT_8B, 			name_flight_mode, 								FALSE);
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001cfa:	221a      	movs	r2, #26
 8001cfc:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <DATA_LOGGER_Init+0xdf8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 3e04 	ldr.w	r3, [r3, #3588]	; 0xe04
 8001d08:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001d0a:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001d10:	2214      	movs	r2, #20
 8001d12:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <DATA_LOGGER_Init+0xe0c>)
 8001d1a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001d20:	220b      	movs	r2, #11
 8001d22:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <DATA_LOGGER_Init+0xdf4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20001fa0 	.word	0x20001fa0
 8001d40:	20001f9c 	.word	0x20001f9c
 8001d44:	20000250 	.word	0x20000250
 8001d48:	2000025c 	.word	0x2000025c
 8001d4c:	20000268 	.word	0x20000268
 8001d50:	20000274 	.word	0x20000274
 8001d54:	20000310 	.word	0x20000310

08001d58 <DATA_LOGGER_Start>:

void DATA_LOGGER_Start(){
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <DATA_LOGGER_Start+0x14>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	2000258c 	.word	0x2000258c

08001d70 <DATA_LOGGER_Stop>:

void DATA_LOGGER_Stop(){
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <DATA_LOGGER_Stop+0x14>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20002594 	.word	0x20002594

08001d88 <DATA_LOGGER_Main>:

void DATA_LOGGER_Main(void){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8001d8e:	4b74      	ldr	r3, [pc, #464]	; (8001f60 <DATA_LOGGER_Main+0x1d8>)
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	4b74      	ldr	r3, [pc, #464]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	bf14      	ite	ne
 8001d9a:	2301      	movne	r3, #1
 8001d9c:	2300      	moveq	r3, #0
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 8001da2:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b6e      	ldr	r3, [pc, #440]	; (8001f60 <DATA_LOGGER_Main+0x1d8>)
 8001da8:	701a      	strb	r2, [r3, #0]

	switch(state){
 8001daa:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d048      	beq.n	8001e44 <DATA_LOGGER_Main+0xbc>
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	f000 8090 	beq.w	8001ed8 <DATA_LOGGER_Main+0x150>
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d000      	beq.n	8001dbe <DATA_LOGGER_Main+0x36>
				}
			}
			break;
	}

}
 8001dbc:	e0cb      	b.n	8001f56 <DATA_LOGGER_Main+0x1ce>
			if(entrance){
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <DATA_LOGGER_Main+0x44>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 8001dc4:	4968      	ldr	r1, [pc, #416]	; (8001f68 <DATA_LOGGER_Main+0x1e0>)
 8001dc6:	200d      	movs	r0, #13
 8001dc8:	f002 fc44 	bl	8004654 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 8001dcc:	4967      	ldr	r1, [pc, #412]	; (8001f6c <DATA_LOGGER_Main+0x1e4>)
 8001dce:	203a      	movs	r0, #58	; 0x3a
 8001dd0:	f000 fab0 	bl	8002334 <DATA_LOGGER_Get_Data_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <DATA_LOGGER_Main+0x1e8>)
 8001dda:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 8001ddc:	4b64      	ldr	r3, [pc, #400]	; (8001f70 <DATA_LOGGER_Main+0x1e8>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4619      	mov	r1, r3
 8001de2:	4862      	ldr	r0, [pc, #392]	; (8001f6c <DATA_LOGGER_Main+0x1e4>)
 8001de4:	f006 fbde 	bl	80085a4 <TELEMETRY_Send_Data>
			if(send_config_flag){
 8001de8:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <DATA_LOGGER_Main+0x1ec>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01a      	beq.n	8001e26 <DATA_LOGGER_Main+0x9e>
				start_flag = FALSE;
 8001df0:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <DATA_LOGGER_Main+0x1f0>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 8001df6:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <DATA_LOGGER_Main+0x1f4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
				send_config_flag = FALSE;
 8001dfc:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <DATA_LOGGER_Main+0x1ec>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <DATA_LOGGER_Main+0x1f8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <DATA_LOGGER_Main+0x96>
					id_init_counter = 0;
 8001e0a:	4b5e      	ldr	r3, [pc, #376]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8001e10:	4b5d      	ldr	r3, [pc, #372]	; (8001f88 <DATA_LOGGER_Main+0x200>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 8001e16:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
			break;
 8001e1c:	e09a      	b.n	8001f54 <DATA_LOGGER_Main+0x1cc>
					state = LOGGER_LOG;
 8001e1e:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001e20:	2202      	movs	r2, #2
 8001e22:	701a      	strb	r2, [r3, #0]
			break;
 8001e24:	e096      	b.n	8001f54 <DATA_LOGGER_Main+0x1cc>
			else if(start_flag)
 8001e26:	4b54      	ldr	r3, [pc, #336]	; (8001f78 <DATA_LOGGER_Main+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8092 	beq.w	8001f54 <DATA_LOGGER_Main+0x1cc>
				start_flag = FALSE;
 8001e30:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <DATA_LOGGER_Main+0x1f0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <DATA_LOGGER_Main+0x1f4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
				state = LOGGER_LOG;
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001e3e:	2202      	movs	r2, #2
 8001e40:	701a      	strb	r2, [r3, #0]
			break;
 8001e42:	e087      	b.n	8001f54 <DATA_LOGGER_Main+0x1cc>
			if(entrance)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <DATA_LOGGER_Main+0xd8>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 8001e4a:	4950      	ldr	r1, [pc, #320]	; (8001f8c <DATA_LOGGER_Main+0x204>)
 8001e4c:	200d      	movs	r0, #13
 8001e4e:	f002 fc01 	bl	8004654 <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001e52:	e005      	b.n	8001e60 <DATA_LOGGER_Main+0xd8>
				id_init_counter ++ ;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e5e:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4a4a      	ldr	r2, [pc, #296]	; (8001f90 <DATA_LOGGER_Main+0x208>)
 8001e68:	460b      	mov	r3, r1
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	440b      	add	r3, r1
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	3314      	adds	r3, #20
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <DATA_LOGGER_Main+0xfa>
 8001e7a:	4b42      	ldr	r3, [pc, #264]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8001e80:	d9e8      	bls.n	8001e54 <DATA_LOGGER_Main+0xcc>
			if(id_init_counter < DATA_ID_COUNT){
 8001e82:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b3e      	cmp	r3, #62	; 0x3e
 8001e88:	d817      	bhi.n	8001eba <DATA_LOGGER_Main+0x132>
				is_any_data_used = TRUE;
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <DATA_LOGGER_Main+0x200>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	b2d1      	uxtb	r1, r2
 8001e98:	4a3a      	ldr	r2, [pc, #232]	; (8001f84 <DATA_LOGGER_Main+0x1fc>)
 8001e9a:	7011      	strb	r1, [r2, #0]
 8001e9c:	4933      	ldr	r1, [pc, #204]	; (8001f6c <DATA_LOGGER_Main+0x1e4>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fa48 	bl	8002334 <DATA_LOGGER_Get_Data_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <DATA_LOGGER_Main+0x1e8>)
 8001eaa:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 8001eac:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <DATA_LOGGER_Main+0x1e8>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	482e      	ldr	r0, [pc, #184]	; (8001f6c <DATA_LOGGER_Main+0x1e4>)
 8001eb4:	f006 fb76 	bl	80085a4 <TELEMETRY_Send_Data>
			break;
 8001eb8:	e04d      	b.n	8001f56 <DATA_LOGGER_Main+0x1ce>
				if(is_any_data_used)
 8001eba:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <DATA_LOGGER_Main+0x200>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <DATA_LOGGER_Main+0x148>
					config_not_sent = FALSE ;
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <DATA_LOGGER_Main+0x1f8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001eca:	2202      	movs	r2, #2
 8001ecc:	701a      	strb	r2, [r3, #0]
			break;
 8001ece:	e042      	b.n	8001f56 <DATA_LOGGER_Main+0x1ce>
					state = LOGGER_IDDLE ;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
			break;
 8001ed6:	e03e      	b.n	8001f56 <DATA_LOGGER_Main+0x1ce>
			if(entrance)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <DATA_LOGGER_Main+0x160>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 8001ede:	f242 7110 	movw	r1, #10000	; 0x2710
 8001ee2:	200d      	movs	r0, #13
 8001ee4:	f002 fbb6 	bl	8004654 <SCHEDULER_reschedule_task>
			if(stop_flag)
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <DATA_LOGGER_Main+0x1f4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <DATA_LOGGER_Main+0x16e>
				state = LOGGER_IDDLE;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <DATA_LOGGER_Main+0x1dc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	e027      	b.n	8001f4c <DATA_LOGGER_Main+0x1c4>
				if(data_list[d].used && (data_list[d].format != DATA_FORMAT_0B_BUTTON))
 8001efc:	79fa      	ldrb	r2, [r7, #7]
 8001efe:	4924      	ldr	r1, [pc, #144]	; (8001f90 <DATA_LOGGER_Main+0x208>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	3314      	adds	r3, #20
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <DATA_LOGGER_Main+0x1be>
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	491e      	ldr	r1, [pc, #120]	; (8001f90 <DATA_LOGGER_Main+0x208>)
 8001f16:	4613      	mov	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3309      	adds	r3, #9
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00e      	beq.n	8001f46 <DATA_LOGGER_Main+0x1be>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4910      	ldr	r1, [pc, #64]	; (8001f6c <DATA_LOGGER_Main+0x1e4>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f8cb 	bl	80020c8 <DATA_LOGGER_Get_Data_Value>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <DATA_LOGGER_Main+0x1e8>)
 8001f38:	701a      	strb	r2, [r3, #0]
					TELEMETRY_Send_Data(tmp, tmp_len);
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <DATA_LOGGER_Main+0x1e8>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480a      	ldr	r0, [pc, #40]	; (8001f6c <DATA_LOGGER_Main+0x1e4>)
 8001f42:	f006 fb2f 	bl	80085a4 <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	71fb      	strb	r3, [r7, #7]
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f50:	d9d4      	bls.n	8001efc <DATA_LOGGER_Main+0x174>
			break;
 8001f52:	e000      	b.n	8001f56 <DATA_LOGGER_Main+0x1ce>
			break;
 8001f54:	bf00      	nop
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000031c 	.word	0x2000031c
 8001f64:	20002588 	.word	0x20002588
 8001f68:	001e8480 	.word	0x001e8480
 8001f6c:	20002598 	.word	0x20002598
 8001f70:	200025ac 	.word	0x200025ac
 8001f74:	20002590 	.word	0x20002590
 8001f78:	2000258c 	.word	0x2000258c
 8001f7c:	20002594 	.word	0x20002594
 8001f80:	20000000 	.word	0x20000000
 8001f84:	200025ad 	.word	0x200025ad
 8001f88:	200025b0 	.word	0x200025b0
 8001f8c:	0007a120 	.word	0x0007a120
 8001f90:	20001fa0 	.word	0x20001fa0

08001f94 <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	4946      	ldr	r1, [pc, #280]	; (80020c0 <DATA_LOGGER_Reception+0x12c>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	3309      	adds	r3, #9
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b29      	cmp	r3, #41	; 0x29
 8001fb6:	d87d      	bhi.n	80020b4 <DATA_LOGGER_Reception+0x120>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <DATA_LOGGER_Reception+0x2c>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08002069 	.word	0x08002069
 8001fc4:	080020b5 	.word	0x080020b5
 8001fc8:	080020b5 	.word	0x080020b5
 8001fcc:	080020b5 	.word	0x080020b5
 8001fd0:	080020b5 	.word	0x080020b5
 8001fd4:	080020b5 	.word	0x080020b5
 8001fd8:	080020b5 	.word	0x080020b5
 8001fdc:	080020b5 	.word	0x080020b5
 8001fe0:	080020b5 	.word	0x080020b5
 8001fe4:	080020b5 	.word	0x080020b5
 8001fe8:	080020b5 	.word	0x080020b5
 8001fec:	080020b5 	.word	0x080020b5
 8001ff0:	080020b5 	.word	0x080020b5
 8001ff4:	080020b5 	.word	0x080020b5
 8001ff8:	080020b5 	.word	0x080020b5
 8001ffc:	080020b5 	.word	0x080020b5
 8002000:	080020b5 	.word	0x080020b5
 8002004:	080020b5 	.word	0x080020b5
 8002008:	080020b5 	.word	0x080020b5
 800200c:	080020b5 	.word	0x080020b5
 8002010:	080020b5 	.word	0x080020b5
 8002014:	080020b5 	.word	0x080020b5
 8002018:	080020b5 	.word	0x080020b5
 800201c:	080020b5 	.word	0x080020b5
 8002020:	080020b5 	.word	0x080020b5
 8002024:	080020b5 	.word	0x080020b5
 8002028:	080020b5 	.word	0x080020b5
 800202c:	080020b5 	.word	0x080020b5
 8002030:	080020b5 	.word	0x080020b5
 8002034:	080020b5 	.word	0x080020b5
 8002038:	080020b5 	.word	0x080020b5
 800203c:	080020b5 	.word	0x080020b5
 8002040:	080020b5 	.word	0x080020b5
 8002044:	080020b5 	.word	0x080020b5
 8002048:	080020b5 	.word	0x080020b5
 800204c:	080020b5 	.word	0x080020b5
 8002050:	080020b5 	.word	0x080020b5
 8002054:	080020b5 	.word	0x080020b5
 8002058:	080020b5 	.word	0x080020b5
 800205c:	080020b5 	.word	0x080020b5
 8002060:	080020b5 	.word	0x080020b5
 8002064:	080020b5 	.word	0x080020b5
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	3b3a      	subs	r3, #58	; 0x3a
 800206c:	2b04      	cmp	r3, #4
 800206e:	d81f      	bhi.n	80020b0 <DATA_LOGGER_Reception+0x11c>
 8002070:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <DATA_LOGGER_Reception+0xe4>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	0800208d 	.word	0x0800208d
 800207c:	0800209d 	.word	0x0800209d
 8002080:	08002095 	.word	0x08002095
 8002084:	080020a5 	.word	0x080020a5
 8002088:	080020ab 	.word	0x080020ab
			{
				default:
					break;
				case DATA_ID_CONFIG_REQUEST:
					send_config_flag = TRUE;
 800208c:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <DATA_LOGGER_Reception+0x130>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
					break;
 8002092:	e00e      	b.n	80020b2 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_ENABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8002094:	2001      	movs	r0, #1
 8002096:	f003 f9a3 	bl	80053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 800209a:	e00a      	b.n	80020b2 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_DISABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 800209c:	2000      	movs	r0, #0
 800209e:	f003 f99f 	bl	80053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 80020a2:	e006      	b.n	80020b2 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_START_TRANSFER:
					DATA_LOGGER_Start();
 80020a4:	f7ff fe58 	bl	8001d58 <DATA_LOGGER_Start>
					break;
 80020a8:	e003      	b.n	80020b2 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_STOP_TRANSFER:
					DATA_LOGGER_Stop();
 80020aa:	f7ff fe61 	bl	8001d70 <DATA_LOGGER_Stop>
					break;
 80020ae:	e000      	b.n	80020b2 <DATA_LOGGER_Reception+0x11e>
					break;
 80020b0:	bf00      	nop
			}
			break;
 80020b2:	e000      	b.n	80020b6 <DATA_LOGGER_Reception+0x122>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 80020b4:	bf00      	nop

	}
}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20001fa0 	.word	0x20001fa0
 80020c4:	20002590 	.word	0x20002590

080020c8 <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	498f      	ldr	r1, [pc, #572]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	440b      	add	r3, r1
 80020f2:	3309      	adds	r3, #9
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	3b14      	subs	r3, #20
 80020f8:	2b19      	cmp	r3, #25
 80020fa:	f200 80fb 	bhi.w	80022f4 <DATA_LOGGER_Get_Data_Value+0x22c>
 80020fe:	a201      	add	r2, pc, #4	; (adr r2, 8002104 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	0800216d 	.word	0x0800216d
 8002108:	080022f5 	.word	0x080022f5
 800210c:	080022f5 	.word	0x080022f5
 8002110:	08002189 	.word	0x08002189
 8002114:	080022f5 	.word	0x080022f5
 8002118:	080022f5 	.word	0x080022f5
 800211c:	080022f5 	.word	0x080022f5
 8002120:	080022f5 	.word	0x080022f5
 8002124:	080022f5 	.word	0x080022f5
 8002128:	080022f5 	.word	0x080022f5
 800212c:	080022f5 	.word	0x080022f5
 8002130:	080022f5 	.word	0x080022f5
 8002134:	080022f5 	.word	0x080022f5
 8002138:	080022f5 	.word	0x080022f5
 800213c:	080022f5 	.word	0x080022f5
 8002140:	080022f5 	.word	0x080022f5
 8002144:	080022f5 	.word	0x080022f5
 8002148:	080022f5 	.word	0x080022f5
 800214c:	080022f5 	.word	0x080022f5
 8002150:	080022f5 	.word	0x080022f5
 8002154:	080022f5 	.word	0x080022f5
 8002158:	080021b9 	.word	0x080021b9
 800215c:	08002201 	.word	0x08002201
 8002160:	08002249 	.word	0x08002249
 8002164:	08002291 	.word	0x08002291
 8002168:	080022c3 	.word	0x080022c3
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	496d      	ldr	r1, [pc, #436]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3304      	adds	r3, #4
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3301      	adds	r3, #1
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	701a      	strb	r2, [r3, #0]
			break;
 8002186:	e0b6      	b.n	80022f6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	4966      	ldr	r1, [pc, #408]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3304      	adds	r3, #4
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 800219e:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80021aa:	793b      	ldrb	r3, [r7, #4]
 80021ac:	b25a      	sxtb	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
			break;
 80021b6:	e09e      	b.n	80022f6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	495a      	ldr	r1, [pc, #360]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 80021ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80021d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021de:	ee17 3a90 	vmov	r3, s15
 80021e2:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80021e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021e8:	121b      	asrs	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	3302      	adds	r3, #2
 80021f8:	8afa      	ldrh	r2, [r7, #22]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]
			break;
 80021fe:	e07a      	b.n	80022f6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	4948      	ldr	r1, [pc, #288]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3304      	adds	r3, #4
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8002216:	edd7 7a04 	vldr	s15, [r7, #16]
 800221a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002328 <DATA_LOGGER_Get_Data_Value+0x260>
 800221e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002226:	ee17 3a90 	vmov	r3, s15
 800222a:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800222c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002230:	121b      	asrs	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3301      	adds	r3, #1
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	3302      	adds	r3, #2
 8002240:	8afa      	ldrh	r2, [r7, #22]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
			break;
 8002246:	e056      	b.n	80022f6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8002248:	7bfa      	ldrb	r2, [r7, #15]
 800224a:	4936      	ldr	r1, [pc, #216]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 800225e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002262:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800232c <DATA_LOGGER_Get_Data_Value+0x264>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226e:	ee17 3a90 	vmov	r3, s15
 8002272:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8002274:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002278:	121b      	asrs	r3, r3, #8
 800227a:	b21a      	sxth	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3302      	adds	r3, #2
 8002288:	8afa      	ldrh	r2, [r7, #22]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
			break;
 800228e:	e032      	b.n	80022f6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	4924      	ldr	r1, [pc, #144]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	3304      	adds	r3, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80022a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022aa:	121b      	asrs	r3, r3, #8
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3302      	adds	r3, #2
 80022ba:	8afa      	ldrh	r2, [r7, #22]
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
			break;
 80022c0:	e019      	b.n	80022f6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	4917      	ldr	r1, [pc, #92]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3304      	adds	r3, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 80022d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022dc:	121b      	asrs	r3, r3, #8
 80022de:	b21a      	sxth	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3302      	adds	r3, #2
 80022ec:	8afa      	ldrh	r2, [r7, #22]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
			break;
 80022f2:	e000      	b.n	80022f6 <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 80022f4:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	490a      	ldr	r1, [pc, #40]	; (8002324 <DATA_LOGGER_Get_Data_Value+0x25c>)
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	440b      	add	r3, r1
 8002304:	3309      	adds	r3, #9
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4a09      	ldr	r2, [pc, #36]	; (8002330 <DATA_LOGGER_Get_Data_Value+0x268>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3301      	adds	r3, #1
 8002314:	b2db      	uxtb	r3, r3

}
 8002316:	4618      	mov	r0, r3
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20001fa0 	.word	0x20001fa0
 8002328:	42c80000 	.word	0x42c80000
 800232c:	447a0000 	.word	0x447a0000
 8002330:	cccccccd 	.word	0xcccccccd

08002334 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	22ff      	movs	r2, #255	; 0xff
 8002344:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 8002346:	79fa      	ldrb	r2, [r7, #7]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	481f      	ldr	r0, [pc, #124]	; (80023cc <DATA_LOGGER_Get_Data_Config+0x98>)
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4403      	add	r3, r0
 8002358:	3310      	adds	r3, #16
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 800235e:	79fa      	ldrb	r2, [r7, #7]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	1c99      	adds	r1, r3, #2
 8002364:	4819      	ldr	r0, [pc, #100]	; (80023cc <DATA_LOGGER_Get_Data_Config+0x98>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4403      	add	r3, r0
 8002370:	3309      	adds	r3, #9
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	3303      	adds	r3, #3
 800237a:	79fa      	ldrb	r2, [r7, #7]
 800237c:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	1d18      	adds	r0, r3, #4
 8002382:	79fa      	ldrb	r2, [r7, #7]
 8002384:	4911      	ldr	r1, [pc, #68]	; (80023cc <DATA_LOGGER_Get_Data_Config+0x98>)
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	330c      	adds	r3, #12
 8002392:	681c      	ldr	r4, [r3, #0]
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	490d      	ldr	r1, [pc, #52]	; (80023cc <DATA_LOGGER_Get_Data_Config+0x98>)
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	3310      	adds	r3, #16
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	4621      	mov	r1, r4
 80023aa:	f00e fc33 	bl	8010c14 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	4906      	ldr	r1, [pc, #24]	; (80023cc <DATA_LOGGER_Get_Data_Config+0x98>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	440b      	add	r3, r1
 80023bc:	3310      	adds	r3, #16
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	3304      	adds	r3, #4
 80023c2:	b2db      	uxtb	r3, r3
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd90      	pop	{r4, r7, pc}
 80023cc:	20001fa0 	.word	0x20001fa0

080023d0 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 80023da:	79fa      	ldrb	r2, [r7, #7]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <DATA_LOGGER_Get_Data+0x24>)
 80023e6:	4413      	add	r3, r2
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	20001fa0 	.word	0x20001fa0

080023f8 <angle_180>:
static float absolu(float x);
//static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8002402:	edd7 7a01 	vldr	s15, [r7, #4]
 8002406:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800245c <angle_180+0x64>
 800240a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	dd08      	ble.n	8002426 <angle_180+0x2e>
		x -= 360;
 8002414:	edd7 7a01 	vldr	s15, [r7, #4]
 8002418:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002460 <angle_180+0x68>
 800241c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002420:	edc7 7a01 	vstr	s15, [r7, #4]
 8002424:	e010      	b.n	8002448 <angle_180+0x50>
	else if( x < -180)
 8002426:	edd7 7a01 	vldr	s15, [r7, #4]
 800242a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002464 <angle_180+0x6c>
 800242e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	d507      	bpl.n	8002448 <angle_180+0x50>
		x += 360 ;
 8002438:	edd7 7a01 	vldr	s15, [r7, #4]
 800243c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002460 <angle_180+0x68>
 8002440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002444:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	ee07 3a90 	vmov	s15, r3
}
 800244e:	eeb0 0a67 	vmov.f32	s0, s15
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	43340000 	.word	0x43340000
 8002460:	43b40000 	.word	0x43b40000
 8002464:	c3340000 	.word	0xc3340000

08002468 <absolu>:

static float absolu(float x){
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8002472:	edd7 7a01 	vldr	s15, [r7, #4]
 8002476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	dd02      	ble.n	8002486 <absolu+0x1e>
		return x ;
 8002480:	edd7 7a01 	vldr	s15, [r7, #4]
 8002484:	e003      	b.n	800248e <absolu+0x26>
	else
		return -x ;
 8002486:	edd7 7a01 	vldr	s15, [r7, #4]
 800248a:	eef1 7a67 	vneg.f32	s15, s15
}
 800248e:	eeb0 0a67 	vmov.f32	s0, s15
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <ORIENTATION_Init>:
//static float acc_correction(float x){
//	x = ( x > 0) ? 180 - x : -180 -x ;
//	return x ;
//}

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f103 0208 	add.w	r2, r3, #8
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <ORIENTATION_Init+0x84>)
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e011      	b.n	800250e <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b02      	cmp	r3, #2
 8002512:	ddea      	ble.n	80024ea <ORIENTATION_Init+0x4e>
	}

}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	3f7f7cee 	.word	0x3f7f7cee

08002524 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	//Just to make the code shorter
	acc_t * acc = orientation->acc ;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_t * gyro = orientation->gyro ;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	623b      	str	r3, [r7, #32]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ORIENTATION_ROLL] * acc->filtered[ORIENTATION_ROLL] ;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	ed93 7a02 	vldr	s14, [r3, #8]
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	edd3 7a02 	vldr	s15, [r3, #8]
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ORIENTATION_PITCH] * acc->filtered[ORIENTATION_PITCH] ;
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	edd3 7a03 	vldr	s15, [r3, #12]
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ORIENTATION_YAW] * acc->filtered[ORIENTATION_YAW] ;
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	ed93 7a04 	vldr	s14, [r3, #16]
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	edd3 7a04 	vldr	s15, [r3, #16]
 8002574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002578:	ed97 7a07 	vldr	s14, [r7, #28]
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total = sqrtf(acc_total);
 8002584:	ed97 0a07 	vldr	s0, [r7, #28]
 8002588:	f011 f9dc 	bl	8013944 <sqrtf>
 800258c:	ed87 0a07 	vstr	s0, [r7, #28]

	if(acc_total)	//To avoid /0
 8002590:	edd7 7a07 	vldr	s15, [r7, #28]
 8002594:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259c:	d049      	beq.n	8002632 <ORIENTATION_Update+0x10e>
	{
		if(absolu(acc->filtered[ORIENTATION_ROLL]) < acc_total)	//To avoid asin x with x greater than 1
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025a4:	eeb0 0a67 	vmov.f32	s0, s15
 80025a8:	f7ff ff5e 	bl	8002468 <absolu>
 80025ac:	eeb0 7a40 	vmov.f32	s14, s0
 80025b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80025b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025bc:	dd15      	ble.n	80025ea <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ORIENTATION_PITCH] = -asinf(acc->filtered[ORIENTATION_ROLL] / acc_total) * 57.32f;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80025c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80025cc:	eeb0 0a66 	vmov.f32	s0, s13
 80025d0:	f010 fffc 	bl	80135cc <asinf>
 80025d4:	eef0 7a40 	vmov.f32	s15, s0
 80025d8:	eef1 7a67 	vneg.f32	s15, s15
 80025dc:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80027c4 <ORIENTATION_Update+0x2a0>
 80025e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ORIENTATION_PITCH]) < acc_total) 	//To avoid asin x with x greater than 1
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80025f0:	eeb0 0a67 	vmov.f32	s0, s15
 80025f4:	f7ff ff38 	bl	8002468 <absolu>
 80025f8:	eeb0 7a40 	vmov.f32	s14, s0
 80025fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	dd13      	ble.n	8002632 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ORIENTATION_ROLL] = asinf(acc->filtered[ORIENTATION_PITCH] / acc_total) * 57.32f;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002610:	edd7 7a07 	vldr	s15, [r7, #28]
 8002614:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002618:	eeb0 0a66 	vmov.f32	s0, s13
 800261c:	f010 ffd6 	bl	80135cc <asinf>
 8002620:	eeb0 7a40 	vmov.f32	s14, s0
 8002624:	eddf 7a67 	vldr	s15, [pc, #412]	; 80027c4 <ORIENTATION_Update+0x2a0>
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	edc3 7a04 	vstr	s15, [r3, #16]
//			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
//		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8002632:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <ORIENTATION_Update+0x2a4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00f      	beq.n	800265a <ORIENTATION_Update+0x136>
	{
		orientation->angular_position[ORIENTATION_ROLL] = orientation->acc_angles[ORIENTATION_ROLL] ;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->acc_angles[ORIENTATION_PITCH] ;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]
		orientation->angular_position[ORIENTATION_YAW] = 0 ;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8002652:	4b5d      	ldr	r3, [pc, #372]	; (80027c8 <ORIENTATION_Update+0x2a4>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_PITCH];



	}
}
 8002658:	e0af      	b.n	80027ba <ORIENTATION_Update+0x296>
		float dx = gyro->filtered[ORIENTATION_ROLL] * orientation->periode ;
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266a:	edc7 7a06 	vstr	s15, [r7, #24]
		float dy = gyro->filtered[ORIENTATION_PITCH] * orientation->periode ;
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	ed93 7a03 	vldr	s14, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	edc7 7a05 	vstr	s15, [r7, #20]
		float dz = gyro->filtered[ORIENTATION_YAW] * orientation->periode ;
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	ed93 7a04 	vldr	s14, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800268e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002692:	edc7 7a04 	vstr	s15, [r7, #16]
		orientation->angular_position[ORIENTATION_ROLL] += dx ;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	ed93 7a00 	vldr	s14, [r3]
 800269c:	edd7 7a06 	vldr	s15, [r7, #24]
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] += dy ;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80026b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_YAW] += dz ;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80026c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	edc3 7a02 	vstr	s15, [r3, #8]
		float sin_dz = sinf(0.01745329251f * dz);
 80026d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80027cc <ORIENTATION_Update+0x2a8>
 80026da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026de:	eeb0 0a67 	vmov.f32	s0, s15
 80026e2:	f010 ff31 	bl	8013548 <sinf>
 80026e6:	ed87 0a03 	vstr	s0, [r7, #12]
		orientation->angular_position[ORIENTATION_ROLL] += sin_dz * orientation->angular_position[ORIENTATION_PITCH] ;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	ed93 7a00 	vldr	s14, [r3]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80026f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80026fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] -= sin_dz * orientation->angular_position[ORIENTATION_ROLL] ;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	ed93 7a01 	vldr	s14, [r3, #4]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	edd3 6a00 	vldr	s13, [r3]
 8002714:	edd7 7a03 	vldr	s15, [r7, #12]
 8002718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_ROLL] = angle_180(orientation->angular_position[ORIENTATION_ROLL]);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	eeb0 0a67 	vmov.f32	s0, s15
 8002730:	f7ff fe62 	bl	80023f8 <angle_180>
 8002734:	eef0 7a40 	vmov.f32	s15, s0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] = angle_180(orientation->angular_position[ORIENTATION_PITCH]);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edd3 7a01 	vldr	s15, [r3, #4]
 8002744:	eeb0 0a67 	vmov.f32	s0, s15
 8002748:	f7ff fe56 	bl	80023f8 <angle_180>
 800274c:	eef0 7a40 	vmov.f32	s15, s0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_ROLL] = orientation->alpha * orientation->angular_position[ORIENTATION_ROLL] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_ROLL];
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800276c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002770:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	edd3 7a04 	vldr	s15, [r3, #16]
 800277a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_PITCH];
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	edd3 7a01 	vldr	s15, [r3, #4]
 8002794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800279e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80027ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	; 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	426547ae 	.word	0x426547ae
 80027c8:	20000320 	.word	0x20000320
 80027cc:	3c8efa35 	.word	0x3c8efa35

080027d0 <POSITION_Init>:

#define ALPHA 0.5f
#define BETA 0.1f
#define GAMMA 0.0f

void POSITION_Init(position_t * position, orientation_t * orientation, acc_t * acc, baro_t * baro, int32_t frequency){
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]

	//Links to recquired data structures
	position->orientation = orientation ;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38
	position->acc = acc ;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
	position->baro = baro;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c
	position->acceleration_drone = acc->filtered ;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f103 0208 	add.w	r2, r3, #8
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

	//Configure our frequency
	position->frequency = frequency ;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
	position->periode = (float)1 / (float)frequency ;
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	position->periode_squared = position->periode * position->periode ;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48



	//Init our values to zero
	for(int axe = 0; axe < 3; axe++)
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e01a      	b.n	800286a <POSITION_Init+0x9a>
	{
		position->position[axe] = 0 ;
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
		position->velocity[axe] = 0 ;
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3302      	adds	r3, #2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
		position->acceleration[axe] = 0;
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	3306      	adds	r3, #6
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
	for(int axe = 0; axe < 3; axe++)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	3301      	adds	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2b02      	cmp	r3, #2
 800286e:	dde1      	ble.n	8002834 <POSITION_Init+0x64>
	}
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	0000      	movs	r0, r0
	...

08002880 <POSITION_Update>:

void POSITION_Update(position_t * position){
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b08d      	sub	sp, #52	; 0x34
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

	//Projette l'accélération du drone dans le "repère de la terre"
	float sin_alpha = sinf(position->orientation->angular_position[ORIENTATION_ROLL] * 0.01745329251f);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002b58 <POSITION_Update+0x2d8>
 8002894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002898:	eeb0 0a67 	vmov.f32	s0, s15
 800289c:	f010 fe54 	bl	8013548 <sinf>
 80028a0:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float cos_alpha = cosf(position->orientation->angular_position[ORIENTATION_ROLL] * 0.01745329251f);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002b58 <POSITION_Update+0x2d8>
 80028b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b4:	eeb0 0a67 	vmov.f32	s0, s15
 80028b8:	f010 fe06 	bl	80134c8 <cosf>
 80028bc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float sin_beta = sinf(position->orientation->angular_position[ORIENTATION_PITCH] * 0.01745329251f);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80028c8:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002b58 <POSITION_Update+0x2d8>
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	eeb0 0a67 	vmov.f32	s0, s15
 80028d4:	f010 fe38 	bl	8013548 <sinf>
 80028d8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float cos_beta = cosf(position->orientation->angular_position[ORIENTATION_PITCH] * 0.01745329251f);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e4:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002b58 <POSITION_Update+0x2d8>
 80028e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	f010 fdea 	bl	80134c8 <cosf>
 80028f4:	ed87 0a08 	vstr	s0, [r7, #32]

	float acc_x = position->acc->filtered[ORIENTATION_ROLL];
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61fb      	str	r3, [r7, #28]
	float acc_y = position->acc->filtered[ORIENTATION_PITCH];
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	61bb      	str	r3, [r7, #24]
	float acc_z = position->acc->filtered[ORIENTATION_YAW];
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	617b      	str	r3, [r7, #20]

	//Equations :
	// https://fr.wikipedia.org/wiki/Matrice_de_rotation
	// https://photos.google.com/photo/AF1QipPC2YkgS1dSJ5Y0lUlfNZ84SxoZOmHYG-Z7rT-n

	position->acc_raw[POSITION_AXE_X] = acc_x * cos_beta + sin_beta * (sin_alpha * acc_y + cos_alpha * acc_z) ;
 8002910:	ed97 7a07 	vldr	s14, [r7, #28]
 8002914:	edd7 7a08 	vldr	s15, [r7, #32]
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002920:	edd7 7a06 	vldr	s15, [r7, #24]
 8002924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002928:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800292c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002930:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002934:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002938:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800293c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	position->acc_raw[POSITION_AXE_Y] = acc_y * sin_beta - acc_z * sin_alpha ;
 800294a:	ed97 7a06 	vldr	s14, [r7, #24]
 800294e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002956:	edd7 6a05 	vldr	s13, [r7, #20]
 800295a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800295e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	position->acc_raw[POSITION_AXE_Z] = ( cos_beta * (sin_alpha * acc_y + cos_alpha * acc_z) - acc_x * sin_beta ) - 1 ; //Minus to compensate the gravity
 800296c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002970:	edd7 7a06 	vldr	s15, [r7, #24]
 8002974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002978:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800297c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002988:	edd7 7a08 	vldr	s15, [r7, #32]
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	edd7 6a07 	vldr	s13, [r7, #28]
 8002994:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002998:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800299c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	//From acceleration in g to m/s²
	position->acc_raw[POSITION_AXE_X] *= 9.81 ;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fdc8 	bl	8000548 <__aeabi_f2d>
 80029b8:	a365      	add	r3, pc, #404	; (adr r3, 8002b50 <POSITION_Update+0x2d0>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	f7fd fe1b 	bl	80005f8 <__aeabi_dmul>
 80029c2:	4603      	mov	r3, r0
 80029c4:	460c      	mov	r4, r1
 80029c6:	4618      	mov	r0, r3
 80029c8:	4621      	mov	r1, r4
 80029ca:	f7fe f8ed 	bl	8000ba8 <__aeabi_d2f>
 80029ce:	4602      	mov	r2, r0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
	position->acc_raw[POSITION_AXE_Y] *= 9.81 ;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdb5 	bl	8000548 <__aeabi_f2d>
 80029de:	a35c      	add	r3, pc, #368	; (adr r3, 8002b50 <POSITION_Update+0x2d0>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe08 	bl	80005f8 <__aeabi_dmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4618      	mov	r0, r3
 80029ee:	4621      	mov	r1, r4
 80029f0:	f7fe f8da 	bl	8000ba8 <__aeabi_d2f>
 80029f4:	4602      	mov	r2, r0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
	position->acc_raw[POSITION_AXE_Z] *= 9.81 ;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd fda2 	bl	8000548 <__aeabi_f2d>
 8002a04:	a352      	add	r3, pc, #328	; (adr r3, 8002b50 <POSITION_Update+0x2d0>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fdf5 	bl	80005f8 <__aeabi_dmul>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	4618      	mov	r0, r3
 8002a14:	4621      	mov	r1, r4
 8002a16:	f7fe f8c7 	bl	8000ba8 <__aeabi_d2f>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30


	//Alpha beta gamma filter to estimate the altitude

	//We need our first measurement to init the filter
	if(!position->alti_is_init)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d112      	bne.n	8002a4e <POSITION_Update+0x1ce>
	{
		if(EVENT_Check_flag(FLAG_BARO_ALTITUDE_RDY)){
 8002a28:	200c      	movs	r0, #12
 8002a2a:	f001 f8cb 	bl	8003bc4 <EVENT_Check_flag>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8086 	beq.w	8002b42 <POSITION_Update+0x2c2>
			position->position[POSITION_AXE_Z] = position->baro->altitude;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
			position->alti_is_init = TRUE ;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	64da      	str	r2, [r3, #76]	; 0x4c
			EVENT_Clean_flag(FLAG_BARO_ALTITUDE_RDY);
 8002a46:	200c      	movs	r0, #12
 8002a48:	f001 f8ee 	bl	8003c28 <EVENT_Clean_flag>





}
 8002a4c:	e079      	b.n	8002b42 <POSITION_Update+0x2c2>
		if(EVENT_Check_flag(FLAG_BARO_ALTITUDE_RDY)){
 8002a4e:	200c      	movs	r0, #12
 8002a50:	f001 f8b8 	bl	8003bc4 <EVENT_Check_flag>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06f      	beq.n	8002b3a <POSITION_Update+0x2ba>
			float measurement = position->baro->altitude;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	613b      	str	r3, [r7, #16]
			EVENT_Clean_flag(FLAG_BARO_ALTITUDE_RDY);
 8002a62:	200c      	movs	r0, #12
 8002a64:	f001 f8e0 	bl	8003c28 <EVENT_Clean_flag>
			float delta = measurement - position->position_guess[POSITION_AXE_Z] ;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002a6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a76:	edc7 7a03 	vstr	s15, [r7, #12]
			position->position[POSITION_AXE_Z] = position->position_guess[POSITION_AXE_Z] + ALPHA * delta;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002a80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a84:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002a88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	edc3 7a02 	vstr	s15, [r3, #8]
			position->velocity[POSITION_AXE_Z] = position->velocity_guess[POSITION_AXE_Z] + BETA * (delta * 100.0f); //*100 <=> /0.01
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002a9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aa0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002b5c <POSITION_Update+0x2dc>
 8002aa4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002aa8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002b60 <POSITION_Update+0x2e0>
 8002aac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	edc3 7a05 	vstr	s15, [r3, #20]
			position->acceleration[POSITION_AXE_Z] = position->acceleration_guess[POSITION_AXE_Z] + GAMMA * (delta * 5000.0f); //*5000 <=> /(2*0.01²)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002ac0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002b64 <POSITION_Update+0x2e4>
 8002ac8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002acc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b68 <POSITION_Update+0x2e8>
 8002ad0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	edc3 7a08 	vstr	s15, [r3, #32]
			position->position_guess[POSITION_AXE_Z] = position->position[POSITION_AXE_Z] + (position->velocity[POSITION_AXE_Z]  + position->acceleration[POSITION_AXE_Z] * 0.5f * position->periode) * position->periode ;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	edd3 6a05 	vldr	s13, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	edd3 7a08 	vldr	s15, [r3, #32]
 8002af0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002af4:	ee27 6a86 	vmul.f32	s12, s15, s12
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002afe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			position->velocity_guess[POSITION_AXE_Z] = position->velocity[POSITION_AXE_Z] + position->acceleration[POSITION_AXE_Z] * position->periode ;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	edd3 6a08 	vldr	s13, [r3, #32]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		position->acceleration_guess[POSITION_AXE_Z] = position->acceleration[POSITION_AXE_Z];
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1a      	ldr	r2, [r3, #32]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	671a      	str	r2, [r3, #112]	; 0x70
}
 8002b42:	bf00      	nop
 8002b44:	3734      	adds	r7, #52	; 0x34
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	f3af 8000 	nop.w
 8002b50:	51eb851f 	.word	0x51eb851f
 8002b54:	40239eb8 	.word	0x40239eb8
 8002b58:	3c8efa35 	.word	0x3c8efa35
 8002b5c:	42c80000 	.word	0x42c80000
 8002b60:	3dcccccd 	.word	0x3dcccccd
 8002b64:	459c4000 	.word	0x459c4000
 8002b68:	00000000 	.word	0x00000000

08002b6c <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f002 fc33 	bl	80053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f002 fda2 	bl	80056c4 <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2228      	movs	r2, #40	; 0x28
 8002b84:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002b90:	2000      	movs	r0, #0
 8002b92:	f000 fbdb 	bl	800334c <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <arming_entrance+0x40>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 8002b9c:	4b04      	ldr	r3, [pc, #16]	; (8002bb0 <arming_entrance+0x44>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200025b4 	.word	0x200025b4
 8002bb0:	200025b5 	.word	0x200025b5

08002bb4 <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]



	switch(state){
 8002bbe:	4b7b      	ldr	r3, [pc, #492]	; (8002dac <arming_main+0x1f8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d019      	beq.n	8002bfa <arming_main+0x46>
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d036      	beq.n	8002c38 <arming_main+0x84>
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d000      	beq.n	8002bd0 <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 8002bce:	e0e8      	b.n	8002da2 <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	f240 424b 	movw	r2, #1099	; 0x44b
 8002bde:	4293      	cmp	r3, r2
 8002be0:	f200 80dc 	bhi.w	8002d9c <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8002be4:	2300      	movs	r3, #0
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 8002bec:	2000      	movs	r0, #0
 8002bee:	f000 fbad 	bl	800334c <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 8002bf2:	4b6e      	ldr	r3, [pc, #440]	; (8002dac <arming_main+0x1f8>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
			break;
 8002bf8:	e0d0      	b.n	8002d9c <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8002c00:	3306      	adds	r3, #6
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	f240 729e 	movw	r2, #1950	; 0x79e
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	f240 80c9 	bls.w	8002da0 <arming_main+0x1ec>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8002c14:	3304      	adds	r3, #4
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f240 424b 	movw	r2, #1099	; 0x44b
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	f200 80bf 	bhi.w	8002da0 <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 8002c22:	2300      	movs	r3, #0
 8002c24:	2200      	movs	r2, #0
 8002c26:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f000 fb8e 	bl	800334c <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 8002c30:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <arming_main+0x1f8>)
 8002c32:	2202      	movs	r2, #2
 8002c34:	701a      	strb	r2, [r3, #0]
			break;
 8002c36:	e0b3      	b.n	8002da0 <arming_main+0x1ec>
			switch(state_vroum_vroum){
 8002c38:	4b5d      	ldr	r3, [pc, #372]	; (8002db0 <arming_main+0x1fc>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	f200 80a3 	bhi.w	8002d88 <arming_main+0x1d4>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <arming_main+0x94>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002c5d 	.word	0x08002c5d
 8002c4c:	08002c81 	.word	0x08002c81
 8002c50:	08002d0f 	.word	0x08002d0f
 8002c54:	08002d3d 	.word	0x08002d3d
 8002c58:	08002d6b 	.word	0x08002d6b
					next_change = time_us + PERIODE_1;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8002c62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c66:	4a53      	ldr	r2, [pc, #332]	; (8002db4 <arming_main+0x200>)
 8002c68:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	22c8      	movs	r2, #200	; 0xc8
 8002c6e:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
					state_vroum_vroum++;
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <arming_main+0x1fc>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4b4d      	ldr	r3, [pc, #308]	; (8002db0 <arming_main+0x1fc>)
 8002c7c:	701a      	strb	r2, [r3, #0]
					break;
 8002c7e:	e08c      	b.n	8002d9a <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <arming_main+0x200>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8002c92:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca2:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <arming_main+0x204>)
 8002ca4:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <arming_main+0x204>)
 8002caa:	ed93 7a00 	vldr	s14, [r3]
 8002cae:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002dbc <arming_main+0x208>
 8002cb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb6:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <arming_main+0x204>)
 8002cb8:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <arming_main+0x204>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002dc0 <arming_main+0x20c>
 8002cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cce:	ee17 3a90 	vmov	r3, s15
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3328      	adds	r3, #40	; 0x28
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
					if(time_us > next_change){
 8002ce0:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <arming_main+0x200>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d950      	bls.n	8002d8c <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 8002cf0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8002cf4:	4a2f      	ldr	r2, [pc, #188]	; (8002db4 <arming_main+0x200>)
 8002cf6:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2228      	movs	r2, #40	; 0x28
 8002cfc:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
						state_vroum_vroum++;
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <arming_main+0x1fc>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <arming_main+0x1fc>)
 8002d0a:	701a      	strb	r2, [r3, #0]
					break;
 8002d0c:	e03e      	b.n	8002d8c <arming_main+0x1d8>
					if(time_us > next_change){
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <arming_main+0x200>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d93b      	bls.n	8002d90 <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8002d1e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002d22:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <arming_main+0x200>)
 8002d24:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	22c8      	movs	r2, #200	; 0xc8
 8002d2a:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
						state_vroum_vroum++;
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <arming_main+0x1fc>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <arming_main+0x1fc>)
 8002d38:	701a      	strb	r2, [r3, #0]
					break;
 8002d3a:	e029      	b.n	8002d90 <arming_main+0x1dc>
					if(time_us > next_change){
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <arming_main+0x200>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d926      	bls.n	8002d94 <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8002d4c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002d50:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <arming_main+0x200>)
 8002d52:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2228      	movs	r2, #40	; 0x28
 8002d58:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
						state_vroum_vroum++;
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <arming_main+0x1fc>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <arming_main+0x1fc>)
 8002d66:	701a      	strb	r2, [r3, #0]
					break;
 8002d68:	e014      	b.n	8002d94 <arming_main+0x1e0>
					if(time_us > next_change){
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <arming_main+0x200>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d911      	bls.n	8002d98 <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 8002d74:	201e      	movs	r0, #30
 8002d76:	f000 ff3f 	bl	8003bf8 <EVENT_Set_flag>
						state_vroum_vroum++;
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <arming_main+0x1fc>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <arming_main+0x1fc>)
 8002d84:	701a      	strb	r2, [r3, #0]
					break;
 8002d86:	e007      	b.n	8002d98 <arming_main+0x1e4>
					break;
 8002d88:	bf00      	nop
 8002d8a:	e00a      	b.n	8002da2 <arming_main+0x1ee>
					break;
 8002d8c:	bf00      	nop
 8002d8e:	e008      	b.n	8002da2 <arming_main+0x1ee>
					break;
 8002d90:	bf00      	nop
 8002d92:	e006      	b.n	8002da2 <arming_main+0x1ee>
					break;
 8002d94:	bf00      	nop
 8002d96:	e004      	b.n	8002da2 <arming_main+0x1ee>
					break;
 8002d98:	bf00      	nop
			break;
 8002d9a:	e002      	b.n	8002da2 <arming_main+0x1ee>
			break;
 8002d9c:	bf00      	nop
 8002d9e:	e000      	b.n	8002da2 <arming_main+0x1ee>
			break;
 8002da0:	bf00      	nop
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200025b4 	.word	0x200025b4
 8002db0:	200025b5 	.word	0x200025b5
 8002db4:	200025b8 	.word	0x200025b8
 8002db8:	200025bc 	.word	0x200025bc
 8002dbc:	48c35000 	.word	0x48c35000
 8002dc0:	43200000 	.word	0x43200000

08002dc4 <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <FLIGHT_MODE_Init+0x24>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
	sys->soft.flight_mode = &current_flight_mode;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <FLIGHT_MODE_Init+0x24>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <FLIGHT_MODE_Init+0x28>)
 8002dd8:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	200025c0 	.word	0x200025c0
 8002dec:	200025c4 	.word	0x200025c4

08002df0 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	7013      	strb	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	200025c5 	.word	0x200025c5

08002e10 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <FLIGHT_MODE_Main+0xa0>)
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <FLIGHT_MODE_Main+0xa4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d02b      	beq.n	8002e7c <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <FLIGHT_MODE_Main+0xa4>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <FLIGHT_MODE_Main+0xa8>)
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	4413      	add	r3, r2
 8002e2e:	330c      	adds	r3, #12
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <FLIGHT_MODE_Main+0xa4>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <FLIGHT_MODE_Main+0xa8>)
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	330c      	adds	r3, #12
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <FLIGHT_MODE_Main+0xac>)
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 8002e4c:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <FLIGHT_MODE_Main+0xa0>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <FLIGHT_MODE_Main+0xa8>)
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <FLIGHT_MODE_Main+0xa0>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <FLIGHT_MODE_Main+0xa8>)
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	4413      	add	r3, r2
 8002e68:	3304      	adds	r3, #4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <FLIGHT_MODE_Main+0xac>)
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4610      	mov	r0, r2
 8002e72:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <FLIGHT_MODE_Main+0xa0>)
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <FLIGHT_MODE_Main+0xa4>)
 8002e7a:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[current_flight_mode].function_main != NULL)
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <FLIGHT_MODE_Main+0xa4>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <FLIGHT_MODE_Main+0xa8>)
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	3308      	adds	r3, #8
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <FLIGHT_MODE_Main+0xa4>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <FLIGHT_MODE_Main+0xa8>)
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	4413      	add	r3, r2
 8002e98:	3308      	adds	r3, #8
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <FLIGHT_MODE_Main+0xac>)
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4798      	blx	r3

}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200025c5 	.word	0x200025c5
 8002eb4:	200025c4 	.word	0x200025c4
 8002eb8:	20000324 	.word	0x20000324
 8002ebc:	200025c0 	.word	0x200025c0

08002ec0 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 8002ec8:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f000 fa3b 	bl	800334c <IHM_Set_Sequences>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
	static bool_e calibration_gyro_is_over = FALSE ;
	static bool_e calibration_acc_is_over = FALSE ;

	if(!calibration_gyro_is_over)
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <gyro_acc_calibration_main+0x60>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <gyro_acc_calibration_main+0x18>
		calibration_gyro_is_over = 1;//GYRO_calibrate(&sys->sensors.gyro, 1500);
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <gyro_acc_calibration_main+0x60>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
	if(!calibration_acc_is_over)
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <gyro_acc_calibration_main+0x64>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <gyro_acc_calibration_main+0x34>
		calibration_acc_is_over = ACC_calibrate(&sys->sensors.acc, 1500);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	33b0      	adds	r3, #176	; 0xb0
 8002f04:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fcb5 	bl	8005878 <ACC_calibrate>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <gyro_acc_calibration_main+0x64>)
 8002f12:	601a      	str	r2, [r3, #0]

	if(calibration_gyro_is_over && calibration_acc_is_over){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 8002f14:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <gyro_acc_calibration_main+0x60>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <gyro_acc_calibration_main+0x58>
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <gyro_acc_calibration_main+0x64>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <gyro_acc_calibration_main+0x58>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 8002f24:	2021      	movs	r0, #33	; 0x21
 8002f26:	f000 fe67 	bl	8003bf8 <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002f30:	2100      	movs	r1, #0
 8002f32:	2001      	movs	r0, #1
 8002f34:	f000 fa0a 	bl	800334c <IHM_Set_Sequences>
	}

}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	200025c8 	.word	0x200025c8
 8002f44:	200025cc 	.word	0x200025cc

08002f48 <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f002 fa45 	bl	80053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8002f56:	2001      	movs	r0, #1
 8002f58:	f002 fbb4 	bl	80056c4 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 8002f5c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002f60:	2200      	movs	r2, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	2000      	movs	r0, #0
 8002f66:	f000 f9f1 	bl	800334c <IHM_Set_Sequences>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*0.8f;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003028 <manual_accro_main+0xb4>
 8002f92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f96:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800302c <manual_accro_main+0xb8>
 8002f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f603 4304 	addw	r3, r3, #3076	; 0xc04
 8002fa4:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*0.8f;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8002fae:	3302      	adds	r3, #2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fba:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003028 <manual_accro_main+0xb4>
 8002fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fc2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800302c <manual_accro_main+0xb8>
 8002fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f603 4308 	addw	r3, r3, #3080	; 0xc08
 8002fd0:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8002fda:	3306      	adds	r3, #6
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003028 <manual_accro_main+0xb4>
 8002fea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fee:	eef1 7a67 	vneg.f32	s15, s15
 8002ff2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003030 <manual_accro_main+0xbc>
 8002ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 8003000:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800300a:	3304      	adds	r3, #4
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003012:	b29b      	uxth	r3, r3
 8003014:	b21a      	sxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	44bb8000 	.word	0x44bb8000
 800302c:	3f4ccccd 	.word	0x3f4ccccd
 8003030:	3f99999a 	.word	0x3f99999a

08003034 <manual_alti_auto_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_alti_auto_entrance(system_t * sys){
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 800303c:	2002      	movs	r0, #2
 800303e:	f002 f9cf 	bl	80053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_STABILIZED);
 8003042:	2002      	movs	r0, #2
 8003044:	f002 fb3e 	bl	80056c4 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_7, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 8003048:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 800304c:	2200      	movs	r2, #0
 800304e:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8003052:	2000      	movs	r0, #0
 8003054:	f000 f97a 	bl	800334c <IHM_Set_Sequences>
	sys->regulation.position.consigne_position[POSITION_AXE_Z] = sys->position.position[POSITION_AXE_Z];
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 8003064:	601a      	str	r2, [r3, #0]
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <manual_alti_auto_main>:
void manual_alti_auto_main(system_t * sys, uint32_t time_us){
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8003080:	3304      	adds	r3, #4
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003088:	b29b      	uxth	r3, r3
 800308a:	b21a      	sxth	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*0.14f;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800311c <manual_alti_auto_main+0xac>
 80030a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003120 <manual_alti_auto_main+0xb0>
 80030ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 80030b8:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*0.14f;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80030c2:	3302      	adds	r3, #2
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800311c <manual_alti_auto_main+0xac>
 80030d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030d6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003120 <manual_alti_auto_main+0xb0>
 80030da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80030e4:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.0f;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80030ee:	3306      	adds	r3, #6
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800311c <manual_alti_auto_main+0xac>
 80030fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003102:	eef1 7a67 	vneg.f32	s15, s15
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 800310c:	edc3 7a00 	vstr	s15, [r3]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	44bb8000 	.word	0x44bb8000
 8003120:	3e0f5c29 	.word	0x3e0f5c29

08003124 <manual_angle_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_angle_entrance(system_t * sys){
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 800312c:	2002      	movs	r0, #2
 800312e:	f002 f957 	bl	80053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8003132:	2001      	movs	r0, #1
 8003134:	f002 fac6 	bl	80056c4 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 8003138:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 800313c:	2200      	movs	r2, #0
 800313e:	2100      	movs	r1, #0
 8003140:	2000      	movs	r0, #0
 8003142:	f000 f903 	bl	800334c <IHM_Set_Sequences>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <manual_angle_main>:
void manual_angle_main(system_t * sys, uint32_t time_us){
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*0.14f;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003204 <manual_angle_main+0xb4>
 800316e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003172:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003208 <manual_angle_main+0xb8>
 8003176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f603 33f8 	addw	r3, r3, #3064	; 0xbf8
 8003180:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*0.14f;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800318a:	3302      	adds	r3, #2
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003204 <manual_angle_main+0xb4>
 800319a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800319e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003208 <manual_angle_main+0xb8>
 80031a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f603 33fc 	addw	r3, r3, #3068	; 0xbfc
 80031ac:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80031b6:	3306      	adds	r3, #6
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003204 <manual_angle_main+0xb4>
 80031c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031ca:	eef1 7a67 	vneg.f32	s15, s15
 80031ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800320c <manual_angle_main+0xbc>
 80031d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 80031dc:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80031e6:	3304      	adds	r3, #4
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b21a      	sxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8a3 2df8 	strh.w	r2, [r3, #3576]	; 0xdf8
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	44bb8000 	.word	0x44bb8000
 8003208:	3e0f5c29 	.word	0x3e0f5c29
 800320c:	3f99999a 	.word	0x3f99999a

08003210 <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8003218:	2000      	movs	r0, #0
 800321a:	f002 f8e1 	bl	80053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 800321e:	2000      	movs	r0, #0
 8003220:	f002 fa50 	bl	80056c4 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8003224:	2300      	movs	r3, #0
 8003226:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800322a:	2100      	movs	r1, #0
 800322c:	2000      	movs	r0, #0
 800322e:	f000 f88d 	bl	800334c <IHM_Set_Sequences>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <IHM_Init+0x1c>)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	200025d0 	.word	0x200025d0

08003270 <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6039      	str	r1, [r7, #0]
 8003278:	4611      	mov	r1, r2
 800327a:	461a      	mov	r2, r3
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
 8003280:	460b      	mov	r3, r1
 8003282:	80bb      	strh	r3, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <IHM_Led_Init+0x80>)
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	79fa      	ldrb	r2, [r7, #7]
 800328e:	4613      	mov	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	330c      	adds	r3, #12
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <IHM_Led_Init+0x80>)
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	79fa      	ldrb	r2, [r7, #7]
 80032a4:	4613      	mov	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3310      	adds	r3, #16
 80032b0:	88ba      	ldrh	r2, [r7, #4]
 80032b2:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 80032b4:	4b0e      	ldr	r3, [pc, #56]	; (80032f0 <IHM_Led_Init+0x80>)
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	79fa      	ldrb	r2, [r7, #7]
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	3314      	adds	r3, #20
 80032c6:	79ba      	ldrb	r2, [r7, #6]
 80032c8:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]
 80032ce:	e008      	b.n	80032e2 <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 80032d0:	7bf9      	ldrb	r1, [r7, #15]
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	2200      	movs	r2, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f80c 	bl	80032f4 <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	3301      	adds	r3, #1
 80032e0:	73fb      	strb	r3, [r7, #15]
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d9f3      	bls.n	80032d0 <IHM_Led_Init+0x60>
}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200025d0 	.word	0x200025d0

080032f4 <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
 80032fe:	460b      	mov	r3, r1
 8003300:	71bb      	strb	r3, [r7, #6]
 8003302:	4613      	mov	r3, r2
 8003304:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <IHM_Set_Sequence+0x54>)
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	79fa      	ldrb	r2, [r7, #7]
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	3314      	adds	r3, #20
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 800331e:	88bb      	ldrh	r3, [r7, #4]
 8003320:	43db      	mvns	r3, r3
 8003322:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <IHM_Set_Sequence+0x54>)
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	79fa      	ldrb	r2, [r7, #7]
 800332a:	79b8      	ldrb	r0, [r7, #6]
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4403      	add	r3, r0
 8003336:	88ba      	ldrh	r2, [r7, #4]
 8003338:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	200025d0 	.word	0x200025d0

0800334c <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 800334c:	b490      	push	{r4, r7}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	71fb      	strb	r3, [r7, #7]
 800335e:	4603      	mov	r3, r0
 8003360:	80bb      	strh	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	807b      	strh	r3, [r7, #2]
 8003366:	4613      	mov	r3, r2
 8003368:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <IHM_Set_Sequences+0x94>)
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	79fa      	ldrb	r2, [r7, #7]
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	440b      	add	r3, r1
 800337a:	3314      	adds	r3, #20
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d108      	bne.n	8003394 <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 8003382:	88bb      	ldrh	r3, [r7, #4]
 8003384:	43db      	mvns	r3, r3
 8003386:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	43db      	mvns	r3, r3
 800338c:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 800338e:	883b      	ldrh	r3, [r7, #0]
 8003390:	43db      	mvns	r3, r3
 8003392:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <IHM_Set_Sequences+0x94>)
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	79fa      	ldrb	r2, [r7, #7]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	88ba      	ldrh	r2, [r7, #4]
 80033a6:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <IHM_Set_Sequences+0x94>)
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	79fa      	ldrb	r2, [r7, #7]
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	3302      	adds	r3, #2
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 80033be:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <IHM_Set_Sequences+0x94>)
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	79fa      	ldrb	r2, [r7, #7]
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	3304      	adds	r3, #4
 80033d0:	883a      	ldrh	r2, [r7, #0]
 80033d2:	801a      	strh	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc90      	pop	{r4, r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	200025d0 	.word	0x200025d0

080033e4 <IHM_Update>:

void IHM_Update(void){
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 80033ea:	4b8a      	ldr	r3, [pc, #552]	; (8003614 <IHM_Update+0x230>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4a88      	ldr	r2, [pc, #544]	; (8003614 <IHM_Update+0x230>)
 80033f2:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 80033f4:	4b87      	ldr	r3, [pc, #540]	; (8003614 <IHM_Update+0x230>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b85      	ldr	r3, [pc, #532]	; (8003618 <IHM_Update+0x234>)
 8003402:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 8003404:	4b85      	ldr	r3, [pc, #532]	; (800361c <IHM_Update+0x238>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b83      	ldr	r3, [pc, #524]	; (8003618 <IHM_Update+0x234>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	4619      	mov	r1, r3
 800340e:	460b      	mov	r3, r1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	440b      	add	r3, r1
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	3308      	adds	r3, #8
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b7d      	ldr	r3, [pc, #500]	; (8003614 <IHM_Update+0x230>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d259      	bcs.n	80034d8 <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 8003424:	4b7d      	ldr	r3, [pc, #500]	; (800361c <IHM_Update+0x238>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	4b7b      	ldr	r3, [pc, #492]	; (8003618 <IHM_Update+0x234>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4619      	mov	r1, r3
 800342e:	460b      	mov	r3, r1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	3312      	adds	r3, #18
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	4a77      	ldr	r2, [pc, #476]	; (800361c <IHM_Update+0x238>)
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	4975      	ldr	r1, [pc, #468]	; (8003618 <IHM_Update+0x234>)
 8003442:	7809      	ldrb	r1, [r1, #0]
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	b298      	uxth	r0, r3
 8003448:	460b      	mov	r3, r1
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	440b      	add	r3, r1
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	3312      	adds	r3, #18
 8003454:	4602      	mov	r2, r0
 8003456:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 8003458:	4b70      	ldr	r3, [pc, #448]	; (800361c <IHM_Update+0x238>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b6e      	ldr	r3, [pc, #440]	; (8003618 <IHM_Update+0x234>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4619      	mov	r1, r3
 8003462:	460b      	mov	r3, r1
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	440b      	add	r3, r1
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	3308      	adds	r3, #8
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <IHM_Update+0x238>)
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <IHM_Update+0x234>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	4603      	mov	r3, r0
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4403      	add	r3, r0
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	330c      	adds	r3, #12
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4964      	ldr	r1, [pc, #400]	; (800361c <IHM_Update+0x238>)
 800348a:	6809      	ldr	r1, [r1, #0]
 800348c:	4862      	ldr	r0, [pc, #392]	; (8003618 <IHM_Update+0x234>)
 800348e:	7800      	ldrb	r0, [r0, #0]
 8003490:	441a      	add	r2, r3
 8003492:	4603      	mov	r3, r0
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4403      	add	r3, r0
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	3308      	adds	r3, #8
 800349e:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 80034a0:	4b5e      	ldr	r3, [pc, #376]	; (800361c <IHM_Update+0x238>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b5c      	ldr	r3, [pc, #368]	; (8003618 <IHM_Update+0x234>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	460b      	mov	r3, r1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	440b      	add	r3, r1
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	3312      	adds	r3, #18
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 80034bc:	4b57      	ldr	r3, [pc, #348]	; (800361c <IHM_Update+0x238>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <IHM_Update+0x234>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	460b      	mov	r3, r1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	440b      	add	r3, r1
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	3312      	adds	r3, #18
 80034d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d6:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 80034d8:	2300      	movs	r3, #0
 80034da:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 80034dc:	2300      	movs	r3, #0
 80034de:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 80034e0:	4b4e      	ldr	r3, [pc, #312]	; (800361c <IHM_Update+0x238>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <IHM_Update+0x234>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	460b      	mov	r3, r1
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	3312      	adds	r3, #18
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 80034fa:	4b48      	ldr	r3, [pc, #288]	; (800361c <IHM_Update+0x238>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b46      	ldr	r3, [pc, #280]	; (8003618 <IHM_Update+0x234>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	4619      	mov	r1, r3
 8003504:	460b      	mov	r3, r1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	440b      	add	r3, r1
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	883b      	ldrh	r3, [r7, #0]
 8003512:	4013      	ands	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <IHM_Update+0x23c>)
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4413      	add	r3, r2
 8003522:	80fb      	strh	r3, [r7, #6]
 8003524:	e004      	b.n	8003530 <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 8003526:	4b3e      	ldr	r3, [pc, #248]	; (8003620 <IHM_Update+0x23c>)
 8003528:	881a      	ldrh	r2, [r3, #0]
 800352a:	88bb      	ldrh	r3, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 8003530:	4b3a      	ldr	r3, [pc, #232]	; (800361c <IHM_Update+0x238>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b38      	ldr	r3, [pc, #224]	; (8003618 <IHM_Update+0x234>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	4619      	mov	r1, r3
 800353a:	460b      	mov	r3, r1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	440b      	add	r3, r1
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	3302      	adds	r3, #2
 8003546:	881a      	ldrh	r2, [r3, #0]
 8003548:	883b      	ldrh	r3, [r7, #0]
 800354a:	4013      	ands	r3, r2
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 8003552:	4b33      	ldr	r3, [pc, #204]	; (8003620 <IHM_Update+0x23c>)
 8003554:	885a      	ldrh	r2, [r3, #2]
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	4413      	add	r3, r2
 800355a:	80fb      	strh	r3, [r7, #6]
 800355c:	e004      	b.n	8003568 <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 800355e:	4b30      	ldr	r3, [pc, #192]	; (8003620 <IHM_Update+0x23c>)
 8003560:	885a      	ldrh	r2, [r3, #2]
 8003562:	88bb      	ldrh	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 8003568:	4b2c      	ldr	r3, [pc, #176]	; (800361c <IHM_Update+0x238>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <IHM_Update+0x234>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4619      	mov	r1, r3
 8003572:	460b      	mov	r3, r1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	440b      	add	r3, r1
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4413      	add	r3, r2
 800357c:	3304      	adds	r3, #4
 800357e:	881a      	ldrh	r2, [r3, #0]
 8003580:	883b      	ldrh	r3, [r7, #0]
 8003582:	4013      	ands	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 800358a:	4b25      	ldr	r3, [pc, #148]	; (8003620 <IHM_Update+0x23c>)
 800358c:	889a      	ldrh	r2, [r3, #4]
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	4313      	orrs	r3, r2
 8003592:	80fb      	strh	r3, [r7, #6]
 8003594:	e004      	b.n	80035a0 <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 8003596:	4b22      	ldr	r3, [pc, #136]	; (8003620 <IHM_Update+0x23c>)
 8003598:	889a      	ldrh	r2, [r3, #4]
 800359a:	88bb      	ldrh	r3, [r7, #4]
 800359c:	4313      	orrs	r3, r2
 800359e:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 80035a0:	2300      	movs	r3, #0
 80035a2:	70fb      	strb	r3, [r7, #3]
 80035a4:	e022      	b.n	80035ec <IHM_Update+0x208>
		if(l == current_led)
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <IHM_Update+0x234>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d10d      	bne.n	80035cc <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <IHM_Update+0x238>)
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	4613      	mov	r3, r2
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	440b      	add	r3, r1
 80035c0:	3310      	adds	r3, #16
 80035c2:	881a      	ldrh	r2, [r3, #0]
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
 80035ca:	e00c      	b.n	80035e6 <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <IHM_Update+0x238>)
 80035ce:	6819      	ldr	r1, [r3, #0]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	440b      	add	r3, r1
 80035dc:	3310      	adds	r3, #16
 80035de:	881a      	ldrh	r2, [r3, #0]
 80035e0:	88bb      	ldrh	r3, [r7, #4]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	3301      	adds	r3, #1
 80035ea:	70fb      	strb	r3, [r7, #3]
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d9d9      	bls.n	80035a6 <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4619      	mov	r1, r3
 80035f8:	480a      	ldr	r0, [pc, #40]	; (8003624 <IHM_Update+0x240>)
 80035fa:	f006 fb63 	bl	8009cc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 80035fe:	88bb      	ldrh	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	4619      	mov	r1, r3
 8003604:	4807      	ldr	r0, [pc, #28]	; (8003624 <IHM_Update+0x240>)
 8003606:	f006 fb5d 	bl	8009cc4 <HAL_GPIO_WritePin>





}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200025d4 	.word	0x200025d4
 8003618:	200025d8 	.word	0x200025d8
 800361c:	200025d0 	.word	0x200025d0
 8003620:	20000394 	.word	0x20000394
 8003624:	40020800 	.word	0x40020800

08003628 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 800362c:	4803      	ldr	r0, [pc, #12]	; (800363c <DEBUG_init+0x14>)
 800362e:	f000 f809 	bl	8003644 <RetargetInit>
	printf("Debuger is init\n");
 8003632:	4803      	ldr	r0, [pc, #12]	; (8003640 <DEBUG_init+0x18>)
 8003634:	f00d ffea 	bl	801160c <puts>
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20003ba0 	.word	0x20003ba0
 8003640:	08014c50 	.word	0x08014c50

08003644 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800364c:	4a07      	ldr	r2, [pc, #28]	; (800366c <RetargetInit+0x28>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <RetargetInit+0x2c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6898      	ldr	r0, [r3, #8]
 8003658:	2300      	movs	r3, #0
 800365a:	2202      	movs	r2, #2
 800365c:	2100      	movs	r1, #0
 800365e:	f00d ffdd 	bl	801161c <setvbuf>
}
 8003662:	bf00      	nop
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20002700 	.word	0x20002700
 8003670:	20001dac 	.word	0x20001dac

08003674 <_isatty>:

int _isatty(int fd) {
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db04      	blt.n	800368c <_isatty+0x18>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b02      	cmp	r3, #2
 8003686:	dc01      	bgt.n	800368c <_isatty+0x18>
    return 1;
 8003688:	2301      	movs	r3, #1
 800368a:	e005      	b.n	8003698 <_isatty+0x24>

  errno = EBADF;
 800368c:	f00d fa98 	bl	8010bc0 <__errno>
 8003690:	4602      	mov	r2, r0
 8003692:	2309      	movs	r3, #9
 8003694:	6013      	str	r3, [r2, #0]
  return 0;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_write>:

int _write(int fd, char* ptr, int len) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d002      	beq.n	80036b8 <_write+0x18>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d110      	bne.n	80036da <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <_write+0x50>)
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	b29a      	uxth	r2, r3
 80036c0:	2364      	movs	r3, #100	; 0x64
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	f00b fcdb 	bl	800f07e <HAL_UART_Transmit>
 80036c8:	4603      	mov	r3, r0
 80036ca:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <_write+0x36>
      return len;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	e008      	b.n	80036e8 <_write+0x48>
    else
      return EIO;
 80036d6:	2305      	movs	r3, #5
 80036d8:	e006      	b.n	80036e8 <_write+0x48>
  }
  errno = EBADF;
 80036da:	f00d fa71 	bl	8010bc0 <__errno>
 80036de:	4602      	mov	r2, r0
 80036e0:	2309      	movs	r3, #9
 80036e2:	6013      	str	r3, [r2, #0]
  return -1;
 80036e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20002700 	.word	0x20002700

080036f4 <_close>:

int _close(int fd) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db04      	blt.n	800370c <_close+0x18>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b02      	cmp	r3, #2
 8003706:	dc01      	bgt.n	800370c <_close+0x18>
    return 0;
 8003708:	2300      	movs	r3, #0
 800370a:	e006      	b.n	800371a <_close+0x26>

  errno = EBADF;
 800370c:	f00d fa58 	bl	8010bc0 <__errno>
 8003710:	4602      	mov	r2, r0
 8003712:	2309      	movs	r3, #9
 8003714:	6013      	str	r3, [r2, #0]
  return -1;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800372e:	f00d fa47 	bl	8010bc0 <__errno>
 8003732:	4602      	mov	r2, r0
 8003734:	2309      	movs	r3, #9
 8003736:	6013      	str	r3, [r2, #0]
  return -1;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_read>:

int _read(int fd, char* ptr, int len) {
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d110      	bne.n	8003778 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <_read+0x4c>)
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	f04f 33ff 	mov.w	r3, #4294967295
 800375e:	2201      	movs	r2, #1
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	f00b fd25 	bl	800f1b0 <HAL_UART_Receive>
 8003766:	4603      	mov	r3, r0
 8003768:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <_read+0x30>
      return 1;
 8003770:	2301      	movs	r3, #1
 8003772:	e008      	b.n	8003786 <_read+0x42>
    else
      return EIO;
 8003774:	2305      	movs	r3, #5
 8003776:	e006      	b.n	8003786 <_read+0x42>
  }
  errno = EBADF;
 8003778:	f00d fa22 	bl	8010bc0 <__errno>
 800377c:	4602      	mov	r2, r0
 800377e:	2309      	movs	r3, #9
 8003780:	6013      	str	r3, [r2, #0]
  return -1;
 8003782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20002700 	.word	0x20002700

08003794 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db08      	blt.n	80037b6 <_fstat+0x22>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	dc05      	bgt.n	80037b6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b0:	605a      	str	r2, [r3, #4]
    return 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	e005      	b.n	80037c2 <_fstat+0x2e>
  }

  errno = EBADF;
 80037b6:	f00d fa03 	bl	8010bc0 <__errno>
 80037ba:	4602      	mov	r2, r0
 80037bc:	2309      	movs	r3, #9
 80037be:	6013      	str	r3, [r2, #0]
  return 0;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <gyro_init_ok_func>:



};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f000 fa0e 	bl	8003bf8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 80037dc:	2101      	movs	r1, #1
 80037de:	2004      	movs	r0, #4
 80037e0:	f000 ff0c 	bl	80045fc <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <gyro_init_ok_func+0x28>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	2000039c 	.word	0x2000039c

080037f8 <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 8003802:	2005      	movs	r0, #5
 8003804:	f000 f9f8 	bl	8003bf8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 8003808:	2101      	movs	r1, #1
 800380a:	2006      	movs	r0, #6
 800380c:	f000 fef6 	bl	80045fc <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <acc_init_ok_func+0x28>)
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	2000039c 	.word	0x2000039c

08003824 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800382e:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 8003830:	210d      	movs	r1, #13
 8003832:	4806      	ldr	r0, [pc, #24]	; (800384c <ibus_data_rdy+0x28>)
 8003834:	f000 fac2 	bl	8003dbc <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003838:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 800383a:	2102      	movs	r1, #2
 800383c:	2009      	movs	r0, #9
 800383e:	f000 fedd 	bl	80045fc <SCHEDULER_task_set_mode>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200025dc 	.word	0x200025dc

08003850 <baro_data_ready_func>:

static void baro_data_ready_func(mask_def_ids_t mask_id){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
	switch(mask_id){
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d00c      	beq.n	800387a <baro_data_ready_func+0x2a>
 8003860:	2b02      	cmp	r3, #2
 8003862:	d012      	beq.n	800388a <baro_data_ready_func+0x3a>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d000      	beq.n	800386a <baro_data_ready_func+0x1a>
		case MASK_BARO_DATA_READY_PRESSURE:
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
			break;
		default:
			break;
 8003868:	e017      	b.n	800389a <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_TEMP_RAW_RDY);
 800386a:	2009      	movs	r0, #9
 800386c:	f000 f9dc 	bl	8003c28 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_TEMP, TASK_MODE_EVENT);
 8003870:	2102      	movs	r1, #2
 8003872:	2010      	movs	r0, #16
 8003874:	f000 fec2 	bl	80045fc <SCHEDULER_task_set_mode>
			break;
 8003878:	e00f      	b.n	800389a <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 800387a:	200a      	movs	r0, #10
 800387c:	f000 f9d4 	bl	8003c28 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_PRESSURE, TASK_MODE_EVENT);
 8003880:	2102      	movs	r1, #2
 8003882:	2011      	movs	r0, #17
 8003884:	f000 feba 	bl	80045fc <SCHEDULER_task_set_mode>
			break;
 8003888:	e007      	b.n	800389a <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
 800388a:	200b      	movs	r0, #11
 800388c:	f000 f9cc 	bl	8003c28 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
 8003890:	2102      	movs	r1, #2
 8003892:	2012      	movs	r0, #18
 8003894:	f000 feb2 	bl	80045fc <SCHEDULER_task_set_mode>
			break;
 8003898:	bf00      	nop

	}
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80038ae:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 80038b0:	2122      	movs	r1, #34	; 0x22
 80038b2:	480d      	ldr	r0, [pc, #52]	; (80038e8 <on_the_ground+0x44>)
 80038b4:	f000 fa82 	bl	8003dbc <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 80038b8:	211e      	movs	r1, #30
 80038ba:	480b      	ldr	r0, [pc, #44]	; (80038e8 <on_the_ground+0x44>)
 80038bc:	f000 fa7e 	bl	8003dbc <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 80038c0:	211f      	movs	r1, #31
 80038c2:	4809      	ldr	r0, [pc, #36]	; (80038e8 <on_the_ground+0x44>)
 80038c4:	f000 fa7a 	bl	8003dbc <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 80038c8:	211d      	movs	r1, #29
 80038ca:	4807      	ldr	r0, [pc, #28]	; (80038e8 <on_the_ground+0x44>)
 80038cc:	f000 fa76 	bl	8003dbc <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 80038d0:	2120      	movs	r1, #32
 80038d2:	4805      	ldr	r0, [pc, #20]	; (80038e8 <on_the_ground+0x44>)
 80038d4:	f000 fa72 	bl	8003dbc <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80038d8:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 80038da:	2000      	movs	r0, #0
 80038dc:	f7ff fa88 	bl	8002df0 <FLIGHT_MODE_Set_Flight_Mode>
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	200025dc 	.word	0x200025dc

080038ec <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80038f6:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 80038f8:	2122      	movs	r1, #34	; 0x22
 80038fa:	4807      	ldr	r0, [pc, #28]	; (8003918 <manual_accro+0x2c>)
 80038fc:	f000 fa2e 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8003900:	2123      	movs	r1, #35	; 0x23
 8003902:	4805      	ldr	r0, [pc, #20]	; (8003918 <manual_accro+0x2c>)
 8003904:	f000 fa2a 	bl	8003d5c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003908:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 800390a:	2001      	movs	r0, #1
 800390c:	f7ff fa70 	bl	8002df0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200025dc 	.word	0x200025dc

0800391c <manual_angle>:

static void manual_angle(mask_def_ids_t mask_id){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003926:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8003928:	2122      	movs	r1, #34	; 0x22
 800392a:	4807      	ldr	r0, [pc, #28]	; (8003948 <manual_angle+0x2c>)
 800392c:	f000 fa16 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8003930:	2123      	movs	r1, #35	; 0x23
 8003932:	4805      	ldr	r0, [pc, #20]	; (8003948 <manual_angle+0x2c>)
 8003934:	f000 fa12 	bl	8003d5c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003938:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ANGLE);
 800393a:	2002      	movs	r0, #2
 800393c:	f7ff fa58 	bl	8002df0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8003940:	bf00      	nop
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200025dc 	.word	0x200025dc

0800394c <manual_angle_altitude_auto>:

static void manual_angle_altitude_auto(mask_def_ids_t mask_id){
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003956:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8003958:	2122      	movs	r1, #34	; 0x22
 800395a:	4807      	ldr	r0, [pc, #28]	; (8003978 <manual_angle_altitude_auto+0x2c>)
 800395c:	f000 f9fe 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8003960:	2123      	movs	r1, #35	; 0x23
 8003962:	4805      	ldr	r0, [pc, #20]	; (8003978 <manual_angle_altitude_auto+0x2c>)
 8003964:	f000 f9fa 	bl	8003d5c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003968:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ALTI_AUTO);
 800396a:	2003      	movs	r0, #3
 800396c:	f7ff fa40 	bl	8002df0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	200025dc 	.word	0x200025dc

0800397c <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003986:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8003988:	2102      	movs	r1, #2
 800398a:	4806      	ldr	r0, [pc, #24]	; (80039a4 <gyro_data_ready_func+0x28>)
 800398c:	f000 fa16 	bl	8003dbc <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003990:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 8003992:	2102      	movs	r1, #2
 8003994:	2005      	movs	r0, #5
 8003996:	f000 fe31 	bl	80045fc <SCHEDULER_task_set_mode>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200025dc 	.word	0x200025dc

080039a8 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80039b2:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 80039b4:	2106      	movs	r1, #6
 80039b6:	4806      	ldr	r0, [pc, #24]	; (80039d0 <acc_data_ready_func+0x28>)
 80039b8:	f000 fa00 	bl	8003dbc <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80039bc:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 80039be:	2102      	movs	r1, #2
 80039c0:	2007      	movs	r0, #7
 80039c2:	f000 fe1b 	bl	80045fc <SCHEDULER_task_set_mode>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200025dc 	.word	0x200025dc

080039d4 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80039de:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 80039e0:	2107      	movs	r1, #7
 80039e2:	4808      	ldr	r0, [pc, #32]	; (8003a04 <orientation_update+0x30>)
 80039e4:	f000 f9ea 	bl	8003dbc <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 80039e8:	2103      	movs	r1, #3
 80039ea:	4806      	ldr	r0, [pc, #24]	; (8003a04 <orientation_update+0x30>)
 80039ec:	f000 f9e6 	bl	8003dbc <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80039f0:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 80039f2:	2102      	movs	r1, #2
 80039f4:	2008      	movs	r0, #8
 80039f6:	f000 fe01 	bl	80045fc <SCHEDULER_task_set_mode>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200025dc 	.word	0x200025dc

08003a08 <arming>:

static void arming(mask_def_ids_t mask_id){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a12:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 8003a14:	211d      	movs	r1, #29
 8003a16:	4807      	ldr	r0, [pc, #28]	; (8003a34 <arming+0x2c>)
 8003a18:	f000 f9a0 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 8003a1c:	211f      	movs	r1, #31
 8003a1e:	4805      	ldr	r0, [pc, #20]	; (8003a34 <arming+0x2c>)
 8003a20:	f000 f99c 	bl	8003d5c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a24:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 8003a26:	2004      	movs	r0, #4
 8003a28:	f7ff f9e2 	bl	8002df0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200025dc 	.word	0x200025dc

08003a38 <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a42:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8003a44:	2120      	movs	r1, #32
 8003a46:	480b      	ldr	r0, [pc, #44]	; (8003a74 <gyro_acc_calibration+0x3c>)
 8003a48:	f000 f988 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 8003a4c:	211f      	movs	r1, #31
 8003a4e:	4809      	ldr	r0, [pc, #36]	; (8003a74 <gyro_acc_calibration+0x3c>)
 8003a50:	f000 f984 	bl	8003d5c <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 8003a54:	2118      	movs	r1, #24
 8003a56:	4807      	ldr	r0, [pc, #28]	; (8003a74 <gyro_acc_calibration+0x3c>)
 8003a58:	f000 f9b0 	bl	8003dbc <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 8003a5c:	2121      	movs	r1, #33	; 0x21
 8003a5e:	4805      	ldr	r0, [pc, #20]	; (8003a74 <gyro_acc_calibration+0x3c>)
 8003a60:	f000 f9ac 	bl	8003dbc <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003a64:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 8003a66:	2005      	movs	r0, #5
 8003a68:	f7ff f9c2 	bl	8002df0 <FLIGHT_MODE_Set_Flight_Mode>
}
 8003a6c:	bf00      	nop
 8003a6e:	3708      	adds	r7, #8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200025dc 	.word	0x200025dc

08003a78 <EVENT_init>:


void EVENT_init(system_t * sys_){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <EVENT_init+0x24>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8003a86:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <EVENT_init+0x28>)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 8003a8c:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <EVENT_init+0x2c>)
 8003a8e:	f000 f9e2 	bl	8003e56 <mask_def_events_init>
}
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200025ec 	.word	0x200025ec
 8003aa0:	200025e8 	.word	0x200025e8
 8003aa4:	2000039c 	.word	0x2000039c

08003aa8 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
	if(new_flag)
 8003ab0:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <EVENT_process+0x110>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d07a      	beq.n	8003bae <EVENT_process+0x106>
	{
		new_flag = FALSE;
 8003ab8:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <EVENT_process+0x110>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 8003abe:	2307      	movs	r3, #7
 8003ac0:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <EVENT_process+0x24>
			max = EVENT_COUNT ;
 8003ac8:	230d      	movs	r3, #13
 8003aca:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e069      	b.n	8003ba6 <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8003ada:	e049      	b.n	8003b70 <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8003adc:	4837      	ldr	r0, [pc, #220]	; (8003bbc <EVENT_process+0x114>)
 8003ade:	4938      	ldr	r1, [pc, #224]	; (8003bc0 <EVENT_process+0x118>)
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	00d2      	lsls	r2, r2, #3
 8003ae6:	24b4      	movs	r4, #180	; 0xb4
 8003ae8:	fb04 f303 	mul.w	r3, r4, r3
 8003aec:	4413      	add	r3, r2
 8003aee:	4419      	add	r1, r3
 8003af0:	e890 000c 	ldmia.w	r0, {r2, r3}
 8003af4:	c903      	ldmia	r1, {r0, r1}
 8003af6:	f000 f8d2 	bl	8003c9e <Mask_test_and>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d034      	beq.n	8003b6a <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8003b00:	482e      	ldr	r0, [pc, #184]	; (8003bbc <EVENT_process+0x114>)
 8003b02:	492f      	ldr	r1, [pc, #188]	; (8003bc0 <EVENT_process+0x118>)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1dda      	adds	r2, r3, #7
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	00d2      	lsls	r2, r2, #3
 8003b0c:	24b4      	movs	r4, #180	; 0xb4
 8003b0e:	fb04 f303 	mul.w	r3, r4, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	4419      	add	r1, r3
 8003b16:	e890 000c 	ldmia.w	r0, {r2, r3}
 8003b1a:	c903      	ldmia	r1, {r0, r1}
 8003b1c:	f000 f8f2 	bl	8003d04 <Mask_test_or>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8003b26:	4825      	ldr	r0, [pc, #148]	; (8003bbc <EVENT_process+0x114>)
 8003b28:	4925      	ldr	r1, [pc, #148]	; (8003bc0 <EVENT_process+0x118>)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f103 020e 	add.w	r2, r3, #14
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	00d2      	lsls	r2, r2, #3
 8003b34:	24b4      	movs	r4, #180	; 0xb4
 8003b36:	fb04 f303 	mul.w	r3, r4, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	4419      	add	r1, r3
 8003b3e:	e890 000c 	ldmia.w	r0, {r2, r3}
 8003b42:	c903      	ldmia	r1, {r0, r1}
 8003b44:	f000 f8de 	bl	8003d04 <Mask_test_or>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 8003b4e:	4a1c      	ldr	r2, [pc, #112]	; (8003bc0 <EVENT_process+0x118>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	21b4      	movs	r1, #180	; 0xb4
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	33b0      	adds	r3, #176	; 0xb0
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	4610      	mov	r0, r2
 8003b64:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8003b66:	2301      	movs	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8003b70:	4a13      	ldr	r2, [pc, #76]	; (8003bc0 <EVENT_process+0x118>)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	21b4      	movs	r1, #180	; 0xb4
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	33a8      	adds	r3, #168	; 0xa8
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d20c      	bcs.n	8003ba0 <EVENT_process+0xf8>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <EVENT_process+0xf8>
 8003b8c:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <EVENT_process+0x118>)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	21b4      	movs	r1, #180	; 0xb4
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	33ac      	adds	r3, #172	; 0xac
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d09d      	beq.n	8003adc <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d391      	bcc.n	8003ad2 <EVENT_process+0x2a>
			}

		}
	}
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd90      	pop	{r4, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200025e4 	.word	0x200025e4
 8003bbc:	200025dc 	.word	0x200025dc
 8003bc0:	2000039c 	.word	0x2000039c

08003bc4 <EVENT_Check_flag>:

bool_e EVENT_Check_flag(Flags_e flag){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
	return Mask_test_and(MASK_create_single(flag), flags);
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	79fa      	ldrb	r2, [r7, #7]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f91f 	bl	8003e1a <MASK_create_single>
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <EVENT_Check_flag+0x30>)
 8003bde:	cb0c      	ldmia	r3, {r2, r3}
 8003be0:	f107 0108 	add.w	r1, r7, #8
 8003be4:	c903      	ldmia	r1, {r0, r1}
 8003be6:	f000 f85a 	bl	8003c9e <Mask_test_and>
 8003bea:	4603      	mov	r3, r0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	200025dc 	.word	0x200025dc

08003bf8 <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c02:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <EVENT_Set_flag+0x28>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4805      	ldr	r0, [pc, #20]	; (8003c24 <EVENT_Set_flag+0x2c>)
 8003c10:	f000 f8a4 	bl	8003d5c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003c14:	b662      	cpsie	i
	__enable_irq();
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200025e4 	.word	0x200025e4
 8003c24:	200025dc 	.word	0x200025dc

08003c28 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c32:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <EVENT_Clean_flag+0x28>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4805      	ldr	r0, [pc, #20]	; (8003c54 <EVENT_Clean_flag+0x2c>)
 8003c40:	f000 f8bc 	bl	8003dbc <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003c44:	b662      	cpsie	i
	__enable_irq();
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200025e4 	.word	0x200025e4
 8003c54:	200025dc 	.word	0x200025dc

08003c58 <MASK_get_empty_mask>:
 */

#include "mask.h"

//Renvoit un mask vide
Mask_t MASK_get_empty_mask(){
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	Mask_t mask_return ;
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e00a      	b.n	8003c7c <MASK_get_empty_mask+0x24>
		mask_return.array[m] = 0 ;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	f107 0218 	add.w	r2, r7, #24
 8003c6e:	4413      	add	r3, r2
 8003c70:	2200      	movs	r2, #0
 8003c72:	f843 2c0c 	str.w	r2, [r3, #-12]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	ddf1      	ble.n	8003c66 <MASK_get_empty_mask+0xe>
	return mask_return ;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	461a      	mov	r2, r3
 8003c86:	f107 030c 	add.w	r3, r7, #12
 8003c8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c8e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8003c9e:	b490      	push	{r4, r7}
 8003ca0:	b086      	sub	sp, #24
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	f107 0408 	add.w	r4, r7, #8
 8003ca8:	e884 0003 	stmia.w	r4, {r0, r1}
 8003cac:	4639      	mov	r1, r7
 8003cae:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	e01c      	b.n	8003cf2 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	f107 0218 	add.w	r2, r7, #24
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	f107 0118 	add.w	r1, r7, #24
 8003cce:	440b      	add	r3, r1
 8003cd0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	f107 0118 	add.w	r1, r7, #24
 8003cde:	440b      	add	r3, r1
 8003ce0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e006      	b.n	8003cfa <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	dddf      	ble.n	8003cb8 <Mask_test_and+0x1a>
		}
	return TRUE ;
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc90      	pop	{r4, r7}
 8003d02:	4770      	bx	lr

08003d04 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8003d04:	b490      	push	{r4, r7}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	f107 0408 	add.w	r4, r7, #8
 8003d0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8003d12:	4639      	mov	r1, r7
 8003d14:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	e015      	b.n	8003d4a <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f107 0218 	add.w	r2, r7, #24
 8003d26:	4413      	add	r3, r2
 8003d28:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	f107 0118 	add.w	r1, r7, #24
 8003d34:	440b      	add	r3, r1
 8003d36:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e006      	b.n	8003d52 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	3301      	adds	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	dde6      	ble.n	8003d1e <Mask_test_or+0x1a>
	return FALSE ;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc90      	pop	{r4, r7}
 8003d5a:	4770      	bx	lr

08003d5c <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8003d78:	2201      	movs	r2, #1
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d101      	bne.n	8003d98 <MASK_set_flag+0x3c>
		return FALSE ;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e00b      	b.n	8003db0 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	ea42 0103 	orr.w	r1, r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8003dae:	2301      	movs	r3, #1
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4013      	ands	r3, r2
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d10b      	bne.n	8003e0c <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1ad1      	subs	r1, r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <MASK_create_single>:
		MASK_set_flag(&mask_return, flag_array[f]);

	return mask_return ;
}

Mask_t MASK_create_single(Flags_e flag){
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
	Mask_t mask_return = MASK_get_empty_mask() ;
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff ff14 	bl	8003c58 <MASK_get_empty_mask>
	MASK_set_flag(&mask_return, flag);
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	f107 0308 	add.w	r3, r7, #8
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff8f 	bl	8003d5c <MASK_set_flag>
	return mask_return ;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	461a      	mov	r2, r3
 8003e42:	f107 0308 	add.w	r3, r7, #8
 8003e46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e4a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <mask_def_events_init>:
static void mask_def_manual_angle(Event_t * event);
static void mask_def_manual_angle_alti_auto(Event_t * event);



void mask_def_events_init(Event_t * event){
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 f848 	bl	8003efa <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f85e 	bl	8003f2c <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f86b 	bl	8003f52 <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	33b4      	adds	r3, #180	; 0xb4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f87f 	bl	8003f84 <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 f8a9 	bl	8003fe4 <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_baro_data_rdy(&event[EVENT_BARO_DATA_RDY]);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f8b6 	bl	800400a <mask_def_baro_data_rdy>
	//Baro
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 f880 	bl	8003faa <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f8d5 	bl	8004060 <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 f8fa 	bl	80040b6 <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f92d 	bl	8004128 <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f946 	bl	8004166 <mask_def_gyro_acc_calibration>
	mask_def_manual_angle(&event[EVENT_MANUAL_ANGLE]);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 f8fb 	bl	80040dc <mask_def_manual_angle>
	mask_def_manual_angle_alti_auto(&event[EVENT_MANUAL_ANGLE_ALTITUDE_AUTO]);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f908 	bl	8004102 <mask_def_manual_angle_alti_auto>

}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ff28 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3338      	adds	r3, #56	; 0x38
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ff22 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3370      	adds	r3, #112	; 0x70
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff1c 	bl	8003d5c <MASK_set_flag>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff0f 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3338      	adds	r3, #56	; 0x38
 8003f42:	2102      	movs	r1, #2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff09 	bl	8003d5c <MASK_set_flag>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2104      	movs	r1, #4
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fefc 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3338      	adds	r3, #56	; 0x38
 8003f68:	2104      	movs	r1, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fef6 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3370      	adds	r3, #112	; 0x70
 8003f74:	2105      	movs	r1, #5
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fef0 	bl	8003d5c <MASK_set_flag>
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2104      	movs	r1, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fee3 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3338      	adds	r3, #56	; 0x38
 8003f9a:	2106      	movs	r1, #6
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff fedd 	bl	8003d5c <MASK_set_flag>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fed0 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fecb 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2103      	movs	r1, #3
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fec6 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3338      	adds	r3, #56	; 0x38
 8003fd4:	2107      	movs	r1, #7
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fec0 	bl	8003d5c <MASK_set_flag>
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------
static void mask_def_ibus_data_rdy(Event_t * event){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	210d      	movs	r1, #13
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff feb3 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3338      	adds	r3, #56	; 0x38
 8003ffa:	210d      	movs	r1, #13
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fead 	bl	8003d5c <MASK_set_flag>
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <mask_def_baro_data_rdy>:

// ----------------	BAaro ------------------------
static void mask_def_baro_data_rdy(Event_t * event){
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_OK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2108      	movs	r1, #8
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fea0 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_TEMP_RAW_RDY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3338      	adds	r3, #56	; 0x38
 8004020:	2109      	movs	r1, #9
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fe9a 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_OK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3308      	adds	r3, #8
 800402c:	2108      	movs	r1, #8
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fe94 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_PRESSURE_RAW_RDY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3340      	adds	r3, #64	; 0x40
 8004038:	210a      	movs	r1, #10
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fe8e 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_OK);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3310      	adds	r3, #16
 8004044:	2108      	movs	r1, #8
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff fe88 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_PRESSURE_RDY);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3348      	adds	r3, #72	; 0x48
 8004050:	210b      	movs	r1, #11
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fe82 	bl	8003d5c <MASK_set_flag>
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2122      	movs	r1, #34	; 0x22
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff fe75 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3338      	adds	r3, #56	; 0x38
 8004076:	210e      	movs	r1, #14
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fe6f 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3308      	adds	r3, #8
 8004082:	211d      	movs	r1, #29
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fe69 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3340      	adds	r3, #64	; 0x40
 800408e:	210e      	movs	r1, #14
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fe63 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3310      	adds	r3, #16
 800409a:	2120      	movs	r1, #32
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fe5d 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3348      	adds	r3, #72	; 0x48
 80040a6:	2121      	movs	r1, #33	; 0x21
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fe57 	bl	8003d5c <MASK_set_flag>


}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_CHAN_6_POS_1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2110      	movs	r1, #16
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fe4a 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_ARMED);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3338      	adds	r3, #56	; 0x38
 80040cc:	211e      	movs	r1, #30
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fe44 	bl	8003d5c <MASK_set_flag>
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <mask_def_manual_angle>:

static void mask_def_manual_angle(Event_t * event){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_CHAN_6_POS_2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2111      	movs	r1, #17
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fe37 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_ARMED);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3338      	adds	r3, #56	; 0x38
 80040f2:	211e      	movs	r1, #30
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fe31 	bl	8003d5c <MASK_set_flag>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <mask_def_manual_angle_alti_auto>:

static void mask_def_manual_angle_alti_auto(Event_t * event){
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ALTI_AUTO], FLAG_CHAN_6_POS_3);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2112      	movs	r1, #18
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff fe24 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ALTI_AUTO], FLAG_ARMED);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3338      	adds	r3, #56	; 0x38
 8004118:	211e      	movs	r1, #30
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fe1e 	bl	8003d5c <MASK_set_flag>
}
 8004120:	bf00      	nop
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fe11 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3338      	adds	r3, #56	; 0x38
 800413e:	210f      	movs	r1, #15
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fe0b 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	3370      	adds	r3, #112	; 0x70
 800414a:	2122      	movs	r1, #34	; 0x22
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fe05 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3370      	adds	r3, #112	; 0x70
 8004156:	211f      	movs	r1, #31
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fdff 	bl	8003d5c <MASK_set_flag>


}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff fdf2 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3338      	adds	r3, #56	; 0x38
 800417c:	2118      	movs	r1, #24
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fdec 	bl	8003d5c <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3370      	adds	r3, #112	; 0x70
 8004188:	211f      	movs	r1, #31
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fde6 	bl	8003d5c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3370      	adds	r3, #112	; 0x70
 8004194:	2122      	movs	r1, #34	; 0x22
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fde0 	bl	8003d5c <MASK_set_flag>
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 80041ac:	4a05      	ldr	r2, [pc, #20]	; (80041c4 <SCHEDULER_init+0x20>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 80041b2:	f7ff fa39 	bl	8003628 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb26 	bl	8004808 <tasks_init>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20002644 	.word	0x20002644

080041c8 <SCHEDULER_run>:

void SCHEDULER_run(void){
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 80041ce:	f000 fce7 	bl	8004ba0 <TIME_us>
 80041d2:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 80041d4:	f000 f8d6 	bl	8004384 <get_first_task>
 80041d8:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 80041da:	2300      	movs	r3, #0
 80041dc:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 80041de:	e04d      	b.n	800427c <SCHEDULER_run+0xb4>

		switch(task->mode){
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	7a1b      	ldrb	r3, [r3, #8]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d027      	beq.n	8004238 <SCHEDULER_run+0x70>
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d002      	beq.n	80041f2 <SCHEDULER_run+0x2a>
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d008      	beq.n	8004202 <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 80041f0:	e02e      	b.n	8004250 <SCHEDULER_run+0x88>
				current_time_us = task_process(task, current_time_us);
 80041f2:	68f9      	ldr	r1, [r7, #12]
 80041f4:	68b8      	ldr	r0, [r7, #8]
 80041f6:	f000 f8eb 	bl	80043d0 <task_process>
 80041fa:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 80041fc:	2301      	movs	r3, #1
 80041fe:	607b      	str	r3, [r7, #4]
				break;
 8004200:	e026      	b.n	8004250 <SCHEDULER_run+0x88>
				if(current_time_us >= task->desired_next_start_us){
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	429a      	cmp	r2, r3
 800420a:	d320      	bcc.n	800424e <SCHEDULER_run+0x86>
					current_time_us = task_process(task, current_time_us);
 800420c:	68f9      	ldr	r1, [r7, #12]
 800420e:	68b8      	ldr	r0, [r7, #8]
 8004210:	f000 f8de 	bl	80043d0 <task_process>
 8004214:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	edd2 7a03 	vldr	s15, [r2, #12]
 8004220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004224:	ee17 2a90 	vmov	r2, s15
 8004228:	1a9a      	subs	r2, r3, r2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	441a      	add	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	625a      	str	r2, [r3, #36]	; 0x24
					task_executed = TRUE ;
 8004232:	2301      	movs	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
				break;
 8004236:	e00a      	b.n	800424e <SCHEDULER_run+0x86>
				current_time_us = task_process(task, current_time_us);
 8004238:	68f9      	ldr	r1, [r7, #12]
 800423a:	68b8      	ldr	r0, [r7, #8]
 800423c:	f000 f8c8 	bl	80043d0 <task_process>
 8004240:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8004242:	2301      	movs	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2200      	movs	r2, #0
 800424a:	721a      	strb	r2, [r3, #8]
				break;
 800424c:	e000      	b.n	8004250 <SCHEDULER_run+0x88>
				break;
 800424e:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <SCHEDULER_run+0xaa>
 8004256:	2000      	movs	r0, #0
 8004258:	f000 fc8e 	bl	8004b78 <TASK_get_task>
 800425c:	4602      	mov	r2, r0
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4293      	cmp	r3, r2
 8004262:	d006      	beq.n	8004272 <SCHEDULER_run+0xaa>
 8004264:	2001      	movs	r0, #1
 8004266:	f000 fc87 	bl	8004b78 <TASK_get_task>
 800426a:	4602      	mov	r2, r0
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4293      	cmp	r3, r2
 8004270:	d10e      	bne.n	8004290 <SCHEDULER_run+0xc8>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 8004272:	2300      	movs	r3, #0
 8004274:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 8004276:	f000 f895 	bl	80043a4 <get_next_task>
 800427a:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <SCHEDULER_run+0xd4>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <SCHEDULER_run+0xd8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d204      	bcs.n	8004292 <SCHEDULER_run+0xca>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1a8      	bne.n	80041e0 <SCHEDULER_run+0x18>
	}
}
 800428e:	e000      	b.n	8004292 <SCHEDULER_run+0xca>
			break;
 8004290:	bf00      	nop
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20002640 	.word	0x20002640
 80042a0:	2000263c 	.word	0x2000263c

080042a4 <SCHEDULER_task>:

void SCHEDULER_task(void){
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	71fb      	strb	r3, [r7, #7]
 80042ae:	e00b      	b.n	80042c8 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 80042b0:	79fa      	ldrb	r2, [r7, #7]
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	490c      	ldr	r1, [pc, #48]	; (80042e8 <SCHEDULER_task+0x44>)
 80042b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042ba:	490c      	ldr	r1, [pc, #48]	; (80042ec <SCHEDULER_task+0x48>)
 80042bc:	5c8a      	ldrb	r2, [r1, r2]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	3301      	adds	r3, #1
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <SCHEDULER_task+0x4c>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	79fa      	ldrb	r2, [r7, #7]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d3ed      	bcc.n	80042b0 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <SCHEDULER_task+0x4c>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20002648 	.word	0x20002648
 80042ec:	20002694 	.word	0x20002694
 80042f0:	200026a7 	.word	0x200026a7

080042f4 <SCHEDULER_get_cpu_load>:

float SCHEDULER_get_cpu_load(void){
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
	float load_pourcentage = 0 ;
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 8004300:	2302      	movs	r3, #2
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	e023      	b.n	800434e <SCHEDULER_get_cpu_load+0x5a>
		if(task_queu[t]->real_period_us)
 8004306:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <SCHEDULER_get_cpu_load+0x84>)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <SCHEDULER_get_cpu_load+0x54>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8004314:	4a18      	ldr	r2, [pc, #96]	; (8004378 <SCHEDULER_get_cpu_load+0x84>)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8004322:	fb02 f203 	mul.w	r2, r2, r3
 8004326:	4914      	ldr	r1, [pc, #80]	; (8004378 <SCHEDULER_get_cpu_load+0x84>)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004344:	edc7 7a01 	vstr	s15, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <SCHEDULER_get_cpu_load+0x88>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d3d6      	bcc.n	8004306 <SCHEDULER_get_cpu_load+0x12>

	return load_pourcentage / 512.0f ;
 8004358:	edd7 7a01 	vldr	s15, [r7, #4]
 800435c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004380 <SCHEDULER_get_cpu_load+0x8c>
 8004360:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004364:	eef0 7a66 	vmov.f32	s15, s13
}
 8004368:	eeb0 0a67 	vmov.f32	s0, s15
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	200025f0 	.word	0x200025f0
 800437c:	2000263c 	.word	0x2000263c
 8004380:	44000000 	.word	0x44000000

08004384 <get_first_task>:

static task_t * get_first_task(void){
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <get_first_task+0x18>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <get_first_task+0x1c>)
 8004390:	681b      	ldr	r3, [r3, #0]
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20002640 	.word	0x20002640
 80043a0:	200025f0 	.word	0x200025f0

080043a4 <get_next_task>:

static task_t * get_next_task(void){
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <get_next_task+0x24>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <get_next_task+0x24>)
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <get_next_task+0x24>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a05      	ldr	r2, [pc, #20]	; (80043cc <get_next_task+0x28>)
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20002640 	.word	0x20002640
 80043cc:	200025f0 	.word	0x200025f0

080043d0 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <task_process+0x16>
		return current_time_us ;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	e0e6      	b.n	80045b4 <task_process+0x1e4>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	310a      	adds	r1, #10
 80043f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	679a      	str	r2, [r3, #120]	; 0x78
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 8004408:	6839      	ldr	r1, [r7, #0]
 800440a:	1ac9      	subs	r1, r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	320a      	adds	r2, #10
 8004410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	310a      	adds	r1, #10
 8004422:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004426:	441a      	add	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	679a      	str	r2, [r3, #120]	; 0x78
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004430:	4a62      	ldr	r2, [pc, #392]	; (80045bc <task_process+0x1ec>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091a      	lsrs	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	61da      	str	r2, [r3, #28]

	//Lag compensation
	if(task->mode == TASK_MODE_TIME){
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	7a1b      	ldrb	r3, [r3, #8]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d13f      	bne.n	80044c4 <task_process+0xf4>
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	320a      	adds	r2, #10
 800444e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	429a      	cmp	r2, r3
 8004458:	d91a      	bls.n	8004490 <task_process+0xc0>
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	320a      	adds	r2, #10
 800446a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004480:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	edc3 7a03 	vstr	s15, [r3, #12]
 800448e:	e019      	b.n	80044c4 <task_process+0xf4>
		else
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	ed93 7a03 	vldr	s14, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	310a      	adds	r1, #10
 80044a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	ee07 3a90 	vmov	s15, r3
 80044ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80044b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80044ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	edc3 7a03 	vstr	s15, [r3, #12]
	}


	task->last_execution_us = current_time_us ;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	621a      	str	r2, [r3, #32]
	task->process(current_time_us);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	6838      	ldr	r0, [r7, #0]
 80044d0:	4798      	blx	r3
	current_time_us = TIME_us();
 80044d2:	f000 fb65 	bl	8004ba0 <TIME_us>
 80044d6:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	331e      	adds	r3, #30
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	1ad2      	subs	r2, r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	1a8a      	subs	r2, r1, r2
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	331e      	adds	r3, #30
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	605a      	str	r2, [r3, #4]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	331e      	adds	r3, #30
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	bf38      	it	cc
 8004526:	461a      	movcc	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	615a      	str	r2, [r3, #20]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	331e      	adds	r3, #30
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	441a      	add	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004550:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <task_process+0x1ec>)
 8004552:	fba2 2303 	umull	r2, r3, r2, r3
 8004556:	091a      	lsrs	r2, r3, #4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	611a      	str	r2, [r3, #16]

	if(task->duration_us_average_array[task->average_index] > 1000)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	331e      	adds	r3, #30
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004570:	d90f      	bls.n	8004592 <task_process+0x1c2>
		task->duration_us_average_array[task->average_index] ++ ;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	f102 031e 	add.w	r3, r2, #30
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	1c59      	adds	r1, r3, #1
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f102 031e 	add.w	r3, r2, #30
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4403      	add	r3, r0
 8004590:	6059      	str	r1, [r3, #4]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80045a6:	2b14      	cmp	r3, #20
 80045a8:	d103      	bne.n	80045b2 <task_process+0x1e2>
		task->average_index = 0 ;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	return current_time_us ;
 80045b2:	683b      	ldr	r3, [r7, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	cccccccd 	.word	0xcccccccd

080045c0 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
	if(enable)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 facf 	bl	8004b78 <TASK_get_task>
 80045da:	4603      	mov	r3, r0
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f873 	bl	80046c8 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 80045e2:	e007      	b.n	80045f4 <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fac6 	bl	8004b78 <TASK_get_task>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f8c8 	bl	8004784 <queu_remove>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	460a      	mov	r2, r1
 8004606:	71fb      	strb	r3, [r7, #7]
 8004608:	4613      	mov	r3, r2
 800460a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 800460c:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <SCHEDULER_task_set_mode+0x4c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461c      	mov	r4, r3
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 faad 	bl	8004b78 <TASK_get_task>
 800461e:	4602      	mov	r2, r0
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <SCHEDULER_task_set_mode+0x50>)
 8004622:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <SCHEDULER_task_set_mode+0x4c>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	b2d1      	uxtb	r1, r2
 8004630:	4a05      	ldr	r2, [pc, #20]	; (8004648 <SCHEDULER_task_set_mode+0x4c>)
 8004632:	7011      	strb	r1, [r2, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	4a06      	ldr	r2, [pc, #24]	; (8004650 <SCHEDULER_task_set_mode+0x54>)
 8004638:	79bb      	ldrb	r3, [r7, #6]
 800463a:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 800463c:	b662      	cpsie	i
	__enable_irq();
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bd90      	pop	{r4, r7, pc}
 8004646:	bf00      	nop
 8004648:	200026a7 	.word	0x200026a7
 800464c:	20002648 	.word	0x20002648
 8004650:	20002694 	.word	0x20002694

08004654 <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fa88 	bl	8004b78 <TASK_get_task>
 8004668:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	619a      	str	r2, [r3, #24]
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <queu_contains+0x12>
		return FALSE ;
 8004686:	2300      	movs	r3, #0
 8004688:	e014      	b.n	80046b4 <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e00b      	b.n	80046a8 <queu_contains+0x30>
		if(task_queu[t] == task)
 8004690:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <queu_contains+0x48>)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d101      	bne.n	80046a2 <queu_contains+0x2a>
			return TRUE ;
 800469e:	2301      	movs	r3, #1
 80046a0:	e008      	b.n	80046b4 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <queu_contains+0x4c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d3ee      	bcc.n	8004690 <queu_contains+0x18>
	return FALSE ;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	200025f0 	.word	0x200025f0
 80046c4:	2000263c 	.word	0x2000263c

080046c8 <queu_add>:

static bool_e queu_add(task_t * task){
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff ffd1 	bl	8004678 <queu_contains>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d106      	bne.n	80046ea <queu_add+0x22>
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <queu_add+0xb4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b12      	cmp	r3, #18
 80046e2:	d802      	bhi.n	80046ea <queu_add+0x22>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <queu_add+0x26>
		return FALSE ;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e041      	b.n	8004772 <queu_add+0xaa>


	uint32_t t = 0 ;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80046f2:	e03a      	b.n	800476a <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <queu_add+0xb8>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <queu_add+0x50>
		{
			task_queu[t] = task ;
 8004700:	491f      	ldr	r1, [pc, #124]	; (8004780 <queu_add+0xb8>)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <queu_add+0xb4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	4a1a      	ldr	r2, [pc, #104]	; (800477c <queu_add+0xb4>)
 8004712:	6013      	str	r3, [r2, #0]
			return TRUE;
 8004714:	2301      	movs	r3, #1
 8004716:	e02c      	b.n	8004772 <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	4918      	ldr	r1, [pc, #96]	; (8004780 <queu_add+0xb8>)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d91c      	bls.n	8004764 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3301      	adds	r3, #1
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4a13      	ldr	r2, [pc, #76]	; (8004780 <queu_add+0xb8>)
 8004732:	1898      	adds	r0, r3, r2
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4a11      	ldr	r2, [pc, #68]	; (8004780 <queu_add+0xb8>)
 800473a:	1899      	adds	r1, r3, r2
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <queu_add+0xb4>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	461a      	mov	r2, r3
 8004748:	f00c fa6f 	bl	8010c2a <memmove>
			task_queu[t] = task ;
 800474c:	490c      	ldr	r1, [pc, #48]	; (8004780 <queu_add+0xb8>)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <queu_add+0xb4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	4a07      	ldr	r2, [pc, #28]	; (800477c <queu_add+0xb4>)
 800475e:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8004760:	2301      	movs	r3, #1
 8004762:	e006      	b.n	8004772 <queu_add+0xaa>
		}
		t++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3301      	adds	r3, #1
 8004768:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2b12      	cmp	r3, #18
 800476e:	d9c1      	bls.n	80046f4 <queu_add+0x2c>
	}
	return FALSE ;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	2000263c 	.word	0x2000263c
 8004780:	200025f0 	.word	0x200025f0

08004784 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ff73 	bl	8004678 <queu_contains>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <queu_remove+0x1a>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <queu_remove+0x1e>
		return FALSE ;
 800479e:	2300      	movs	r3, #0
 80047a0:	e02a      	b.n	80047f8 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	e021      	b.n	80047ec <queu_remove+0x68>
		if(task == task_queu[t]){
 80047a8:	4a15      	ldr	r2, [pc, #84]	; (8004800 <queu_remove+0x7c>)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d117      	bne.n	80047e6 <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4a11      	ldr	r2, [pc, #68]	; (8004800 <queu_remove+0x7c>)
 80047bc:	1898      	adds	r0, r3, r2
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3301      	adds	r3, #1
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4a0e      	ldr	r2, [pc, #56]	; (8004800 <queu_remove+0x7c>)
 80047c6:	1899      	adds	r1, r3, r2
 80047c8:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <queu_remove+0x80>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	461a      	mov	r2, r3
 80047d4:	f00c fa29 	bl	8010c2a <memmove>
			task_queu_size -- ;
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <queu_remove+0x80>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3b01      	subs	r3, #1
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <queu_remove+0x80>)
 80047e0:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e008      	b.n	80047f8 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3301      	adds	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <queu_remove+0x80>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3d8      	bcc.n	80047a8 <queu_remove+0x24>
		}
	}
	return FALSE ;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	200025f0 	.word	0x200025f0
 8004804:	2000263c 	.word	0x2000263c

08004808 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8004810:	4a25      	ldr	r2, [pc, #148]	; (80048a8 <tasks_init+0xa0>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 8004816:	2101      	movs	r1, #1
 8004818:	2000      	movs	r0, #0
 800481a:	f7ff fed1 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 800481e:	2101      	movs	r1, #1
 8004820:	2001      	movs	r0, #1
 8004822:	f7ff fecd 	bl	80045c0 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 8004826:	2101      	movs	r1, #1
 8004828:	2003      	movs	r0, #3
 800482a:	f7ff fec9 	bl	80045c0 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 800482e:	2101      	movs	r1, #1
 8004830:	2008      	movs	r0, #8
 8004832:	f7ff fec5 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 8004836:	2101      	movs	r1, #1
 8004838:	2005      	movs	r0, #5
 800483a:	f7ff fec1 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 800483e:	2101      	movs	r1, #1
 8004840:	2004      	movs	r0, #4
 8004842:	f7ff febd 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 8004846:	2101      	movs	r1, #1
 8004848:	2007      	movs	r0, #7
 800484a:	f7ff feb9 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 800484e:	2101      	movs	r1, #1
 8004850:	2009      	movs	r0, #9
 8004852:	f7ff feb5 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 8004856:	2101      	movs	r1, #1
 8004858:	200a      	movs	r0, #10
 800485a:	f7ff feb1 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 800485e:	2101      	movs	r1, #1
 8004860:	200b      	movs	r0, #11
 8004862:	f7ff fead 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 8004866:	2101      	movs	r1, #1
 8004868:	200c      	movs	r0, #12
 800486a:	f7ff fea9 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 800486e:	2101      	movs	r1, #1
 8004870:	200d      	movs	r0, #13
 8004872:	f7ff fea5 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_SELF_TEST, TRUE);
 8004876:	2101      	movs	r1, #1
 8004878:	200e      	movs	r0, #14
 800487a:	f7ff fea1 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_UPDATE, TRUE);
 800487e:	2101      	movs	r1, #1
 8004880:	200f      	movs	r0, #15
 8004882:	f7ff fe9d 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_TEMP, TRUE);
 8004886:	2101      	movs	r1, #1
 8004888:	2010      	movs	r0, #16
 800488a:	f7ff fe99 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_PRESSURE, TRUE);
 800488e:	2101      	movs	r1, #1
 8004890:	2011      	movs	r0, #17
 8004892:	f7ff fe95 	bl	80045c0 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_ALTITUDE, TRUE);
 8004896:	2101      	movs	r1, #1
 8004898:	2012      	movs	r0, #18
 800489a:	f7ff fe91 	bl	80045c0 <SCHEDULER_enable_task>

}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	200026a8 	.word	0x200026a8

080048ac <process_print_f>:

void process_print_f(uint32_t current_time_us){
 80048ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048b0:	b088      	sub	sp, #32
 80048b2:	af04      	add	r7, sp, #16
 80048b4:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 80048b6:	4b14      	ldr	r3, [pc, #80]	; (8004908 <process_print_f+0x5c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80048be:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fb fe3f 	bl	8000548 <__aeabi_f2d>
 80048ca:	4680      	mov	r8, r0
 80048cc:	4689      	mov	r9, r1
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fb fe37 	bl	8000548 <__aeabi_f2d>
 80048da:	4604      	mov	r4, r0
 80048dc:	460d      	mov	r5, r1
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fe30 	bl	8000548 <__aeabi_f2d>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048f0:	e9cd 4500 	strd	r4, r5, [sp]
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	4804      	ldr	r0, [pc, #16]	; (800490c <process_print_f+0x60>)
 80048fa:	f00c fe13 	bl	8011524 <iprintf>
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004908:	200026a8 	.word	0x200026a8
 800490c:	08014c60 	.word	0x08014c60

08004910 <process_led>:


void process_led(uint32_t current_time_us){
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	IHM_Update();
 8004918:	f7fe fd64 	bl	80033e4 <IHM_Update>
	BUZZER_Update(&sys->ihm.buzzer);
 800491c:	4b04      	ldr	r3, [pc, #16]	; (8004930 <process_led+0x20>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3330      	adds	r3, #48	; 0x30
 8004922:	4618      	mov	r0, r3
 8004924:	f00c f902 	bl	8010b2c <BUZZER_Update>
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200026a8 	.word	0x200026a8

08004934 <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 800493c:	4a06      	ldr	r2, [pc, #24]	; (8004958 <process_gyro_update+0x24>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <process_gyro_update+0x28>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	333c      	adds	r3, #60	; 0x3c
 8004948:	4618      	mov	r0, r3
 800494a:	f001 fa5f 	bl	8005e0c <GYRO_ACC_update_dma>

}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	200026ac 	.word	0x200026ac
 800495c:	200026a8 	.word	0x200026a8

08004960 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 8004968:	4a06      	ldr	r2, [pc, #24]	; (8004984 <process_gyro_filter+0x24>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <process_gyro_filter+0x28>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	333c      	adds	r3, #60	; 0x3c
 8004974:	4618      	mov	r0, r3
 8004976:	f001 fa65 	bl	8005e44 <GYRO_process_lpf>

}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200026b0 	.word	0x200026b0
 8004988:	200026a8 	.word	0x200026a8

0800498c <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <process_acc_update+0x1c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	33b0      	adds	r3, #176	; 0xb0
 800499a:	4618      	mov	r0, r3
 800499c:	f000 ff4e 	bl	800583c <ACC_update>
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200026a8 	.word	0x200026a8

080049ac <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <process_acc_filter+0x1c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	33b0      	adds	r3, #176	; 0xb0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 ffee 	bl	800599c <ACC_process_lpf>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	200026a8 	.word	0x200026a8

080049cc <process_event_main>:

void process_event_main(uint32_t current_time_us){
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 80049d4:	2000      	movs	r0, #0
 80049d6:	f7ff f867 	bl	8003aa8 <EVENT_process>
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

	//Estimation
	ORIENTATION_Update(&sys->orientation);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <process_orientation_update+0x38>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fd fd95 	bl	8002524 <ORIENTATION_Update>
	POSITION_Update(&sys->position);
 80049fa:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <process_orientation_update+0x38>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd ff3c 	bl	8002880 <POSITION_Update>

	//Regulation
	REGULATION_POSITION_Process();
 8004a08:	f000 fe6e 	bl	80056e8 <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 8004a0c:	f000 fcfa 	bl	8005404 <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 8004a10:	f000 f924 	bl	8004c5c <PROPULSION_Update_Motors>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	200026a8 	.word	0x200026a8

08004a20 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 8004a28:	f7ff fc3c 	bl	80042a4 <SCHEDULER_task>
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 8004a3c:	f000 fc68 	bl	8005310 <CONTROLLER_Update_Channels_Array>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 8004a46:	2102      	movs	r1, #2
 8004a48:	200a      	movs	r0, #10
 8004a4a:	f7ff fdd7 	bl	80045fc <SCHEDULER_task_set_mode>
}
 8004a4e:	bf00      	nop
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 8004a5e:	f000 f9d9 	bl	8004e14 <CONTROLLER_Update_Channels_Analysis>
}
 8004a62:	bf00      	nop
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b082      	sub	sp, #8
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 8004a72:	2001      	movs	r0, #1
 8004a74:	f7ff f818 	bl	8003aa8 <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fe f9c9 	bl	8002e10 <FLIGHT_MODE_Main>
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f003 fc9e 	bl	80083d0 <TELEMETRY_Process>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <process_logger>:

void process_logger(uint32_t current_time_us){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 8004aa4:	f7fd f970 	bl	8001d88 <DATA_LOGGER_Main>
}
 8004aa8:	bf00      	nop
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <process_self_test>:

void process_self_test(uint32_t current_time_us){
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	sys->soft.cpu_load = SCHEDULER_get_cpu_load();
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <process_self_test+0x24>)
 8004aba:	681c      	ldr	r4, [r3, #0]
 8004abc:	f7ff fc1a 	bl	80042f4 <SCHEDULER_get_cpu_load>
 8004ac0:	eef0 7a40 	vmov.f32	s15, s0
 8004ac4:	f604 6308 	addw	r3, r4, #3592	; 0xe08
 8004ac8:	edc3 7a00 	vstr	s15, [r3]
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd90      	pop	{r4, r7, pc}
 8004ad4:	200026a8 	.word	0x200026a8

08004ad8 <process_baro_update>:

void process_baro_update(uint32_t current_time_us){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	SCHEDULER_reschedule_task(TASK_BARO_UPDATE, BARO_Main(&sys->sensors.baro));
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <process_baro_update+0x28>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f815 	bl	8005b18 <BARO_Main>
 8004aee:	4603      	mov	r3, r0
 8004af0:	4619      	mov	r1, r3
 8004af2:	200f      	movs	r0, #15
 8004af4:	f7ff fdae 	bl	8004654 <SCHEDULER_reschedule_task>
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	200026a8 	.word	0x200026a8

08004b04 <process_baro_temp>:

void process_baro_temp(uint32_t current_time_us){
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	BARO_compute_temp(&sys->sensors.baro);
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <process_baro_temp+0x20>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f879 	bl	8005c0c <BARO_compute_temp>
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200026a8 	.word	0x200026a8

08004b28 <process_baro_pressure>:

void process_baro_pressure(uint32_t current_time_us){
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	BARO_compute_pressure(&sys->sensors.baro);
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <process_baro_pressure+0x24>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f874 	bl	8005c26 <BARO_compute_pressure>
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RDY);
 8004b3e:	200b      	movs	r0, #11
 8004b40:	f7ff f85a 	bl	8003bf8 <EVENT_Set_flag>
}
 8004b44:	bf00      	nop
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	200026a8 	.word	0x200026a8

08004b50 <process_baro_altitude>:

void process_baro_altitude(uint32_t current_time_us){
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	BARO_compute_altitude(&sys->sensors.baro);
 8004b58:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <process_baro_altitude+0x24>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 f86d 	bl	8005c40 <BARO_compute_altitude>
	EVENT_Set_flag(FLAG_BARO_ALTITUDE_RDY);
 8004b66:	200c      	movs	r0, #12
 8004b68:	f7ff f846 	bl	8003bf8 <EVENT_Set_flag>
}
 8004b6c:	bf00      	nop
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	200026a8 	.word	0x200026a8

08004b78 <TASK_get_task>:


};


task_t * TASK_get_task(task_ids_t id){
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	22d4      	movs	r2, #212	; 0xd4
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <TASK_get_task+0x24>)
 8004b8c:	4413      	add	r3, r2
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000cc0 	.word	0x20000cc0

08004ba0 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004ba6:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8004ba8:	f003 fe14 	bl	80087d4 <HAL_GetTick>
 8004bac:	4603      	mov	r3, r0
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bb4:	fb02 f203 	mul.w	r2, r2, r3
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <TIME_us+0x50>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	08db      	lsrs	r3, r3, #3
 8004bbe:	490d      	ldr	r1, [pc, #52]	; (8004bf4 <TIME_us+0x54>)
 8004bc0:	fba1 1303 	umull	r1, r3, r1, r3
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bca:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 8004bcc:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <TIME_us+0x58>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d203      	bcs.n	8004bde <TIME_us+0x3e>
		t_us += 1000;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004bdc:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8004bde:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <TIME_us+0x58>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6013      	str	r3, [r2, #0]

	return t_us;
 8004be4:	687b      	ldr	r3, [r7, #4]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000e010 	.word	0xe000e010
 8004bf4:	18618619 	.word	0x18618619
 8004bf8:	200026b4 	.word	0x200026b4

08004bfc <TIME_delay_us_blocking>:

void TIME_delay_us_blocking(uint32_t duration_us){
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	uint32_t end_time = TIME_us() + duration_us;
 8004c04:	f7ff ffcc 	bl	8004ba0 <TIME_us>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
	while(TIME_us() < end_time);
 8004c10:	bf00      	nop
 8004c12:	f7ff ffc5 	bl	8004ba0 <TIME_us>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d8f9      	bhi.n	8004c12 <TIME_delay_us_blocking+0x16>
}
 8004c1e:	bf00      	nop
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
	prop = prop_;
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <PROPULSION_Init+0x30>)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <PROPULSION_Init+0x30>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <PROPULSION_Init+0x30>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f103 0218 	add.w	r2, r3, #24
 8004c46:	2301      	movs	r3, #1
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	f00b fdab 	bl	80107a4 <MOTORS_Init>
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200026b8 	.word	0x200026b8

08004c5c <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST + PITCH - ROLL + YAW;
 8004c62:	4b4c      	ldr	r3, [pc, #304]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	4b49      	ldr	r3, [pc, #292]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	4b46      	ldr	r3, [pc, #280]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST + PITCH + ROLL - YAW ;
 8004c98:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	4b3c      	ldr	r3, [pc, #240]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	4b38      	ldr	r3, [pc, #224]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	4413      	add	r3, r2
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	4b35      	ldr	r3, [pc, #212]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST - PITCH + ROLL + YAW ;
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	4b2e      	ldr	r3, [pc, #184]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST - PITCH - ROLL - YAW ;
 8004d04:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 8004d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d42:	b21a      	sxth	r2, r3
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b292      	uxth	r2, r2
 8004d4a:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 8004d4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d54:	b21a      	sxth	r2, r3
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 8004d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d66:	b21a      	sxth	r2, r3
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 8004d70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d74:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d78:	b21a      	sxth	r2, r3
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b292      	uxth	r2, r2
 8004d80:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 8004d82:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <PROPULSION_Update_Motors+0x138>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f00b fd43 	bl	8010812 <MOTORS_Change_output>

}
 8004d8c:	bf00      	nop
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	200026b8 	.word	0x200026b8

08004d98 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	321a      	adds	r2, #26
 8004db0:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2201      	movs	r2, #1
 8004db8:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8004dca:	4b11      	ldr	r3, [pc, #68]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2204      	movs	r2, #4
 8004dd8:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 8004dda:	4b0d      	ldr	r3, [pc, #52]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2204      	movs	r2, #4
 8004de0:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2204      	movs	r2, #4
 8004de8:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2204      	movs	r2, #4
 8004df0:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2206      	movs	r2, #6
 8004df8:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <CONTROLLER_Init+0x78>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2205      	movs	r2, #5
 8004e00:	735a      	strb	r2, [r3, #13]

}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	200026bc 	.word	0x200026bc

08004e14 <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	71fb      	strb	r3, [r7, #7]
 8004e1e:	e1a0      	b.n	8005162 <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 8004e20:	4bac      	ldr	r3, [pc, #688]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e28:	4413      	add	r3, r2
 8004e2a:	791b      	ldrb	r3, [r3, #4]
 8004e2c:	2b06      	cmp	r3, #6
 8004e2e:	f200 818d 	bhi.w	800514c <CONTROLLER_Update_Channels_Analysis+0x338>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	0800514d 	.word	0x0800514d
 8004e3c:	08004e55 	.word	0x08004e55
 8004e40:	08004ea1 	.word	0x08004ea1
 8004e44:	0800514d 	.word	0x0800514d
 8004e48:	080050ad 	.word	0x080050ad
 8004e4c:	08004f69 	.word	0x08004f69
 8004e50:	0800501d 	.word	0x0800501d
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8004e54:	4b9f      	ldr	r3, [pc, #636]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	4413      	add	r3, r2
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004e68:	f113 0f1d 	cmn.w	r3, #29
 8004e6c:	f2c0 8170 	blt.w	8005150 <CONTROLLER_Update_Channels_Analysis+0x33c>
 8004e70:	4b98      	ldr	r3, [pc, #608]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004e84:	2b1d      	cmp	r3, #29
 8004e86:	f300 8163 	bgt.w	8005150 <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 8004e8a:	4b92      	ldr	r3, [pc, #584]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e9c:	801a      	strh	r2, [r3, #0]
					break;
 8004e9e:	e157      	b.n	8005150 <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 8004ea0:	4b8c      	ldr	r3, [pc, #560]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004eb4:	d914      	bls.n	8004ee0 <CONTROLLER_Update_Channels_Analysis+0xcc>
 8004eb6:	4b87      	ldr	r3, [pc, #540]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	f240 421a 	movw	r2, #1050	; 0x41a
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d808      	bhi.n	8004ee0 <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 8004ece:	4b81      	ldr	r3, [pc, #516]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2020 	strb.w	r2, [r3, #32]
 8004ede:	e042      	b.n	8004f66 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 8004ee0:	4b7c      	ldr	r3, [pc, #496]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	f240 421a 	movw	r2, #1050	; 0x41a
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d914      	bls.n	8004f22 <CONTROLLER_Update_Channels_Analysis+0x10e>
 8004ef8:	4b76      	ldr	r3, [pc, #472]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	4413      	add	r3, r2
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	f240 427e 	movw	r2, #1150	; 0x47e
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d808      	bhi.n	8004f22 <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 8004f10:	4b70      	ldr	r3, [pc, #448]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f18:	4413      	add	r3, r2
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2020 	strb.w	r2, [r3, #32]
 8004f20:	e021      	b.n	8004f66 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 8004f22:	4b6c      	ldr	r3, [pc, #432]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	f240 427e 	movw	r2, #1150	; 0x47e
 8004f36:	4293      	cmp	r3, r2
 8004f38:	f240 810c 	bls.w	8005154 <CONTROLLER_Update_Channels_Analysis+0x340>
 8004f3c:	4b65      	ldr	r3, [pc, #404]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004f50:	f080 8100 	bcs.w	8005154 <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8004f54:	4b5f      	ldr	r3, [pc, #380]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8004f64:	e0f6      	b.n	8005154 <CONTROLLER_Update_Channels_Analysis+0x340>
 8004f66:	e0f5      	b.n	8005154 <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8004f68:	4b5a      	ldr	r3, [pc, #360]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f70:	4413      	add	r3, r2
 8004f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d107      	bne.n	8004f8a <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 8004f7a:	4b56      	ldr	r3, [pc, #344]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f82:	4413      	add	r3, r2
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8004f8a:	4b52      	ldr	r3, [pc, #328]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	4413      	add	r3, r2
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	bf8c      	ite	hi
 8004fa2:	2301      	movhi	r3, #1
 8004fa4:	2300      	movls	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8004faa:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004fb8:	461a      	mov	r2, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d022      	beq.n	8005006 <CONTROLLER_Update_Channels_Analysis+0x1f2>
 8004fc0:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d119      	bne.n	8005006 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d108      	bne.n	8004ff6 <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 8004fe4:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fec:	4413      	add	r3, r2
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ff4:	e007      	b.n	8005006 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 8004ff6:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ffe:	4413      	add	r3, r2
 8005000:	2202      	movs	r2, #2
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 8005006:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	b2c9      	uxtb	r1, r1
 8005012:	4413      	add	r3, r2
 8005014:	460a      	mov	r2, r1
 8005016:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 800501a:	e09c      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 800501c:	4b2d      	ldr	r3, [pc, #180]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005024:	4413      	add	r3, r2
 8005026:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800502a:	2b00      	cmp	r3, #0
 800502c:	d107      	bne.n	800503e <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 800502e:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005036:	4413      	add	r3, r2
 8005038:	2201      	movs	r2, #1
 800503a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 800503e:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005052:	4293      	cmp	r3, r2
 8005054:	bf8c      	ite	hi
 8005056:	2301      	movhi	r3, #1
 8005058:	2300      	movls	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 800505e:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005066:	4413      	add	r3, r2
 8005068:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800506c:	461a      	mov	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	4293      	cmp	r3, r2
 8005072:	d010      	beq.n	8005096 <CONTROLLER_Update_Channels_Analysis+0x282>
 8005074:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507c:	4413      	add	r3, r2
 800507e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005082:	2b00      	cmp	r3, #0
 8005084:	d107      	bne.n	8005096 <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508e:	4413      	add	r3, r2
 8005090:	2202      	movs	r2, #2
 8005092:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 8005096:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	b2c9      	uxtb	r1, r1
 80050a2:	4413      	add	r3, r2
 80050a4:	460a      	mov	r2, r1
 80050a6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 80050aa:	e054      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	f240 5213 	movw	r2, #1299	; 0x513
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d809      	bhi.n	80050d8 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050cc:	4413      	add	r3, r2
 80050ce:	2200      	movs	r2, #0
 80050d0:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 80050d2:	e040      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>
 80050d4:	200026bc 	.word	0x200026bc
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	f240 5214 	movw	r2, #1300	; 0x514
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d912      	bls.n	8005116 <CONTROLLER_Update_Channels_Analysis+0x302>
 80050f0:	4b21      	ldr	r3, [pc, #132]	; (8005178 <CONTROLLER_Update_Channels_Analysis+0x364>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005104:	d207      	bcs.n	8005116 <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 8005106:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	4413      	add	r3, r2
 8005110:	2201      	movs	r2, #1
 8005112:	749a      	strb	r2, [r3, #18]
					break;
 8005114:	e01f      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800512a:	d907      	bls.n	800513c <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <CONTROLLER_Update_Channels_Analysis+0x364>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005134:	4413      	add	r3, r2
 8005136:	2202      	movs	r2, #2
 8005138:	749a      	strb	r2, [r3, #18]
					break;
 800513a:	e00c      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <CONTROLLER_Update_Channels_Analysis+0x364>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005144:	4413      	add	r3, r2
 8005146:	2203      	movs	r2, #3
 8005148:	749a      	strb	r2, [r3, #18]
					break;
 800514a:	e004      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8005154:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	3301      	adds	r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	71fb      	strb	r3, [r7, #7]
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	2b09      	cmp	r3, #9
 8005168:	f77f ae5a 	ble.w	8004e20 <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 800516c:	f000 f806 	bl	800517c <flag_process>
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200026bc 	.word	0x200026bc

0800517c <flag_process>:

static void flag_process()
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8005180:	4b62      	ldr	r3, [pc, #392]	; (800530c <flag_process+0x190>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005188:	2b01      	cmp	r3, #1
 800518a:	d00d      	beq.n	80051a8 <flag_process+0x2c>
 800518c:	2b02      	cmp	r3, #2
 800518e:	d015      	beq.n	80051bc <flag_process+0x40>
 8005190:	2b00      	cmp	r3, #0
 8005192:	d11d      	bne.n	80051d0 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 8005194:	201c      	movs	r0, #28
 8005196:	f7fe fd2f 	bl	8003bf8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 800519a:	201b      	movs	r0, #27
 800519c:	f7fe fd44 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 80051a0:	201a      	movs	r0, #26
 80051a2:	f7fe fd41 	bl	8003c28 <EVENT_Clean_flag>
			break;
 80051a6:	e013      	b.n	80051d0 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 80051a8:	201c      	movs	r0, #28
 80051aa:	f7fe fd3d 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 80051ae:	201b      	movs	r0, #27
 80051b0:	f7fe fd22 	bl	8003bf8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 80051b4:	201a      	movs	r0, #26
 80051b6:	f7fe fd37 	bl	8003c28 <EVENT_Clean_flag>
			break;
 80051ba:	e009      	b.n	80051d0 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 80051bc:	201c      	movs	r0, #28
 80051be:	f7fe fd33 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 80051c2:	201b      	movs	r0, #27
 80051c4:	f7fe fd30 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 80051c8:	201a      	movs	r0, #26
 80051ca:	f7fe fd15 	bl	8003bf8 <EVENT_Set_flag>
			break;
 80051ce:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 80051d0:	4b4e      	ldr	r3, [pc, #312]	; (800530c <flag_process+0x190>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	7d9b      	ldrb	r3, [r3, #22]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 80051da:	200e      	movs	r0, #14
 80051dc:	f7fe fd0c 	bl	8003bf8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 80051e0:	200f      	movs	r0, #15
 80051e2:	f7fe fd21 	bl	8003c28 <EVENT_Clean_flag>
 80051e6:	e005      	b.n	80051f4 <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 80051e8:	200e      	movs	r0, #14
 80051ea:	f7fe fd1d 	bl	8003c28 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 80051ee:	200f      	movs	r0, #15
 80051f0:	f7fe fd02 	bl	8003bf8 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 80051f4:	4b45      	ldr	r3, [pc, #276]	; (800530c <flag_process+0x190>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	7ddb      	ldrb	r3, [r3, #23]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d828      	bhi.n	8005250 <flag_process+0xd4>
 80051fe:	a201      	add	r2, pc, #4	; (adr r2, 8005204 <flag_process+0x88>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005215 	.word	0x08005215
 8005208:	08005229 	.word	0x08005229
 800520c:	0800523d 	.word	0x0800523d
 8005210:	08005251 	.word	0x08005251
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 8005214:	2010      	movs	r0, #16
 8005216:	f7fe fcef 	bl	8003bf8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 800521a:	2011      	movs	r0, #17
 800521c:	f7fe fd04 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8005220:	2012      	movs	r0, #18
 8005222:	f7fe fd01 	bl	8003c28 <EVENT_Clean_flag>
			break;
 8005226:	e013      	b.n	8005250 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8005228:	2010      	movs	r0, #16
 800522a:	f7fe fcfd 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 800522e:	2011      	movs	r0, #17
 8005230:	f7fe fce2 	bl	8003bf8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8005234:	2012      	movs	r0, #18
 8005236:	f7fe fcf7 	bl	8003c28 <EVENT_Clean_flag>
			break;
 800523a:	e009      	b.n	8005250 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 800523c:	2010      	movs	r0, #16
 800523e:	f7fe fcf3 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8005242:	2011      	movs	r0, #17
 8005244:	f7fe fcf0 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8005248:	2012      	movs	r0, #18
 800524a:	f7fe fcd5 	bl	8003bf8 <EVENT_Set_flag>
			break;
 800524e:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8005250:	4b2e      	ldr	r3, [pc, #184]	; (800530c <flag_process+0x190>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	7e1b      	ldrb	r3, [r3, #24]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d828      	bhi.n	80052ac <flag_process+0x130>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <flag_process+0xe4>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005271 	.word	0x08005271
 8005264:	08005285 	.word	0x08005285
 8005268:	08005299 	.word	0x08005299
 800526c:	080052ad 	.word	0x080052ad
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 8005270:	2013      	movs	r0, #19
 8005272:	f7fe fcc1 	bl	8003bf8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8005276:	2014      	movs	r0, #20
 8005278:	f7fe fcd6 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 800527c:	2015      	movs	r0, #21
 800527e:	f7fe fcd3 	bl	8003c28 <EVENT_Clean_flag>
			break;
 8005282:	e013      	b.n	80052ac <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8005284:	2013      	movs	r0, #19
 8005286:	f7fe fccf 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 800528a:	2014      	movs	r0, #20
 800528c:	f7fe fcb4 	bl	8003bf8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8005290:	2015      	movs	r0, #21
 8005292:	f7fe fcc9 	bl	8003c28 <EVENT_Clean_flag>
			break;
 8005296:	e009      	b.n	80052ac <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8005298:	2013      	movs	r0, #19
 800529a:	f7fe fcc5 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 800529e:	2014      	movs	r0, #20
 80052a0:	f7fe fcc2 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 80052a4:	2015      	movs	r0, #21
 80052a6:	f7fe fca7 	bl	8003bf8 <EVENT_Set_flag>
			break;
 80052aa:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <flag_process+0x190>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	7e5b      	ldrb	r3, [r3, #25]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 80052b6:	2016      	movs	r0, #22
 80052b8:	f7fe fc9e 	bl	8003bf8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 80052bc:	2017      	movs	r0, #23
 80052be:	f7fe fcb3 	bl	8003c28 <EVENT_Clean_flag>
 80052c2:	e005      	b.n	80052d0 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 80052c4:	2016      	movs	r0, #22
 80052c6:	f7fe fcaf 	bl	8003c28 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 80052ca:	2017      	movs	r0, #23
 80052cc:	f7fe fc94 	bl	8003bf8 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <flag_process+0x190>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d107      	bne.n	80052ec <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 80052dc:	2018      	movs	r0, #24
 80052de:	f7fe fc8b 	bl	8003bf8 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <flag_process+0x190>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 80052ec:	4b07      	ldr	r3, [pc, #28]	; (800530c <flag_process+0x190>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d103      	bne.n	8005300 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 80052f8:	2019      	movs	r0, #25
 80052fa:	f7fe fc7d 	bl	8003bf8 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 80052fe:	e002      	b.n	8005306 <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8005300:	2019      	movs	r0, #25
 8005302:	f7fe fc91 	bl	8003c28 <EVENT_Clean_flag>
}
 8005306:	bf00      	nop
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	200026bc 	.word	0x200026bc

08005310 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 8005314:	f00b f8be 	bl	8010494 <IBUS_Channel_Update>
 8005318:	4603      	mov	r3, r0
}
 800531a:	4618      	mov	r0, r3
 800531c:	bd80      	pop	{r7, pc}

0800531e <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 800531e:	b580      	push	{r7, lr}
 8005320:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 8005322:	200d      	movs	r0, #13
 8005324:	f7fe fc68 	bl	8003bf8 <EVENT_Set_flag>
}
 8005328:	bf00      	nop
 800532a:	bd80      	pop	{r7, pc}

0800532c <REGULATION_ORIENTATION_Init>:

float pid_angle_settings_roll[PID_NB_SETTINGS] = {6.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};
float pid_angle_settings_pitch[PID_NB_SETTINGS] = {7.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8005338:	4a1f      	ldr	r2, [pc, #124]	; (80053b8 <REGULATION_ORIENTATION_Init+0x8c>)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 800533e:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2200      	movs	r2, #0
 800534a:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8


	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f103 0008 	add.w	r0, r3, #8
 800535e:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <REGULATION_ORIENTATION_Init+0x94>)
 8005360:	2201      	movs	r2, #1
 8005362:	4918      	ldr	r1, [pc, #96]	; (80053c4 <REGULATION_ORIENTATION_Init+0x98>)
 8005364:	f00b fb58 	bl	8010a18 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 8005368:	4b14      	ldr	r3, [pc, #80]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8005370:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <REGULATION_ORIENTATION_Init+0x94>)
 8005372:	2201      	movs	r2, #1
 8005374:	4914      	ldr	r1, [pc, #80]	; (80053c8 <REGULATION_ORIENTATION_Init+0x9c>)
 8005376:	f00b fb4f 	bl	8010a18 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 800537a:	4b10      	ldr	r3, [pc, #64]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <REGULATION_ORIENTATION_Init+0xa0>)
 8005384:	2200      	movs	r2, #0
 8005386:	4912      	ldr	r1, [pc, #72]	; (80053d0 <REGULATION_ORIENTATION_Init+0xa4>)
 8005388:	f00b fb46 	bl	8010a18 <PID_init>


	//Init PIDs angular position
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], pid_angle_settings_roll, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005394:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <REGULATION_ORIENTATION_Init+0xa8>)
 8005396:	2200      	movs	r2, #0
 8005398:	490f      	ldr	r1, [pc, #60]	; (80053d8 <REGULATION_ORIENTATION_Init+0xac>)
 800539a:	f00b fb3d 	bl	8010a18 <PID_init>
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], pid_angle_settings_pitch, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 800539e:	4b07      	ldr	r3, [pc, #28]	; (80053bc <REGULATION_ORIENTATION_Init+0x90>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f503 709c 	add.w	r0, r3, #312	; 0x138
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <REGULATION_ORIENTATION_Init+0xa8>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	490c      	ldr	r1, [pc, #48]	; (80053dc <REGULATION_ORIENTATION_Init+0xb0>)
 80053ac:	f00b fb34 	bl	8010a18 <PID_init>


}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	200026c4 	.word	0x200026c4
 80053bc:	200026c0 	.word	0x200026c0
 80053c0:	20001c7c 	.word	0x20001c7c
 80053c4:	20001c94 	.word	0x20001c94
 80053c8:	20001ca8 	.word	0x20001ca8
 80053cc:	20001c88 	.word	0x20001c88
 80053d0:	20001cbc 	.word	0x20001cbc
 80053d4:	20001cd0 	.word	0x20001cd0
 80053d8:	20001cdc 	.word	0x20001cdc
 80053dc:	20001cf0 	.word	0x20001cf0

080053e0 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	79fa      	ldrb	r2, [r7, #7]
 80053f0:	711a      	strb	r2, [r3, #4]
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	200026c0 	.word	0x200026c0

08005404 <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 8005408:	4b90      	ldr	r3, [pc, #576]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	791b      	ldrb	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d019      	beq.n	8005446 <REGULATION_ORIENTATION_Process+0x42>
 8005412:	2b02      	cmp	r3, #2
 8005414:	d07c      	beq.n	8005510 <REGULATION_ORIENTATION_Process+0x10c>
 8005416:	2b00      	cmp	r3, #0
 8005418:	d000      	beq.n	800541c <REGULATION_ORIENTATION_Process+0x18>
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
			break;
	}

}
 800541a:	e114      	b.n	8005646 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 800541c:	4b8b      	ldr	r3, [pc, #556]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005424:	2200      	movs	r2, #0
 8005426:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 8005428:	4b88      	ldr	r3, [pc, #544]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005430:	3302      	adds	r3, #2
 8005432:	2200      	movs	r2, #0
 8005434:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 8005436:	4b85      	ldr	r3, [pc, #532]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800543e:	3304      	adds	r3, #4
 8005440:	2200      	movs	r2, #0
 8005442:	801a      	strh	r2, [r3, #0]
			break;
 8005444:	e0ff      	b.n	8005646 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8005446:	4b81      	ldr	r3, [pc, #516]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f103 0208 	add.w	r2, r3, #8
 800544e:	4b7f      	ldr	r3, [pc, #508]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8005456:	4b7e      	ldr	r3, [pc, #504]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	ed93 7a00 	vldr	s14, [r3]
 8005460:	eef0 0a47 	vmov.f32	s1, s14
 8005464:	eeb0 0a67 	vmov.f32	s0, s15
 8005468:	4610      	mov	r0, r2
 800546a:	f00b fa39 	bl	80108e0 <PID_compute>
 800546e:	eef0 7a40 	vmov.f32	s15, s0
 8005472:	4b76      	ldr	r3, [pc, #472]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800547a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800547e:	ee17 2a90 	vmov	r2, s15
 8005482:	b212      	sxth	r2, r2
 8005484:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8005486:	4b71      	ldr	r3, [pc, #452]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800548e:	4b6f      	ldr	r3, [pc, #444]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8005496:	4b6e      	ldr	r3, [pc, #440]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	3304      	adds	r3, #4
 800549e:	ed93 7a00 	vldr	s14, [r3]
 80054a2:	eef0 0a47 	vmov.f32	s1, s14
 80054a6:	eeb0 0a67 	vmov.f32	s0, s15
 80054aa:	4610      	mov	r0, r2
 80054ac:	f00b fa18 	bl	80108e0 <PID_compute>
 80054b0:	eef0 7a40 	vmov.f32	s15, s0
 80054b4:	4b65      	ldr	r3, [pc, #404]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80054bc:	3302      	adds	r3, #2
 80054be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c2:	ee17 2a90 	vmov	r2, s15
 80054c6:	b212      	sxth	r2, r2
 80054c8:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 80054ca:	4b60      	ldr	r3, [pc, #384]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80054d2:	4b5e      	ldr	r3, [pc, #376]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80054da:	4b5d      	ldr	r3, [pc, #372]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	3308      	adds	r3, #8
 80054e2:	ed93 7a00 	vldr	s14, [r3]
 80054e6:	eef0 0a47 	vmov.f32	s1, s14
 80054ea:	eeb0 0a67 	vmov.f32	s0, s15
 80054ee:	4610      	mov	r0, r2
 80054f0:	f00b f9f6 	bl	80108e0 <PID_compute>
 80054f4:	eef0 7a40 	vmov.f32	s15, s0
 80054f8:	4b54      	ldr	r3, [pc, #336]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005500:	3304      	adds	r3, #4
 8005502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005506:	ee17 2a90 	vmov	r2, s15
 800550a:	b212      	sxth	r2, r2
 800550c:	801a      	strh	r2, [r3, #0]
			break;
 800550e:	e09a      	b.n	8005646 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->consigne_angular_speed[ORIENTATION_ROLL] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], regu_orientation->consigne_angular_pos[ORIENTATION_ROLL], orientation->angular_position[ORIENTATION_ROLL]);
 8005510:	4b4e      	ldr	r3, [pc, #312]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8005518:	4b4c      	ldr	r3, [pc, #304]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 8005520:	4b4b      	ldr	r3, [pc, #300]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	ed93 7a00 	vldr	s14, [r3]
 8005528:	eef0 0a47 	vmov.f32	s1, s14
 800552c:	eeb0 0a67 	vmov.f32	s0, s15
 8005530:	4610      	mov	r0, r2
 8005532:	f00b f9d5 	bl	80108e0 <PID_compute>
 8005536:	eef0 7a40 	vmov.f32	s15, s0
 800553a:	4b44      	ldr	r3, [pc, #272]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	eef1 7a67 	vneg.f32	s15, s15
 8005542:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			regu_orientation->consigne_angular_speed[ORIENTATION_PITCH] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], regu_orientation->consigne_angular_pos[ORIENTATION_PITCH], orientation->angular_position[ORIENTATION_PITCH]);
 8005546:	4b41      	ldr	r3, [pc, #260]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800554e:	4b3f      	ldr	r3, [pc, #252]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8005556:	4b3e      	ldr	r3, [pc, #248]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	ed93 7a01 	vldr	s14, [r3, #4]
 800555e:	eef0 0a47 	vmov.f32	s1, s14
 8005562:	eeb0 0a67 	vmov.f32	s0, s15
 8005566:	4610      	mov	r0, r2
 8005568:	f00b f9ba 	bl	80108e0 <PID_compute>
 800556c:	eef0 7a40 	vmov.f32	s15, s0
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	eef1 7a67 	vneg.f32	s15, s15
 8005578:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 800557c:	4b33      	ldr	r3, [pc, #204]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f103 0208 	add.w	r2, r3, #8
 8005584:	4b31      	ldr	r3, [pc, #196]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800558c:	4b30      	ldr	r3, [pc, #192]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	ed93 7a00 	vldr	s14, [r3]
 8005596:	eef0 0a47 	vmov.f32	s1, s14
 800559a:	eeb0 0a67 	vmov.f32	s0, s15
 800559e:	4610      	mov	r0, r2
 80055a0:	f00b f99e 	bl	80108e0 <PID_compute>
 80055a4:	eef0 7a40 	vmov.f32	s15, s0
 80055a8:	4b28      	ldr	r3, [pc, #160]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80055b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055b4:	ee17 2a90 	vmov	r2, s15
 80055b8:	b212      	sxth	r2, r2
 80055ba:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 80055bc:	4b23      	ldr	r3, [pc, #140]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80055c4:	4b21      	ldr	r3, [pc, #132]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 80055cc:	4b20      	ldr	r3, [pc, #128]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	3304      	adds	r3, #4
 80055d4:	ed93 7a00 	vldr	s14, [r3]
 80055d8:	eef0 0a47 	vmov.f32	s1, s14
 80055dc:	eeb0 0a67 	vmov.f32	s0, s15
 80055e0:	4610      	mov	r0, r2
 80055e2:	f00b f97d 	bl	80108e0 <PID_compute>
 80055e6:	eef0 7a40 	vmov.f32	s15, s0
 80055ea:	4b18      	ldr	r3, [pc, #96]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80055f2:	3302      	adds	r3, #2
 80055f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055f8:	ee17 2a90 	vmov	r2, s15
 80055fc:	b212      	sxth	r2, r2
 80055fe:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 8005600:	4b12      	ldr	r3, [pc, #72]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8005608:	4b10      	ldr	r3, [pc, #64]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 8005610:	4b0f      	ldr	r3, [pc, #60]	; (8005650 <REGULATION_ORIENTATION_Process+0x24c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	3308      	adds	r3, #8
 8005618:	ed93 7a00 	vldr	s14, [r3]
 800561c:	eef0 0a47 	vmov.f32	s1, s14
 8005620:	eeb0 0a67 	vmov.f32	s0, s15
 8005624:	4610      	mov	r0, r2
 8005626:	f00b f95b 	bl	80108e0 <PID_compute>
 800562a:	eef0 7a40 	vmov.f32	s15, s0
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <REGULATION_ORIENTATION_Process+0x248>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005636:	3304      	adds	r3, #4
 8005638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563c:	ee17 2a90 	vmov	r2, s15
 8005640:	b212      	sxth	r2, r2
 8005642:	801a      	strh	r2, [r3, #0]
			break;
 8005644:	bf00      	nop
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200026c0 	.word	0x200026c0
 8005650:	200026c4 	.word	0x200026c4

08005654 <REGULATION_POSITION_Init>:
float filter_pid_velocity_z[3] = {0.04f, 1.6f, -0.64f};

float pid_position_z_settings[PID_NB_SETTINGS] = {0.0f, 0.0f, 0.0f, REGU_POSITION_FREQUENCY, 30};
float filter_pid_position_z[3] = {0.04f, 1.6f, -0.64f};

void REGULATION_POSITION_Init(regu_position_t * regu_position_, position_t * position, int16_t * outputs){
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 8005660:	4a13      	ldr	r2, [pc, #76]	; (80056b0 <REGULATION_POSITION_Init+0x5c>)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 8005666:	4b12      	ldr	r3, [pc, #72]	; (80056b0 <REGULATION_POSITION_Init+0x5c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	regu_position->outputs = outputs ;
 8005670:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <REGULATION_POSITION_Init+0x5c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	regu_position->position = position ;
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <REGULATION_POSITION_Init+0x5c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	601a      	str	r2, [r3, #0]

	//Init pid velocity
	PID_init(&regu_position->pid_velocity[POSITION_AXE_Z], pid_velocity_z_settings, FILTER_NO_FILTERING, filter_pid_velocity_z);
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <REGULATION_POSITION_Init+0x5c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 800568a:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <REGULATION_POSITION_Init+0x60>)
 800568c:	2202      	movs	r2, #2
 800568e:	490a      	ldr	r1, [pc, #40]	; (80056b8 <REGULATION_POSITION_Init+0x64>)
 8005690:	f00b f9c2 	bl	8010a18 <PID_init>

	//Init pid position
	PID_init(&regu_position->pid_position[POSITION_AXE_Z], pid_position_z_settings, FILTER_SECOND_ORDER, filter_pid_position_z);
 8005694:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <REGULATION_POSITION_Init+0x5c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <REGULATION_POSITION_Init+0x68>)
 800569e:	2201      	movs	r2, #1
 80056a0:	4907      	ldr	r1, [pc, #28]	; (80056c0 <REGULATION_POSITION_Init+0x6c>)
 80056a2:	f00b f9b9 	bl	8010a18 <PID_init>


}
 80056a6:	bf00      	nop
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200026c8 	.word	0x200026c8
 80056b4:	20001d18 	.word	0x20001d18
 80056b8:	20001d04 	.word	0x20001d04
 80056bc:	20001d38 	.word	0x20001d38
 80056c0:	20001d24 	.word	0x20001d24

080056c4 <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	79fa      	ldrb	r2, [r7, #7]
 80056d4:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	200026c8 	.word	0x200026c8

080056e8 <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 80056e8:	b580      	push	{r7, lr}
 80056ea:	ed2d 8b02 	vpush	{d8}
 80056ee:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 80056f0:	4b29      	ldr	r3, [pc, #164]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d00c      	beq.n	8005716 <REGULATION_POSITION_Process+0x2e>
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d015      	beq.n	800572c <REGULATION_POSITION_Process+0x44>
 8005700:	2b00      	cmp	r3, #0
 8005702:	d000      	beq.n	8005706 <REGULATION_POSITION_Process+0x1e>
		case REGULATION_POSITION_MODE_STABILIZED:
			regu_position->consigne_velocity[POSITION_AXE_Z] = 0; //- PID_compute(&regu_position->pid_position[POSITION_AXE_Z], regu_position->consigne_position[POSITION_AXE_Z],  regu_position->position->position[POSITION_AXE_Z]);
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne - PID_compute(&regu_position->pid_velocity[POSITION_AXE_Z], regu_position->consigne_velocity[POSITION_AXE_Z] , regu_position->position->velocity[POSITION_AXE_Z]);
			break;
	}
}
 8005704:	e043      	b.n	800578e <REGULATION_POSITION_Process+0xa6>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800570e:	3306      	adds	r3, #6
 8005710:	2200      	movs	r2, #0
 8005712:	801a      	strh	r2, [r3, #0]
			break;
 8005714:	e03b      	b.n	800578e <REGULATION_POSITION_Process+0xa6>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 8005716:	4b20      	ldr	r3, [pc, #128]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005722:	3306      	adds	r3, #6
 8005724:	f9b2 21e4 	ldrsh.w	r2, [r2, #484]	; 0x1e4
 8005728:	801a      	strh	r2, [r3, #0]
			break;
 800572a:	e030      	b.n	800578e <REGULATION_POSITION_Process+0xa6>
			regu_position->consigne_velocity[POSITION_AXE_Z] = 0; //- PID_compute(&regu_position->pid_position[POSITION_AXE_Z], regu_position->consigne_position[POSITION_AXE_Z],  regu_position->position->position[POSITION_AXE_Z]);
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	619a      	str	r2, [r3, #24]
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne - PID_compute(&regu_position->pid_velocity[POSITION_AXE_Z], regu_position->consigne_velocity[POSITION_AXE_Z] , regu_position->position->velocity[POSITION_AXE_Z]);
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 800573e:	ee07 3a90 	vmov	s15, r3
 8005742:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005746:	4b14      	ldr	r3, [pc, #80]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800574e:	4b12      	ldr	r3, [pc, #72]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	edd3 7a06 	vldr	s15, [r3, #24]
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005760:	eef0 0a47 	vmov.f32	s1, s14
 8005764:	eeb0 0a67 	vmov.f32	s0, s15
 8005768:	4610      	mov	r0, r2
 800576a:	f00b f8b9 	bl	80108e0 <PID_compute>
 800576e:	eef0 7a40 	vmov.f32	s15, s0
 8005772:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005776:	4b08      	ldr	r3, [pc, #32]	; (8005798 <REGULATION_POSITION_Process+0xb0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800577e:	3306      	adds	r3, #6
 8005780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005784:	ee17 2a90 	vmov	r2, s15
 8005788:	b212      	sxth	r2, r2
 800578a:	801a      	strh	r2, [r3, #0]
			break;
 800578c:	bf00      	nop
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	ecbd 8b02 	vpop	{d8}
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200026c8 	.word	0x200026c8

0800579c <ACC_init>:

float filter_config [3] = {0.04f, 1.6f, -0.64f};
//float filter_config [3] = {0.002267573696f, 1.904761905f, -0.9070294785f};
//float filter_config [3] = {0.1f, 0.9f, 0.0f};

void ACC_init(acc_t * acc, mpu_t * mpu){
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_SECOND_ORDER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	333c      	adds	r3, #60	; 0x3c
 80057aa:	2201      	movs	r2, #1
 80057ac:	491e      	ldr	r1, [pc, #120]	; (8005828 <ACC_init+0x8c>)
 80057ae:	4618      	mov	r0, r3
 80057b0:	f00a fd6e 	bl	8010290 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_SECOND_ORDER);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3320      	adds	r3, #32
 80057b8:	2201      	movs	r2, #1
 80057ba:	491b      	ldr	r1, [pc, #108]	; (8005828 <ACC_init+0x8c>)
 80057bc:	4618      	mov	r0, r3
 80057be:	f00a fd67 	bl	8010290 <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_SECOND_ORDER);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3358      	adds	r3, #88	; 0x58
 80057c6:	2201      	movs	r2, #1
 80057c8:	4917      	ldr	r1, [pc, #92]	; (8005828 <ACC_init+0x8c>)
 80057ca:	4618      	mov	r0, r3
 80057cc:	f00a fd60 	bl	8010290 <FILTER_init>


	acc->mpu = mpu ;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	605a      	str	r2, [r3, #4]

	acc->offsets[0] = 0.0203813482 ;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a11      	ldr	r2, [pc, #68]	; (800582c <ACC_init+0x90>)
 80057e6:	615a      	str	r2, [r3, #20]
	acc->offsets[1] = -0.0299842935 ;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a11      	ldr	r2, [pc, #68]	; (8005830 <ACC_init+0x94>)
 80057ec:	619a      	str	r2, [r3, #24]
	acc->offsets[2] = -0.16 ;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a10      	ldr	r2, [pc, #64]	; (8005834 <ACC_init+0x98>)
 80057f2:	61da      	str	r2, [r3, #28]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <ACC_init+0x9c>)
 80057fa:	2101      	movs	r1, #1
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fe23 	bl	8006448 <MPU_init_acc>
 8005802:	4603      	mov	r3, r0
 8005804:	2b01      	cmp	r3, #1
 8005806:	d008      	beq.n	800581a <ACC_init+0x7e>
 8005808:	2b02      	cmp	r3, #2
 800580a:	d008      	beq.n	800581e <ACC_init+0x82>
 800580c:	2b00      	cmp	r3, #0
 800580e:	d000      	beq.n	8005812 <ACC_init+0x76>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 8005810:	e006      	b.n	8005820 <ACC_init+0x84>
			EVENT_Set_flag(FLAG_ACC_OK);
 8005812:	2004      	movs	r0, #4
 8005814:	f7fe f9f0 	bl	8003bf8 <EVENT_Set_flag>
			break;
 8005818:	e002      	b.n	8005820 <ACC_init+0x84>
			break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <ACC_init+0x84>
			break;
 800581e:	bf00      	nop
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20001d44 	.word	0x20001d44
 800582c:	3ca6f6c9 	.word	0x3ca6f6c9
 8005830:	bcf5a19f 	.word	0xbcf5a19f
 8005834:	be23d70a 	.word	0xbe23d70a
 8005838:	08005a73 	.word	0x08005a73

0800583c <ACC_update>:

void ACC_update(acc_t * acc){
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 feab 	bl	80065a4 <MPU_update_acc>
 800584e:	4603      	mov	r3, r0
 8005850:	2b01      	cmp	r3, #1
 8005852:	d00c      	beq.n	800586e <ACC_update+0x32>
 8005854:	2b02      	cmp	r3, #2
 8005856:	d006      	beq.n	8005866 <ACC_update+0x2a>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d000      	beq.n	800585e <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 800585c:	e008      	b.n	8005870 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 800585e:	2006      	movs	r0, #6
 8005860:	f7fe f9ca 	bl	8003bf8 <EVENT_Set_flag>
			break;
 8005864:	e004      	b.n	8005870 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8005866:	2004      	movs	r0, #4
 8005868:	f7fe f9de 	bl	8003c28 <EVENT_Clean_flag>
			break;
 800586c:	e000      	b.n	8005870 <ACC_update+0x34>
			break;
 800586e:	bf00      	nop
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <ACC_calibrate>:

bool_e ACC_calibrate(acc_t * acc, uint16_t iteration){
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <ACC_calibrate+0x11c>)
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10b      	bne.n	80058a4 <ACC_calibrate+0x2c>
		sum[0] = 0 ;
 800588c:	4b42      	ldr	r3, [pc, #264]	; (8005998 <ACC_calibrate+0x120>)
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 8005894:	4b40      	ldr	r3, [pc, #256]	; (8005998 <ACC_calibrate+0x120>)
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 800589c:	4b3e      	ldr	r3, [pc, #248]	; (8005998 <ACC_calibrate+0x120>)
 800589e:	f04f 0200 	mov.w	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]
	}

	sum[0] += acc->raw[0] + acc->offsets[0];
 80058a4:	4b3c      	ldr	r3, [pc, #240]	; (8005998 <ACC_calibrate+0x120>)
 80058a6:	ed93 7a00 	vldr	s14, [r3]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	edd3 6a00 	vldr	s13, [r3]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80058b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058c0:	4b35      	ldr	r3, [pc, #212]	; (8005998 <ACC_calibrate+0x120>)
 80058c2:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += acc->raw[1] + acc->offsets[1];
 80058c6:	4b34      	ldr	r3, [pc, #208]	; (8005998 <ACC_calibrate+0x120>)
 80058c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	edd3 6a00 	vldr	s13, [r3]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80058dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e4:	4b2c      	ldr	r3, [pc, #176]	; (8005998 <ACC_calibrate+0x120>)
 80058e6:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += acc->raw[2] + acc->offsets[2] - 1;	//Pour le YAW on doit avoir 1g quand le drone est à l'horizontale
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <ACC_calibrate+0x120>)
 80058ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	3308      	adds	r3, #8
 80058f6:	edd3 6a00 	vldr	s13, [r3]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8005900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005904:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005908:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800590c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005910:	4b21      	ldr	r3, [pc, #132]	; (8005998 <ACC_calibrate+0x120>)
 8005912:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <ACC_calibrate+0x11c>)
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <ACC_calibrate+0x11c>)
 8005920:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 8005922:	4b1c      	ldr	r3, [pc, #112]	; (8005994 <ACC_calibrate+0x11c>)
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	887a      	ldrh	r2, [r7, #2]
 8005928:	429a      	cmp	r2, r3
 800592a:	d12b      	bne.n	8005984 <ACC_calibrate+0x10c>
		acc->offsets[0] = sum[0] / (float)iteration;
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <ACC_calibrate+0x120>)
 800592e:	edd3 6a00 	vldr	s13, [r3]
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800593c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	edc3 7a05 	vstr	s15, [r3, #20]
		acc->offsets[1] = sum[1] / (float)iteration;
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <ACC_calibrate+0x120>)
 8005948:	edd3 6a01 	vldr	s13, [r3, #4]
 800594c:	887b      	ldrh	r3, [r7, #2]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	edc3 7a06 	vstr	s15, [r3, #24]
		acc->offsets[2] = sum[2] / (float)iteration;
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <ACC_calibrate+0x120>)
 8005962:	edd3 6a02 	vldr	s13, [r3, #8]
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <ACC_calibrate+0x11c>)
 800597c:	2200      	movs	r2, #0
 800597e:	801a      	strh	r2, [r3, #0]
		return TRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	e000      	b.n	8005986 <ACC_calibrate+0x10e>
	}

	return FALSE;
 8005984:	2300      	movs	r3, #0

}
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	200026cc 	.word	0x200026cc
 8005998:	200026d0 	.word	0x200026d0

0800599c <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	//Offset correction first
	acc->raw[0] -= acc->offsets[0];
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	ed93 7a00 	vldr	s14, [r3]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ba:	edc3 7a00 	vstr	s15, [r3]
	acc->raw[1] -= acc->offsets[1];
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	ed93 7a00 	vldr	s14, [r3]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059d8:	edc3 7a00 	vstr	s15, [r3]
	acc->raw[2] -= acc->offsets[2];
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	3308      	adds	r3, #8
 80059e2:	ed93 7a00 	vldr	s14, [r3]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	edd3 7a07 	vldr	s15, [r3, #28]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	3308      	adds	r3, #8
 80059f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059f6:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	edd3 7a00 	vldr	s15, [r3]
 8005a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a0e:	4610      	mov	r0, r2
 8005a10:	f00a fc61 	bl	80102d6 <FILTER_process>
 8005a14:	eef0 7a40 	vmov.f32	s15, s0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f103 0220 	add.w	r2, r3, #32
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	edd3 7a00 	vldr	s15, [r3]
 8005a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a30:	4610      	mov	r0, r2
 8005a32:	f00a fc50 	bl	80102d6 <FILTER_process>
 8005a36:	eef0 7a40 	vmov.f32	s15, s0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	3308      	adds	r3, #8
 8005a4c:	edd3 7a00 	vldr	s15, [r3]
 8005a50:	eeb0 0a67 	vmov.f32	s0, s15
 8005a54:	4610      	mov	r0, r2
 8005a56:	f00a fc3e 	bl	80102d6 <FILTER_process>
 8005a5a:	eef0 7a40 	vmov.f32	s15, s0
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that new data are available
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8005a64:	2007      	movs	r0, #7
 8005a66:	f7fe f8c7 	bl	8003bf8 <EVENT_Set_flag>
}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <acc_data_callback>:

static void acc_data_callback(void){
 8005a72:	b580      	push	{r7, lr}
 8005a74:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8005a76:	2006      	movs	r0, #6
 8005a78:	f7fe f8be 	bl	8003bf8 <EVENT_Set_flag>
}
 8005a7c:	bf00      	nop
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <ms5611_raw_temp_rdy>:
float filter_altitude_config[3] = {0.3f, 0.7f, 0.0f};

static void ms5611_raw_temp_rdy();
static void ms5611_raw_pressure_rdy();

static void ms5611_raw_temp_rdy(){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_TEMP_RAW_RDY);
 8005a84:	2009      	movs	r0, #9
 8005a86:	f7fe f8b7 	bl	8003bf8 <EVENT_Set_flag>
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <ms5611_raw_pressure_rdy>:
static void ms5611_raw_pressure_rdy(){
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 8005a92:	200a      	movs	r0, #10
 8005a94:	f7fe f8b0 	bl	8003bf8 <EVENT_Set_flag>
}
 8005a98:	bf00      	nop
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <BARO_init>:

void BARO_init(baro_t * baro, ms5611_t * ms5611, I2C_HandleTypeDef * hi2c){
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
	baro->ms5611 = ms5611 ;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	601a      	str	r2, [r3, #0]
	baro->pressure_raw = &ms5611->pressure;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f103 021c 	add.w	r2, r3, #28
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	609a      	str	r2, [r3, #8]

	FILTER_init(&baro->filter, filter_baro_config, FILTER_NO_FILTERING);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	330c      	adds	r3, #12
 8005abc:	2202      	movs	r2, #2
 8005abe:	4912      	ldr	r1, [pc, #72]	; (8005b08 <BARO_init+0x6c>)
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f00a fbe5 	bl	8010290 <FILTER_init>
	FILTER_init(&baro->filter_altitude, filter_altitude_config, FILTER_NO_FILTERING);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3338      	adds	r3, #56	; 0x38
 8005aca:	2202      	movs	r2, #2
 8005acc:	490f      	ldr	r1, [pc, #60]	; (8005b0c <BARO_init+0x70>)
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f00a fbde 	bl	8010290 <FILTER_init>

	switch(MS5611_init(baro->ms5611, hi2c, ms5611_raw_temp_rdy, ms5611_raw_pressure_rdy))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <BARO_init+0x74>)
 8005ada:	4a0e      	ldr	r2, [pc, #56]	; (8005b14 <BARO_init+0x78>)
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	f000 fe43 	bl	8006768 <MS5611_init>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d008      	beq.n	8005afa <BARO_init+0x5e>
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d008      	beq.n	8005afe <BARO_init+0x62>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d000      	beq.n	8005af2 <BARO_init+0x56>
		case SENSOR_REQUEST_FAIL :
			break;
		case SENSOR_REQUEST_BUSY :
			break;
	}
}
 8005af0:	e006      	b.n	8005b00 <BARO_init+0x64>
			EVENT_Set_flag(FLAG_BARO_OK);
 8005af2:	2008      	movs	r0, #8
 8005af4:	f7fe f880 	bl	8003bf8 <EVENT_Set_flag>
			break;
 8005af8:	e002      	b.n	8005b00 <BARO_init+0x64>
			break;
 8005afa:	bf00      	nop
 8005afc:	e000      	b.n	8005b00 <BARO_init+0x64>
			break;
 8005afe:	bf00      	nop
}
 8005b00:	bf00      	nop
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20001d50 	.word	0x20001d50
 8005b0c:	20001d5c 	.word	0x20001d5c
 8005b10:	08005a8f 	.word	0x08005a8f
 8005b14:	08005a81 	.word	0x08005a81

08005b18 <BARO_Main>:

uint32_t BARO_Main(baro_t * baro){
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	uint32_t to_return = 9600 ;
 8005b20:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005b24:	60fb      	str	r3, [r7, #12]
	switch(baro->state){
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d866      	bhi.n	8005bfe <BARO_Main+0xe6>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <BARO_Main+0x20>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b4d 	.word	0x08005b4d
 8005b3c:	08005b57 	.word	0x08005b57
 8005b40:	08005b6b 	.word	0x08005b6b
 8005b44:	08005b85 	.word	0x08005b85
 8005b48:	08005b99 	.word	0x08005b99
		case BARO_STATE_IDDLE:
			baro->state = BARO_STATE_ASK_TEMP ;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			break;
 8005b54:	e053      	b.n	8005bfe <BARO_Main+0xe6>
		case BARO_STATE_ASK_TEMP :
			MS5611_request_temp(baro->ms5611);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fe70 	bl	8006840 <MS5611_request_temp>
			baro->state = BARO_STATE_READ_TEMP ;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			break;
 8005b68:	e049      	b.n	8005bfe <BARO_Main+0xe6>
		case BARO_STATE_READ_TEMP :
			MS5611_read_temp(baro->ms5611);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 febe 	bl	80068f0 <MS5611_read_temp>
			baro->state = BARO_STATE_ASK_PRESSURE ;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2203      	movs	r2, #3
 8005b78:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			to_return = 400 ;
 8005b7c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005b80:	60fb      	str	r3, [r7, #12]
			break;
 8005b82:	e03c      	b.n	8005bfe <BARO_Main+0xe6>
		case BARO_STATE_ASK_PRESSURE :
			MS5611_request_pressure(baro->ms5611);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 fe85 	bl	8006898 <MS5611_request_pressure>
			baro->state = BARO_STATE_READ_PRESSURE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2204      	movs	r2, #4
 8005b92:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			break;
 8005b96:	e032      	b.n	8005bfe <BARO_Main+0xe6>
		case BARO_STATE_READ_PRESSURE :
			MS5611_read_pressure(baro->ms5611);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fed8 	bl	8006952 <MS5611_read_pressure>

			baro->counter_pressure_mesure ++ ;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005ba8:	3301      	adds	r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			baro->counter_pressure_mesure = baro->counter_pressure_mesure % RATIO_PRESSURE_TEMP ;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <BARO_Main+0xf0>)
 8005bba:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbe:	1ad1      	subs	r1, r2, r3
 8005bc0:	0849      	lsrs	r1, r1, #1
 8005bc2:	440b      	add	r3, r1
 8005bc4:	0919      	lsrs	r1, r3, #4
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	440b      	add	r3, r1
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	440b      	add	r3, r1
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	b2da      	uxtb	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			if(!baro->counter_pressure_mesure)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <BARO_Main+0xd6>
				baro->state = BARO_STATE_ASK_TEMP ;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8005bec:	e003      	b.n	8005bf6 <BARO_Main+0xde>
			else
				baro->state = BARO_STATE_ASK_PRESSURE ;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

			to_return = 400 ;
 8005bf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005bfa:	60fb      	str	r3, [r7, #12]
			break;
 8005bfc:	bf00      	nop
	}
	return to_return ;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	af286bcb 	.word	0xaf286bcb

08005c0c <BARO_compute_temp>:

void BARO_compute_temp(baro_t * baro){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
	MS5611_calculate_temperature(baro->ms5611);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fec7 	bl	80069ac <MS5611_calculate_temperature>

}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <BARO_compute_pressure>:
void BARO_compute_pressure(baro_t * baro){
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
	MS5611_calculate_pressure(baro->ms5611);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fefa 	bl	8006a2c <MS5611_calculate_pressure>
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <BARO_compute_altitude>:
void BARO_compute_altitude(baro_t * baro){
 8005c40:	b5b0      	push	{r4, r5, r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	//Filter the pressure
	baro->pressure = FILTER_process(&baro->filter, (float)*baro->pressure_raw);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f103 020c 	add.w	r2, r3, #12
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	ee07 3a90 	vmov	s15, r3
 8005c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c60:	4610      	mov	r0, r2
 8005c62:	f00a fb38 	bl	80102d6 <FILTER_process>
 8005c66:	eef0 7a40 	vmov.f32	s15, s0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	baro->altitude_raw = 44330.0f * (1.0 - powf((float)(baro->pressure) * 0.00000986923f, 0.190294957f)) - baro->altitude_offset ;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005c76:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005d38 <BARO_compute_altitude+0xf8>
 8005c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c7e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8005d3c <BARO_compute_altitude+0xfc>
 8005c82:	eeb0 0a67 	vmov.f32	s0, s15
 8005c86:	f00d fcf9 	bl	801367c <powf>
 8005c8a:	ee10 3a10 	vmov	r3, s0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fa fc5a 	bl	8000548 <__aeabi_f2d>
 8005c94:	4603      	mov	r3, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4623      	mov	r3, r4
 8005c9c:	f04f 0000 	mov.w	r0, #0
 8005ca0:	4927      	ldr	r1, [pc, #156]	; (8005d40 <BARO_compute_altitude+0x100>)
 8005ca2:	f7fa faf1 	bl	8000288 <__aeabi_dsub>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	4618      	mov	r0, r3
 8005cac:	4621      	mov	r1, r4
 8005cae:	a320      	add	r3, pc, #128	; (adr r3, 8005d30 <BARO_compute_altitude+0xf0>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f7fa fca0 	bl	80005f8 <__aeabi_dmul>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	4625      	mov	r5, r4
 8005cbe:	461c      	mov	r4, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fa fc3f 	bl	8000548 <__aeabi_f2d>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4620      	mov	r0, r4
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7fa fad9 	bl	8000288 <__aeabi_dsub>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	4618      	mov	r0, r3
 8005cdc:	4621      	mov	r1, r4
 8005cde:	f7fa ff63 	bl	8000ba8 <__aeabi_d2f>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30

	baro->altitude = FILTER_process(&baro->filter_altitude, baro->altitude_raw);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f00a faec 	bl	80102d6 <FILTER_process>
 8005cfe:	eef0 7a40 	vmov.f32	s15, s0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	//Si on a le shift en altitude qui est nul, on l'init
	if(!baro->altitude_offset){
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d16:	d107      	bne.n	8005d28 <BARO_compute_altitude+0xe8>
		baro->altitude_offset = baro->altitude ;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c
		baro->altitude = 0;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	635a      	str	r2, [r3, #52]	; 0x34
	}

}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d30:	00000000 	.word	0x00000000
 8005d34:	40e5a540 	.word	0x40e5a540
 8005d38:	37259405 	.word	0x37259405
 8005d3c:	3e42dcae 	.word	0x3e42dcae
 8005d40:	3ff00000 	.word	0x3ff00000

08005d44 <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3304      	adds	r3, #4
 8005d58:	2210      	movs	r2, #16
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6838      	ldr	r0, [r7, #0]
 8005d5e:	f002 fdab 	bl	80088b8 <HAL_ADC_Start_DMA>
}
 8005d62:	bf00      	nop
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
	...

08005d6c <GYRO_init>:

//float filter[3] = {0.02326917552f, 1.694915254f, -0.7181844298f};
float filter[3] = {0.04f, 1.6f, -0.64f};
static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[ORIENTATION_ROLL], filter, FILTER_SECOND_ORDER);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3320      	adds	r3, #32
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	491e      	ldr	r1, [pc, #120]	; (8005df8 <GYRO_init+0x8c>)
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f00a fa86 	bl	8010290 <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_PITCH], filter, FILTER_SECOND_ORDER);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	333c      	adds	r3, #60	; 0x3c
 8005d88:	2201      	movs	r2, #1
 8005d8a:	491b      	ldr	r1, [pc, #108]	; (8005df8 <GYRO_init+0x8c>)
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f00a fa7f 	bl	8010290 <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_YAW], filter, FILTER_SECOND_ORDER);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3358      	adds	r3, #88	; 0x58
 8005d96:	2201      	movs	r2, #1
 8005d98:	4917      	ldr	r1, [pc, #92]	; (8005df8 <GYRO_init+0x8c>)
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f00a fa78 	bl	8010290 <FILTER_init>

	gyro->mpu = mpu ;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	605a      	str	r2, [r3, #4]

	gyro->offsets[ORIENTATION_ROLL] = 7.225059382f ;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a11      	ldr	r2, [pc, #68]	; (8005dfc <GYRO_init+0x90>)
 8005db6:	615a      	str	r2, [r3, #20]
	gyro->offsets[ORIENTATION_PITCH] = 11.60997625f ;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <GYRO_init+0x94>)
 8005dbc:	619a      	str	r2, [r3, #24]
	gyro->offsets[ORIENTATION_YAW] = -8.234441805f ;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a10      	ldr	r2, [pc, #64]	; (8005e04 <GYRO_init+0x98>)
 8005dc2:	61da      	str	r2, [r3, #28]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <GYRO_init+0x9c>)
 8005dca:	2103      	movs	r1, #3
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fa83 	bl	80062d8 <MPU_init_gyro>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d008      	beq.n	8005dea <GYRO_init+0x7e>
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d008      	beq.n	8005dee <GYRO_init+0x82>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d000      	beq.n	8005de2 <GYRO_init+0x76>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 8005de0:	e006      	b.n	8005df0 <GYRO_init+0x84>
			EVENT_Set_flag(FLAG_GYRO_OK);
 8005de2:	2000      	movs	r0, #0
 8005de4:	f7fd ff08 	bl	8003bf8 <EVENT_Set_flag>
			break;
 8005de8:	e002      	b.n	8005df0 <GYRO_init+0x84>
			break;
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <GYRO_init+0x84>
			break;
 8005dee:	bf00      	nop
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20001d68 	.word	0x20001d68
 8005dfc:	40e733b0 	.word	0x40e733b0
 8005e00:	4139c276 	.word	0x4139c276
 8005e04:	c103c046 	.word	0xc103c046
 8005e08:	08005f1b 	.word	0x08005f1b

08005e0c <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fc02 	bl	8006622 <MPU_update_all_dma>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d00a      	beq.n	8005e3a <GYRO_ACC_update_dma+0x2e>
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d001      	beq.n	8005e2c <GYRO_ACC_update_dma+0x20>
 8005e28:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 8005e2a:	e007      	b.n	8005e3c <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f7fd fefb 	bl	8003c28 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8005e32:	2004      	movs	r0, #4
 8005e34:	f7fd fef8 	bl	8003c28 <EVENT_Clean_flag>
			break;
 8005e38:	e000      	b.n	8005e3c <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 8005e3a:	bf00      	nop
	}
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[0] -= gyro->offsets[0];
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	ed93 7a00 	vldr	s14, [r3]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	edd3 7a05 	vldr	s15, [r3, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e62:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[1] -= gyro->offsets[1];
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	ed93 7a00 	vldr	s14, [r3]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e80:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[2] -= gyro->offsets[2];
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	3308      	adds	r3, #8
 8005e8a:	ed93 7a00 	vldr	s14, [r3]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e9e:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[0] =  FILTER_process(&gyro->filters[0], gyro->raw[0]);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f103 0220 	add.w	r2, r3, #32
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f00a fa0e 	bl	80102d6 <FILTER_process>
 8005eba:	eef0 7a40 	vmov.f32	s15, s0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[1] =  FILTER_process(&gyro->filters[1], gyro->raw[1]);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	edd3 7a00 	vldr	s15, [r3]
 8005ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed8:	4610      	mov	r0, r2
 8005eda:	f00a f9fc 	bl	80102d6 <FILTER_process>
 8005ede:	eef0 7a40 	vmov.f32	s15, s0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[2] =  FILTER_process(&gyro->filters[2], gyro->raw[2]);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	3308      	adds	r3, #8
 8005ef4:	edd3 7a00 	vldr	s15, [r3]
 8005ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8005efc:	4610      	mov	r0, r2
 8005efe:	f00a f9ea 	bl	80102d6 <FILTER_process>
 8005f02:	eef0 7a40 	vmov.f32	s15, s0
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8005f0c:	2003      	movs	r0, #3
 8005f0e:	f7fd fe73 	bl	8003bf8 <EVENT_Set_flag>
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <gyro_data_callback>:

static void gyro_data_callback(void){
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 8005f1e:	2002      	movs	r0, #2
 8005f20:	f7fd fe6a 	bl	8003bf8 <EVENT_Set_flag>
}
 8005f24:	bf00      	nop
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <convert_gyro>:

static void MPU_spi_slow(mpu_t * mpu);
static void MPU_spi_fast(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = -(int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a1b      	ldr	r3, [r3, #32]
 8005f34:	3301      	adds	r3, #1
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	021b      	lsls	r3, r3, #8
 8005f3a:	b21a      	sxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b21b      	sxth	r3, r3
 8005f44:	4313      	orrs	r3, r2
 8005f46:	b21b      	sxth	r3, r3
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	425b      	negs	r3, r3
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	b21a      	sxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	3303      	adds	r3, #3
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	b21a      	sxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	3302      	adds	r3, #2
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b21b      	sxth	r3, r3
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b21a      	sxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	3305      	adds	r3, #5
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	b21a      	sxth	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	3304      	adds	r3, #4
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	b21b      	sxth	r3, r3
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	b21a      	sxth	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <convert_acc>:
static void convert_acc(mpu_t * mpu){
 8005ff6:	b480      	push	{r7}
 8005ff8:	b083      	sub	sp, #12
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = -(int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	3301      	adds	r3, #1
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	b21a      	sxth	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b21b      	sxth	r3, r3
 8006012:	4313      	orrs	r3, r2
 8006014:	b21b      	sxth	r3, r3
 8006016:	b29b      	uxth	r3, r3
 8006018:	425b      	negs	r3, r3
 800601a:	b29b      	uxth	r3, r3
 800601c:	b21a      	sxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	3303      	adds	r3, #3
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	b21a      	sxth	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006034:	3302      	adds	r3, #2
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b21b      	sxth	r3, r3
 800603a:	4313      	orrs	r3, r2
 800603c:	b21a      	sxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006048:	3305      	adds	r3, #5
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	021b      	lsls	r3, r3, #8
 800604e:	b21a      	sxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006054:	3304      	adds	r3, #4
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	b21b      	sxth	r3, r3
 800605a:	4313      	orrs	r3, r2
 800605c:	b21a      	sxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8006078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80060b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6898      	ldr	r0, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	899b      	ldrh	r3, [r3, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	4619      	mov	r1, r3
 80060de:	f003 fdf1 	bl	8009cc4 <HAL_GPIO_WritePin>
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6898      	ldr	r0, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	899b      	ldrh	r3, [r3, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	4619      	mov	r1, r3
 80060fe:	f003 fde1 	bl	8009cc4 <HAL_GPIO_WritePin>
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <MPU_spi_slow>:

static void MPU_spi_slow(mpu_t * mpu){
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_SLOW;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 64 ;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2240      	movs	r2, #64	; 0x40
 8006120:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	4618      	mov	r0, r3
 8006128:	f007 f978 	bl	800d41c <HAL_SPI_Init>
 800612c:	4603      	mov	r3, r0
 800612e:	461a      	mov	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8006134:	200a      	movs	r0, #10
 8006136:	f002 fb59 	bl	80087ec <HAL_Delay>
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <MPU_spi_fast>:
static void MPU_spi_fast(mpu_t * mpu){
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_FAST;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 4 ;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2204      	movs	r2, #4
 8006158:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4618      	mov	r0, r3
 8006160:	f007 f95c 	bl	800d41c <HAL_SPI_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 800616c:	200a      	movs	r0, #10
 800616e:	f002 fb3d 	bl	80087ec <HAL_Delay>
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <MPU_init>:


/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	807b      	strh	r3, [r7, #2]


	//Requiert un SPI pour fonctionner
	if(hspi == NULL)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <MPU_init+0x18>
		return SENSOR_REQUEST_FAIL ;
 8006190:	2302      	movs	r3, #2
 8006192:	e090      	b.n	80062b6 <MPU_init+0x13a>


	//CS pin must be high by default
	MPU_cs_unlock(mpu);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff ffa8 	bl	80060ea <MPU_cs_unlock>
	HAL_Delay(1);
 800619a:	2001      	movs	r0, #1
 800619c:	f002 fb26 	bl	80087ec <HAL_Delay>
	TIME_delay_us_blocking(1);
 80061a0:	2001      	movs	r0, #1
 80061a2:	f7fe fd2b 	bl	8004bfc <TIME_delay_us_blocking>

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	73da      	strb	r2, [r3, #15]

	//SPI slow pdt l'init, max si 1Mhz for the mpu
	if(mpu->spi_speed ==  MPU_SPI_FAST)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d102      	bne.n	80061bc <MPU_init+0x40>
		MPU_spi_slow(mpu);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff ffa7 	bl	800610a <MPU_spi_slow>


	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f103 021a 	add.w	r2, r3, #26
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f103 0212 	add.w	r2, r3, #18
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	645a      	str	r2, [r3, #68]	; 0x44


	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	887a      	ldrh	r2, [r7, #2]
 80061da:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	22d0      	movs	r2, #208	; 0xd0
 80061e6:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 80061e8:	4b35      	ldr	r3, [pc, #212]	; (80062c0 <MPU_init+0x144>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	4619      	mov	r1, r3
 80061ee:	4a35      	ldr	r2, [pc, #212]	; (80062c4 <MPU_init+0x148>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 80061f6:	4b32      	ldr	r3, [pc, #200]	; (80062c0 <MPU_init+0x144>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	b2d1      	uxtb	r1, r2
 80061fe:	4a30      	ldr	r2, [pc, #192]	; (80062c0 <MPU_init+0x144>)
 8006200:	7011      	strb	r1, [r2, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <MPU_init+0x14c>)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Wakeup mpu
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x80} ;
 800620c:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <MPU_init+0x150>)
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	83bb      	strh	r3, [r7, #28]
	MPU_cs_lock(mpu);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7ff ff59 	bl	80060ca <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6858      	ldr	r0, [r3, #4]
 800621c:	f107 011c 	add.w	r1, r7, #28
 8006220:	2302      	movs	r3, #2
 8006222:	2202      	movs	r2, #2
 8006224:	f007 f95e 	bl	800d4e4 <HAL_SPI_Transmit>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff ff5a 	bl	80060ea <MPU_cs_unlock>

	HAL_Delay(150);
 8006236:	2096      	movs	r0, #150	; 0x96
 8006238:	f002 fad8 	bl	80087ec <HAL_Delay>

	//Clock select
	uint8_t mpu_clock_sel_pll_gyroz[] = {MPU6050_PWR_MGMT_1, 0x03};
 800623c:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <MPU_init+0x154>)
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	833b      	strh	r3, [r7, #24]
	MPU_cs_lock(mpu);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff ff41 	bl	80060ca <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_clock_sel_pll_gyroz, 2, 2);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6858      	ldr	r0, [r3, #4]
 800624c:	f107 0118 	add.w	r1, r7, #24
 8006250:	2302      	movs	r3, #2
 8006252:	2202      	movs	r2, #2
 8006254:	f007 f946 	bl	800d4e4 <HAL_SPI_Transmit>
 8006258:	4603      	mov	r3, r0
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ff42 	bl	80060ea <MPU_cs_unlock>

	HAL_Delay(15);
 8006266:	200f      	movs	r0, #15
 8006268:	f002 fac0 	bl	80087ec <HAL_Delay>

	//Disable I2C
	uint8_t mpu_disable_i2c[] = {MPU6050_USER_CTRL, 0x10};
 800626c:	4b19      	ldr	r3, [pc, #100]	; (80062d4 <MPU_init+0x158>)
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	82bb      	strh	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff ff29 	bl	80060ca <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_disable_i2c, 2, 2);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6858      	ldr	r0, [r3, #4]
 800627c:	f107 0114 	add.w	r1, r7, #20
 8006280:	2302      	movs	r3, #2
 8006282:	2202      	movs	r2, #2
 8006284:	f007 f92e 	bl	800d4e4 <HAL_SPI_Transmit>
 8006288:	4603      	mov	r3, r0
 800628a:	461a      	mov	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff ff2a 	bl	80060ea <MPU_cs_unlock>

	TIME_delay_us_blocking(2);
 8006296:	2002      	movs	r0, #2
 8006298:	f7fe fcb0 	bl	8004bfc <TIME_delay_us_blocking>
//	MPU_cs_lock(mpu);
//	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, set_dlpf, 2, 2);
//	MPU_cs_unlock(mpu);

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	7b9b      	ldrb	r3, [r3, #14]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <MPU_init+0x132>
		mpu->state = SENSOR_ERROR ;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2204      	movs	r2, #4
 80062a8:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80062aa:	2302      	movs	r3, #2
 80062ac:	e003      	b.n	80062b6 <MPU_init+0x13a>
	}

	mpu->state = SENSOR_IDDLE ;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	200026e4 	.word	0x200026e4
 80062c4:	200026e0 	.word	0x200026e0
 80062c8:	200026dc 	.word	0x200026dc
 80062cc:	08014c6c 	.word	0x08014c6c
 80062d0:	08014c70 	.word	0x08014c70
 80062d4:	08014c74 	.word	0x08014c74

080062d8 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	460b      	mov	r3, r1
 80062e2:	607a      	str	r2, [r7, #4]
 80062e4:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	7afa      	ldrb	r2, [r7, #11]
 80062ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	7bdb      	ldrb	r3, [r3, #15]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 80062fc:	2302      	movs	r3, #2
 80062fe:	e096      	b.n	800642e <MPU_init_gyro+0x156>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006306:	2b01      	cmp	r3, #1
 8006308:	d102      	bne.n	8006310 <MPU_init_gyro+0x38>
		MPU_spi_slow(mpu);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff fefd 	bl	800610a <MPU_spi_slow>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8006310:	239b      	movs	r3, #155	; 0x9b
 8006312:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f7ff fed8 	bl	80060ca <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6858      	ldr	r0, [r3, #4]
 800631e:	f107 0214 	add.w	r2, r7, #20
 8006322:	f107 0114 	add.w	r1, r7, #20
 8006326:	2302      	movs	r3, #2
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	2302      	movs	r3, #2
 800632c:	f007 fa0e 	bl	800d74c <HAL_SPI_TransmitReceive>
 8006330:	4603      	mov	r3, r0
 8006332:	461a      	mov	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f7ff fed6 	bl	80060ea <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	7b9b      	ldrb	r3, [r3, #14]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d122      	bne.n	800638c <MPU_init_gyro+0xb4>
		HAL_Delay(1);
 8006346:	2001      	movs	r0, #1
 8006348:	f002 fa50 	bl	80087ec <HAL_Delay>
		MPU_cs_lock(mpu);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff febc 	bl	80060ca <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 8006352:	231b      	movs	r3, #27
 8006354:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8006356:	7d7b      	ldrb	r3, [r7, #21]
 8006358:	b25b      	sxtb	r3, r3
 800635a:	f023 0318 	bic.w	r3, r3, #24
 800635e:	b25a      	sxtb	r2, r3
 8006360:	7afb      	ldrb	r3, [r7, #11]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	b25b      	sxtb	r3, r3
 8006366:	4313      	orrs	r3, r2
 8006368:	b25b      	sxtb	r3, r3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6858      	ldr	r0, [r3, #4]
 8006372:	f107 0114 	add.w	r1, r7, #20
 8006376:	2302      	movs	r3, #2
 8006378:	2202      	movs	r2, #2
 800637a:	f007 f8b3 	bl	800d4e4 <HAL_SPI_Transmit>
 800637e:	4603      	mov	r3, r0
 8006380:	461a      	mov	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff feaf 	bl	80060ea <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	7b9b      	ldrb	r3, [r3, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d124      	bne.n	80063de <MPU_init_gyro+0x106>
		uint8_t temp2 = temp[1];
 8006394:	7d7b      	ldrb	r3, [r7, #21]
 8006396:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8006398:	239b      	movs	r3, #155	; 0x9b
 800639a:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 800639c:	2001      	movs	r0, #1
 800639e:	f002 fa25 	bl	80087ec <HAL_Delay>
		MPU_cs_lock(mpu);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fe91 	bl	80060ca <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6858      	ldr	r0, [r3, #4]
 80063ac:	f107 0214 	add.w	r2, r7, #20
 80063b0:	f107 0114 	add.w	r1, r7, #20
 80063b4:	2302      	movs	r3, #2
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	2302      	movs	r3, #2
 80063ba:	f007 f9c7 	bl	800d74c <HAL_SPI_TransmitReceive>
 80063be:	4603      	mov	r3, r0
 80063c0:	461a      	mov	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff fe8f 	bl	80060ea <MPU_cs_unlock>

		if(temp[1] != temp2)
 80063cc:	7d7b      	ldrb	r3, [r7, #21]
 80063ce:	7dfa      	ldrb	r2, [r7, #23]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d004      	beq.n	80063de <MPU_init_gyro+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2204      	movs	r2, #4
 80063d8:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 80063da:	2302      	movs	r3, #2
 80063dc:	e027      	b.n	800642e <MPU_init_gyro+0x156>

	}



	if(mpu->hal_state != HAL_OK)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	7b9b      	ldrb	r3, [r3, #14]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d004      	beq.n	80063f0 <MPU_init_gyro+0x118>
	{
		mpu->state = SENSOR_ERROR ;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2204      	movs	r2, #4
 80063ea:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 80063ec:	2302      	movs	r3, #2
 80063ee:	e01e      	b.n	800642e <MPU_init_gyro+0x156>
	}

	switch(gyro_range){
 80063f0:	7afb      	ldrb	r3, [r7, #11]
 80063f2:	2b03      	cmp	r3, #3
 80063f4:	d81a      	bhi.n	800642c <MPU_init_gyro+0x154>
 80063f6:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <MPU_init_gyro+0x124>)
 80063f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fc:	0800640d 	.word	0x0800640d
 8006400:	08006415 	.word	0x08006415
 8006404:	0800641d 	.word	0x0800641d
 8006408:	08006425 	.word	0x08006425
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <MPU_init_gyro+0x160>)
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8006412:	e00b      	b.n	800642c <MPU_init_gyro+0x154>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <MPU_init_gyro+0x164>)
 8006418:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800641a:	e007      	b.n	800642c <MPU_init_gyro+0x154>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a08      	ldr	r2, [pc, #32]	; (8006440 <MPU_init_gyro+0x168>)
 8006420:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8006422:	e003      	b.n	800642c <MPU_init_gyro+0x154>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a07      	ldr	r2, [pc, #28]	; (8006444 <MPU_init_gyro+0x16c>)
 8006428:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800642a:	bf00      	nop
	}

	return SENSOR_REQUEST_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	3bfa232d 	.word	0x3bfa232d
 800643c:	3c7a232d 	.word	0x3c7a232d
 8006440:	3cf9c190 	.word	0x3cf9c190
 8006444:	3d79c190 	.word	0x3d79c190

08006448 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	460b      	mov	r3, r1
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	7afa      	ldrb	r2, [r7, #11]
 800645a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	7bdb      	ldrb	r3, [r3, #15]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 800646c:	2302      	movs	r3, #2
 800646e:	e095      	b.n	800659c <MPU_init_acc+0x154>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006476:	2b01      	cmp	r3, #1
 8006478:	d102      	bne.n	8006480 <MPU_init_acc+0x38>
			MPU_spi_slow(mpu);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff fe45 	bl	800610a <MPU_spi_slow>

	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8006480:	239c      	movs	r3, #156	; 0x9c
 8006482:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff fe20 	bl	80060ca <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6858      	ldr	r0, [r3, #4]
 800648e:	f107 0214 	add.w	r2, r7, #20
 8006492:	f107 0114 	add.w	r1, r7, #20
 8006496:	2302      	movs	r3, #2
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	2302      	movs	r3, #2
 800649c:	f007 f956 	bl	800d74c <HAL_SPI_TransmitReceive>
 80064a0:	4603      	mov	r3, r0
 80064a2:	461a      	mov	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f7ff fe1e 	bl	80060ea <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	7b9b      	ldrb	r3, [r3, #14]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d122      	bne.n	80064fc <MPU_init_acc+0xb4>
		HAL_Delay(1);
 80064b6:	2001      	movs	r0, #1
 80064b8:	f002 f998 	bl	80087ec <HAL_Delay>
		MPU_cs_lock(mpu);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fe04 	bl	80060ca <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 80064c2:	231c      	movs	r3, #28
 80064c4:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 80064c6:	7d7b      	ldrb	r3, [r7, #21]
 80064c8:	b25b      	sxtb	r3, r3
 80064ca:	f023 0318 	bic.w	r3, r3, #24
 80064ce:	b25a      	sxtb	r2, r3
 80064d0:	7afb      	ldrb	r3, [r7, #11]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	b25b      	sxtb	r3, r3
 80064d6:	4313      	orrs	r3, r2
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6858      	ldr	r0, [r3, #4]
 80064e2:	f107 0114 	add.w	r1, r7, #20
 80064e6:	2302      	movs	r3, #2
 80064e8:	2202      	movs	r2, #2
 80064ea:	f006 fffb 	bl	800d4e4 <HAL_SPI_Transmit>
 80064ee:	4603      	mov	r3, r0
 80064f0:	461a      	mov	r2, r3
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff fdf7 	bl	80060ea <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	7b9b      	ldrb	r3, [r3, #14]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d124      	bne.n	800654e <MPU_init_acc+0x106>
		uint8_t temp2 = temp[1];
 8006504:	7d7b      	ldrb	r3, [r7, #21]
 8006506:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8006508:	239c      	movs	r3, #156	; 0x9c
 800650a:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 800650c:	2001      	movs	r0, #1
 800650e:	f002 f96d 	bl	80087ec <HAL_Delay>
		MPU_cs_lock(mpu);
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f7ff fdd9 	bl	80060ca <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6858      	ldr	r0, [r3, #4]
 800651c:	f107 0214 	add.w	r2, r7, #20
 8006520:	f107 0114 	add.w	r1, r7, #20
 8006524:	2302      	movs	r3, #2
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	2302      	movs	r3, #2
 800652a:	f007 f90f 	bl	800d74c <HAL_SPI_TransmitReceive>
 800652e:	4603      	mov	r3, r0
 8006530:	461a      	mov	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff fdd7 	bl	80060ea <MPU_cs_unlock>

		if(temp[1] != temp2)
 800653c:	7d7b      	ldrb	r3, [r7, #21]
 800653e:	7dfa      	ldrb	r2, [r7, #23]
 8006540:	429a      	cmp	r2, r3
 8006542:	d004      	beq.n	800654e <MPU_init_acc+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2204      	movs	r2, #4
 8006548:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 800654a:	2302      	movs	r3, #2
 800654c:	e026      	b.n	800659c <MPU_init_acc+0x154>
		}
	}



	switch(acc_range){
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	2b03      	cmp	r3, #3
 8006552:	d81f      	bhi.n	8006594 <MPU_init_acc+0x14c>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <MPU_init_acc+0x114>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	0800656d 	.word	0x0800656d
 8006560:	08006577 	.word	0x08006577
 8006564:	08006581 	.word	0x08006581
 8006568:	0800658b 	.word	0x0800658b
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8006572:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8006574:	e00e      	b.n	8006594 <MPU_init_acc+0x14c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800657c:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 800657e:	e009      	b.n	8006594 <MPU_init_acc+0x14c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8006586:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8006588:	e004      	b.n	8006594 <MPU_init_acc+0x14c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8006590:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8006592:	bf00      	nop
	}
	MPU_spi_fast(mpu);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff fdd4 	bl	8006142 <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7bdb      	ldrb	r3, [r3, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 80065b4:	2302      	movs	r3, #2
 80065b6:	e030      	b.n	800661a <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 80065b8:	23bb      	movs	r3, #187	; 0xbb
 80065ba:	723b      	strb	r3, [r7, #8]
 80065bc:	2300      	movs	r3, #0
 80065be:	727b      	strb	r3, [r7, #9]
 80065c0:	2300      	movs	r3, #0
 80065c2:	72bb      	strb	r3, [r7, #10]
 80065c4:	2300      	movs	r3, #0
 80065c6:	72fb      	strb	r3, [r7, #11]
 80065c8:	2300      	movs	r3, #0
 80065ca:	733b      	strb	r3, [r7, #12]
 80065cc:	2300      	movs	r3, #0
 80065ce:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fd7a 	bl	80060ca <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6858      	ldr	r0, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065de:	f107 0108 	add.w	r1, r7, #8
 80065e2:	2302      	movs	r3, #2
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	2306      	movs	r3, #6
 80065e8:	f007 f8b0 	bl	800d74c <HAL_SPI_TransmitReceive>
 80065ec:	4603      	mov	r3, r0
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff fd78 	bl	80060ea <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	7b9b      	ldrb	r3, [r3, #14]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d101      	bne.n	8006606 <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 8006602:	2301      	movs	r3, #1
 8006604:	e009      	b.n	800661a <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	7b9b      	ldrb	r3, [r3, #14]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 800660e:	2302      	movs	r3, #2
 8006610:	e003      	b.n	800661a <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7ff fcef 	bl	8005ff6 <convert_acc>
	return SENSOR_REQUEST_OK ;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8006622:	b580      	push	{r7, lr}
 8006624:	b086      	sub	sp, #24
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	2200      	movs	r2, #0
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	605a      	str	r2, [r3, #4]
 8006634:	609a      	str	r2, [r3, #8]
 8006636:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 8006638:	23bb      	movs	r3, #187	; 0xbb
 800663a:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff fd44 	bl	80060ca <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6858      	ldr	r0, [r3, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f103 0212 	add.w	r2, r3, #18
 800664c:	f107 0108 	add.w	r1, r7, #8
 8006650:	230e      	movs	r3, #14
 8006652:	f007 fa1d 	bl	800da90 <HAL_SPI_TransmitReceive_DMA>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	7b9b      	ldrb	r3, [r3, #14]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d107      	bne.n	8006676 <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2203      	movs	r2, #3
 8006670:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	e009      	b.n	800668a <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7b9b      	ldrb	r3, [r3, #14]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d101      	bne.n	8006682 <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 800667e:	2301      	movs	r3, #1
 8006680:	e003      	b.n	800668a <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8006688:	2302      	movs	r3, #2
}
 800668a:	4618      	mov	r0, r3
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fd25 	bl	80060ea <MPU_cs_unlock>


	switch(mpu->dma_state){
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	7c1b      	ldrb	r3, [r3, #16]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d00b      	beq.n	80066c0 <MPU_dma_transmit_complete+0x2e>
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d010      	beq.n	80066ce <MPU_dma_transmit_complete+0x3c>
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d000      	beq.n	80066b2 <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 80066b0:	e014      	b.n	80066dc <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fc38 	bl	8005f28 <convert_gyro>
			mpu->gyro_data_callback();
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	4798      	blx	r3
			break;
 80066be:	e00d      	b.n	80066dc <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff fc98 	bl	8005ff6 <convert_acc>
			mpu->acc_data_callback();
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ca:	4798      	blx	r3
			break;
 80066cc:	e006      	b.n	80066dc <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff fc2a 	bl	8005f28 <convert_gyro>
			mpu->gyro_data_callback();
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	4798      	blx	r3
			break;
 80066da:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	741a      	strb	r2, [r3, #16]
}
 80066e2:	bf00      	nop
 80066e4:	3708      	adds	r7, #8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	7c1b      	ldrb	r3, [r3, #16]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d105      	bne.n	8006706 <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff fc7b 	bl	8005ff6 <convert_acc>
		mpu->acc_data_callback();
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006704:	4798      	blx	r3
	}
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 8006718:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_SPI_TxRxCpltCallback+0x24>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	d104      	bne.n	800672c <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <HAL_SPI_TxRxCpltCallback+0x28>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff ffb3 	bl	8006692 <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 800672c:	bf00      	nop
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	200026dc 	.word	0x200026dc
 8006738:	200026e0 	.word	0x200026e0

0800673c <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 8006744:	4b06      	ldr	r3, [pc, #24]	; (8006760 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d104      	bne.n	8006758 <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 800674e:	4b05      	ldr	r3, [pc, #20]	; (8006764 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff ffc9 	bl	80066ea <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 8006758:	bf00      	nop
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	200026dc 	.word	0x200026dc
 8006764:	200026e0 	.word	0x200026e0

08006768 <MS5611_init>:

#include "ms5611.h"
#include "math.h"
ms5611_t * ms5611_ ;

sensor_request_e MS5611_init(ms5611_t * ms5611, I2C_HandleTypeDef * hi2c, void (*temp_data), void (*pressure_data)){
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af04      	add	r7, sp, #16
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
	ms5611->state = SENSOR_NOT_INIT ;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	715a      	strb	r2, [r3, #5]
	ms5611_ = ms5611 ;
 800677c:	4a2f      	ldr	r2, [pc, #188]	; (800683c <MS5611_init+0xd4>)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6013      	str	r3, [r2, #0]

	//Callback function
	ms5611->temp_data = temp_data ;
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	635a      	str	r2, [r3, #52]	; 0x34
	ms5611->pressure_data = pressure_data ;
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
	if(hi2c == NULL)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <MS5611_init+0x30>
		return SENSOR_REQUEST_FAIL ;
 8006794:	2302      	movs	r3, #2
 8006796:	e04c      	b.n	8006832 <MS5611_init+0xca>

	ms5611->hi2c = hi2c ;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	601a      	str	r2, [r3, #0]
	ms5611->hal_state = HAL_I2C_IsDeviceReady(ms5611->hi2c, MS5611_ADRESSE, 5, 2);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	2302      	movs	r3, #2
 80067a4:	2205      	movs	r2, #5
 80067a6:	21ee      	movs	r1, #238	; 0xee
 80067a8:	f004 f88c 	bl	800a8c4 <HAL_I2C_IsDeviceReady>
 80067ac:	4603      	mov	r3, r0
 80067ae:	461a      	mov	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	711a      	strb	r2, [r3, #4]
	if(ms5611->hal_state != HAL_OK)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	791b      	ldrb	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <MS5611_init+0x58>
		return SENSOR_REQUEST_FAIL ;
 80067bc:	2302      	movs	r3, #2
 80067be:	e038      	b.n	8006832 <MS5611_init+0xca>

	//Get calibrations values from the sensor
	uint8_t data[2];
	for(uint8_t d = 1; d < 7; d++){
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
 80067c4:	e02e      	b.n	8006824 <MS5611_init+0xbc>
		if(ms5611->hal_state == HAL_OK){
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	791b      	ldrb	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d125      	bne.n	800681a <MS5611_init+0xb2>
			ms5611->hal_state = HAL_I2C_Mem_Read(ms5611->hi2c, MS5611_ADRESSE, (uint8_t)(MS5611_PROM + (2*d)), I2C_MEMADD_SIZE_8BIT, data, 2, 2);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
 80067d4:	3350      	adds	r3, #80	; 0x50
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	b29a      	uxth	r2, r3
 80067de:	2302      	movs	r3, #2
 80067e0:	9302      	str	r3, [sp, #8]
 80067e2:	2302      	movs	r3, #2
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	f107 0314 	add.w	r3, r7, #20
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2301      	movs	r3, #1
 80067ee:	21ee      	movs	r1, #238	; 0xee
 80067f0:	f003 fcd0 	bl	800a194 <HAL_I2C_Mem_Read>
 80067f4:	4603      	mov	r3, r0
 80067f6:	461a      	mov	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	711a      	strb	r2, [r3, #4]
			ms5611->calibration_values[d-1] = (uint16_t)((data[0] << 8) | data[1]);
 80067fc:	7d3b      	ldrb	r3, [r7, #20]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	b21a      	sxth	r2, r3
 8006802:	7d7b      	ldrb	r3, [r7, #21]
 8006804:	b21b      	sxth	r3, r3
 8006806:	4313      	orrs	r3, r2
 8006808:	b219      	sxth	r1, r3
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	1e5a      	subs	r2, r3, #1
 800680e:	b289      	uxth	r1, r1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3204      	adds	r2, #4
 8006814:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8006818:	e001      	b.n	800681e <MS5611_init+0xb6>
		}
		else
			return SENSOR_REQUEST_FAIL ;
 800681a:	2302      	movs	r3, #2
 800681c:	e009      	b.n	8006832 <MS5611_init+0xca>
	for(uint8_t d = 1; d < 7; d++){
 800681e:	7dfb      	ldrb	r3, [r7, #23]
 8006820:	3301      	adds	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b06      	cmp	r3, #6
 8006828:	d9cd      	bls.n	80067c6 <MS5611_init+0x5e>
	}
	ms5611->state = SENSOR_IDDLE ;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	715a      	strb	r2, [r3, #5]

	return SENSOR_REQUEST_OK ;
 8006830:	2300      	movs	r3, #0

}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	20002704 	.word	0x20002704

08006840 <MS5611_request_temp>:

//Demande pour une mesure de température
sensor_request_e MS5611_request_temp(ms5611_t * ms5611){
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	795b      	ldrb	r3, [r3, #5]
 800684c:	2b03      	cmp	r3, #3
 800684e:	d101      	bne.n	8006854 <MS5611_request_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 8006850:	2301      	movs	r3, #1
 8006852:	e01d      	b.n	8006890 <MS5611_request_temp+0x50>
	if(ms5611->state)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	795b      	ldrb	r3, [r3, #5]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <MS5611_request_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 800685c:	2302      	movs	r3, #2
 800685e:	e017      	b.n	8006890 <MS5611_request_temp+0x50>

	uint8_t temp_request = MS5611_TEMP ;
 8006860:	2358      	movs	r3, #88	; 0x58
 8006862:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &temp_request, 1);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6818      	ldr	r0, [r3, #0]
 8006868:	f107 020f 	add.w	r2, r7, #15
 800686c:	2301      	movs	r3, #1
 800686e:	21ee      	movs	r1, #238	; 0xee
 8006870:	f003 fb7a 	bl	8009f68 <HAL_I2C_Master_Transmit_DMA>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	791b      	ldrb	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d004      	beq.n	800688e <MS5611_request_temp+0x4e>
		ms5611->state = SENSOR_ERROR ;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2204      	movs	r2, #4
 8006888:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 800688a:	2302      	movs	r3, #2
 800688c:	e000      	b.n	8006890 <MS5611_request_temp+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <MS5611_request_pressure>:

//Demande pour une mesure de pressio
sensor_request_e MS5611_request_pressure(ms5611_t * ms5611){
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	795b      	ldrb	r3, [r3, #5]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d101      	bne.n	80068ac <MS5611_request_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e01d      	b.n	80068e8 <MS5611_request_pressure+0x50>
	if(ms5611->state)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	795b      	ldrb	r3, [r3, #5]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <MS5611_request_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e017      	b.n	80068e8 <MS5611_request_pressure+0x50>

	uint8_t pressure_request = MS5611_PRESSURE ;
 80068b8:	2348      	movs	r3, #72	; 0x48
 80068ba:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &pressure_request, 1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	f107 020f 	add.w	r2, r7, #15
 80068c4:	2301      	movs	r3, #1
 80068c6:	21ee      	movs	r1, #238	; 0xee
 80068c8:	f003 fb4e 	bl	8009f68 <HAL_I2C_Master_Transmit_DMA>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	791b      	ldrb	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <MS5611_request_pressure+0x4e>
		ms5611->state = SENSOR_ERROR ;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 80068e2:	2302      	movs	r3, #2
 80068e4:	e000      	b.n	80068e8 <MS5611_request_pressure+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <MS5611_read_temp>:

//Lecture de la température
sensor_request_e MS5611_read_temp(ms5611_t * ms5611){
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	795b      	ldrb	r3, [r3, #5]
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d101      	bne.n	8006904 <MS5611_read_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 8006900:	2301      	movs	r3, #1
 8006902:	e022      	b.n	800694a <MS5611_read_temp+0x5a>
	if(ms5611->state)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	795b      	ldrb	r3, [r3, #5]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <MS5611_read_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 800690c:	2302      	movs	r3, #2
 800690e:	e01c      	b.n	800694a <MS5611_read_temp+0x5a>

	ms5611->hal_state = HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3330      	adds	r3, #48	; 0x30
 8006918:	2203      	movs	r2, #3
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	2301      	movs	r3, #1
 8006920:	2200      	movs	r2, #0
 8006922:	21ee      	movs	r1, #238	; 0xee
 8006924:	f003 fe5c 	bl	800a5e0 <HAL_I2C_Mem_Read_DMA>
 8006928:	4603      	mov	r3, r0
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	711a      	strb	r2, [r3, #4]
	ms5611->read_state = MS5611_READ_TEMPERATURE ;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	791b      	ldrb	r3, [r3, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d004      	beq.n	8006948 <MS5611_read_temp+0x58>
		ms5611->state = SENSOR_ERROR ;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2204      	movs	r2, #4
 8006942:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 8006944:	2302      	movs	r3, #2
 8006946:	e000      	b.n	800694a <MS5611_read_temp+0x5a>
	}
	else
		return SENSOR_REQUEST_OK ;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <MS5611_read_pressure>:

//Lecture de la pression
sensor_request_e MS5611_read_pressure(ms5611_t * ms5611){
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af02      	add	r7, sp, #8
 8006958:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	795b      	ldrb	r3, [r3, #5]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d101      	bne.n	8006966 <MS5611_read_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 8006962:	2301      	movs	r3, #1
 8006964:	e01e      	b.n	80069a4 <MS5611_read_pressure+0x52>
	if(ms5611->state)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	795b      	ldrb	r3, [r3, #5]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <MS5611_read_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 800696e:	2302      	movs	r3, #2
 8006970:	e018      	b.n	80069a4 <MS5611_read_pressure+0x52>


	HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6818      	ldr	r0, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3330      	adds	r3, #48	; 0x30
 800697a:	2203      	movs	r2, #3
 800697c:	9201      	str	r2, [sp, #4]
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2301      	movs	r3, #1
 8006982:	2200      	movs	r2, #0
 8006984:	21ee      	movs	r1, #238	; 0xee
 8006986:	f003 fe2b 	bl	800a5e0 <HAL_I2C_Mem_Read_DMA>
	ms5611->read_state = MS5611_READ_PRESSURE ;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	791b      	ldrb	r3, [r3, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <MS5611_read_pressure+0x50>
		ms5611->state = SENSOR_ERROR ;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2204      	movs	r2, #4
 800699c:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 800699e:	2302      	movs	r3, #2
 80069a0:	e000      	b.n	80069a4 <MS5611_read_pressure+0x52>
	}
	else
		return SENSOR_REQUEST_OK ;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <MS5611_calculate_temperature>:

//Calcul de la température
void MS5611_calculate_temperature(ms5611_t * ms5611){
 80069ac:	b4b0      	push	{r4, r5, r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
	ms5611->dT = ms5611->raw_temperature - (int32_t)ms5611->calibration_values[4] * 256;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	8a12      	ldrh	r2, [r2, #16]
 80069bc:	0212      	lsls	r2, r2, #8
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	461a      	mov	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	625a      	str	r2, [r3, #36]	; 0x24
	ms5611->temperature = 2000 +  ((int64_t) ms5611->dT * ms5611->calibration_values[5]) / 8388608 ;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	4619      	mov	r1, r3
 80069cc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8a5b      	ldrh	r3, [r3, #18]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f04f 0400 	mov.w	r4, #0
 80069da:	fb03 f502 	mul.w	r5, r3, r2
 80069de:	fb01 f004 	mul.w	r0, r1, r4
 80069e2:	4428      	add	r0, r5
 80069e4:	fba1 3403 	umull	r3, r4, r1, r3
 80069e8:	1902      	adds	r2, r0, r4
 80069ea:	4614      	mov	r4, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f174 0200 	sbcs.w	r2, r4, #0
 80069f2:	da05      	bge.n	8006a00 <MS5611_calculate_temperature+0x54>
 80069f4:	490c      	ldr	r1, [pc, #48]	; (8006a28 <MS5611_calculate_temperature+0x7c>)
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	185b      	adds	r3, r3, r1
 80069fc:	eb44 0402 	adc.w	r4, r4, r2
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	0dd9      	lsrs	r1, r3, #23
 8006a0a:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 8006a0e:	15e2      	asrs	r2, r4, #23
 8006a10:	460b      	mov	r3, r1
 8006a12:	4614      	mov	r4, r2
 8006a14:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bcb0      	pop	{r4, r5, r7}
 8006a26:	4770      	bx	lr
 8006a28:	007fffff 	.word	0x007fffff

08006a2c <MS5611_calculate_pressure>:

//Calcul de la pression
void MS5611_calculate_pressure(ms5611_t * ms5611){
 8006a2c:	b4f0      	push	{r4, r5, r6, r7}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	 int64_t OFF = (int64_t)ms5611->calibration_values[1] * 65536 + (int64_t)ms5611->calibration_values[3] * ms5611->dT / 128 ;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	895b      	ldrh	r3, [r3, #10]
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	f04f 0400 	mov.w	r4, #0
 8006a3e:	f04f 0100 	mov.w	r1, #0
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	0422      	lsls	r2, r4, #16
 8006a48:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 8006a4c:	0419      	lsls	r1, r3, #16
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	89db      	ldrh	r3, [r3, #14]
 8006a52:	b29d      	uxth	r5, r3
 8006a54:	f04f 0600 	mov.w	r6, #0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8006a60:	fb03 fc06 	mul.w	ip, r3, r6
 8006a64:	fb05 f004 	mul.w	r0, r5, r4
 8006a68:	4460      	add	r0, ip
 8006a6a:	fba5 3403 	umull	r3, r4, r5, r3
 8006a6e:	4420      	add	r0, r4
 8006a70:	4604      	mov	r4, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f174 0000 	sbcs.w	r0, r4, #0
 8006a78:	da02      	bge.n	8006a80 <MS5611_calculate_pressure+0x54>
 8006a7a:	337f      	adds	r3, #127	; 0x7f
 8006a7c:	f144 0400 	adc.w	r4, r4, #0
 8006a80:	f04f 0500 	mov.w	r5, #0
 8006a84:	f04f 0600 	mov.w	r6, #0
 8006a88:	09dd      	lsrs	r5, r3, #7
 8006a8a:	ea45 6544 	orr.w	r5, r5, r4, lsl #25
 8006a8e:	11e6      	asrs	r6, r4, #7
 8006a90:	186b      	adds	r3, r5, r1
 8006a92:	eb46 0402 	adc.w	r4, r6, r2
 8006a96:	e9c7 3406 	strd	r3, r4, [r7, #24]
	 int64_t SENS = (int64_t)ms5611->calibration_values[0] * 32768 + (int64_t)ms5611->calibration_values[2] * ms5611->dT / 256 ;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	891b      	ldrh	r3, [r3, #8]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f04f 0400 	mov.w	r4, #0
 8006aa4:	f04f 0100 	mov.w	r1, #0
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	03e2      	lsls	r2, r4, #15
 8006aae:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 8006ab2:	03d9      	lsls	r1, r3, #15
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	899b      	ldrh	r3, [r3, #12]
 8006ab8:	b29d      	uxth	r5, r3
 8006aba:	f04f 0600 	mov.w	r6, #0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8006ac6:	fb03 fc06 	mul.w	ip, r3, r6
 8006aca:	fb05 f004 	mul.w	r0, r5, r4
 8006ace:	4460      	add	r0, ip
 8006ad0:	fba5 3403 	umull	r3, r4, r5, r3
 8006ad4:	4420      	add	r0, r4
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f174 0000 	sbcs.w	r0, r4, #0
 8006ade:	da02      	bge.n	8006ae6 <MS5611_calculate_pressure+0xba>
 8006ae0:	33ff      	adds	r3, #255	; 0xff
 8006ae2:	f144 0400 	adc.w	r4, r4, #0
 8006ae6:	f04f 0500 	mov.w	r5, #0
 8006aea:	f04f 0600 	mov.w	r6, #0
 8006aee:	0a1d      	lsrs	r5, r3, #8
 8006af0:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 8006af4:	1226      	asrs	r6, r4, #8
 8006af6:	186b      	adds	r3, r5, r1
 8006af8:	eb46 0402 	adc.w	r4, r6, r2
 8006afc:	e9c7 3404 	strd	r3, r4, [r7, #16]
	 uint64_t pressure = (((uint64_t)ms5611->raw_pressure * SENS / (uint64_t)2097152) - OFF) / (uint64_t)32768 ;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f04f 0200 	mov.w	r2, #0
 8006b0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006b0e:	fb03 f502 	mul.w	r5, r3, r2
 8006b12:	fb01 f004 	mul.w	r0, r1, r4
 8006b16:	4428      	add	r0, r5
 8006b18:	fba1 1203 	umull	r1, r2, r1, r3
 8006b1c:	1883      	adds	r3, r0, r2
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f04f 0300 	mov.w	r3, #0
 8006b24:	f04f 0400 	mov.w	r4, #0
 8006b28:	0d4b      	lsrs	r3, r1, #21
 8006b2a:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 8006b2e:	0d54      	lsrs	r4, r2, #21
 8006b30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006b34:	1a5b      	subs	r3, r3, r1
 8006b36:	eb64 0402 	sbc.w	r4, r4, r2
 8006b3a:	461d      	mov	r5, r3
 8006b3c:	4626      	mov	r6, r4
 8006b3e:	f04f 0300 	mov.w	r3, #0
 8006b42:	f04f 0400 	mov.w	r4, #0
 8006b46:	0beb      	lsrs	r3, r5, #15
 8006b48:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 8006b4c:	0bf4      	lsrs	r4, r6, #15
 8006b4e:	e9c7 3402 	strd	r3, r4, [r7, #8]
	 ms5611->pressure = (uint32_t)pressure ;
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	61da      	str	r2, [r3, #28]
}
 8006b58:	bf00      	nop
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8006b60:	4770      	bx	lr
	...

08006b64 <MS5611_i2c_rx_callabck>:

}


//Callback de l'i2c car dma finit
void MS5611_i2c_rx_callabck(I2C_HandleTypeDef * hi2c){
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
	if(ms5611_->read_state == MS5611_READ_TEMPERATURE){
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	799b      	ldrb	r3, [r3, #6]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d117      	bne.n	8006ba6 <MS5611_i2c_rx_callabck+0x42>
		ms5611_->raw_temperature = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b7e:	041a      	lsls	r2, r3, #16
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	4a16      	ldr	r2, [pc, #88]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006b94:	431a      	orrs	r2, r3
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	619a      	str	r2, [r3, #24]
		ms5611_->temp_data();
 8006b9c:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba2:	4798      	blx	r3
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
		ms5611_->pressure_data();
	}

}
 8006ba4:	e01b      	b.n	8006bde <MS5611_i2c_rx_callabck+0x7a>
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
 8006ba6:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	799b      	ldrb	r3, [r3, #6]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d116      	bne.n	8006bde <MS5611_i2c_rx_callabck+0x7a>
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 8006bb0:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bb8:	041a      	lsls	r2, r3, #16
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006bc8:	6812      	ldr	r2, [r2, #0]
 8006bca:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	4b05      	ldr	r3, [pc, #20]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	615a      	str	r2, [r3, #20]
		ms5611_->pressure_data();
 8006bd6:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <MS5611_i2c_rx_callabck+0x84>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	4798      	blx	r3
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20002704 	.word	0x20002704

08006bec <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006bf2:	463b      	mov	r3, r7
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006bfe:	4b21      	ldr	r3, [pc, #132]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c00:	4a21      	ldr	r2, [pc, #132]	; (8006c88 <MX_ADC2_Init+0x9c>)
 8006c02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006c04:	4b1f      	ldr	r3, [pc, #124]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006c0c:	4b1d      	ldr	r3, [pc, #116]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8006c12:	4b1c      	ldr	r3, [pc, #112]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006c18:	4b1a      	ldr	r3, [pc, #104]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006c1e:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006c26:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006c2c:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c2e:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <MX_ADC2_Init+0xa0>)
 8006c30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c32:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006c38:	4b12      	ldr	r3, [pc, #72]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006c46:	4b0f      	ldr	r3, [pc, #60]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006c4c:	480d      	ldr	r0, [pc, #52]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c4e:	f001 fdef 	bl	8008830 <HAL_ADC_Init>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006c58:	f000 fbe4 	bl	8007424 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8006c5c:	2309      	movs	r3, #9
 8006c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006c60:	2301      	movs	r3, #1
 8006c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006c68:	463b      	mov	r3, r7
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4805      	ldr	r0, [pc, #20]	; (8006c84 <MX_ADC2_Init+0x98>)
 8006c6e:	f001 ff33 	bl	8008ad8 <HAL_ADC_ConfigChannel>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006c78:	f000 fbd4 	bl	8007424 <Error_Handler>
  }

}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20002708 	.word	0x20002708
 8006c88:	40012100 	.word	0x40012100
 8006c8c:	0f000001 	.word	0x0f000001

08006c90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	; 0x28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c98:	f107 0314 	add.w	r3, r7, #20
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	60da      	str	r2, [r3, #12]
 8006ca6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a3c      	ldr	r2, [pc, #240]	; (8006da0 <HAL_ADC_MspInit+0x110>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d172      	bne.n	8006d98 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	4b3b      	ldr	r3, [pc, #236]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	4a3a      	ldr	r2, [pc, #232]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8006cc2:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	4b34      	ldr	r3, [pc, #208]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	4a33      	ldr	r2, [pc, #204]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cd8:	f043 0304 	orr.w	r3, r3, #4
 8006cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
 8006cee:	4b2d      	ldr	r3, [pc, #180]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	4a2c      	ldr	r2, [pc, #176]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfa:	4b2a      	ldr	r3, [pc, #168]	; (8006da4 <HAL_ADC_MspInit+0x114>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8006d06:	2302      	movs	r3, #2
 8006d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8006d12:	f107 0314 	add.w	r3, r7, #20
 8006d16:	4619      	mov	r1, r3
 8006d18:	4823      	ldr	r0, [pc, #140]	; (8006da8 <HAL_ADC_MspInit+0x118>)
 8006d1a:	f002 fe39 	bl	8009990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d22:	2303      	movs	r3, #3
 8006d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8006d2a:	f107 0314 	add.w	r3, r7, #20
 8006d2e:	4619      	mov	r1, r3
 8006d30:	481e      	ldr	r0, [pc, #120]	; (8006dac <HAL_ADC_MspInit+0x11c>)
 8006d32:	f002 fe2d 	bl	8009990 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006d36:	4b1e      	ldr	r3, [pc, #120]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d38:	4a1e      	ldr	r2, [pc, #120]	; (8006db4 <HAL_ADC_MspInit+0x124>)
 8006d3a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006d3c:	4b1c      	ldr	r3, [pc, #112]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d42:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d44:	4b1a      	ldr	r3, [pc, #104]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d4a:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006d50:	4b17      	ldr	r3, [pc, #92]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d56:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d5e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d60:	4b13      	ldr	r3, [pc, #76]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d66:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d6e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006d70:	4b0f      	ldr	r3, [pc, #60]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d76:	4b0e      	ldr	r3, [pc, #56]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006d7c:	480c      	ldr	r0, [pc, #48]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d7e:	f002 fa5d 	bl	800923c <HAL_DMA_Init>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8006d88:	f000 fb4c 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a08      	ldr	r2, [pc, #32]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
 8006d92:	4a07      	ldr	r2, [pc, #28]	; (8006db0 <HAL_ADC_MspInit+0x120>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8006d98:	bf00      	nop
 8006d9a:	3728      	adds	r7, #40	; 0x28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	40012100 	.word	0x40012100
 8006da4:	40023800 	.word	0x40023800
 8006da8:	40020800 	.word	0x40020800
 8006dac:	40020400 	.word	0x40020400
 8006db0:	20002750 	.word	0x20002750
 8006db4:	40026440 	.word	0x40026440

08006db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	4b3f      	ldr	r3, [pc, #252]	; (8006ec0 <MX_DMA_Init+0x108>)
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	4a3e      	ldr	r2, [pc, #248]	; (8006ec0 <MX_DMA_Init+0x108>)
 8006dc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8006dce:	4b3c      	ldr	r3, [pc, #240]	; (8006ec0 <MX_DMA_Init+0x108>)
 8006dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4b38      	ldr	r3, [pc, #224]	; (8006ec0 <MX_DMA_Init+0x108>)
 8006de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de2:	4a37      	ldr	r2, [pc, #220]	; (8006ec0 <MX_DMA_Init+0x108>)
 8006de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006de8:	6313      	str	r3, [r2, #48]	; 0x30
 8006dea:	4b35      	ldr	r3, [pc, #212]	; (8006ec0 <MX_DMA_Init+0x108>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	200b      	movs	r0, #11
 8006dfc:	f002 f9e7 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006e00:	200b      	movs	r0, #11
 8006e02:	f002 fa00 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006e06:	2200      	movs	r2, #0
 8006e08:	2100      	movs	r1, #0
 8006e0a:	200c      	movs	r0, #12
 8006e0c:	f002 f9df 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006e10:	200c      	movs	r0, #12
 8006e12:	f002 f9f8 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	200e      	movs	r0, #14
 8006e1c:	f002 f9d7 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006e20:	200e      	movs	r0, #14
 8006e22:	f002 f9f0 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006e26:	2200      	movs	r2, #0
 8006e28:	2100      	movs	r1, #0
 8006e2a:	200f      	movs	r0, #15
 8006e2c:	f002 f9cf 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006e30:	200f      	movs	r0, #15
 8006e32:	f002 f9e8 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006e36:	2200      	movs	r2, #0
 8006e38:	2100      	movs	r1, #0
 8006e3a:	2010      	movs	r0, #16
 8006e3c:	f002 f9c7 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006e40:	2010      	movs	r0, #16
 8006e42:	f002 f9e0 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8006e46:	2200      	movs	r2, #0
 8006e48:	2100      	movs	r1, #0
 8006e4a:	2011      	movs	r0, #17
 8006e4c:	f002 f9bf 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8006e50:	2011      	movs	r0, #17
 8006e52:	f002 f9d8 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8006e56:	2200      	movs	r2, #0
 8006e58:	2100      	movs	r1, #0
 8006e5a:	202f      	movs	r0, #47	; 0x2f
 8006e5c:	f002 f9b7 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8006e60:	202f      	movs	r0, #47	; 0x2f
 8006e62:	f002 f9d0 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	2038      	movs	r0, #56	; 0x38
 8006e6c:	f002 f9af 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006e70:	2038      	movs	r0, #56	; 0x38
 8006e72:	f002 f9c8 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2039      	movs	r0, #57	; 0x39
 8006e7c:	f002 f9a7 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006e80:	2039      	movs	r0, #57	; 0x39
 8006e82:	f002 f9c0 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006e86:	2200      	movs	r2, #0
 8006e88:	2100      	movs	r1, #0
 8006e8a:	203a      	movs	r0, #58	; 0x3a
 8006e8c:	f002 f99f 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006e90:	203a      	movs	r0, #58	; 0x3a
 8006e92:	f002 f9b8 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006e96:	2200      	movs	r2, #0
 8006e98:	2100      	movs	r1, #0
 8006e9a:	203b      	movs	r0, #59	; 0x3b
 8006e9c:	f002 f997 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006ea0:	203b      	movs	r0, #59	; 0x3b
 8006ea2:	f002 f9b0 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	2045      	movs	r0, #69	; 0x45
 8006eac:	f002 f98f 	bl	80091ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006eb0:	2045      	movs	r0, #69	; 0x45
 8006eb2:	f002 f9a8 	bl	8009206 <HAL_NVIC_EnableIRQ>

}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40023800 	.word	0x40023800

08006ec4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eca:	f107 0314 	add.w	r3, r7, #20
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	605a      	str	r2, [r3, #4]
 8006ed4:	609a      	str	r2, [r3, #8]
 8006ed6:	60da      	str	r2, [r3, #12]
 8006ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	4b3a      	ldr	r3, [pc, #232]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	4a39      	ldr	r2, [pc, #228]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006ee4:	f043 0304 	orr.w	r3, r3, #4
 8006ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eea:	4b37      	ldr	r3, [pc, #220]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	f003 0304 	and.w	r3, r3, #4
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	4b33      	ldr	r3, [pc, #204]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	4a32      	ldr	r2, [pc, #200]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f04:	6313      	str	r3, [r2, #48]	; 0x30
 8006f06:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f12:	2300      	movs	r3, #0
 8006f14:	60bb      	str	r3, [r7, #8]
 8006f16:	4b2c      	ldr	r3, [pc, #176]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	4a2b      	ldr	r2, [pc, #172]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	6313      	str	r3, [r2, #48]	; 0x30
 8006f22:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	4b25      	ldr	r3, [pc, #148]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	4a24      	ldr	r2, [pc, #144]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f38:	f043 0302 	orr.w	r3, r3, #2
 8006f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f3e:	4b22      	ldr	r3, [pc, #136]	; (8006fc8 <MX_GPIO_Init+0x104>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	607b      	str	r3, [r7, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8006f50:	481e      	ldr	r0, [pc, #120]	; (8006fcc <MX_GPIO_Init+0x108>)
 8006f52:	f002 feb7 	bl	8009cc4 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8006f56:	2201      	movs	r2, #1
 8006f58:	2101      	movs	r1, #1
 8006f5a:	481c      	ldr	r0, [pc, #112]	; (8006fcc <MX_GPIO_Init+0x108>)
 8006f5c:	f002 feb2 	bl	8009cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 8006f60:	2200      	movs	r2, #0
 8006f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f66:	481a      	ldr	r0, [pc, #104]	; (8006fd0 <MX_GPIO_Init+0x10c>)
 8006f68:	f002 feac 	bl	8009cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8006f6c:	f24e 231d 	movw	r3, #57885	; 0xe21d
 8006f70:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f7e:	f107 0314 	add.w	r3, r7, #20
 8006f82:	4619      	mov	r1, r3
 8006f84:	4811      	ldr	r0, [pc, #68]	; (8006fcc <MX_GPIO_Init+0x108>)
 8006f86:	f002 fd03 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8006f96:	f107 0314 	add.w	r3, r7, #20
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	480d      	ldr	r0, [pc, #52]	; (8006fd4 <MX_GPIO_Init+0x110>)
 8006f9e:	f002 fcf7 	bl	8009990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8006fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8006fb4:	f107 0314 	add.w	r3, r7, #20
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4805      	ldr	r0, [pc, #20]	; (8006fd0 <MX_GPIO_Init+0x10c>)
 8006fbc:	f002 fce8 	bl	8009990 <HAL_GPIO_Init>

}
 8006fc0:	bf00      	nop
 8006fc2:	3728      	adds	r7, #40	; 0x28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	40020800 	.word	0x40020800
 8006fd0:	40020400 	.word	0x40020400
 8006fd4:	40020000 	.word	0x40020000

08006fd8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <MX_I2C1_Init+0x50>)
 8006fde:	4a13      	ldr	r2, [pc, #76]	; (800702c <MX_I2C1_Init+0x54>)
 8006fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006fe2:	4b11      	ldr	r3, [pc, #68]	; (8007028 <MX_I2C1_Init+0x50>)
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <MX_I2C1_Init+0x58>)
 8006fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <MX_I2C1_Init+0x50>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006fee:	4b0e      	ldr	r3, [pc, #56]	; (8007028 <MX_I2C1_Init+0x50>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <MX_I2C1_Init+0x50>)
 8006ff6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <MX_I2C1_Init+0x50>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <MX_I2C1_Init+0x50>)
 8007004:	2200      	movs	r2, #0
 8007006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007008:	4b07      	ldr	r3, [pc, #28]	; (8007028 <MX_I2C1_Init+0x50>)
 800700a:	2200      	movs	r2, #0
 800700c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <MX_I2C1_Init+0x50>)
 8007010:	2200      	movs	r2, #0
 8007012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007014:	4804      	ldr	r0, [pc, #16]	; (8007028 <MX_I2C1_Init+0x50>)
 8007016:	f002 fe6f 	bl	8009cf8 <HAL_I2C_Init>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007020:	f000 fa00 	bl	8007424 <Error_Handler>
  }

}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}
 8007028:	20002810 	.word	0x20002810
 800702c:	40005400 	.word	0x40005400
 8007030:	00061a80 	.word	0x00061a80

08007034 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800703c:	f107 0314 	add.w	r3, r7, #20
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	609a      	str	r2, [r3, #8]
 8007048:	60da      	str	r2, [r3, #12]
 800704a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a4f      	ldr	r2, [pc, #316]	; (8007190 <HAL_I2C_MspInit+0x15c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	f040 8098 	bne.w	8007188 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	4b4d      	ldr	r3, [pc, #308]	; (8007194 <HAL_I2C_MspInit+0x160>)
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	4a4c      	ldr	r2, [pc, #304]	; (8007194 <HAL_I2C_MspInit+0x160>)
 8007062:	f043 0302 	orr.w	r3, r3, #2
 8007066:	6313      	str	r3, [r2, #48]	; 0x30
 8007068:	4b4a      	ldr	r3, [pc, #296]	; (8007194 <HAL_I2C_MspInit+0x160>)
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007074:	23c0      	movs	r3, #192	; 0xc0
 8007076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007078:	2312      	movs	r3, #18
 800707a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800707c:	2301      	movs	r3, #1
 800707e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007080:	2303      	movs	r3, #3
 8007082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007084:	2304      	movs	r3, #4
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007088:	f107 0314 	add.w	r3, r7, #20
 800708c:	4619      	mov	r1, r3
 800708e:	4842      	ldr	r0, [pc, #264]	; (8007198 <HAL_I2C_MspInit+0x164>)
 8007090:	f002 fc7e 	bl	8009990 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	4b3e      	ldr	r3, [pc, #248]	; (8007194 <HAL_I2C_MspInit+0x160>)
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	4a3d      	ldr	r2, [pc, #244]	; (8007194 <HAL_I2C_MspInit+0x160>)
 800709e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070a2:	6413      	str	r3, [r2, #64]	; 0x40
 80070a4:	4b3b      	ldr	r3, [pc, #236]	; (8007194 <HAL_I2C_MspInit+0x160>)
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80070b0:	4b3a      	ldr	r3, [pc, #232]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070b2:	4a3b      	ldr	r2, [pc, #236]	; (80071a0 <HAL_I2C_MspInit+0x16c>)
 80070b4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80070b6:	4b39      	ldr	r3, [pc, #228]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070bc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070be:	4b37      	ldr	r3, [pc, #220]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070c4:	4b35      	ldr	r3, [pc, #212]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070ca:	4b34      	ldr	r3, [pc, #208]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070d2:	4b32      	ldr	r3, [pc, #200]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070d8:	4b30      	ldr	r3, [pc, #192]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070da:	2200      	movs	r2, #0
 80070dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80070de:	4b2f      	ldr	r3, [pc, #188]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070e4:	4b2d      	ldr	r3, [pc, #180]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070ea:	4b2c      	ldr	r3, [pc, #176]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80070f0:	482a      	ldr	r0, [pc, #168]	; (800719c <HAL_I2C_MspInit+0x168>)
 80070f2:	f002 f8a3 	bl	800923c <HAL_DMA_Init>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80070fc:	f000 f992 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a26      	ldr	r2, [pc, #152]	; (800719c <HAL_I2C_MspInit+0x168>)
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
 8007106:	4a25      	ldr	r2, [pc, #148]	; (800719c <HAL_I2C_MspInit+0x168>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800710c:	4b25      	ldr	r3, [pc, #148]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 800710e:	4a26      	ldr	r2, [pc, #152]	; (80071a8 <HAL_I2C_MspInit+0x174>)
 8007110:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8007112:	4b24      	ldr	r3, [pc, #144]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007114:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007118:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800711a:	4b22      	ldr	r3, [pc, #136]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 800711c:	2240      	movs	r2, #64	; 0x40
 800711e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007120:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007122:	2200      	movs	r2, #0
 8007124:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007126:	4b1f      	ldr	r3, [pc, #124]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800712c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800712e:	4b1d      	ldr	r3, [pc, #116]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007130:	2200      	movs	r2, #0
 8007132:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007134:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007136:	2200      	movs	r2, #0
 8007138:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800713a:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 800713c:	2200      	movs	r2, #0
 800713e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007140:	4b18      	ldr	r3, [pc, #96]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007142:	2200      	movs	r2, #0
 8007144:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007146:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007148:	2200      	movs	r2, #0
 800714a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800714c:	4815      	ldr	r0, [pc, #84]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 800714e:	f002 f875 	bl	800923c <HAL_DMA_Init>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8007158:	f000 f964 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a11      	ldr	r2, [pc, #68]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007160:	635a      	str	r2, [r3, #52]	; 0x34
 8007162:	4a10      	ldr	r2, [pc, #64]	; (80071a4 <HAL_I2C_MspInit+0x170>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007168:	2200      	movs	r2, #0
 800716a:	2100      	movs	r1, #0
 800716c:	201f      	movs	r0, #31
 800716e:	f002 f82e 	bl	80091ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007172:	201f      	movs	r0, #31
 8007174:	f002 f847 	bl	8009206 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8007178:	2200      	movs	r2, #0
 800717a:	2100      	movs	r1, #0
 800717c:	2020      	movs	r0, #32
 800717e:	f002 f826 	bl	80091ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007182:	2020      	movs	r0, #32
 8007184:	f002 f83f 	bl	8009206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007188:	bf00      	nop
 800718a:	3728      	adds	r7, #40	; 0x28
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40005400 	.word	0x40005400
 8007194:	40023800 	.word	0x40023800
 8007198:	40020400 	.word	0x40020400
 800719c:	20002864 	.word	0x20002864
 80071a0:	40026010 	.word	0x40026010
 80071a4:	200027b0 	.word	0x200027b0
 80071a8:	400260b8 	.word	0x400260b8

080071ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80071b2:	f001 faa9 	bl	8008708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80071b6:	f000 f8cb 	bl	8007350 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);	//Let the time to the components to start
 80071ba:	20c8      	movs	r0, #200	; 0xc8
 80071bc:	f001 fb16 	bl	80087ec <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80071c0:	f7ff fe80 	bl	8006ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 80071c4:	f7ff fdf8 	bl	8006db8 <MX_DMA_Init>
  MX_I2C1_Init();
 80071c8:	f7ff ff06 	bl	8006fd8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80071cc:	f000 f932 	bl	8007434 <MX_SPI1_Init>
  MX_SPI2_Init();
 80071d0:	f000 f966 	bl	80074a0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80071d4:	f000 fc6a 	bl	8007aac <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80071d8:	f000 fe3e 	bl	8007e58 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80071dc:	f000 fe66 	bl	8007eac <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80071e0:	f000 fe8e 	bl	8007f00 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 80071e4:	f7ff fd02 	bl	8006bec <MX_ADC2_Init>
  MX_TIM2_Init();
 80071e8:	f000 fd26 	bl	8007c38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);	//Let the time for the components to start
 80071ec:	20c8      	movs	r0, #200	; 0xc8
 80071ee:	f001 fafd 	bl	80087ec <HAL_Delay>



  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 80071f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071f6:	4a3c      	ldr	r2, [pc, #240]	; (80072e8 <main+0x13c>)
 80071f8:	493c      	ldr	r1, [pc, #240]	; (80072ec <main+0x140>)
 80071fa:	483d      	ldr	r0, [pc, #244]	; (80072f0 <main+0x144>)
 80071fc:	f7fe ffbe 	bl	800617c <MPU_init>
  HAL_Delay(200);	//Let the time for the components to start
 8007200:	20c8      	movs	r0, #200	; 0xc8
 8007202:	f001 faf3 	bl	80087ec <HAL_Delay>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 8007206:	493a      	ldr	r1, [pc, #232]	; (80072f0 <main+0x144>)
 8007208:	483a      	ldr	r0, [pc, #232]	; (80072f4 <main+0x148>)
 800720a:	f7fe fdaf 	bl	8005d6c <GYRO_init>
  HAL_Delay(200);	//Let the time for the components to start
 800720e:	20c8      	movs	r0, #200	; 0xc8
 8007210:	f001 faec 	bl	80087ec <HAL_Delay>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 8007214:	4936      	ldr	r1, [pc, #216]	; (80072f0 <main+0x144>)
 8007216:	4838      	ldr	r0, [pc, #224]	; (80072f8 <main+0x14c>)
 8007218:	f7fe fac0 	bl	800579c <ACC_init>

  //Init du baromètre
  BARO_init(&sys.sensors.baro, &sys.sensors.ms5611, &hi2c1);
 800721c:	4a37      	ldr	r2, [pc, #220]	; (80072fc <main+0x150>)
 800721e:	4938      	ldr	r1, [pc, #224]	; (8007300 <main+0x154>)
 8007220:	4838      	ldr	r0, [pc, #224]	; (8007304 <main+0x158>)
 8007222:	f7fe fc3b 	bl	8005a9c <BARO_init>

  IHM_Init(&sys.ihm);
 8007226:	4838      	ldr	r0, [pc, #224]	; (8007308 <main+0x15c>)
 8007228:	f7fc f812 	bl	8003250 <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 800722c:	2301      	movs	r3, #1
 800722e:	2201      	movs	r2, #1
 8007230:	211e      	movs	r1, #30
 8007232:	2000      	movs	r0, #0
 8007234:	f7fc f81c 	bl	8003270 <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 8007238:	2301      	movs	r3, #1
 800723a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800723e:	211e      	movs	r1, #30
 8007240:	2001      	movs	r0, #1
 8007242:	f7fc f815 	bl	8003270 <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8007246:	2300      	movs	r3, #0
 8007248:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800724c:	2100      	movs	r1, #0
 800724e:	2000      	movs	r0, #0
 8007250:	f7fc f87c 	bl	800334c <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8007254:	2300      	movs	r3, #0
 8007256:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800725a:	2100      	movs	r1, #0
 800725c:	2001      	movs	r0, #1
 800725e:	f7fc f875 	bl	800334c <IHM_Set_Sequences>
  BUZZER_Init(&sys.ihm.buzzer, &htim2);
 8007262:	492a      	ldr	r1, [pc, #168]	; (800730c <main+0x160>)
 8007264:	482a      	ldr	r0, [pc, #168]	; (8007310 <main+0x164>)
 8007266:	f009 fc4f 	bl	8010b08 <BUZZER_Init>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 800726a:	492a      	ldr	r1, [pc, #168]	; (8007314 <main+0x168>)
 800726c:	482a      	ldr	r0, [pc, #168]	; (8007318 <main+0x16c>)
 800726e:	f7fe fd69 	bl	8005d44 <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 8007272:	492a      	ldr	r1, [pc, #168]	; (800731c <main+0x170>)
 8007274:	482a      	ldr	r0, [pc, #168]	; (8007320 <main+0x174>)
 8007276:	f7fd fd8f 	bl	8004d98 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 800727a:	4a2a      	ldr	r2, [pc, #168]	; (8007324 <main+0x178>)
 800727c:	492a      	ldr	r1, [pc, #168]	; (8007328 <main+0x17c>)
 800727e:	4827      	ldr	r0, [pc, #156]	; (800731c <main+0x170>)
 8007280:	f009 f8ae 	bl	80103e0 <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 8007284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007288:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <main+0x14c>)
 800728a:	491a      	ldr	r1, [pc, #104]	; (80072f4 <main+0x148>)
 800728c:	4827      	ldr	r0, [pc, #156]	; (800732c <main+0x180>)
 800728e:	f7fb f905 	bl	800249c <ORIENTATION_Init>
  POSITION_Init(&sys.position, &sys.orientation, &sys.sensors.acc, &sys.sensors.baro, GYRO_FREQUENCY);
 8007292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007296:	9300      	str	r3, [sp, #0]
 8007298:	4b1a      	ldr	r3, [pc, #104]	; (8007304 <main+0x158>)
 800729a:	4a17      	ldr	r2, [pc, #92]	; (80072f8 <main+0x14c>)
 800729c:	4923      	ldr	r1, [pc, #140]	; (800732c <main+0x180>)
 800729e:	4824      	ldr	r0, [pc, #144]	; (8007330 <main+0x184>)
 80072a0:	f7fb fa96 	bl	80027d0 <POSITION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 80072a4:	4a23      	ldr	r2, [pc, #140]	; (8007334 <main+0x188>)
 80072a6:	4921      	ldr	r1, [pc, #132]	; (800732c <main+0x180>)
 80072a8:	4823      	ldr	r0, [pc, #140]	; (8007338 <main+0x18c>)
 80072aa:	f7fe f83f 	bl	800532c <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.position, sys.propulsion.consigne);
 80072ae:	4a21      	ldr	r2, [pc, #132]	; (8007334 <main+0x188>)
 80072b0:	491f      	ldr	r1, [pc, #124]	; (8007330 <main+0x184>)
 80072b2:	4822      	ldr	r0, [pc, #136]	; (800733c <main+0x190>)
 80072b4:	f7fe f9ce 	bl	8005654 <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 80072b8:	4921      	ldr	r1, [pc, #132]	; (8007340 <main+0x194>)
 80072ba:	4822      	ldr	r0, [pc, #136]	; (8007344 <main+0x198>)
 80072bc:	f7fd fcb4 	bl	8004c28 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 80072c0:	4921      	ldr	r1, [pc, #132]	; (8007348 <main+0x19c>)
 80072c2:	4822      	ldr	r0, [pc, #136]	; (800734c <main+0x1a0>)
 80072c4:	f001 f850 	bl	8008368 <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 80072c8:	480f      	ldr	r0, [pc, #60]	; (8007308 <main+0x15c>)
 80072ca:	f7fb fd7b 	bl	8002dc4 <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 80072ce:	480e      	ldr	r0, [pc, #56]	; (8007308 <main+0x15c>)
 80072d0:	f7fc ff68 	bl	80041a4 <SCHEDULER_init>
  EVENT_init(&sys);
 80072d4:	480c      	ldr	r0, [pc, #48]	; (8007308 <main+0x15c>)
 80072d6:	f7fc fbcf 	bl	8003a78 <EVENT_init>

  DATA_LOGGER_Init(&sys);
 80072da:	480b      	ldr	r0, [pc, #44]	; (8007308 <main+0x15c>)
 80072dc:	f7f9 fe34 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 80072e0:	f7fc ff72 	bl	80041c8 <SCHEDULER_run>
 80072e4:	e7fc      	b.n	80072e0 <main+0x134>
 80072e6:	bf00      	nop
 80072e8:	40020400 	.word	0x40020400
 80072ec:	200036d0 	.word	0x200036d0
 80072f0:	20002a84 	.word	0x20002a84
 80072f4:	20002900 	.word	0x20002900
 80072f8:	20002974 	.word	0x20002974
 80072fc:	20002810 	.word	0x20002810
 8007300:	20002b04 	.word	0x20002b04
 8007304:	20002a2c 	.word	0x20002a2c
 8007308:	200028c4 	.word	0x200028c4
 800730c:	20003940 	.word	0x20003940
 8007310:	200028f4 	.word	0x200028f4
 8007314:	20002708 	.word	0x20002708
 8007318:	200029e8 	.word	0x200029e8
 800731c:	20002be8 	.word	0x20002be8
 8007320:	20002c48 	.word	0x20002c48
 8007324:	0800531f 	.word	0x0800531f
 8007328:	20003aa0 	.word	0x20003aa0
 800732c:	20002b40 	.word	0x20002b40
 8007330:	20002b74 	.word	0x20002b74
 8007334:	200032dc 	.word	0x200032dc
 8007338:	200032ec 	.word	0x200032ec
 800733c:	200034d8 	.word	0x200034d8
 8007340:	20003900 	.word	0x20003900
 8007344:	200032cc 	.word	0x200032cc
 8007348:	20003be0 	.word	0x20003be0
 800734c:	20002ca0 	.word	0x20002ca0

08007350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b094      	sub	sp, #80	; 0x50
 8007354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007356:	f107 0320 	add.w	r3, r7, #32
 800735a:	2230      	movs	r2, #48	; 0x30
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f009 fc7c 	bl	8010c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007374:	2300      	movs	r3, #0
 8007376:	60bb      	str	r3, [r7, #8]
 8007378:	4b28      	ldr	r3, [pc, #160]	; (800741c <SystemClock_Config+0xcc>)
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	4a27      	ldr	r2, [pc, #156]	; (800741c <SystemClock_Config+0xcc>)
 800737e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007382:	6413      	str	r3, [r2, #64]	; 0x40
 8007384:	4b25      	ldr	r3, [pc, #148]	; (800741c <SystemClock_Config+0xcc>)
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007390:	2300      	movs	r3, #0
 8007392:	607b      	str	r3, [r7, #4]
 8007394:	4b22      	ldr	r3, [pc, #136]	; (8007420 <SystemClock_Config+0xd0>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a21      	ldr	r2, [pc, #132]	; (8007420 <SystemClock_Config+0xd0>)
 800739a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	4b1f      	ldr	r3, [pc, #124]	; (8007420 <SystemClock_Config+0xd0>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a8:	607b      	str	r3, [r7, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80073ac:	2302      	movs	r3, #2
 80073ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073b0:	2301      	movs	r3, #1
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80073b4:	2310      	movs	r3, #16
 80073b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073b8:	2302      	movs	r3, #2
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80073bc:	2300      	movs	r3, #0
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80073c0:	2308      	movs	r3, #8
 80073c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80073c4:	23a8      	movs	r3, #168	; 0xa8
 80073c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80073c8:	2302      	movs	r3, #2
 80073ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80073cc:	2304      	movs	r3, #4
 80073ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073d0:	f107 0320 	add.w	r3, r7, #32
 80073d4:	4618      	mov	r0, r3
 80073d6:	f005 fbe5 	bl	800cba4 <HAL_RCC_OscConfig>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80073e0:	f000 f820 	bl	8007424 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073e4:	230f      	movs	r3, #15
 80073e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073e8:	2302      	movs	r3, #2
 80073ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073ec:	2300      	movs	r3, #0
 80073ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80073f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80073f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80073f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80073fc:	f107 030c 	add.w	r3, r7, #12
 8007400:	2105      	movs	r1, #5
 8007402:	4618      	mov	r0, r3
 8007404:	f005 fe3e 	bl	800d084 <HAL_RCC_ClockConfig>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800740e:	f000 f809 	bl	8007424 <Error_Handler>
  }
}
 8007412:	bf00      	nop
 8007414:	3750      	adds	r7, #80	; 0x50
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40023800 	.word	0x40023800
 8007420:	40007000 	.word	0x40007000

08007424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007428:	bf00      	nop
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
	...

08007434 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8007438:	4b17      	ldr	r3, [pc, #92]	; (8007498 <MX_SPI1_Init+0x64>)
 800743a:	4a18      	ldr	r2, [pc, #96]	; (800749c <MX_SPI1_Init+0x68>)
 800743c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800743e:	4b16      	ldr	r3, [pc, #88]	; (8007498 <MX_SPI1_Init+0x64>)
 8007440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007446:	4b14      	ldr	r3, [pc, #80]	; (8007498 <MX_SPI1_Init+0x64>)
 8007448:	2200      	movs	r2, #0
 800744a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800744c:	4b12      	ldr	r3, [pc, #72]	; (8007498 <MX_SPI1_Init+0x64>)
 800744e:	2200      	movs	r2, #0
 8007450:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007452:	4b11      	ldr	r3, [pc, #68]	; (8007498 <MX_SPI1_Init+0x64>)
 8007454:	2200      	movs	r2, #0
 8007456:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007458:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <MX_SPI1_Init+0x64>)
 800745a:	2200      	movs	r2, #0
 800745c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <MX_SPI1_Init+0x64>)
 8007460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007464:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8007466:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <MX_SPI1_Init+0x64>)
 8007468:	2238      	movs	r2, #56	; 0x38
 800746a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <MX_SPI1_Init+0x64>)
 800746e:	2200      	movs	r2, #0
 8007470:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007472:	4b09      	ldr	r3, [pc, #36]	; (8007498 <MX_SPI1_Init+0x64>)
 8007474:	2200      	movs	r2, #0
 8007476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007478:	4b07      	ldr	r3, [pc, #28]	; (8007498 <MX_SPI1_Init+0x64>)
 800747a:	2200      	movs	r2, #0
 800747c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800747e:	4b06      	ldr	r3, [pc, #24]	; (8007498 <MX_SPI1_Init+0x64>)
 8007480:	220a      	movs	r2, #10
 8007482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007484:	4804      	ldr	r0, [pc, #16]	; (8007498 <MX_SPI1_Init+0x64>)
 8007486:	f005 ffc9 	bl	800d41c <HAL_SPI_Init>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007490:	f7ff ffc8 	bl	8007424 <Error_Handler>
  }

}
 8007494:	bf00      	nop
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20003788 	.word	0x20003788
 800749c:	40013000 	.word	0x40013000

080074a0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80074a4:	4b17      	ldr	r3, [pc, #92]	; (8007504 <MX_SPI2_Init+0x64>)
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <MX_SPI2_Init+0x68>)
 80074a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80074aa:	4b16      	ldr	r3, [pc, #88]	; (8007504 <MX_SPI2_Init+0x64>)
 80074ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80074b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <MX_SPI2_Init+0x64>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80074b8:	4b12      	ldr	r3, [pc, #72]	; (8007504 <MX_SPI2_Init+0x64>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <MX_SPI2_Init+0x64>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074c4:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <MX_SPI2_Init+0x64>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80074ca:	4b0e      	ldr	r3, [pc, #56]	; (8007504 <MX_SPI2_Init+0x64>)
 80074cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <MX_SPI2_Init+0x64>)
 80074d4:	2228      	movs	r2, #40	; 0x28
 80074d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <MX_SPI2_Init+0x64>)
 80074da:	2200      	movs	r2, #0
 80074dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <MX_SPI2_Init+0x64>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <MX_SPI2_Init+0x64>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <MX_SPI2_Init+0x64>)
 80074ec:	220a      	movs	r2, #10
 80074ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80074f0:	4804      	ldr	r0, [pc, #16]	; (8007504 <MX_SPI2_Init+0x64>)
 80074f2:	f005 ff93 	bl	800d41c <HAL_SPI_Init>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80074fc:	f7ff ff92 	bl	8007424 <Error_Handler>
  }

}
 8007500:	bf00      	nop
 8007502:	bd80      	pop	{r7, pc}
 8007504:	200036d0 	.word	0x200036d0
 8007508:	40003800 	.word	0x40003800

0800750c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007514:	f107 031c 	add.w	r3, r7, #28
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	60da      	str	r2, [r3, #12]
 8007522:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a8e      	ldr	r2, [pc, #568]	; (8007764 <HAL_SPI_MspInit+0x258>)
 800752a:	4293      	cmp	r3, r2
 800752c:	f040 8089 	bne.w	8007642 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007530:	2300      	movs	r3, #0
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	4b8c      	ldr	r3, [pc, #560]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007538:	4a8b      	ldr	r2, [pc, #556]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 800753a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800753e:	6453      	str	r3, [r2, #68]	; 0x44
 8007540:	4b89      	ldr	r3, [pc, #548]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	4b85      	ldr	r3, [pc, #532]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	4a84      	ldr	r2, [pc, #528]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007556:	f043 0301 	orr.w	r3, r3, #1
 800755a:	6313      	str	r3, [r2, #48]	; 0x30
 800755c:	4b82      	ldr	r3, [pc, #520]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007568:	23e0      	movs	r3, #224	; 0xe0
 800756a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800756c:	2302      	movs	r3, #2
 800756e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007570:	2300      	movs	r3, #0
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007574:	2303      	movs	r3, #3
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007578:	2305      	movs	r3, #5
 800757a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800757c:	f107 031c 	add.w	r3, r7, #28
 8007580:	4619      	mov	r1, r3
 8007582:	487a      	ldr	r0, [pc, #488]	; (800776c <HAL_SPI_MspInit+0x260>)
 8007584:	f002 fa04 	bl	8009990 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8007588:	4b79      	ldr	r3, [pc, #484]	; (8007770 <HAL_SPI_MspInit+0x264>)
 800758a:	4a7a      	ldr	r2, [pc, #488]	; (8007774 <HAL_SPI_MspInit+0x268>)
 800758c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800758e:	4b78      	ldr	r3, [pc, #480]	; (8007770 <HAL_SPI_MspInit+0x264>)
 8007590:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007594:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007596:	4b76      	ldr	r3, [pc, #472]	; (8007770 <HAL_SPI_MspInit+0x264>)
 8007598:	2200      	movs	r2, #0
 800759a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800759c:	4b74      	ldr	r3, [pc, #464]	; (8007770 <HAL_SPI_MspInit+0x264>)
 800759e:	2200      	movs	r2, #0
 80075a0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075a2:	4b73      	ldr	r3, [pc, #460]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075a8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075aa:	4b71      	ldr	r3, [pc, #452]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075b0:	4b6f      	ldr	r3, [pc, #444]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80075b6:	4b6e      	ldr	r3, [pc, #440]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80075bc:	4b6c      	ldr	r3, [pc, #432]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075be:	2200      	movs	r2, #0
 80075c0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80075c2:	4b6b      	ldr	r3, [pc, #428]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80075c8:	4869      	ldr	r0, [pc, #420]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075ca:	f001 fe37 	bl	800923c <HAL_DMA_Init>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80075d4:	f7ff ff26 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a65      	ldr	r2, [pc, #404]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80075de:	4a64      	ldr	r2, [pc, #400]	; (8007770 <HAL_SPI_MspInit+0x264>)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80075e4:	4b64      	ldr	r3, [pc, #400]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 80075e6:	4a65      	ldr	r2, [pc, #404]	; (800777c <HAL_SPI_MspInit+0x270>)
 80075e8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80075ea:	4b63      	ldr	r3, [pc, #396]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 80075ec:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80075f0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80075f2:	4b61      	ldr	r3, [pc, #388]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 80075f4:	2240      	movs	r2, #64	; 0x40
 80075f6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075f8:	4b5f      	ldr	r3, [pc, #380]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80075fe:	4b5e      	ldr	r3, [pc, #376]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 8007600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007604:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007606:	4b5c      	ldr	r3, [pc, #368]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 8007608:	2200      	movs	r2, #0
 800760a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800760c:	4b5a      	ldr	r3, [pc, #360]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 800760e:	2200      	movs	r2, #0
 8007610:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8007612:	4b59      	ldr	r3, [pc, #356]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 8007614:	2200      	movs	r2, #0
 8007616:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007618:	4b57      	ldr	r3, [pc, #348]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 800761a:	2200      	movs	r2, #0
 800761c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800761e:	4b56      	ldr	r3, [pc, #344]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 8007620:	2200      	movs	r2, #0
 8007622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007624:	4854      	ldr	r0, [pc, #336]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 8007626:	f001 fe09 	bl	800923c <HAL_DMA_Init>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8007630:	f7ff fef8 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a50      	ldr	r2, [pc, #320]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 8007638:	649a      	str	r2, [r3, #72]	; 0x48
 800763a:	4a4f      	ldr	r2, [pc, #316]	; (8007778 <HAL_SPI_MspInit+0x26c>)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007640:	e08c      	b.n	800775c <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a4e      	ldr	r2, [pc, #312]	; (8007780 <HAL_SPI_MspInit+0x274>)
 8007648:	4293      	cmp	r3, r2
 800764a:	f040 8087 	bne.w	800775c <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800764e:	2300      	movs	r3, #0
 8007650:	613b      	str	r3, [r7, #16]
 8007652:	4b45      	ldr	r3, [pc, #276]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	4a44      	ldr	r2, [pc, #272]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800765c:	6413      	str	r3, [r2, #64]	; 0x40
 800765e:	4b42      	ldr	r3, [pc, #264]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007666:	613b      	str	r3, [r7, #16]
 8007668:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	4b3e      	ldr	r3, [pc, #248]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	4a3d      	ldr	r2, [pc, #244]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 8007674:	f043 0302 	orr.w	r3, r3, #2
 8007678:	6313      	str	r3, [r2, #48]	; 0x30
 800767a:	4b3b      	ldr	r3, [pc, #236]	; (8007768 <HAL_SPI_MspInit+0x25c>)
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007686:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800768a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800768c:	2302      	movs	r3, #2
 800768e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007690:	2300      	movs	r3, #0
 8007692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007694:	2303      	movs	r3, #3
 8007696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007698:	2305      	movs	r3, #5
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800769c:	f107 031c 	add.w	r3, r7, #28
 80076a0:	4619      	mov	r1, r3
 80076a2:	4838      	ldr	r0, [pc, #224]	; (8007784 <HAL_SPI_MspInit+0x278>)
 80076a4:	f002 f974 	bl	8009990 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80076a8:	4b37      	ldr	r3, [pc, #220]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076aa:	4a38      	ldr	r2, [pc, #224]	; (800778c <HAL_SPI_MspInit+0x280>)
 80076ac:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80076ae:	4b36      	ldr	r3, [pc, #216]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076b4:	4b34      	ldr	r3, [pc, #208]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076ba:	4b33      	ldr	r3, [pc, #204]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076bc:	2200      	movs	r2, #0
 80076be:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80076c0:	4b31      	ldr	r3, [pc, #196]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076c6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076c8:	4b2f      	ldr	r3, [pc, #188]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076ce:	4b2e      	ldr	r3, [pc, #184]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80076d4:	4b2c      	ldr	r3, [pc, #176]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80076da:	4b2b      	ldr	r3, [pc, #172]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076dc:	2200      	movs	r2, #0
 80076de:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80076e0:	4b29      	ldr	r3, [pc, #164]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80076e6:	4828      	ldr	r0, [pc, #160]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076e8:	f001 fda8 	bl	800923c <HAL_DMA_Init>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 80076f2:	f7ff fe97 	bl	8007424 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a23      	ldr	r2, [pc, #140]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80076fc:	4a22      	ldr	r2, [pc, #136]	; (8007788 <HAL_SPI_MspInit+0x27c>)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8007702:	4b23      	ldr	r3, [pc, #140]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007704:	4a23      	ldr	r2, [pc, #140]	; (8007794 <HAL_SPI_MspInit+0x288>)
 8007706:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8007708:	4b21      	ldr	r3, [pc, #132]	; (8007790 <HAL_SPI_MspInit+0x284>)
 800770a:	2200      	movs	r2, #0
 800770c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800770e:	4b20      	ldr	r3, [pc, #128]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007710:	2240      	movs	r2, #64	; 0x40
 8007712:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007714:	4b1e      	ldr	r3, [pc, #120]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007716:	2200      	movs	r2, #0
 8007718:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800771a:	4b1d      	ldr	r3, [pc, #116]	; (8007790 <HAL_SPI_MspInit+0x284>)
 800771c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007720:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007722:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007724:	2200      	movs	r2, #0
 8007726:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007728:	4b19      	ldr	r3, [pc, #100]	; (8007790 <HAL_SPI_MspInit+0x284>)
 800772a:	2200      	movs	r2, #0
 800772c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800772e:	4b18      	ldr	r3, [pc, #96]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007730:	2200      	movs	r2, #0
 8007732:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007734:	4b16      	ldr	r3, [pc, #88]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007736:	2200      	movs	r2, #0
 8007738:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800773a:	4b15      	ldr	r3, [pc, #84]	; (8007790 <HAL_SPI_MspInit+0x284>)
 800773c:	2200      	movs	r2, #0
 800773e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8007740:	4813      	ldr	r0, [pc, #76]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007742:	f001 fd7b 	bl	800923c <HAL_DMA_Init>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 800774c:	f7ff fe6a 	bl	8007424 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a0f      	ldr	r2, [pc, #60]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007754:	649a      	str	r2, [r3, #72]	; 0x48
 8007756:	4a0e      	ldr	r2, [pc, #56]	; (8007790 <HAL_SPI_MspInit+0x284>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800775c:	bf00      	nop
 800775e:	3730      	adds	r7, #48	; 0x30
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40013000 	.word	0x40013000
 8007768:	40023800 	.word	0x40023800
 800776c:	40020000 	.word	0x40020000
 8007770:	200037e0 	.word	0x200037e0
 8007774:	40026410 	.word	0x40026410
 8007778:	200038a0 	.word	0x200038a0
 800777c:	40026458 	.word	0x40026458
 8007780:	40003800 	.word	0x40003800
 8007784:	40020400 	.word	0x40020400
 8007788:	20003728 	.word	0x20003728
 800778c:	40026058 	.word	0x40026058
 8007790:	20003840 	.word	0x20003840
 8007794:	40026070 	.word	0x40026070

08007798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800779e:	2300      	movs	r3, #0
 80077a0:	607b      	str	r3, [r7, #4]
 80077a2:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <HAL_MspInit+0x4c>)
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a6:	4a0f      	ldr	r2, [pc, #60]	; (80077e4 <HAL_MspInit+0x4c>)
 80077a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077ac:	6453      	str	r3, [r2, #68]	; 0x44
 80077ae:	4b0d      	ldr	r3, [pc, #52]	; (80077e4 <HAL_MspInit+0x4c>)
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077ba:	2300      	movs	r3, #0
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	4b09      	ldr	r3, [pc, #36]	; (80077e4 <HAL_MspInit+0x4c>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	4a08      	ldr	r2, [pc, #32]	; (80077e4 <HAL_MspInit+0x4c>)
 80077c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c8:	6413      	str	r3, [r2, #64]	; 0x40
 80077ca:	4b06      	ldr	r3, [pc, #24]	; (80077e4 <HAL_MspInit+0x4c>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40023800 	.word	0x40023800

080077e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80077ec:	bf00      	nop
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077f6:	b480      	push	{r7}
 80077f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077fa:	e7fe      	b.n	80077fa <HardFault_Handler+0x4>

080077fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007800:	e7fe      	b.n	8007800 <MemManage_Handler+0x4>

08007802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007802:	b480      	push	{r7}
 8007804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007806:	e7fe      	b.n	8007806 <BusFault_Handler+0x4>

08007808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800780c:	e7fe      	b.n	800780c <UsageFault_Handler+0x4>

0800780e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800780e:	b480      	push	{r7}
 8007810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007812:	bf00      	nop
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007820:	bf00      	nop
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800782a:	b480      	push	{r7}
 800782c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800782e:	bf00      	nop
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800783c:	f000 ffb6 	bl	80087ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007840:	bf00      	nop
 8007842:	bd80      	pop	{r7, pc}

08007844 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007848:	4802      	ldr	r0, [pc, #8]	; (8007854 <DMA1_Stream0_IRQHandler+0x10>)
 800784a:	f001 fe1f 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800784e:	bf00      	nop
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20002864 	.word	0x20002864

08007858 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800785c:	4802      	ldr	r0, [pc, #8]	; (8007868 <DMA1_Stream1_IRQHandler+0x10>)
 800785e:	f001 fe15 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007862:	bf00      	nop
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20003a40 	.word	0x20003a40

0800786c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007870:	4802      	ldr	r0, [pc, #8]	; (800787c <DMA1_Stream3_IRQHandler+0x10>)
 8007872:	f001 fe0b 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8007876:	bf00      	nop
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20003728 	.word	0x20003728

08007880 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007884:	4802      	ldr	r0, [pc, #8]	; (8007890 <DMA1_Stream4_IRQHandler+0x10>)
 8007886:	f001 fe01 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800788a:	bf00      	nop
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20003840 	.word	0x20003840

08007894 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007898:	4802      	ldr	r0, [pc, #8]	; (80078a4 <DMA1_Stream5_IRQHandler+0x10>)
 800789a:	f001 fdf7 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800789e:	bf00      	nop
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20003980 	.word	0x20003980

080078a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80078ac:	4802      	ldr	r0, [pc, #8]	; (80078b8 <DMA1_Stream6_IRQHandler+0x10>)
 80078ae:	f001 fded 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80078b2:	bf00      	nop
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20003b40 	.word	0x20003b40

080078bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80078c0:	4802      	ldr	r0, [pc, #8]	; (80078cc <TIM2_IRQHandler+0x10>)
 80078c2:	f006 fce5 	bl	800e290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20003940 	.word	0x20003940

080078d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80078d4:	4802      	ldr	r0, [pc, #8]	; (80078e0 <I2C1_EV_IRQHandler+0x10>)
 80078d6:	f003 f923 	bl	800ab20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80078da:	bf00      	nop
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20002810 	.word	0x20002810

080078e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80078e8:	4802      	ldr	r0, [pc, #8]	; (80078f4 <I2C1_ER_IRQHandler+0x10>)
 80078ea:	f003 fa86 	bl	800adfa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */


  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80078ee:	bf00      	nop
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	20002810 	.word	0x20002810

080078f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80078fe:	480d      	ldr	r0, [pc, #52]	; (8007934 <USART2_IRQHandler+0x3c>)
 8007900:	f007 fde8 	bl	800f4d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 8007904:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <USART2_IRQHandler+0x3c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	2b10      	cmp	r3, #16
 8007910:	d10c      	bne.n	800792c <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 8007912:	f000 fee1 	bl	80086d8 <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
 800791a:	4b06      	ldr	r3, [pc, #24]	; (8007934 <USART2_IRQHandler+0x3c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	607b      	str	r3, [r7, #4]
 8007922:	4b04      	ldr	r3, [pc, #16]	; (8007934 <USART2_IRQHandler+0x3c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20003be0 	.word	0x20003be0

08007938 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800793c:	4802      	ldr	r0, [pc, #8]	; (8007948 <USART3_IRQHandler+0x10>)
 800793e:	f007 fdc9 	bl	800f4d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007942:	bf00      	nop
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20003aa0 	.word	0x20003aa0

0800794c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007950:	4802      	ldr	r0, [pc, #8]	; (800795c <DMA1_Stream7_IRQHandler+0x10>)
 8007952:	f001 fd9b 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8007956:	bf00      	nop
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	200027b0 	.word	0x200027b0

08007960 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007964:	4802      	ldr	r0, [pc, #8]	; (8007970 <DMA2_Stream0_IRQHandler+0x10>)
 8007966:	f001 fd91 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800796a:	bf00      	nop
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200037e0 	.word	0x200037e0

08007974 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007978:	4802      	ldr	r0, [pc, #8]	; (8007984 <DMA2_Stream1_IRQHandler+0x10>)
 800797a:	f001 fd87 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800797e:	bf00      	nop
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	200039e0 	.word	0x200039e0

08007988 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800798c:	4802      	ldr	r0, [pc, #8]	; (8007998 <DMA2_Stream2_IRQHandler+0x10>)
 800798e:	f001 fd7d 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007992:	bf00      	nop
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	20002750 	.word	0x20002750

0800799c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80079a0:	4802      	ldr	r0, [pc, #8]	; (80079ac <DMA2_Stream3_IRQHandler+0x10>)
 80079a2:	f001 fd73 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80079a6:	bf00      	nop
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	200038a0 	.word	0x200038a0

080079b0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80079b4:	4802      	ldr	r0, [pc, #8]	; (80079c0 <DMA2_Stream6_IRQHandler+0x10>)
 80079b6:	f001 fd69 	bl	800948c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80079ba:	bf00      	nop
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20003ae0 	.word	0x20003ae0

080079c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f008 fd2d 	bl	801042c <IBUS_RxCplt>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f008 fd3c 	bl	8010460 <IBUS_RxHalfCplt>
}
 80079e8:	bf00      	nop
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  if(hi2c == &hi2c1){
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a05      	ldr	r2, [pc, #20]	; (8007a10 <HAL_I2C_MemRxCpltCallback+0x20>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d102      	bne.n	8007a06 <HAL_I2C_MemRxCpltCallback+0x16>
	  MS5611_i2c_rx_callabck(hi2c);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff f8af 	bl	8006b64 <MS5611_i2c_rx_callabck>
  }
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20002810 	.word	0x20002810

08007a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a1c:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <_sbrk+0x5c>)
 8007a1e:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <_sbrk+0x60>)
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a28:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <_sbrk+0x64>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a30:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <_sbrk+0x64>)
 8007a32:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <_sbrk+0x68>)
 8007a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a36:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <_sbrk+0x64>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d207      	bcs.n	8007a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a44:	f009 f8bc 	bl	8010bc0 <__errno>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	230c      	movs	r3, #12
 8007a4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a52:	e009      	b.n	8007a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <_sbrk+0x64>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a5a:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <_sbrk+0x64>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	4a05      	ldr	r2, [pc, #20]	; (8007a78 <_sbrk+0x64>)
 8007a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20020000 	.word	0x20020000
 8007a74:	00000400 	.word	0x00000400
 8007a78:	200026e8 	.word	0x200026e8
 8007a7c:	20003c28 	.word	0x20003c28

08007a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a84:	4b08      	ldr	r3, [pc, #32]	; (8007aa8 <SystemInit+0x28>)
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a8a:	4a07      	ldr	r2, [pc, #28]	; (8007aa8 <SystemInit+0x28>)
 8007a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a94:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <SystemInit+0x28>)
 8007a96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a9a:	609a      	str	r2, [r3, #8]
#endif
}
 8007a9c:	bf00      	nop
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	e000ed00 	.word	0xe000ed00

08007aac <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b096      	sub	sp, #88	; 0x58
 8007ab0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	605a      	str	r2, [r3, #4]
 8007abc:	609a      	str	r2, [r3, #8]
 8007abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ac0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ace:	2200      	movs	r2, #0
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	605a      	str	r2, [r3, #4]
 8007ad4:	609a      	str	r2, [r3, #8]
 8007ad6:	60da      	str	r2, [r3, #12]
 8007ad8:	611a      	str	r2, [r3, #16]
 8007ada:	615a      	str	r2, [r3, #20]
 8007adc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f009 f8b9 	bl	8010c5c <memset>

  htim1.Instance = TIM1;
 8007aea:	4b51      	ldr	r3, [pc, #324]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007aec:	4a51      	ldr	r2, [pc, #324]	; (8007c34 <MX_TIM1_Init+0x188>)
 8007aee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8007af0:	4b4f      	ldr	r3, [pc, #316]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007af2:	2214      	movs	r2, #20
 8007af4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007af6:	4b4e      	ldr	r3, [pc, #312]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8007afc:	4b4c      	ldr	r3, [pc, #304]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007afe:	f640 729f 	movw	r2, #3999	; 0xf9f
 8007b02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b04:	4b4a      	ldr	r3, [pc, #296]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007b0a:	4b49      	ldr	r3, [pc, #292]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007b10:	4b47      	ldr	r3, [pc, #284]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b12:	2280      	movs	r2, #128	; 0x80
 8007b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007b16:	4846      	ldr	r0, [pc, #280]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b18:	f006 fac4 	bl	800e0a4 <HAL_TIM_Base_Init>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8007b22:	f7ff fc7f 	bl	8007424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007b2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b30:	4619      	mov	r1, r3
 8007b32:	483f      	ldr	r0, [pc, #252]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b34:	f006 fd7a 	bl	800e62c <HAL_TIM_ConfigClockSource>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007b3e:	f7ff fc71 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007b42:	483b      	ldr	r0, [pc, #236]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b44:	f006 fad9 	bl	800e0fa <HAL_TIM_PWM_Init>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007b4e:	f7ff fc69 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b52:	2300      	movs	r3, #0
 8007b54:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007b5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4833      	ldr	r0, [pc, #204]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b62:	f007 f95d 	bl	800ee20 <HAL_TIMEx_MasterConfigSynchronization>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007b6c:	f7ff fc5a 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b70:	2360      	movs	r3, #96	; 0x60
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 8007b74:	f240 33e7 	movw	r3, #999	; 0x3e7
 8007b78:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007b86:	2300      	movs	r3, #0
 8007b88:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b92:	2200      	movs	r2, #0
 8007b94:	4619      	mov	r1, r3
 8007b96:	4826      	ldr	r0, [pc, #152]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007b98:	f006 fc82 	bl	800e4a0 <HAL_TIM_PWM_ConfigChannel>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8007ba2:	f7ff fc3f 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007baa:	2204      	movs	r2, #4
 8007bac:	4619      	mov	r1, r3
 8007bae:	4820      	ldr	r0, [pc, #128]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007bb0:	f006 fc76 	bl	800e4a0 <HAL_TIM_PWM_ConfigChannel>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8007bba:	f7ff fc33 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	481a      	ldr	r0, [pc, #104]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007bc8:	f006 fc6a 	bl	800e4a0 <HAL_TIM_PWM_ConfigChannel>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8007bd2:	f7ff fc27 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bda:	220c      	movs	r2, #12
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4814      	ldr	r0, [pc, #80]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007be0:	f006 fc5e 	bl	800e4a0 <HAL_TIM_PWM_ConfigChannel>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8007bea:	f7ff fc1b 	bl	8007424 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007c0c:	1d3b      	adds	r3, r7, #4
 8007c0e:	4619      	mov	r1, r3
 8007c10:	4807      	ldr	r0, [pc, #28]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007c12:	f007 f981 	bl	800ef18 <HAL_TIMEx_ConfigBreakDeadTime>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8007c1c:	f7ff fc02 	bl	8007424 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007c20:	4803      	ldr	r0, [pc, #12]	; (8007c30 <MX_TIM1_Init+0x184>)
 8007c22:	f000 f8bb 	bl	8007d9c <HAL_TIM_MspPostInit>

}
 8007c26:	bf00      	nop
 8007c28:	3758      	adds	r7, #88	; 0x58
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20003900 	.word	0x20003900
 8007c34:	40010000 	.word	0x40010000

08007c38 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08e      	sub	sp, #56	; 0x38
 8007c3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c42:	2200      	movs	r2, #0
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	605a      	str	r2, [r3, #4]
 8007c48:	609a      	str	r2, [r3, #8]
 8007c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c4c:	f107 0320 	add.w	r3, r7, #32
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c56:	1d3b      	adds	r3, r7, #4
 8007c58:	2200      	movs	r2, #0
 8007c5a:	601a      	str	r2, [r3, #0]
 8007c5c:	605a      	str	r2, [r3, #4]
 8007c5e:	609a      	str	r2, [r3, #8]
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	611a      	str	r2, [r3, #16]
 8007c64:	615a      	str	r2, [r3, #20]
 8007c66:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8007c68:	4b2d      	ldr	r3, [pc, #180]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 8007c70:	4b2b      	ldr	r3, [pc, #172]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007c72:	f240 628f 	movw	r2, #1679	; 0x68f
 8007c76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c78:	4b29      	ldr	r3, [pc, #164]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 227;
 8007c7e:	4b28      	ldr	r3, [pc, #160]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007c80:	22e3      	movs	r2, #227	; 0xe3
 8007c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c84:	4b26      	ldr	r3, [pc, #152]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007c8a:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007c8c:	2280      	movs	r2, #128	; 0x80
 8007c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007c90:	4823      	ldr	r0, [pc, #140]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007c92:	f006 fa07 	bl	800e0a4 <HAL_TIM_Base_Init>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8007c9c:	f7ff fbc2 	bl	8007424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007caa:	4619      	mov	r1, r3
 8007cac:	481c      	ldr	r0, [pc, #112]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007cae:	f006 fcbd 	bl	800e62c <HAL_TIM_ConfigClockSource>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8007cb8:	f7ff fbb4 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007cbc:	4818      	ldr	r0, [pc, #96]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007cbe:	f006 fa1c 	bl	800e0fa <HAL_TIM_PWM_Init>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8007cc8:	f7ff fbac 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007cd4:	f107 0320 	add.w	r3, r7, #32
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4811      	ldr	r0, [pc, #68]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007cdc:	f007 f8a0 	bl	800ee20 <HAL_TIMEx_MasterConfigSynchronization>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8007ce6:	f7ff fb9d 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cea:	2360      	movs	r3, #96	; 0x60
 8007cec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8007cee:	2364      	movs	r3, #100	; 0x64
 8007cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cfa:	1d3b      	adds	r3, r7, #4
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4619      	mov	r1, r3
 8007d00:	4807      	ldr	r0, [pc, #28]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007d02:	f006 fbcd 	bl	800e4a0 <HAL_TIM_PWM_ConfigChannel>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8007d0c:	f7ff fb8a 	bl	8007424 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8007d10:	4803      	ldr	r0, [pc, #12]	; (8007d20 <MX_TIM2_Init+0xe8>)
 8007d12:	f000 f843 	bl	8007d9c <HAL_TIM_MspPostInit>

}
 8007d16:	bf00      	nop
 8007d18:	3738      	adds	r7, #56	; 0x38
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20003940 	.word	0x20003940

08007d24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a18      	ldr	r2, [pc, #96]	; (8007d94 <HAL_TIM_Base_MspInit+0x70>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10e      	bne.n	8007d54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
 8007d3a:	4b17      	ldr	r3, [pc, #92]	; (8007d98 <HAL_TIM_Base_MspInit+0x74>)
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3e:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <HAL_TIM_Base_MspInit+0x74>)
 8007d40:	f043 0301 	orr.w	r3, r3, #1
 8007d44:	6453      	str	r3, [r2, #68]	; 0x44
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <HAL_TIM_Base_MspInit+0x74>)
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007d52:	e01a      	b.n	8007d8a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d5c:	d115      	bne.n	8007d8a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60bb      	str	r3, [r7, #8]
 8007d62:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <HAL_TIM_Base_MspInit+0x74>)
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	4a0c      	ldr	r2, [pc, #48]	; (8007d98 <HAL_TIM_Base_MspInit+0x74>)
 8007d68:	f043 0301 	orr.w	r3, r3, #1
 8007d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <HAL_TIM_Base_MspInit+0x74>)
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	60bb      	str	r3, [r7, #8]
 8007d78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	201c      	movs	r0, #28
 8007d80:	f001 fa25 	bl	80091ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007d84:	201c      	movs	r0, #28
 8007d86:	f001 fa3e 	bl	8009206 <HAL_NVIC_EnableIRQ>
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40023800 	.word	0x40023800

08007d9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08a      	sub	sp, #40	; 0x28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007da4:	f107 0314 	add.w	r3, r7, #20
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	605a      	str	r2, [r3, #4]
 8007dae:	609a      	str	r2, [r3, #8]
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a24      	ldr	r2, [pc, #144]	; (8007e4c <HAL_TIM_MspPostInit+0xb0>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d11f      	bne.n	8007dfe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <HAL_TIM_MspPostInit+0xb4>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	4a22      	ldr	r2, [pc, #136]	; (8007e50 <HAL_TIM_MspPostInit+0xb4>)
 8007dc8:	f043 0301 	orr.w	r3, r3, #1
 8007dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8007dce:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <HAL_TIM_MspPostInit+0xb4>)
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8007dda:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007de0:	2302      	movs	r3, #2
 8007de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007de8:	2300      	movs	r3, #0
 8007dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007dec:	2301      	movs	r3, #1
 8007dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007df0:	f107 0314 	add.w	r3, r7, #20
 8007df4:	4619      	mov	r1, r3
 8007df6:	4817      	ldr	r0, [pc, #92]	; (8007e54 <HAL_TIM_MspPostInit+0xb8>)
 8007df8:	f001 fdca 	bl	8009990 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007dfc:	e022      	b.n	8007e44 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e06:	d11d      	bne.n	8007e44 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <HAL_TIM_MspPostInit+0xb4>)
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e10:	4a0f      	ldr	r2, [pc, #60]	; (8007e50 <HAL_TIM_MspPostInit+0xb4>)
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	6313      	str	r3, [r2, #48]	; 0x30
 8007e18:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <HAL_TIM_MspPostInit+0xb4>)
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007e24:	2301      	movs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e28:	2302      	movs	r3, #2
 8007e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e30:	2300      	movs	r3, #0
 8007e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007e34:	2301      	movs	r3, #1
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e38:	f107 0314 	add.w	r3, r7, #20
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4805      	ldr	r0, [pc, #20]	; (8007e54 <HAL_TIM_MspPostInit+0xb8>)
 8007e40:	f001 fda6 	bl	8009990 <HAL_GPIO_Init>
}
 8007e44:	bf00      	nop
 8007e46:	3728      	adds	r7, #40	; 0x28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40010000 	.word	0x40010000
 8007e50:	40023800 	.word	0x40023800
 8007e54:	40020000 	.word	0x40020000

08007e58 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007e5c:	4b11      	ldr	r3, [pc, #68]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e5e:	4a12      	ldr	r2, [pc, #72]	; (8007ea8 <MX_USART2_UART_Init+0x50>)
 8007e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8007e62:	4b10      	ldr	r3, [pc, #64]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e64:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007e6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007e70:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007e76:	4b0b      	ldr	r3, [pc, #44]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e7e:	220c      	movs	r2, #12
 8007e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e82:	4b08      	ldr	r3, [pc, #32]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e84:	2200      	movs	r2, #0
 8007e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e88:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007e8e:	4805      	ldr	r0, [pc, #20]	; (8007ea4 <MX_USART2_UART_Init+0x4c>)
 8007e90:	f007 f8a8 	bl	800efe4 <HAL_UART_Init>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007e9a:	f7ff fac3 	bl	8007424 <Error_Handler>
  }

}
 8007e9e:	bf00      	nop
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20003be0 	.word	0x20003be0
 8007ea8:	40004400 	.word	0x40004400

08007eac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007eb0:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007eb2:	4a12      	ldr	r2, [pc, #72]	; (8007efc <MX_USART3_UART_Init+0x50>)
 8007eb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ebc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007ebe:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007eca:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007ed0:	4b09      	ldr	r3, [pc, #36]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007ed2:	220c      	movs	r2, #12
 8007ed4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007ed6:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007ee2:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <MX_USART3_UART_Init+0x4c>)
 8007ee4:	f007 f87e 	bl	800efe4 <HAL_UART_Init>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007eee:	f7ff fa99 	bl	8007424 <Error_Handler>
  }

}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20003aa0 	.word	0x20003aa0
 8007efc:	40004800 	.word	0x40004800

08007f00 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8007f04:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f06:	4a12      	ldr	r2, [pc, #72]	; (8007f50 <MX_USART6_UART_Init+0x50>)
 8007f08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8007f0a:	4b10      	ldr	r3, [pc, #64]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f0c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8007f10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007f12:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007f1e:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007f24:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f26:	220c      	movs	r2, #12
 8007f28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f30:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007f36:	4805      	ldr	r0, [pc, #20]	; (8007f4c <MX_USART6_UART_Init+0x4c>)
 8007f38:	f007 f854 	bl	800efe4 <HAL_UART_Init>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8007f42:	f7ff fa6f 	bl	8007424 <Error_Handler>
  }

}
 8007f46:	bf00      	nop
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20003ba0 	.word	0x20003ba0
 8007f50:	40011400 	.word	0x40011400

08007f54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	605a      	str	r2, [r3, #4]
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	60da      	str	r2, [r3, #12]
 8007f6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a7f      	ldr	r2, [pc, #508]	; (8008170 <HAL_UART_MspInit+0x21c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	f040 8091 	bne.w	800809a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007f78:	2300      	movs	r3, #0
 8007f7a:	623b      	str	r3, [r7, #32]
 8007f7c:	4b7d      	ldr	r3, [pc, #500]	; (8008174 <HAL_UART_MspInit+0x220>)
 8007f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f80:	4a7c      	ldr	r2, [pc, #496]	; (8008174 <HAL_UART_MspInit+0x220>)
 8007f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f86:	6413      	str	r3, [r2, #64]	; 0x40
 8007f88:	4b7a      	ldr	r3, [pc, #488]	; (8008174 <HAL_UART_MspInit+0x220>)
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f90:	623b      	str	r3, [r7, #32]
 8007f92:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	4b76      	ldr	r3, [pc, #472]	; (8008174 <HAL_UART_MspInit+0x220>)
 8007f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9c:	4a75      	ldr	r2, [pc, #468]	; (8008174 <HAL_UART_MspInit+0x220>)
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa4:	4b73      	ldr	r3, [pc, #460]	; (8008174 <HAL_UART_MspInit+0x220>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
 8007fae:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007fc0:	2307      	movs	r3, #7
 8007fc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc8:	4619      	mov	r1, r3
 8007fca:	486b      	ldr	r0, [pc, #428]	; (8008178 <HAL_UART_MspInit+0x224>)
 8007fcc:	f001 fce0 	bl	8009990 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007fd0:	4b6a      	ldr	r3, [pc, #424]	; (800817c <HAL_UART_MspInit+0x228>)
 8007fd2:	4a6b      	ldr	r2, [pc, #428]	; (8008180 <HAL_UART_MspInit+0x22c>)
 8007fd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007fd6:	4b69      	ldr	r3, [pc, #420]	; (800817c <HAL_UART_MspInit+0x228>)
 8007fd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fdc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007fde:	4b67      	ldr	r3, [pc, #412]	; (800817c <HAL_UART_MspInit+0x228>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fe4:	4b65      	ldr	r3, [pc, #404]	; (800817c <HAL_UART_MspInit+0x228>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007fea:	4b64      	ldr	r3, [pc, #400]	; (800817c <HAL_UART_MspInit+0x228>)
 8007fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ff0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ff2:	4b62      	ldr	r3, [pc, #392]	; (800817c <HAL_UART_MspInit+0x228>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ff8:	4b60      	ldr	r3, [pc, #384]	; (800817c <HAL_UART_MspInit+0x228>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007ffe:	4b5f      	ldr	r3, [pc, #380]	; (800817c <HAL_UART_MspInit+0x228>)
 8008000:	2200      	movs	r2, #0
 8008002:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008004:	4b5d      	ldr	r3, [pc, #372]	; (800817c <HAL_UART_MspInit+0x228>)
 8008006:	2200      	movs	r2, #0
 8008008:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800800a:	4b5c      	ldr	r3, [pc, #368]	; (800817c <HAL_UART_MspInit+0x228>)
 800800c:	2200      	movs	r2, #0
 800800e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008010:	485a      	ldr	r0, [pc, #360]	; (800817c <HAL_UART_MspInit+0x228>)
 8008012:	f001 f913 	bl	800923c <HAL_DMA_Init>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800801c:	f7ff fa02 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a56      	ldr	r2, [pc, #344]	; (800817c <HAL_UART_MspInit+0x228>)
 8008024:	635a      	str	r2, [r3, #52]	; 0x34
 8008026:	4a55      	ldr	r2, [pc, #340]	; (800817c <HAL_UART_MspInit+0x228>)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800802c:	4b55      	ldr	r3, [pc, #340]	; (8008184 <HAL_UART_MspInit+0x230>)
 800802e:	4a56      	ldr	r2, [pc, #344]	; (8008188 <HAL_UART_MspInit+0x234>)
 8008030:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8008032:	4b54      	ldr	r3, [pc, #336]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008038:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800803a:	4b52      	ldr	r3, [pc, #328]	; (8008184 <HAL_UART_MspInit+0x230>)
 800803c:	2240      	movs	r2, #64	; 0x40
 800803e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008040:	4b50      	ldr	r3, [pc, #320]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008042:	2200      	movs	r2, #0
 8008044:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008046:	4b4f      	ldr	r3, [pc, #316]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800804c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800804e:	4b4d      	ldr	r3, [pc, #308]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008050:	2200      	movs	r2, #0
 8008052:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008054:	4b4b      	ldr	r3, [pc, #300]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008056:	2200      	movs	r2, #0
 8008058:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800805a:	4b4a      	ldr	r3, [pc, #296]	; (8008184 <HAL_UART_MspInit+0x230>)
 800805c:	2200      	movs	r2, #0
 800805e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008060:	4b48      	ldr	r3, [pc, #288]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008062:	2200      	movs	r2, #0
 8008064:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008066:	4b47      	ldr	r3, [pc, #284]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008068:	2200      	movs	r2, #0
 800806a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800806c:	4845      	ldr	r0, [pc, #276]	; (8008184 <HAL_UART_MspInit+0x230>)
 800806e:	f001 f8e5 	bl	800923c <HAL_DMA_Init>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8008078:	f7ff f9d4 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a41      	ldr	r2, [pc, #260]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008080:	631a      	str	r2, [r3, #48]	; 0x30
 8008082:	4a40      	ldr	r2, [pc, #256]	; (8008184 <HAL_UART_MspInit+0x230>)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008088:	2200      	movs	r2, #0
 800808a:	2100      	movs	r1, #0
 800808c:	2026      	movs	r0, #38	; 0x26
 800808e:	f001 f89e 	bl	80091ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008092:	2026      	movs	r0, #38	; 0x26
 8008094:	f001 f8b7 	bl	8009206 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008098:	e10e      	b.n	80082b8 <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a3b      	ldr	r2, [pc, #236]	; (800818c <HAL_UART_MspInit+0x238>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d17b      	bne.n	800819c <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]
 80080a8:	4b32      	ldr	r3, [pc, #200]	; (8008174 <HAL_UART_MspInit+0x220>)
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	4a31      	ldr	r2, [pc, #196]	; (8008174 <HAL_UART_MspInit+0x220>)
 80080ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080b2:	6413      	str	r3, [r2, #64]	; 0x40
 80080b4:	4b2f      	ldr	r3, [pc, #188]	; (8008174 <HAL_UART_MspInit+0x220>)
 80080b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080bc:	61bb      	str	r3, [r7, #24]
 80080be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080c0:	2300      	movs	r3, #0
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	4b2b      	ldr	r3, [pc, #172]	; (8008174 <HAL_UART_MspInit+0x220>)
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	4a2a      	ldr	r2, [pc, #168]	; (8008174 <HAL_UART_MspInit+0x220>)
 80080ca:	f043 0302 	orr.w	r3, r3, #2
 80080ce:	6313      	str	r3, [r2, #48]	; 0x30
 80080d0:	4b28      	ldr	r3, [pc, #160]	; (8008174 <HAL_UART_MspInit+0x220>)
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80080dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e2:	2302      	movs	r3, #2
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080ea:	2303      	movs	r3, #3
 80080ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80080ee:	2307      	movs	r3, #7
 80080f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080f6:	4619      	mov	r1, r3
 80080f8:	4825      	ldr	r0, [pc, #148]	; (8008190 <HAL_UART_MspInit+0x23c>)
 80080fa:	f001 fc49 	bl	8009990 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80080fe:	4b25      	ldr	r3, [pc, #148]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008100:	4a25      	ldr	r2, [pc, #148]	; (8008198 <HAL_UART_MspInit+0x244>)
 8008102:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8008104:	4b23      	ldr	r3, [pc, #140]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800810a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800810c:	4b21      	ldr	r3, [pc, #132]	; (8008194 <HAL_UART_MspInit+0x240>)
 800810e:	2200      	movs	r2, #0
 8008110:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008112:	4b20      	ldr	r3, [pc, #128]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008114:	2200      	movs	r2, #0
 8008116:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008118:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <HAL_UART_MspInit+0x240>)
 800811a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800811e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008120:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008122:	2200      	movs	r2, #0
 8008124:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008126:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008128:	2200      	movs	r2, #0
 800812a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800812c:	4b19      	ldr	r3, [pc, #100]	; (8008194 <HAL_UART_MspInit+0x240>)
 800812e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008132:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008134:	4b17      	ldr	r3, [pc, #92]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008136:	2200      	movs	r2, #0
 8008138:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800813a:	4b16      	ldr	r3, [pc, #88]	; (8008194 <HAL_UART_MspInit+0x240>)
 800813c:	2200      	movs	r2, #0
 800813e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008140:	4814      	ldr	r0, [pc, #80]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008142:	f001 f87b 	bl	800923c <HAL_DMA_Init>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800814c:	f7ff f96a 	bl	8007424 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a10      	ldr	r2, [pc, #64]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008154:	635a      	str	r2, [r3, #52]	; 0x34
 8008156:	4a0f      	ldr	r2, [pc, #60]	; (8008194 <HAL_UART_MspInit+0x240>)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800815c:	2200      	movs	r2, #0
 800815e:	2100      	movs	r1, #0
 8008160:	2027      	movs	r0, #39	; 0x27
 8008162:	f001 f834 	bl	80091ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008166:	2027      	movs	r0, #39	; 0x27
 8008168:	f001 f84d 	bl	8009206 <HAL_NVIC_EnableIRQ>
}
 800816c:	e0a4      	b.n	80082b8 <HAL_UART_MspInit+0x364>
 800816e:	bf00      	nop
 8008170:	40004400 	.word	0x40004400
 8008174:	40023800 	.word	0x40023800
 8008178:	40020000 	.word	0x40020000
 800817c:	20003980 	.word	0x20003980
 8008180:	40026088 	.word	0x40026088
 8008184:	20003b40 	.word	0x20003b40
 8008188:	400260a0 	.word	0x400260a0
 800818c:	40004800 	.word	0x40004800
 8008190:	40020400 	.word	0x40020400
 8008194:	20003a40 	.word	0x20003a40
 8008198:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a47      	ldr	r2, [pc, #284]	; (80082c0 <HAL_UART_MspInit+0x36c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	f040 8088 	bne.w	80082b8 <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 80081a8:	2300      	movs	r3, #0
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	4b45      	ldr	r3, [pc, #276]	; (80082c4 <HAL_UART_MspInit+0x370>)
 80081ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b0:	4a44      	ldr	r2, [pc, #272]	; (80082c4 <HAL_UART_MspInit+0x370>)
 80081b2:	f043 0320 	orr.w	r3, r3, #32
 80081b6:	6453      	str	r3, [r2, #68]	; 0x44
 80081b8:	4b42      	ldr	r3, [pc, #264]	; (80082c4 <HAL_UART_MspInit+0x370>)
 80081ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081c4:	2300      	movs	r3, #0
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	4b3e      	ldr	r3, [pc, #248]	; (80082c4 <HAL_UART_MspInit+0x370>)
 80081ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081cc:	4a3d      	ldr	r2, [pc, #244]	; (80082c4 <HAL_UART_MspInit+0x370>)
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	6313      	str	r3, [r2, #48]	; 0x30
 80081d4:	4b3b      	ldr	r3, [pc, #236]	; (80082c4 <HAL_UART_MspInit+0x370>)
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80081e0:	23c0      	movs	r3, #192	; 0xc0
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081e4:	2302      	movs	r3, #2
 80081e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081e8:	2300      	movs	r3, #0
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80081ec:	2303      	movs	r3, #3
 80081ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80081f0:	2308      	movs	r3, #8
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081f8:	4619      	mov	r1, r3
 80081fa:	4833      	ldr	r0, [pc, #204]	; (80082c8 <HAL_UART_MspInit+0x374>)
 80081fc:	f001 fbc8 	bl	8009990 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8008200:	4b32      	ldr	r3, [pc, #200]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008202:	4a33      	ldr	r2, [pc, #204]	; (80082d0 <HAL_UART_MspInit+0x37c>)
 8008204:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8008206:	4b31      	ldr	r3, [pc, #196]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008208:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800820c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800820e:	4b2f      	ldr	r3, [pc, #188]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008210:	2240      	movs	r2, #64	; 0x40
 8008212:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008214:	4b2d      	ldr	r3, [pc, #180]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008216:	2200      	movs	r2, #0
 8008218:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800821a:	4b2c      	ldr	r3, [pc, #176]	; (80082cc <HAL_UART_MspInit+0x378>)
 800821c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008220:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008222:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008224:	2200      	movs	r2, #0
 8008226:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008228:	4b28      	ldr	r3, [pc, #160]	; (80082cc <HAL_UART_MspInit+0x378>)
 800822a:	2200      	movs	r2, #0
 800822c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800822e:	4b27      	ldr	r3, [pc, #156]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008230:	2200      	movs	r2, #0
 8008232:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008234:	4b25      	ldr	r3, [pc, #148]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008236:	2200      	movs	r2, #0
 8008238:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800823a:	4b24      	ldr	r3, [pc, #144]	; (80082cc <HAL_UART_MspInit+0x378>)
 800823c:	2200      	movs	r2, #0
 800823e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8008240:	4822      	ldr	r0, [pc, #136]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008242:	f000 fffb 	bl	800923c <HAL_DMA_Init>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 800824c:	f7ff f8ea 	bl	8007424 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a1e      	ldr	r2, [pc, #120]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
 8008256:	4a1d      	ldr	r2, [pc, #116]	; (80082cc <HAL_UART_MspInit+0x378>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800825c:	4b1d      	ldr	r3, [pc, #116]	; (80082d4 <HAL_UART_MspInit+0x380>)
 800825e:	4a1e      	ldr	r2, [pc, #120]	; (80082d8 <HAL_UART_MspInit+0x384>)
 8008260:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8008262:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <HAL_UART_MspInit+0x380>)
 8008264:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008268:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800826a:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <HAL_UART_MspInit+0x380>)
 800826c:	2200      	movs	r2, #0
 800826e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008270:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <HAL_UART_MspInit+0x380>)
 8008272:	2200      	movs	r2, #0
 8008274:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008276:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <HAL_UART_MspInit+0x380>)
 8008278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800827c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800827e:	4b15      	ldr	r3, [pc, #84]	; (80082d4 <HAL_UART_MspInit+0x380>)
 8008280:	2200      	movs	r2, #0
 8008282:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008284:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <HAL_UART_MspInit+0x380>)
 8008286:	2200      	movs	r2, #0
 8008288:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <HAL_UART_MspInit+0x380>)
 800828c:	2200      	movs	r2, #0
 800828e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008290:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <HAL_UART_MspInit+0x380>)
 8008292:	2200      	movs	r2, #0
 8008294:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008296:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <HAL_UART_MspInit+0x380>)
 8008298:	2200      	movs	r2, #0
 800829a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800829c:	480d      	ldr	r0, [pc, #52]	; (80082d4 <HAL_UART_MspInit+0x380>)
 800829e:	f000 ffcd 	bl	800923c <HAL_DMA_Init>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <HAL_UART_MspInit+0x358>
      Error_Handler();
 80082a8:	f7ff f8bc 	bl	8007424 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <HAL_UART_MspInit+0x380>)
 80082b0:	635a      	str	r2, [r3, #52]	; 0x34
 80082b2:	4a08      	ldr	r2, [pc, #32]	; (80082d4 <HAL_UART_MspInit+0x380>)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80082b8:	bf00      	nop
 80082ba:	3738      	adds	r7, #56	; 0x38
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40011400 	.word	0x40011400
 80082c4:	40023800 	.word	0x40023800
 80082c8:	40020800 	.word	0x40020800
 80082cc:	20003ae0 	.word	0x20003ae0
 80082d0:	400264a0 	.word	0x400264a0
 80082d4:	200039e0 	.word	0x200039e0
 80082d8:	40026428 	.word	0x40026428

080082dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80082dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008314 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80082e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80082e2:	e003      	b.n	80082ec <LoopCopyDataInit>

080082e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80082e4:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80082e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80082e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80082ea:	3104      	adds	r1, #4

080082ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80082ec:	480b      	ldr	r0, [pc, #44]	; (800831c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80082f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80082f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80082f4:	d3f6      	bcc.n	80082e4 <CopyDataInit>
  ldr  r2, =_sbss
 80082f6:	4a0b      	ldr	r2, [pc, #44]	; (8008324 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80082f8:	e002      	b.n	8008300 <LoopFillZerobss>

080082fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80082fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80082fc:	f842 3b04 	str.w	r3, [r2], #4

08008300 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008300:	4b09      	ldr	r3, [pc, #36]	; (8008328 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008302:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008304:	d3f9      	bcc.n	80082fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008306:	f7ff fbbb 	bl	8007a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800830a:	f008 fc5f 	bl	8010bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800830e:	f7fe ff4d 	bl	80071ac <main>
  bx  lr    
 8008312:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008314:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008318:	0801536c 	.word	0x0801536c
  ldr  r0, =_sdata
 800831c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008320:	20001f80 	.word	0x20001f80
  ldr  r2, =_sbss
 8008324:	20001f80 	.word	0x20001f80
  ldr  r3, = _ebss
 8008328:	20003c28 	.word	0x20003c28

0800832c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800832c:	e7fe      	b.n	800832c <ADC_IRQHandler>

0800832e <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 800832e:	b480      	push	{r7}
 8008330:	b085      	sub	sp, #20
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 8008336:	2300      	movs	r3, #0
 8008338:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8008346:	429a      	cmp	r2, r3
 8008348:	d907      	bls.n	800835a <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 800835a:	89fb      	ldrh	r3, [r7, #14]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 8008372:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <TELEMETRY_Init+0x60>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 8008378:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <TELEMETRY_Init+0x60>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	683a      	ldr	r2, [r7, #0]
 800837e:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8008380:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <TELEMETRY_Init+0x60>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2214      	movs	r2, #20
 8008388:	4910      	ldr	r1, [pc, #64]	; (80083cc <TELEMETRY_Init+0x64>)
 800838a:	4618      	mov	r0, r3
 800838c:	f006 ffb6 	bl	800f2fc <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 8008390:	4b0d      	ldr	r3, [pc, #52]	; (80083c8 <TELEMETRY_Init+0x60>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <TELEMETRY_Init+0x60>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f042 0210 	orr.w	r2, r2, #16
 80083a6:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 80083a8:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <TELEMETRY_Init+0x60>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	4b06      	ldr	r3, [pc, #24]	; (80083c8 <TELEMETRY_Init+0x60>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80083b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ba:	4619      	mov	r1, r3
 80083bc:	f007 f80a 	bl	800f3d4 <HAL_UART_Receive_DMA>
}
 80083c0:	bf00      	nop
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	200026ec 	.word	0x200026ec
 80083cc:	20001d78 	.word	0x20001d78

080083d0 <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 80083d8:	4b6f      	ldr	r3, [pc, #444]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 80083e0:	4b6d      	ldr	r3, [pc, #436]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d051      	beq.n	8008490 <TELEMETRY_Process+0xc0>
 80083ec:	4b6a      	ldr	r3, [pc, #424]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d94a      	bls.n	8008490 <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 80083fa:	4b67      	ldr	r3, [pc, #412]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a66      	ldr	r2, [pc, #408]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008400:	6812      	ldr	r2, [r2, #0]
 8008402:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8008406:	4413      	add	r3, r2
 8008408:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 800840c:	461a      	mov	r2, r3
 800840e:	f240 134d 	movw	r3, #333	; 0x14d
 8008412:	fb03 f302 	mul.w	r3, r3, r2
 8008416:	4619      	mov	r1, r3
 8008418:	4b5f      	ldr	r3, [pc, #380]	; (8008598 <TELEMETRY_Process+0x1c8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	440a      	add	r2, r1
 8008420:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8008424:	4b5c      	ldr	r3, [pc, #368]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	4b5b      	ldr	r3, [pc, #364]	; (8008598 <TELEMETRY_Process+0x1c8>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b5a      	ldr	r3, [pc, #360]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8008436:	4619      	mov	r1, r3
 8008438:	460b      	mov	r3, r1
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	1d59      	adds	r1, r3, #5
 8008444:	4b54      	ldr	r3, [pc, #336]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a53      	ldr	r2, [pc, #332]	; (8008598 <TELEMETRY_Process+0x1c8>)
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8008450:	4413      	add	r3, r2
 8008452:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	f006 ff4f 	bl	800f2fc <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 800845e:	4b4e      	ldr	r3, [pc, #312]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 8008466:	3201      	adds	r2, #1
 8008468:	b292      	uxth	r2, r2
 800846a:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 800846e:	4b4a      	ldr	r3, [pc, #296]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8008476:	4a48      	ldr	r2, [pc, #288]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008478:	6812      	ldr	r2, [r2, #0]
 800847a:	4948      	ldr	r1, [pc, #288]	; (800859c <TELEMETRY_Process+0x1cc>)
 800847c:	fba1 0103 	umull	r0, r1, r1, r3
 8008480:	0909      	lsrs	r1, r1, #4
 8008482:	2032      	movs	r0, #50	; 0x32
 8008484:	fb00 f101 	mul.w	r1, r0, r1
 8008488:	1a5b      	subs	r3, r3, r1
 800848a:	b29b      	uxth	r3, r3
 800848c:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 8008490:	4b41      	ldr	r3, [pc, #260]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff ff4a 	bl	800832e <get_nb_bytes_available>
 800849a:	4603      	mov	r3, r0
 800849c:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 800849e:	8a3b      	ldrh	r3, [r7, #16]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d976      	bls.n	8008592 <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 80084a4:	2301      	movs	r3, #1
 80084a6:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 80084a8:	4b3b      	ldr	r3, [pc, #236]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a3a      	ldr	r2, [pc, #232]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 80084b4:	4413      	add	r3, r2
 80084b6:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80084ba:	2b24      	cmp	r3, #36	; 0x24
 80084bc:	d15c      	bne.n	8008578 <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 80084be:	4b36      	ldr	r3, [pc, #216]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	4b35      	ldr	r3, [pc, #212]	; (8008598 <TELEMETRY_Process+0x1c8>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80084ca:	3301      	adds	r3, #1
 80084cc:	4413      	add	r3, r2
 80084ce:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7f9 ff7c 	bl	80023d0 <DATA_LOGGER_Get_Data>
 80084d8:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	7a5b      	ldrb	r3, [r3, #9]
 80084de:	4a30      	ldr	r2, [pc, #192]	; (80085a0 <TELEMETRY_Process+0x1d0>)
 80084e0:	fba2 2303 	umull	r2, r3, r2, r3
 80084e4:	091b      	lsrs	r3, r3, #4
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3303      	adds	r3, #3
 80084ec:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 80084ee:	897a      	ldrh	r2, [r7, #10]
 80084f0:	8a3b      	ldrh	r3, [r7, #16]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d84c      	bhi.n	8008590 <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 80084f6:	897b      	ldrh	r3, [r7, #10]
 80084f8:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 80084fa:	897b      	ldrh	r3, [r7, #10]
 80084fc:	3b02      	subs	r3, #2
 80084fe:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 8008500:	2300      	movs	r3, #0
 8008502:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 8008504:	2300      	movs	r3, #0
 8008506:	827b      	strh	r3, [r7, #18]
 8008508:	e012      	b.n	8008530 <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 800850a:	4b23      	ldr	r3, [pc, #140]	; (8008598 <TELEMETRY_Process+0x1c8>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4b22      	ldr	r3, [pc, #136]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8008516:	1c59      	adds	r1, r3, #1
 8008518:	8a7b      	ldrh	r3, [r7, #18]
 800851a:	440b      	add	r3, r1
 800851c:	4413      	add	r3, r2
 800851e:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8008522:	b29a      	uxth	r2, r3
 8008524:	8abb      	ldrh	r3, [r7, #20]
 8008526:	4413      	add	r3, r2
 8008528:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 800852a:	8a7b      	ldrh	r3, [r7, #18]
 800852c:	3301      	adds	r3, #1
 800852e:	827b      	strh	r3, [r7, #18]
 8008530:	8a7a      	ldrh	r2, [r7, #18]
 8008532:	893b      	ldrh	r3, [r7, #8]
 8008534:	429a      	cmp	r2, r3
 8008536:	d3e8      	bcc.n	800850a <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 8008538:	8abb      	ldrh	r3, [r7, #20]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	b29a      	uxth	r2, r3
 800853e:	4b16      	ldr	r3, [pc, #88]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008540:	6819      	ldr	r1, [r3, #0]
 8008542:	4b15      	ldr	r3, [pc, #84]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800854a:	4618      	mov	r0, r3
 800854c:	897b      	ldrh	r3, [r7, #10]
 800854e:	4403      	add	r3, r0
 8008550:	3b01      	subs	r3, #1
 8008552:	440b      	add	r3, r1
 8008554:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8008558:	b29b      	uxth	r3, r3
 800855a:	429a      	cmp	r2, r3
 800855c:	d10c      	bne.n	8008578 <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 800855e:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800856a:	3301      	adds	r3, #1
 800856c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8008570:	4413      	add	r3, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7f9 fd0e 	bl	8001f94 <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 8008578:	4b07      	ldr	r3, [pc, #28]	; (8008598 <TELEMETRY_Process+0x1c8>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 8008580:	4b05      	ldr	r3, [pc, #20]	; (8008598 <TELEMETRY_Process+0x1c8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	8afa      	ldrh	r2, [r7, #22]
 8008586:	440a      	add	r2, r1
 8008588:	b292      	uxth	r2, r2
 800858a:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 800858e:	e000      	b.n	8008592 <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 8008590:	bf00      	nop
	}

}
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	200026ec 	.word	0x200026ec
 800859c:	51eb851f 	.word	0x51eb851f
 80085a0:	cccccccd 	.word	0xcccccccd

080085a4 <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08a      	sub	sp, #40	; 0x28
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 80085b0:	2300      	movs	r3, #0
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 80085b4:	2324      	movs	r3, #36	; 0x24
 80085b6:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 80085b8:	2300      	movs	r3, #0
 80085ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085be:	e01d      	b.n	80085fc <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 80085c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	441a      	add	r2, r3
 80085c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085cc:	3301      	adds	r3, #1
 80085ce:	7812      	ldrb	r2, [r2, #0]
 80085d0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80085d4:	440b      	add	r3, r1
 80085d6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 80085da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085de:	3301      	adds	r3, #1
 80085e0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80085e4:	4413      	add	r3, r2
 80085e6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80085ea:	461a      	mov	r2, r3
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	4413      	add	r3, r2
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 80085f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085f6:	3301      	adds	r3, #1
 80085f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	429a      	cmp	r2, r3
 8008604:	d3dc      	bcc.n	80085c0 <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	3301      	adds	r3, #1
 800860a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008612:	440b      	add	r3, r1
 8008614:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	3302      	adds	r3, #2
 800861c:	b2da      	uxtb	r2, r3
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f000 f805 	bl	8008634 <TELEMETRY_Send_Data_Raw>
}
 800862a:	bf00      	nop
 800862c:	3728      	adds	r7, #40	; 0x28
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
 8008644:	e017      	b.n	8008676 <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	18d1      	adds	r1, r2, r3
 800864c:	4b20      	ldr	r3, [pc, #128]	; (80086d0 <TELEMETRY_Send_Data_Raw+0x9c>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	4b1f      	ldr	r3, [pc, #124]	; (80086d0 <TELEMETRY_Send_Data_Raw+0x9c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8008658:	4618      	mov	r0, r3
 800865a:	4603      	mov	r3, r0
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4403      	add	r3, r0
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4618      	mov	r0, r3
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	4403      	add	r3, r0
 8008668:	7809      	ldrb	r1, [r1, #0]
 800866a:	4413      	add	r3, r2
 800866c:	460a      	mov	r2, r1
 800866e:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	3301      	adds	r3, #1
 8008674:	73fb      	strb	r3, [r7, #15]
 8008676:	7bfa      	ldrb	r2, [r7, #15]
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	429a      	cmp	r2, r3
 800867c:	d3e3      	bcc.n	8008646 <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 800867e:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <TELEMETRY_Send_Data_Raw+0x9c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <TELEMETRY_Send_Data_Raw+0x9c>)
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 800868a:	4413      	add	r3, r2
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 8008692:	4b0f      	ldr	r3, [pc, #60]	; (80086d0 <TELEMETRY_Send_Data_Raw+0x9c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 800869a:	3201      	adds	r2, #1
 800869c:	b292      	uxth	r2, r2
 800869e:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80086a2:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <TELEMETRY_Send_Data_Raw+0x9c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 80086aa:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <TELEMETRY_Send_Data_Raw+0x9c>)
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	4909      	ldr	r1, [pc, #36]	; (80086d4 <TELEMETRY_Send_Data_Raw+0xa0>)
 80086b0:	fba1 0103 	umull	r0, r1, r1, r3
 80086b4:	0909      	lsrs	r1, r1, #4
 80086b6:	2032      	movs	r0, #50	; 0x32
 80086b8:	fb00 f101 	mul.w	r1, r0, r1
 80086bc:	1a5b      	subs	r3, r3, r1
 80086be:	b29b      	uxth	r3, r3
 80086c0:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 80086c4:	bf00      	nop
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	200026ec 	.word	0x200026ec
 80086d4:	51eb851f 	.word	0x51eb851f

080086d8 <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 80086d8:	b480      	push	{r7}
 80086da:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	4b06      	ldr	r3, [pc, #24]	; (8008704 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80086f2:	b292      	uxth	r2, r2
 80086f4:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 80086f8:	bf00      	nop
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	200026ec 	.word	0x200026ec

08008708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800870c:	4b0e      	ldr	r3, [pc, #56]	; (8008748 <HAL_Init+0x40>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a0d      	ldr	r2, [pc, #52]	; (8008748 <HAL_Init+0x40>)
 8008712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008718:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <HAL_Init+0x40>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a0a      	ldr	r2, [pc, #40]	; (8008748 <HAL_Init+0x40>)
 800871e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008724:	4b08      	ldr	r3, [pc, #32]	; (8008748 <HAL_Init+0x40>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a07      	ldr	r2, [pc, #28]	; (8008748 <HAL_Init+0x40>)
 800872a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800872e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008730:	2003      	movs	r0, #3
 8008732:	f000 fd41 	bl	80091b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008736:	2000      	movs	r0, #0
 8008738:	f000 f808 	bl	800874c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800873c:	f7ff f82c 	bl	8007798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	40023c00 	.word	0x40023c00

0800874c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008754:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <HAL_InitTick+0x54>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <HAL_InitTick+0x58>)
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	4619      	mov	r1, r3
 800875e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008762:	fbb3 f3f1 	udiv	r3, r3, r1
 8008766:	fbb2 f3f3 	udiv	r3, r2, r3
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fd59 	bl	8009222 <HAL_SYSTICK_Config>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e00e      	b.n	8008798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b0f      	cmp	r3, #15
 800877e:	d80a      	bhi.n	8008796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008780:	2200      	movs	r2, #0
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	f000 fd21 	bl	80091ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800878c:	4a06      	ldr	r2, [pc, #24]	; (80087a8 <HAL_InitTick+0x5c>)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e000      	b.n	8008798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20001d74 	.word	0x20001d74
 80087a4:	20001d94 	.word	0x20001d94
 80087a8:	20001d90 	.word	0x20001d90

080087ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <HAL_IncTick+0x20>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <HAL_IncTick+0x24>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4413      	add	r3, r2
 80087bc:	4a04      	ldr	r2, [pc, #16]	; (80087d0 <HAL_IncTick+0x24>)
 80087be:	6013      	str	r3, [r2, #0]
}
 80087c0:	bf00      	nop
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	20001d94 	.word	0x20001d94
 80087d0:	20003c20 	.word	0x20003c20

080087d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  return uwTick;
 80087d8:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <HAL_GetTick+0x14>)
 80087da:	681b      	ldr	r3, [r3, #0]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	20003c20 	.word	0x20003c20

080087ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80087f4:	f7ff ffee 	bl	80087d4 <HAL_GetTick>
 80087f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d005      	beq.n	8008812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <HAL_Delay+0x40>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008812:	bf00      	nop
 8008814:	f7ff ffde 	bl	80087d4 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	429a      	cmp	r2, r3
 8008822:	d8f7      	bhi.n	8008814 <HAL_Delay+0x28>
  {
  }
}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20001d94 	.word	0x20001d94

08008830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d101      	bne.n	8008846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e033      	b.n	80088ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7fe fa1e 	bl	8006c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b00      	cmp	r3, #0
 800886c:	d118      	bne.n	80088a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008876:	f023 0302 	bic.w	r3, r3, #2
 800887a:	f043 0202 	orr.w	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa4a 	bl	8008d1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	f023 0303 	bic.w	r3, r3, #3
 8008896:	f043 0201 	orr.w	r2, r3, #1
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
 800889e:	e001      	b.n	80088a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d101      	bne.n	80088d6 <HAL_ADC_Start_DMA+0x1e>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e0cc      	b.n	8008a70 <HAL_ADC_Start_DMA+0x1b8>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d018      	beq.n	800891e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f042 0201 	orr.w	r2, r2, #1
 80088fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80088fc:	4b5e      	ldr	r3, [pc, #376]	; (8008a78 <HAL_ADC_Start_DMA+0x1c0>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a5e      	ldr	r2, [pc, #376]	; (8008a7c <HAL_ADC_Start_DMA+0x1c4>)
 8008902:	fba2 2303 	umull	r2, r3, r2, r3
 8008906:	0c9a      	lsrs	r2, r3, #18
 8008908:	4613      	mov	r3, r2
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	4413      	add	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008910:	e002      	b.n	8008918 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	3b01      	subs	r3, #1
 8008916:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f9      	bne.n	8008912 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b01      	cmp	r3, #1
 800892a:	f040 80a0 	bne.w	8008a6e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008936:	f023 0301 	bic.w	r3, r3, #1
 800893a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800894c:	2b00      	cmp	r3, #0
 800894e:	d007      	beq.n	8008960 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008958:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800896c:	d106      	bne.n	800897c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008972:	f023 0206 	bic.w	r2, r3, #6
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	645a      	str	r2, [r3, #68]	; 0x44
 800897a:	e002      	b.n	8008982 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800898a:	4b3d      	ldr	r3, [pc, #244]	; (8008a80 <HAL_ADC_Start_DMA+0x1c8>)
 800898c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	4a3c      	ldr	r2, [pc, #240]	; (8008a84 <HAL_ADC_Start_DMA+0x1cc>)
 8008994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	4a3b      	ldr	r2, [pc, #236]	; (8008a88 <HAL_ADC_Start_DMA+0x1d0>)
 800899c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a2:	4a3a      	ldr	r2, [pc, #232]	; (8008a8c <HAL_ADC_Start_DMA+0x1d4>)
 80089a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80089ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80089be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	334c      	adds	r3, #76	; 0x4c
 80089da:	4619      	mov	r1, r3
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f000 fcda 	bl	8009398 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d12a      	bne.n	8008a46 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a26      	ldr	r2, [pc, #152]	; (8008a90 <HAL_ADC_Start_DMA+0x1d8>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d015      	beq.n	8008a26 <HAL_ADC_Start_DMA+0x16e>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a25      	ldr	r2, [pc, #148]	; (8008a94 <HAL_ADC_Start_DMA+0x1dc>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d105      	bne.n	8008a10 <HAL_ADC_Start_DMA+0x158>
 8008a04:	4b1e      	ldr	r3, [pc, #120]	; (8008a80 <HAL_ADC_Start_DMA+0x1c8>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <HAL_ADC_Start_DMA+0x1e0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d129      	bne.n	8008a6e <HAL_ADC_Start_DMA+0x1b6>
 8008a1a:	4b19      	ldr	r3, [pc, #100]	; (8008a80 <HAL_ADC_Start_DMA+0x1c8>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	2b0f      	cmp	r3, #15
 8008a24:	d823      	bhi.n	8008a6e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11c      	bne.n	8008a6e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008a42:	609a      	str	r2, [r3, #8]
 8008a44:	e013      	b.n	8008a6e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a11      	ldr	r2, [pc, #68]	; (8008a90 <HAL_ADC_Start_DMA+0x1d8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d10e      	bne.n	8008a6e <HAL_ADC_Start_DMA+0x1b6>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d107      	bne.n	8008a6e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008a6c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20001d74 	.word	0x20001d74
 8008a7c:	431bde83 	.word	0x431bde83
 8008a80:	40012300 	.word	0x40012300
 8008a84:	08008f15 	.word	0x08008f15
 8008a88:	08008fcf 	.word	0x08008fcf
 8008a8c:	08008feb 	.word	0x08008feb
 8008a90:	40012000 	.word	0x40012000
 8008a94:	40012100 	.word	0x40012100
 8008a98:	40012200 	.word	0x40012200

08008a9c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_ADC_ConfigChannel+0x1c>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e105      	b.n	8008d00 <HAL_ADC_ConfigChannel+0x228>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b09      	cmp	r3, #9
 8008b02:	d925      	bls.n	8008b50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68d9      	ldr	r1, [r3, #12]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	461a      	mov	r2, r3
 8008b12:	4613      	mov	r3, r2
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	4413      	add	r3, r2
 8008b18:	3b1e      	subs	r3, #30
 8008b1a:	2207      	movs	r2, #7
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	43da      	mvns	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	400a      	ands	r2, r1
 8008b28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68d9      	ldr	r1, [r3, #12]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	689a      	ldr	r2, [r3, #8]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	4403      	add	r3, r0
 8008b42:	3b1e      	subs	r3, #30
 8008b44:	409a      	lsls	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	e022      	b.n	8008b96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6919      	ldr	r1, [r3, #16]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	4613      	mov	r3, r2
 8008b60:	005b      	lsls	r3, r3, #1
 8008b62:	4413      	add	r3, r2
 8008b64:	2207      	movs	r2, #7
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	43da      	mvns	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	400a      	ands	r2, r1
 8008b72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6919      	ldr	r1, [r3, #16]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	4618      	mov	r0, r3
 8008b86:	4603      	mov	r3, r0
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	4403      	add	r3, r0
 8008b8c:	409a      	lsls	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	2b06      	cmp	r3, #6
 8008b9c:	d824      	bhi.n	8008be8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	3b05      	subs	r3, #5
 8008bb0:	221f      	movs	r2, #31
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	43da      	mvns	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	400a      	ands	r2, r1
 8008bbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	4618      	mov	r0, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3b05      	subs	r3, #5
 8008bda:	fa00 f203 	lsl.w	r2, r0, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	635a      	str	r2, [r3, #52]	; 0x34
 8008be6:	e04c      	b.n	8008c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	2b0c      	cmp	r3, #12
 8008bee:	d824      	bhi.n	8008c3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	3b23      	subs	r3, #35	; 0x23
 8008c02:	221f      	movs	r2, #31
 8008c04:	fa02 f303 	lsl.w	r3, r2, r3
 8008c08:	43da      	mvns	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	400a      	ands	r2, r1
 8008c10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4618      	mov	r0, r3
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	3b23      	subs	r3, #35	; 0x23
 8008c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	430a      	orrs	r2, r1
 8008c36:	631a      	str	r2, [r3, #48]	; 0x30
 8008c38:	e023      	b.n	8008c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	3b41      	subs	r3, #65	; 0x41
 8008c4c:	221f      	movs	r2, #31
 8008c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c52:	43da      	mvns	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	400a      	ands	r2, r1
 8008c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	4618      	mov	r0, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	3b41      	subs	r3, #65	; 0x41
 8008c76:	fa00 f203 	lsl.w	r2, r0, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008c82:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <HAL_ADC_ConfigChannel+0x234>)
 8008c84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a21      	ldr	r2, [pc, #132]	; (8008d10 <HAL_ADC_ConfigChannel+0x238>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d109      	bne.n	8008ca4 <HAL_ADC_ConfigChannel+0x1cc>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b12      	cmp	r3, #18
 8008c96:	d105      	bne.n	8008ca4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a19      	ldr	r2, [pc, #100]	; (8008d10 <HAL_ADC_ConfigChannel+0x238>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d123      	bne.n	8008cf6 <HAL_ADC_ConfigChannel+0x21e>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b10      	cmp	r3, #16
 8008cb4:	d003      	beq.n	8008cbe <HAL_ADC_ConfigChannel+0x1e6>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b11      	cmp	r3, #17
 8008cbc:	d11b      	bne.n	8008cf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b10      	cmp	r3, #16
 8008cd0:	d111      	bne.n	8008cf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <HAL_ADC_ConfigChannel+0x23c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a10      	ldr	r2, [pc, #64]	; (8008d18 <HAL_ADC_ConfigChannel+0x240>)
 8008cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cdc:	0c9a      	lsrs	r2, r3, #18
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	005b      	lsls	r3, r3, #1
 8008ce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008ce8:	e002      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1f9      	bne.n	8008cea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	40012300 	.word	0x40012300
 8008d10:	40012000 	.word	0x40012000
 8008d14:	20001d74 	.word	0x20001d74
 8008d18:	431bde83 	.word	0x431bde83

08008d1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008d24:	4b79      	ldr	r3, [pc, #484]	; (8008f0c <ADC_Init+0x1f0>)
 8008d26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	431a      	orrs	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6859      	ldr	r1, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	021a      	lsls	r2, r3, #8
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6859      	ldr	r1, [r3, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6899      	ldr	r1, [r3, #8]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dae:	4a58      	ldr	r2, [pc, #352]	; (8008f10 <ADC_Init+0x1f4>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d022      	beq.n	8008dfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008dc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6899      	ldr	r1, [r3, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008de4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6899      	ldr	r1, [r3, #8]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	609a      	str	r2, [r3, #8]
 8008df8:	e00f      	b.n	8008e1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008e18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0202 	bic.w	r2, r2, #2
 8008e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	6899      	ldr	r1, [r3, #8]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7e1b      	ldrb	r3, [r3, #24]
 8008e34:	005a      	lsls	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d01b      	beq.n	8008e80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008e66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	6859      	ldr	r1, [r3, #4]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e72:	3b01      	subs	r3, #1
 8008e74:	035a      	lsls	r2, r3, #13
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	605a      	str	r2, [r3, #4]
 8008e7e:	e007      	b.n	8008e90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	051a      	lsls	r2, r3, #20
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689a      	ldr	r2, [r3, #8]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6899      	ldr	r1, [r3, #8]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ed2:	025a      	lsls	r2, r3, #9
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6899      	ldr	r1, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	029a      	lsls	r2, r3, #10
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	609a      	str	r2, [r3, #8]
}
 8008f00:	bf00      	nop
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	40012300 	.word	0x40012300
 8008f10:	0f000001 	.word	0x0f000001

08008f14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d13c      	bne.n	8008fa8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d12b      	bne.n	8008fa0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d127      	bne.n	8008fa0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d006      	beq.n	8008f6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d119      	bne.n	8008fa0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0220 	bic.w	r2, r2, #32
 8008f7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	f043 0201 	orr.w	r2, r3, #1
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f7ff fd7b 	bl	8008a9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008fa6:	e00e      	b.n	8008fc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7ff fd85 	bl	8008ac4 <HAL_ADC_ErrorCallback>
}
 8008fba:	e004      	b.n	8008fc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f7ff fd67 	bl	8008ab0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2240      	movs	r2, #64	; 0x40
 8008ffc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009002:	f043 0204 	orr.w	r2, r3, #4
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fd5a 	bl	8008ac4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009010:	bf00      	nop
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009028:	4b0c      	ldr	r3, [pc, #48]	; (800905c <__NVIC_SetPriorityGrouping+0x44>)
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009034:	4013      	ands	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800904a:	4a04      	ldr	r2, [pc, #16]	; (800905c <__NVIC_SetPriorityGrouping+0x44>)
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	60d3      	str	r3, [r2, #12]
}
 8009050:	bf00      	nop
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	e000ed00 	.word	0xe000ed00

08009060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009064:	4b04      	ldr	r3, [pc, #16]	; (8009078 <__NVIC_GetPriorityGrouping+0x18>)
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	0a1b      	lsrs	r3, r3, #8
 800906a:	f003 0307 	and.w	r3, r3, #7
}
 800906e:	4618      	mov	r0, r3
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	e000ed00 	.word	0xe000ed00

0800907c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	db0b      	blt.n	80090a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800908e:	79fb      	ldrb	r3, [r7, #7]
 8009090:	f003 021f 	and.w	r2, r3, #31
 8009094:	4907      	ldr	r1, [pc, #28]	; (80090b4 <__NVIC_EnableIRQ+0x38>)
 8009096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800909a:	095b      	lsrs	r3, r3, #5
 800909c:	2001      	movs	r0, #1
 800909e:	fa00 f202 	lsl.w	r2, r0, r2
 80090a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80090a6:	bf00      	nop
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	e000e100 	.word	0xe000e100

080090b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db0a      	blt.n	80090e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	490c      	ldr	r1, [pc, #48]	; (8009104 <__NVIC_SetPriority+0x4c>)
 80090d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d6:	0112      	lsls	r2, r2, #4
 80090d8:	b2d2      	uxtb	r2, r2
 80090da:	440b      	add	r3, r1
 80090dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80090e0:	e00a      	b.n	80090f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	4908      	ldr	r1, [pc, #32]	; (8009108 <__NVIC_SetPriority+0x50>)
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	3b04      	subs	r3, #4
 80090f0:	0112      	lsls	r2, r2, #4
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	440b      	add	r3, r1
 80090f6:	761a      	strb	r2, [r3, #24]
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	e000e100 	.word	0xe000e100
 8009108:	e000ed00 	.word	0xe000ed00

0800910c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800910c:	b480      	push	{r7}
 800910e:	b089      	sub	sp, #36	; 0x24
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f1c3 0307 	rsb	r3, r3, #7
 8009126:	2b04      	cmp	r3, #4
 8009128:	bf28      	it	cs
 800912a:	2304      	movcs	r3, #4
 800912c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	3304      	adds	r3, #4
 8009132:	2b06      	cmp	r3, #6
 8009134:	d902      	bls.n	800913c <NVIC_EncodePriority+0x30>
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	3b03      	subs	r3, #3
 800913a:	e000      	b.n	800913e <NVIC_EncodePriority+0x32>
 800913c:	2300      	movs	r3, #0
 800913e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009140:	f04f 32ff 	mov.w	r2, #4294967295
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	fa02 f303 	lsl.w	r3, r2, r3
 800914a:	43da      	mvns	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	401a      	ands	r2, r3
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009154:	f04f 31ff 	mov.w	r1, #4294967295
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	fa01 f303 	lsl.w	r3, r1, r3
 800915e:	43d9      	mvns	r1, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009164:	4313      	orrs	r3, r2
         );
}
 8009166:	4618      	mov	r0, r3
 8009168:	3724      	adds	r7, #36	; 0x24
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
	...

08009174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3b01      	subs	r3, #1
 8009180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009184:	d301      	bcc.n	800918a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009186:	2301      	movs	r3, #1
 8009188:	e00f      	b.n	80091aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800918a:	4a0a      	ldr	r2, [pc, #40]	; (80091b4 <SysTick_Config+0x40>)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3b01      	subs	r3, #1
 8009190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009192:	210f      	movs	r1, #15
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	f7ff ff8e 	bl	80090b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <SysTick_Config+0x40>)
 800919e:	2200      	movs	r2, #0
 80091a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091a2:	4b04      	ldr	r3, [pc, #16]	; (80091b4 <SysTick_Config+0x40>)
 80091a4:	2207      	movs	r2, #7
 80091a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	e000e010 	.word	0xe000e010

080091b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff ff29 	bl	8009018 <__NVIC_SetPriorityGrouping>
}
 80091c6:	bf00      	nop
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b086      	sub	sp, #24
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	4603      	mov	r3, r0
 80091d6:	60b9      	str	r1, [r7, #8]
 80091d8:	607a      	str	r2, [r7, #4]
 80091da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80091dc:	2300      	movs	r3, #0
 80091de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80091e0:	f7ff ff3e 	bl	8009060 <__NVIC_GetPriorityGrouping>
 80091e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	6978      	ldr	r0, [r7, #20]
 80091ec:	f7ff ff8e 	bl	800910c <NVIC_EncodePriority>
 80091f0:	4602      	mov	r2, r0
 80091f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f6:	4611      	mov	r1, r2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff ff5d 	bl	80090b8 <__NVIC_SetPriority>
}
 80091fe:	bf00      	nop
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	4603      	mov	r3, r0
 800920e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff ff31 	bl	800907c <__NVIC_EnableIRQ>
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7ff ffa2 	bl	8009174 <SysTick_Config>
 8009230:	4603      	mov	r3, r0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009248:	f7ff fac4 	bl	80087d4 <HAL_GetTick>
 800924c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d101      	bne.n	8009258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e099      	b.n	800938c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 0201 	bic.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009278:	e00f      	b.n	800929a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800927a:	f7ff faab 	bl	80087d4 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b05      	cmp	r3, #5
 8009286:	d908      	bls.n	800929a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2220      	movs	r2, #32
 800928c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2203      	movs	r2, #3
 8009292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e078      	b.n	800938c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e8      	bne.n	800927a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	4b38      	ldr	r3, [pc, #224]	; (8009394 <HAL_DMA_Init+0x158>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80092c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d107      	bne.n	8009304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fc:	4313      	orrs	r3, r2
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	4313      	orrs	r3, r2
 8009302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0307 	bic.w	r3, r3, #7
 800931a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	697a      	ldr	r2, [r7, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	2b04      	cmp	r3, #4
 800932c:	d117      	bne.n	800935e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	4313      	orrs	r3, r2
 8009336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00e      	beq.n	800935e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 faab 	bl	800989c <DMA_CheckFifoParam>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2240      	movs	r2, #64	; 0x40
 8009350:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800935a:	2301      	movs	r3, #1
 800935c:	e016      	b.n	800938c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa62 	bl	8009830 <DMA_CalcBaseAndBitshift>
 800936c:	4603      	mov	r3, r0
 800936e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009374:	223f      	movs	r2, #63	; 0x3f
 8009376:	409a      	lsls	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	f010803f 	.word	0xf010803f

08009398 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
 80093a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <HAL_DMA_Start_IT+0x26>
 80093ba:	2302      	movs	r3, #2
 80093bc:	e040      	b.n	8009440 <HAL_DMA_Start_IT+0xa8>
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d12f      	bne.n	8009432 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f9f4 	bl	80097d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f0:	223f      	movs	r2, #63	; 0x3f
 80093f2:	409a      	lsls	r2, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f042 0216 	orr.w	r2, r2, #22
 8009406:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940c:	2b00      	cmp	r3, #0
 800940e:	d007      	beq.n	8009420 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0208 	orr.w	r2, r2, #8
 800941e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f042 0201 	orr.w	r2, r2, #1
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	e005      	b.n	800943e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800943a:	2302      	movs	r3, #2
 800943c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800943e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b02      	cmp	r3, #2
 800945a:	d004      	beq.n	8009466 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2280      	movs	r2, #128	; 0x80
 8009460:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e00c      	b.n	8009480 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2205      	movs	r2, #5
 800946a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f022 0201 	bic.w	r2, r2, #1
 800947c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009498:	4b92      	ldr	r3, [pc, #584]	; (80096e4 <HAL_DMA_IRQHandler+0x258>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a92      	ldr	r2, [pc, #584]	; (80096e8 <HAL_DMA_IRQHandler+0x25c>)
 800949e:	fba2 2303 	umull	r2, r3, r2, r3
 80094a2:	0a9b      	lsrs	r3, r3, #10
 80094a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b6:	2208      	movs	r2, #8
 80094b8:	409a      	lsls	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4013      	ands	r3, r2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d01a      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d013      	beq.n	80094f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 0204 	bic.w	r2, r2, #4
 80094de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e4:	2208      	movs	r2, #8
 80094e6:	409a      	lsls	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f0:	f043 0201 	orr.w	r2, r3, #1
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fc:	2201      	movs	r2, #1
 80094fe:	409a      	lsls	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4013      	ands	r3, r2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d012      	beq.n	800952e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00b      	beq.n	800952e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951a:	2201      	movs	r2, #1
 800951c:	409a      	lsls	r2, r3
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009526:	f043 0202 	orr.w	r2, r3, #2
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009532:	2204      	movs	r2, #4
 8009534:	409a      	lsls	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4013      	ands	r3, r2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d012      	beq.n	8009564 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00b      	beq.n	8009564 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009550:	2204      	movs	r2, #4
 8009552:	409a      	lsls	r2, r3
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955c:	f043 0204 	orr.w	r2, r3, #4
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	2210      	movs	r2, #16
 800956a:	409a      	lsls	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d043      	beq.n	80095fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0308 	and.w	r3, r3, #8
 800957e:	2b00      	cmp	r3, #0
 8009580:	d03c      	beq.n	80095fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009586:	2210      	movs	r2, #16
 8009588:	409a      	lsls	r2, r3
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d018      	beq.n	80095ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d108      	bne.n	80095bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d024      	beq.n	80095fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
 80095ba:	e01f      	b.n	80095fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01b      	beq.n	80095fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	4798      	blx	r3
 80095cc:	e016      	b.n	80095fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d107      	bne.n	80095ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0208 	bic.w	r2, r2, #8
 80095ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009600:	2220      	movs	r2, #32
 8009602:	409a      	lsls	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4013      	ands	r3, r2
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 808e 	beq.w	800972a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0310 	and.w	r3, r3, #16
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8086 	beq.w	800972a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009622:	2220      	movs	r2, #32
 8009624:	409a      	lsls	r2, r3
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b05      	cmp	r3, #5
 8009634:	d136      	bne.n	80096a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0216 	bic.w	r2, r2, #22
 8009644:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	695a      	ldr	r2, [r3, #20]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009654:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <HAL_DMA_IRQHandler+0x1da>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009662:	2b00      	cmp	r3, #0
 8009664:	d007      	beq.n	8009676 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 0208 	bic.w	r2, r2, #8
 8009674:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800967a:	223f      	movs	r2, #63	; 0x3f
 800967c:	409a      	lsls	r2, r3
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009696:	2b00      	cmp	r3, #0
 8009698:	d07d      	beq.n	8009796 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
        }
        return;
 80096a2:	e078      	b.n	8009796 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d01c      	beq.n	80096ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d108      	bne.n	80096d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d030      	beq.n	800972a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
 80096d0:	e02b      	b.n	800972a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d027      	beq.n	800972a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	4798      	blx	r3
 80096e2:	e022      	b.n	800972a <HAL_DMA_IRQHandler+0x29e>
 80096e4:	20001d74 	.word	0x20001d74
 80096e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10f      	bne.n	800971a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0210 	bic.w	r2, r2, #16
 8009708:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972e:	2b00      	cmp	r3, #0
 8009730:	d032      	beq.n	8009798 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d022      	beq.n	8009784 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2205      	movs	r2, #5
 8009742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0201 	bic.w	r2, r2, #1
 8009754:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3301      	adds	r3, #1
 800975a:	60bb      	str	r3, [r7, #8]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	429a      	cmp	r2, r3
 8009760:	d307      	bcc.n	8009772 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0301 	and.w	r3, r3, #1
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1f2      	bne.n	8009756 <HAL_DMA_IRQHandler+0x2ca>
 8009770:	e000      	b.n	8009774 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009772:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	4798      	blx	r3
 8009794:	e000      	b.n	8009798 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009796:	bf00      	nop
    }
  }
}
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop

080097a0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80097ae:	b2db      	uxtb	r3, r3
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80097f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	2b40      	cmp	r3, #64	; 0x40
 8009800:	d108      	bne.n	8009814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009812:	e007      	b.n	8009824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	60da      	str	r2, [r3, #12]
}
 8009824:	bf00      	nop
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	3b10      	subs	r3, #16
 8009840:	4a14      	ldr	r2, [pc, #80]	; (8009894 <DMA_CalcBaseAndBitshift+0x64>)
 8009842:	fba2 2303 	umull	r2, r3, r2, r3
 8009846:	091b      	lsrs	r3, r3, #4
 8009848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800984a:	4a13      	ldr	r2, [pc, #76]	; (8009898 <DMA_CalcBaseAndBitshift+0x68>)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4413      	add	r3, r2
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b03      	cmp	r3, #3
 800985c:	d909      	bls.n	8009872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009866:	f023 0303 	bic.w	r3, r3, #3
 800986a:	1d1a      	adds	r2, r3, #4
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	659a      	str	r2, [r3, #88]	; 0x58
 8009870:	e007      	b.n	8009882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800987a:	f023 0303 	bic.w	r3, r3, #3
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	aaaaaaab 	.word	0xaaaaaaab
 8009898:	08014c90 	.word	0x08014c90

0800989c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d11f      	bne.n	80098f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b03      	cmp	r3, #3
 80098ba:	d855      	bhi.n	8009968 <DMA_CheckFifoParam+0xcc>
 80098bc:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <DMA_CheckFifoParam+0x28>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098e7 	.word	0x080098e7
 80098cc:	080098d5 	.word	0x080098d5
 80098d0:	08009969 	.word	0x08009969
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d045      	beq.n	800996c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098e4:	e042      	b.n	800996c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80098ee:	d13f      	bne.n	8009970 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098f4:	e03c      	b.n	8009970 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098fe:	d121      	bne.n	8009944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b03      	cmp	r3, #3
 8009904:	d836      	bhi.n	8009974 <DMA_CheckFifoParam+0xd8>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <DMA_CheckFifoParam+0x70>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	0800991d 	.word	0x0800991d
 8009910:	08009923 	.word	0x08009923
 8009914:	0800991d 	.word	0x0800991d
 8009918:	08009935 	.word	0x08009935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]
      break;
 8009920:	e02f      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d024      	beq.n	8009978 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009932:	e021      	b.n	8009978 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800993c:	d11e      	bne.n	800997c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009942:	e01b      	b.n	800997c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b02      	cmp	r3, #2
 8009948:	d902      	bls.n	8009950 <DMA_CheckFifoParam+0xb4>
 800994a:	2b03      	cmp	r3, #3
 800994c:	d003      	beq.n	8009956 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800994e:	e018      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	73fb      	strb	r3, [r7, #15]
      break;
 8009954:	e015      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00e      	beq.n	8009980 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	73fb      	strb	r3, [r7, #15]
      break;
 8009966:	e00b      	b.n	8009980 <DMA_CheckFifoParam+0xe4>
      break;
 8009968:	bf00      	nop
 800996a:	e00a      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      break;
 800996c:	bf00      	nop
 800996e:	e008      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      break;
 8009970:	bf00      	nop
 8009972:	e006      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      break;
 8009974:	bf00      	nop
 8009976:	e004      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      break;
 8009978:	bf00      	nop
 800997a:	e002      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      break;   
 800997c:	bf00      	nop
 800997e:	e000      	b.n	8009982 <DMA_CheckFifoParam+0xe6>
      break;
 8009980:	bf00      	nop
    }
  } 
  
  return status; 
 8009982:	7bfb      	ldrb	r3, [r7, #15]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009990:	b480      	push	{r7}
 8009992:	b089      	sub	sp, #36	; 0x24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800999e:	2300      	movs	r3, #0
 80099a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099a6:	2300      	movs	r3, #0
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	e16b      	b.n	8009c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80099ac:	2201      	movs	r2, #1
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	fa02 f303 	lsl.w	r3, r2, r3
 80099b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4013      	ands	r3, r2
 80099be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	f040 815a 	bne.w	8009c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d00b      	beq.n	80099ea <HAL_GPIO_Init+0x5a>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d007      	beq.n	80099ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80099de:	2b11      	cmp	r3, #17
 80099e0:	d003      	beq.n	80099ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2b12      	cmp	r3, #18
 80099e8:	d130      	bne.n	8009a4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	2203      	movs	r2, #3
 80099f6:	fa02 f303 	lsl.w	r3, r2, r3
 80099fa:	43db      	mvns	r3, r3
 80099fc:	69ba      	ldr	r2, [r7, #24]
 80099fe:	4013      	ands	r3, r2
 8009a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	68da      	ldr	r2, [r3, #12]
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009a20:	2201      	movs	r2, #1
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	091b      	lsrs	r3, r3, #4
 8009a36:	f003 0201 	and.w	r2, r3, #1
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	2203      	movs	r2, #3
 8009a58:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5c:	43db      	mvns	r3, r3
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	4013      	ands	r3, r2
 8009a62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d003      	beq.n	8009a8c <HAL_GPIO_Init+0xfc>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2b12      	cmp	r3, #18
 8009a8a:	d123      	bne.n	8009ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a8c:	69fb      	ldr	r3, [r7, #28]
 8009a8e:	08da      	lsrs	r2, r3, #3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3208      	adds	r2, #8
 8009a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	220f      	movs	r2, #15
 8009aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa8:	43db      	mvns	r3, r3
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	4013      	ands	r3, r2
 8009aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	691a      	ldr	r2, [r3, #16]
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	08da      	lsrs	r2, r3, #3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3208      	adds	r2, #8
 8009ace:	69b9      	ldr	r1, [r7, #24]
 8009ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	005b      	lsls	r3, r3, #1
 8009ade:	2203      	movs	r2, #3
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	43db      	mvns	r3, r3
 8009ae6:	69ba      	ldr	r2, [r7, #24]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f003 0203 	and.w	r2, r3, #3
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	005b      	lsls	r3, r3, #1
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80b4 	beq.w	8009c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
 8009b1a:	4b5f      	ldr	r3, [pc, #380]	; (8009c98 <HAL_GPIO_Init+0x308>)
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b1e:	4a5e      	ldr	r2, [pc, #376]	; (8009c98 <HAL_GPIO_Init+0x308>)
 8009b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b24:	6453      	str	r3, [r2, #68]	; 0x44
 8009b26:	4b5c      	ldr	r3, [pc, #368]	; (8009c98 <HAL_GPIO_Init+0x308>)
 8009b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b32:	4a5a      	ldr	r2, [pc, #360]	; (8009c9c <HAL_GPIO_Init+0x30c>)
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	089b      	lsrs	r3, r3, #2
 8009b38:	3302      	adds	r3, #2
 8009b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f003 0303 	and.w	r3, r3, #3
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	220f      	movs	r2, #15
 8009b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b4e:	43db      	mvns	r3, r3
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	4013      	ands	r3, r2
 8009b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a51      	ldr	r2, [pc, #324]	; (8009ca0 <HAL_GPIO_Init+0x310>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d02b      	beq.n	8009bb6 <HAL_GPIO_Init+0x226>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a50      	ldr	r2, [pc, #320]	; (8009ca4 <HAL_GPIO_Init+0x314>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d025      	beq.n	8009bb2 <HAL_GPIO_Init+0x222>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a4f      	ldr	r2, [pc, #316]	; (8009ca8 <HAL_GPIO_Init+0x318>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d01f      	beq.n	8009bae <HAL_GPIO_Init+0x21e>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a4e      	ldr	r2, [pc, #312]	; (8009cac <HAL_GPIO_Init+0x31c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d019      	beq.n	8009baa <HAL_GPIO_Init+0x21a>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a4d      	ldr	r2, [pc, #308]	; (8009cb0 <HAL_GPIO_Init+0x320>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d013      	beq.n	8009ba6 <HAL_GPIO_Init+0x216>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a4c      	ldr	r2, [pc, #304]	; (8009cb4 <HAL_GPIO_Init+0x324>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00d      	beq.n	8009ba2 <HAL_GPIO_Init+0x212>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a4b      	ldr	r2, [pc, #300]	; (8009cb8 <HAL_GPIO_Init+0x328>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d007      	beq.n	8009b9e <HAL_GPIO_Init+0x20e>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a4a      	ldr	r2, [pc, #296]	; (8009cbc <HAL_GPIO_Init+0x32c>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d101      	bne.n	8009b9a <HAL_GPIO_Init+0x20a>
 8009b96:	2307      	movs	r3, #7
 8009b98:	e00e      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009b9a:	2308      	movs	r3, #8
 8009b9c:	e00c      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009b9e:	2306      	movs	r3, #6
 8009ba0:	e00a      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009ba2:	2305      	movs	r3, #5
 8009ba4:	e008      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009ba6:	2304      	movs	r3, #4
 8009ba8:	e006      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009baa:	2303      	movs	r3, #3
 8009bac:	e004      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009bae:	2302      	movs	r3, #2
 8009bb0:	e002      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <HAL_GPIO_Init+0x228>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	f002 0203 	and.w	r2, r2, #3
 8009bbe:	0092      	lsls	r2, r2, #2
 8009bc0:	4093      	lsls	r3, r2
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009bc8:	4934      	ldr	r1, [pc, #208]	; (8009c9c <HAL_GPIO_Init+0x30c>)
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	089b      	lsrs	r3, r3, #2
 8009bce:	3302      	adds	r3, #2
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009bd6:	4b3a      	ldr	r3, [pc, #232]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	43db      	mvns	r3, r3
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	4013      	ands	r3, r2
 8009be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d003      	beq.n	8009bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009bf2:	69ba      	ldr	r2, [r7, #24]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009bfa:	4a31      	ldr	r2, [pc, #196]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009c00:	4b2f      	ldr	r3, [pc, #188]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c24:	4a26      	ldr	r2, [pc, #152]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009c2a:	4b25      	ldr	r3, [pc, #148]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	43db      	mvns	r3, r3
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	4013      	ands	r3, r2
 8009c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c4e:	4a1c      	ldr	r2, [pc, #112]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c54:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	43db      	mvns	r3, r3
 8009c5e:	69ba      	ldr	r2, [r7, #24]
 8009c60:	4013      	ands	r3, r2
 8009c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009c78:	4a11      	ldr	r2, [pc, #68]	; (8009cc0 <HAL_GPIO_Init+0x330>)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	3301      	adds	r3, #1
 8009c82:	61fb      	str	r3, [r7, #28]
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	2b0f      	cmp	r3, #15
 8009c88:	f67f ae90 	bls.w	80099ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	3724      	adds	r7, #36	; 0x24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	40023800 	.word	0x40023800
 8009c9c:	40013800 	.word	0x40013800
 8009ca0:	40020000 	.word	0x40020000
 8009ca4:	40020400 	.word	0x40020400
 8009ca8:	40020800 	.word	0x40020800
 8009cac:	40020c00 	.word	0x40020c00
 8009cb0:	40021000 	.word	0x40021000
 8009cb4:	40021400 	.word	0x40021400
 8009cb8:	40021800 	.word	0x40021800
 8009cbc:	40021c00 	.word	0x40021c00
 8009cc0:	40013c00 	.word	0x40013c00

08009cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	807b      	strh	r3, [r7, #2]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009cd4:	787b      	ldrb	r3, [r7, #1]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cda:	887a      	ldrh	r2, [r7, #2]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009ce0:	e003      	b.n	8009cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009ce2:	887b      	ldrh	r3, [r7, #2]
 8009ce4:	041a      	lsls	r2, r3, #16
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	619a      	str	r2, [r3, #24]
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e11f      	b.n	8009f4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fd f988 	bl	8007034 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2224      	movs	r2, #36	; 0x24
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0201 	bic.w	r2, r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d5c:	f003 fb36 	bl	800d3cc <HAL_RCC_GetPCLK1Freq>
 8009d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	4a7b      	ldr	r2, [pc, #492]	; (8009f54 <HAL_I2C_Init+0x25c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d807      	bhi.n	8009d7c <HAL_I2C_Init+0x84>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4a7a      	ldr	r2, [pc, #488]	; (8009f58 <HAL_I2C_Init+0x260>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	bf94      	ite	ls
 8009d74:	2301      	movls	r3, #1
 8009d76:	2300      	movhi	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	e006      	b.n	8009d8a <HAL_I2C_Init+0x92>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a77      	ldr	r2, [pc, #476]	; (8009f5c <HAL_I2C_Init+0x264>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	bf94      	ite	ls
 8009d84:	2301      	movls	r3, #1
 8009d86:	2300      	movhi	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e0db      	b.n	8009f4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4a72      	ldr	r2, [pc, #456]	; (8009f60 <HAL_I2C_Init+0x268>)
 8009d96:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9a:	0c9b      	lsrs	r3, r3, #18
 8009d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	4a64      	ldr	r2, [pc, #400]	; (8009f54 <HAL_I2C_Init+0x25c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d802      	bhi.n	8009dcc <HAL_I2C_Init+0xd4>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	e009      	b.n	8009de0 <HAL_I2C_Init+0xe8>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009dd2:	fb02 f303 	mul.w	r3, r2, r3
 8009dd6:	4a63      	ldr	r2, [pc, #396]	; (8009f64 <HAL_I2C_Init+0x26c>)
 8009dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ddc:	099b      	lsrs	r3, r3, #6
 8009dde:	3301      	adds	r3, #1
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	4956      	ldr	r1, [pc, #344]	; (8009f54 <HAL_I2C_Init+0x25c>)
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	d80d      	bhi.n	8009e1c <HAL_I2C_Init+0x124>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	1e59      	subs	r1, r3, #1
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e0e:	3301      	adds	r3, #1
 8009e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e14:	2b04      	cmp	r3, #4
 8009e16:	bf38      	it	cc
 8009e18:	2304      	movcc	r3, #4
 8009e1a:	e04f      	b.n	8009ebc <HAL_I2C_Init+0x1c4>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d111      	bne.n	8009e48 <HAL_I2C_Init+0x150>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	1e58      	subs	r0, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6859      	ldr	r1, [r3, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	440b      	add	r3, r1
 8009e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e36:	3301      	adds	r3, #1
 8009e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	bf0c      	ite	eq
 8009e40:	2301      	moveq	r3, #1
 8009e42:	2300      	movne	r3, #0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	e012      	b.n	8009e6e <HAL_I2C_Init+0x176>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	1e58      	subs	r0, r3, #1
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6859      	ldr	r1, [r3, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	440b      	add	r3, r1
 8009e56:	0099      	lsls	r1, r3, #2
 8009e58:	440b      	add	r3, r1
 8009e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e5e:	3301      	adds	r3, #1
 8009e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	bf0c      	ite	eq
 8009e68:	2301      	moveq	r3, #1
 8009e6a:	2300      	movne	r3, #0
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <HAL_I2C_Init+0x17e>
 8009e72:	2301      	movs	r3, #1
 8009e74:	e022      	b.n	8009ebc <HAL_I2C_Init+0x1c4>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10e      	bne.n	8009e9c <HAL_I2C_Init+0x1a4>
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	1e58      	subs	r0, r3, #1
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6859      	ldr	r1, [r3, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	440b      	add	r3, r1
 8009e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e90:	3301      	adds	r3, #1
 8009e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9a:	e00f      	b.n	8009ebc <HAL_I2C_Init+0x1c4>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	1e58      	subs	r0, r3, #1
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6859      	ldr	r1, [r3, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	0099      	lsls	r1, r3, #2
 8009eac:	440b      	add	r3, r1
 8009eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ebc:	6879      	ldr	r1, [r7, #4]
 8009ebe:	6809      	ldr	r1, [r1, #0]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	69da      	ldr	r2, [r3, #28]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	431a      	orrs	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	430a      	orrs	r2, r1
 8009ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6911      	ldr	r1, [r2, #16]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	68d2      	ldr	r2, [r2, #12]
 8009ef6:	4311      	orrs	r1, r2
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6812      	ldr	r2, [r2, #0]
 8009efc:	430b      	orrs	r3, r1
 8009efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	695a      	ldr	r2, [r3, #20]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2220      	movs	r2, #32
 8009f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	000186a0 	.word	0x000186a0
 8009f58:	001e847f 	.word	0x001e847f
 8009f5c:	003d08ff 	.word	0x003d08ff
 8009f60:	431bde83 	.word	0x431bde83
 8009f64:	10624dd3 	.word	0x10624dd3

08009f68 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	461a      	mov	r2, r3
 8009f74:	460b      	mov	r3, r1
 8009f76:	817b      	strh	r3, [r7, #10]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	f040 80f4 	bne.w	800a176 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009f8e:	4b7c      	ldr	r3, [pc, #496]	; (800a180 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	08db      	lsrs	r3, r3, #3
 8009f94:	4a7b      	ldr	r2, [pc, #492]	; (800a184 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	0a1a      	lsrs	r2, r3, #8
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	4413      	add	r3, r2
 8009fa2:	009a      	lsls	r2, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d116      	bne.n	8009fe2 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	f043 0220 	orr.w	r2, r3, #32
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e0ca      	b.n	800a178 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	f003 0302 	and.w	r3, r3, #2
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d0db      	beq.n	8009fa8 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_I2C_Master_Transmit_DMA+0x96>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e0bc      	b.n	800a178 <HAL_I2C_Master_Transmit_DMA+0x210>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	2b01      	cmp	r3, #1
 800a012:	d007      	beq.n	800a024 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0201 	orr.w	r2, r2, #1
 800a022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2221      	movs	r2, #33	; 0x21
 800a038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2210      	movs	r2, #16
 800a040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2200      	movs	r2, #0
 800a048:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	893a      	ldrh	r2, [r7, #8]
 800a054:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a05a:	b29a      	uxth	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4a49      	ldr	r2, [pc, #292]	; (800a188 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800a064:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800a066:	897a      	ldrh	r2, [r7, #10]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a070:	2b00      	cmp	r3, #0
 800a072:	d062      	beq.n	800a13a <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a078:	4a44      	ldr	r2, [pc, #272]	; (800a18c <HAL_I2C_Master_Transmit_DMA+0x224>)
 800a07a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a080:	4a43      	ldr	r2, [pc, #268]	; (800a190 <HAL_I2C_Master_Transmit_DMA+0x228>)
 800a082:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a088:	2200      	movs	r2, #0
 800a08a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a090:	2200      	movs	r2, #0
 800a092:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a098:	2200      	movs	r2, #0
 800a09a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3310      	adds	r3, #16
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ba:	f7ff f96d 	bl	8009398 <HAL_DMA_Start_IT>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d124      	bne.n	800a112 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0d6:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0e6:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a0fe:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a10e:	605a      	str	r2, [r3, #4]
 800a110:	e02f      	b.n	800a172 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2220      	movs	r2, #32
 800a116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	f043 0210 	orr.w	r2, r3, #16
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e01e      	b.n	800a178 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a148:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a158:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800a170:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	e000      	b.n	800a178 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800a176:	2302      	movs	r3, #2
  }
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20001d74 	.word	0x20001d74
 800a184:	14f8b589 	.word	0x14f8b589
 800a188:	ffff0000 	.word	0xffff0000
 800a18c:	0800c45d 	.word	0x0800c45d
 800a190:	0800c607 	.word	0x0800c607

0800a194 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af02      	add	r7, sp, #8
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	4608      	mov	r0, r1
 800a19e:	4611      	mov	r1, r2
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	817b      	strh	r3, [r7, #10]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	813b      	strh	r3, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1ae:	f7fe fb11 	bl	80087d4 <HAL_GetTick>
 800a1b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	f040 8208 	bne.w	800a5d2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	2319      	movs	r3, #25
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	497b      	ldr	r1, [pc, #492]	; (800a3b8 <HAL_I2C_Mem_Read+0x224>)
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f002 faff 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e1fb      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d101      	bne.n	800a1ea <HAL_I2C_Mem_Read+0x56>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	e1f4      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d007      	beq.n	800a210 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0201 	orr.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a21e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2222      	movs	r2, #34	; 0x22
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2240      	movs	r2, #64	; 0x40
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a23a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a240:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4a5b      	ldr	r2, [pc, #364]	; (800a3bc <HAL_I2C_Mem_Read+0x228>)
 800a250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a252:	88f8      	ldrh	r0, [r7, #6]
 800a254:	893a      	ldrh	r2, [r7, #8]
 800a256:	8979      	ldrh	r1, [r7, #10]
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	4603      	mov	r3, r0
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f002 f812 	bl	800c28c <I2C_RequestMemoryRead>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e1b0      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a276:	2b00      	cmp	r3, #0
 800a278:	d113      	bne.n	800a2a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a27a:	2300      	movs	r3, #0
 800a27c:	623b      	str	r3, [r7, #32]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	623b      	str	r3, [r7, #32]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	623b      	str	r3, [r7, #32]
 800a28e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	e184      	b.n	800a5ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d11b      	bne.n	800a2e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61fb      	str	r3, [r7, #28]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	61fb      	str	r3, [r7, #28]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	e164      	b.n	800a5ac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d11b      	bne.n	800a322 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a30a:	2300      	movs	r3, #0
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	61bb      	str	r3, [r7, #24]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	61bb      	str	r3, [r7, #24]
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	e144      	b.n	800a5ac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a322:	2300      	movs	r3, #0
 800a324:	617b      	str	r3, [r7, #20]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	617b      	str	r3, [r7, #20]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a338:	e138      	b.n	800a5ac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a33e:	2b03      	cmp	r3, #3
 800a340:	f200 80f1 	bhi.w	800a526 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d123      	bne.n	800a394 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a34e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f002 fb87 	bl	800ca64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e139      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691a      	ldr	r2, [r3, #16]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a388:	b29b      	uxth	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a392:	e10b      	b.n	800a5ac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d14e      	bne.n	800a43a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	4906      	ldr	r1, [pc, #24]	; (800a3c0 <HAL_I2C_Mem_Read+0x22c>)
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f002 fa12 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d008      	beq.n	800a3c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e10e      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
 800a3b6:	bf00      	nop
 800a3b8:	00100002 	.word	0x00100002
 800a3bc:	ffff0000 	.word	0xffff0000
 800a3c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	691a      	ldr	r2, [r3, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	1c5a      	adds	r2, r3, #1
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	3b01      	subs	r3, #1
 800a400:	b29a      	uxth	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a42e:	b29b      	uxth	r3, r3
 800a430:	3b01      	subs	r3, #1
 800a432:	b29a      	uxth	r2, r3
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a438:	e0b8      	b.n	800a5ac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a440:	2200      	movs	r2, #0
 800a442:	4966      	ldr	r1, [pc, #408]	; (800a5dc <HAL_I2C_Mem_Read+0x448>)
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f002 f9c3 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e0bf      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a462:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	691a      	ldr	r2, [r3, #16]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a480:	3b01      	subs	r3, #1
 800a482:	b29a      	uxth	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	2200      	movs	r2, #0
 800a49e:	494f      	ldr	r1, [pc, #316]	; (800a5dc <HAL_I2C_Mem_Read+0x448>)
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f002 f995 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d001      	beq.n	800a4b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e091      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	b2d2      	uxtb	r2, r2
 800a4cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	691a      	ldr	r2, [r3, #16]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	b2d2      	uxtb	r2, r2
 800a4fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	3b01      	subs	r3, #1
 800a51e:	b29a      	uxth	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a524:	e042      	b.n	800a5ac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a528:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f002 fa9a 	bl	800ca64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e04c      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	691a      	ldr	r2, [r3, #16]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a556:	3b01      	subs	r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	f003 0304 	and.w	r3, r3, #4
 800a576:	2b04      	cmp	r3, #4
 800a578:	d118      	bne.n	800a5ac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	691a      	ldr	r2, [r3, #16]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	b2d2      	uxtb	r2, r2
 800a586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	1c5a      	adds	r2, r3, #1
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a596:	3b01      	subs	r3, #1
 800a598:	b29a      	uxth	r2, r3
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f47f aec2 	bne.w	800a33a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2220      	movs	r2, #32
 800a5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e000      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a5d2:	2302      	movs	r3, #2
  }
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3728      	adds	r7, #40	; 0x28
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	00010004 	.word	0x00010004

0800a5e0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08c      	sub	sp, #48	; 0x30
 800a5e4:	af02      	add	r7, sp, #8
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	4608      	mov	r0, r1
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	817b      	strh	r3, [r7, #10]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	813b      	strh	r3, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5fa:	f7fe f8eb 	bl	80087d4 <HAL_GetTick>
 800a5fe:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	f040 8154 	bne.w	800a8ba <HAL_I2C_Mem_Read_DMA+0x2da>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a612:	4b96      	ldr	r3, [pc, #600]	; (800a86c <HAL_I2C_Mem_Read_DMA+0x28c>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	08db      	lsrs	r3, r3, #3
 800a618:	4a95      	ldr	r2, [pc, #596]	; (800a870 <HAL_I2C_Mem_Read_DMA+0x290>)
 800a61a:	fba2 2303 	umull	r2, r3, r2, r3
 800a61e:	0a1a      	lsrs	r2, r3, #8
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009a      	lsls	r2, r3, #2
 800a628:	4413      	add	r3, r2
 800a62a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	3b01      	subs	r3, #1
 800a630:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d116      	bne.n	800a666 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2220      	movs	r2, #32
 800a642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	f043 0220 	orr.w	r2, r3, #32
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a662:	2301      	movs	r3, #1
 800a664:	e12a      	b.n	800a8bc <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	699b      	ldr	r3, [r3, #24]
 800a66c:	f003 0302 	and.w	r3, r3, #2
 800a670:	2b02      	cmp	r3, #2
 800a672:	d0db      	beq.n	800a62c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d101      	bne.n	800a682 <HAL_I2C_Mem_Read_DMA+0xa2>
 800a67e:	2302      	movs	r3, #2
 800a680:	e11c      	b.n	800a8bc <HAL_I2C_Mem_Read_DMA+0x2dc>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	2b01      	cmp	r3, #1
 800a696:	d007      	beq.n	800a6a8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
 800a6a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2222      	movs	r2, #34	; 0x22
 800a6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2240      	movs	r2, #64	; 0x40
 800a6c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a6d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4a63      	ldr	r2, [pc, #396]	; (800a874 <HAL_I2C_Mem_Read_DMA+0x294>)
 800a6e8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 80ab 	beq.w	800a84a <HAL_I2C_Mem_Read_DMA+0x26a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f8:	4a5f      	ldr	r2, [pc, #380]	; (800a878 <HAL_I2C_Mem_Read_DMA+0x298>)
 800a6fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a700:	4a5e      	ldr	r2, [pc, #376]	; (800a87c <HAL_I2C_Mem_Read_DMA+0x29c>)
 800a702:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a708:	2200      	movs	r2, #0
 800a70a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a710:	2200      	movs	r2, #0
 800a712:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a718:	2200      	movs	r2, #0
 800a71a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a720:	2200      	movs	r2, #0
 800a722:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3310      	adds	r3, #16
 800a72e:	4619      	mov	r1, r3
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a734:	461a      	mov	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a73a:	f7fe fe2d 	bl	8009398 <HAL_DMA_Start_IT>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800a744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d16a      	bne.n	800a822 <HAL_I2C_Mem_Read_DMA+0x242>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a74c:	88f8      	ldrh	r0, [r7, #6]
 800a74e:	893a      	ldrh	r2, [r7, #8]
 800a750:	8979      	ldrh	r1, [r7, #10]
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	2323      	movs	r3, #35	; 0x23
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	4603      	mov	r3, r0
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f001 fd95 	bl	800c28c <I2C_RequestMemoryRead>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d027      	beq.n	800a7b8 <HAL_I2C_Mem_Read_DMA+0x1d8>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fe fe6b 	bl	8009448 <HAL_DMA_Abort_IT>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Clear directly Complete callback as no XferAbortCallback is used to finalize Abort treatment */
          if (hi2c->hdmarx != NULL)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <HAL_I2C_Mem_Read_DMA+0x1a8>
          {
            hi2c->hdmarx->XferCpltCallback = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	2200      	movs	r2, #0
 800a786:	63da      	str	r2, [r3, #60]	; 0x3c
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a796:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0201 	bic.w	r2, r2, #1
 800a7b2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e081      	b.n	800a8bc <HAL_I2C_Mem_Read_DMA+0x2dc>
        }

        if (hi2c->XferSize == 1U)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d108      	bne.n	800a7d2 <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	e007      	b.n	800a7e2 <HAL_I2C_Mem_Read_DMA+0x202>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a7e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	61bb      	str	r3, [r7, #24]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	61bb      	str	r3, [r7, #24]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	61bb      	str	r3, [r7, #24]
 800a7f6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	685a      	ldr	r2, [r3, #4]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a80e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a81e:	605a      	str	r2, [r3, #4]
 800a820:	e049      	b.n	800a8b6 <HAL_I2C_Mem_Read_DMA+0x2d6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2220      	movs	r2, #32
 800a826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	f043 0210 	orr.w	r2, r3, #16
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e038      	b.n	800a8bc <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a84a:	88f8      	ldrh	r0, [r7, #6]
 800a84c:	893a      	ldrh	r2, [r7, #8]
 800a84e:	8979      	ldrh	r1, [r7, #10]
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	2323      	movs	r3, #35	; 0x23
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	4603      	mov	r3, r0
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f001 fd16 	bl	800c28c <I2C_RequestMemoryRead>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00c      	beq.n	800a880 <HAL_I2C_Mem_Read_DMA+0x2a0>
      {
        return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e028      	b.n	800a8bc <HAL_I2C_Mem_Read_DMA+0x2dc>
 800a86a:	bf00      	nop
 800a86c:	20001d74 	.word	0x20001d74
 800a870:	14f8b589 	.word	0x14f8b589
 800a874:	ffff0000 	.word	0xffff0000
 800a878:	0800c45d 	.word	0x0800c45d
 800a87c:	0800c607 	.word	0x0800c607
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a880:	2300      	movs	r3, #0
 800a882:	617b      	str	r3, [r7, #20]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	617b      	str	r3, [r7, #20]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	617b      	str	r3, [r7, #20]
 800a894:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8a4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e000      	b.n	800a8bc <HAL_I2C_Mem_Read_DMA+0x2dc>
  }
  else
  {
    return HAL_BUSY;
 800a8ba:	2302      	movs	r3, #2
  }
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3728      	adds	r7, #40	; 0x28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08a      	sub	sp, #40	; 0x28
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	607a      	str	r2, [r7, #4]
 800a8ce:	603b      	str	r3, [r7, #0]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a8d4:	f7fd ff7e 	bl	80087d4 <HAL_GetTick>
 800a8d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	f040 8111 	bne.w	800ab0e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	2319      	movs	r3, #25
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	4988      	ldr	r1, [pc, #544]	; (800ab18 <HAL_I2C_IsDeviceReady+0x254>)
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f001 ff6a 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a902:	2302      	movs	r3, #2
 800a904:	e104      	b.n	800ab10 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_I2C_IsDeviceReady+0x50>
 800a910:	2302      	movs	r3, #2
 800a912:	e0fd      	b.n	800ab10 <HAL_I2C_IsDeviceReady+0x24c>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b01      	cmp	r3, #1
 800a928:	d007      	beq.n	800a93a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f042 0201 	orr.w	r2, r2, #1
 800a938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a948:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2224      	movs	r2, #36	; 0x24
 800a94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	4a70      	ldr	r2, [pc, #448]	; (800ab1c <HAL_I2C_IsDeviceReady+0x258>)
 800a95c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a96c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	9300      	str	r3, [sp, #0]
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2200      	movs	r2, #0
 800a976:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f001 ff28 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a994:	d103      	bne.n	800a99e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a99c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e0b6      	b.n	800ab10 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a9a2:	897b      	ldrh	r3, [r7, #10]
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a9b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a9b2:	f7fd ff0f 	bl	80087d4 <HAL_GetTick>
 800a9b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	f003 0302 	and.w	r3, r3, #2
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	bf0c      	ite	eq
 800a9c6:	2301      	moveq	r3, #1
 800a9c8:	2300      	movne	r3, #0
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9dc:	bf0c      	ite	eq
 800a9de:	2301      	moveq	r3, #1
 800a9e0:	2300      	movne	r3, #0
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a9e6:	e025      	b.n	800aa34 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a9e8:	f7fd fef4 	bl	80087d4 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d302      	bcc.n	800a9fe <HAL_I2C_IsDeviceReady+0x13a>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d103      	bne.n	800aa06 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	22a0      	movs	r2, #160	; 0xa0
 800aa02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	bf0c      	ite	eq
 800aa14:	2301      	moveq	r3, #1
 800aa16:	2300      	movne	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa2a:	bf0c      	ite	eq
 800aa2c:	2301      	moveq	r3, #1
 800aa2e:	2300      	movne	r3, #0
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	2ba0      	cmp	r3, #160	; 0xa0
 800aa3e:	d005      	beq.n	800aa4c <HAL_I2C_IsDeviceReady+0x188>
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <HAL_I2C_IsDeviceReady+0x188>
 800aa46:	7dbb      	ldrb	r3, [r7, #22]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0cd      	beq.n	800a9e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	f003 0302 	and.w	r3, r3, #2
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d129      	bne.n	800aab6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa70:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	613b      	str	r3, [r7, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	613b      	str	r3, [r7, #16]
 800aa86:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	2319      	movs	r3, #25
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4921      	ldr	r1, [pc, #132]	; (800ab18 <HAL_I2C_IsDeviceReady+0x254>)
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f001 fe9c 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e036      	b.n	800ab10 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	e02c      	b.n	800ab10 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aac4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aace:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	2319      	movs	r3, #25
 800aad6:	2201      	movs	r2, #1
 800aad8:	490f      	ldr	r1, [pc, #60]	; (800ab18 <HAL_I2C_IsDeviceReady+0x254>)
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f001 fe78 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e012      	b.n	800ab10 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800aaea:	69bb      	ldr	r3, [r7, #24]
 800aaec:	3301      	adds	r3, #1
 800aaee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	f4ff af32 	bcc.w	800a95e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2220      	movs	r2, #32
 800aafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e000      	b.n	800ab10 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800ab0e:	2302      	movs	r3, #2
  }
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3720      	adds	r7, #32
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	00100002 	.word	0x00100002
 800ab1c:	ffff0000 	.word	0xffff0000

0800ab20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	2b10      	cmp	r3, #16
 800ab4e:	d003      	beq.n	800ab58 <HAL_I2C_EV_IRQHandler+0x38>
 800ab50:	7bfb      	ldrb	r3, [r7, #15]
 800ab52:	2b40      	cmp	r3, #64	; 0x40
 800ab54:	f040 80bd 	bne.w	800acd2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10d      	bne.n	800ab8e <HAL_I2C_EV_IRQHandler+0x6e>
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ab78:	d003      	beq.n	800ab82 <HAL_I2C_EV_IRQHandler+0x62>
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ab80:	d101      	bne.n	800ab86 <HAL_I2C_EV_IRQHandler+0x66>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <HAL_I2C_EV_IRQHandler+0x68>
 800ab86:	2300      	movs	r3, #0
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	f000 812e 	beq.w	800adea <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00c      	beq.n	800abb2 <HAL_I2C_EV_IRQHandler+0x92>
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	0a5b      	lsrs	r3, r3, #9
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d006      	beq.n	800abb2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 ffe2 	bl	800cb6e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fd58 	bl	800b660 <I2C_Master_SB>
 800abb0:	e08e      	b.n	800acd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	08db      	lsrs	r3, r3, #3
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <HAL_I2C_EV_IRQHandler+0xb2>
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	0a5b      	lsrs	r3, r3, #9
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fdce 	bl	800b76c <I2C_Master_ADD10>
 800abd0:	e07e      	b.n	800acd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	085b      	lsrs	r3, r3, #1
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d009      	beq.n	800abf2 <HAL_I2C_EV_IRQHandler+0xd2>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	0a5b      	lsrs	r3, r3, #9
 800abe2:	f003 0301 	and.w	r3, r3, #1
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fde8 	bl	800b7c0 <I2C_Master_ADDR>
 800abf0:	e06e      	b.n	800acd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	089b      	lsrs	r3, r3, #2
 800abf6:	f003 0301 	and.w	r3, r3, #1
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d037      	beq.n	800ac6e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac0c:	f000 80ef 	beq.w	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	09db      	lsrs	r3, r3, #7
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00f      	beq.n	800ac3c <HAL_I2C_EV_IRQHandler+0x11c>
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	0a9b      	lsrs	r3, r3, #10
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d009      	beq.n	800ac3c <HAL_I2C_EV_IRQHandler+0x11c>
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	089b      	lsrs	r3, r3, #2
 800ac2c:	f003 0301 	and.w	r3, r3, #1
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d103      	bne.n	800ac3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f9e5 	bl	800b004 <I2C_MasterTransmit_TXE>
 800ac3a:	e049      	b.n	800acd0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	089b      	lsrs	r3, r3, #2
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f000 80d2 	beq.w	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	0a5b      	lsrs	r3, r3, #9
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 80cb 	beq.w	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	2b10      	cmp	r3, #16
 800ac5c:	d103      	bne.n	800ac66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa6c 	bl	800b13c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac64:	e0c3      	b.n	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fad0 	bl	800b20c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ac6c:	e0bf      	b.n	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac7c:	f000 80b7 	beq.w	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	099b      	lsrs	r3, r3, #6
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00f      	beq.n	800acac <HAL_I2C_EV_IRQHandler+0x18c>
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	0a9b      	lsrs	r3, r3, #10
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d009      	beq.n	800acac <HAL_I2C_EV_IRQHandler+0x18c>
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	089b      	lsrs	r3, r3, #2
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d103      	bne.n	800acac <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fb40 	bl	800b32a <I2C_MasterReceive_RXNE>
 800acaa:	e011      	b.n	800acd0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	089b      	lsrs	r3, r3, #2
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 809a 	beq.w	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	0a5b      	lsrs	r3, r3, #9
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8093 	beq.w	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fbdf 	bl	800b48c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800acce:	e08e      	b.n	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
 800acd0:	e08d      	b.n	800adee <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d004      	beq.n	800ace4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	61fb      	str	r3, [r7, #28]
 800ace2:	e007      	b.n	800acf4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	085b      	lsrs	r3, r3, #1
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d012      	beq.n	800ad26 <HAL_I2C_EV_IRQHandler+0x206>
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	0a5b      	lsrs	r3, r3, #9
 800ad04:	f003 0301 	and.w	r3, r3, #1
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00c      	beq.n	800ad26 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ad1c:	69b9      	ldr	r1, [r7, #24]
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 ff9d 	bl	800bc5e <I2C_Slave_ADDR>
 800ad24:	e066      	b.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	091b      	lsrs	r3, r3, #4
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d009      	beq.n	800ad46 <HAL_I2C_EV_IRQHandler+0x226>
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	0a5b      	lsrs	r3, r3, #9
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 ffd2 	bl	800bce8 <I2C_Slave_STOPF>
 800ad44:	e056      	b.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	2b21      	cmp	r3, #33	; 0x21
 800ad4a:	d002      	beq.n	800ad52 <HAL_I2C_EV_IRQHandler+0x232>
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
 800ad4e:	2b29      	cmp	r3, #41	; 0x29
 800ad50:	d125      	bne.n	800ad9e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	09db      	lsrs	r3, r3, #7
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00f      	beq.n	800ad7e <HAL_I2C_EV_IRQHandler+0x25e>
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	0a9b      	lsrs	r3, r3, #10
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d009      	beq.n	800ad7e <HAL_I2C_EV_IRQHandler+0x25e>
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	089b      	lsrs	r3, r3, #2
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d103      	bne.n	800ad7e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 feb3 	bl	800bae2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad7c:	e039      	b.n	800adf2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	089b      	lsrs	r3, r3, #2
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d033      	beq.n	800adf2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	0a5b      	lsrs	r3, r3, #9
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d02d      	beq.n	800adf2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fee0 	bl	800bb5c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad9c:	e029      	b.n	800adf2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	099b      	lsrs	r3, r3, #6
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00f      	beq.n	800adca <HAL_I2C_EV_IRQHandler+0x2aa>
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	0a9b      	lsrs	r3, r3, #10
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d009      	beq.n	800adca <HAL_I2C_EV_IRQHandler+0x2aa>
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	089b      	lsrs	r3, r3, #2
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d103      	bne.n	800adca <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 feeb 	bl	800bb9e <I2C_SlaveReceive_RXNE>
 800adc8:	e014      	b.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	089b      	lsrs	r3, r3, #2
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00e      	beq.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	0a5b      	lsrs	r3, r3, #9
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d008      	beq.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 ff19 	bl	800bc1a <I2C_SlaveReceive_BTF>
 800ade8:	e004      	b.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800adea:	bf00      	nop
 800adec:	e002      	b.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800adf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b08a      	sub	sp, #40	; 0x28
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	0a1b      	lsrs	r3, r3, #8
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00e      	beq.n	800ae48 <HAL_I2C_ER_IRQHandler+0x4e>
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	0a1b      	lsrs	r3, r3, #8
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d008      	beq.n	800ae48 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	f043 0301 	orr.w	r3, r3, #1
 800ae3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae46:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	0a5b      	lsrs	r3, r3, #9
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00e      	beq.n	800ae72 <HAL_I2C_ER_IRQHandler+0x78>
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	0a1b      	lsrs	r3, r3, #8
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d008      	beq.n	800ae72 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800ae60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae62:	f043 0302 	orr.w	r3, r3, #2
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800ae70:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	0a9b      	lsrs	r3, r3, #10
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d03f      	beq.n	800aefe <HAL_I2C_ER_IRQHandler+0x104>
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	0a1b      	lsrs	r3, r3, #8
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d039      	beq.n	800aefe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800ae8a:	7efb      	ldrb	r3, [r7, #27]
 800ae8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aea2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800aea4:	7ebb      	ldrb	r3, [r7, #26]
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	d112      	bne.n	800aed0 <HAL_I2C_ER_IRQHandler+0xd6>
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10f      	bne.n	800aed0 <HAL_I2C_ER_IRQHandler+0xd6>
 800aeb0:	7cfb      	ldrb	r3, [r7, #19]
 800aeb2:	2b21      	cmp	r3, #33	; 0x21
 800aeb4:	d008      	beq.n	800aec8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800aeb6:	7cfb      	ldrb	r3, [r7, #19]
 800aeb8:	2b29      	cmp	r3, #41	; 0x29
 800aeba:	d005      	beq.n	800aec8 <HAL_I2C_ER_IRQHandler+0xce>
 800aebc:	7cfb      	ldrb	r3, [r7, #19]
 800aebe:	2b28      	cmp	r3, #40	; 0x28
 800aec0:	d106      	bne.n	800aed0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b21      	cmp	r3, #33	; 0x21
 800aec6:	d103      	bne.n	800aed0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 f83d 	bl	800bf48 <I2C_Slave_AF>
 800aece:	e016      	b.n	800aefe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aed8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800aeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aedc:	f043 0304 	orr.w	r3, r3, #4
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800aee2:	7efb      	ldrb	r3, [r7, #27]
 800aee4:	2b10      	cmp	r3, #16
 800aee6:	d002      	beq.n	800aeee <HAL_I2C_ER_IRQHandler+0xf4>
 800aee8:	7efb      	ldrb	r3, [r7, #27]
 800aeea:	2b40      	cmp	r3, #64	; 0x40
 800aeec:	d107      	bne.n	800aefe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aefc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aefe:	6a3b      	ldr	r3, [r7, #32]
 800af00:	0adb      	lsrs	r3, r3, #11
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00e      	beq.n	800af28 <HAL_I2C_ER_IRQHandler+0x12e>
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	0a1b      	lsrs	r3, r3, #8
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d008      	beq.n	800af28 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	f043 0308 	orr.w	r3, r3, #8
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800af26:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d008      	beq.n	800af40 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	431a      	orrs	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f001 f874 	bl	800c028 <I2C_ITError>
  }
}
 800af40:	bf00      	nop
 800af42:	3728      	adds	r7, #40	; 0x28
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70fb      	strb	r3, [r7, #3]
 800afa4:	4613      	mov	r3, r2
 800afa6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b012:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b01a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d150      	bne.n	800b0cc <I2C_MasterTransmit_TXE+0xc8>
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b21      	cmp	r3, #33	; 0x21
 800b02e:	d14d      	bne.n	800b0cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b08      	cmp	r3, #8
 800b034:	d01d      	beq.n	800b072 <I2C_MasterTransmit_TXE+0x6e>
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	2b20      	cmp	r3, #32
 800b03a:	d01a      	beq.n	800b072 <I2C_MasterTransmit_TXE+0x6e>
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b042:	d016      	beq.n	800b072 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b052:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2211      	movs	r2, #17
 800b058:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2220      	movs	r2, #32
 800b066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f7ff ff6c 	bl	800af48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b070:	e060      	b.n	800b134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b080:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b090:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2220      	movs	r2, #32
 800b09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b40      	cmp	r3, #64	; 0x40
 800b0aa:	d107      	bne.n	800b0bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7ff ff87 	bl	800afc8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b0ba:	e03b      	b.n	800b134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f7ff ff3f 	bl	800af48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b0ca:	e033      	b.n	800b134 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	2b21      	cmp	r3, #33	; 0x21
 800b0d0:	d005      	beq.n	800b0de <I2C_MasterTransmit_TXE+0xda>
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	2b40      	cmp	r3, #64	; 0x40
 800b0d6:	d12d      	bne.n	800b134 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
 800b0da:	2b22      	cmp	r3, #34	; 0x22
 800b0dc:	d12a      	bne.n	800b134 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d108      	bne.n	800b0fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b0f8:	e01c      	b.n	800b134 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b40      	cmp	r3, #64	; 0x40
 800b104:	d103      	bne.n	800b10e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f880 	bl	800b20c <I2C_MemoryTransmit_TXE_BTF>
}
 800b10c:	e012      	b.n	800b134 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	781a      	ldrb	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b128:	b29b      	uxth	r3, r3
 800b12a:	3b01      	subs	r3, #1
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b132:	e7ff      	b.n	800b134 <I2C_MasterTransmit_TXE+0x130>
 800b134:	bf00      	nop
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b148:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b21      	cmp	r3, #33	; 0x21
 800b154:	d156      	bne.n	800b204 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d012      	beq.n	800b186 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b164:	781a      	ldrb	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b170:	1c5a      	adds	r2, r3, #1
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	b29a      	uxth	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800b184:	e03e      	b.n	800b204 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b08      	cmp	r3, #8
 800b18a:	d01d      	beq.n	800b1c8 <I2C_MasterTransmit_BTF+0x8c>
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b20      	cmp	r3, #32
 800b190:	d01a      	beq.n	800b1c8 <I2C_MasterTransmit_BTF+0x8c>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b198:	d016      	beq.n	800b1c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685a      	ldr	r2, [r3, #4]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b1a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2211      	movs	r2, #17
 800b1ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff fec1 	bl	800af48 <HAL_I2C_MasterTxCpltCallback>
}
 800b1c6:	e01d      	b.n	800b204 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b1d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff fea2 	bl	800af48 <HAL_I2C_MasterTxCpltCallback>
}
 800b204:	bf00      	nop
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b21a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b220:	2b00      	cmp	r3, #0
 800b222:	d11d      	bne.n	800b260 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d10b      	bne.n	800b244 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b230:	b2da      	uxtb	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23c:	1c9a      	adds	r2, r3, #2
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800b242:	e06e      	b.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b248:	b29b      	uxth	r3, r3
 800b24a:	121b      	asrs	r3, r3, #8
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b25e:	e060      	b.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b264:	2b01      	cmp	r3, #1
 800b266:	d10b      	bne.n	800b280 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b278:	1c5a      	adds	r2, r3, #1
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800b27e:	e050      	b.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b284:	2b02      	cmp	r3, #2
 800b286:	d14c      	bne.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800b288:	7bfb      	ldrb	r3, [r7, #15]
 800b28a:	2b22      	cmp	r3, #34	; 0x22
 800b28c:	d108      	bne.n	800b2a0 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b29c:	601a      	str	r2, [r3, #0]
}
 800b29e:	e040      	b.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d015      	beq.n	800b2d6 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	2b21      	cmp	r3, #33	; 0x21
 800b2ae:	d112      	bne.n	800b2d6 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	781a      	ldrb	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c0:	1c5a      	adds	r2, r3, #1
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b2d4:	e025      	b.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d120      	bne.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2b21      	cmp	r3, #33	; 0x21
 800b2e4:	d11d      	bne.n	800b322 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b2f4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b304:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2220      	movs	r2, #32
 800b310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff fe53 	bl	800afc8 <HAL_I2C_MemTxCpltCallback>
}
 800b322:	bf00      	nop
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b084      	sub	sp, #16
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b22      	cmp	r3, #34	; 0x22
 800b33c:	f040 80a2 	bne.w	800b484 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b344:	b29b      	uxth	r3, r3
 800b346:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d921      	bls.n	800b392 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	691a      	ldr	r2, [r3, #16]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b358:	b2d2      	uxtb	r2, r2
 800b35a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	3b01      	subs	r3, #1
 800b36e:	b29a      	uxth	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b378:	b29b      	uxth	r3, r3
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	f040 8082 	bne.w	800b484 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b38e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800b390:	e078      	b.n	800b484 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b396:	2b02      	cmp	r3, #2
 800b398:	d074      	beq.n	800b484 <I2C_MasterReceive_RXNE+0x15a>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d002      	beq.n	800b3a6 <I2C_MasterReceive_RXNE+0x7c>
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d16e      	bne.n	800b484 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 fb2a 	bl	800ca00 <I2C_WaitOnSTOPRequestThroughIT>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d142      	bne.n	800b438 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3c0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b3d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	691a      	ldr	r2, [r3, #16]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e4:	1c5a      	adds	r2, r3, #1
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b406:	b2db      	uxtb	r3, r3
 800b408:	2b40      	cmp	r3, #64	; 0x40
 800b40a:	d10a      	bne.n	800b422 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7fc fae8 	bl	80079f0 <HAL_I2C_MemRxCpltCallback>
}
 800b420:	e030      	b.n	800b484 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2212      	movs	r2, #18
 800b42e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff fd93 	bl	800af5c <HAL_I2C_MasterRxCpltCallback>
}
 800b436:	e025      	b.n	800b484 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b446:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	691a      	ldr	r2, [r3, #16]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	b2d2      	uxtb	r2, r2
 800b454:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b464:	b29b      	uxth	r3, r3
 800b466:	3b01      	subs	r3, #1
 800b468:	b29a      	uxth	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2220      	movs	r2, #32
 800b472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff fdac 	bl	800afdc <HAL_I2C_ErrorCallback>
}
 800b484:	bf00      	nop
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b498:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	2b04      	cmp	r3, #4
 800b4a2:	d11b      	bne.n	800b4dc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4b2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	691a      	ldr	r2, [r3, #16]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4be:	b2d2      	uxtb	r2, r2
 800b4c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	b29a      	uxth	r2, r3
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b4da:	e0bd      	b.n	800b658 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	2b03      	cmp	r3, #3
 800b4e4:	d129      	bne.n	800b53a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4f4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d00a      	beq.n	800b512 <I2C_MasterReceive_BTF+0x86>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d007      	beq.n	800b512 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b510:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	691a      	ldr	r2, [r3, #16]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51c:	b2d2      	uxtb	r2, r2
 800b51e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	1c5a      	adds	r2, r3, #1
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b52e:	b29b      	uxth	r3, r3
 800b530:	3b01      	subs	r3, #1
 800b532:	b29a      	uxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b538:	e08e      	b.n	800b658 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53e:	b29b      	uxth	r3, r3
 800b540:	2b02      	cmp	r3, #2
 800b542:	d176      	bne.n	800b632 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b01      	cmp	r3, #1
 800b548:	d002      	beq.n	800b550 <I2C_MasterReceive_BTF+0xc4>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b10      	cmp	r3, #16
 800b54e:	d108      	bne.n	800b562 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	e019      	b.n	800b596 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b04      	cmp	r3, #4
 800b566:	d002      	beq.n	800b56e <I2C_MasterReceive_BTF+0xe2>
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d108      	bne.n	800b580 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	e00a      	b.n	800b596 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2b10      	cmp	r3, #16
 800b584:	d007      	beq.n	800b596 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b594:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	691a      	ldr	r2, [r3, #16]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a0:	b2d2      	uxtb	r2, r2
 800b5a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	691a      	ldr	r2, [r3, #16]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c6:	b2d2      	uxtb	r2, r2
 800b5c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	3b01      	subs	r3, #1
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b5f0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b40      	cmp	r3, #64	; 0x40
 800b604:	d10a      	bne.n	800b61c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7fc f9eb 	bl	80079f0 <HAL_I2C_MemRxCpltCallback>
}
 800b61a:	e01d      	b.n	800b658 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2212      	movs	r2, #18
 800b628:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fc96 	bl	800af5c <HAL_I2C_MasterRxCpltCallback>
}
 800b630:	e012      	b.n	800b658 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	691a      	ldr	r2, [r3, #16]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	1c5a      	adds	r2, r3, #1
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b658:	bf00      	nop
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b40      	cmp	r3, #64	; 0x40
 800b672:	d117      	bne.n	800b6a4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b680:	b2db      	uxtb	r3, r3
 800b682:	461a      	mov	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b68c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b68e:	e067      	b.n	800b760 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b694:	b2db      	uxtb	r3, r3
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	611a      	str	r2, [r3, #16]
}
 800b6a2:	e05d      	b.n	800b760 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6ac:	d133      	bne.n	800b716 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b21      	cmp	r3, #33	; 0x21
 800b6b8:	d109      	bne.n	800b6ce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b6ca:	611a      	str	r2, [r3, #16]
 800b6cc:	e008      	b.n	800b6e0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	f043 0301 	orr.w	r3, r3, #1
 800b6d8:	b2da      	uxtb	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d004      	beq.n	800b6f2 <I2C_Master_SB+0x92>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d108      	bne.n	800b704 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d032      	beq.n	800b760 <I2C_Master_SB+0x100>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b700:	2b00      	cmp	r3, #0
 800b702:	d02d      	beq.n	800b760 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b712:	605a      	str	r2, [r3, #4]
}
 800b714:	e024      	b.n	800b760 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10e      	bne.n	800b73c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b722:	b29b      	uxth	r3, r3
 800b724:	11db      	asrs	r3, r3, #7
 800b726:	b2db      	uxtb	r3, r3
 800b728:	f003 0306 	and.w	r3, r3, #6
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	f063 030f 	orn	r3, r3, #15
 800b732:	b2da      	uxtb	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	611a      	str	r2, [r3, #16]
}
 800b73a:	e011      	b.n	800b760 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b740:	2b01      	cmp	r3, #1
 800b742:	d10d      	bne.n	800b760 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b748:	b29b      	uxth	r3, r3
 800b74a:	11db      	asrs	r3, r3, #7
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	f003 0306 	and.w	r3, r3, #6
 800b752:	b2db      	uxtb	r3, r3
 800b754:	f063 030e 	orn	r3, r3, #14
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	611a      	str	r2, [r3, #16]
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b784:	2b00      	cmp	r3, #0
 800b786:	d103      	bne.n	800b790 <I2C_Master_ADD10+0x24>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d011      	beq.n	800b7b4 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b796:	2b00      	cmp	r3, #0
 800b798:	d104      	bne.n	800b7a4 <I2C_Master_ADD10+0x38>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d007      	beq.n	800b7b4 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7b2:	605a      	str	r2, [r3, #4]
    }
  }
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b091      	sub	sp, #68	; 0x44
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7dc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b22      	cmp	r3, #34	; 0x22
 800b7e8:	f040 8169 	bne.w	800babe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10f      	bne.n	800b814 <I2C_Master_ADDR+0x54>
 800b7f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7f8:	2b40      	cmp	r3, #64	; 0x40
 800b7fa:	d10b      	bne.n	800b814 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	633b      	str	r3, [r7, #48]	; 0x30
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	695b      	ldr	r3, [r3, #20]
 800b806:	633b      	str	r3, [r7, #48]	; 0x30
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	633b      	str	r3, [r7, #48]	; 0x30
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	e160      	b.n	800bad6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d11d      	bne.n	800b858 <I2C_Master_ADDR+0x98>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b824:	d118      	bne.n	800b858 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b826:	2300      	movs	r3, #0
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b84a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	651a      	str	r2, [r3, #80]	; 0x50
 800b856:	e13e      	b.n	800bad6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d113      	bne.n	800b88a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b862:	2300      	movs	r3, #0
 800b864:	62bb      	str	r3, [r7, #40]	; 0x28
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	62bb      	str	r3, [r7, #40]	; 0x28
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b886:	601a      	str	r2, [r3, #0]
 800b888:	e115      	b.n	800bab6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b88e:	b29b      	uxth	r3, r3
 800b890:	2b01      	cmp	r3, #1
 800b892:	f040 808a 	bne.w	800b9aa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b898:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b89c:	d137      	bne.n	800b90e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8ac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8bc:	d113      	bne.n	800b8e6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8cc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	695b      	ldr	r3, [r3, #20]
 800b8d8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	e0e7      	b.n	800bab6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	623b      	str	r3, [r7, #32]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	623b      	str	r3, [r7, #32]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	699b      	ldr	r3, [r3, #24]
 800b8f8:	623b      	str	r3, [r7, #32]
 800b8fa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b90a:	601a      	str	r2, [r3, #0]
 800b90c:	e0d3      	b.n	800bab6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	2b08      	cmp	r3, #8
 800b912:	d02e      	beq.n	800b972 <I2C_Master_ADDR+0x1b2>
 800b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b916:	2b20      	cmp	r3, #32
 800b918:	d02b      	beq.n	800b972 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b91c:	2b12      	cmp	r3, #18
 800b91e:	d102      	bne.n	800b926 <I2C_Master_ADDR+0x166>
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	2b01      	cmp	r3, #1
 800b924:	d125      	bne.n	800b972 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	2b04      	cmp	r3, #4
 800b92a:	d00e      	beq.n	800b94a <I2C_Master_ADDR+0x18a>
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d00b      	beq.n	800b94a <I2C_Master_ADDR+0x18a>
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	2b10      	cmp	r3, #16
 800b936:	d008      	beq.n	800b94a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	e007      	b.n	800b95a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b958:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b95a:	2300      	movs	r3, #0
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	61fb      	str	r3, [r7, #28]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	61fb      	str	r3, [r7, #28]
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	e0a1      	b.n	800bab6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b980:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b982:	2300      	movs	r3, #0
 800b984:	61bb      	str	r3, [r7, #24]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	695b      	ldr	r3, [r3, #20]
 800b98c:	61bb      	str	r3, [r7, #24]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	e085      	b.n	800bab6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d14d      	bne.n	800ba50 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b6:	2b04      	cmp	r3, #4
 800b9b8:	d016      	beq.n	800b9e8 <I2C_Master_ADDR+0x228>
 800b9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	d013      	beq.n	800b9e8 <I2C_Master_ADDR+0x228>
 800b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c2:	2b10      	cmp	r3, #16
 800b9c4:	d010      	beq.n	800b9e8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9d4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9e4:	601a      	str	r2, [r3, #0]
 800b9e6:	e007      	b.n	800b9f8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9f6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba06:	d117      	bne.n	800ba38 <I2C_Master_ADDR+0x278>
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba0e:	d00b      	beq.n	800ba28 <I2C_Master_ADDR+0x268>
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d008      	beq.n	800ba28 <I2C_Master_ADDR+0x268>
 800ba16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba18:	2b08      	cmp	r3, #8
 800ba1a:	d005      	beq.n	800ba28 <I2C_Master_ADDR+0x268>
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	2b10      	cmp	r3, #16
 800ba20:	d002      	beq.n	800ba28 <I2C_Master_ADDR+0x268>
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	2b20      	cmp	r3, #32
 800ba26:	d107      	bne.n	800ba38 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba38:	2300      	movs	r3, #0
 800ba3a:	617b      	str	r3, [r7, #20]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	695b      	ldr	r3, [r3, #20]
 800ba42:	617b      	str	r3, [r7, #20]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	617b      	str	r3, [r7, #20]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	e032      	b.n	800bab6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba5e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba6e:	d117      	bne.n	800baa0 <I2C_Master_ADDR+0x2e0>
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ba76:	d00b      	beq.n	800ba90 <I2C_Master_ADDR+0x2d0>
 800ba78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d008      	beq.n	800ba90 <I2C_Master_ADDR+0x2d0>
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d005      	beq.n	800ba90 <I2C_Master_ADDR+0x2d0>
 800ba84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba86:	2b10      	cmp	r3, #16
 800ba88:	d002      	beq.n	800ba90 <I2C_Master_ADDR+0x2d0>
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	2b20      	cmp	r3, #32
 800ba8e:	d107      	bne.n	800baa0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ba9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800baa0:	2300      	movs	r3, #0
 800baa2:	613b      	str	r3, [r7, #16]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	613b      	str	r3, [r7, #16]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	613b      	str	r3, [r7, #16]
 800bab4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800babc:	e00b      	b.n	800bad6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	695b      	ldr	r3, [r3, #20]
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	60fb      	str	r3, [r7, #12]
 800bad2:	68fb      	ldr	r3, [r7, #12]
}
 800bad4:	e7ff      	b.n	800bad6 <I2C_Master_ADDR+0x316>
 800bad6:	bf00      	nop
 800bad8:	3744      	adds	r7, #68	; 0x44
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baf0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d02b      	beq.n	800bb54 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb00:	781a      	ldrb	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d114      	bne.n	800bb54 <I2C_SlaveTransmit_TXE+0x72>
 800bb2a:	7bfb      	ldrb	r3, [r7, #15]
 800bb2c:	2b29      	cmp	r3, #41	; 0x29
 800bb2e:	d111      	bne.n	800bb54 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb3e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2221      	movs	r2, #33	; 0x21
 800bb44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2228      	movs	r2, #40	; 0x28
 800bb4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7ff fa0e 	bl	800af70 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bb54:	bf00      	nop
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d011      	beq.n	800bb92 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	781a      	ldrb	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	3b01      	subs	r3, #1
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800bb92:	bf00      	nop
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b084      	sub	sp, #16
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d02c      	beq.n	800bc12 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	691a      	ldr	r2, [r3, #16]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc2:	b2d2      	uxtb	r2, r2
 800bbc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	1c5a      	adds	r2, r3, #1
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	b29a      	uxth	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d114      	bne.n	800bc12 <I2C_SlaveReceive_RXNE+0x74>
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	2b2a      	cmp	r3, #42	; 0x2a
 800bbec:	d111      	bne.n	800bc12 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	685a      	ldr	r2, [r3, #4]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbfc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2222      	movs	r2, #34	; 0x22
 800bc02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2228      	movs	r2, #40	; 0x28
 800bc08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f7ff f9b9 	bl	800af84 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bc12:	bf00      	nop
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800bc1a:	b480      	push	{r7}
 800bc1c:	b083      	sub	sp, #12
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d012      	beq.n	800bc52 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	691a      	ldr	r2, [r3, #16]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800bc52:	bf00      	nop
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b084      	sub	sp, #16
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bc78:	2b28      	cmp	r3, #40	; 0x28
 800bc7a:	d127      	bne.n	800bccc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc8a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	089b      	lsrs	r3, r3, #2
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	09db      	lsrs	r3, r3, #7
 800bca0:	f003 0301 	and.w	r3, r3, #1
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d103      	bne.n	800bcb0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	81bb      	strh	r3, [r7, #12]
 800bcae:	e002      	b.n	800bcb6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800bcbe:	89ba      	ldrh	r2, [r7, #12]
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff f967 	bl	800af98 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bcca:	e008      	b.n	800bcde <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f06f 0202 	mvn.w	r2, #2
 800bcd4:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800bcde:	bf00      	nop
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcf6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bd06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800bd08:	2300      	movs	r3, #0
 800bd0a:	60bb      	str	r3, [r7, #8]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	60bb      	str	r3, [r7, #8]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0201 	orr.w	r2, r2, #1
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd44:	d172      	bne.n	800be2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	2b22      	cmp	r3, #34	; 0x22
 800bd4a:	d002      	beq.n	800bd52 <I2C_Slave_STOPF+0x6a>
 800bd4c:	7bfb      	ldrb	r3, [r7, #15]
 800bd4e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd50:	d135      	bne.n	800bdbe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d005      	beq.n	800bd76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	f043 0204 	orr.w	r2, r3, #4
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fd fd08 	bl	80097a0 <HAL_DMA_GetState>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d049      	beq.n	800be2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9a:	4a69      	ldr	r2, [pc, #420]	; (800bf40 <I2C_Slave_STOPF+0x258>)
 800bd9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fd fb50 	bl	8009448 <HAL_DMA_Abort_IT>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d03d      	beq.n	800be2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bdb8:	4610      	mov	r0, r2
 800bdba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bdbc:	e035      	b.n	800be2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d005      	beq.n	800bde2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdda:	f043 0204 	orr.w	r2, r3, #4
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	685a      	ldr	r2, [r3, #4]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdf0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fd fcd2 	bl	80097a0 <HAL_DMA_GetState>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d014      	beq.n	800be2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be06:	4a4e      	ldr	r2, [pc, #312]	; (800bf40 <I2C_Slave_STOPF+0x258>)
 800be08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fd fb1a 	bl	8009448 <HAL_DMA_Abort_IT>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d008      	beq.n	800be2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	e000      	b.n	800be2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800be2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be30:	b29b      	uxth	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d03e      	beq.n	800beb4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	f003 0304 	and.w	r3, r3, #4
 800be40:	2b04      	cmp	r3, #4
 800be42:	d112      	bne.n	800be6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	691a      	ldr	r2, [r3, #16]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be56:	1c5a      	adds	r2, r3, #1
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be60:	b29b      	uxth	r3, r3
 800be62:	3b01      	subs	r3, #1
 800be64:	b29a      	uxth	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be74:	2b40      	cmp	r3, #64	; 0x40
 800be76:	d112      	bne.n	800be9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	691a      	ldr	r2, [r3, #16]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be82:	b2d2      	uxtb	r2, r2
 800be84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8a:	1c5a      	adds	r2, r3, #1
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be94:	b29b      	uxth	r3, r3
 800be96:	3b01      	subs	r3, #1
 800be98:	b29a      	uxth	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d005      	beq.n	800beb4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beac:	f043 0204 	orr.w	r2, r3, #4
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f8b3 	bl	800c028 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800bec2:	e039      	b.n	800bf38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b2a      	cmp	r3, #42	; 0x2a
 800bec8:	d109      	bne.n	800bede <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2228      	movs	r2, #40	; 0x28
 800bed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff f853 	bl	800af84 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b28      	cmp	r3, #40	; 0x28
 800bee8:	d111      	bne.n	800bf0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a15      	ldr	r2, [pc, #84]	; (800bf44 <I2C_Slave_STOPF+0x25c>)
 800beee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2220      	movs	r2, #32
 800befa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff f854 	bl	800afb4 <HAL_I2C_ListenCpltCallback>
}
 800bf0c:	e014      	b.n	800bf38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf12:	2b22      	cmp	r3, #34	; 0x22
 800bf14:	d002      	beq.n	800bf1c <I2C_Slave_STOPF+0x234>
 800bf16:	7bfb      	ldrb	r3, [r7, #15]
 800bf18:	2b22      	cmp	r3, #34	; 0x22
 800bf1a:	d10d      	bne.n	800bf38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2220      	movs	r2, #32
 800bf26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff f826 	bl	800af84 <HAL_I2C_SlaveRxCpltCallback>
}
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	0800c681 	.word	0x0800c681
 800bf44:	ffff0000 	.word	0xffff0000

0800bf48 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf56:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d002      	beq.n	800bf6a <I2C_Slave_AF+0x22>
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	2b20      	cmp	r3, #32
 800bf68:	d129      	bne.n	800bfbe <I2C_Slave_AF+0x76>
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	2b28      	cmp	r3, #40	; 0x28
 800bf6e:	d126      	bne.n	800bfbe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a2c      	ldr	r2, [pc, #176]	; (800c024 <I2C_Slave_AF+0xdc>)
 800bf74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bf84:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bf8e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf9e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2220      	movs	r2, #32
 800bfaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7fe fffc 	bl	800afb4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800bfbc:	e02e      	b.n	800c01c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	2b21      	cmp	r3, #33	; 0x21
 800bfc2:	d126      	bne.n	800c012 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a17      	ldr	r2, [pc, #92]	; (800c024 <I2C_Slave_AF+0xdc>)
 800bfc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2221      	movs	r2, #33	; 0x21
 800bfce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2220      	movs	r2, #32
 800bfd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bfee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bff8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c008:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7fe ffb0 	bl	800af70 <HAL_I2C_SlaveTxCpltCallback>
}
 800c010:	e004      	b.n	800c01c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c01a:	615a      	str	r2, [r3, #20]
}
 800c01c:	bf00      	nop
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	ffff0000 	.word	0xffff0000

0800c028 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c036:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c03e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	2b10      	cmp	r3, #16
 800c044:	d002      	beq.n	800c04c <I2C_ITError+0x24>
 800c046:	7bbb      	ldrb	r3, [r7, #14]
 800c048:	2b40      	cmp	r3, #64	; 0x40
 800c04a:	d10a      	bne.n	800c062 <I2C_ITError+0x3a>
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
 800c04e:	2b22      	cmp	r3, #34	; 0x22
 800c050:	d107      	bne.n	800c062 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c060:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c068:	2b28      	cmp	r3, #40	; 0x28
 800c06a:	d107      	bne.n	800c07c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2228      	movs	r2, #40	; 0x28
 800c076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c07a:	e015      	b.n	800c0a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c08a:	d00a      	beq.n	800c0a2 <I2C_ITError+0x7a>
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	2b60      	cmp	r3, #96	; 0x60
 800c090:	d007      	beq.n	800c0a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2220      	movs	r2, #32
 800c096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0b6:	d162      	bne.n	800c17e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	685a      	ldr	r2, [r3, #4]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d020      	beq.n	800c118 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0da:	4a6a      	ldr	r2, [pc, #424]	; (800c284 <I2C_ITError+0x25c>)
 800c0dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fd f9b0 	bl	8009448 <HAL_DMA_Abort_IT>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 8089 	beq.w	800c202 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 0201 	bic.w	r2, r2, #1
 800c0fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2220      	movs	r2, #32
 800c104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c112:	4610      	mov	r0, r2
 800c114:	4798      	blx	r3
 800c116:	e074      	b.n	800c202 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11c:	4a59      	ldr	r2, [pc, #356]	; (800c284 <I2C_ITError+0x25c>)
 800c11e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c124:	4618      	mov	r0, r3
 800c126:	f7fd f98f 	bl	8009448 <HAL_DMA_Abort_IT>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d068      	beq.n	800c202 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c13a:	2b40      	cmp	r3, #64	; 0x40
 800c13c:	d10b      	bne.n	800c156 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	691a      	ldr	r2, [r3, #16]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c148:	b2d2      	uxtb	r2, r2
 800c14a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f022 0201 	bic.w	r2, r2, #1
 800c164:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2220      	movs	r2, #32
 800c16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c178:	4610      	mov	r0, r2
 800c17a:	4798      	blx	r3
 800c17c:	e041      	b.n	800c202 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b60      	cmp	r3, #96	; 0x60
 800c188:	d125      	bne.n	800c1d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2220      	movs	r2, #32
 800c18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1a2:	2b40      	cmp	r3, #64	; 0x40
 800c1a4:	d10b      	bne.n	800c1be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	691a      	ldr	r2, [r3, #16]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b0:	b2d2      	uxtb	r2, r2
 800c1b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	1c5a      	adds	r2, r3, #1
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f022 0201 	bic.w	r2, r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7fe ff0e 	bl	800aff0 <HAL_I2C_AbortCpltCallback>
 800c1d4:	e015      	b.n	800c202 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1e0:	2b40      	cmp	r3, #64	; 0x40
 800c1e2:	d10b      	bne.n	800c1fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	691a      	ldr	r2, [r3, #16]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ee:	b2d2      	uxtb	r2, r2
 800c1f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f6:	1c5a      	adds	r2, r3, #1
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7fe feed 	bl	800afdc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c206:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10e      	bne.n	800c230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d109      	bne.n	800c230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c222:	2b00      	cmp	r3, #0
 800c224:	d104      	bne.n	800c230 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d007      	beq.n	800c240 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	685a      	ldr	r2, [r3, #4]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c23e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c246:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	2b04      	cmp	r3, #4
 800c252:	d113      	bne.n	800c27c <I2C_ITError+0x254>
 800c254:	7bfb      	ldrb	r3, [r7, #15]
 800c256:	2b28      	cmp	r3, #40	; 0x28
 800c258:	d110      	bne.n	800c27c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a0a      	ldr	r2, [pc, #40]	; (800c288 <I2C_ITError+0x260>)
 800c25e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2220      	movs	r2, #32
 800c26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7fe fe9c 	bl	800afb4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c27c:	bf00      	nop
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	0800c681 	.word	0x0800c681
 800c288:	ffff0000 	.word	0xffff0000

0800c28c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af02      	add	r7, sp, #8
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	4608      	mov	r0, r1
 800c296:	4611      	mov	r1, r2
 800c298:	461a      	mov	r2, r3
 800c29a:	4603      	mov	r3, r0
 800c29c:	817b      	strh	r3, [r7, #10]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	813b      	strh	r3, [r7, #8]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	9300      	str	r3, [sp, #0]
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f000 fa7c 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00d      	beq.n	800c2fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ec:	d103      	bne.n	800c2f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e0aa      	b.n	800c450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c2fa:	897b      	ldrh	r3, [r7, #10]
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	461a      	mov	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800c308:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30c:	6a3a      	ldr	r2, [r7, #32]
 800c30e:	4952      	ldr	r1, [pc, #328]	; (800c458 <I2C_RequestMemoryRead+0x1cc>)
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 fab4 	bl	800c87e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c31c:	2301      	movs	r3, #1
 800c31e:	e097      	b.n	800c450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c320:	2300      	movs	r3, #0
 800c322:	617b      	str	r3, [r7, #20]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c338:	6a39      	ldr	r1, [r7, #32]
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f000 fb1e 	bl	800c97c <I2C_WaitOnTXEFlagUntilTimeout>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00d      	beq.n	800c362 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34a:	2b04      	cmp	r3, #4
 800c34c:	d107      	bne.n	800c35e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c35c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e076      	b.n	800c450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c362:	88fb      	ldrh	r3, [r7, #6]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d105      	bne.n	800c374 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c368:	893b      	ldrh	r3, [r7, #8]
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	611a      	str	r2, [r3, #16]
 800c372:	e021      	b.n	800c3b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c374:	893b      	ldrh	r3, [r7, #8]
 800c376:	0a1b      	lsrs	r3, r3, #8
 800c378:	b29b      	uxth	r3, r3
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c384:	6a39      	ldr	r1, [r7, #32]
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 faf8 	bl	800c97c <I2C_WaitOnTXEFlagUntilTimeout>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00d      	beq.n	800c3ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c396:	2b04      	cmp	r3, #4
 800c398:	d107      	bne.n	800c3aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	e050      	b.n	800c450 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c3ae:	893b      	ldrh	r3, [r7, #8]
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3ba:	6a39      	ldr	r1, [r7, #32]
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f000 fadd 	bl	800c97c <I2C_WaitOnTXEFlagUntilTimeout>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00d      	beq.n	800c3e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d107      	bne.n	800c3e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e035      	b.n	800c450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 f9e5 	bl	800c7d0 <I2C_WaitOnFlagUntilTimeout>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00d      	beq.n	800c428 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c41a:	d103      	bne.n	800c424 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e013      	b.n	800c450 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c428:	897b      	ldrh	r3, [r7, #10]
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	f043 0301 	orr.w	r3, r3, #1
 800c430:	b2da      	uxtb	r2, r3
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43a:	6a3a      	ldr	r2, [r7, #32]
 800c43c:	4906      	ldr	r1, [pc, #24]	; (800c458 <I2C_RequestMemoryRead+0x1cc>)
 800c43e:	68f8      	ldr	r0, [r7, #12]
 800c440:	f000 fa1d 	bl	800c87e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e000      	b.n	800c450 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	00010002 	.word	0x00010002

0800c45c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c468:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c470:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c478:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c48e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c49c:	2200      	movs	r2, #0
 800c49e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d003      	beq.n	800c4b0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800c4b0:	7cfb      	ldrb	r3, [r7, #19]
 800c4b2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800c4b6:	2b21      	cmp	r3, #33	; 0x21
 800c4b8:	d007      	beq.n	800c4ca <I2C_DMAXferCplt+0x6e>
 800c4ba:	7cfb      	ldrb	r3, [r7, #19]
 800c4bc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800c4c0:	2b22      	cmp	r3, #34	; 0x22
 800c4c2:	d131      	bne.n	800c528 <I2C_DMAXferCplt+0xcc>
 800c4c4:	7cbb      	ldrb	r3, [r7, #18]
 800c4c6:	2b20      	cmp	r3, #32
 800c4c8:	d12e      	bne.n	800c528 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4d8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c4e0:	7cfb      	ldrb	r3, [r7, #19]
 800c4e2:	2b29      	cmp	r3, #41	; 0x29
 800c4e4:	d10a      	bne.n	800c4fc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2221      	movs	r2, #33	; 0x21
 800c4ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2228      	movs	r2, #40	; 0x28
 800c4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c4f4:	6978      	ldr	r0, [r7, #20]
 800c4f6:	f7fe fd3b 	bl	800af70 <HAL_I2C_SlaveTxCpltCallback>
 800c4fa:	e00c      	b.n	800c516 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c4fc:	7cfb      	ldrb	r3, [r7, #19]
 800c4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c500:	d109      	bne.n	800c516 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2222      	movs	r2, #34	; 0x22
 800c506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2228      	movs	r2, #40	; 0x28
 800c50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c510:	6978      	ldr	r0, [r7, #20]
 800c512:	f7fe fd37 	bl	800af84 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c524:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c526:	e06a      	b.n	800c5fe <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d064      	beq.n	800c5fe <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c538:	b29b      	uxth	r3, r3
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d107      	bne.n	800c54e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681a      	ldr	r2, [r3, #0]
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c54c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	685a      	ldr	r2, [r3, #4]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c55c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c564:	d009      	beq.n	800c57a <I2C_DMAXferCplt+0x11e>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b08      	cmp	r3, #8
 800c56a:	d006      	beq.n	800c57a <I2C_DMAXferCplt+0x11e>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c572:	d002      	beq.n	800c57a <I2C_DMAXferCplt+0x11e>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b20      	cmp	r3, #32
 800c578:	d107      	bne.n	800c58a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c588:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c598:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	685a      	ldr	r2, [r3, #4]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c5a8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d003      	beq.n	800c5c0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800c5b8:	6978      	ldr	r0, [r7, #20]
 800c5ba:	f7fe fd0f 	bl	800afdc <HAL_I2C_ErrorCallback>
}
 800c5be:	e01e      	b.n	800c5fe <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	2b40      	cmp	r3, #64	; 0x40
 800c5d2:	d10a      	bne.n	800c5ea <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800c5e2:	6978      	ldr	r0, [r7, #20]
 800c5e4:	f7fb fa04 	bl	80079f0 <HAL_I2C_MemRxCpltCallback>
}
 800c5e8:	e009      	b.n	800c5fe <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	2212      	movs	r2, #18
 800c5f6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800c5f8:	6978      	ldr	r0, [r7, #20]
 800c5fa:	f7fe fcaf 	bl	800af5c <HAL_I2C_MasterRxCpltCallback>
}
 800c5fe:	bf00      	nop
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b084      	sub	sp, #16
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c612:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d003      	beq.n	800c624 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c620:	2200      	movs	r2, #0
 800c622:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d003      	beq.n	800c634 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c630:	2200      	movs	r2, #0
 800c632:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7fd f8c1 	bl	80097bc <HAL_DMA_GetError>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d01b      	beq.n	800c678 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c64e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2220      	movs	r2, #32
 800c65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2200      	movs	r2, #0
 800c662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c66a:	f043 0210 	orr.w	r2, r3, #16
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7fe fcb2 	bl	800afdc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c690:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c698:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c69a:	4b4b      	ldr	r3, [pc, #300]	; (800c7c8 <I2C_DMAAbort+0x148>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	08db      	lsrs	r3, r3, #3
 800c6a0:	4a4a      	ldr	r2, [pc, #296]	; (800c7cc <I2C_DMAAbort+0x14c>)
 800c6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a6:	0a1a      	lsrs	r2, r3, #8
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	00da      	lsls	r2, r3, #3
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d106      	bne.n	800c6c8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6be:	f043 0220 	orr.w	r2, r3, #32
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800c6c6:	e00a      	b.n	800c6de <I2C_DMAAbort+0x5e>
    }
    count--;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c6d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6dc:	d0ea      	beq.n	800c6b4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c70c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2200      	movs	r2, #0
 800c712:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c720:	2200      	movs	r2, #0
 800c722:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d003      	beq.n	800c734 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c730:	2200      	movs	r2, #0
 800c732:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f022 0201 	bic.w	r2, r2, #1
 800c742:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b60      	cmp	r3, #96	; 0x60
 800c74e:	d10e      	bne.n	800c76e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	2220      	movs	r2, #32
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2200      	movs	r2, #0
 800c764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c766:	6978      	ldr	r0, [r7, #20]
 800c768:	f7fe fc42 	bl	800aff0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c76c:	e027      	b.n	800c7be <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c76e:	7cfb      	ldrb	r3, [r7, #19]
 800c770:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c774:	2b28      	cmp	r3, #40	; 0x28
 800c776:	d117      	bne.n	800c7a8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f042 0201 	orr.w	r2, r2, #1
 800c786:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c796:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2200      	movs	r2, #0
 800c79c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2228      	movs	r2, #40	; 0x28
 800c7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c7a6:	e007      	b.n	800c7b8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c7b8:	6978      	ldr	r0, [r7, #20]
 800c7ba:	f7fe fc0f 	bl	800afdc <HAL_I2C_ErrorCallback>
}
 800c7be:	bf00      	nop
 800c7c0:	3718      	adds	r7, #24
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	20001d74 	.word	0x20001d74
 800c7cc:	14f8b589 	.word	0x14f8b589

0800c7d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	603b      	str	r3, [r7, #0]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c7e0:	e025      	b.n	800c82e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e8:	d021      	beq.n	800c82e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7ea:	f7fb fff3 	bl	80087d4 <HAL_GetTick>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d302      	bcc.n	800c800 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d116      	bne.n	800c82e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2220      	movs	r2, #32
 800c80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81a:	f043 0220 	orr.w	r2, r3, #32
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2200      	movs	r2, #0
 800c826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	e023      	b.n	800c876 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	0c1b      	lsrs	r3, r3, #16
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b01      	cmp	r3, #1
 800c836:	d10d      	bne.n	800c854 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	695b      	ldr	r3, [r3, #20]
 800c83e:	43da      	mvns	r2, r3
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	4013      	ands	r3, r2
 800c844:	b29b      	uxth	r3, r3
 800c846:	2b00      	cmp	r3, #0
 800c848:	bf0c      	ite	eq
 800c84a:	2301      	moveq	r3, #1
 800c84c:	2300      	movne	r3, #0
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	461a      	mov	r2, r3
 800c852:	e00c      	b.n	800c86e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	43da      	mvns	r2, r3
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4013      	ands	r3, r2
 800c860:	b29b      	uxth	r3, r3
 800c862:	2b00      	cmp	r3, #0
 800c864:	bf0c      	ite	eq
 800c866:	2301      	moveq	r3, #1
 800c868:	2300      	movne	r3, #0
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	461a      	mov	r2, r3
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	429a      	cmp	r2, r3
 800c872:	d0b6      	beq.n	800c7e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	60f8      	str	r0, [r7, #12]
 800c886:	60b9      	str	r1, [r7, #8]
 800c888:	607a      	str	r2, [r7, #4]
 800c88a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c88c:	e051      	b.n	800c932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	695b      	ldr	r3, [r3, #20]
 800c894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c89c:	d123      	bne.n	800c8e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c8ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c8b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2220      	movs	r2, #32
 800c8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d2:	f043 0204 	orr.w	r2, r3, #4
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e046      	b.n	800c974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ec:	d021      	beq.n	800c932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c8ee:	f7fb ff71 	bl	80087d4 <HAL_GetTick>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d302      	bcc.n	800c904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d116      	bne.n	800c932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2220      	movs	r2, #32
 800c90e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91e:	f043 0220 	orr.w	r2, r3, #32
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c92e:	2301      	movs	r3, #1
 800c930:	e020      	b.n	800c974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	0c1b      	lsrs	r3, r3, #16
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d10c      	bne.n	800c956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	43da      	mvns	r2, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	4013      	ands	r3, r2
 800c948:	b29b      	uxth	r3, r3
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	bf14      	ite	ne
 800c94e:	2301      	movne	r3, #1
 800c950:	2300      	moveq	r3, #0
 800c952:	b2db      	uxtb	r3, r3
 800c954:	e00b      	b.n	800c96e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	43da      	mvns	r2, r3
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	4013      	ands	r3, r2
 800c962:	b29b      	uxth	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	bf14      	ite	ne
 800c968:	2301      	movne	r3, #1
 800c96a:	2300      	moveq	r3, #0
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d18d      	bne.n	800c88e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c988:	e02d      	b.n	800c9e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f000 f8c0 	bl	800cb10 <I2C_IsAcknowledgeFailed>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c996:	2301      	movs	r3, #1
 800c998:	e02d      	b.n	800c9f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a0:	d021      	beq.n	800c9e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9a2:	f7fb ff17 	bl	80087d4 <HAL_GetTick>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d302      	bcc.n	800c9b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d116      	bne.n	800c9e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2220      	movs	r2, #32
 800c9c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d2:	f043 0220 	orr.w	r2, r3, #32
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e007      	b.n	800c9f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9f0:	2b80      	cmp	r3, #128	; 0x80
 800c9f2:	d1ca      	bne.n	800c98a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ca0c:	4b13      	ldr	r3, [pc, #76]	; (800ca5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	08db      	lsrs	r3, r3, #3
 800ca12:	4a13      	ldr	r2, [pc, #76]	; (800ca60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ca14:	fba2 2303 	umull	r2, r3, r2, r3
 800ca18:	0a1a      	lsrs	r2, r3, #8
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3b01      	subs	r3, #1
 800ca26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d107      	bne.n	800ca3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca32:	f043 0220 	orr.w	r2, r3, #32
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e008      	b.n	800ca50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca4c:	d0e9      	beq.n	800ca22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3714      	adds	r7, #20
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr
 800ca5c:	20001d74 	.word	0x20001d74
 800ca60:	14f8b589 	.word	0x14f8b589

0800ca64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ca70:	e042      	b.n	800caf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	f003 0310 	and.w	r3, r3, #16
 800ca7c:	2b10      	cmp	r3, #16
 800ca7e:	d119      	bne.n	800cab4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f06f 0210 	mvn.w	r2, #16
 800ca88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2220      	movs	r2, #32
 800ca94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e029      	b.n	800cb08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cab4:	f7fb fe8e 	bl	80087d4 <HAL_GetTick>
 800cab8:	4602      	mov	r2, r0
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d302      	bcc.n	800caca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d116      	bne.n	800caf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2220      	movs	r2, #32
 800cad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae4:	f043 0220 	orr.w	r2, r3, #32
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e007      	b.n	800cb08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb02:	2b40      	cmp	r3, #64	; 0x40
 800cb04:	d1b5      	bne.n	800ca72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb26:	d11b      	bne.n	800cb60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800cb30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2220      	movs	r2, #32
 800cb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb4c:	f043 0204 	orr.w	r2, r3, #4
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	e000      	b.n	800cb62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b083      	sub	sp, #12
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800cb7e:	d103      	bne.n	800cb88 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800cb86:	e007      	b.n	800cb98 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800cb90:	d102      	bne.n	800cb98 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2208      	movs	r2, #8
 800cb96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e25b      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d075      	beq.n	800ccae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cbc2:	4ba3      	ldr	r3, [pc, #652]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	f003 030c 	and.w	r3, r3, #12
 800cbca:	2b04      	cmp	r3, #4
 800cbcc:	d00c      	beq.n	800cbe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbce:	4ba0      	ldr	r3, [pc, #640]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800cbd6:	2b08      	cmp	r3, #8
 800cbd8:	d112      	bne.n	800cc00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbda:	4b9d      	ldr	r3, [pc, #628]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbe6:	d10b      	bne.n	800cc00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbe8:	4b99      	ldr	r3, [pc, #612]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d05b      	beq.n	800ccac <HAL_RCC_OscConfig+0x108>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d157      	bne.n	800ccac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e236      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc08:	d106      	bne.n	800cc18 <HAL_RCC_OscConfig+0x74>
 800cc0a:	4b91      	ldr	r3, [pc, #580]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a90      	ldr	r2, [pc, #576]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc14:	6013      	str	r3, [r2, #0]
 800cc16:	e01d      	b.n	800cc54 <HAL_RCC_OscConfig+0xb0>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc20:	d10c      	bne.n	800cc3c <HAL_RCC_OscConfig+0x98>
 800cc22:	4b8b      	ldr	r3, [pc, #556]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a8a      	ldr	r2, [pc, #552]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	4b88      	ldr	r3, [pc, #544]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a87      	ldr	r2, [pc, #540]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	e00b      	b.n	800cc54 <HAL_RCC_OscConfig+0xb0>
 800cc3c:	4b84      	ldr	r3, [pc, #528]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a83      	ldr	r2, [pc, #524]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	4b81      	ldr	r3, [pc, #516]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a80      	ldr	r2, [pc, #512]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d013      	beq.n	800cc84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc5c:	f7fb fdba 	bl	80087d4 <HAL_GetTick>
 800cc60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc62:	e008      	b.n	800cc76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc64:	f7fb fdb6 	bl	80087d4 <HAL_GetTick>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	2b64      	cmp	r3, #100	; 0x64
 800cc70:	d901      	bls.n	800cc76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e1fb      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc76:	4b76      	ldr	r3, [pc, #472]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f0      	beq.n	800cc64 <HAL_RCC_OscConfig+0xc0>
 800cc82:	e014      	b.n	800ccae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc84:	f7fb fda6 	bl	80087d4 <HAL_GetTick>
 800cc88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc8a:	e008      	b.n	800cc9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc8c:	f7fb fda2 	bl	80087d4 <HAL_GetTick>
 800cc90:	4602      	mov	r2, r0
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	1ad3      	subs	r3, r2, r3
 800cc96:	2b64      	cmp	r3, #100	; 0x64
 800cc98:	d901      	bls.n	800cc9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e1e7      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc9e:	4b6c      	ldr	r3, [pc, #432]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1f0      	bne.n	800cc8c <HAL_RCC_OscConfig+0xe8>
 800ccaa:	e000      	b.n	800ccae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f003 0302 	and.w	r3, r3, #2
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d063      	beq.n	800cd82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ccba:	4b65      	ldr	r3, [pc, #404]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	f003 030c 	and.w	r3, r3, #12
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00b      	beq.n	800ccde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccc6:	4b62      	ldr	r3, [pc, #392]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ccce:	2b08      	cmp	r3, #8
 800ccd0:	d11c      	bne.n	800cd0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccd2:	4b5f      	ldr	r3, [pc, #380]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d116      	bne.n	800cd0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccde:	4b5c      	ldr	r3, [pc, #368]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <HAL_RCC_OscConfig+0x152>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d001      	beq.n	800ccf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e1bb      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccf6:	4b56      	ldr	r3, [pc, #344]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	00db      	lsls	r3, r3, #3
 800cd04:	4952      	ldr	r1, [pc, #328]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cd06:	4313      	orrs	r3, r2
 800cd08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cd0a:	e03a      	b.n	800cd82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d020      	beq.n	800cd56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd14:	4b4f      	ldr	r3, [pc, #316]	; (800ce54 <HAL_RCC_OscConfig+0x2b0>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd1a:	f7fb fd5b 	bl	80087d4 <HAL_GetTick>
 800cd1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd20:	e008      	b.n	800cd34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd22:	f7fb fd57 	bl	80087d4 <HAL_GetTick>
 800cd26:	4602      	mov	r2, r0
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d901      	bls.n	800cd34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e19c      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd34:	4b46      	ldr	r3, [pc, #280]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f003 0302 	and.w	r3, r3, #2
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d0f0      	beq.n	800cd22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd40:	4b43      	ldr	r3, [pc, #268]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	4940      	ldr	r1, [pc, #256]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cd50:	4313      	orrs	r3, r2
 800cd52:	600b      	str	r3, [r1, #0]
 800cd54:	e015      	b.n	800cd82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd56:	4b3f      	ldr	r3, [pc, #252]	; (800ce54 <HAL_RCC_OscConfig+0x2b0>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd5c:	f7fb fd3a 	bl	80087d4 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd62:	e008      	b.n	800cd76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd64:	f7fb fd36 	bl	80087d4 <HAL_GetTick>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d901      	bls.n	800cd76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cd72:	2303      	movs	r3, #3
 800cd74:	e17b      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd76:	4b36      	ldr	r3, [pc, #216]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 0302 	and.w	r3, r3, #2
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f0      	bne.n	800cd64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f003 0308 	and.w	r3, r3, #8
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d030      	beq.n	800cdf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d016      	beq.n	800cdc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd96:	4b30      	ldr	r3, [pc, #192]	; (800ce58 <HAL_RCC_OscConfig+0x2b4>)
 800cd98:	2201      	movs	r2, #1
 800cd9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd9c:	f7fb fd1a 	bl	80087d4 <HAL_GetTick>
 800cda0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cda2:	e008      	b.n	800cdb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cda4:	f7fb fd16 	bl	80087d4 <HAL_GetTick>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	1ad3      	subs	r3, r2, r3
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d901      	bls.n	800cdb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	e15b      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cdb6:	4b26      	ldr	r3, [pc, #152]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cdb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdba:	f003 0302 	and.w	r3, r3, #2
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0f0      	beq.n	800cda4 <HAL_RCC_OscConfig+0x200>
 800cdc2:	e015      	b.n	800cdf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdc4:	4b24      	ldr	r3, [pc, #144]	; (800ce58 <HAL_RCC_OscConfig+0x2b4>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cdca:	f7fb fd03 	bl	80087d4 <HAL_GetTick>
 800cdce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdd0:	e008      	b.n	800cde4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cdd2:	f7fb fcff 	bl	80087d4 <HAL_GetTick>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d901      	bls.n	800cde4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cde0:	2303      	movs	r3, #3
 800cde2:	e144      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cde4:	4b1a      	ldr	r3, [pc, #104]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800cde6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d1f0      	bne.n	800cdd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f003 0304 	and.w	r3, r3, #4
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 80a0 	beq.w	800cf3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ce02:	4b13      	ldr	r3, [pc, #76]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ce04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10f      	bne.n	800ce2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce0e:	2300      	movs	r3, #0
 800ce10:	60bb      	str	r3, [r7, #8]
 800ce12:	4b0f      	ldr	r3, [pc, #60]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	4a0e      	ldr	r2, [pc, #56]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ce18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce1c:	6413      	str	r3, [r2, #64]	; 0x40
 800ce1e:	4b0c      	ldr	r3, [pc, #48]	; (800ce50 <HAL_RCC_OscConfig+0x2ac>)
 800ce20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce26:	60bb      	str	r3, [r7, #8]
 800ce28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <HAL_RCC_OscConfig+0x2b8>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d121      	bne.n	800ce7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce3a:	4b08      	ldr	r3, [pc, #32]	; (800ce5c <HAL_RCC_OscConfig+0x2b8>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a07      	ldr	r2, [pc, #28]	; (800ce5c <HAL_RCC_OscConfig+0x2b8>)
 800ce40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce46:	f7fb fcc5 	bl	80087d4 <HAL_GetTick>
 800ce4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce4c:	e011      	b.n	800ce72 <HAL_RCC_OscConfig+0x2ce>
 800ce4e:	bf00      	nop
 800ce50:	40023800 	.word	0x40023800
 800ce54:	42470000 	.word	0x42470000
 800ce58:	42470e80 	.word	0x42470e80
 800ce5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce60:	f7fb fcb8 	bl	80087d4 <HAL_GetTick>
 800ce64:	4602      	mov	r2, r0
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d901      	bls.n	800ce72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e0fd      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce72:	4b81      	ldr	r3, [pc, #516]	; (800d078 <HAL_RCC_OscConfig+0x4d4>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d0f0      	beq.n	800ce60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	689b      	ldr	r3, [r3, #8]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d106      	bne.n	800ce94 <HAL_RCC_OscConfig+0x2f0>
 800ce86:	4b7d      	ldr	r3, [pc, #500]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800ce88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8a:	4a7c      	ldr	r2, [pc, #496]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800ce8c:	f043 0301 	orr.w	r3, r3, #1
 800ce90:	6713      	str	r3, [r2, #112]	; 0x70
 800ce92:	e01c      	b.n	800cece <HAL_RCC_OscConfig+0x32a>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	2b05      	cmp	r3, #5
 800ce9a:	d10c      	bne.n	800ceb6 <HAL_RCC_OscConfig+0x312>
 800ce9c:	4b77      	ldr	r3, [pc, #476]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800ce9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea0:	4a76      	ldr	r2, [pc, #472]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cea2:	f043 0304 	orr.w	r3, r3, #4
 800cea6:	6713      	str	r3, [r2, #112]	; 0x70
 800cea8:	4b74      	ldr	r3, [pc, #464]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800ceaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceac:	4a73      	ldr	r2, [pc, #460]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	6713      	str	r3, [r2, #112]	; 0x70
 800ceb4:	e00b      	b.n	800cece <HAL_RCC_OscConfig+0x32a>
 800ceb6:	4b71      	ldr	r3, [pc, #452]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800ceb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceba:	4a70      	ldr	r2, [pc, #448]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cebc:	f023 0301 	bic.w	r3, r3, #1
 800cec0:	6713      	str	r3, [r2, #112]	; 0x70
 800cec2:	4b6e      	ldr	r3, [pc, #440]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec6:	4a6d      	ldr	r2, [pc, #436]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cec8:	f023 0304 	bic.w	r3, r3, #4
 800cecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d015      	beq.n	800cf02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ced6:	f7fb fc7d 	bl	80087d4 <HAL_GetTick>
 800ceda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cedc:	e00a      	b.n	800cef4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cede:	f7fb fc79 	bl	80087d4 <HAL_GetTick>
 800cee2:	4602      	mov	r2, r0
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	1ad3      	subs	r3, r2, r3
 800cee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d901      	bls.n	800cef4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800cef0:	2303      	movs	r3, #3
 800cef2:	e0bc      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cef4:	4b61      	ldr	r3, [pc, #388]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d0ee      	beq.n	800cede <HAL_RCC_OscConfig+0x33a>
 800cf00:	e014      	b.n	800cf2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf02:	f7fb fc67 	bl	80087d4 <HAL_GetTick>
 800cf06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf08:	e00a      	b.n	800cf20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf0a:	f7fb fc63 	bl	80087d4 <HAL_GetTick>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d901      	bls.n	800cf20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e0a6      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf20:	4b56      	ldr	r3, [pc, #344]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cf22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf24:	f003 0302 	and.w	r3, r3, #2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1ee      	bne.n	800cf0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf2c:	7dfb      	ldrb	r3, [r7, #23]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d105      	bne.n	800cf3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf32:	4b52      	ldr	r3, [pc, #328]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf36:	4a51      	ldr	r2, [pc, #324]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cf38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	699b      	ldr	r3, [r3, #24]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8092 	beq.w	800d06c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf48:	4b4c      	ldr	r3, [pc, #304]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	f003 030c 	and.w	r3, r3, #12
 800cf50:	2b08      	cmp	r3, #8
 800cf52:	d05c      	beq.n	800d00e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	699b      	ldr	r3, [r3, #24]
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d141      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf5c:	4b48      	ldr	r3, [pc, #288]	; (800d080 <HAL_RCC_OscConfig+0x4dc>)
 800cf5e:	2200      	movs	r2, #0
 800cf60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cf62:	f7fb fc37 	bl	80087d4 <HAL_GetTick>
 800cf66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf68:	e008      	b.n	800cf7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf6a:	f7fb fc33 	bl	80087d4 <HAL_GetTick>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	1ad3      	subs	r3, r2, r3
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d901      	bls.n	800cf7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e078      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf7c:	4b3f      	ldr	r3, [pc, #252]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1f0      	bne.n	800cf6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	69da      	ldr	r2, [r3, #28]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a1b      	ldr	r3, [r3, #32]
 800cf90:	431a      	orrs	r2, r3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf96:	019b      	lsls	r3, r3, #6
 800cf98:	431a      	orrs	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf9e:	085b      	lsrs	r3, r3, #1
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	041b      	lsls	r3, r3, #16
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfaa:	061b      	lsls	r3, r3, #24
 800cfac:	4933      	ldr	r1, [pc, #204]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cfb2:	4b33      	ldr	r3, [pc, #204]	; (800d080 <HAL_RCC_OscConfig+0x4dc>)
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfb8:	f7fb fc0c 	bl	80087d4 <HAL_GetTick>
 800cfbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfbe:	e008      	b.n	800cfd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfc0:	f7fb fc08 	bl	80087d4 <HAL_GetTick>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d901      	bls.n	800cfd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800cfce:	2303      	movs	r3, #3
 800cfd0:	e04d      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfd2:	4b2a      	ldr	r3, [pc, #168]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d0f0      	beq.n	800cfc0 <HAL_RCC_OscConfig+0x41c>
 800cfde:	e045      	b.n	800d06c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cfe0:	4b27      	ldr	r3, [pc, #156]	; (800d080 <HAL_RCC_OscConfig+0x4dc>)
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfe6:	f7fb fbf5 	bl	80087d4 <HAL_GetTick>
 800cfea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfec:	e008      	b.n	800d000 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfee:	f7fb fbf1 	bl	80087d4 <HAL_GetTick>
 800cff2:	4602      	mov	r2, r0
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	2b02      	cmp	r3, #2
 800cffa:	d901      	bls.n	800d000 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e036      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d000:	4b1e      	ldr	r3, [pc, #120]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1f0      	bne.n	800cfee <HAL_RCC_OscConfig+0x44a>
 800d00c:	e02e      	b.n	800d06c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	699b      	ldr	r3, [r3, #24]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d101      	bne.n	800d01a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e029      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <HAL_RCC_OscConfig+0x4d8>)
 800d01c:	685b      	ldr	r3, [r3, #4]
 800d01e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	69db      	ldr	r3, [r3, #28]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d11c      	bne.n	800d068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d038:	429a      	cmp	r2, r3
 800d03a:	d115      	bne.n	800d068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d042:	4013      	ands	r3, r2
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d048:	4293      	cmp	r3, r2
 800d04a:	d10d      	bne.n	800d068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800d056:	429a      	cmp	r2, r3
 800d058:	d106      	bne.n	800d068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800d064:	429a      	cmp	r2, r3
 800d066:	d001      	beq.n	800d06c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e000      	b.n	800d06e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	40007000 	.word	0x40007000
 800d07c:	40023800 	.word	0x40023800
 800d080:	42470060 	.word	0x42470060

0800d084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d101      	bne.n	800d098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	e0cc      	b.n	800d232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d098:	4b68      	ldr	r3, [pc, #416]	; (800d23c <HAL_RCC_ClockConfig+0x1b8>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f003 030f 	and.w	r3, r3, #15
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d90c      	bls.n	800d0c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0a6:	4b65      	ldr	r3, [pc, #404]	; (800d23c <HAL_RCC_ClockConfig+0x1b8>)
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	b2d2      	uxtb	r2, r2
 800d0ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d0ae:	4b63      	ldr	r3, [pc, #396]	; (800d23c <HAL_RCC_ClockConfig+0x1b8>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 030f 	and.w	r3, r3, #15
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d001      	beq.n	800d0c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e0b8      	b.n	800d232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 0302 	and.w	r3, r3, #2
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d020      	beq.n	800d10e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 0304 	and.w	r3, r3, #4
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d005      	beq.n	800d0e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d0d8:	4b59      	ldr	r3, [pc, #356]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	4a58      	ldr	r2, [pc, #352]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d0de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800d0e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 0308 	and.w	r3, r3, #8
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d0f0:	4b53      	ldr	r3, [pc, #332]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	4a52      	ldr	r2, [pc, #328]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d0f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800d0fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d0fc:	4b50      	ldr	r3, [pc, #320]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d0fe:	689b      	ldr	r3, [r3, #8]
 800d100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	494d      	ldr	r1, [pc, #308]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d10a:	4313      	orrs	r3, r2
 800d10c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f003 0301 	and.w	r3, r3, #1
 800d116:	2b00      	cmp	r3, #0
 800d118:	d044      	beq.n	800d1a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d107      	bne.n	800d132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d122:	4b47      	ldr	r3, [pc, #284]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d119      	bne.n	800d162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e07f      	b.n	800d232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	2b02      	cmp	r3, #2
 800d138:	d003      	beq.n	800d142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d107      	bne.n	800d152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d142:	4b3f      	ldr	r3, [pc, #252]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d109      	bne.n	800d162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e06f      	b.n	800d232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d152:	4b3b      	ldr	r3, [pc, #236]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 0302 	and.w	r3, r3, #2
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e067      	b.n	800d232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d162:	4b37      	ldr	r3, [pc, #220]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f023 0203 	bic.w	r2, r3, #3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	4934      	ldr	r1, [pc, #208]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d170:	4313      	orrs	r3, r2
 800d172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d174:	f7fb fb2e 	bl	80087d4 <HAL_GetTick>
 800d178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d17a:	e00a      	b.n	800d192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d17c:	f7fb fb2a 	bl	80087d4 <HAL_GetTick>
 800d180:	4602      	mov	r2, r0
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	f241 3288 	movw	r2, #5000	; 0x1388
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d901      	bls.n	800d192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d18e:	2303      	movs	r3, #3
 800d190:	e04f      	b.n	800d232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d192:	4b2b      	ldr	r3, [pc, #172]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	f003 020c 	and.w	r2, r3, #12
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d1eb      	bne.n	800d17c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d1a4:	4b25      	ldr	r3, [pc, #148]	; (800d23c <HAL_RCC_ClockConfig+0x1b8>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 030f 	and.w	r3, r3, #15
 800d1ac:	683a      	ldr	r2, [r7, #0]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d20c      	bcs.n	800d1cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1b2:	4b22      	ldr	r3, [pc, #136]	; (800d23c <HAL_RCC_ClockConfig+0x1b8>)
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	b2d2      	uxtb	r2, r2
 800d1b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1ba:	4b20      	ldr	r3, [pc, #128]	; (800d23c <HAL_RCC_ClockConfig+0x1b8>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f003 030f 	and.w	r3, r3, #15
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d001      	beq.n	800d1cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e032      	b.n	800d232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 0304 	and.w	r3, r3, #4
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d008      	beq.n	800d1ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d1d8:	4b19      	ldr	r3, [pc, #100]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	4916      	ldr	r1, [pc, #88]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f003 0308 	and.w	r3, r3, #8
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d009      	beq.n	800d20a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d1f6:	4b12      	ldr	r3, [pc, #72]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	00db      	lsls	r3, r3, #3
 800d204:	490e      	ldr	r1, [pc, #56]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d206:	4313      	orrs	r3, r2
 800d208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800d20a:	f000 f821 	bl	800d250 <HAL_RCC_GetSysClockFreq>
 800d20e:	4601      	mov	r1, r0
 800d210:	4b0b      	ldr	r3, [pc, #44]	; (800d240 <HAL_RCC_ClockConfig+0x1bc>)
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	091b      	lsrs	r3, r3, #4
 800d216:	f003 030f 	and.w	r3, r3, #15
 800d21a:	4a0a      	ldr	r2, [pc, #40]	; (800d244 <HAL_RCC_ClockConfig+0x1c0>)
 800d21c:	5cd3      	ldrb	r3, [r2, r3]
 800d21e:	fa21 f303 	lsr.w	r3, r1, r3
 800d222:	4a09      	ldr	r2, [pc, #36]	; (800d248 <HAL_RCC_ClockConfig+0x1c4>)
 800d224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800d226:	4b09      	ldr	r3, [pc, #36]	; (800d24c <HAL_RCC_ClockConfig+0x1c8>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fb fa8e 	bl	800874c <HAL_InitTick>

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	40023c00 	.word	0x40023c00
 800d240:	40023800 	.word	0x40023800
 800d244:	08014c78 	.word	0x08014c78
 800d248:	20001d74 	.word	0x20001d74
 800d24c:	20001d90 	.word	0x20001d90

0800d250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d250:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	607b      	str	r3, [r7, #4]
 800d25a:	2300      	movs	r3, #0
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	2300      	movs	r3, #0
 800d260:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800d262:	2300      	movs	r3, #0
 800d264:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d266:	4b50      	ldr	r3, [pc, #320]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d268:	689b      	ldr	r3, [r3, #8]
 800d26a:	f003 030c 	and.w	r3, r3, #12
 800d26e:	2b04      	cmp	r3, #4
 800d270:	d007      	beq.n	800d282 <HAL_RCC_GetSysClockFreq+0x32>
 800d272:	2b08      	cmp	r3, #8
 800d274:	d008      	beq.n	800d288 <HAL_RCC_GetSysClockFreq+0x38>
 800d276:	2b00      	cmp	r3, #0
 800d278:	f040 808d 	bne.w	800d396 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d27c:	4b4b      	ldr	r3, [pc, #300]	; (800d3ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800d27e:	60bb      	str	r3, [r7, #8]
       break;
 800d280:	e08c      	b.n	800d39c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d282:	4b4b      	ldr	r3, [pc, #300]	; (800d3b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d284:	60bb      	str	r3, [r7, #8]
      break;
 800d286:	e089      	b.n	800d39c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d288:	4b47      	ldr	r3, [pc, #284]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d290:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d292:	4b45      	ldr	r3, [pc, #276]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d023      	beq.n	800d2e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d29e:	4b42      	ldr	r3, [pc, #264]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	099b      	lsrs	r3, r3, #6
 800d2a4:	f04f 0400 	mov.w	r4, #0
 800d2a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	ea03 0501 	and.w	r5, r3, r1
 800d2b4:	ea04 0602 	and.w	r6, r4, r2
 800d2b8:	4a3d      	ldr	r2, [pc, #244]	; (800d3b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d2ba:	fb02 f106 	mul.w	r1, r2, r6
 800d2be:	2200      	movs	r2, #0
 800d2c0:	fb02 f205 	mul.w	r2, r2, r5
 800d2c4:	440a      	add	r2, r1
 800d2c6:	493a      	ldr	r1, [pc, #232]	; (800d3b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800d2c8:	fba5 0101 	umull	r0, r1, r5, r1
 800d2cc:	1853      	adds	r3, r2, r1
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f04f 0400 	mov.w	r4, #0
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4623      	mov	r3, r4
 800d2da:	f7f3 fcb5 	bl	8000c48 <__aeabi_uldivmod>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	460c      	mov	r4, r1
 800d2e2:	60fb      	str	r3, [r7, #12]
 800d2e4:	e049      	b.n	800d37a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d2e6:	4b30      	ldr	r3, [pc, #192]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	099b      	lsrs	r3, r3, #6
 800d2ec:	f04f 0400 	mov.w	r4, #0
 800d2f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800d2f4:	f04f 0200 	mov.w	r2, #0
 800d2f8:	ea03 0501 	and.w	r5, r3, r1
 800d2fc:	ea04 0602 	and.w	r6, r4, r2
 800d300:	4629      	mov	r1, r5
 800d302:	4632      	mov	r2, r6
 800d304:	f04f 0300 	mov.w	r3, #0
 800d308:	f04f 0400 	mov.w	r4, #0
 800d30c:	0154      	lsls	r4, r2, #5
 800d30e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800d312:	014b      	lsls	r3, r1, #5
 800d314:	4619      	mov	r1, r3
 800d316:	4622      	mov	r2, r4
 800d318:	1b49      	subs	r1, r1, r5
 800d31a:	eb62 0206 	sbc.w	r2, r2, r6
 800d31e:	f04f 0300 	mov.w	r3, #0
 800d322:	f04f 0400 	mov.w	r4, #0
 800d326:	0194      	lsls	r4, r2, #6
 800d328:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800d32c:	018b      	lsls	r3, r1, #6
 800d32e:	1a5b      	subs	r3, r3, r1
 800d330:	eb64 0402 	sbc.w	r4, r4, r2
 800d334:	f04f 0100 	mov.w	r1, #0
 800d338:	f04f 0200 	mov.w	r2, #0
 800d33c:	00e2      	lsls	r2, r4, #3
 800d33e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800d342:	00d9      	lsls	r1, r3, #3
 800d344:	460b      	mov	r3, r1
 800d346:	4614      	mov	r4, r2
 800d348:	195b      	adds	r3, r3, r5
 800d34a:	eb44 0406 	adc.w	r4, r4, r6
 800d34e:	f04f 0100 	mov.w	r1, #0
 800d352:	f04f 0200 	mov.w	r2, #0
 800d356:	02a2      	lsls	r2, r4, #10
 800d358:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800d35c:	0299      	lsls	r1, r3, #10
 800d35e:	460b      	mov	r3, r1
 800d360:	4614      	mov	r4, r2
 800d362:	4618      	mov	r0, r3
 800d364:	4621      	mov	r1, r4
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f04f 0400 	mov.w	r4, #0
 800d36c:	461a      	mov	r2, r3
 800d36e:	4623      	mov	r3, r4
 800d370:	f7f3 fc6a 	bl	8000c48 <__aeabi_uldivmod>
 800d374:	4603      	mov	r3, r0
 800d376:	460c      	mov	r4, r1
 800d378:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800d37a:	4b0b      	ldr	r3, [pc, #44]	; (800d3a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	0c1b      	lsrs	r3, r3, #16
 800d380:	f003 0303 	and.w	r3, r3, #3
 800d384:	3301      	adds	r3, #1
 800d386:	005b      	lsls	r3, r3, #1
 800d388:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d392:	60bb      	str	r3, [r7, #8]
      break;
 800d394:	e002      	b.n	800d39c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d396:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800d398:	60bb      	str	r3, [r7, #8]
      break;
 800d39a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d39c:	68bb      	ldr	r3, [r7, #8]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	40023800 	.word	0x40023800
 800d3ac:	00f42400 	.word	0x00f42400
 800d3b0:	017d7840 	.word	0x017d7840

0800d3b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d3b8:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c4:	4770      	bx	lr
 800d3c6:	bf00      	nop
 800d3c8:	20001d74 	.word	0x20001d74

0800d3cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800d3d0:	f7ff fff0 	bl	800d3b4 <HAL_RCC_GetHCLKFreq>
 800d3d4:	4601      	mov	r1, r0
 800d3d6:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800d3d8:	689b      	ldr	r3, [r3, #8]
 800d3da:	0a9b      	lsrs	r3, r3, #10
 800d3dc:	f003 0307 	and.w	r3, r3, #7
 800d3e0:	4a03      	ldr	r2, [pc, #12]	; (800d3f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d3e2:	5cd3      	ldrb	r3, [r2, r3]
 800d3e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	40023800 	.word	0x40023800
 800d3f0:	08014c88 	.word	0x08014c88

0800d3f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800d3f8:	f7ff ffdc 	bl	800d3b4 <HAL_RCC_GetHCLKFreq>
 800d3fc:	4601      	mov	r1, r0
 800d3fe:	4b05      	ldr	r3, [pc, #20]	; (800d414 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	0b5b      	lsrs	r3, r3, #13
 800d404:	f003 0307 	and.w	r3, r3, #7
 800d408:	4a03      	ldr	r2, [pc, #12]	; (800d418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d40a:	5cd3      	ldrb	r3, [r2, r3]
 800d40c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800d410:	4618      	mov	r0, r3
 800d412:	bd80      	pop	{r7, pc}
 800d414:	40023800 	.word	0x40023800
 800d418:	08014c88 	.word	0x08014c88

0800d41c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e056      	b.n	800d4dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d106      	bne.n	800d44e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7fa f85f 	bl	800750c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2202      	movs	r2, #2
 800d452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d464:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	685a      	ldr	r2, [r3, #4]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	431a      	orrs	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	431a      	orrs	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	691b      	ldr	r3, [r3, #16]
 800d47a:	431a      	orrs	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	695b      	ldr	r3, [r3, #20]
 800d480:	431a      	orrs	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	699b      	ldr	r3, [r3, #24]
 800d486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d48a:	431a      	orrs	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	69db      	ldr	r3, [r3, #28]
 800d490:	431a      	orrs	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	ea42 0103 	orr.w	r1, r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	699b      	ldr	r3, [r3, #24]
 800d4aa:	0c1b      	lsrs	r3, r3, #16
 800d4ac:	f003 0104 	and.w	r1, r3, #4
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	430a      	orrs	r2, r1
 800d4ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	69da      	ldr	r2, [r3, #28]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d4ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b088      	sub	sp, #32
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	60b9      	str	r1, [r7, #8]
 800d4ee:	603b      	str	r3, [r7, #0]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d101      	bne.n	800d506 <HAL_SPI_Transmit+0x22>
 800d502:	2302      	movs	r3, #2
 800d504:	e11e      	b.n	800d744 <HAL_SPI_Transmit+0x260>
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2201      	movs	r2, #1
 800d50a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d50e:	f7fb f961 	bl	80087d4 <HAL_GetTick>
 800d512:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d514:	88fb      	ldrh	r3, [r7, #6]
 800d516:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b01      	cmp	r3, #1
 800d522:	d002      	beq.n	800d52a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d524:	2302      	movs	r3, #2
 800d526:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d528:	e103      	b.n	800d732 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d002      	beq.n	800d536 <HAL_SPI_Transmit+0x52>
 800d530:	88fb      	ldrh	r3, [r7, #6]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d53a:	e0fa      	b.n	800d732 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2203      	movs	r2, #3
 800d540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	88fa      	ldrh	r2, [r7, #6]
 800d554:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	88fa      	ldrh	r2, [r7, #6]
 800d55a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2200      	movs	r2, #0
 800d560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2200      	movs	r2, #0
 800d572:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2200      	movs	r2, #0
 800d578:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d582:	d107      	bne.n	800d594 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d592:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59e:	2b40      	cmp	r3, #64	; 0x40
 800d5a0:	d007      	beq.n	800d5b2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5ba:	d14b      	bne.n	800d654 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d002      	beq.n	800d5ca <HAL_SPI_Transmit+0xe6>
 800d5c4:	8afb      	ldrh	r3, [r7, #22]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d13e      	bne.n	800d648 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ce:	881a      	ldrh	r2, [r3, #0]
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5da:	1c9a      	adds	r2, r3, #2
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	3b01      	subs	r3, #1
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d5ee:	e02b      	b.n	800d648 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	f003 0302 	and.w	r3, r3, #2
 800d5fa:	2b02      	cmp	r3, #2
 800d5fc:	d112      	bne.n	800d624 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d602:	881a      	ldrh	r2, [r3, #0]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60e:	1c9a      	adds	r2, r3, #2
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d618:	b29b      	uxth	r3, r3
 800d61a:	3b01      	subs	r3, #1
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	86da      	strh	r2, [r3, #54]	; 0x36
 800d622:	e011      	b.n	800d648 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d624:	f7fb f8d6 	bl	80087d4 <HAL_GetTick>
 800d628:	4602      	mov	r2, r0
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	683a      	ldr	r2, [r7, #0]
 800d630:	429a      	cmp	r2, r3
 800d632:	d803      	bhi.n	800d63c <HAL_SPI_Transmit+0x158>
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63a:	d102      	bne.n	800d642 <HAL_SPI_Transmit+0x15e>
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d102      	bne.n	800d648 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d642:	2303      	movs	r3, #3
 800d644:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d646:	e074      	b.n	800d732 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1ce      	bne.n	800d5f0 <HAL_SPI_Transmit+0x10c>
 800d652:	e04c      	b.n	800d6ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <HAL_SPI_Transmit+0x17e>
 800d65c:	8afb      	ldrh	r3, [r7, #22]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d140      	bne.n	800d6e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	330c      	adds	r3, #12
 800d66c:	7812      	ldrb	r2, [r2, #0]
 800d66e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d67e:	b29b      	uxth	r3, r3
 800d680:	3b01      	subs	r3, #1
 800d682:	b29a      	uxth	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d688:	e02c      	b.n	800d6e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	f003 0302 	and.w	r3, r3, #2
 800d694:	2b02      	cmp	r3, #2
 800d696:	d113      	bne.n	800d6c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	330c      	adds	r3, #12
 800d6a2:	7812      	ldrb	r2, [r2, #0]
 800d6a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	86da      	strh	r2, [r3, #54]	; 0x36
 800d6be:	e011      	b.n	800d6e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6c0:	f7fb f888 	bl	80087d4 <HAL_GetTick>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	69bb      	ldr	r3, [r7, #24]
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d803      	bhi.n	800d6d8 <HAL_SPI_Transmit+0x1f4>
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d6:	d102      	bne.n	800d6de <HAL_SPI_Transmit+0x1fa>
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d102      	bne.n	800d6e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d6e2:	e026      	b.n	800d732 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d1cd      	bne.n	800d68a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d6ee:	69ba      	ldr	r2, [r7, #24]
 800d6f0:	6839      	ldr	r1, [r7, #0]
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f000 fc94 	bl	800e020 <SPI_EndRxTxTransaction>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d002      	beq.n	800d704 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2220      	movs	r2, #32
 800d702:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d70c:	2300      	movs	r3, #0
 800d70e:	613b      	str	r3, [r7, #16]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	613b      	str	r3, [r7, #16]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	613b      	str	r3, [r7, #16]
 800d720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d726:	2b00      	cmp	r3, #0
 800d728:	d002      	beq.n	800d730 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	77fb      	strb	r3, [r7, #31]
 800d72e:	e000      	b.n	800d732 <HAL_SPI_Transmit+0x24e>
  }

error:
 800d730:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2201      	movs	r2, #1
 800d736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d742:	7ffb      	ldrb	r3, [r7, #31]
}
 800d744:	4618      	mov	r0, r3
 800d746:	3720      	adds	r7, #32
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08c      	sub	sp, #48	; 0x30
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	607a      	str	r2, [r7, #4]
 800d758:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d75a:	2301      	movs	r3, #1
 800d75c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d75e:	2300      	movs	r3, #0
 800d760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d101      	bne.n	800d772 <HAL_SPI_TransmitReceive+0x26>
 800d76e:	2302      	movs	r3, #2
 800d770:	e18a      	b.n	800da88 <HAL_SPI_TransmitReceive+0x33c>
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2201      	movs	r2, #1
 800d776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d77a:	f7fb f82b 	bl	80087d4 <HAL_GetTick>
 800d77e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d790:	887b      	ldrh	r3, [r7, #2]
 800d792:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d00f      	beq.n	800d7bc <HAL_SPI_TransmitReceive+0x70>
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d7a2:	d107      	bne.n	800d7b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	689b      	ldr	r3, [r3, #8]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d103      	bne.n	800d7b4 <HAL_SPI_TransmitReceive+0x68>
 800d7ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7b0:	2b04      	cmp	r3, #4
 800d7b2:	d003      	beq.n	800d7bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d7ba:	e15b      	b.n	800da74 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d005      	beq.n	800d7ce <HAL_SPI_TransmitReceive+0x82>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d002      	beq.n	800d7ce <HAL_SPI_TransmitReceive+0x82>
 800d7c8:	887b      	ldrh	r3, [r7, #2]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d103      	bne.n	800d7d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d7d4:	e14e      	b.n	800da74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b04      	cmp	r3, #4
 800d7e0:	d003      	beq.n	800d7ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2205      	movs	r2, #5
 800d7e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	887a      	ldrh	r2, [r7, #2]
 800d7fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	887a      	ldrh	r2, [r7, #2]
 800d800:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	887a      	ldrh	r2, [r7, #2]
 800d80c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	887a      	ldrh	r2, [r7, #2]
 800d812:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2200      	movs	r2, #0
 800d81e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d82a:	2b40      	cmp	r3, #64	; 0x40
 800d82c:	d007      	beq.n	800d83e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d83c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d846:	d178      	bne.n	800d93a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d002      	beq.n	800d856 <HAL_SPI_TransmitReceive+0x10a>
 800d850:	8b7b      	ldrh	r3, [r7, #26]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d166      	bne.n	800d924 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d85a:	881a      	ldrh	r2, [r3, #0]
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d866:	1c9a      	adds	r2, r3, #2
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d870:	b29b      	uxth	r3, r3
 800d872:	3b01      	subs	r3, #1
 800d874:	b29a      	uxth	r2, r3
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d87a:	e053      	b.n	800d924 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	2b02      	cmp	r3, #2
 800d888:	d11b      	bne.n	800d8c2 <HAL_SPI_TransmitReceive+0x176>
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d88e:	b29b      	uxth	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d016      	beq.n	800d8c2 <HAL_SPI_TransmitReceive+0x176>
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	2b01      	cmp	r3, #1
 800d898:	d113      	bne.n	800d8c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d89e:	881a      	ldrh	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8aa:	1c9a      	adds	r2, r3, #2
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	f003 0301 	and.w	r3, r3, #1
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d119      	bne.n	800d904 <HAL_SPI_TransmitReceive+0x1b8>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d014      	beq.n	800d904 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68da      	ldr	r2, [r3, #12]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e4:	b292      	uxth	r2, r2
 800d8e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ec:	1c9a      	adds	r2, r3, #2
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d900:	2301      	movs	r3, #1
 800d902:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d904:	f7fa ff66 	bl	80087d4 <HAL_GetTick>
 800d908:	4602      	mov	r2, r0
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d910:	429a      	cmp	r2, r3
 800d912:	d807      	bhi.n	800d924 <HAL_SPI_TransmitReceive+0x1d8>
 800d914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d91a:	d003      	beq.n	800d924 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d91c:	2303      	movs	r3, #3
 800d91e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d922:	e0a7      	b.n	800da74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d928:	b29b      	uxth	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1a6      	bne.n	800d87c <HAL_SPI_TransmitReceive+0x130>
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d932:	b29b      	uxth	r3, r3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1a1      	bne.n	800d87c <HAL_SPI_TransmitReceive+0x130>
 800d938:	e07c      	b.n	800da34 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <HAL_SPI_TransmitReceive+0x1fc>
 800d942:	8b7b      	ldrh	r3, [r7, #26]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d16b      	bne.n	800da20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	330c      	adds	r3, #12
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d964:	b29b      	uxth	r3, r3
 800d966:	3b01      	subs	r3, #1
 800d968:	b29a      	uxth	r2, r3
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d96e:	e057      	b.n	800da20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	f003 0302 	and.w	r3, r3, #2
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d11c      	bne.n	800d9b8 <HAL_SPI_TransmitReceive+0x26c>
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d982:	b29b      	uxth	r3, r3
 800d984:	2b00      	cmp	r3, #0
 800d986:	d017      	beq.n	800d9b8 <HAL_SPI_TransmitReceive+0x26c>
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d114      	bne.n	800d9b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	330c      	adds	r3, #12
 800d998:	7812      	ldrb	r2, [r2, #0]
 800d99a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a0:	1c5a      	adds	r2, r3, #1
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	3b01      	subs	r3, #1
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	f003 0301 	and.w	r3, r3, #1
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d119      	bne.n	800d9fa <HAL_SPI_TransmitReceive+0x2ae>
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d014      	beq.n	800d9fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	68da      	ldr	r2, [r3, #12]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9da:	b2d2      	uxtb	r2, r2
 800d9dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e2:	1c5a      	adds	r2, r3, #1
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d9fa:	f7fa feeb 	bl	80087d4 <HAL_GetTick>
 800d9fe:	4602      	mov	r2, r0
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da06:	429a      	cmp	r2, r3
 800da08:	d803      	bhi.n	800da12 <HAL_SPI_TransmitReceive+0x2c6>
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da10:	d102      	bne.n	800da18 <HAL_SPI_TransmitReceive+0x2cc>
 800da12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da14:	2b00      	cmp	r3, #0
 800da16:	d103      	bne.n	800da20 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800da18:	2303      	movs	r3, #3
 800da1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800da1e:	e029      	b.n	800da74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800da24:	b29b      	uxth	r3, r3
 800da26:	2b00      	cmp	r3, #0
 800da28:	d1a2      	bne.n	800d970 <HAL_SPI_TransmitReceive+0x224>
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800da2e:	b29b      	uxth	r3, r3
 800da30:	2b00      	cmp	r3, #0
 800da32:	d19d      	bne.n	800d970 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f000 faf1 	bl	800e020 <SPI_EndRxTxTransaction>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d006      	beq.n	800da52 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800da44:	2301      	movs	r3, #1
 800da46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2220      	movs	r2, #32
 800da4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800da50:	e010      	b.n	800da74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10b      	bne.n	800da72 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da5a:	2300      	movs	r3, #0
 800da5c:	617b      	str	r3, [r7, #20]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	617b      	str	r3, [r7, #20]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	617b      	str	r3, [r7, #20]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	e000      	b.n	800da74 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800da72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2201      	movs	r2, #1
 800da78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800da84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3730      	adds	r7, #48	; 0x30
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	607a      	str	r2, [r7, #4]
 800da9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d101      	bne.n	800dab0 <HAL_SPI_TransmitReceive_DMA+0x20>
 800daac:	2302      	movs	r3, #2
 800daae:	e0e3      	b.n	800dc78 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dabe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800dac6:	7dbb      	ldrb	r3, [r7, #22]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d00d      	beq.n	800dae8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dad2:	d106      	bne.n	800dae2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	689b      	ldr	r3, [r3, #8]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800dadc:	7dbb      	ldrb	r3, [r7, #22]
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d002      	beq.n	800dae8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800dae2:	2302      	movs	r3, #2
 800dae4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dae6:	e0c2      	b.n	800dc6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d005      	beq.n	800dafa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800daf4:	887b      	ldrh	r3, [r7, #2]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d102      	bne.n	800db00 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800dafa:	2301      	movs	r3, #1
 800dafc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dafe:	e0b6      	b.n	800dc6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db06:	b2db      	uxtb	r3, r3
 800db08:	2b04      	cmp	r3, #4
 800db0a:	d003      	beq.n	800db14 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2205      	movs	r2, #5
 800db10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2200      	movs	r2, #0
 800db18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	887a      	ldrh	r2, [r7, #2]
 800db24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	887a      	ldrh	r2, [r7, #2]
 800db2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	887a      	ldrh	r2, [r7, #2]
 800db36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	887a      	ldrh	r2, [r7, #2]
 800db3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2200      	movs	r2, #0
 800db48:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b04      	cmp	r3, #4
 800db54:	d108      	bne.n	800db68 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db5a:	4a49      	ldr	r2, [pc, #292]	; (800dc80 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800db5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db62:	4a48      	ldr	r2, [pc, #288]	; (800dc84 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800db64:	63da      	str	r2, [r3, #60]	; 0x3c
 800db66:	e007      	b.n	800db78 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db6c:	4a46      	ldr	r2, [pc, #280]	; (800dc88 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800db6e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db74:	4a45      	ldr	r2, [pc, #276]	; (800dc8c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800db76:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db7c:	4a44      	ldr	r2, [pc, #272]	; (800dc90 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800db7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db84:	2200      	movs	r2, #0
 800db86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	330c      	adds	r3, #12
 800db92:	4619      	mov	r1, r3
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db98:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db9e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800dba0:	f7fb fbfa 	bl	8009398 <HAL_DMA_Start_IT>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00c      	beq.n	800dbc4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	f043 0210 	orr.w	r2, r3, #16
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800dbc2:	e054      	b.n	800dc6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f042 0201 	orr.w	r2, r2, #1
 800dbd2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbd8:	2200      	movs	r2, #0
 800dbda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbe8:	2200      	movs	r2, #0
 800dbea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	330c      	adds	r3, #12
 800dc04:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dc0c:	f7fb fbc4 	bl	8009398 <HAL_DMA_Start_IT>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00c      	beq.n	800dc30 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc1a:	f043 0210 	orr.w	r2, r3, #16
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800dc2e:	e01e      	b.n	800dc6e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc3a:	2b40      	cmp	r3, #64	; 0x40
 800dc3c:	d007      	beq.n	800dc4e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc4c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	685a      	ldr	r2, [r3, #4]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f042 0220 	orr.w	r2, r2, #32
 800dc5c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	685a      	ldr	r2, [r3, #4]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	f042 0202 	orr.w	r2, r2, #2
 800dc6c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3718      	adds	r7, #24
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0800de09 	.word	0x0800de09
 800dc84:	0800dcd1 	.word	0x0800dcd1
 800dc88:	0800de25 	.word	0x0800de25
 800dc8c:	0800dd79 	.word	0x0800dd79
 800dc90:	0800de41 	.word	0x0800de41

0800dc94 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dcc4:	bf00      	nop
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcdc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dcde:	f7fa fd79 	bl	80087d4 <HAL_GetTick>
 800dce2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcf2:	d03b      	beq.n	800dd6c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685a      	ldr	r2, [r3, #4]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f022 0220 	bic.w	r2, r2, #32
 800dd02:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10d      	bne.n	800dd28 <SPI_DMAReceiveCplt+0x58>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dd14:	d108      	bne.n	800dd28 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0203 	bic.w	r2, r2, #3
 800dd24:	605a      	str	r2, [r3, #4]
 800dd26:	e007      	b.n	800dd38 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685a      	ldr	r2, [r3, #4]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f022 0201 	bic.w	r2, r2, #1
 800dd36:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800dd38:	68ba      	ldr	r2, [r7, #8]
 800dd3a:	2164      	movs	r1, #100	; 0x64
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f000 f909 	bl	800df54 <SPI_EndRxTransaction>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2220      	movs	r2, #32
 800dd4c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2200      	movs	r2, #0
 800dd52:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff ffa9 	bl	800dcbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dd6a:	e002      	b.n	800dd72 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f7ff ff91 	bl	800dc94 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dd72:	3710      	adds	r7, #16
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd84:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd86:	f7fa fd25 	bl	80087d4 <HAL_GetTick>
 800dd8a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd9a:	d02f      	beq.n	800ddfc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	685a      	ldr	r2, [r3, #4]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f022 0220 	bic.w	r2, r2, #32
 800ddaa:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ddac:	68ba      	ldr	r2, [r7, #8]
 800ddae:	2164      	movs	r1, #100	; 0x64
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 f935 	bl	800e020 <SPI_EndRxTxTransaction>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d005      	beq.n	800ddc8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddc0:	f043 0220 	orr.w	r2, r3, #32
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	685a      	ldr	r2, [r3, #4]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f022 0203 	bic.w	r2, r2, #3
 800ddd6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2201      	movs	r2, #1
 800dde8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d003      	beq.n	800ddfc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f7ff ff61 	bl	800dcbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ddfa:	e002      	b.n	800de02 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f7f8 fc87 	bl	8006710 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f7ff ff46 	bl	800dca8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800de1c:	bf00      	nop
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de30:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f7f8 fc82 	bl	800673c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800de38:	bf00      	nop
 800de3a:	3710      	adds	r7, #16
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f022 0203 	bic.w	r2, r2, #3
 800de5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de62:	f043 0210 	orr.w	r2, r3, #16
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2201      	movs	r2, #1
 800de6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f7ff ff22 	bl	800dcbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800de78:	bf00      	nop
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	603b      	str	r3, [r7, #0]
 800de8c:	4613      	mov	r3, r2
 800de8e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800de90:	e04c      	b.n	800df2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de98:	d048      	beq.n	800df2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800de9a:	f7fa fc9b 	bl	80087d4 <HAL_GetTick>
 800de9e:	4602      	mov	r2, r0
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	683a      	ldr	r2, [r7, #0]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d902      	bls.n	800deb0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d13d      	bne.n	800df2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	685a      	ldr	r2, [r3, #4]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800debe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dec8:	d111      	bne.n	800deee <SPI_WaitFlagStateUntilTimeout+0x6e>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ded2:	d004      	beq.n	800dede <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dedc:	d107      	bne.n	800deee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800deec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800def2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800def6:	d10f      	bne.n	800df18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800df06:	601a      	str	r2, [r3, #0]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800df16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2201      	movs	r2, #1
 800df1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800df28:	2303      	movs	r3, #3
 800df2a:	e00f      	b.n	800df4c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	689a      	ldr	r2, [r3, #8]
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	4013      	ands	r3, r2
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	429a      	cmp	r2, r3
 800df3a:	bf0c      	ite	eq
 800df3c:	2301      	moveq	r3, #1
 800df3e:	2300      	movne	r3, #0
 800df40:	b2db      	uxtb	r3, r3
 800df42:	461a      	mov	r2, r3
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	429a      	cmp	r2, r3
 800df48:	d1a3      	bne.n	800de92 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b086      	sub	sp, #24
 800df58:	af02      	add	r7, sp, #8
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df68:	d111      	bne.n	800df8e <SPI_EndRxTransaction+0x3a>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df72:	d004      	beq.n	800df7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800df7c:	d107      	bne.n	800df8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df96:	d12a      	bne.n	800dfee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dfa0:	d012      	beq.n	800dfc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2180      	movs	r1, #128	; 0x80
 800dfac:	68f8      	ldr	r0, [r7, #12]
 800dfae:	f7ff ff67 	bl	800de80 <SPI_WaitFlagStateUntilTimeout>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d02d      	beq.n	800e014 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfbc:	f043 0220 	orr.w	r2, r3, #32
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	e026      	b.n	800e016 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	2200      	movs	r2, #0
 800dfd0:	2101      	movs	r1, #1
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f7ff ff54 	bl	800de80 <SPI_WaitFlagStateUntilTimeout>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d01a      	beq.n	800e014 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfe2:	f043 0220 	orr.w	r2, r3, #32
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dfea:	2303      	movs	r3, #3
 800dfec:	e013      	b.n	800e016 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	2200      	movs	r2, #0
 800dff6:	2101      	movs	r1, #1
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f7ff ff41 	bl	800de80 <SPI_WaitFlagStateUntilTimeout>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d007      	beq.n	800e014 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e008:	f043 0220 	orr.w	r2, r3, #32
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e010:	2303      	movs	r3, #3
 800e012:	e000      	b.n	800e016 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
	...

0800e020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b088      	sub	sp, #32
 800e024:	af02      	add	r7, sp, #8
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e02c:	4b1b      	ldr	r3, [pc, #108]	; (800e09c <SPI_EndRxTxTransaction+0x7c>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a1b      	ldr	r2, [pc, #108]	; (800e0a0 <SPI_EndRxTxTransaction+0x80>)
 800e032:	fba2 2303 	umull	r2, r3, r2, r3
 800e036:	0d5b      	lsrs	r3, r3, #21
 800e038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e03c:	fb02 f303 	mul.w	r3, r2, r3
 800e040:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	685b      	ldr	r3, [r3, #4]
 800e046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e04a:	d112      	bne.n	800e072 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2200      	movs	r2, #0
 800e054:	2180      	movs	r1, #128	; 0x80
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7ff ff12 	bl	800de80 <SPI_WaitFlagStateUntilTimeout>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d016      	beq.n	800e090 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e066:	f043 0220 	orr.w	r2, r3, #32
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e06e:	2303      	movs	r3, #3
 800e070:	e00f      	b.n	800e092 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00a      	beq.n	800e08e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	3b01      	subs	r3, #1
 800e07c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e088:	2b80      	cmp	r3, #128	; 0x80
 800e08a:	d0f2      	beq.n	800e072 <SPI_EndRxTxTransaction+0x52>
 800e08c:	e000      	b.n	800e090 <SPI_EndRxTxTransaction+0x70>
        break;
 800e08e:	bf00      	nop
  }

  return HAL_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20001d74 	.word	0x20001d74
 800e0a0:	165e9f81 	.word	0x165e9f81

0800e0a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d101      	bne.n	800e0b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	e01d      	b.n	800e0f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d106      	bne.n	800e0d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7f9 fe2a 	bl	8007d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2202      	movs	r2, #2
 800e0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f000 fb8c 	bl	800e800 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3708      	adds	r7, #8
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b082      	sub	sp, #8
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	e01d      	b.n	800e148 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f000 f815 	bl	800e150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2202      	movs	r2, #2
 800e12a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	3304      	adds	r3, #4
 800e136:	4619      	mov	r1, r3
 800e138:	4610      	mov	r0, r2
 800e13a:	f000 fb61 	bl	800e800 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2201      	movs	r2, #1
 800e142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e158:	bf00      	nop
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2201      	movs	r2, #1
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	4618      	mov	r0, r3
 800e178:	f000 fe2c 	bl	800edd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a15      	ldr	r2, [pc, #84]	; (800e1d8 <HAL_TIM_PWM_Start+0x74>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d004      	beq.n	800e190 <HAL_TIM_PWM_Start+0x2c>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a14      	ldr	r2, [pc, #80]	; (800e1dc <HAL_TIM_PWM_Start+0x78>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d101      	bne.n	800e194 <HAL_TIM_PWM_Start+0x30>
 800e190:	2301      	movs	r3, #1
 800e192:	e000      	b.n	800e196 <HAL_TIM_PWM_Start+0x32>
 800e194:	2300      	movs	r3, #0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d007      	beq.n	800e1aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e1a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	f003 0307 	and.w	r3, r3, #7
 800e1b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2b06      	cmp	r3, #6
 800e1ba:	d007      	beq.n	800e1cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f042 0201 	orr.w	r2, r2, #1
 800e1ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	40010000 	.word	0x40010000
 800e1dc:	40010400 	.word	0x40010400

0800e1e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f000 fdee 	bl	800edd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a22      	ldr	r2, [pc, #136]	; (800e288 <HAL_TIM_PWM_Stop+0xa8>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d004      	beq.n	800e20c <HAL_TIM_PWM_Stop+0x2c>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a21      	ldr	r2, [pc, #132]	; (800e28c <HAL_TIM_PWM_Stop+0xac>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d101      	bne.n	800e210 <HAL_TIM_PWM_Stop+0x30>
 800e20c:	2301      	movs	r3, #1
 800e20e:	e000      	b.n	800e212 <HAL_TIM_PWM_Stop+0x32>
 800e210:	2300      	movs	r3, #0
 800e212:	2b00      	cmp	r3, #0
 800e214:	d017      	beq.n	800e246 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	6a1a      	ldr	r2, [r3, #32]
 800e21c:	f241 1311 	movw	r3, #4369	; 0x1111
 800e220:	4013      	ands	r3, r2
 800e222:	2b00      	cmp	r3, #0
 800e224:	d10f      	bne.n	800e246 <HAL_TIM_PWM_Stop+0x66>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6a1a      	ldr	r2, [r3, #32]
 800e22c:	f240 4344 	movw	r3, #1092	; 0x444
 800e230:	4013      	ands	r3, r2
 800e232:	2b00      	cmp	r3, #0
 800e234:	d107      	bne.n	800e246 <HAL_TIM_PWM_Stop+0x66>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	6a1a      	ldr	r2, [r3, #32]
 800e24c:	f241 1311 	movw	r3, #4369	; 0x1111
 800e250:	4013      	ands	r3, r2
 800e252:	2b00      	cmp	r3, #0
 800e254:	d10f      	bne.n	800e276 <HAL_TIM_PWM_Stop+0x96>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6a1a      	ldr	r2, [r3, #32]
 800e25c:	f240 4344 	movw	r3, #1092	; 0x444
 800e260:	4013      	ands	r3, r2
 800e262:	2b00      	cmp	r3, #0
 800e264:	d107      	bne.n	800e276 <HAL_TIM_PWM_Stop+0x96>
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f022 0201 	bic.w	r2, r2, #1
 800e274:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e27e:	2300      	movs	r3, #0
}
 800e280:	4618      	mov	r0, r3
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	40010000 	.word	0x40010000
 800e28c:	40010400 	.word	0x40010400

0800e290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	691b      	ldr	r3, [r3, #16]
 800e29e:	f003 0302 	and.w	r3, r3, #2
 800e2a2:	2b02      	cmp	r3, #2
 800e2a4:	d122      	bne.n	800e2ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68db      	ldr	r3, [r3, #12]
 800e2ac:	f003 0302 	and.w	r3, r3, #2
 800e2b0:	2b02      	cmp	r3, #2
 800e2b2:	d11b      	bne.n	800e2ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f06f 0202 	mvn.w	r2, #2
 800e2bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	699b      	ldr	r3, [r3, #24]
 800e2ca:	f003 0303 	and.w	r3, r3, #3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d003      	beq.n	800e2da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 fa75 	bl	800e7c2 <HAL_TIM_IC_CaptureCallback>
 800e2d8:	e005      	b.n	800e2e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fa67 	bl	800e7ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 fa78 	bl	800e7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	f003 0304 	and.w	r3, r3, #4
 800e2f6:	2b04      	cmp	r3, #4
 800e2f8:	d122      	bne.n	800e340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	f003 0304 	and.w	r3, r3, #4
 800e304:	2b04      	cmp	r3, #4
 800e306:	d11b      	bne.n	800e340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f06f 0204 	mvn.w	r2, #4
 800e310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2202      	movs	r2, #2
 800e316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	699b      	ldr	r3, [r3, #24]
 800e31e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e322:	2b00      	cmp	r3, #0
 800e324:	d003      	beq.n	800e32e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 fa4b 	bl	800e7c2 <HAL_TIM_IC_CaptureCallback>
 800e32c:	e005      	b.n	800e33a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fa3d 	bl	800e7ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 fa4e 	bl	800e7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	f003 0308 	and.w	r3, r3, #8
 800e34a:	2b08      	cmp	r3, #8
 800e34c:	d122      	bne.n	800e394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	f003 0308 	and.w	r3, r3, #8
 800e358:	2b08      	cmp	r3, #8
 800e35a:	d11b      	bne.n	800e394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f06f 0208 	mvn.w	r2, #8
 800e364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2204      	movs	r2, #4
 800e36a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	69db      	ldr	r3, [r3, #28]
 800e372:	f003 0303 	and.w	r3, r3, #3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d003      	beq.n	800e382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 fa21 	bl	800e7c2 <HAL_TIM_IC_CaptureCallback>
 800e380:	e005      	b.n	800e38e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fa13 	bl	800e7ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 fa24 	bl	800e7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	691b      	ldr	r3, [r3, #16]
 800e39a:	f003 0310 	and.w	r3, r3, #16
 800e39e:	2b10      	cmp	r3, #16
 800e3a0:	d122      	bne.n	800e3e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	f003 0310 	and.w	r3, r3, #16
 800e3ac:	2b10      	cmp	r3, #16
 800e3ae:	d11b      	bne.n	800e3e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f06f 0210 	mvn.w	r2, #16
 800e3b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2208      	movs	r2, #8
 800e3be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	69db      	ldr	r3, [r3, #28]
 800e3c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d003      	beq.n	800e3d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 f9f7 	bl	800e7c2 <HAL_TIM_IC_CaptureCallback>
 800e3d4:	e005      	b.n	800e3e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 f9e9 	bl	800e7ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f9fa 	bl	800e7d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d10e      	bne.n	800e414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	f003 0301 	and.w	r3, r3, #1
 800e400:	2b01      	cmp	r3, #1
 800e402:	d107      	bne.n	800e414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f06f 0201 	mvn.w	r2, #1
 800e40c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f9c3 	bl	800e79a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	691b      	ldr	r3, [r3, #16]
 800e41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e41e:	2b80      	cmp	r3, #128	; 0x80
 800e420:	d10e      	bne.n	800e440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e42c:	2b80      	cmp	r3, #128	; 0x80
 800e42e:	d107      	bne.n	800e440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 fdc8 	bl	800efd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	691b      	ldr	r3, [r3, #16]
 800e446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e44a:	2b40      	cmp	r3, #64	; 0x40
 800e44c:	d10e      	bne.n	800e46c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e458:	2b40      	cmp	r3, #64	; 0x40
 800e45a:	d107      	bne.n	800e46c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f9bf 	bl	800e7ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	691b      	ldr	r3, [r3, #16]
 800e472:	f003 0320 	and.w	r3, r3, #32
 800e476:	2b20      	cmp	r3, #32
 800e478:	d10e      	bne.n	800e498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	f003 0320 	and.w	r3, r3, #32
 800e484:	2b20      	cmp	r3, #32
 800e486:	d107      	bne.n	800e498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f06f 0220 	mvn.w	r2, #32
 800e490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 fd92 	bl	800efbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d101      	bne.n	800e4ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e4b6:	2302      	movs	r3, #2
 800e4b8:	e0b4      	b.n	800e624 <HAL_TIM_PWM_ConfigChannel+0x184>
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2201      	movs	r2, #1
 800e4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b0c      	cmp	r3, #12
 800e4ce:	f200 809f 	bhi.w	800e610 <HAL_TIM_PWM_ConfigChannel+0x170>
 800e4d2:	a201      	add	r2, pc, #4	; (adr r2, 800e4d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800e4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d8:	0800e50d 	.word	0x0800e50d
 800e4dc:	0800e611 	.word	0x0800e611
 800e4e0:	0800e611 	.word	0x0800e611
 800e4e4:	0800e611 	.word	0x0800e611
 800e4e8:	0800e54d 	.word	0x0800e54d
 800e4ec:	0800e611 	.word	0x0800e611
 800e4f0:	0800e611 	.word	0x0800e611
 800e4f4:	0800e611 	.word	0x0800e611
 800e4f8:	0800e58f 	.word	0x0800e58f
 800e4fc:	0800e611 	.word	0x0800e611
 800e500:	0800e611 	.word	0x0800e611
 800e504:	0800e611 	.word	0x0800e611
 800e508:	0800e5cf 	.word	0x0800e5cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	68b9      	ldr	r1, [r7, #8]
 800e512:	4618      	mov	r0, r3
 800e514:	f000 fa14 	bl	800e940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	699a      	ldr	r2, [r3, #24]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f042 0208 	orr.w	r2, r2, #8
 800e526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	699a      	ldr	r2, [r3, #24]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f022 0204 	bic.w	r2, r2, #4
 800e536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6999      	ldr	r1, [r3, #24]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	691a      	ldr	r2, [r3, #16]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	430a      	orrs	r2, r1
 800e548:	619a      	str	r2, [r3, #24]
      break;
 800e54a:	e062      	b.n	800e612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	68b9      	ldr	r1, [r7, #8]
 800e552:	4618      	mov	r0, r3
 800e554:	f000 fa64 	bl	800ea20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	699a      	ldr	r2, [r3, #24]
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	699a      	ldr	r2, [r3, #24]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6999      	ldr	r1, [r3, #24]
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	691b      	ldr	r3, [r3, #16]
 800e582:	021a      	lsls	r2, r3, #8
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	430a      	orrs	r2, r1
 800e58a:	619a      	str	r2, [r3, #24]
      break;
 800e58c:	e041      	b.n	800e612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68b9      	ldr	r1, [r7, #8]
 800e594:	4618      	mov	r0, r3
 800e596:	f000 fab9 	bl	800eb0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	69da      	ldr	r2, [r3, #28]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f042 0208 	orr.w	r2, r2, #8
 800e5a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	69da      	ldr	r2, [r3, #28]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f022 0204 	bic.w	r2, r2, #4
 800e5b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	69d9      	ldr	r1, [r3, #28]
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	691a      	ldr	r2, [r3, #16]
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	430a      	orrs	r2, r1
 800e5ca:	61da      	str	r2, [r3, #28]
      break;
 800e5cc:	e021      	b.n	800e612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68b9      	ldr	r1, [r7, #8]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f000 fb0d 	bl	800ebf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	69da      	ldr	r2, [r3, #28]
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	69da      	ldr	r2, [r3, #28]
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	69d9      	ldr	r1, [r3, #28]
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	021a      	lsls	r2, r3, #8
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	430a      	orrs	r2, r1
 800e60c:	61da      	str	r2, [r3, #28]
      break;
 800e60e:	e000      	b.n	800e612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e610:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d101      	bne.n	800e644 <HAL_TIM_ConfigClockSource+0x18>
 800e640:	2302      	movs	r3, #2
 800e642:	e0a6      	b.n	800e792 <HAL_TIM_ConfigClockSource+0x166>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2201      	movs	r2, #1
 800e648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2202      	movs	r2, #2
 800e650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e66a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2b40      	cmp	r3, #64	; 0x40
 800e67a:	d067      	beq.n	800e74c <HAL_TIM_ConfigClockSource+0x120>
 800e67c:	2b40      	cmp	r3, #64	; 0x40
 800e67e:	d80b      	bhi.n	800e698 <HAL_TIM_ConfigClockSource+0x6c>
 800e680:	2b10      	cmp	r3, #16
 800e682:	d073      	beq.n	800e76c <HAL_TIM_ConfigClockSource+0x140>
 800e684:	2b10      	cmp	r3, #16
 800e686:	d802      	bhi.n	800e68e <HAL_TIM_ConfigClockSource+0x62>
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d06f      	beq.n	800e76c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e68c:	e078      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e68e:	2b20      	cmp	r3, #32
 800e690:	d06c      	beq.n	800e76c <HAL_TIM_ConfigClockSource+0x140>
 800e692:	2b30      	cmp	r3, #48	; 0x30
 800e694:	d06a      	beq.n	800e76c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e696:	e073      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e698:	2b70      	cmp	r3, #112	; 0x70
 800e69a:	d00d      	beq.n	800e6b8 <HAL_TIM_ConfigClockSource+0x8c>
 800e69c:	2b70      	cmp	r3, #112	; 0x70
 800e69e:	d804      	bhi.n	800e6aa <HAL_TIM_ConfigClockSource+0x7e>
 800e6a0:	2b50      	cmp	r3, #80	; 0x50
 800e6a2:	d033      	beq.n	800e70c <HAL_TIM_ConfigClockSource+0xe0>
 800e6a4:	2b60      	cmp	r3, #96	; 0x60
 800e6a6:	d041      	beq.n	800e72c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e6a8:	e06a      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e6aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6ae:	d066      	beq.n	800e77e <HAL_TIM_ConfigClockSource+0x152>
 800e6b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6b4:	d017      	beq.n	800e6e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e6b6:	e063      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6818      	ldr	r0, [r3, #0]
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	6899      	ldr	r1, [r3, #8]
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	685a      	ldr	r2, [r3, #4]
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	f000 fb64 	bl	800ed94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e6da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	68fa      	ldr	r2, [r7, #12]
 800e6e2:	609a      	str	r2, [r3, #8]
      break;
 800e6e4:	e04c      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6818      	ldr	r0, [r3, #0]
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	6899      	ldr	r1, [r3, #8]
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	685a      	ldr	r2, [r3, #4]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	68db      	ldr	r3, [r3, #12]
 800e6f6:	f000 fb4d 	bl	800ed94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	689a      	ldr	r2, [r3, #8]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e708:	609a      	str	r2, [r3, #8]
      break;
 800e70a:	e039      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6818      	ldr	r0, [r3, #0]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	6859      	ldr	r1, [r3, #4]
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	461a      	mov	r2, r3
 800e71a:	f000 fac1 	bl	800eca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	2150      	movs	r1, #80	; 0x50
 800e724:	4618      	mov	r0, r3
 800e726:	f000 fb1a 	bl	800ed5e <TIM_ITRx_SetConfig>
      break;
 800e72a:	e029      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6818      	ldr	r0, [r3, #0]
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	6859      	ldr	r1, [r3, #4]
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	461a      	mov	r2, r3
 800e73a:	f000 fae0 	bl	800ecfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2160      	movs	r1, #96	; 0x60
 800e744:	4618      	mov	r0, r3
 800e746:	f000 fb0a 	bl	800ed5e <TIM_ITRx_SetConfig>
      break;
 800e74a:	e019      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6818      	ldr	r0, [r3, #0]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	6859      	ldr	r1, [r3, #4]
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	461a      	mov	r2, r3
 800e75a:	f000 faa1 	bl	800eca0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2140      	movs	r1, #64	; 0x40
 800e764:	4618      	mov	r0, r3
 800e766:	f000 fafa 	bl	800ed5e <TIM_ITRx_SetConfig>
      break;
 800e76a:	e009      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4619      	mov	r1, r3
 800e776:	4610      	mov	r0, r2
 800e778:	f000 faf1 	bl	800ed5e <TIM_ITRx_SetConfig>
      break;
 800e77c:	e000      	b.n	800e780 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e77e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2201      	movs	r2, #1
 800e784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e79a:	b480      	push	{r7}
 800e79c:	b083      	sub	sp, #12
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e7a2:	bf00      	nop
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b083      	sub	sp, #12
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b083      	sub	sp, #12
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e7ca:	bf00      	nop
 800e7cc:	370c      	adds	r7, #12
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e7d6:	b480      	push	{r7}
 800e7d8:	b083      	sub	sp, #12
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e7de:	bf00      	nop
 800e7e0:	370c      	adds	r7, #12
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr

0800e7ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e7ea:	b480      	push	{r7}
 800e7ec:	b083      	sub	sp, #12
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e7f2:	bf00      	nop
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
	...

0800e800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4a40      	ldr	r2, [pc, #256]	; (800e914 <TIM_Base_SetConfig+0x114>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d013      	beq.n	800e840 <TIM_Base_SetConfig+0x40>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e81e:	d00f      	beq.n	800e840 <TIM_Base_SetConfig+0x40>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a3d      	ldr	r2, [pc, #244]	; (800e918 <TIM_Base_SetConfig+0x118>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d00b      	beq.n	800e840 <TIM_Base_SetConfig+0x40>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4a3c      	ldr	r2, [pc, #240]	; (800e91c <TIM_Base_SetConfig+0x11c>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d007      	beq.n	800e840 <TIM_Base_SetConfig+0x40>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4a3b      	ldr	r2, [pc, #236]	; (800e920 <TIM_Base_SetConfig+0x120>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d003      	beq.n	800e840 <TIM_Base_SetConfig+0x40>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4a3a      	ldr	r2, [pc, #232]	; (800e924 <TIM_Base_SetConfig+0x124>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d108      	bne.n	800e852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	4313      	orrs	r3, r2
 800e850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a2f      	ldr	r2, [pc, #188]	; (800e914 <TIM_Base_SetConfig+0x114>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d02b      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e860:	d027      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a2c      	ldr	r2, [pc, #176]	; (800e918 <TIM_Base_SetConfig+0x118>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d023      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4a2b      	ldr	r2, [pc, #172]	; (800e91c <TIM_Base_SetConfig+0x11c>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d01f      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	4a2a      	ldr	r2, [pc, #168]	; (800e920 <TIM_Base_SetConfig+0x120>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d01b      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4a29      	ldr	r2, [pc, #164]	; (800e924 <TIM_Base_SetConfig+0x124>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d017      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4a28      	ldr	r2, [pc, #160]	; (800e928 <TIM_Base_SetConfig+0x128>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d013      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	4a27      	ldr	r2, [pc, #156]	; (800e92c <TIM_Base_SetConfig+0x12c>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d00f      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	4a26      	ldr	r2, [pc, #152]	; (800e930 <TIM_Base_SetConfig+0x130>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d00b      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a25      	ldr	r2, [pc, #148]	; (800e934 <TIM_Base_SetConfig+0x134>)
 800e89e:	4293      	cmp	r3, r2
 800e8a0:	d007      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4a24      	ldr	r2, [pc, #144]	; (800e938 <TIM_Base_SetConfig+0x138>)
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d003      	beq.n	800e8b2 <TIM_Base_SetConfig+0xb2>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a23      	ldr	r2, [pc, #140]	; (800e93c <TIM_Base_SetConfig+0x13c>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d108      	bne.n	800e8c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	68db      	ldr	r3, [r3, #12]
 800e8be:	68fa      	ldr	r2, [r7, #12]
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	695b      	ldr	r3, [r3, #20]
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	689a      	ldr	r2, [r3, #8]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4a0a      	ldr	r2, [pc, #40]	; (800e914 <TIM_Base_SetConfig+0x114>)
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	d003      	beq.n	800e8f8 <TIM_Base_SetConfig+0xf8>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a0c      	ldr	r2, [pc, #48]	; (800e924 <TIM_Base_SetConfig+0x124>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d103      	bne.n	800e900 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	691a      	ldr	r2, [r3, #16]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2201      	movs	r2, #1
 800e904:	615a      	str	r2, [r3, #20]
}
 800e906:	bf00      	nop
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	40010000 	.word	0x40010000
 800e918:	40000400 	.word	0x40000400
 800e91c:	40000800 	.word	0x40000800
 800e920:	40000c00 	.word	0x40000c00
 800e924:	40010400 	.word	0x40010400
 800e928:	40014000 	.word	0x40014000
 800e92c:	40014400 	.word	0x40014400
 800e930:	40014800 	.word	0x40014800
 800e934:	40001800 	.word	0x40001800
 800e938:	40001c00 	.word	0x40001c00
 800e93c:	40002000 	.word	0x40002000

0800e940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e940:	b480      	push	{r7}
 800e942:	b087      	sub	sp, #28
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	f023 0201 	bic.w	r2, r3, #1
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	699b      	ldr	r3, [r3, #24]
 800e966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f023 0303 	bic.w	r3, r3, #3
 800e976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	4313      	orrs	r3, r2
 800e980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f023 0302 	bic.w	r3, r3, #2
 800e988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	4313      	orrs	r3, r2
 800e992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a20      	ldr	r2, [pc, #128]	; (800ea18 <TIM_OC1_SetConfig+0xd8>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d003      	beq.n	800e9a4 <TIM_OC1_SetConfig+0x64>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4a1f      	ldr	r2, [pc, #124]	; (800ea1c <TIM_OC1_SetConfig+0xdc>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d10c      	bne.n	800e9be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	f023 0308 	bic.w	r3, r3, #8
 800e9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	697a      	ldr	r2, [r7, #20]
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	f023 0304 	bic.w	r3, r3, #4
 800e9bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4a15      	ldr	r2, [pc, #84]	; (800ea18 <TIM_OC1_SetConfig+0xd8>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d003      	beq.n	800e9ce <TIM_OC1_SetConfig+0x8e>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4a14      	ldr	r2, [pc, #80]	; (800ea1c <TIM_OC1_SetConfig+0xdc>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d111      	bne.n	800e9f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e9dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	695b      	ldr	r3, [r3, #20]
 800e9e2:	693a      	ldr	r2, [r7, #16]
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	699b      	ldr	r3, [r3, #24]
 800e9ec:	693a      	ldr	r2, [r7, #16]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	697a      	ldr	r2, [r7, #20]
 800ea0a:	621a      	str	r2, [r3, #32]
}
 800ea0c:	bf00      	nop
 800ea0e:	371c      	adds	r7, #28
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	40010000 	.word	0x40010000
 800ea1c:	40010400 	.word	0x40010400

0800ea20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b087      	sub	sp, #28
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	f023 0210 	bic.w	r2, r3, #16
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a1b      	ldr	r3, [r3, #32]
 800ea3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	021b      	lsls	r3, r3, #8
 800ea5e:	68fa      	ldr	r2, [r7, #12]
 800ea60:	4313      	orrs	r3, r2
 800ea62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	f023 0320 	bic.w	r3, r3, #32
 800ea6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	011b      	lsls	r3, r3, #4
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	4313      	orrs	r3, r2
 800ea76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	4a22      	ldr	r2, [pc, #136]	; (800eb04 <TIM_OC2_SetConfig+0xe4>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d003      	beq.n	800ea88 <TIM_OC2_SetConfig+0x68>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	4a21      	ldr	r2, [pc, #132]	; (800eb08 <TIM_OC2_SetConfig+0xe8>)
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d10d      	bne.n	800eaa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	011b      	lsls	r3, r3, #4
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4a17      	ldr	r2, [pc, #92]	; (800eb04 <TIM_OC2_SetConfig+0xe4>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d003      	beq.n	800eab4 <TIM_OC2_SetConfig+0x94>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a16      	ldr	r2, [pc, #88]	; (800eb08 <TIM_OC2_SetConfig+0xe8>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d113      	bne.n	800eadc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eaba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	695b      	ldr	r3, [r3, #20]
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	693a      	ldr	r2, [r7, #16]
 800eacc:	4313      	orrs	r3, r2
 800eace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	693a      	ldr	r2, [r7, #16]
 800ead8:	4313      	orrs	r3, r2
 800eada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	693a      	ldr	r2, [r7, #16]
 800eae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	68fa      	ldr	r2, [r7, #12]
 800eae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	685a      	ldr	r2, [r3, #4]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	697a      	ldr	r2, [r7, #20]
 800eaf4:	621a      	str	r2, [r3, #32]
}
 800eaf6:	bf00      	nop
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	40010000 	.word	0x40010000
 800eb08:	40010400 	.word	0x40010400

0800eb0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b087      	sub	sp, #28
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a1b      	ldr	r3, [r3, #32]
 800eb1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a1b      	ldr	r3, [r3, #32]
 800eb26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	69db      	ldr	r3, [r3, #28]
 800eb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f023 0303 	bic.w	r3, r3, #3
 800eb42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	021b      	lsls	r3, r3, #8
 800eb5c:	697a      	ldr	r2, [r7, #20]
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	4a21      	ldr	r2, [pc, #132]	; (800ebec <TIM_OC3_SetConfig+0xe0>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d003      	beq.n	800eb72 <TIM_OC3_SetConfig+0x66>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	4a20      	ldr	r2, [pc, #128]	; (800ebf0 <TIM_OC3_SetConfig+0xe4>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d10d      	bne.n	800eb8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	021b      	lsls	r3, r3, #8
 800eb80:	697a      	ldr	r2, [r7, #20]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a16      	ldr	r2, [pc, #88]	; (800ebec <TIM_OC3_SetConfig+0xe0>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d003      	beq.n	800eb9e <TIM_OC3_SetConfig+0x92>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a15      	ldr	r2, [pc, #84]	; (800ebf0 <TIM_OC3_SetConfig+0xe4>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d113      	bne.n	800ebc6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	695b      	ldr	r3, [r3, #20]
 800ebb2:	011b      	lsls	r3, r3, #4
 800ebb4:	693a      	ldr	r2, [r7, #16]
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	699b      	ldr	r3, [r3, #24]
 800ebbe:	011b      	lsls	r3, r3, #4
 800ebc0:	693a      	ldr	r2, [r7, #16]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	685a      	ldr	r2, [r3, #4]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	697a      	ldr	r2, [r7, #20]
 800ebde:	621a      	str	r2, [r3, #32]
}
 800ebe0:	bf00      	nop
 800ebe2:	371c      	adds	r7, #28
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	40010400 	.word	0x40010400

0800ebf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6a1b      	ldr	r3, [r3, #32]
 800ec02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	021b      	lsls	r3, r3, #8
 800ec32:	68fa      	ldr	r2, [r7, #12]
 800ec34:	4313      	orrs	r3, r2
 800ec36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	031b      	lsls	r3, r3, #12
 800ec46:	693a      	ldr	r2, [r7, #16]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	4a12      	ldr	r2, [pc, #72]	; (800ec98 <TIM_OC4_SetConfig+0xa4>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d003      	beq.n	800ec5c <TIM_OC4_SetConfig+0x68>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4a11      	ldr	r2, [pc, #68]	; (800ec9c <TIM_OC4_SetConfig+0xa8>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d109      	bne.n	800ec70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	019b      	lsls	r3, r3, #6
 800ec6a:	697a      	ldr	r2, [r7, #20]
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	621a      	str	r2, [r3, #32]
}
 800ec8a:	bf00      	nop
 800ec8c:	371c      	adds	r7, #28
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	40010000 	.word	0x40010000
 800ec9c:	40010400 	.word	0x40010400

0800eca0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b087      	sub	sp, #28
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	60f8      	str	r0, [r7, #12]
 800eca8:	60b9      	str	r1, [r7, #8]
 800ecaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6a1b      	ldr	r3, [r3, #32]
 800ecb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6a1b      	ldr	r3, [r3, #32]
 800ecb6:	f023 0201 	bic.w	r2, r3, #1
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	699b      	ldr	r3, [r3, #24]
 800ecc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	011b      	lsls	r3, r3, #4
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f023 030a 	bic.w	r3, r3, #10
 800ecdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ecde:	697a      	ldr	r2, [r7, #20]
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	4313      	orrs	r3, r2
 800ece4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	621a      	str	r2, [r3, #32]
}
 800ecf2:	bf00      	nop
 800ecf4:	371c      	adds	r7, #28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ecfe:	b480      	push	{r7}
 800ed00:	b087      	sub	sp, #28
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	60f8      	str	r0, [r7, #12]
 800ed06:	60b9      	str	r1, [r7, #8]
 800ed08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6a1b      	ldr	r3, [r3, #32]
 800ed0e:	f023 0210 	bic.w	r2, r3, #16
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6a1b      	ldr	r3, [r3, #32]
 800ed20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ed28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	031b      	lsls	r3, r3, #12
 800ed2e:	697a      	ldr	r2, [r7, #20]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ed3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	011b      	lsls	r3, r3, #4
 800ed40:	693a      	ldr	r2, [r7, #16]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	697a      	ldr	r2, [r7, #20]
 800ed4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	693a      	ldr	r2, [r7, #16]
 800ed50:	621a      	str	r2, [r3, #32]
}
 800ed52:	bf00      	nop
 800ed54:	371c      	adds	r7, #28
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr

0800ed5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ed5e:	b480      	push	{r7}
 800ed60:	b085      	sub	sp, #20
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ed76:	683a      	ldr	r2, [r7, #0]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	f043 0307 	orr.w	r3, r3, #7
 800ed80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	609a      	str	r2, [r3, #8]
}
 800ed88:	bf00      	nop
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b087      	sub	sp, #28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	021a      	lsls	r2, r3, #8
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	431a      	orrs	r2, r3
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	4313      	orrs	r3, r2
 800edbc:	697a      	ldr	r2, [r7, #20]
 800edbe:	4313      	orrs	r3, r2
 800edc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	697a      	ldr	r2, [r7, #20]
 800edc6:	609a      	str	r2, [r3, #8]
}
 800edc8:	bf00      	nop
 800edca:	371c      	adds	r7, #28
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr

0800edd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800edd4:	b480      	push	{r7}
 800edd6:	b087      	sub	sp, #28
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	f003 031f 	and.w	r3, r3, #31
 800ede6:	2201      	movs	r2, #1
 800ede8:	fa02 f303 	lsl.w	r3, r2, r3
 800edec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6a1a      	ldr	r2, [r3, #32]
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	43db      	mvns	r3, r3
 800edf6:	401a      	ands	r2, r3
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6a1a      	ldr	r2, [r3, #32]
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	f003 031f 	and.w	r3, r3, #31
 800ee06:	6879      	ldr	r1, [r7, #4]
 800ee08:	fa01 f303 	lsl.w	r3, r1, r3
 800ee0c:	431a      	orrs	r2, r3
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	621a      	str	r2, [r3, #32]
}
 800ee12:	bf00      	nop
 800ee14:	371c      	adds	r7, #28
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
	...

0800ee20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d101      	bne.n	800ee38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ee34:	2302      	movs	r3, #2
 800ee36:	e05a      	b.n	800eeee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2202      	movs	r2, #2
 800ee44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	68fa      	ldr	r2, [r7, #12]
 800ee66:	4313      	orrs	r3, r2
 800ee68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	68fa      	ldr	r2, [r7, #12]
 800ee70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4a21      	ldr	r2, [pc, #132]	; (800eefc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d022      	beq.n	800eec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee84:	d01d      	beq.n	800eec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a1d      	ldr	r2, [pc, #116]	; (800ef00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d018      	beq.n	800eec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a1b      	ldr	r2, [pc, #108]	; (800ef04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d013      	beq.n	800eec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a1a      	ldr	r2, [pc, #104]	; (800ef08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d00e      	beq.n	800eec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a18      	ldr	r2, [pc, #96]	; (800ef0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d009      	beq.n	800eec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a17      	ldr	r2, [pc, #92]	; (800ef10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d004      	beq.n	800eec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a15      	ldr	r2, [pc, #84]	; (800ef14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d10c      	bne.n	800eedc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	68ba      	ldr	r2, [r7, #8]
 800eed0:	4313      	orrs	r3, r2
 800eed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	68ba      	ldr	r2, [r7, #8]
 800eeda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2200      	movs	r2, #0
 800eee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3714      	adds	r7, #20
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	40010000 	.word	0x40010000
 800ef00:	40000400 	.word	0x40000400
 800ef04:	40000800 	.word	0x40000800
 800ef08:	40000c00 	.word	0x40000c00
 800ef0c:	40010400 	.word	0x40010400
 800ef10:	40014000 	.word	0x40014000
 800ef14:	40001800 	.word	0x40001800

0800ef18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b085      	sub	sp, #20
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ef22:	2300      	movs	r3, #0
 800ef24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d101      	bne.n	800ef34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ef30:	2302      	movs	r3, #2
 800ef32:	e03d      	b.n	800efb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	4313      	orrs	r3, r2
 800ef48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	685b      	ldr	r3, [r3, #4]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4313      	orrs	r3, r2
 800ef72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	69db      	ldr	r3, [r3, #28]
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3714      	adds	r7, #20
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800efc4:	bf00      	nop
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e03f      	b.n	800f076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7f8 ffa2 	bl	8007f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2224      	movs	r2, #36	; 0x24
 800f014:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	68da      	ldr	r2, [r3, #12]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fdb5 	bl	800fb98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	691a      	ldr	r2, [r3, #16]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f03c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	695a      	ldr	r2, [r3, #20]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f04c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68da      	ldr	r2, [r3, #12]
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f05c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2200      	movs	r2, #0
 800f062:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2220      	movs	r2, #32
 800f068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2220      	movs	r2, #32
 800f070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3708      	adds	r7, #8
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b088      	sub	sp, #32
 800f082:	af02      	add	r7, sp, #8
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	603b      	str	r3, [r7, #0]
 800f08a:	4613      	mov	r3, r2
 800f08c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800f08e:	2300      	movs	r3, #0
 800f090:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b20      	cmp	r3, #32
 800f09c:	f040 8083 	bne.w	800f1a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <HAL_UART_Transmit+0x2e>
 800f0a6:	88fb      	ldrh	r3, [r7, #6]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e07b      	b.n	800f1a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d101      	bne.n	800f0be <HAL_UART_Transmit+0x40>
 800f0ba:	2302      	movs	r3, #2
 800f0bc:	e074      	b.n	800f1a8 <HAL_UART_Transmit+0x12a>
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2221      	movs	r2, #33	; 0x21
 800f0d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800f0d4:	f7f9 fb7e 	bl	80087d4 <HAL_GetTick>
 800f0d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	88fa      	ldrh	r2, [r7, #6]
 800f0de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	88fa      	ldrh	r2, [r7, #6]
 800f0e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800f0ee:	e042      	b.n	800f176 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	689b      	ldr	r3, [r3, #8]
 800f102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f106:	d122      	bne.n	800f14e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	2200      	movs	r2, #0
 800f110:	2180      	movs	r1, #128	; 0x80
 800f112:	68f8      	ldr	r0, [r7, #12]
 800f114:	f000 fbbf 	bl	800f896 <UART_WaitOnFlagUntilTimeout>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d001      	beq.n	800f122 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800f11e:	2303      	movs	r3, #3
 800f120:	e042      	b.n	800f1a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	461a      	mov	r2, r3
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f134:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	691b      	ldr	r3, [r3, #16]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d103      	bne.n	800f146 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	3302      	adds	r3, #2
 800f142:	60bb      	str	r3, [r7, #8]
 800f144:	e017      	b.n	800f176 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	3301      	adds	r3, #1
 800f14a:	60bb      	str	r3, [r7, #8]
 800f14c:	e013      	b.n	800f176 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2200      	movs	r2, #0
 800f156:	2180      	movs	r1, #128	; 0x80
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f000 fb9c 	bl	800f896 <UART_WaitOnFlagUntilTimeout>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800f164:	2303      	movs	r3, #3
 800f166:	e01f      	b.n	800f1a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	1c5a      	adds	r2, r3, #1
 800f16c:	60ba      	str	r2, [r7, #8]
 800f16e:	781a      	ldrb	r2, [r3, #0]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d1b7      	bne.n	800f0f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	9300      	str	r3, [sp, #0]
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	2200      	movs	r2, #0
 800f188:	2140      	movs	r1, #64	; 0x40
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f000 fb83 	bl	800f896 <UART_WaitOnFlagUntilTimeout>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d001      	beq.n	800f19a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800f196:	2303      	movs	r3, #3
 800f198:	e006      	b.n	800f1a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2220      	movs	r2, #32
 800f19e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e000      	b.n	800f1a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800f1a6:	2302      	movs	r3, #2
  }
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3718      	adds	r7, #24
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b088      	sub	sp, #32
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	603b      	str	r3, [r7, #0]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	2b20      	cmp	r3, #32
 800f1ce:	f040 8090 	bne.w	800f2f2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <HAL_UART_Receive+0x2e>
 800f1d8:	88fb      	ldrh	r3, [r7, #6]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d101      	bne.n	800f1e2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e088      	b.n	800f2f4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d101      	bne.n	800f1f0 <HAL_UART_Receive+0x40>
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	e081      	b.n	800f2f4 <HAL_UART_Receive+0x144>
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2222      	movs	r2, #34	; 0x22
 800f202:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800f206:	f7f9 fae5 	bl	80087d4 <HAL_GetTick>
 800f20a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	88fa      	ldrh	r2, [r7, #6]
 800f210:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	88fa      	ldrh	r2, [r7, #6]
 800f216:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f220:	e05c      	b.n	800f2dc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f226:	b29b      	uxth	r3, r3
 800f228:	3b01      	subs	r3, #1
 800f22a:	b29a      	uxth	r2, r3
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f238:	d12b      	bne.n	800f292 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	9300      	str	r3, [sp, #0]
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	2200      	movs	r2, #0
 800f242:	2120      	movs	r1, #32
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 fb26 	bl	800f896 <UART_WaitOnFlagUntilTimeout>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800f250:	2303      	movs	r3, #3
 800f252:	e04f      	b.n	800f2f4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	691b      	ldr	r3, [r3, #16]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d10c      	bne.n	800f27a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	b29b      	uxth	r3, r3
 800f268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	693b      	ldr	r3, [r7, #16]
 800f270:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	3302      	adds	r3, #2
 800f276:	60bb      	str	r3, [r7, #8]
 800f278:	e030      	b.n	800f2dc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	b29b      	uxth	r3, r3
 800f282:	b2db      	uxtb	r3, r3
 800f284:	b29a      	uxth	r2, r3
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	3301      	adds	r3, #1
 800f28e:	60bb      	str	r3, [r7, #8]
 800f290:	e024      	b.n	800f2dc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	9300      	str	r3, [sp, #0]
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	2200      	movs	r2, #0
 800f29a:	2120      	movs	r1, #32
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f000 fafa 	bl	800f896 <UART_WaitOnFlagUntilTimeout>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	e023      	b.n	800f2f4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d108      	bne.n	800f2c6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	6859      	ldr	r1, [r3, #4]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	1c5a      	adds	r2, r3, #1
 800f2be:	60ba      	str	r2, [r7, #8]
 800f2c0:	b2ca      	uxtb	r2, r1
 800f2c2:	701a      	strb	r2, [r3, #0]
 800f2c4:	e00a      	b.n	800f2dc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	b2da      	uxtb	r2, r3
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	1c59      	adds	r1, r3, #1
 800f2d2:	60b9      	str	r1, [r7, #8]
 800f2d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f2d8:	b2d2      	uxtb	r2, r2
 800f2da:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d19d      	bne.n	800f222 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2220      	movs	r2, #32
 800f2ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e000      	b.n	800f2f4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800f2f2:	2302      	movs	r3, #2
  }
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3718      	adds	r7, #24
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	60f8      	str	r0, [r7, #12]
 800f304:	60b9      	str	r1, [r7, #8]
 800f306:	4613      	mov	r3, r2
 800f308:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f310:	b2db      	uxtb	r3, r3
 800f312:	2b20      	cmp	r3, #32
 800f314:	d153      	bne.n	800f3be <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <HAL_UART_Transmit_DMA+0x26>
 800f31c:	88fb      	ldrh	r3, [r7, #6]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d101      	bne.n	800f326 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	e04c      	b.n	800f3c0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d101      	bne.n	800f334 <HAL_UART_Transmit_DMA+0x38>
 800f330:	2302      	movs	r3, #2
 800f332:	e045      	b.n	800f3c0 <HAL_UART_Transmit_DMA+0xc4>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	2201      	movs	r2, #1
 800f338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	88fa      	ldrh	r2, [r7, #6]
 800f346:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	88fa      	ldrh	r2, [r7, #6]
 800f34c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2221      	movs	r2, #33	; 0x21
 800f358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f360:	4a19      	ldr	r2, [pc, #100]	; (800f3c8 <HAL_UART_Transmit_DMA+0xcc>)
 800f362:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f368:	4a18      	ldr	r2, [pc, #96]	; (800f3cc <HAL_UART_Transmit_DMA+0xd0>)
 800f36a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f370:	4a17      	ldr	r2, [pc, #92]	; (800f3d0 <HAL_UART_Transmit_DMA+0xd4>)
 800f372:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f378:	2200      	movs	r2, #0
 800f37a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800f37c:	f107 0308 	add.w	r3, r7, #8
 800f380:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	6819      	ldr	r1, [r3, #0]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	3304      	adds	r3, #4
 800f390:	461a      	mov	r2, r3
 800f392:	88fb      	ldrh	r3, [r7, #6]
 800f394:	f7fa f800 	bl	8009398 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f3a0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	695a      	ldr	r2, [r3, #20]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f3b8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	e000      	b.n	800f3c0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800f3be:	2302      	movs	r3, #2
  }
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3718      	adds	r7, #24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	0800f711 	.word	0x0800f711
 800f3cc:	0800f763 	.word	0x0800f763
 800f3d0:	0800f803 	.word	0x0800f803

0800f3d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b086      	sub	sp, #24
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	4613      	mov	r3, r2
 800f3e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b20      	cmp	r3, #32
 800f3ec:	d166      	bne.n	800f4bc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d002      	beq.n	800f3fa <HAL_UART_Receive_DMA+0x26>
 800f3f4:	88fb      	ldrh	r3, [r7, #6]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d101      	bne.n	800f3fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e05f      	b.n	800f4be <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f404:	2b01      	cmp	r3, #1
 800f406:	d101      	bne.n	800f40c <HAL_UART_Receive_DMA+0x38>
 800f408:	2302      	movs	r3, #2
 800f40a:	e058      	b.n	800f4be <HAL_UART_Receive_DMA+0xea>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2201      	movs	r2, #1
 800f410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800f414:	68ba      	ldr	r2, [r7, #8]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	88fa      	ldrh	r2, [r7, #6]
 800f41e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2200      	movs	r2, #0
 800f424:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2222      	movs	r2, #34	; 0x22
 800f42a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f432:	4a25      	ldr	r2, [pc, #148]	; (800f4c8 <HAL_UART_Receive_DMA+0xf4>)
 800f434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f43a:	4a24      	ldr	r2, [pc, #144]	; (800f4cc <HAL_UART_Receive_DMA+0xf8>)
 800f43c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f442:	4a23      	ldr	r2, [pc, #140]	; (800f4d0 <HAL_UART_Receive_DMA+0xfc>)
 800f444:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f44a:	2200      	movs	r2, #0
 800f44c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800f44e:	f107 0308 	add.w	r3, r7, #8
 800f452:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	3304      	adds	r3, #4
 800f45e:	4619      	mov	r1, r3
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	88fb      	ldrh	r3, [r7, #6]
 800f466:	f7f9 ff97 	bl	8009398 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800f46a:	2300      	movs	r3, #0
 800f46c:	613b      	str	r3, [r7, #16]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	613b      	str	r3, [r7, #16]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	613b      	str	r3, [r7, #16]
 800f47e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2200      	movs	r2, #0
 800f484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	68da      	ldr	r2, [r3, #12]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f496:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	695a      	ldr	r2, [r3, #20]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f042 0201 	orr.w	r2, r2, #1
 800f4a6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	695a      	ldr	r2, [r3, #20]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f4b6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	e000      	b.n	800f4be <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800f4bc:	2302      	movs	r3, #2
  }
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3718      	adds	r7, #24
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	0800f77f 	.word	0x0800f77f
 800f4cc:	0800f7e7 	.word	0x0800f7e7
 800f4d0:	0800f803 	.word	0x0800f803

0800f4d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b088      	sub	sp, #32
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	695b      	ldr	r3, [r3, #20]
 800f4f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	f003 030f 	and.w	r3, r3, #15
 800f502:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d10d      	bne.n	800f526 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	f003 0320 	and.w	r3, r3, #32
 800f510:	2b00      	cmp	r3, #0
 800f512:	d008      	beq.n	800f526 <HAL_UART_IRQHandler+0x52>
 800f514:	69bb      	ldr	r3, [r7, #24]
 800f516:	f003 0320 	and.w	r3, r3, #32
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d003      	beq.n	800f526 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 fab9 	bl	800fa96 <UART_Receive_IT>
      return;
 800f524:	e0d1      	b.n	800f6ca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	f000 80b0 	beq.w	800f68e <HAL_UART_IRQHandler+0x1ba>
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	f003 0301 	and.w	r3, r3, #1
 800f534:	2b00      	cmp	r3, #0
 800f536:	d105      	bne.n	800f544 <HAL_UART_IRQHandler+0x70>
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f000 80a5 	beq.w	800f68e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d00a      	beq.n	800f564 <HAL_UART_IRQHandler+0x90>
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f554:	2b00      	cmp	r3, #0
 800f556:	d005      	beq.n	800f564 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f55c:	f043 0201 	orr.w	r2, r3, #1
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	f003 0304 	and.w	r3, r3, #4
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00a      	beq.n	800f584 <HAL_UART_IRQHandler+0xb0>
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	f003 0301 	and.w	r3, r3, #1
 800f574:	2b00      	cmp	r3, #0
 800f576:	d005      	beq.n	800f584 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f57c:	f043 0202 	orr.w	r2, r3, #2
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f584:	69fb      	ldr	r3, [r7, #28]
 800f586:	f003 0302 	and.w	r3, r3, #2
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00a      	beq.n	800f5a4 <HAL_UART_IRQHandler+0xd0>
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f003 0301 	and.w	r3, r3, #1
 800f594:	2b00      	cmp	r3, #0
 800f596:	d005      	beq.n	800f5a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f59c:	f043 0204 	orr.w	r2, r3, #4
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	f003 0308 	and.w	r3, r3, #8
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00f      	beq.n	800f5ce <HAL_UART_IRQHandler+0xfa>
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	f003 0320 	and.w	r3, r3, #32
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d104      	bne.n	800f5c2 <HAL_UART_IRQHandler+0xee>
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f003 0301 	and.w	r3, r3, #1
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d005      	beq.n	800f5ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5c6:	f043 0208 	orr.w	r2, r3, #8
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d078      	beq.n	800f6c8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f5d6:	69fb      	ldr	r3, [r7, #28]
 800f5d8:	f003 0320 	and.w	r3, r3, #32
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d007      	beq.n	800f5f0 <HAL_UART_IRQHandler+0x11c>
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	f003 0320 	and.w	r3, r3, #32
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d002      	beq.n	800f5f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fa53 	bl	800fa96 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	695b      	ldr	r3, [r3, #20]
 800f5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5fa:	2b40      	cmp	r3, #64	; 0x40
 800f5fc:	bf0c      	ite	eq
 800f5fe:	2301      	moveq	r3, #1
 800f600:	2300      	movne	r3, #0
 800f602:	b2db      	uxtb	r3, r3
 800f604:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f60a:	f003 0308 	and.w	r3, r3, #8
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d102      	bne.n	800f618 <HAL_UART_IRQHandler+0x144>
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d031      	beq.n	800f67c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 f99c 	bl	800f956 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f628:	2b40      	cmp	r3, #64	; 0x40
 800f62a:	d123      	bne.n	800f674 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	695a      	ldr	r2, [r3, #20]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f63a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f640:	2b00      	cmp	r3, #0
 800f642:	d013      	beq.n	800f66c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f648:	4a21      	ldr	r2, [pc, #132]	; (800f6d0 <HAL_UART_IRQHandler+0x1fc>)
 800f64a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f650:	4618      	mov	r0, r3
 800f652:	f7f9 fef9 	bl	8009448 <HAL_DMA_Abort_IT>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d016      	beq.n	800f68a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f666:	4610      	mov	r0, r2
 800f668:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f66a:	e00e      	b.n	800f68a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f845 	bl	800f6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f672:	e00a      	b.n	800f68a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 f841 	bl	800f6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f67a:	e006      	b.n	800f68a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 f83d 	bl	800f6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800f688:	e01e      	b.n	800f6c8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f68a:	bf00      	nop
    return;
 800f68c:	e01c      	b.n	800f6c8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f694:	2b00      	cmp	r3, #0
 800f696:	d008      	beq.n	800f6aa <HAL_UART_IRQHandler+0x1d6>
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d003      	beq.n	800f6aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f989 	bl	800f9ba <UART_Transmit_IT>
    return;
 800f6a8:	e00f      	b.n	800f6ca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00a      	beq.n	800f6ca <HAL_UART_IRQHandler+0x1f6>
 800f6b4:	69bb      	ldr	r3, [r7, #24]
 800f6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d005      	beq.n	800f6ca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f9d1 	bl	800fa66 <UART_EndTransmit_IT>
    return;
 800f6c4:	bf00      	nop
 800f6c6:	e000      	b.n	800f6ca <HAL_UART_IRQHandler+0x1f6>
    return;
 800f6c8:	bf00      	nop
  }
}
 800f6ca:	3720      	adds	r7, #32
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}
 800f6d0:	0800f993 	.word	0x0800f993

0800f6d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f6dc:	bf00      	nop
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr

0800f6e8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f6f0:	bf00      	nop
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f704:	bf00      	nop
 800f706:	370c      	adds	r7, #12
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f71c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d113      	bne.n	800f754 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2200      	movs	r2, #0
 800f730:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	695a      	ldr	r2, [r3, #20]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f740:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	68da      	ldr	r2, [r3, #12]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f750:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f752:	e002      	b.n	800f75a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7ff ffbd 	bl	800f6d4 <HAL_UART_TxCpltCallback>
}
 800f75a:	bf00      	nop
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f762:	b580      	push	{r7, lr}
 800f764:	b084      	sub	sp, #16
 800f766:	af00      	add	r7, sp, #0
 800f768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f76e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f7ff ffb9 	bl	800f6e8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f776:	bf00      	nop
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b084      	sub	sp, #16
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f78a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f796:	2b00      	cmp	r3, #0
 800f798:	d11e      	bne.n	800f7d8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2200      	movs	r2, #0
 800f79e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	68da      	ldr	r2, [r3, #12]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f7ae:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	695a      	ldr	r2, [r3, #20]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f022 0201 	bic.w	r2, r2, #1
 800f7be:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	695a      	ldr	r2, [r3, #20]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7ce:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2220      	movs	r2, #32
 800f7d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f7f8 f8f3 	bl	80079c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7de:	bf00      	nop
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7f2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f7f8 f8f0 	bl	80079da <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7fa:	bf00      	nop
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}

0800f802 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f802:	b580      	push	{r7, lr}
 800f804:	b084      	sub	sp, #16
 800f806:	af00      	add	r7, sp, #0
 800f808:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f80a:	2300      	movs	r3, #0
 800f80c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f812:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	695b      	ldr	r3, [r3, #20]
 800f81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f81e:	2b80      	cmp	r3, #128	; 0x80
 800f820:	bf0c      	ite	eq
 800f822:	2301      	moveq	r3, #1
 800f824:	2300      	movne	r3, #0
 800f826:	b2db      	uxtb	r3, r3
 800f828:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f830:	b2db      	uxtb	r3, r3
 800f832:	2b21      	cmp	r3, #33	; 0x21
 800f834:	d108      	bne.n	800f848 <UART_DMAError+0x46>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d005      	beq.n	800f848 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	2200      	movs	r2, #0
 800f840:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f842:	68b8      	ldr	r0, [r7, #8]
 800f844:	f000 f871 	bl	800f92a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f852:	2b40      	cmp	r3, #64	; 0x40
 800f854:	bf0c      	ite	eq
 800f856:	2301      	moveq	r3, #1
 800f858:	2300      	movne	r3, #0
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b22      	cmp	r3, #34	; 0x22
 800f868:	d108      	bne.n	800f87c <UART_DMAError+0x7a>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d005      	beq.n	800f87c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	2200      	movs	r2, #0
 800f874:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f876:	68b8      	ldr	r0, [r7, #8]
 800f878:	f000 f86d 	bl	800f956 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f880:	f043 0210 	orr.w	r2, r3, #16
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f888:	68b8      	ldr	r0, [r7, #8]
 800f88a:	f7ff ff37 	bl	800f6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f88e:	bf00      	nop
 800f890:	3710      	adds	r7, #16
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}

0800f896 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b084      	sub	sp, #16
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	60f8      	str	r0, [r7, #12]
 800f89e:	60b9      	str	r1, [r7, #8]
 800f8a0:	603b      	str	r3, [r7, #0]
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8a6:	e02c      	b.n	800f902 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8a8:	69bb      	ldr	r3, [r7, #24]
 800f8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ae:	d028      	beq.n	800f902 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d007      	beq.n	800f8c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800f8b6:	f7f8 ff8d 	bl	80087d4 <HAL_GetTick>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	69ba      	ldr	r2, [r7, #24]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d21d      	bcs.n	800f902 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	68da      	ldr	r2, [r3, #12]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f8d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	695a      	ldr	r2, [r3, #20]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f022 0201 	bic.w	r2, r2, #1
 800f8e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2220      	movs	r2, #32
 800f8ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800f8fe:	2303      	movs	r3, #3
 800f900:	e00f      	b.n	800f922 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	681a      	ldr	r2, [r3, #0]
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	4013      	ands	r3, r2
 800f90c:	68ba      	ldr	r2, [r7, #8]
 800f90e:	429a      	cmp	r2, r3
 800f910:	bf0c      	ite	eq
 800f912:	2301      	moveq	r3, #1
 800f914:	2300      	movne	r3, #0
 800f916:	b2db      	uxtb	r3, r3
 800f918:	461a      	mov	r2, r3
 800f91a:	79fb      	ldrb	r3, [r7, #7]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d0c3      	beq.n	800f8a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f920:	2300      	movs	r3, #0
}
 800f922:	4618      	mov	r0, r3
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}

0800f92a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f92a:	b480      	push	{r7}
 800f92c:	b083      	sub	sp, #12
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	68da      	ldr	r2, [r3, #12]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f940:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2220      	movs	r2, #32
 800f946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800f94a:	bf00      	nop
 800f94c:	370c      	adds	r7, #12
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr

0800f956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f956:	b480      	push	{r7}
 800f958:	b083      	sub	sp, #12
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	68da      	ldr	r2, [r3, #12]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f96c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	695a      	ldr	r2, [r3, #20]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f022 0201 	bic.w	r2, r2, #1
 800f97c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2220      	movs	r2, #32
 800f982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800f986:	bf00      	nop
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b084      	sub	sp, #16
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f7ff fea5 	bl	800f6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f9ba:	b480      	push	{r7}
 800f9bc:	b085      	sub	sp, #20
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f9c8:	b2db      	uxtb	r3, r3
 800f9ca:	2b21      	cmp	r3, #33	; 0x21
 800f9cc:	d144      	bne.n	800fa58 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	689b      	ldr	r3, [r3, #8]
 800f9d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9d6:	d11a      	bne.n	800fa0e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6a1b      	ldr	r3, [r3, #32]
 800f9dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	881b      	ldrh	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f9ec:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d105      	bne.n	800fa02 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	1c9a      	adds	r2, r3, #2
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	621a      	str	r2, [r3, #32]
 800fa00:	e00e      	b.n	800fa20 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	1c5a      	adds	r2, r3, #1
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	621a      	str	r2, [r3, #32]
 800fa0c:	e008      	b.n	800fa20 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6a1b      	ldr	r3, [r3, #32]
 800fa12:	1c59      	adds	r1, r3, #1
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	6211      	str	r1, [r2, #32]
 800fa18:	781a      	ldrb	r2, [r3, #0]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	3b01      	subs	r3, #1
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	687a      	ldr	r2, [r7, #4]
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d10f      	bne.n	800fa54 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	68da      	ldr	r2, [r3, #12]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa42:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	68da      	ldr	r2, [r3, #12]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fa52:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fa54:	2300      	movs	r3, #0
 800fa56:	e000      	b.n	800fa5a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800fa58:	2302      	movs	r3, #2
  }
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3714      	adds	r7, #20
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr

0800fa66 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b082      	sub	sp, #8
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	68da      	ldr	r2, [r3, #12]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa7c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2220      	movs	r2, #32
 800fa82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7ff fe24 	bl	800f6d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fa8c:	2300      	movs	r3, #0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3708      	adds	r7, #8
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b084      	sub	sp, #16
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	2b22      	cmp	r3, #34	; 0x22
 800faa8:	d171      	bne.n	800fb8e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	689b      	ldr	r3, [r3, #8]
 800faae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fab2:	d123      	bne.n	800fafc <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	691b      	ldr	r3, [r3, #16]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d10e      	bne.n	800fae0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	b29b      	uxth	r3, r3
 800faca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800face:	b29a      	uxth	r2, r3
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fad8:	1c9a      	adds	r2, r3, #2
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	629a      	str	r2, [r3, #40]	; 0x28
 800fade:	e029      	b.n	800fb34 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	b29a      	uxth	r2, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	629a      	str	r2, [r3, #40]	; 0x28
 800fafa:	e01b      	b.n	800fb34 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	691b      	ldr	r3, [r3, #16]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10a      	bne.n	800fb1a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	6858      	ldr	r0, [r3, #4]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0e:	1c59      	adds	r1, r3, #1
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	6291      	str	r1, [r2, #40]	; 0x28
 800fb14:	b2c2      	uxtb	r2, r0
 800fb16:	701a      	strb	r2, [r3, #0]
 800fb18:	e00c      	b.n	800fb34 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	685b      	ldr	r3, [r3, #4]
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb26:	1c58      	adds	r0, r3, #1
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	6288      	str	r0, [r1, #40]	; 0x28
 800fb2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fb30:	b2d2      	uxtb	r2, r2
 800fb32:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	3b01      	subs	r3, #1
 800fb3c:	b29b      	uxth	r3, r3
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	4619      	mov	r1, r3
 800fb42:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d120      	bne.n	800fb8a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	68da      	ldr	r2, [r3, #12]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f022 0220 	bic.w	r2, r2, #32
 800fb56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	68da      	ldr	r2, [r3, #12]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fb66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	695a      	ldr	r2, [r3, #20]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f022 0201 	bic.w	r2, r2, #1
 800fb76:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2220      	movs	r2, #32
 800fb7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f7f7 ff1f 	bl	80079c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800fb86:	2300      	movs	r3, #0
 800fb88:	e002      	b.n	800fb90 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	e000      	b.n	800fb90 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800fb8e:	2302      	movs	r3, #2
  }
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9c:	b085      	sub	sp, #20
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	68da      	ldr	r2, [r3, #12]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	430a      	orrs	r2, r1
 800fbb6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	689a      	ldr	r2, [r3, #8]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	691b      	ldr	r3, [r3, #16]
 800fbc0:	431a      	orrs	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	695b      	ldr	r3, [r3, #20]
 800fbc6:	431a      	orrs	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	69db      	ldr	r3, [r3, #28]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fbda:	f023 030c 	bic.w	r3, r3, #12
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	6812      	ldr	r2, [r2, #0]
 800fbe2:	68f9      	ldr	r1, [r7, #12]
 800fbe4:	430b      	orrs	r3, r1
 800fbe6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	695b      	ldr	r3, [r3, #20]
 800fbee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	699a      	ldr	r2, [r3, #24]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	430a      	orrs	r2, r1
 800fbfc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	69db      	ldr	r3, [r3, #28]
 800fc02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc06:	f040 818b 	bne.w	800ff20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4ac1      	ldr	r2, [pc, #772]	; (800ff14 <UART_SetConfig+0x37c>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d005      	beq.n	800fc20 <UART_SetConfig+0x88>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4abf      	ldr	r2, [pc, #764]	; (800ff18 <UART_SetConfig+0x380>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	f040 80bd 	bne.w	800fd9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fc20:	f7fd fbe8 	bl	800d3f4 <HAL_RCC_GetPCLK2Freq>
 800fc24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	461d      	mov	r5, r3
 800fc2a:	f04f 0600 	mov.w	r6, #0
 800fc2e:	46a8      	mov	r8, r5
 800fc30:	46b1      	mov	r9, r6
 800fc32:	eb18 0308 	adds.w	r3, r8, r8
 800fc36:	eb49 0409 	adc.w	r4, r9, r9
 800fc3a:	4698      	mov	r8, r3
 800fc3c:	46a1      	mov	r9, r4
 800fc3e:	eb18 0805 	adds.w	r8, r8, r5
 800fc42:	eb49 0906 	adc.w	r9, r9, r6
 800fc46:	f04f 0100 	mov.w	r1, #0
 800fc4a:	f04f 0200 	mov.w	r2, #0
 800fc4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fc52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fc56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fc5a:	4688      	mov	r8, r1
 800fc5c:	4691      	mov	r9, r2
 800fc5e:	eb18 0005 	adds.w	r0, r8, r5
 800fc62:	eb49 0106 	adc.w	r1, r9, r6
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	461d      	mov	r5, r3
 800fc6c:	f04f 0600 	mov.w	r6, #0
 800fc70:	196b      	adds	r3, r5, r5
 800fc72:	eb46 0406 	adc.w	r4, r6, r6
 800fc76:	461a      	mov	r2, r3
 800fc78:	4623      	mov	r3, r4
 800fc7a:	f7f0 ffe5 	bl	8000c48 <__aeabi_uldivmod>
 800fc7e:	4603      	mov	r3, r0
 800fc80:	460c      	mov	r4, r1
 800fc82:	461a      	mov	r2, r3
 800fc84:	4ba5      	ldr	r3, [pc, #660]	; (800ff1c <UART_SetConfig+0x384>)
 800fc86:	fba3 2302 	umull	r2, r3, r3, r2
 800fc8a:	095b      	lsrs	r3, r3, #5
 800fc8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	461d      	mov	r5, r3
 800fc94:	f04f 0600 	mov.w	r6, #0
 800fc98:	46a9      	mov	r9, r5
 800fc9a:	46b2      	mov	sl, r6
 800fc9c:	eb19 0309 	adds.w	r3, r9, r9
 800fca0:	eb4a 040a 	adc.w	r4, sl, sl
 800fca4:	4699      	mov	r9, r3
 800fca6:	46a2      	mov	sl, r4
 800fca8:	eb19 0905 	adds.w	r9, r9, r5
 800fcac:	eb4a 0a06 	adc.w	sl, sl, r6
 800fcb0:	f04f 0100 	mov.w	r1, #0
 800fcb4:	f04f 0200 	mov.w	r2, #0
 800fcb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fcbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fcc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fcc4:	4689      	mov	r9, r1
 800fcc6:	4692      	mov	sl, r2
 800fcc8:	eb19 0005 	adds.w	r0, r9, r5
 800fccc:	eb4a 0106 	adc.w	r1, sl, r6
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	461d      	mov	r5, r3
 800fcd6:	f04f 0600 	mov.w	r6, #0
 800fcda:	196b      	adds	r3, r5, r5
 800fcdc:	eb46 0406 	adc.w	r4, r6, r6
 800fce0:	461a      	mov	r2, r3
 800fce2:	4623      	mov	r3, r4
 800fce4:	f7f0 ffb0 	bl	8000c48 <__aeabi_uldivmod>
 800fce8:	4603      	mov	r3, r0
 800fcea:	460c      	mov	r4, r1
 800fcec:	461a      	mov	r2, r3
 800fcee:	4b8b      	ldr	r3, [pc, #556]	; (800ff1c <UART_SetConfig+0x384>)
 800fcf0:	fba3 1302 	umull	r1, r3, r3, r2
 800fcf4:	095b      	lsrs	r3, r3, #5
 800fcf6:	2164      	movs	r1, #100	; 0x64
 800fcf8:	fb01 f303 	mul.w	r3, r1, r3
 800fcfc:	1ad3      	subs	r3, r2, r3
 800fcfe:	00db      	lsls	r3, r3, #3
 800fd00:	3332      	adds	r3, #50	; 0x32
 800fd02:	4a86      	ldr	r2, [pc, #536]	; (800ff1c <UART_SetConfig+0x384>)
 800fd04:	fba2 2303 	umull	r2, r3, r2, r3
 800fd08:	095b      	lsrs	r3, r3, #5
 800fd0a:	005b      	lsls	r3, r3, #1
 800fd0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fd10:	4498      	add	r8, r3
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	461d      	mov	r5, r3
 800fd16:	f04f 0600 	mov.w	r6, #0
 800fd1a:	46a9      	mov	r9, r5
 800fd1c:	46b2      	mov	sl, r6
 800fd1e:	eb19 0309 	adds.w	r3, r9, r9
 800fd22:	eb4a 040a 	adc.w	r4, sl, sl
 800fd26:	4699      	mov	r9, r3
 800fd28:	46a2      	mov	sl, r4
 800fd2a:	eb19 0905 	adds.w	r9, r9, r5
 800fd2e:	eb4a 0a06 	adc.w	sl, sl, r6
 800fd32:	f04f 0100 	mov.w	r1, #0
 800fd36:	f04f 0200 	mov.w	r2, #0
 800fd3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd46:	4689      	mov	r9, r1
 800fd48:	4692      	mov	sl, r2
 800fd4a:	eb19 0005 	adds.w	r0, r9, r5
 800fd4e:	eb4a 0106 	adc.w	r1, sl, r6
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	461d      	mov	r5, r3
 800fd58:	f04f 0600 	mov.w	r6, #0
 800fd5c:	196b      	adds	r3, r5, r5
 800fd5e:	eb46 0406 	adc.w	r4, r6, r6
 800fd62:	461a      	mov	r2, r3
 800fd64:	4623      	mov	r3, r4
 800fd66:	f7f0 ff6f 	bl	8000c48 <__aeabi_uldivmod>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	461a      	mov	r2, r3
 800fd70:	4b6a      	ldr	r3, [pc, #424]	; (800ff1c <UART_SetConfig+0x384>)
 800fd72:	fba3 1302 	umull	r1, r3, r3, r2
 800fd76:	095b      	lsrs	r3, r3, #5
 800fd78:	2164      	movs	r1, #100	; 0x64
 800fd7a:	fb01 f303 	mul.w	r3, r1, r3
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	3332      	adds	r3, #50	; 0x32
 800fd84:	4a65      	ldr	r2, [pc, #404]	; (800ff1c <UART_SetConfig+0x384>)
 800fd86:	fba2 2303 	umull	r2, r3, r2, r3
 800fd8a:	095b      	lsrs	r3, r3, #5
 800fd8c:	f003 0207 	and.w	r2, r3, #7
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4442      	add	r2, r8
 800fd96:	609a      	str	r2, [r3, #8]
 800fd98:	e26f      	b.n	801027a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fd9a:	f7fd fb17 	bl	800d3cc <HAL_RCC_GetPCLK1Freq>
 800fd9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	461d      	mov	r5, r3
 800fda4:	f04f 0600 	mov.w	r6, #0
 800fda8:	46a8      	mov	r8, r5
 800fdaa:	46b1      	mov	r9, r6
 800fdac:	eb18 0308 	adds.w	r3, r8, r8
 800fdb0:	eb49 0409 	adc.w	r4, r9, r9
 800fdb4:	4698      	mov	r8, r3
 800fdb6:	46a1      	mov	r9, r4
 800fdb8:	eb18 0805 	adds.w	r8, r8, r5
 800fdbc:	eb49 0906 	adc.w	r9, r9, r6
 800fdc0:	f04f 0100 	mov.w	r1, #0
 800fdc4:	f04f 0200 	mov.w	r2, #0
 800fdc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fdcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fdd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fdd4:	4688      	mov	r8, r1
 800fdd6:	4691      	mov	r9, r2
 800fdd8:	eb18 0005 	adds.w	r0, r8, r5
 800fddc:	eb49 0106 	adc.w	r1, r9, r6
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	461d      	mov	r5, r3
 800fde6:	f04f 0600 	mov.w	r6, #0
 800fdea:	196b      	adds	r3, r5, r5
 800fdec:	eb46 0406 	adc.w	r4, r6, r6
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	4623      	mov	r3, r4
 800fdf4:	f7f0 ff28 	bl	8000c48 <__aeabi_uldivmod>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	4b47      	ldr	r3, [pc, #284]	; (800ff1c <UART_SetConfig+0x384>)
 800fe00:	fba3 2302 	umull	r2, r3, r3, r2
 800fe04:	095b      	lsrs	r3, r3, #5
 800fe06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	461d      	mov	r5, r3
 800fe0e:	f04f 0600 	mov.w	r6, #0
 800fe12:	46a9      	mov	r9, r5
 800fe14:	46b2      	mov	sl, r6
 800fe16:	eb19 0309 	adds.w	r3, r9, r9
 800fe1a:	eb4a 040a 	adc.w	r4, sl, sl
 800fe1e:	4699      	mov	r9, r3
 800fe20:	46a2      	mov	sl, r4
 800fe22:	eb19 0905 	adds.w	r9, r9, r5
 800fe26:	eb4a 0a06 	adc.w	sl, sl, r6
 800fe2a:	f04f 0100 	mov.w	r1, #0
 800fe2e:	f04f 0200 	mov.w	r2, #0
 800fe32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe3e:	4689      	mov	r9, r1
 800fe40:	4692      	mov	sl, r2
 800fe42:	eb19 0005 	adds.w	r0, r9, r5
 800fe46:	eb4a 0106 	adc.w	r1, sl, r6
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	461d      	mov	r5, r3
 800fe50:	f04f 0600 	mov.w	r6, #0
 800fe54:	196b      	adds	r3, r5, r5
 800fe56:	eb46 0406 	adc.w	r4, r6, r6
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	4623      	mov	r3, r4
 800fe5e:	f7f0 fef3 	bl	8000c48 <__aeabi_uldivmod>
 800fe62:	4603      	mov	r3, r0
 800fe64:	460c      	mov	r4, r1
 800fe66:	461a      	mov	r2, r3
 800fe68:	4b2c      	ldr	r3, [pc, #176]	; (800ff1c <UART_SetConfig+0x384>)
 800fe6a:	fba3 1302 	umull	r1, r3, r3, r2
 800fe6e:	095b      	lsrs	r3, r3, #5
 800fe70:	2164      	movs	r1, #100	; 0x64
 800fe72:	fb01 f303 	mul.w	r3, r1, r3
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	00db      	lsls	r3, r3, #3
 800fe7a:	3332      	adds	r3, #50	; 0x32
 800fe7c:	4a27      	ldr	r2, [pc, #156]	; (800ff1c <UART_SetConfig+0x384>)
 800fe7e:	fba2 2303 	umull	r2, r3, r2, r3
 800fe82:	095b      	lsrs	r3, r3, #5
 800fe84:	005b      	lsls	r3, r3, #1
 800fe86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fe8a:	4498      	add	r8, r3
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	461d      	mov	r5, r3
 800fe90:	f04f 0600 	mov.w	r6, #0
 800fe94:	46a9      	mov	r9, r5
 800fe96:	46b2      	mov	sl, r6
 800fe98:	eb19 0309 	adds.w	r3, r9, r9
 800fe9c:	eb4a 040a 	adc.w	r4, sl, sl
 800fea0:	4699      	mov	r9, r3
 800fea2:	46a2      	mov	sl, r4
 800fea4:	eb19 0905 	adds.w	r9, r9, r5
 800fea8:	eb4a 0a06 	adc.w	sl, sl, r6
 800feac:	f04f 0100 	mov.w	r1, #0
 800feb0:	f04f 0200 	mov.w	r2, #0
 800feb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800feb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800febc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fec0:	4689      	mov	r9, r1
 800fec2:	4692      	mov	sl, r2
 800fec4:	eb19 0005 	adds.w	r0, r9, r5
 800fec8:	eb4a 0106 	adc.w	r1, sl, r6
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	461d      	mov	r5, r3
 800fed2:	f04f 0600 	mov.w	r6, #0
 800fed6:	196b      	adds	r3, r5, r5
 800fed8:	eb46 0406 	adc.w	r4, r6, r6
 800fedc:	461a      	mov	r2, r3
 800fede:	4623      	mov	r3, r4
 800fee0:	f7f0 feb2 	bl	8000c48 <__aeabi_uldivmod>
 800fee4:	4603      	mov	r3, r0
 800fee6:	460c      	mov	r4, r1
 800fee8:	461a      	mov	r2, r3
 800feea:	4b0c      	ldr	r3, [pc, #48]	; (800ff1c <UART_SetConfig+0x384>)
 800feec:	fba3 1302 	umull	r1, r3, r3, r2
 800fef0:	095b      	lsrs	r3, r3, #5
 800fef2:	2164      	movs	r1, #100	; 0x64
 800fef4:	fb01 f303 	mul.w	r3, r1, r3
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	00db      	lsls	r3, r3, #3
 800fefc:	3332      	adds	r3, #50	; 0x32
 800fefe:	4a07      	ldr	r2, [pc, #28]	; (800ff1c <UART_SetConfig+0x384>)
 800ff00:	fba2 2303 	umull	r2, r3, r2, r3
 800ff04:	095b      	lsrs	r3, r3, #5
 800ff06:	f003 0207 	and.w	r2, r3, #7
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	4442      	add	r2, r8
 800ff10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ff12:	e1b2      	b.n	801027a <UART_SetConfig+0x6e2>
 800ff14:	40011000 	.word	0x40011000
 800ff18:	40011400 	.word	0x40011400
 800ff1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4ad7      	ldr	r2, [pc, #860]	; (8010284 <UART_SetConfig+0x6ec>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d005      	beq.n	800ff36 <UART_SetConfig+0x39e>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4ad6      	ldr	r2, [pc, #856]	; (8010288 <UART_SetConfig+0x6f0>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	f040 80d1 	bne.w	80100d8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ff36:	f7fd fa5d 	bl	800d3f4 <HAL_RCC_GetPCLK2Freq>
 800ff3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	469a      	mov	sl, r3
 800ff40:	f04f 0b00 	mov.w	fp, #0
 800ff44:	46d0      	mov	r8, sl
 800ff46:	46d9      	mov	r9, fp
 800ff48:	eb18 0308 	adds.w	r3, r8, r8
 800ff4c:	eb49 0409 	adc.w	r4, r9, r9
 800ff50:	4698      	mov	r8, r3
 800ff52:	46a1      	mov	r9, r4
 800ff54:	eb18 080a 	adds.w	r8, r8, sl
 800ff58:	eb49 090b 	adc.w	r9, r9, fp
 800ff5c:	f04f 0100 	mov.w	r1, #0
 800ff60:	f04f 0200 	mov.w	r2, #0
 800ff64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ff68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ff6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ff70:	4688      	mov	r8, r1
 800ff72:	4691      	mov	r9, r2
 800ff74:	eb1a 0508 	adds.w	r5, sl, r8
 800ff78:	eb4b 0609 	adc.w	r6, fp, r9
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	4619      	mov	r1, r3
 800ff82:	f04f 0200 	mov.w	r2, #0
 800ff86:	f04f 0300 	mov.w	r3, #0
 800ff8a:	f04f 0400 	mov.w	r4, #0
 800ff8e:	0094      	lsls	r4, r2, #2
 800ff90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ff94:	008b      	lsls	r3, r1, #2
 800ff96:	461a      	mov	r2, r3
 800ff98:	4623      	mov	r3, r4
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	f7f0 fe53 	bl	8000c48 <__aeabi_uldivmod>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	4bb8      	ldr	r3, [pc, #736]	; (801028c <UART_SetConfig+0x6f4>)
 800ffaa:	fba3 2302 	umull	r2, r3, r3, r2
 800ffae:	095b      	lsrs	r3, r3, #5
 800ffb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	469b      	mov	fp, r3
 800ffb8:	f04f 0c00 	mov.w	ip, #0
 800ffbc:	46d9      	mov	r9, fp
 800ffbe:	46e2      	mov	sl, ip
 800ffc0:	eb19 0309 	adds.w	r3, r9, r9
 800ffc4:	eb4a 040a 	adc.w	r4, sl, sl
 800ffc8:	4699      	mov	r9, r3
 800ffca:	46a2      	mov	sl, r4
 800ffcc:	eb19 090b 	adds.w	r9, r9, fp
 800ffd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ffd4:	f04f 0100 	mov.w	r1, #0
 800ffd8:	f04f 0200 	mov.w	r2, #0
 800ffdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffe0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffe4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffe8:	4689      	mov	r9, r1
 800ffea:	4692      	mov	sl, r2
 800ffec:	eb1b 0509 	adds.w	r5, fp, r9
 800fff0:	eb4c 060a 	adc.w	r6, ip, sl
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	4619      	mov	r1, r3
 800fffa:	f04f 0200 	mov.w	r2, #0
 800fffe:	f04f 0300 	mov.w	r3, #0
 8010002:	f04f 0400 	mov.w	r4, #0
 8010006:	0094      	lsls	r4, r2, #2
 8010008:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801000c:	008b      	lsls	r3, r1, #2
 801000e:	461a      	mov	r2, r3
 8010010:	4623      	mov	r3, r4
 8010012:	4628      	mov	r0, r5
 8010014:	4631      	mov	r1, r6
 8010016:	f7f0 fe17 	bl	8000c48 <__aeabi_uldivmod>
 801001a:	4603      	mov	r3, r0
 801001c:	460c      	mov	r4, r1
 801001e:	461a      	mov	r2, r3
 8010020:	4b9a      	ldr	r3, [pc, #616]	; (801028c <UART_SetConfig+0x6f4>)
 8010022:	fba3 1302 	umull	r1, r3, r3, r2
 8010026:	095b      	lsrs	r3, r3, #5
 8010028:	2164      	movs	r1, #100	; 0x64
 801002a:	fb01 f303 	mul.w	r3, r1, r3
 801002e:	1ad3      	subs	r3, r2, r3
 8010030:	011b      	lsls	r3, r3, #4
 8010032:	3332      	adds	r3, #50	; 0x32
 8010034:	4a95      	ldr	r2, [pc, #596]	; (801028c <UART_SetConfig+0x6f4>)
 8010036:	fba2 2303 	umull	r2, r3, r2, r3
 801003a:	095b      	lsrs	r3, r3, #5
 801003c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010040:	4498      	add	r8, r3
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	469b      	mov	fp, r3
 8010046:	f04f 0c00 	mov.w	ip, #0
 801004a:	46d9      	mov	r9, fp
 801004c:	46e2      	mov	sl, ip
 801004e:	eb19 0309 	adds.w	r3, r9, r9
 8010052:	eb4a 040a 	adc.w	r4, sl, sl
 8010056:	4699      	mov	r9, r3
 8010058:	46a2      	mov	sl, r4
 801005a:	eb19 090b 	adds.w	r9, r9, fp
 801005e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010062:	f04f 0100 	mov.w	r1, #0
 8010066:	f04f 0200 	mov.w	r2, #0
 801006a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801006e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010072:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010076:	4689      	mov	r9, r1
 8010078:	4692      	mov	sl, r2
 801007a:	eb1b 0509 	adds.w	r5, fp, r9
 801007e:	eb4c 060a 	adc.w	r6, ip, sl
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	685b      	ldr	r3, [r3, #4]
 8010086:	4619      	mov	r1, r3
 8010088:	f04f 0200 	mov.w	r2, #0
 801008c:	f04f 0300 	mov.w	r3, #0
 8010090:	f04f 0400 	mov.w	r4, #0
 8010094:	0094      	lsls	r4, r2, #2
 8010096:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801009a:	008b      	lsls	r3, r1, #2
 801009c:	461a      	mov	r2, r3
 801009e:	4623      	mov	r3, r4
 80100a0:	4628      	mov	r0, r5
 80100a2:	4631      	mov	r1, r6
 80100a4:	f7f0 fdd0 	bl	8000c48 <__aeabi_uldivmod>
 80100a8:	4603      	mov	r3, r0
 80100aa:	460c      	mov	r4, r1
 80100ac:	461a      	mov	r2, r3
 80100ae:	4b77      	ldr	r3, [pc, #476]	; (801028c <UART_SetConfig+0x6f4>)
 80100b0:	fba3 1302 	umull	r1, r3, r3, r2
 80100b4:	095b      	lsrs	r3, r3, #5
 80100b6:	2164      	movs	r1, #100	; 0x64
 80100b8:	fb01 f303 	mul.w	r3, r1, r3
 80100bc:	1ad3      	subs	r3, r2, r3
 80100be:	011b      	lsls	r3, r3, #4
 80100c0:	3332      	adds	r3, #50	; 0x32
 80100c2:	4a72      	ldr	r2, [pc, #456]	; (801028c <UART_SetConfig+0x6f4>)
 80100c4:	fba2 2303 	umull	r2, r3, r2, r3
 80100c8:	095b      	lsrs	r3, r3, #5
 80100ca:	f003 020f 	and.w	r2, r3, #15
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4442      	add	r2, r8
 80100d4:	609a      	str	r2, [r3, #8]
 80100d6:	e0d0      	b.n	801027a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80100d8:	f7fd f978 	bl	800d3cc <HAL_RCC_GetPCLK1Freq>
 80100dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	469a      	mov	sl, r3
 80100e2:	f04f 0b00 	mov.w	fp, #0
 80100e6:	46d0      	mov	r8, sl
 80100e8:	46d9      	mov	r9, fp
 80100ea:	eb18 0308 	adds.w	r3, r8, r8
 80100ee:	eb49 0409 	adc.w	r4, r9, r9
 80100f2:	4698      	mov	r8, r3
 80100f4:	46a1      	mov	r9, r4
 80100f6:	eb18 080a 	adds.w	r8, r8, sl
 80100fa:	eb49 090b 	adc.w	r9, r9, fp
 80100fe:	f04f 0100 	mov.w	r1, #0
 8010102:	f04f 0200 	mov.w	r2, #0
 8010106:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801010a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801010e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010112:	4688      	mov	r8, r1
 8010114:	4691      	mov	r9, r2
 8010116:	eb1a 0508 	adds.w	r5, sl, r8
 801011a:	eb4b 0609 	adc.w	r6, fp, r9
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	4619      	mov	r1, r3
 8010124:	f04f 0200 	mov.w	r2, #0
 8010128:	f04f 0300 	mov.w	r3, #0
 801012c:	f04f 0400 	mov.w	r4, #0
 8010130:	0094      	lsls	r4, r2, #2
 8010132:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010136:	008b      	lsls	r3, r1, #2
 8010138:	461a      	mov	r2, r3
 801013a:	4623      	mov	r3, r4
 801013c:	4628      	mov	r0, r5
 801013e:	4631      	mov	r1, r6
 8010140:	f7f0 fd82 	bl	8000c48 <__aeabi_uldivmod>
 8010144:	4603      	mov	r3, r0
 8010146:	460c      	mov	r4, r1
 8010148:	461a      	mov	r2, r3
 801014a:	4b50      	ldr	r3, [pc, #320]	; (801028c <UART_SetConfig+0x6f4>)
 801014c:	fba3 2302 	umull	r2, r3, r3, r2
 8010150:	095b      	lsrs	r3, r3, #5
 8010152:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	469b      	mov	fp, r3
 801015a:	f04f 0c00 	mov.w	ip, #0
 801015e:	46d9      	mov	r9, fp
 8010160:	46e2      	mov	sl, ip
 8010162:	eb19 0309 	adds.w	r3, r9, r9
 8010166:	eb4a 040a 	adc.w	r4, sl, sl
 801016a:	4699      	mov	r9, r3
 801016c:	46a2      	mov	sl, r4
 801016e:	eb19 090b 	adds.w	r9, r9, fp
 8010172:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010176:	f04f 0100 	mov.w	r1, #0
 801017a:	f04f 0200 	mov.w	r2, #0
 801017e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010182:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010186:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801018a:	4689      	mov	r9, r1
 801018c:	4692      	mov	sl, r2
 801018e:	eb1b 0509 	adds.w	r5, fp, r9
 8010192:	eb4c 060a 	adc.w	r6, ip, sl
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	4619      	mov	r1, r3
 801019c:	f04f 0200 	mov.w	r2, #0
 80101a0:	f04f 0300 	mov.w	r3, #0
 80101a4:	f04f 0400 	mov.w	r4, #0
 80101a8:	0094      	lsls	r4, r2, #2
 80101aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101ae:	008b      	lsls	r3, r1, #2
 80101b0:	461a      	mov	r2, r3
 80101b2:	4623      	mov	r3, r4
 80101b4:	4628      	mov	r0, r5
 80101b6:	4631      	mov	r1, r6
 80101b8:	f7f0 fd46 	bl	8000c48 <__aeabi_uldivmod>
 80101bc:	4603      	mov	r3, r0
 80101be:	460c      	mov	r4, r1
 80101c0:	461a      	mov	r2, r3
 80101c2:	4b32      	ldr	r3, [pc, #200]	; (801028c <UART_SetConfig+0x6f4>)
 80101c4:	fba3 1302 	umull	r1, r3, r3, r2
 80101c8:	095b      	lsrs	r3, r3, #5
 80101ca:	2164      	movs	r1, #100	; 0x64
 80101cc:	fb01 f303 	mul.w	r3, r1, r3
 80101d0:	1ad3      	subs	r3, r2, r3
 80101d2:	011b      	lsls	r3, r3, #4
 80101d4:	3332      	adds	r3, #50	; 0x32
 80101d6:	4a2d      	ldr	r2, [pc, #180]	; (801028c <UART_SetConfig+0x6f4>)
 80101d8:	fba2 2303 	umull	r2, r3, r2, r3
 80101dc:	095b      	lsrs	r3, r3, #5
 80101de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101e2:	4498      	add	r8, r3
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	469b      	mov	fp, r3
 80101e8:	f04f 0c00 	mov.w	ip, #0
 80101ec:	46d9      	mov	r9, fp
 80101ee:	46e2      	mov	sl, ip
 80101f0:	eb19 0309 	adds.w	r3, r9, r9
 80101f4:	eb4a 040a 	adc.w	r4, sl, sl
 80101f8:	4699      	mov	r9, r3
 80101fa:	46a2      	mov	sl, r4
 80101fc:	eb19 090b 	adds.w	r9, r9, fp
 8010200:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010204:	f04f 0100 	mov.w	r1, #0
 8010208:	f04f 0200 	mov.w	r2, #0
 801020c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010210:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010214:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010218:	4689      	mov	r9, r1
 801021a:	4692      	mov	sl, r2
 801021c:	eb1b 0509 	adds.w	r5, fp, r9
 8010220:	eb4c 060a 	adc.w	r6, ip, sl
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	4619      	mov	r1, r3
 801022a:	f04f 0200 	mov.w	r2, #0
 801022e:	f04f 0300 	mov.w	r3, #0
 8010232:	f04f 0400 	mov.w	r4, #0
 8010236:	0094      	lsls	r4, r2, #2
 8010238:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801023c:	008b      	lsls	r3, r1, #2
 801023e:	461a      	mov	r2, r3
 8010240:	4623      	mov	r3, r4
 8010242:	4628      	mov	r0, r5
 8010244:	4631      	mov	r1, r6
 8010246:	f7f0 fcff 	bl	8000c48 <__aeabi_uldivmod>
 801024a:	4603      	mov	r3, r0
 801024c:	460c      	mov	r4, r1
 801024e:	461a      	mov	r2, r3
 8010250:	4b0e      	ldr	r3, [pc, #56]	; (801028c <UART_SetConfig+0x6f4>)
 8010252:	fba3 1302 	umull	r1, r3, r3, r2
 8010256:	095b      	lsrs	r3, r3, #5
 8010258:	2164      	movs	r1, #100	; 0x64
 801025a:	fb01 f303 	mul.w	r3, r1, r3
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	011b      	lsls	r3, r3, #4
 8010262:	3332      	adds	r3, #50	; 0x32
 8010264:	4a09      	ldr	r2, [pc, #36]	; (801028c <UART_SetConfig+0x6f4>)
 8010266:	fba2 2303 	umull	r2, r3, r2, r3
 801026a:	095b      	lsrs	r3, r3, #5
 801026c:	f003 020f 	and.w	r2, r3, #15
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4442      	add	r2, r8
 8010276:	609a      	str	r2, [r3, #8]
}
 8010278:	e7ff      	b.n	801027a <UART_SetConfig+0x6e2>
 801027a:	bf00      	nop
 801027c:	3714      	adds	r7, #20
 801027e:	46bd      	mov	sp, r7
 8010280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010284:	40011000 	.word	0x40011000
 8010288:	40011400 	.word	0x40011400
 801028c:	51eb851f 	.word	0x51eb851f

08010290 <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 8010290:	b480      	push	{r7}
 8010292:	b087      	sub	sp, #28
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	4613      	mov	r3, r2
 801029c:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 801029e:	2300      	movs	r3, #0
 80102a0:	617b      	str	r3, [r7, #20]
 80102a2:	e00c      	b.n	80102be <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	009b      	lsls	r3, r3, #2
 80102a8:	68ba      	ldr	r2, [r7, #8]
 80102aa:	4413      	add	r3, r2
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	68f9      	ldr	r1, [r7, #12]
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	440b      	add	r3, r1
 80102b6:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	3301      	adds	r3, #1
 80102bc:	617b      	str	r3, [r7, #20]
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	ddef      	ble.n	80102a4 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	79fa      	ldrb	r2, [r7, #7]
 80102c8:	761a      	strb	r2, [r3, #24]
}
 80102ca:	bf00      	nop
 80102cc:	371c      	adds	r7, #28
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr

080102d6 <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 80102d6:	b480      	push	{r7}
 80102d8:	b085      	sub	sp, #20
 80102da:	af00      	add	r7, sp, #0
 80102dc:	6078      	str	r0, [r7, #4]
 80102de:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 80102e2:	f04f 0300 	mov.w	r3, #0
 80102e6:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	7e1b      	ldrb	r3, [r3, #24]
 80102ec:	2b01      	cmp	r3, #1
 80102ee:	d01f      	beq.n	8010330 <FILTER_process+0x5a>
 80102f0:	2b02      	cmp	r3, #2
 80102f2:	d047      	beq.n	8010384 <FILTER_process+0xae>
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d148      	bne.n	801038a <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	ed93 7a00 	vldr	s14, [r3]
 80102fe:	edd7 7a00 	vldr	s15, [r7]
 8010302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	edd3 6a04 	vldr	s13, [r3, #16]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010316:	ee77 7a27 	vadd.f32	s15, s14, s15
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68da      	ldr	r2, [r3, #12]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	60fb      	str	r3, [r7, #12]
			break ;
 801032e:	e02f      	b.n	8010390 <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	ed93 7a00 	vldr	s14, [r3]
 8010336:	edd7 7a00 	vldr	s15, [r7]
 801033a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	edd3 6a04 	vldr	s13, [r3, #16]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	edd3 7a01 	vldr	s15, [r3, #4]
 801034a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801034e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	edd3 6a05 	vldr	s13, [r3, #20]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	edd3 7a02 	vldr	s15, [r3, #8]
 801035e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	691a      	ldr	r2, [r3, #16]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	68da      	ldr	r2, [r3, #12]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	60fb      	str	r3, [r7, #12]
			break;
 8010382:	e005      	b.n	8010390 <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	60fb      	str	r3, [r7, #12]
			break;
 8010388:	e002      	b.n	8010390 <FILTER_process+0xba>
		default:
			to_return = new_value ;
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	60fb      	str	r3, [r7, #12]
			break;
 801038e:	bf00      	nop
	}

	return to_return ;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	ee07 3a90 	vmov	s15, r3
};
 8010396:	eeb0 0a67 	vmov.f32	s0, s15
 801039a:	3714      	adds	r7, #20
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr

080103a4 <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 80103ac:	2300      	movs	r3, #0
 80103ae:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80103b0:	2300      	movs	r3, #0
 80103b2:	72fb      	strb	r3, [r7, #11]
 80103b4:	e00a      	b.n	80103cc <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 80103b6:	7afb      	ldrb	r3, [r7, #11]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	4413      	add	r3, r2
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	461a      	mov	r2, r3
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	4413      	add	r3, r2
 80103c4:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 80103c6:	7afb      	ldrb	r3, [r7, #11]
 80103c8:	3301      	adds	r3, #1
 80103ca:	72fb      	strb	r3, [r7, #11]
 80103cc:	7afb      	ldrb	r3, [r7, #11]
 80103ce:	2b1d      	cmp	r3, #29
 80103d0:	d9f1      	bls.n	80103b6 <check_sum_f+0x12>
	return sum ;
 80103d2:	68fb      	ldr	r3, [r7, #12]
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3714      	adds	r7, #20
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 80103ec:	4a0e      	ldr	r2, [pc, #56]	; (8010428 <IBUS_init+0x48>)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 80103f2:	4b0d      	ldr	r3, [pc, #52]	; (8010428 <IBUS_init+0x48>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	68ba      	ldr	r2, [r7, #8]
 80103f8:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 80103fa:	4b0b      	ldr	r3, [pc, #44]	; (8010428 <IBUS_init+0x48>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 8010402:	4b09      	ldr	r3, [pc, #36]	; (8010428 <IBUS_init+0x48>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	6818      	ldr	r0, [r3, #0]
 8010408:	4b07      	ldr	r3, [pc, #28]	; (8010428 <IBUS_init+0x48>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	3304      	adds	r3, #4
 801040e:	2214      	movs	r2, #20
 8010410:	4619      	mov	r1, r3
 8010412:	f7fe ffdf 	bl	800f3d4 <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 8010416:	4b04      	ldr	r3, [pc, #16]	; (8010428 <IBUS_init+0x48>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2201      	movs	r2, #1
 801041c:	761a      	strb	r2, [r3, #24]
}
 801041e:	bf00      	nop
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	200026f4 	.word	0x200026f4

0801042c <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 801042c:	b580      	push	{r7, lr}
 801042e:	b082      	sub	sp, #8
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 8010434:	4b08      	ldr	r3, [pc, #32]	; (8010458 <IBUS_RxCplt+0x2c>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	429a      	cmp	r2, r3
 801043e:	d106      	bne.n	801044e <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 8010440:	4b06      	ldr	r3, [pc, #24]	; (801045c <IBUS_RxCplt+0x30>)
 8010442:	2201      	movs	r2, #1
 8010444:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 8010446:	4b04      	ldr	r3, [pc, #16]	; (8010458 <IBUS_RxCplt+0x2c>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801044c:	4798      	blx	r3
	}
}
 801044e:	bf00      	nop
 8010450:	3708      	adds	r7, #8
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	200026f4 	.word	0x200026f4
 801045c:	200026f0 	.word	0x200026f0

08010460 <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 8010468:	4b08      	ldr	r3, [pc, #32]	; (801048c <IBUS_RxHalfCplt+0x2c>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	687a      	ldr	r2, [r7, #4]
 8010470:	429a      	cmp	r2, r3
 8010472:	d106      	bne.n	8010482 <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 8010474:	4b06      	ldr	r3, [pc, #24]	; (8010490 <IBUS_RxHalfCplt+0x30>)
 8010476:	2200      	movs	r2, #0
 8010478:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 801047a:	4b04      	ldr	r3, [pc, #16]	; (801048c <IBUS_RxHalfCplt+0x2c>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010480:	4798      	blx	r3
	}
}
 8010482:	bf00      	nop
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
 801048a:	bf00      	nop
 801048c:	200026f4 	.word	0x200026f4
 8010490:	200026f0 	.word	0x200026f0

08010494 <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 8010494:	b5b0      	push	{r4, r5, r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 801049a:	2300      	movs	r3, #0
 801049c:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 801049e:	4ba0      	ldr	r3, [pc, #640]	; (8010720 <IBUS_Channel_Update+0x28c>)
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f040 80ba 	bne.w	801061c <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 80104a8:	2300      	movs	r3, #0
 80104aa:	76fb      	strb	r3, [r7, #27]
 80104ac:	e0b1      	b.n	8010612 <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 80104ae:	4b9d      	ldr	r3, [pc, #628]	; (8010724 <IBUS_Channel_Update+0x290>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80104b6:	2b01      	cmp	r3, #1
 80104b8:	d01b      	beq.n	80104f2 <IBUS_Channel_Update+0x5e>
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	d041      	beq.n	8010542 <IBUS_Channel_Update+0xae>
 80104be:	2b00      	cmp	r3, #0
 80104c0:	f040 80a4 	bne.w	801060c <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 80104c4:	4b97      	ldr	r3, [pc, #604]	; (8010724 <IBUS_Channel_Update+0x290>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	7efb      	ldrb	r3, [r7, #27]
 80104ca:	4413      	add	r3, r2
 80104cc:	791b      	ldrb	r3, [r3, #4]
 80104ce:	2b20      	cmp	r3, #32
 80104d0:	f040 8097 	bne.w	8010602 <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 80104d4:	4b93      	ldr	r3, [pc, #588]	; (8010724 <IBUS_Channel_Update+0x290>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2201      	movs	r2, #1
 80104da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 80104de:	4b91      	ldr	r3, [pc, #580]	; (8010724 <IBUS_Channel_Update+0x290>)
 80104e0:	6819      	ldr	r1, [r3, #0]
 80104e2:	7efa      	ldrb	r2, [r7, #27]
 80104e4:	4b8f      	ldr	r3, [pc, #572]	; (8010724 <IBUS_Channel_Update+0x290>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	440a      	add	r2, r1
 80104ea:	7912      	ldrb	r2, [r2, #4]
 80104ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 80104f0:	e087      	b.n	8010602 <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 80104f2:	4b8c      	ldr	r3, [pc, #560]	; (8010724 <IBUS_Channel_Update+0x290>)
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	7efb      	ldrb	r3, [r7, #27]
 80104f8:	4413      	add	r3, r2
 80104fa:	791b      	ldrb	r3, [r3, #4]
 80104fc:	2b40      	cmp	r3, #64	; 0x40
 80104fe:	d113      	bne.n	8010528 <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 8010500:	4b88      	ldr	r3, [pc, #544]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2202      	movs	r2, #2
 8010506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 801050a:	4b86      	ldr	r3, [pc, #536]	; (8010724 <IBUS_Channel_Update+0x290>)
 801050c:	6819      	ldr	r1, [r3, #0]
 801050e:	7efa      	ldrb	r2, [r7, #27]
 8010510:	4b84      	ldr	r3, [pc, #528]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	440a      	add	r2, r1
 8010516:	7912      	ldrb	r2, [r2, #4]
 8010518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 801051c:	4b81      	ldr	r3, [pc, #516]	; (8010724 <IBUS_Channel_Update+0x290>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2202      	movs	r2, #2
 8010522:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 8010526:	e06e      	b.n	8010606 <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 8010528:	4b7e      	ldr	r3, [pc, #504]	; (8010724 <IBUS_Channel_Update+0x290>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	7efb      	ldrb	r3, [r7, #27]
 801052e:	4413      	add	r3, r2
 8010530:	791b      	ldrb	r3, [r3, #4]
 8010532:	2b20      	cmp	r3, #32
 8010534:	d067      	beq.n	8010606 <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 8010536:	4b7b      	ldr	r3, [pc, #492]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	2200      	movs	r2, #0
 801053c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 8010540:	e061      	b.n	8010606 <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 8010542:	4b78      	ldr	r3, [pc, #480]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010544:	681c      	ldr	r4, [r3, #0]
 8010546:	7ef8      	ldrb	r0, [r7, #27]
 8010548:	4b76      	ldr	r3, [pc, #472]	; (8010724 <IBUS_Channel_Update+0x290>)
 801054a:	6819      	ldr	r1, [r3, #0]
 801054c:	4b75      	ldr	r3, [pc, #468]	; (8010724 <IBUS_Channel_Update+0x290>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8010554:	1c55      	adds	r5, r2, #1
 8010556:	b2ad      	uxth	r5, r5
 8010558:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 801055c:	4615      	mov	r5, r2
 801055e:	1823      	adds	r3, r4, r0
 8010560:	791a      	ldrb	r2, [r3, #4]
 8010562:	194b      	adds	r3, r1, r5
 8010564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 8010568:	4b6e      	ldr	r3, [pc, #440]	; (8010724 <IBUS_Channel_Update+0x290>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010570:	2b20      	cmp	r3, #32
 8010572:	d14a      	bne.n	801060a <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 8010574:	4b6b      	ldr	r3, [pc, #428]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 801057c:	461a      	mov	r2, r3
 801057e:	4b69      	ldr	r3, [pc, #420]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010586:	021b      	lsls	r3, r3, #8
 8010588:	4313      	orrs	r3, r2
 801058a:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 801058c:	4b65      	ldr	r3, [pc, #404]	; (8010724 <IBUS_Channel_Update+0x290>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	333d      	adds	r3, #61	; 0x3d
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff ff06 	bl	80103a4 <check_sum_f>
 8010598:	4603      	mov	r3, r0
 801059a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 801059e:	33ff      	adds	r3, #255	; 0xff
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d127      	bne.n	80105f6 <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 80105a6:	2300      	movs	r3, #0
 80105a8:	617b      	str	r3, [r7, #20]
 80105aa:	e01f      	b.n	80105ec <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 80105ac:	4b5d      	ldr	r3, [pc, #372]	; (8010724 <IBUS_Channel_Update+0x290>)
 80105ae:	681a      	ldr	r2, [r3, #0]
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	3302      	adds	r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105ba:	b21a      	sxth	r2, r3
 80105bc:	4b59      	ldr	r3, [pc, #356]	; (8010724 <IBUS_Channel_Update+0x290>)
 80105be:	6819      	ldr	r1, [r3, #0]
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	3303      	adds	r3, #3
 80105c4:	440b      	add	r3, r1
 80105c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105ca:	021b      	lsls	r3, r3, #8
 80105cc:	b21b      	sxth	r3, r3
 80105ce:	4313      	orrs	r3, r2
 80105d0:	b219      	sxth	r1, r3
 80105d2:	4b54      	ldr	r3, [pc, #336]	; (8010724 <IBUS_Channel_Update+0x290>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	085b      	lsrs	r3, r3, #1
 80105da:	b289      	uxth	r1, r1
 80105dc:	330c      	adds	r3, #12
 80105de:	005b      	lsls	r3, r3, #1
 80105e0:	4413      	add	r3, r2
 80105e2:	460a      	mov	r2, r1
 80105e4:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	3302      	adds	r3, #2
 80105ea:	617b      	str	r3, [r7, #20]
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	2b1b      	cmp	r3, #27
 80105f0:	d9dc      	bls.n	80105ac <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 80105f2:	2301      	movs	r3, #1
 80105f4:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 80105f6:	4b4b      	ldr	r3, [pc, #300]	; (8010724 <IBUS_Channel_Update+0x290>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2200      	movs	r2, #0
 80105fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 8010600:	e003      	b.n	801060a <IBUS_Channel_Update+0x176>
					break;
 8010602:	bf00      	nop
 8010604:	e002      	b.n	801060c <IBUS_Channel_Update+0x178>
					break ;
 8010606:	bf00      	nop
 8010608:	e000      	b.n	801060c <IBUS_Channel_Update+0x178>
					break;
 801060a:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 801060c:	7efb      	ldrb	r3, [r7, #27]
 801060e:	3301      	adds	r3, #1
 8010610:	76fb      	strb	r3, [r7, #27]
 8010612:	7efb      	ldrb	r3, [r7, #27]
 8010614:	2b09      	cmp	r3, #9
 8010616:	f67f af4a 	bls.w	80104ae <IBUS_Channel_Update+0x1a>
 801061a:	e0bc      	b.n	8010796 <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 801061c:	230a      	movs	r3, #10
 801061e:	74fb      	strb	r3, [r7, #19]
 8010620:	e0b5      	b.n	801078e <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 8010622:	4b40      	ldr	r3, [pc, #256]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801062a:	2b01      	cmp	r3, #1
 801062c:	d01b      	beq.n	8010666 <IBUS_Channel_Update+0x1d2>
 801062e:	2b02      	cmp	r3, #2
 8010630:	d041      	beq.n	80106b6 <IBUS_Channel_Update+0x222>
 8010632:	2b00      	cmp	r3, #0
 8010634:	f040 80a8 	bne.w	8010788 <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 8010638:	4b3a      	ldr	r3, [pc, #232]	; (8010724 <IBUS_Channel_Update+0x290>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	7cfb      	ldrb	r3, [r7, #19]
 801063e:	4413      	add	r3, r2
 8010640:	791b      	ldrb	r3, [r3, #4]
 8010642:	2b20      	cmp	r3, #32
 8010644:	f040 809b 	bne.w	801077e <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 8010648:	4b36      	ldr	r3, [pc, #216]	; (8010724 <IBUS_Channel_Update+0x290>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2201      	movs	r2, #1
 801064e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 8010652:	4b34      	ldr	r3, [pc, #208]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010654:	6819      	ldr	r1, [r3, #0]
 8010656:	7cfa      	ldrb	r2, [r7, #19]
 8010658:	4b32      	ldr	r3, [pc, #200]	; (8010724 <IBUS_Channel_Update+0x290>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	440a      	add	r2, r1
 801065e:	7912      	ldrb	r2, [r2, #4]
 8010660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 8010664:	e08b      	b.n	801077e <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 8010666:	4b2f      	ldr	r3, [pc, #188]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010668:	681a      	ldr	r2, [r3, #0]
 801066a:	7cfb      	ldrb	r3, [r7, #19]
 801066c:	4413      	add	r3, r2
 801066e:	791b      	ldrb	r3, [r3, #4]
 8010670:	2b40      	cmp	r3, #64	; 0x40
 8010672:	d113      	bne.n	801069c <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 8010674:	4b2b      	ldr	r3, [pc, #172]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2202      	movs	r2, #2
 801067a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 801067e:	4b29      	ldr	r3, [pc, #164]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010680:	6819      	ldr	r1, [r3, #0]
 8010682:	7cfa      	ldrb	r2, [r7, #19]
 8010684:	4b27      	ldr	r3, [pc, #156]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	440a      	add	r2, r1
 801068a:	7912      	ldrb	r2, [r2, #4]
 801068c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 8010690:	4b24      	ldr	r3, [pc, #144]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2202      	movs	r2, #2
 8010696:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 801069a:	e072      	b.n	8010782 <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 801069c:	4b21      	ldr	r3, [pc, #132]	; (8010724 <IBUS_Channel_Update+0x290>)
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	7cfb      	ldrb	r3, [r7, #19]
 80106a2:	4413      	add	r3, r2
 80106a4:	791b      	ldrb	r3, [r3, #4]
 80106a6:	2b20      	cmp	r3, #32
 80106a8:	d06b      	beq.n	8010782 <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 80106aa:	4b1e      	ldr	r3, [pc, #120]	; (8010724 <IBUS_Channel_Update+0x290>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	2200      	movs	r2, #0
 80106b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 80106b4:	e065      	b.n	8010782 <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 80106b6:	4b1b      	ldr	r3, [pc, #108]	; (8010724 <IBUS_Channel_Update+0x290>)
 80106b8:	681c      	ldr	r4, [r3, #0]
 80106ba:	7cf8      	ldrb	r0, [r7, #19]
 80106bc:	4b19      	ldr	r3, [pc, #100]	; (8010724 <IBUS_Channel_Update+0x290>)
 80106be:	6819      	ldr	r1, [r3, #0]
 80106c0:	4b18      	ldr	r3, [pc, #96]	; (8010724 <IBUS_Channel_Update+0x290>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80106c8:	1c55      	adds	r5, r2, #1
 80106ca:	b2ad      	uxth	r5, r5
 80106cc:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 80106d0:	4615      	mov	r5, r2
 80106d2:	1823      	adds	r3, r4, r0
 80106d4:	791a      	ldrb	r2, [r3, #4]
 80106d6:	194b      	adds	r3, r1, r5
 80106d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 80106dc:	4b11      	ldr	r3, [pc, #68]	; (8010724 <IBUS_Channel_Update+0x290>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106e4:	2b20      	cmp	r3, #32
 80106e6:	d14e      	bne.n	8010786 <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 80106e8:	4b0e      	ldr	r3, [pc, #56]	; (8010724 <IBUS_Channel_Update+0x290>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80106f0:	461a      	mov	r2, r3
 80106f2:	4b0c      	ldr	r3, [pc, #48]	; (8010724 <IBUS_Channel_Update+0x290>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80106fa:	021b      	lsls	r3, r3, #8
 80106fc:	4313      	orrs	r3, r2
 80106fe:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 8010700:	4b08      	ldr	r3, [pc, #32]	; (8010724 <IBUS_Channel_Update+0x290>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	333d      	adds	r3, #61	; 0x3d
 8010706:	4618      	mov	r0, r3
 8010708:	f7ff fe4c 	bl	80103a4 <check_sum_f>
 801070c:	4603      	mov	r3, r0
 801070e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8010712:	33ff      	adds	r3, #255	; 0xff
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	429a      	cmp	r2, r3
 8010718:	d12b      	bne.n	8010772 <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 801071a:	2300      	movs	r3, #0
 801071c:	60fb      	str	r3, [r7, #12]
 801071e:	e023      	b.n	8010768 <IBUS_Channel_Update+0x2d4>
 8010720:	200026f0 	.word	0x200026f0
 8010724:	200026f4 	.word	0x200026f4
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 8010728:	4b1d      	ldr	r3, [pc, #116]	; (80107a0 <IBUS_Channel_Update+0x30c>)
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	3302      	adds	r3, #2
 8010730:	4413      	add	r3, r2
 8010732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010736:	b21a      	sxth	r2, r3
 8010738:	4b19      	ldr	r3, [pc, #100]	; (80107a0 <IBUS_Channel_Update+0x30c>)
 801073a:	6819      	ldr	r1, [r3, #0]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	3303      	adds	r3, #3
 8010740:	440b      	add	r3, r1
 8010742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010746:	021b      	lsls	r3, r3, #8
 8010748:	b21b      	sxth	r3, r3
 801074a:	4313      	orrs	r3, r2
 801074c:	b219      	sxth	r1, r3
 801074e:	4b14      	ldr	r3, [pc, #80]	; (80107a0 <IBUS_Channel_Update+0x30c>)
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	085b      	lsrs	r3, r3, #1
 8010756:	b289      	uxth	r1, r1
 8010758:	330c      	adds	r3, #12
 801075a:	005b      	lsls	r3, r3, #1
 801075c:	4413      	add	r3, r2
 801075e:	460a      	mov	r2, r1
 8010760:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	3302      	adds	r3, #2
 8010766:	60fb      	str	r3, [r7, #12]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b1b      	cmp	r3, #27
 801076c:	d9dc      	bls.n	8010728 <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 801076e:	2301      	movs	r3, #1
 8010770:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 8010772:	4b0b      	ldr	r3, [pc, #44]	; (80107a0 <IBUS_Channel_Update+0x30c>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	2200      	movs	r2, #0
 8010778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 801077c:	e003      	b.n	8010786 <IBUS_Channel_Update+0x2f2>
					break;
 801077e:	bf00      	nop
 8010780:	e002      	b.n	8010788 <IBUS_Channel_Update+0x2f4>
					break ;
 8010782:	bf00      	nop
 8010784:	e000      	b.n	8010788 <IBUS_Channel_Update+0x2f4>
					break;
 8010786:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 8010788:	7cfb      	ldrb	r3, [r7, #19]
 801078a:	3301      	adds	r3, #1
 801078c:	74fb      	strb	r3, [r7, #19]
 801078e:	7cfb      	ldrb	r3, [r7, #19]
 8010790:	2b13      	cmp	r3, #19
 8010792:	f67f af46 	bls.w	8010622 <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 8010796:	69fb      	ldr	r3, [r7, #28]
}
 8010798:	4618      	mov	r0, r3
 801079a:	3720      	adds	r7, #32
 801079c:	46bd      	mov	sp, r7
 801079e:	bdb0      	pop	{r4, r5, r7, pc}
 80107a0:	200026f4 	.word	0x200026f4

080107a4 <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
 80107b0:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	687a      	ldr	r2, [r7, #4]
 80107bc:	609a      	str	r2, [r3, #8]
	if(start){
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d022      	beq.n	801080a <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2201      	movs	r2, #1
 80107c8:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80107ca:	2100      	movs	r1, #0
 80107cc:	68b8      	ldr	r0, [r7, #8]
 80107ce:	f7fd fcc9 	bl	800e164 <HAL_TIM_PWM_Start>
 80107d2:	4603      	mov	r3, r0
 80107d4:	461a      	mov	r2, r3
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 80107da:	2104      	movs	r1, #4
 80107dc:	68b8      	ldr	r0, [r7, #8]
 80107de:	f7fd fcc1 	bl	800e164 <HAL_TIM_PWM_Start>
 80107e2:	4603      	mov	r3, r0
 80107e4:	461a      	mov	r2, r3
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 80107ea:	2108      	movs	r1, #8
 80107ec:	68b8      	ldr	r0, [r7, #8]
 80107ee:	f7fd fcb9 	bl	800e164 <HAL_TIM_PWM_Start>
 80107f2:	4603      	mov	r3, r0
 80107f4:	461a      	mov	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80107fa:	210c      	movs	r1, #12
 80107fc:	68b8      	ldr	r0, [r7, #8]
 80107fe:	f7fd fcb1 	bl	800e164 <HAL_TIM_PWM_Start>
 8010802:	4603      	mov	r3, r0
 8010804:	461a      	mov	r2, r3
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	731a      	strb	r2, [r3, #12]
	}
}
 801080a:	bf00      	nop
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 8010812:	b480      	push	{r7}
 8010814:	b083      	sub	sp, #12
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	881a      	ldrh	r2, [r3, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	689b      	ldr	r3, [r3, #8]
 8010824:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010828:	bf28      	it	cs
 801082a:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 801082e:	b292      	uxth	r2, r2
 8010830:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	689b      	ldr	r3, [r3, #8]
 8010836:	3302      	adds	r3, #2
 8010838:	881a      	ldrh	r2, [r3, #0]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	3302      	adds	r3, #2
 8010840:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010844:	bf28      	it	cs
 8010846:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 801084a:	b292      	uxth	r2, r2
 801084c:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	689b      	ldr	r3, [r3, #8]
 8010852:	3304      	adds	r3, #4
 8010854:	881a      	ldrh	r2, [r3, #0]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	689b      	ldr	r3, [r3, #8]
 801085a:	3304      	adds	r3, #4
 801085c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010860:	bf28      	it	cs
 8010862:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8010866:	b292      	uxth	r2, r2
 8010868:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	3306      	adds	r3, #6
 8010870:	881a      	ldrh	r2, [r3, #0]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	689b      	ldr	r3, [r3, #8]
 8010876:	3306      	adds	r3, #6
 8010878:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801087c:	bf28      	it	cs
 801087e:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8010882:	b292      	uxth	r2, r2
 8010884:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	881b      	ldrh	r3, [r3, #0]
 801088c:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	3302      	adds	r3, #2
 801089e:	881b      	ldrh	r3, [r3, #0]
 80108a0:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	3304      	adds	r3, #4
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	3306      	adds	r3, #6
 80108c6:	881b      	ldrh	r3, [r3, #0]
 80108c8:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80108d4:	bf00      	nop
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80108ec:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 80108f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80108f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80108f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	ed93 7a04 	vldr	s14, [r3, #16]
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801090e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	ed93 7a02 	vldr	s14, [r3, #8]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	edd3 6a05 	vldr	s13, [r3, #20]
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801092a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	edd3 6a07 	vldr	s13, [r3, #28]
 8010934:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010938:	ee77 7a27 	vadd.f32	s15, s14, s15
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	ed93 7a06 	vldr	s14, [r3, #24]
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801094e:	edd7 6a01 	vldr	s13, [r7, #4]
 8010952:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010956:	ee27 7a27 	vmul.f32	s14, s14, s15
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	edd3 7a07 	vldr	s15, [r3, #28]
 8010960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	edd3 7a03 	vldr	s15, [r3, #12]
 8010976:	eeb0 0a67 	vmov.f32	s0, s15
 801097a:	4610      	mov	r0, r2
 801097c:	f7ff fcab 	bl	80102d6 <FILTER_process>
 8010980:	eef0 7a40 	vmov.f32	s15, s0
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	ed93 7a01 	vldr	s14, [r3, #4]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	edd3 7a02 	vldr	s15, [r3, #8]
 8010996:	ee37 7a27 	vadd.f32	s14, s14, s15
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	edd3 7a03 	vldr	s15, [r3, #12]
 80109a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	edd3 7a00 	vldr	s15, [r3]
 80109b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109be:	dd02      	ble.n	80109c6 <PID_compute+0xe6>
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	e001      	b.n	80109ca <PID_compute+0xea>
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6a1b      	ldr	r3, [r3, #32]
 80109ca:	68fa      	ldr	r2, [r7, #12]
 80109cc:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80109d4:	eeb1 7a67 	vneg.f32	s14, s15
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	edd3 7a00 	vldr	s15, [r3]
 80109de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e6:	dd05      	ble.n	80109f4 <PID_compute+0x114>
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80109ee:	eef1 7a67 	vneg.f32	s15, s15
 80109f2:	e002      	b.n	80109fa <PID_compute+0x11a>
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	edd3 7a00 	vldr	s15, [r3]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	ee07 3a90 	vmov	s15, r3
}
 8010a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8010a12:	3710      	adds	r7, #16
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}

08010a18 <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	603b      	str	r3, [r7, #0]
 8010a24:	4613      	mov	r3, r2
 8010a26:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 8010a28:	2300      	movs	r3, #0
 8010a2a:	75fb      	strb	r3, [r7, #23]
 8010a2c:	e00d      	b.n	8010a4a <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 8010a2e:	7dfb      	ldrb	r3, [r7, #23]
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	68ba      	ldr	r2, [r7, #8]
 8010a34:	441a      	add	r2, r3
 8010a36:	7dfb      	ldrb	r3, [r7, #23]
 8010a38:	6812      	ldr	r2, [r2, #0]
 8010a3a:	68f9      	ldr	r1, [r7, #12]
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	440b      	add	r3, r1
 8010a42:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 8010a44:	7dfb      	ldrb	r3, [r7, #23]
 8010a46:	3301      	adds	r3, #1
 8010a48:	75fb      	strb	r3, [r7, #23]
 8010a4a:	7dfb      	ldrb	r3, [r7, #23]
 8010a4c:	2b04      	cmp	r3, #4
 8010a4e:	d9ee      	bls.n	8010a2e <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f04f 0200 	mov.w	r2, #0
 8010a56:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f04f 0200 	mov.w	r2, #0
 8010a5e:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f04f 0200 	mov.w	r2, #0
 8010a66:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	332c      	adds	r3, #44	; 0x2c
 8010a6c:	79fa      	ldrb	r2, [r7, #7]
 8010a6e:	6839      	ldr	r1, [r7, #0]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7ff fc0d 	bl	8010290 <FILTER_init>
}
 8010a76:	bf00      	nop
 8010a78:	3718      	adds	r7, #24
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
	...

08010a80 <set_arr_from_frequency>:
uint16_t sequences_len[SEQUENCE_NOTES_COUNT] = {
		[SEQUENCE_NOTES_1]  = 6
};

static void set_arr_from_frequency(buzzer_t * buzzer,  int32_t desired_frequency);
static void set_arr_from_frequency(buzzer_t * buzzer,  int32_t desired_frequency){
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
	if(!desired_frequency){
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d10a      	bne.n	8010aa6 <set_arr_from_frequency+0x26>
		buzzer->hal_state = HAL_TIM_PWM_Stop(buzzer->htim, TIM_CHANNEL_1);
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2100      	movs	r1, #0
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fd fba2 	bl	800e1e0 <HAL_TIM_PWM_Stop>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	461a      	mov	r2, r3
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	711a      	strb	r2, [r3, #4]
		buzzer->htim->Instance->CCR1 = value / 5;
		buzzer->htim->Instance->ARR = value;
		buzzer->hal_state = HAL_TIM_PWM_Start(buzzer->htim, TIM_CHANNEL_1);
	}

}
 8010aa4:	e028      	b.n	8010af8 <set_arr_from_frequency+0x78>
		int32_t tick_frequency = 180000000 / (buzzer->htim->Instance->PSC+1);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aae:	3301      	adds	r3, #1
 8010ab0:	4a13      	ldr	r2, [pc, #76]	; (8010b00 <set_arr_from_frequency+0x80>)
 8010ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ab6:	60fb      	str	r3, [r7, #12]
		int32_t value = (tick_frequency / desired_frequency) - 1 ;
 8010ab8:	68fa      	ldr	r2, [r7, #12]
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8010ac0:	3b01      	subs	r3, #1
 8010ac2:	60bb      	str	r3, [r7, #8]
		buzzer->htim->Instance->CCR1 = value / 5;
 8010ac4:	68bb      	ldr	r3, [r7, #8]
 8010ac6:	4a0f      	ldr	r2, [pc, #60]	; (8010b04 <set_arr_from_frequency+0x84>)
 8010ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8010acc:	1052      	asrs	r2, r2, #1
 8010ace:	17db      	asrs	r3, r3, #31
 8010ad0:	1ad2      	subs	r2, r2, r3
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	635a      	str	r2, [r3, #52]	; 0x34
		buzzer->htim->Instance->ARR = value;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	68ba      	ldr	r2, [r7, #8]
 8010ae2:	62da      	str	r2, [r3, #44]	; 0x2c
		buzzer->hal_state = HAL_TIM_PWM_Start(buzzer->htim, TIM_CHANNEL_1);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	2100      	movs	r1, #0
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fd fb3a 	bl	800e164 <HAL_TIM_PWM_Start>
 8010af0:	4603      	mov	r3, r0
 8010af2:	461a      	mov	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	711a      	strb	r2, [r3, #4]
}
 8010af8:	bf00      	nop
 8010afa:	3710      	adds	r7, #16
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}
 8010b00:	0aba9500 	.word	0x0aba9500
 8010b04:	66666667 	.word	0x66666667

08010b08 <BUZZER_Init>:


void BUZZER_Init(buzzer_t * buzzer, TIM_HandleTypeDef * htim){
 8010b08:	b480      	push	{r7}
 8010b0a:	b083      	sub	sp, #12
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
	buzzer->htim = htim;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	601a      	str	r2, [r3, #0]
	buzzer->current_seq = 0 ;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	715a      	strb	r2, [r3, #5]
}
 8010b1e:	bf00      	nop
 8010b20:	370c      	adds	r7, #12
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
	...

08010b2c <BUZZER_Update>:
}
void BUZZER_Stop(buzzer_t * buzzer){
	buzzer->hal_state = HAL_TIM_PWM_Stop(buzzer->htim, TIM_CHANNEL_1);
}

void BUZZER_Update(buzzer_t * buzzer){
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
	buzzer->counter++;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	891b      	ldrh	r3, [r3, #8]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	811a      	strh	r2, [r3, #8]
	buzzer->counter = buzzer->counter % 20 ;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	891a      	ldrh	r2, [r3, #8]
 8010b44:	4b1b      	ldr	r3, [pc, #108]	; (8010bb4 <BUZZER_Update+0x88>)
 8010b46:	fba3 1302 	umull	r1, r3, r3, r2
 8010b4a:	0919      	lsrs	r1, r3, #4
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	009b      	lsls	r3, r3, #2
 8010b50:	440b      	add	r3, r1
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	1ad3      	subs	r3, r2, r3
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	811a      	strh	r2, [r3, #8]

	if(!buzzer->counter){
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	891b      	ldrh	r3, [r3, #8]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d122      	bne.n	8010baa <BUZZER_Update+0x7e>
		set_arr_from_frequency(buzzer, sequences[buzzer->current_seq][buzzer->index++]);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	795b      	ldrb	r3, [r3, #5]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	799b      	ldrb	r3, [r3, #6]
 8010b6e:	1c5a      	adds	r2, r3, #1
 8010b70:	b2d1      	uxtb	r1, r2
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	7191      	strb	r1, [r2, #6]
 8010b76:	4619      	mov	r1, r3
 8010b78:	4a0f      	ldr	r2, [pc, #60]	; (8010bb8 <BUZZER_Update+0x8c>)
 8010b7a:	00c3      	lsls	r3, r0, #3
 8010b7c:	440b      	add	r3, r1
 8010b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b82:	4619      	mov	r1, r3
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7ff ff7b 	bl	8010a80 <set_arr_from_frequency>
		buzzer->index = buzzer->index % sequences_len[buzzer->current_seq];
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	799b      	ldrb	r3, [r3, #6]
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	7952      	ldrb	r2, [r2, #5]
 8010b92:	4611      	mov	r1, r2
 8010b94:	4a09      	ldr	r2, [pc, #36]	; (8010bbc <BUZZER_Update+0x90>)
 8010b96:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010b9a:	fb93 f1f2 	sdiv	r1, r3, r2
 8010b9e:	fb02 f201 	mul.w	r2, r2, r1
 8010ba2:	1a9b      	subs	r3, r3, r2
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	719a      	strb	r2, [r3, #6]
	}
}
 8010baa:	bf00      	nop
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	cccccccd 	.word	0xcccccccd
 8010bb8:	20001d98 	.word	0x20001d98
 8010bbc:	20001da8 	.word	0x20001da8

08010bc0 <__errno>:
 8010bc0:	4b01      	ldr	r3, [pc, #4]	; (8010bc8 <__errno+0x8>)
 8010bc2:	6818      	ldr	r0, [r3, #0]
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	20001dac 	.word	0x20001dac

08010bcc <__libc_init_array>:
 8010bcc:	b570      	push	{r4, r5, r6, lr}
 8010bce:	4e0d      	ldr	r6, [pc, #52]	; (8010c04 <__libc_init_array+0x38>)
 8010bd0:	4c0d      	ldr	r4, [pc, #52]	; (8010c08 <__libc_init_array+0x3c>)
 8010bd2:	1ba4      	subs	r4, r4, r6
 8010bd4:	10a4      	asrs	r4, r4, #2
 8010bd6:	2500      	movs	r5, #0
 8010bd8:	42a5      	cmp	r5, r4
 8010bda:	d109      	bne.n	8010bf0 <__libc_init_array+0x24>
 8010bdc:	4e0b      	ldr	r6, [pc, #44]	; (8010c0c <__libc_init_array+0x40>)
 8010bde:	4c0c      	ldr	r4, [pc, #48]	; (8010c10 <__libc_init_array+0x44>)
 8010be0:	f004 f82a 	bl	8014c38 <_init>
 8010be4:	1ba4      	subs	r4, r4, r6
 8010be6:	10a4      	asrs	r4, r4, #2
 8010be8:	2500      	movs	r5, #0
 8010bea:	42a5      	cmp	r5, r4
 8010bec:	d105      	bne.n	8010bfa <__libc_init_array+0x2e>
 8010bee:	bd70      	pop	{r4, r5, r6, pc}
 8010bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010bf4:	4798      	blx	r3
 8010bf6:	3501      	adds	r5, #1
 8010bf8:	e7ee      	b.n	8010bd8 <__libc_init_array+0xc>
 8010bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010bfe:	4798      	blx	r3
 8010c00:	3501      	adds	r5, #1
 8010c02:	e7f2      	b.n	8010bea <__libc_init_array+0x1e>
 8010c04:	08015364 	.word	0x08015364
 8010c08:	08015364 	.word	0x08015364
 8010c0c:	08015364 	.word	0x08015364
 8010c10:	08015368 	.word	0x08015368

08010c14 <memcpy>:
 8010c14:	b510      	push	{r4, lr}
 8010c16:	1e43      	subs	r3, r0, #1
 8010c18:	440a      	add	r2, r1
 8010c1a:	4291      	cmp	r1, r2
 8010c1c:	d100      	bne.n	8010c20 <memcpy+0xc>
 8010c1e:	bd10      	pop	{r4, pc}
 8010c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c28:	e7f7      	b.n	8010c1a <memcpy+0x6>

08010c2a <memmove>:
 8010c2a:	4288      	cmp	r0, r1
 8010c2c:	b510      	push	{r4, lr}
 8010c2e:	eb01 0302 	add.w	r3, r1, r2
 8010c32:	d807      	bhi.n	8010c44 <memmove+0x1a>
 8010c34:	1e42      	subs	r2, r0, #1
 8010c36:	4299      	cmp	r1, r3
 8010c38:	d00a      	beq.n	8010c50 <memmove+0x26>
 8010c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010c42:	e7f8      	b.n	8010c36 <memmove+0xc>
 8010c44:	4283      	cmp	r3, r0
 8010c46:	d9f5      	bls.n	8010c34 <memmove+0xa>
 8010c48:	1881      	adds	r1, r0, r2
 8010c4a:	1ad2      	subs	r2, r2, r3
 8010c4c:	42d3      	cmn	r3, r2
 8010c4e:	d100      	bne.n	8010c52 <memmove+0x28>
 8010c50:	bd10      	pop	{r4, pc}
 8010c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010c5a:	e7f7      	b.n	8010c4c <memmove+0x22>

08010c5c <memset>:
 8010c5c:	4402      	add	r2, r0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d100      	bne.n	8010c66 <memset+0xa>
 8010c64:	4770      	bx	lr
 8010c66:	f803 1b01 	strb.w	r1, [r3], #1
 8010c6a:	e7f9      	b.n	8010c60 <memset+0x4>

08010c6c <__cvt>:
 8010c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c70:	ec55 4b10 	vmov	r4, r5, d0
 8010c74:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010c76:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010c7a:	2d00      	cmp	r5, #0
 8010c7c:	460e      	mov	r6, r1
 8010c7e:	4691      	mov	r9, r2
 8010c80:	4619      	mov	r1, r3
 8010c82:	bfb8      	it	lt
 8010c84:	4622      	movlt	r2, r4
 8010c86:	462b      	mov	r3, r5
 8010c88:	f027 0720 	bic.w	r7, r7, #32
 8010c8c:	bfbb      	ittet	lt
 8010c8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010c92:	461d      	movlt	r5, r3
 8010c94:	2300      	movge	r3, #0
 8010c96:	232d      	movlt	r3, #45	; 0x2d
 8010c98:	bfb8      	it	lt
 8010c9a:	4614      	movlt	r4, r2
 8010c9c:	2f46      	cmp	r7, #70	; 0x46
 8010c9e:	700b      	strb	r3, [r1, #0]
 8010ca0:	d004      	beq.n	8010cac <__cvt+0x40>
 8010ca2:	2f45      	cmp	r7, #69	; 0x45
 8010ca4:	d100      	bne.n	8010ca8 <__cvt+0x3c>
 8010ca6:	3601      	adds	r6, #1
 8010ca8:	2102      	movs	r1, #2
 8010caa:	e000      	b.n	8010cae <__cvt+0x42>
 8010cac:	2103      	movs	r1, #3
 8010cae:	ab03      	add	r3, sp, #12
 8010cb0:	9301      	str	r3, [sp, #4]
 8010cb2:	ab02      	add	r3, sp, #8
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	4632      	mov	r2, r6
 8010cb8:	4653      	mov	r3, sl
 8010cba:	ec45 4b10 	vmov	d0, r4, r5
 8010cbe:	f000 fea7 	bl	8011a10 <_dtoa_r>
 8010cc2:	2f47      	cmp	r7, #71	; 0x47
 8010cc4:	4680      	mov	r8, r0
 8010cc6:	d102      	bne.n	8010cce <__cvt+0x62>
 8010cc8:	f019 0f01 	tst.w	r9, #1
 8010ccc:	d026      	beq.n	8010d1c <__cvt+0xb0>
 8010cce:	2f46      	cmp	r7, #70	; 0x46
 8010cd0:	eb08 0906 	add.w	r9, r8, r6
 8010cd4:	d111      	bne.n	8010cfa <__cvt+0x8e>
 8010cd6:	f898 3000 	ldrb.w	r3, [r8]
 8010cda:	2b30      	cmp	r3, #48	; 0x30
 8010cdc:	d10a      	bne.n	8010cf4 <__cvt+0x88>
 8010cde:	2200      	movs	r2, #0
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	f7ef feef 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cea:	b918      	cbnz	r0, 8010cf4 <__cvt+0x88>
 8010cec:	f1c6 0601 	rsb	r6, r6, #1
 8010cf0:	f8ca 6000 	str.w	r6, [sl]
 8010cf4:	f8da 3000 	ldr.w	r3, [sl]
 8010cf8:	4499      	add	r9, r3
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	4620      	mov	r0, r4
 8010d00:	4629      	mov	r1, r5
 8010d02:	f7ef fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d06:	b938      	cbnz	r0, 8010d18 <__cvt+0xac>
 8010d08:	2230      	movs	r2, #48	; 0x30
 8010d0a:	9b03      	ldr	r3, [sp, #12]
 8010d0c:	454b      	cmp	r3, r9
 8010d0e:	d205      	bcs.n	8010d1c <__cvt+0xb0>
 8010d10:	1c59      	adds	r1, r3, #1
 8010d12:	9103      	str	r1, [sp, #12]
 8010d14:	701a      	strb	r2, [r3, #0]
 8010d16:	e7f8      	b.n	8010d0a <__cvt+0x9e>
 8010d18:	f8cd 900c 	str.w	r9, [sp, #12]
 8010d1c:	9b03      	ldr	r3, [sp, #12]
 8010d1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d20:	eba3 0308 	sub.w	r3, r3, r8
 8010d24:	4640      	mov	r0, r8
 8010d26:	6013      	str	r3, [r2, #0]
 8010d28:	b004      	add	sp, #16
 8010d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010d2e <__exponent>:
 8010d2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d30:	2900      	cmp	r1, #0
 8010d32:	4604      	mov	r4, r0
 8010d34:	bfba      	itte	lt
 8010d36:	4249      	neglt	r1, r1
 8010d38:	232d      	movlt	r3, #45	; 0x2d
 8010d3a:	232b      	movge	r3, #43	; 0x2b
 8010d3c:	2909      	cmp	r1, #9
 8010d3e:	f804 2b02 	strb.w	r2, [r4], #2
 8010d42:	7043      	strb	r3, [r0, #1]
 8010d44:	dd20      	ble.n	8010d88 <__exponent+0x5a>
 8010d46:	f10d 0307 	add.w	r3, sp, #7
 8010d4a:	461f      	mov	r7, r3
 8010d4c:	260a      	movs	r6, #10
 8010d4e:	fb91 f5f6 	sdiv	r5, r1, r6
 8010d52:	fb06 1115 	mls	r1, r6, r5, r1
 8010d56:	3130      	adds	r1, #48	; 0x30
 8010d58:	2d09      	cmp	r5, #9
 8010d5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8010d62:	4629      	mov	r1, r5
 8010d64:	dc09      	bgt.n	8010d7a <__exponent+0x4c>
 8010d66:	3130      	adds	r1, #48	; 0x30
 8010d68:	3b02      	subs	r3, #2
 8010d6a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010d6e:	42bb      	cmp	r3, r7
 8010d70:	4622      	mov	r2, r4
 8010d72:	d304      	bcc.n	8010d7e <__exponent+0x50>
 8010d74:	1a10      	subs	r0, r2, r0
 8010d76:	b003      	add	sp, #12
 8010d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d7a:	4613      	mov	r3, r2
 8010d7c:	e7e7      	b.n	8010d4e <__exponent+0x20>
 8010d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d82:	f804 2b01 	strb.w	r2, [r4], #1
 8010d86:	e7f2      	b.n	8010d6e <__exponent+0x40>
 8010d88:	2330      	movs	r3, #48	; 0x30
 8010d8a:	4419      	add	r1, r3
 8010d8c:	7083      	strb	r3, [r0, #2]
 8010d8e:	1d02      	adds	r2, r0, #4
 8010d90:	70c1      	strb	r1, [r0, #3]
 8010d92:	e7ef      	b.n	8010d74 <__exponent+0x46>

08010d94 <_printf_float>:
 8010d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d98:	b08d      	sub	sp, #52	; 0x34
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010da0:	4616      	mov	r6, r2
 8010da2:	461f      	mov	r7, r3
 8010da4:	4605      	mov	r5, r0
 8010da6:	f001 fd65 	bl	8012874 <_localeconv_r>
 8010daa:	6803      	ldr	r3, [r0, #0]
 8010dac:	9304      	str	r3, [sp, #16]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7ef fa0e 	bl	80001d0 <strlen>
 8010db4:	2300      	movs	r3, #0
 8010db6:	930a      	str	r3, [sp, #40]	; 0x28
 8010db8:	f8d8 3000 	ldr.w	r3, [r8]
 8010dbc:	9005      	str	r0, [sp, #20]
 8010dbe:	3307      	adds	r3, #7
 8010dc0:	f023 0307 	bic.w	r3, r3, #7
 8010dc4:	f103 0208 	add.w	r2, r3, #8
 8010dc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010dcc:	f8d4 b000 	ldr.w	fp, [r4]
 8010dd0:	f8c8 2000 	str.w	r2, [r8]
 8010dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010ddc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010de0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010de4:	9307      	str	r3, [sp, #28]
 8010de6:	f8cd 8018 	str.w	r8, [sp, #24]
 8010dea:	f04f 32ff 	mov.w	r2, #4294967295
 8010dee:	4ba7      	ldr	r3, [pc, #668]	; (801108c <_printf_float+0x2f8>)
 8010df0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010df4:	f7ef fe9a 	bl	8000b2c <__aeabi_dcmpun>
 8010df8:	bb70      	cbnz	r0, 8010e58 <_printf_float+0xc4>
 8010dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8010dfe:	4ba3      	ldr	r3, [pc, #652]	; (801108c <_printf_float+0x2f8>)
 8010e00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010e04:	f7ef fe74 	bl	8000af0 <__aeabi_dcmple>
 8010e08:	bb30      	cbnz	r0, 8010e58 <_printf_float+0xc4>
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	4640      	mov	r0, r8
 8010e10:	4649      	mov	r1, r9
 8010e12:	f7ef fe63 	bl	8000adc <__aeabi_dcmplt>
 8010e16:	b110      	cbz	r0, 8010e1e <_printf_float+0x8a>
 8010e18:	232d      	movs	r3, #45	; 0x2d
 8010e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e1e:	4a9c      	ldr	r2, [pc, #624]	; (8011090 <_printf_float+0x2fc>)
 8010e20:	4b9c      	ldr	r3, [pc, #624]	; (8011094 <_printf_float+0x300>)
 8010e22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010e26:	bf8c      	ite	hi
 8010e28:	4690      	movhi	r8, r2
 8010e2a:	4698      	movls	r8, r3
 8010e2c:	2303      	movs	r3, #3
 8010e2e:	f02b 0204 	bic.w	r2, fp, #4
 8010e32:	6123      	str	r3, [r4, #16]
 8010e34:	6022      	str	r2, [r4, #0]
 8010e36:	f04f 0900 	mov.w	r9, #0
 8010e3a:	9700      	str	r7, [sp, #0]
 8010e3c:	4633      	mov	r3, r6
 8010e3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010e40:	4621      	mov	r1, r4
 8010e42:	4628      	mov	r0, r5
 8010e44:	f000 f9e6 	bl	8011214 <_printf_common>
 8010e48:	3001      	adds	r0, #1
 8010e4a:	f040 808d 	bne.w	8010f68 <_printf_float+0x1d4>
 8010e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e52:	b00d      	add	sp, #52	; 0x34
 8010e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e58:	4642      	mov	r2, r8
 8010e5a:	464b      	mov	r3, r9
 8010e5c:	4640      	mov	r0, r8
 8010e5e:	4649      	mov	r1, r9
 8010e60:	f7ef fe64 	bl	8000b2c <__aeabi_dcmpun>
 8010e64:	b110      	cbz	r0, 8010e6c <_printf_float+0xd8>
 8010e66:	4a8c      	ldr	r2, [pc, #560]	; (8011098 <_printf_float+0x304>)
 8010e68:	4b8c      	ldr	r3, [pc, #560]	; (801109c <_printf_float+0x308>)
 8010e6a:	e7da      	b.n	8010e22 <_printf_float+0x8e>
 8010e6c:	6861      	ldr	r1, [r4, #4]
 8010e6e:	1c4b      	adds	r3, r1, #1
 8010e70:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010e74:	a80a      	add	r0, sp, #40	; 0x28
 8010e76:	d13e      	bne.n	8010ef6 <_printf_float+0x162>
 8010e78:	2306      	movs	r3, #6
 8010e7a:	6063      	str	r3, [r4, #4]
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010e82:	ab09      	add	r3, sp, #36	; 0x24
 8010e84:	9300      	str	r3, [sp, #0]
 8010e86:	ec49 8b10 	vmov	d0, r8, r9
 8010e8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010e8e:	6022      	str	r2, [r4, #0]
 8010e90:	f8cd a004 	str.w	sl, [sp, #4]
 8010e94:	6861      	ldr	r1, [r4, #4]
 8010e96:	4628      	mov	r0, r5
 8010e98:	f7ff fee8 	bl	8010c6c <__cvt>
 8010e9c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010ea0:	2b47      	cmp	r3, #71	; 0x47
 8010ea2:	4680      	mov	r8, r0
 8010ea4:	d109      	bne.n	8010eba <_printf_float+0x126>
 8010ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea8:	1cd8      	adds	r0, r3, #3
 8010eaa:	db02      	blt.n	8010eb2 <_printf_float+0x11e>
 8010eac:	6862      	ldr	r2, [r4, #4]
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	dd47      	ble.n	8010f42 <_printf_float+0x1ae>
 8010eb2:	f1aa 0a02 	sub.w	sl, sl, #2
 8010eb6:	fa5f fa8a 	uxtb.w	sl, sl
 8010eba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010ebe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ec0:	d824      	bhi.n	8010f0c <_printf_float+0x178>
 8010ec2:	3901      	subs	r1, #1
 8010ec4:	4652      	mov	r2, sl
 8010ec6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010eca:	9109      	str	r1, [sp, #36]	; 0x24
 8010ecc:	f7ff ff2f 	bl	8010d2e <__exponent>
 8010ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010ed2:	1813      	adds	r3, r2, r0
 8010ed4:	2a01      	cmp	r2, #1
 8010ed6:	4681      	mov	r9, r0
 8010ed8:	6123      	str	r3, [r4, #16]
 8010eda:	dc02      	bgt.n	8010ee2 <_printf_float+0x14e>
 8010edc:	6822      	ldr	r2, [r4, #0]
 8010ede:	07d1      	lsls	r1, r2, #31
 8010ee0:	d501      	bpl.n	8010ee6 <_printf_float+0x152>
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	6123      	str	r3, [r4, #16]
 8010ee6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d0a5      	beq.n	8010e3a <_printf_float+0xa6>
 8010eee:	232d      	movs	r3, #45	; 0x2d
 8010ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ef4:	e7a1      	b.n	8010e3a <_printf_float+0xa6>
 8010ef6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010efa:	f000 8177 	beq.w	80111ec <_printf_float+0x458>
 8010efe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010f02:	d1bb      	bne.n	8010e7c <_printf_float+0xe8>
 8010f04:	2900      	cmp	r1, #0
 8010f06:	d1b9      	bne.n	8010e7c <_printf_float+0xe8>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	e7b6      	b.n	8010e7a <_printf_float+0xe6>
 8010f0c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010f10:	d119      	bne.n	8010f46 <_printf_float+0x1b2>
 8010f12:	2900      	cmp	r1, #0
 8010f14:	6863      	ldr	r3, [r4, #4]
 8010f16:	dd0c      	ble.n	8010f32 <_printf_float+0x19e>
 8010f18:	6121      	str	r1, [r4, #16]
 8010f1a:	b913      	cbnz	r3, 8010f22 <_printf_float+0x18e>
 8010f1c:	6822      	ldr	r2, [r4, #0]
 8010f1e:	07d2      	lsls	r2, r2, #31
 8010f20:	d502      	bpl.n	8010f28 <_printf_float+0x194>
 8010f22:	3301      	adds	r3, #1
 8010f24:	440b      	add	r3, r1
 8010f26:	6123      	str	r3, [r4, #16]
 8010f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8010f2c:	f04f 0900 	mov.w	r9, #0
 8010f30:	e7d9      	b.n	8010ee6 <_printf_float+0x152>
 8010f32:	b913      	cbnz	r3, 8010f3a <_printf_float+0x1a6>
 8010f34:	6822      	ldr	r2, [r4, #0]
 8010f36:	07d0      	lsls	r0, r2, #31
 8010f38:	d501      	bpl.n	8010f3e <_printf_float+0x1aa>
 8010f3a:	3302      	adds	r3, #2
 8010f3c:	e7f3      	b.n	8010f26 <_printf_float+0x192>
 8010f3e:	2301      	movs	r3, #1
 8010f40:	e7f1      	b.n	8010f26 <_printf_float+0x192>
 8010f42:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010f46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	db05      	blt.n	8010f5a <_printf_float+0x1c6>
 8010f4e:	6822      	ldr	r2, [r4, #0]
 8010f50:	6123      	str	r3, [r4, #16]
 8010f52:	07d1      	lsls	r1, r2, #31
 8010f54:	d5e8      	bpl.n	8010f28 <_printf_float+0x194>
 8010f56:	3301      	adds	r3, #1
 8010f58:	e7e5      	b.n	8010f26 <_printf_float+0x192>
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	bfd4      	ite	le
 8010f5e:	f1c3 0302 	rsble	r3, r3, #2
 8010f62:	2301      	movgt	r3, #1
 8010f64:	4413      	add	r3, r2
 8010f66:	e7de      	b.n	8010f26 <_printf_float+0x192>
 8010f68:	6823      	ldr	r3, [r4, #0]
 8010f6a:	055a      	lsls	r2, r3, #21
 8010f6c:	d407      	bmi.n	8010f7e <_printf_float+0x1ea>
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	4642      	mov	r2, r8
 8010f72:	4631      	mov	r1, r6
 8010f74:	4628      	mov	r0, r5
 8010f76:	47b8      	blx	r7
 8010f78:	3001      	adds	r0, #1
 8010f7a:	d12b      	bne.n	8010fd4 <_printf_float+0x240>
 8010f7c:	e767      	b.n	8010e4e <_printf_float+0xba>
 8010f7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010f82:	f240 80dc 	bls.w	801113e <_printf_float+0x3aa>
 8010f86:	2200      	movs	r2, #0
 8010f88:	2300      	movs	r3, #0
 8010f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010f8e:	f7ef fd9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f92:	2800      	cmp	r0, #0
 8010f94:	d033      	beq.n	8010ffe <_printf_float+0x26a>
 8010f96:	2301      	movs	r3, #1
 8010f98:	4a41      	ldr	r2, [pc, #260]	; (80110a0 <_printf_float+0x30c>)
 8010f9a:	4631      	mov	r1, r6
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	47b8      	blx	r7
 8010fa0:	3001      	adds	r0, #1
 8010fa2:	f43f af54 	beq.w	8010e4e <_printf_float+0xba>
 8010fa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010faa:	429a      	cmp	r2, r3
 8010fac:	db02      	blt.n	8010fb4 <_printf_float+0x220>
 8010fae:	6823      	ldr	r3, [r4, #0]
 8010fb0:	07d8      	lsls	r0, r3, #31
 8010fb2:	d50f      	bpl.n	8010fd4 <_printf_float+0x240>
 8010fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fb8:	4631      	mov	r1, r6
 8010fba:	4628      	mov	r0, r5
 8010fbc:	47b8      	blx	r7
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f43f af45 	beq.w	8010e4e <_printf_float+0xba>
 8010fc4:	f04f 0800 	mov.w	r8, #0
 8010fc8:	f104 091a 	add.w	r9, r4, #26
 8010fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	4543      	cmp	r3, r8
 8010fd2:	dc09      	bgt.n	8010fe8 <_printf_float+0x254>
 8010fd4:	6823      	ldr	r3, [r4, #0]
 8010fd6:	079b      	lsls	r3, r3, #30
 8010fd8:	f100 8103 	bmi.w	80111e2 <_printf_float+0x44e>
 8010fdc:	68e0      	ldr	r0, [r4, #12]
 8010fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fe0:	4298      	cmp	r0, r3
 8010fe2:	bfb8      	it	lt
 8010fe4:	4618      	movlt	r0, r3
 8010fe6:	e734      	b.n	8010e52 <_printf_float+0xbe>
 8010fe8:	2301      	movs	r3, #1
 8010fea:	464a      	mov	r2, r9
 8010fec:	4631      	mov	r1, r6
 8010fee:	4628      	mov	r0, r5
 8010ff0:	47b8      	blx	r7
 8010ff2:	3001      	adds	r0, #1
 8010ff4:	f43f af2b 	beq.w	8010e4e <_printf_float+0xba>
 8010ff8:	f108 0801 	add.w	r8, r8, #1
 8010ffc:	e7e6      	b.n	8010fcc <_printf_float+0x238>
 8010ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011000:	2b00      	cmp	r3, #0
 8011002:	dc2b      	bgt.n	801105c <_printf_float+0x2c8>
 8011004:	2301      	movs	r3, #1
 8011006:	4a26      	ldr	r2, [pc, #152]	; (80110a0 <_printf_float+0x30c>)
 8011008:	4631      	mov	r1, r6
 801100a:	4628      	mov	r0, r5
 801100c:	47b8      	blx	r7
 801100e:	3001      	adds	r0, #1
 8011010:	f43f af1d 	beq.w	8010e4e <_printf_float+0xba>
 8011014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011016:	b923      	cbnz	r3, 8011022 <_printf_float+0x28e>
 8011018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801101a:	b913      	cbnz	r3, 8011022 <_printf_float+0x28e>
 801101c:	6823      	ldr	r3, [r4, #0]
 801101e:	07d9      	lsls	r1, r3, #31
 8011020:	d5d8      	bpl.n	8010fd4 <_printf_float+0x240>
 8011022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011026:	4631      	mov	r1, r6
 8011028:	4628      	mov	r0, r5
 801102a:	47b8      	blx	r7
 801102c:	3001      	adds	r0, #1
 801102e:	f43f af0e 	beq.w	8010e4e <_printf_float+0xba>
 8011032:	f04f 0900 	mov.w	r9, #0
 8011036:	f104 0a1a 	add.w	sl, r4, #26
 801103a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801103c:	425b      	negs	r3, r3
 801103e:	454b      	cmp	r3, r9
 8011040:	dc01      	bgt.n	8011046 <_printf_float+0x2b2>
 8011042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011044:	e794      	b.n	8010f70 <_printf_float+0x1dc>
 8011046:	2301      	movs	r3, #1
 8011048:	4652      	mov	r2, sl
 801104a:	4631      	mov	r1, r6
 801104c:	4628      	mov	r0, r5
 801104e:	47b8      	blx	r7
 8011050:	3001      	adds	r0, #1
 8011052:	f43f aefc 	beq.w	8010e4e <_printf_float+0xba>
 8011056:	f109 0901 	add.w	r9, r9, #1
 801105a:	e7ee      	b.n	801103a <_printf_float+0x2a6>
 801105c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801105e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011060:	429a      	cmp	r2, r3
 8011062:	bfa8      	it	ge
 8011064:	461a      	movge	r2, r3
 8011066:	2a00      	cmp	r2, #0
 8011068:	4691      	mov	r9, r2
 801106a:	dd07      	ble.n	801107c <_printf_float+0x2e8>
 801106c:	4613      	mov	r3, r2
 801106e:	4631      	mov	r1, r6
 8011070:	4642      	mov	r2, r8
 8011072:	4628      	mov	r0, r5
 8011074:	47b8      	blx	r7
 8011076:	3001      	adds	r0, #1
 8011078:	f43f aee9 	beq.w	8010e4e <_printf_float+0xba>
 801107c:	f104 031a 	add.w	r3, r4, #26
 8011080:	f04f 0b00 	mov.w	fp, #0
 8011084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011088:	9306      	str	r3, [sp, #24]
 801108a:	e015      	b.n	80110b8 <_printf_float+0x324>
 801108c:	7fefffff 	.word	0x7fefffff
 8011090:	08014f5a 	.word	0x08014f5a
 8011094:	08014c9c 	.word	0x08014c9c
 8011098:	08014ca4 	.word	0x08014ca4
 801109c:	08014ca0 	.word	0x08014ca0
 80110a0:	08014ca8 	.word	0x08014ca8
 80110a4:	2301      	movs	r3, #1
 80110a6:	9a06      	ldr	r2, [sp, #24]
 80110a8:	4631      	mov	r1, r6
 80110aa:	4628      	mov	r0, r5
 80110ac:	47b8      	blx	r7
 80110ae:	3001      	adds	r0, #1
 80110b0:	f43f aecd 	beq.w	8010e4e <_printf_float+0xba>
 80110b4:	f10b 0b01 	add.w	fp, fp, #1
 80110b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80110bc:	ebaa 0309 	sub.w	r3, sl, r9
 80110c0:	455b      	cmp	r3, fp
 80110c2:	dcef      	bgt.n	80110a4 <_printf_float+0x310>
 80110c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80110c8:	429a      	cmp	r2, r3
 80110ca:	44d0      	add	r8, sl
 80110cc:	db15      	blt.n	80110fa <_printf_float+0x366>
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	07da      	lsls	r2, r3, #31
 80110d2:	d412      	bmi.n	80110fa <_printf_float+0x366>
 80110d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80110d8:	eba3 020a 	sub.w	r2, r3, sl
 80110dc:	eba3 0a01 	sub.w	sl, r3, r1
 80110e0:	4592      	cmp	sl, r2
 80110e2:	bfa8      	it	ge
 80110e4:	4692      	movge	sl, r2
 80110e6:	f1ba 0f00 	cmp.w	sl, #0
 80110ea:	dc0e      	bgt.n	801110a <_printf_float+0x376>
 80110ec:	f04f 0800 	mov.w	r8, #0
 80110f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80110f4:	f104 091a 	add.w	r9, r4, #26
 80110f8:	e019      	b.n	801112e <_printf_float+0x39a>
 80110fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110fe:	4631      	mov	r1, r6
 8011100:	4628      	mov	r0, r5
 8011102:	47b8      	blx	r7
 8011104:	3001      	adds	r0, #1
 8011106:	d1e5      	bne.n	80110d4 <_printf_float+0x340>
 8011108:	e6a1      	b.n	8010e4e <_printf_float+0xba>
 801110a:	4653      	mov	r3, sl
 801110c:	4642      	mov	r2, r8
 801110e:	4631      	mov	r1, r6
 8011110:	4628      	mov	r0, r5
 8011112:	47b8      	blx	r7
 8011114:	3001      	adds	r0, #1
 8011116:	d1e9      	bne.n	80110ec <_printf_float+0x358>
 8011118:	e699      	b.n	8010e4e <_printf_float+0xba>
 801111a:	2301      	movs	r3, #1
 801111c:	464a      	mov	r2, r9
 801111e:	4631      	mov	r1, r6
 8011120:	4628      	mov	r0, r5
 8011122:	47b8      	blx	r7
 8011124:	3001      	adds	r0, #1
 8011126:	f43f ae92 	beq.w	8010e4e <_printf_float+0xba>
 801112a:	f108 0801 	add.w	r8, r8, #1
 801112e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011132:	1a9b      	subs	r3, r3, r2
 8011134:	eba3 030a 	sub.w	r3, r3, sl
 8011138:	4543      	cmp	r3, r8
 801113a:	dcee      	bgt.n	801111a <_printf_float+0x386>
 801113c:	e74a      	b.n	8010fd4 <_printf_float+0x240>
 801113e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011140:	2a01      	cmp	r2, #1
 8011142:	dc01      	bgt.n	8011148 <_printf_float+0x3b4>
 8011144:	07db      	lsls	r3, r3, #31
 8011146:	d53a      	bpl.n	80111be <_printf_float+0x42a>
 8011148:	2301      	movs	r3, #1
 801114a:	4642      	mov	r2, r8
 801114c:	4631      	mov	r1, r6
 801114e:	4628      	mov	r0, r5
 8011150:	47b8      	blx	r7
 8011152:	3001      	adds	r0, #1
 8011154:	f43f ae7b 	beq.w	8010e4e <_printf_float+0xba>
 8011158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801115c:	4631      	mov	r1, r6
 801115e:	4628      	mov	r0, r5
 8011160:	47b8      	blx	r7
 8011162:	3001      	adds	r0, #1
 8011164:	f108 0801 	add.w	r8, r8, #1
 8011168:	f43f ae71 	beq.w	8010e4e <_printf_float+0xba>
 801116c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801116e:	2200      	movs	r2, #0
 8011170:	f103 3aff 	add.w	sl, r3, #4294967295
 8011174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011178:	2300      	movs	r3, #0
 801117a:	f7ef fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 801117e:	b9c8      	cbnz	r0, 80111b4 <_printf_float+0x420>
 8011180:	4653      	mov	r3, sl
 8011182:	4642      	mov	r2, r8
 8011184:	4631      	mov	r1, r6
 8011186:	4628      	mov	r0, r5
 8011188:	47b8      	blx	r7
 801118a:	3001      	adds	r0, #1
 801118c:	d10e      	bne.n	80111ac <_printf_float+0x418>
 801118e:	e65e      	b.n	8010e4e <_printf_float+0xba>
 8011190:	2301      	movs	r3, #1
 8011192:	4652      	mov	r2, sl
 8011194:	4631      	mov	r1, r6
 8011196:	4628      	mov	r0, r5
 8011198:	47b8      	blx	r7
 801119a:	3001      	adds	r0, #1
 801119c:	f43f ae57 	beq.w	8010e4e <_printf_float+0xba>
 80111a0:	f108 0801 	add.w	r8, r8, #1
 80111a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111a6:	3b01      	subs	r3, #1
 80111a8:	4543      	cmp	r3, r8
 80111aa:	dcf1      	bgt.n	8011190 <_printf_float+0x3fc>
 80111ac:	464b      	mov	r3, r9
 80111ae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80111b2:	e6de      	b.n	8010f72 <_printf_float+0x1de>
 80111b4:	f04f 0800 	mov.w	r8, #0
 80111b8:	f104 0a1a 	add.w	sl, r4, #26
 80111bc:	e7f2      	b.n	80111a4 <_printf_float+0x410>
 80111be:	2301      	movs	r3, #1
 80111c0:	e7df      	b.n	8011182 <_printf_float+0x3ee>
 80111c2:	2301      	movs	r3, #1
 80111c4:	464a      	mov	r2, r9
 80111c6:	4631      	mov	r1, r6
 80111c8:	4628      	mov	r0, r5
 80111ca:	47b8      	blx	r7
 80111cc:	3001      	adds	r0, #1
 80111ce:	f43f ae3e 	beq.w	8010e4e <_printf_float+0xba>
 80111d2:	f108 0801 	add.w	r8, r8, #1
 80111d6:	68e3      	ldr	r3, [r4, #12]
 80111d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111da:	1a9b      	subs	r3, r3, r2
 80111dc:	4543      	cmp	r3, r8
 80111de:	dcf0      	bgt.n	80111c2 <_printf_float+0x42e>
 80111e0:	e6fc      	b.n	8010fdc <_printf_float+0x248>
 80111e2:	f04f 0800 	mov.w	r8, #0
 80111e6:	f104 0919 	add.w	r9, r4, #25
 80111ea:	e7f4      	b.n	80111d6 <_printf_float+0x442>
 80111ec:	2900      	cmp	r1, #0
 80111ee:	f43f ae8b 	beq.w	8010f08 <_printf_float+0x174>
 80111f2:	2300      	movs	r3, #0
 80111f4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80111f8:	ab09      	add	r3, sp, #36	; 0x24
 80111fa:	9300      	str	r3, [sp, #0]
 80111fc:	ec49 8b10 	vmov	d0, r8, r9
 8011200:	6022      	str	r2, [r4, #0]
 8011202:	f8cd a004 	str.w	sl, [sp, #4]
 8011206:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801120a:	4628      	mov	r0, r5
 801120c:	f7ff fd2e 	bl	8010c6c <__cvt>
 8011210:	4680      	mov	r8, r0
 8011212:	e648      	b.n	8010ea6 <_printf_float+0x112>

08011214 <_printf_common>:
 8011214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011218:	4691      	mov	r9, r2
 801121a:	461f      	mov	r7, r3
 801121c:	688a      	ldr	r2, [r1, #8]
 801121e:	690b      	ldr	r3, [r1, #16]
 8011220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011224:	4293      	cmp	r3, r2
 8011226:	bfb8      	it	lt
 8011228:	4613      	movlt	r3, r2
 801122a:	f8c9 3000 	str.w	r3, [r9]
 801122e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011232:	4606      	mov	r6, r0
 8011234:	460c      	mov	r4, r1
 8011236:	b112      	cbz	r2, 801123e <_printf_common+0x2a>
 8011238:	3301      	adds	r3, #1
 801123a:	f8c9 3000 	str.w	r3, [r9]
 801123e:	6823      	ldr	r3, [r4, #0]
 8011240:	0699      	lsls	r1, r3, #26
 8011242:	bf42      	ittt	mi
 8011244:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011248:	3302      	addmi	r3, #2
 801124a:	f8c9 3000 	strmi.w	r3, [r9]
 801124e:	6825      	ldr	r5, [r4, #0]
 8011250:	f015 0506 	ands.w	r5, r5, #6
 8011254:	d107      	bne.n	8011266 <_printf_common+0x52>
 8011256:	f104 0a19 	add.w	sl, r4, #25
 801125a:	68e3      	ldr	r3, [r4, #12]
 801125c:	f8d9 2000 	ldr.w	r2, [r9]
 8011260:	1a9b      	subs	r3, r3, r2
 8011262:	42ab      	cmp	r3, r5
 8011264:	dc28      	bgt.n	80112b8 <_printf_common+0xa4>
 8011266:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801126a:	6822      	ldr	r2, [r4, #0]
 801126c:	3300      	adds	r3, #0
 801126e:	bf18      	it	ne
 8011270:	2301      	movne	r3, #1
 8011272:	0692      	lsls	r2, r2, #26
 8011274:	d42d      	bmi.n	80112d2 <_printf_common+0xbe>
 8011276:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801127a:	4639      	mov	r1, r7
 801127c:	4630      	mov	r0, r6
 801127e:	47c0      	blx	r8
 8011280:	3001      	adds	r0, #1
 8011282:	d020      	beq.n	80112c6 <_printf_common+0xb2>
 8011284:	6823      	ldr	r3, [r4, #0]
 8011286:	68e5      	ldr	r5, [r4, #12]
 8011288:	f8d9 2000 	ldr.w	r2, [r9]
 801128c:	f003 0306 	and.w	r3, r3, #6
 8011290:	2b04      	cmp	r3, #4
 8011292:	bf08      	it	eq
 8011294:	1aad      	subeq	r5, r5, r2
 8011296:	68a3      	ldr	r3, [r4, #8]
 8011298:	6922      	ldr	r2, [r4, #16]
 801129a:	bf0c      	ite	eq
 801129c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112a0:	2500      	movne	r5, #0
 80112a2:	4293      	cmp	r3, r2
 80112a4:	bfc4      	itt	gt
 80112a6:	1a9b      	subgt	r3, r3, r2
 80112a8:	18ed      	addgt	r5, r5, r3
 80112aa:	f04f 0900 	mov.w	r9, #0
 80112ae:	341a      	adds	r4, #26
 80112b0:	454d      	cmp	r5, r9
 80112b2:	d11a      	bne.n	80112ea <_printf_common+0xd6>
 80112b4:	2000      	movs	r0, #0
 80112b6:	e008      	b.n	80112ca <_printf_common+0xb6>
 80112b8:	2301      	movs	r3, #1
 80112ba:	4652      	mov	r2, sl
 80112bc:	4639      	mov	r1, r7
 80112be:	4630      	mov	r0, r6
 80112c0:	47c0      	blx	r8
 80112c2:	3001      	adds	r0, #1
 80112c4:	d103      	bne.n	80112ce <_printf_common+0xba>
 80112c6:	f04f 30ff 	mov.w	r0, #4294967295
 80112ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ce:	3501      	adds	r5, #1
 80112d0:	e7c3      	b.n	801125a <_printf_common+0x46>
 80112d2:	18e1      	adds	r1, r4, r3
 80112d4:	1c5a      	adds	r2, r3, #1
 80112d6:	2030      	movs	r0, #48	; 0x30
 80112d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80112dc:	4422      	add	r2, r4
 80112de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80112e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80112e6:	3302      	adds	r3, #2
 80112e8:	e7c5      	b.n	8011276 <_printf_common+0x62>
 80112ea:	2301      	movs	r3, #1
 80112ec:	4622      	mov	r2, r4
 80112ee:	4639      	mov	r1, r7
 80112f0:	4630      	mov	r0, r6
 80112f2:	47c0      	blx	r8
 80112f4:	3001      	adds	r0, #1
 80112f6:	d0e6      	beq.n	80112c6 <_printf_common+0xb2>
 80112f8:	f109 0901 	add.w	r9, r9, #1
 80112fc:	e7d8      	b.n	80112b0 <_printf_common+0x9c>
	...

08011300 <_printf_i>:
 8011300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011304:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011308:	460c      	mov	r4, r1
 801130a:	7e09      	ldrb	r1, [r1, #24]
 801130c:	b085      	sub	sp, #20
 801130e:	296e      	cmp	r1, #110	; 0x6e
 8011310:	4617      	mov	r7, r2
 8011312:	4606      	mov	r6, r0
 8011314:	4698      	mov	r8, r3
 8011316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011318:	f000 80b3 	beq.w	8011482 <_printf_i+0x182>
 801131c:	d822      	bhi.n	8011364 <_printf_i+0x64>
 801131e:	2963      	cmp	r1, #99	; 0x63
 8011320:	d036      	beq.n	8011390 <_printf_i+0x90>
 8011322:	d80a      	bhi.n	801133a <_printf_i+0x3a>
 8011324:	2900      	cmp	r1, #0
 8011326:	f000 80b9 	beq.w	801149c <_printf_i+0x19c>
 801132a:	2958      	cmp	r1, #88	; 0x58
 801132c:	f000 8083 	beq.w	8011436 <_printf_i+0x136>
 8011330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011334:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011338:	e032      	b.n	80113a0 <_printf_i+0xa0>
 801133a:	2964      	cmp	r1, #100	; 0x64
 801133c:	d001      	beq.n	8011342 <_printf_i+0x42>
 801133e:	2969      	cmp	r1, #105	; 0x69
 8011340:	d1f6      	bne.n	8011330 <_printf_i+0x30>
 8011342:	6820      	ldr	r0, [r4, #0]
 8011344:	6813      	ldr	r3, [r2, #0]
 8011346:	0605      	lsls	r5, r0, #24
 8011348:	f103 0104 	add.w	r1, r3, #4
 801134c:	d52a      	bpl.n	80113a4 <_printf_i+0xa4>
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	6011      	str	r1, [r2, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	da03      	bge.n	801135e <_printf_i+0x5e>
 8011356:	222d      	movs	r2, #45	; 0x2d
 8011358:	425b      	negs	r3, r3
 801135a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801135e:	486f      	ldr	r0, [pc, #444]	; (801151c <_printf_i+0x21c>)
 8011360:	220a      	movs	r2, #10
 8011362:	e039      	b.n	80113d8 <_printf_i+0xd8>
 8011364:	2973      	cmp	r1, #115	; 0x73
 8011366:	f000 809d 	beq.w	80114a4 <_printf_i+0x1a4>
 801136a:	d808      	bhi.n	801137e <_printf_i+0x7e>
 801136c:	296f      	cmp	r1, #111	; 0x6f
 801136e:	d020      	beq.n	80113b2 <_printf_i+0xb2>
 8011370:	2970      	cmp	r1, #112	; 0x70
 8011372:	d1dd      	bne.n	8011330 <_printf_i+0x30>
 8011374:	6823      	ldr	r3, [r4, #0]
 8011376:	f043 0320 	orr.w	r3, r3, #32
 801137a:	6023      	str	r3, [r4, #0]
 801137c:	e003      	b.n	8011386 <_printf_i+0x86>
 801137e:	2975      	cmp	r1, #117	; 0x75
 8011380:	d017      	beq.n	80113b2 <_printf_i+0xb2>
 8011382:	2978      	cmp	r1, #120	; 0x78
 8011384:	d1d4      	bne.n	8011330 <_printf_i+0x30>
 8011386:	2378      	movs	r3, #120	; 0x78
 8011388:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801138c:	4864      	ldr	r0, [pc, #400]	; (8011520 <_printf_i+0x220>)
 801138e:	e055      	b.n	801143c <_printf_i+0x13c>
 8011390:	6813      	ldr	r3, [r2, #0]
 8011392:	1d19      	adds	r1, r3, #4
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	6011      	str	r1, [r2, #0]
 8011398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801139c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80113a0:	2301      	movs	r3, #1
 80113a2:	e08c      	b.n	80114be <_printf_i+0x1be>
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	6011      	str	r1, [r2, #0]
 80113a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80113ac:	bf18      	it	ne
 80113ae:	b21b      	sxthne	r3, r3
 80113b0:	e7cf      	b.n	8011352 <_printf_i+0x52>
 80113b2:	6813      	ldr	r3, [r2, #0]
 80113b4:	6825      	ldr	r5, [r4, #0]
 80113b6:	1d18      	adds	r0, r3, #4
 80113b8:	6010      	str	r0, [r2, #0]
 80113ba:	0628      	lsls	r0, r5, #24
 80113bc:	d501      	bpl.n	80113c2 <_printf_i+0xc2>
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	e002      	b.n	80113c8 <_printf_i+0xc8>
 80113c2:	0668      	lsls	r0, r5, #25
 80113c4:	d5fb      	bpl.n	80113be <_printf_i+0xbe>
 80113c6:	881b      	ldrh	r3, [r3, #0]
 80113c8:	4854      	ldr	r0, [pc, #336]	; (801151c <_printf_i+0x21c>)
 80113ca:	296f      	cmp	r1, #111	; 0x6f
 80113cc:	bf14      	ite	ne
 80113ce:	220a      	movne	r2, #10
 80113d0:	2208      	moveq	r2, #8
 80113d2:	2100      	movs	r1, #0
 80113d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80113d8:	6865      	ldr	r5, [r4, #4]
 80113da:	60a5      	str	r5, [r4, #8]
 80113dc:	2d00      	cmp	r5, #0
 80113de:	f2c0 8095 	blt.w	801150c <_printf_i+0x20c>
 80113e2:	6821      	ldr	r1, [r4, #0]
 80113e4:	f021 0104 	bic.w	r1, r1, #4
 80113e8:	6021      	str	r1, [r4, #0]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d13d      	bne.n	801146a <_printf_i+0x16a>
 80113ee:	2d00      	cmp	r5, #0
 80113f0:	f040 808e 	bne.w	8011510 <_printf_i+0x210>
 80113f4:	4665      	mov	r5, ip
 80113f6:	2a08      	cmp	r2, #8
 80113f8:	d10b      	bne.n	8011412 <_printf_i+0x112>
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	07db      	lsls	r3, r3, #31
 80113fe:	d508      	bpl.n	8011412 <_printf_i+0x112>
 8011400:	6923      	ldr	r3, [r4, #16]
 8011402:	6862      	ldr	r2, [r4, #4]
 8011404:	429a      	cmp	r2, r3
 8011406:	bfde      	ittt	le
 8011408:	2330      	movle	r3, #48	; 0x30
 801140a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801140e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011412:	ebac 0305 	sub.w	r3, ip, r5
 8011416:	6123      	str	r3, [r4, #16]
 8011418:	f8cd 8000 	str.w	r8, [sp]
 801141c:	463b      	mov	r3, r7
 801141e:	aa03      	add	r2, sp, #12
 8011420:	4621      	mov	r1, r4
 8011422:	4630      	mov	r0, r6
 8011424:	f7ff fef6 	bl	8011214 <_printf_common>
 8011428:	3001      	adds	r0, #1
 801142a:	d14d      	bne.n	80114c8 <_printf_i+0x1c8>
 801142c:	f04f 30ff 	mov.w	r0, #4294967295
 8011430:	b005      	add	sp, #20
 8011432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011436:	4839      	ldr	r0, [pc, #228]	; (801151c <_printf_i+0x21c>)
 8011438:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801143c:	6813      	ldr	r3, [r2, #0]
 801143e:	6821      	ldr	r1, [r4, #0]
 8011440:	1d1d      	adds	r5, r3, #4
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6015      	str	r5, [r2, #0]
 8011446:	060a      	lsls	r2, r1, #24
 8011448:	d50b      	bpl.n	8011462 <_printf_i+0x162>
 801144a:	07ca      	lsls	r2, r1, #31
 801144c:	bf44      	itt	mi
 801144e:	f041 0120 	orrmi.w	r1, r1, #32
 8011452:	6021      	strmi	r1, [r4, #0]
 8011454:	b91b      	cbnz	r3, 801145e <_printf_i+0x15e>
 8011456:	6822      	ldr	r2, [r4, #0]
 8011458:	f022 0220 	bic.w	r2, r2, #32
 801145c:	6022      	str	r2, [r4, #0]
 801145e:	2210      	movs	r2, #16
 8011460:	e7b7      	b.n	80113d2 <_printf_i+0xd2>
 8011462:	064d      	lsls	r5, r1, #25
 8011464:	bf48      	it	mi
 8011466:	b29b      	uxthmi	r3, r3
 8011468:	e7ef      	b.n	801144a <_printf_i+0x14a>
 801146a:	4665      	mov	r5, ip
 801146c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011470:	fb02 3311 	mls	r3, r2, r1, r3
 8011474:	5cc3      	ldrb	r3, [r0, r3]
 8011476:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801147a:	460b      	mov	r3, r1
 801147c:	2900      	cmp	r1, #0
 801147e:	d1f5      	bne.n	801146c <_printf_i+0x16c>
 8011480:	e7b9      	b.n	80113f6 <_printf_i+0xf6>
 8011482:	6813      	ldr	r3, [r2, #0]
 8011484:	6825      	ldr	r5, [r4, #0]
 8011486:	6961      	ldr	r1, [r4, #20]
 8011488:	1d18      	adds	r0, r3, #4
 801148a:	6010      	str	r0, [r2, #0]
 801148c:	0628      	lsls	r0, r5, #24
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	d501      	bpl.n	8011496 <_printf_i+0x196>
 8011492:	6019      	str	r1, [r3, #0]
 8011494:	e002      	b.n	801149c <_printf_i+0x19c>
 8011496:	066a      	lsls	r2, r5, #25
 8011498:	d5fb      	bpl.n	8011492 <_printf_i+0x192>
 801149a:	8019      	strh	r1, [r3, #0]
 801149c:	2300      	movs	r3, #0
 801149e:	6123      	str	r3, [r4, #16]
 80114a0:	4665      	mov	r5, ip
 80114a2:	e7b9      	b.n	8011418 <_printf_i+0x118>
 80114a4:	6813      	ldr	r3, [r2, #0]
 80114a6:	1d19      	adds	r1, r3, #4
 80114a8:	6011      	str	r1, [r2, #0]
 80114aa:	681d      	ldr	r5, [r3, #0]
 80114ac:	6862      	ldr	r2, [r4, #4]
 80114ae:	2100      	movs	r1, #0
 80114b0:	4628      	mov	r0, r5
 80114b2:	f7ee fe95 	bl	80001e0 <memchr>
 80114b6:	b108      	cbz	r0, 80114bc <_printf_i+0x1bc>
 80114b8:	1b40      	subs	r0, r0, r5
 80114ba:	6060      	str	r0, [r4, #4]
 80114bc:	6863      	ldr	r3, [r4, #4]
 80114be:	6123      	str	r3, [r4, #16]
 80114c0:	2300      	movs	r3, #0
 80114c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114c6:	e7a7      	b.n	8011418 <_printf_i+0x118>
 80114c8:	6923      	ldr	r3, [r4, #16]
 80114ca:	462a      	mov	r2, r5
 80114cc:	4639      	mov	r1, r7
 80114ce:	4630      	mov	r0, r6
 80114d0:	47c0      	blx	r8
 80114d2:	3001      	adds	r0, #1
 80114d4:	d0aa      	beq.n	801142c <_printf_i+0x12c>
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	079b      	lsls	r3, r3, #30
 80114da:	d413      	bmi.n	8011504 <_printf_i+0x204>
 80114dc:	68e0      	ldr	r0, [r4, #12]
 80114de:	9b03      	ldr	r3, [sp, #12]
 80114e0:	4298      	cmp	r0, r3
 80114e2:	bfb8      	it	lt
 80114e4:	4618      	movlt	r0, r3
 80114e6:	e7a3      	b.n	8011430 <_printf_i+0x130>
 80114e8:	2301      	movs	r3, #1
 80114ea:	464a      	mov	r2, r9
 80114ec:	4639      	mov	r1, r7
 80114ee:	4630      	mov	r0, r6
 80114f0:	47c0      	blx	r8
 80114f2:	3001      	adds	r0, #1
 80114f4:	d09a      	beq.n	801142c <_printf_i+0x12c>
 80114f6:	3501      	adds	r5, #1
 80114f8:	68e3      	ldr	r3, [r4, #12]
 80114fa:	9a03      	ldr	r2, [sp, #12]
 80114fc:	1a9b      	subs	r3, r3, r2
 80114fe:	42ab      	cmp	r3, r5
 8011500:	dcf2      	bgt.n	80114e8 <_printf_i+0x1e8>
 8011502:	e7eb      	b.n	80114dc <_printf_i+0x1dc>
 8011504:	2500      	movs	r5, #0
 8011506:	f104 0919 	add.w	r9, r4, #25
 801150a:	e7f5      	b.n	80114f8 <_printf_i+0x1f8>
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1ac      	bne.n	801146a <_printf_i+0x16a>
 8011510:	7803      	ldrb	r3, [r0, #0]
 8011512:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011516:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801151a:	e76c      	b.n	80113f6 <_printf_i+0xf6>
 801151c:	08014caa 	.word	0x08014caa
 8011520:	08014cbb 	.word	0x08014cbb

08011524 <iprintf>:
 8011524:	b40f      	push	{r0, r1, r2, r3}
 8011526:	4b0a      	ldr	r3, [pc, #40]	; (8011550 <iprintf+0x2c>)
 8011528:	b513      	push	{r0, r1, r4, lr}
 801152a:	681c      	ldr	r4, [r3, #0]
 801152c:	b124      	cbz	r4, 8011538 <iprintf+0x14>
 801152e:	69a3      	ldr	r3, [r4, #24]
 8011530:	b913      	cbnz	r3, 8011538 <iprintf+0x14>
 8011532:	4620      	mov	r0, r4
 8011534:	f001 f914 	bl	8012760 <__sinit>
 8011538:	ab05      	add	r3, sp, #20
 801153a:	9a04      	ldr	r2, [sp, #16]
 801153c:	68a1      	ldr	r1, [r4, #8]
 801153e:	9301      	str	r3, [sp, #4]
 8011540:	4620      	mov	r0, r4
 8011542:	f001 fdcd 	bl	80130e0 <_vfiprintf_r>
 8011546:	b002      	add	sp, #8
 8011548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801154c:	b004      	add	sp, #16
 801154e:	4770      	bx	lr
 8011550:	20001dac 	.word	0x20001dac

08011554 <_puts_r>:
 8011554:	b570      	push	{r4, r5, r6, lr}
 8011556:	460e      	mov	r6, r1
 8011558:	4605      	mov	r5, r0
 801155a:	b118      	cbz	r0, 8011564 <_puts_r+0x10>
 801155c:	6983      	ldr	r3, [r0, #24]
 801155e:	b90b      	cbnz	r3, 8011564 <_puts_r+0x10>
 8011560:	f001 f8fe 	bl	8012760 <__sinit>
 8011564:	69ab      	ldr	r3, [r5, #24]
 8011566:	68ac      	ldr	r4, [r5, #8]
 8011568:	b913      	cbnz	r3, 8011570 <_puts_r+0x1c>
 801156a:	4628      	mov	r0, r5
 801156c:	f001 f8f8 	bl	8012760 <__sinit>
 8011570:	4b23      	ldr	r3, [pc, #140]	; (8011600 <_puts_r+0xac>)
 8011572:	429c      	cmp	r4, r3
 8011574:	d117      	bne.n	80115a6 <_puts_r+0x52>
 8011576:	686c      	ldr	r4, [r5, #4]
 8011578:	89a3      	ldrh	r3, [r4, #12]
 801157a:	071b      	lsls	r3, r3, #28
 801157c:	d51d      	bpl.n	80115ba <_puts_r+0x66>
 801157e:	6923      	ldr	r3, [r4, #16]
 8011580:	b1db      	cbz	r3, 80115ba <_puts_r+0x66>
 8011582:	3e01      	subs	r6, #1
 8011584:	68a3      	ldr	r3, [r4, #8]
 8011586:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801158a:	3b01      	subs	r3, #1
 801158c:	60a3      	str	r3, [r4, #8]
 801158e:	b9e9      	cbnz	r1, 80115cc <_puts_r+0x78>
 8011590:	2b00      	cmp	r3, #0
 8011592:	da2e      	bge.n	80115f2 <_puts_r+0x9e>
 8011594:	4622      	mov	r2, r4
 8011596:	210a      	movs	r1, #10
 8011598:	4628      	mov	r0, r5
 801159a:	f000 f8ed 	bl	8011778 <__swbuf_r>
 801159e:	3001      	adds	r0, #1
 80115a0:	d011      	beq.n	80115c6 <_puts_r+0x72>
 80115a2:	200a      	movs	r0, #10
 80115a4:	e011      	b.n	80115ca <_puts_r+0x76>
 80115a6:	4b17      	ldr	r3, [pc, #92]	; (8011604 <_puts_r+0xb0>)
 80115a8:	429c      	cmp	r4, r3
 80115aa:	d101      	bne.n	80115b0 <_puts_r+0x5c>
 80115ac:	68ac      	ldr	r4, [r5, #8]
 80115ae:	e7e3      	b.n	8011578 <_puts_r+0x24>
 80115b0:	4b15      	ldr	r3, [pc, #84]	; (8011608 <_puts_r+0xb4>)
 80115b2:	429c      	cmp	r4, r3
 80115b4:	bf08      	it	eq
 80115b6:	68ec      	ldreq	r4, [r5, #12]
 80115b8:	e7de      	b.n	8011578 <_puts_r+0x24>
 80115ba:	4621      	mov	r1, r4
 80115bc:	4628      	mov	r0, r5
 80115be:	f000 f92d 	bl	801181c <__swsetup_r>
 80115c2:	2800      	cmp	r0, #0
 80115c4:	d0dd      	beq.n	8011582 <_puts_r+0x2e>
 80115c6:	f04f 30ff 	mov.w	r0, #4294967295
 80115ca:	bd70      	pop	{r4, r5, r6, pc}
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	da04      	bge.n	80115da <_puts_r+0x86>
 80115d0:	69a2      	ldr	r2, [r4, #24]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	dc06      	bgt.n	80115e4 <_puts_r+0x90>
 80115d6:	290a      	cmp	r1, #10
 80115d8:	d004      	beq.n	80115e4 <_puts_r+0x90>
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	1c5a      	adds	r2, r3, #1
 80115de:	6022      	str	r2, [r4, #0]
 80115e0:	7019      	strb	r1, [r3, #0]
 80115e2:	e7cf      	b.n	8011584 <_puts_r+0x30>
 80115e4:	4622      	mov	r2, r4
 80115e6:	4628      	mov	r0, r5
 80115e8:	f000 f8c6 	bl	8011778 <__swbuf_r>
 80115ec:	3001      	adds	r0, #1
 80115ee:	d1c9      	bne.n	8011584 <_puts_r+0x30>
 80115f0:	e7e9      	b.n	80115c6 <_puts_r+0x72>
 80115f2:	6823      	ldr	r3, [r4, #0]
 80115f4:	200a      	movs	r0, #10
 80115f6:	1c5a      	adds	r2, r3, #1
 80115f8:	6022      	str	r2, [r4, #0]
 80115fa:	7018      	strb	r0, [r3, #0]
 80115fc:	e7e5      	b.n	80115ca <_puts_r+0x76>
 80115fe:	bf00      	nop
 8011600:	08014cfc 	.word	0x08014cfc
 8011604:	08014d1c 	.word	0x08014d1c
 8011608:	08014cdc 	.word	0x08014cdc

0801160c <puts>:
 801160c:	4b02      	ldr	r3, [pc, #8]	; (8011618 <puts+0xc>)
 801160e:	4601      	mov	r1, r0
 8011610:	6818      	ldr	r0, [r3, #0]
 8011612:	f7ff bf9f 	b.w	8011554 <_puts_r>
 8011616:	bf00      	nop
 8011618:	20001dac 	.word	0x20001dac

0801161c <setvbuf>:
 801161c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011620:	461d      	mov	r5, r3
 8011622:	4b51      	ldr	r3, [pc, #324]	; (8011768 <setvbuf+0x14c>)
 8011624:	681e      	ldr	r6, [r3, #0]
 8011626:	4604      	mov	r4, r0
 8011628:	460f      	mov	r7, r1
 801162a:	4690      	mov	r8, r2
 801162c:	b126      	cbz	r6, 8011638 <setvbuf+0x1c>
 801162e:	69b3      	ldr	r3, [r6, #24]
 8011630:	b913      	cbnz	r3, 8011638 <setvbuf+0x1c>
 8011632:	4630      	mov	r0, r6
 8011634:	f001 f894 	bl	8012760 <__sinit>
 8011638:	4b4c      	ldr	r3, [pc, #304]	; (801176c <setvbuf+0x150>)
 801163a:	429c      	cmp	r4, r3
 801163c:	d152      	bne.n	80116e4 <setvbuf+0xc8>
 801163e:	6874      	ldr	r4, [r6, #4]
 8011640:	f1b8 0f02 	cmp.w	r8, #2
 8011644:	d006      	beq.n	8011654 <setvbuf+0x38>
 8011646:	f1b8 0f01 	cmp.w	r8, #1
 801164a:	f200 8089 	bhi.w	8011760 <setvbuf+0x144>
 801164e:	2d00      	cmp	r5, #0
 8011650:	f2c0 8086 	blt.w	8011760 <setvbuf+0x144>
 8011654:	4621      	mov	r1, r4
 8011656:	4630      	mov	r0, r6
 8011658:	f001 f818 	bl	801268c <_fflush_r>
 801165c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801165e:	b141      	cbz	r1, 8011672 <setvbuf+0x56>
 8011660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011664:	4299      	cmp	r1, r3
 8011666:	d002      	beq.n	801166e <setvbuf+0x52>
 8011668:	4630      	mov	r0, r6
 801166a:	f001 fc67 	bl	8012f3c <_free_r>
 801166e:	2300      	movs	r3, #0
 8011670:	6363      	str	r3, [r4, #52]	; 0x34
 8011672:	2300      	movs	r3, #0
 8011674:	61a3      	str	r3, [r4, #24]
 8011676:	6063      	str	r3, [r4, #4]
 8011678:	89a3      	ldrh	r3, [r4, #12]
 801167a:	061b      	lsls	r3, r3, #24
 801167c:	d503      	bpl.n	8011686 <setvbuf+0x6a>
 801167e:	6921      	ldr	r1, [r4, #16]
 8011680:	4630      	mov	r0, r6
 8011682:	f001 fc5b 	bl	8012f3c <_free_r>
 8011686:	89a3      	ldrh	r3, [r4, #12]
 8011688:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801168c:	f023 0303 	bic.w	r3, r3, #3
 8011690:	f1b8 0f02 	cmp.w	r8, #2
 8011694:	81a3      	strh	r3, [r4, #12]
 8011696:	d05d      	beq.n	8011754 <setvbuf+0x138>
 8011698:	ab01      	add	r3, sp, #4
 801169a:	466a      	mov	r2, sp
 801169c:	4621      	mov	r1, r4
 801169e:	4630      	mov	r0, r6
 80116a0:	f001 f8f6 	bl	8012890 <__swhatbuf_r>
 80116a4:	89a3      	ldrh	r3, [r4, #12]
 80116a6:	4318      	orrs	r0, r3
 80116a8:	81a0      	strh	r0, [r4, #12]
 80116aa:	bb2d      	cbnz	r5, 80116f8 <setvbuf+0xdc>
 80116ac:	9d00      	ldr	r5, [sp, #0]
 80116ae:	4628      	mov	r0, r5
 80116b0:	f001 f952 	bl	8012958 <malloc>
 80116b4:	4607      	mov	r7, r0
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d14e      	bne.n	8011758 <setvbuf+0x13c>
 80116ba:	f8dd 9000 	ldr.w	r9, [sp]
 80116be:	45a9      	cmp	r9, r5
 80116c0:	d13c      	bne.n	801173c <setvbuf+0x120>
 80116c2:	f04f 30ff 	mov.w	r0, #4294967295
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	f043 0302 	orr.w	r3, r3, #2
 80116cc:	81a3      	strh	r3, [r4, #12]
 80116ce:	2300      	movs	r3, #0
 80116d0:	60a3      	str	r3, [r4, #8]
 80116d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116d6:	6023      	str	r3, [r4, #0]
 80116d8:	6123      	str	r3, [r4, #16]
 80116da:	2301      	movs	r3, #1
 80116dc:	6163      	str	r3, [r4, #20]
 80116de:	b003      	add	sp, #12
 80116e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116e4:	4b22      	ldr	r3, [pc, #136]	; (8011770 <setvbuf+0x154>)
 80116e6:	429c      	cmp	r4, r3
 80116e8:	d101      	bne.n	80116ee <setvbuf+0xd2>
 80116ea:	68b4      	ldr	r4, [r6, #8]
 80116ec:	e7a8      	b.n	8011640 <setvbuf+0x24>
 80116ee:	4b21      	ldr	r3, [pc, #132]	; (8011774 <setvbuf+0x158>)
 80116f0:	429c      	cmp	r4, r3
 80116f2:	bf08      	it	eq
 80116f4:	68f4      	ldreq	r4, [r6, #12]
 80116f6:	e7a3      	b.n	8011640 <setvbuf+0x24>
 80116f8:	2f00      	cmp	r7, #0
 80116fa:	d0d8      	beq.n	80116ae <setvbuf+0x92>
 80116fc:	69b3      	ldr	r3, [r6, #24]
 80116fe:	b913      	cbnz	r3, 8011706 <setvbuf+0xea>
 8011700:	4630      	mov	r0, r6
 8011702:	f001 f82d 	bl	8012760 <__sinit>
 8011706:	f1b8 0f01 	cmp.w	r8, #1
 801170a:	bf08      	it	eq
 801170c:	89a3      	ldrheq	r3, [r4, #12]
 801170e:	6027      	str	r7, [r4, #0]
 8011710:	bf04      	itt	eq
 8011712:	f043 0301 	orreq.w	r3, r3, #1
 8011716:	81a3      	strheq	r3, [r4, #12]
 8011718:	89a3      	ldrh	r3, [r4, #12]
 801171a:	f013 0008 	ands.w	r0, r3, #8
 801171e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8011722:	d01b      	beq.n	801175c <setvbuf+0x140>
 8011724:	f013 0001 	ands.w	r0, r3, #1
 8011728:	bf18      	it	ne
 801172a:	426d      	negne	r5, r5
 801172c:	f04f 0300 	mov.w	r3, #0
 8011730:	bf1d      	ittte	ne
 8011732:	60a3      	strne	r3, [r4, #8]
 8011734:	61a5      	strne	r5, [r4, #24]
 8011736:	4618      	movne	r0, r3
 8011738:	60a5      	streq	r5, [r4, #8]
 801173a:	e7d0      	b.n	80116de <setvbuf+0xc2>
 801173c:	4648      	mov	r0, r9
 801173e:	f001 f90b 	bl	8012958 <malloc>
 8011742:	4607      	mov	r7, r0
 8011744:	2800      	cmp	r0, #0
 8011746:	d0bc      	beq.n	80116c2 <setvbuf+0xa6>
 8011748:	89a3      	ldrh	r3, [r4, #12]
 801174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801174e:	81a3      	strh	r3, [r4, #12]
 8011750:	464d      	mov	r5, r9
 8011752:	e7d3      	b.n	80116fc <setvbuf+0xe0>
 8011754:	2000      	movs	r0, #0
 8011756:	e7b6      	b.n	80116c6 <setvbuf+0xaa>
 8011758:	46a9      	mov	r9, r5
 801175a:	e7f5      	b.n	8011748 <setvbuf+0x12c>
 801175c:	60a0      	str	r0, [r4, #8]
 801175e:	e7be      	b.n	80116de <setvbuf+0xc2>
 8011760:	f04f 30ff 	mov.w	r0, #4294967295
 8011764:	e7bb      	b.n	80116de <setvbuf+0xc2>
 8011766:	bf00      	nop
 8011768:	20001dac 	.word	0x20001dac
 801176c:	08014cfc 	.word	0x08014cfc
 8011770:	08014d1c 	.word	0x08014d1c
 8011774:	08014cdc 	.word	0x08014cdc

08011778 <__swbuf_r>:
 8011778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177a:	460e      	mov	r6, r1
 801177c:	4614      	mov	r4, r2
 801177e:	4605      	mov	r5, r0
 8011780:	b118      	cbz	r0, 801178a <__swbuf_r+0x12>
 8011782:	6983      	ldr	r3, [r0, #24]
 8011784:	b90b      	cbnz	r3, 801178a <__swbuf_r+0x12>
 8011786:	f000 ffeb 	bl	8012760 <__sinit>
 801178a:	4b21      	ldr	r3, [pc, #132]	; (8011810 <__swbuf_r+0x98>)
 801178c:	429c      	cmp	r4, r3
 801178e:	d12a      	bne.n	80117e6 <__swbuf_r+0x6e>
 8011790:	686c      	ldr	r4, [r5, #4]
 8011792:	69a3      	ldr	r3, [r4, #24]
 8011794:	60a3      	str	r3, [r4, #8]
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	071a      	lsls	r2, r3, #28
 801179a:	d52e      	bpl.n	80117fa <__swbuf_r+0x82>
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	b363      	cbz	r3, 80117fa <__swbuf_r+0x82>
 80117a0:	6923      	ldr	r3, [r4, #16]
 80117a2:	6820      	ldr	r0, [r4, #0]
 80117a4:	1ac0      	subs	r0, r0, r3
 80117a6:	6963      	ldr	r3, [r4, #20]
 80117a8:	b2f6      	uxtb	r6, r6
 80117aa:	4283      	cmp	r3, r0
 80117ac:	4637      	mov	r7, r6
 80117ae:	dc04      	bgt.n	80117ba <__swbuf_r+0x42>
 80117b0:	4621      	mov	r1, r4
 80117b2:	4628      	mov	r0, r5
 80117b4:	f000 ff6a 	bl	801268c <_fflush_r>
 80117b8:	bb28      	cbnz	r0, 8011806 <__swbuf_r+0x8e>
 80117ba:	68a3      	ldr	r3, [r4, #8]
 80117bc:	3b01      	subs	r3, #1
 80117be:	60a3      	str	r3, [r4, #8]
 80117c0:	6823      	ldr	r3, [r4, #0]
 80117c2:	1c5a      	adds	r2, r3, #1
 80117c4:	6022      	str	r2, [r4, #0]
 80117c6:	701e      	strb	r6, [r3, #0]
 80117c8:	6963      	ldr	r3, [r4, #20]
 80117ca:	3001      	adds	r0, #1
 80117cc:	4283      	cmp	r3, r0
 80117ce:	d004      	beq.n	80117da <__swbuf_r+0x62>
 80117d0:	89a3      	ldrh	r3, [r4, #12]
 80117d2:	07db      	lsls	r3, r3, #31
 80117d4:	d519      	bpl.n	801180a <__swbuf_r+0x92>
 80117d6:	2e0a      	cmp	r6, #10
 80117d8:	d117      	bne.n	801180a <__swbuf_r+0x92>
 80117da:	4621      	mov	r1, r4
 80117dc:	4628      	mov	r0, r5
 80117de:	f000 ff55 	bl	801268c <_fflush_r>
 80117e2:	b190      	cbz	r0, 801180a <__swbuf_r+0x92>
 80117e4:	e00f      	b.n	8011806 <__swbuf_r+0x8e>
 80117e6:	4b0b      	ldr	r3, [pc, #44]	; (8011814 <__swbuf_r+0x9c>)
 80117e8:	429c      	cmp	r4, r3
 80117ea:	d101      	bne.n	80117f0 <__swbuf_r+0x78>
 80117ec:	68ac      	ldr	r4, [r5, #8]
 80117ee:	e7d0      	b.n	8011792 <__swbuf_r+0x1a>
 80117f0:	4b09      	ldr	r3, [pc, #36]	; (8011818 <__swbuf_r+0xa0>)
 80117f2:	429c      	cmp	r4, r3
 80117f4:	bf08      	it	eq
 80117f6:	68ec      	ldreq	r4, [r5, #12]
 80117f8:	e7cb      	b.n	8011792 <__swbuf_r+0x1a>
 80117fa:	4621      	mov	r1, r4
 80117fc:	4628      	mov	r0, r5
 80117fe:	f000 f80d 	bl	801181c <__swsetup_r>
 8011802:	2800      	cmp	r0, #0
 8011804:	d0cc      	beq.n	80117a0 <__swbuf_r+0x28>
 8011806:	f04f 37ff 	mov.w	r7, #4294967295
 801180a:	4638      	mov	r0, r7
 801180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801180e:	bf00      	nop
 8011810:	08014cfc 	.word	0x08014cfc
 8011814:	08014d1c 	.word	0x08014d1c
 8011818:	08014cdc 	.word	0x08014cdc

0801181c <__swsetup_r>:
 801181c:	4b32      	ldr	r3, [pc, #200]	; (80118e8 <__swsetup_r+0xcc>)
 801181e:	b570      	push	{r4, r5, r6, lr}
 8011820:	681d      	ldr	r5, [r3, #0]
 8011822:	4606      	mov	r6, r0
 8011824:	460c      	mov	r4, r1
 8011826:	b125      	cbz	r5, 8011832 <__swsetup_r+0x16>
 8011828:	69ab      	ldr	r3, [r5, #24]
 801182a:	b913      	cbnz	r3, 8011832 <__swsetup_r+0x16>
 801182c:	4628      	mov	r0, r5
 801182e:	f000 ff97 	bl	8012760 <__sinit>
 8011832:	4b2e      	ldr	r3, [pc, #184]	; (80118ec <__swsetup_r+0xd0>)
 8011834:	429c      	cmp	r4, r3
 8011836:	d10f      	bne.n	8011858 <__swsetup_r+0x3c>
 8011838:	686c      	ldr	r4, [r5, #4]
 801183a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801183e:	b29a      	uxth	r2, r3
 8011840:	0715      	lsls	r5, r2, #28
 8011842:	d42c      	bmi.n	801189e <__swsetup_r+0x82>
 8011844:	06d0      	lsls	r0, r2, #27
 8011846:	d411      	bmi.n	801186c <__swsetup_r+0x50>
 8011848:	2209      	movs	r2, #9
 801184a:	6032      	str	r2, [r6, #0]
 801184c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011850:	81a3      	strh	r3, [r4, #12]
 8011852:	f04f 30ff 	mov.w	r0, #4294967295
 8011856:	e03e      	b.n	80118d6 <__swsetup_r+0xba>
 8011858:	4b25      	ldr	r3, [pc, #148]	; (80118f0 <__swsetup_r+0xd4>)
 801185a:	429c      	cmp	r4, r3
 801185c:	d101      	bne.n	8011862 <__swsetup_r+0x46>
 801185e:	68ac      	ldr	r4, [r5, #8]
 8011860:	e7eb      	b.n	801183a <__swsetup_r+0x1e>
 8011862:	4b24      	ldr	r3, [pc, #144]	; (80118f4 <__swsetup_r+0xd8>)
 8011864:	429c      	cmp	r4, r3
 8011866:	bf08      	it	eq
 8011868:	68ec      	ldreq	r4, [r5, #12]
 801186a:	e7e6      	b.n	801183a <__swsetup_r+0x1e>
 801186c:	0751      	lsls	r1, r2, #29
 801186e:	d512      	bpl.n	8011896 <__swsetup_r+0x7a>
 8011870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011872:	b141      	cbz	r1, 8011886 <__swsetup_r+0x6a>
 8011874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011878:	4299      	cmp	r1, r3
 801187a:	d002      	beq.n	8011882 <__swsetup_r+0x66>
 801187c:	4630      	mov	r0, r6
 801187e:	f001 fb5d 	bl	8012f3c <_free_r>
 8011882:	2300      	movs	r3, #0
 8011884:	6363      	str	r3, [r4, #52]	; 0x34
 8011886:	89a3      	ldrh	r3, [r4, #12]
 8011888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801188c:	81a3      	strh	r3, [r4, #12]
 801188e:	2300      	movs	r3, #0
 8011890:	6063      	str	r3, [r4, #4]
 8011892:	6923      	ldr	r3, [r4, #16]
 8011894:	6023      	str	r3, [r4, #0]
 8011896:	89a3      	ldrh	r3, [r4, #12]
 8011898:	f043 0308 	orr.w	r3, r3, #8
 801189c:	81a3      	strh	r3, [r4, #12]
 801189e:	6923      	ldr	r3, [r4, #16]
 80118a0:	b94b      	cbnz	r3, 80118b6 <__swsetup_r+0x9a>
 80118a2:	89a3      	ldrh	r3, [r4, #12]
 80118a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118ac:	d003      	beq.n	80118b6 <__swsetup_r+0x9a>
 80118ae:	4621      	mov	r1, r4
 80118b0:	4630      	mov	r0, r6
 80118b2:	f001 f811 	bl	80128d8 <__smakebuf_r>
 80118b6:	89a2      	ldrh	r2, [r4, #12]
 80118b8:	f012 0301 	ands.w	r3, r2, #1
 80118bc:	d00c      	beq.n	80118d8 <__swsetup_r+0xbc>
 80118be:	2300      	movs	r3, #0
 80118c0:	60a3      	str	r3, [r4, #8]
 80118c2:	6963      	ldr	r3, [r4, #20]
 80118c4:	425b      	negs	r3, r3
 80118c6:	61a3      	str	r3, [r4, #24]
 80118c8:	6923      	ldr	r3, [r4, #16]
 80118ca:	b953      	cbnz	r3, 80118e2 <__swsetup_r+0xc6>
 80118cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80118d4:	d1ba      	bne.n	801184c <__swsetup_r+0x30>
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
 80118d8:	0792      	lsls	r2, r2, #30
 80118da:	bf58      	it	pl
 80118dc:	6963      	ldrpl	r3, [r4, #20]
 80118de:	60a3      	str	r3, [r4, #8]
 80118e0:	e7f2      	b.n	80118c8 <__swsetup_r+0xac>
 80118e2:	2000      	movs	r0, #0
 80118e4:	e7f7      	b.n	80118d6 <__swsetup_r+0xba>
 80118e6:	bf00      	nop
 80118e8:	20001dac 	.word	0x20001dac
 80118ec:	08014cfc 	.word	0x08014cfc
 80118f0:	08014d1c 	.word	0x08014d1c
 80118f4:	08014cdc 	.word	0x08014cdc

080118f8 <quorem>:
 80118f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	6903      	ldr	r3, [r0, #16]
 80118fe:	690c      	ldr	r4, [r1, #16]
 8011900:	42a3      	cmp	r3, r4
 8011902:	4680      	mov	r8, r0
 8011904:	f2c0 8082 	blt.w	8011a0c <quorem+0x114>
 8011908:	3c01      	subs	r4, #1
 801190a:	f101 0714 	add.w	r7, r1, #20
 801190e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011912:	f100 0614 	add.w	r6, r0, #20
 8011916:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801191a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801191e:	eb06 030c 	add.w	r3, r6, ip
 8011922:	3501      	adds	r5, #1
 8011924:	eb07 090c 	add.w	r9, r7, ip
 8011928:	9301      	str	r3, [sp, #4]
 801192a:	fbb0 f5f5 	udiv	r5, r0, r5
 801192e:	b395      	cbz	r5, 8011996 <quorem+0x9e>
 8011930:	f04f 0a00 	mov.w	sl, #0
 8011934:	4638      	mov	r0, r7
 8011936:	46b6      	mov	lr, r6
 8011938:	46d3      	mov	fp, sl
 801193a:	f850 2b04 	ldr.w	r2, [r0], #4
 801193e:	b293      	uxth	r3, r2
 8011940:	fb05 a303 	mla	r3, r5, r3, sl
 8011944:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011948:	b29b      	uxth	r3, r3
 801194a:	ebab 0303 	sub.w	r3, fp, r3
 801194e:	0c12      	lsrs	r2, r2, #16
 8011950:	f8de b000 	ldr.w	fp, [lr]
 8011954:	fb05 a202 	mla	r2, r5, r2, sl
 8011958:	fa13 f38b 	uxtah	r3, r3, fp
 801195c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011960:	fa1f fb82 	uxth.w	fp, r2
 8011964:	f8de 2000 	ldr.w	r2, [lr]
 8011968:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801196c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011970:	b29b      	uxth	r3, r3
 8011972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011976:	4581      	cmp	r9, r0
 8011978:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801197c:	f84e 3b04 	str.w	r3, [lr], #4
 8011980:	d2db      	bcs.n	801193a <quorem+0x42>
 8011982:	f856 300c 	ldr.w	r3, [r6, ip]
 8011986:	b933      	cbnz	r3, 8011996 <quorem+0x9e>
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	3b04      	subs	r3, #4
 801198c:	429e      	cmp	r6, r3
 801198e:	461a      	mov	r2, r3
 8011990:	d330      	bcc.n	80119f4 <quorem+0xfc>
 8011992:	f8c8 4010 	str.w	r4, [r8, #16]
 8011996:	4640      	mov	r0, r8
 8011998:	f001 f9fc 	bl	8012d94 <__mcmp>
 801199c:	2800      	cmp	r0, #0
 801199e:	db25      	blt.n	80119ec <quorem+0xf4>
 80119a0:	3501      	adds	r5, #1
 80119a2:	4630      	mov	r0, r6
 80119a4:	f04f 0c00 	mov.w	ip, #0
 80119a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80119ac:	f8d0 e000 	ldr.w	lr, [r0]
 80119b0:	b293      	uxth	r3, r2
 80119b2:	ebac 0303 	sub.w	r3, ip, r3
 80119b6:	0c12      	lsrs	r2, r2, #16
 80119b8:	fa13 f38e 	uxtah	r3, r3, lr
 80119bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80119c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119ca:	45b9      	cmp	r9, r7
 80119cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80119d0:	f840 3b04 	str.w	r3, [r0], #4
 80119d4:	d2e8      	bcs.n	80119a8 <quorem+0xb0>
 80119d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80119da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80119de:	b92a      	cbnz	r2, 80119ec <quorem+0xf4>
 80119e0:	3b04      	subs	r3, #4
 80119e2:	429e      	cmp	r6, r3
 80119e4:	461a      	mov	r2, r3
 80119e6:	d30b      	bcc.n	8011a00 <quorem+0x108>
 80119e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80119ec:	4628      	mov	r0, r5
 80119ee:	b003      	add	sp, #12
 80119f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f4:	6812      	ldr	r2, [r2, #0]
 80119f6:	3b04      	subs	r3, #4
 80119f8:	2a00      	cmp	r2, #0
 80119fa:	d1ca      	bne.n	8011992 <quorem+0x9a>
 80119fc:	3c01      	subs	r4, #1
 80119fe:	e7c5      	b.n	801198c <quorem+0x94>
 8011a00:	6812      	ldr	r2, [r2, #0]
 8011a02:	3b04      	subs	r3, #4
 8011a04:	2a00      	cmp	r2, #0
 8011a06:	d1ef      	bne.n	80119e8 <quorem+0xf0>
 8011a08:	3c01      	subs	r4, #1
 8011a0a:	e7ea      	b.n	80119e2 <quorem+0xea>
 8011a0c:	2000      	movs	r0, #0
 8011a0e:	e7ee      	b.n	80119ee <quorem+0xf6>

08011a10 <_dtoa_r>:
 8011a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a14:	ec57 6b10 	vmov	r6, r7, d0
 8011a18:	b097      	sub	sp, #92	; 0x5c
 8011a1a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011a1c:	9106      	str	r1, [sp, #24]
 8011a1e:	4604      	mov	r4, r0
 8011a20:	920b      	str	r2, [sp, #44]	; 0x2c
 8011a22:	9312      	str	r3, [sp, #72]	; 0x48
 8011a24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011a28:	e9cd 6700 	strd	r6, r7, [sp]
 8011a2c:	b93d      	cbnz	r5, 8011a3e <_dtoa_r+0x2e>
 8011a2e:	2010      	movs	r0, #16
 8011a30:	f000 ff92 	bl	8012958 <malloc>
 8011a34:	6260      	str	r0, [r4, #36]	; 0x24
 8011a36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011a3a:	6005      	str	r5, [r0, #0]
 8011a3c:	60c5      	str	r5, [r0, #12]
 8011a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a40:	6819      	ldr	r1, [r3, #0]
 8011a42:	b151      	cbz	r1, 8011a5a <_dtoa_r+0x4a>
 8011a44:	685a      	ldr	r2, [r3, #4]
 8011a46:	604a      	str	r2, [r1, #4]
 8011a48:	2301      	movs	r3, #1
 8011a4a:	4093      	lsls	r3, r2
 8011a4c:	608b      	str	r3, [r1, #8]
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f000 ffbe 	bl	80129d0 <_Bfree>
 8011a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a56:	2200      	movs	r2, #0
 8011a58:	601a      	str	r2, [r3, #0]
 8011a5a:	1e3b      	subs	r3, r7, #0
 8011a5c:	bfbb      	ittet	lt
 8011a5e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011a62:	9301      	strlt	r3, [sp, #4]
 8011a64:	2300      	movge	r3, #0
 8011a66:	2201      	movlt	r2, #1
 8011a68:	bfac      	ite	ge
 8011a6a:	f8c8 3000 	strge.w	r3, [r8]
 8011a6e:	f8c8 2000 	strlt.w	r2, [r8]
 8011a72:	4baf      	ldr	r3, [pc, #700]	; (8011d30 <_dtoa_r+0x320>)
 8011a74:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011a78:	ea33 0308 	bics.w	r3, r3, r8
 8011a7c:	d114      	bne.n	8011aa8 <_dtoa_r+0x98>
 8011a7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a80:	f242 730f 	movw	r3, #9999	; 0x270f
 8011a84:	6013      	str	r3, [r2, #0]
 8011a86:	9b00      	ldr	r3, [sp, #0]
 8011a88:	b923      	cbnz	r3, 8011a94 <_dtoa_r+0x84>
 8011a8a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	f000 8542 	beq.w	8012518 <_dtoa_r+0xb08>
 8011a94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a96:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011d44 <_dtoa_r+0x334>
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	f000 8544 	beq.w	8012528 <_dtoa_r+0xb18>
 8011aa0:	f10b 0303 	add.w	r3, fp, #3
 8011aa4:	f000 bd3e 	b.w	8012524 <_dtoa_r+0xb14>
 8011aa8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011aac:	2200      	movs	r2, #0
 8011aae:	2300      	movs	r3, #0
 8011ab0:	4630      	mov	r0, r6
 8011ab2:	4639      	mov	r1, r7
 8011ab4:	f7ef f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ab8:	4681      	mov	r9, r0
 8011aba:	b168      	cbz	r0, 8011ad8 <_dtoa_r+0xc8>
 8011abc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011abe:	2301      	movs	r3, #1
 8011ac0:	6013      	str	r3, [r2, #0]
 8011ac2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f000 8524 	beq.w	8012512 <_dtoa_r+0xb02>
 8011aca:	4b9a      	ldr	r3, [pc, #616]	; (8011d34 <_dtoa_r+0x324>)
 8011acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011ace:	f103 3bff 	add.w	fp, r3, #4294967295
 8011ad2:	6013      	str	r3, [r2, #0]
 8011ad4:	f000 bd28 	b.w	8012528 <_dtoa_r+0xb18>
 8011ad8:	aa14      	add	r2, sp, #80	; 0x50
 8011ada:	a915      	add	r1, sp, #84	; 0x54
 8011adc:	ec47 6b10 	vmov	d0, r6, r7
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f001 f9ce 	bl	8012e82 <__d2b>
 8011ae6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011aea:	9004      	str	r0, [sp, #16]
 8011aec:	2d00      	cmp	r5, #0
 8011aee:	d07c      	beq.n	8011bea <_dtoa_r+0x1da>
 8011af0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011af4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011af8:	46b2      	mov	sl, r6
 8011afa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8011afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011b02:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011b06:	2200      	movs	r2, #0
 8011b08:	4b8b      	ldr	r3, [pc, #556]	; (8011d38 <_dtoa_r+0x328>)
 8011b0a:	4650      	mov	r0, sl
 8011b0c:	4659      	mov	r1, fp
 8011b0e:	f7ee fbbb 	bl	8000288 <__aeabi_dsub>
 8011b12:	a381      	add	r3, pc, #516	; (adr r3, 8011d18 <_dtoa_r+0x308>)
 8011b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b18:	f7ee fd6e 	bl	80005f8 <__aeabi_dmul>
 8011b1c:	a380      	add	r3, pc, #512	; (adr r3, 8011d20 <_dtoa_r+0x310>)
 8011b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b22:	f7ee fbb3 	bl	800028c <__adddf3>
 8011b26:	4606      	mov	r6, r0
 8011b28:	4628      	mov	r0, r5
 8011b2a:	460f      	mov	r7, r1
 8011b2c:	f7ee fcfa 	bl	8000524 <__aeabi_i2d>
 8011b30:	a37d      	add	r3, pc, #500	; (adr r3, 8011d28 <_dtoa_r+0x318>)
 8011b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b36:	f7ee fd5f 	bl	80005f8 <__aeabi_dmul>
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	4630      	mov	r0, r6
 8011b40:	4639      	mov	r1, r7
 8011b42:	f7ee fba3 	bl	800028c <__adddf3>
 8011b46:	4606      	mov	r6, r0
 8011b48:	460f      	mov	r7, r1
 8011b4a:	f7ef f805 	bl	8000b58 <__aeabi_d2iz>
 8011b4e:	2200      	movs	r2, #0
 8011b50:	4682      	mov	sl, r0
 8011b52:	2300      	movs	r3, #0
 8011b54:	4630      	mov	r0, r6
 8011b56:	4639      	mov	r1, r7
 8011b58:	f7ee ffc0 	bl	8000adc <__aeabi_dcmplt>
 8011b5c:	b148      	cbz	r0, 8011b72 <_dtoa_r+0x162>
 8011b5e:	4650      	mov	r0, sl
 8011b60:	f7ee fce0 	bl	8000524 <__aeabi_i2d>
 8011b64:	4632      	mov	r2, r6
 8011b66:	463b      	mov	r3, r7
 8011b68:	f7ee ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b6c:	b908      	cbnz	r0, 8011b72 <_dtoa_r+0x162>
 8011b6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b72:	f1ba 0f16 	cmp.w	sl, #22
 8011b76:	d859      	bhi.n	8011c2c <_dtoa_r+0x21c>
 8011b78:	4970      	ldr	r1, [pc, #448]	; (8011d3c <_dtoa_r+0x32c>)
 8011b7a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b86:	f7ee ffc7 	bl	8000b18 <__aeabi_dcmpgt>
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d050      	beq.n	8011c30 <_dtoa_r+0x220>
 8011b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b92:	2300      	movs	r3, #0
 8011b94:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b98:	1b5d      	subs	r5, r3, r5
 8011b9a:	f1b5 0801 	subs.w	r8, r5, #1
 8011b9e:	bf49      	itett	mi
 8011ba0:	f1c5 0301 	rsbmi	r3, r5, #1
 8011ba4:	2300      	movpl	r3, #0
 8011ba6:	9305      	strmi	r3, [sp, #20]
 8011ba8:	f04f 0800 	movmi.w	r8, #0
 8011bac:	bf58      	it	pl
 8011bae:	9305      	strpl	r3, [sp, #20]
 8011bb0:	f1ba 0f00 	cmp.w	sl, #0
 8011bb4:	db3e      	blt.n	8011c34 <_dtoa_r+0x224>
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	44d0      	add	r8, sl
 8011bba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011bbe:	9307      	str	r3, [sp, #28]
 8011bc0:	9b06      	ldr	r3, [sp, #24]
 8011bc2:	2b09      	cmp	r3, #9
 8011bc4:	f200 8090 	bhi.w	8011ce8 <_dtoa_r+0x2d8>
 8011bc8:	2b05      	cmp	r3, #5
 8011bca:	bfc4      	itt	gt
 8011bcc:	3b04      	subgt	r3, #4
 8011bce:	9306      	strgt	r3, [sp, #24]
 8011bd0:	9b06      	ldr	r3, [sp, #24]
 8011bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8011bd6:	bfcc      	ite	gt
 8011bd8:	2500      	movgt	r5, #0
 8011bda:	2501      	movle	r5, #1
 8011bdc:	2b03      	cmp	r3, #3
 8011bde:	f200 808f 	bhi.w	8011d00 <_dtoa_r+0x2f0>
 8011be2:	e8df f003 	tbb	[pc, r3]
 8011be6:	7f7d      	.short	0x7f7d
 8011be8:	7131      	.short	0x7131
 8011bea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8011bee:	441d      	add	r5, r3
 8011bf0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011bf4:	2820      	cmp	r0, #32
 8011bf6:	dd13      	ble.n	8011c20 <_dtoa_r+0x210>
 8011bf8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011bfc:	9b00      	ldr	r3, [sp, #0]
 8011bfe:	fa08 f800 	lsl.w	r8, r8, r0
 8011c02:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011c06:	fa23 f000 	lsr.w	r0, r3, r0
 8011c0a:	ea48 0000 	orr.w	r0, r8, r0
 8011c0e:	f7ee fc79 	bl	8000504 <__aeabi_ui2d>
 8011c12:	2301      	movs	r3, #1
 8011c14:	4682      	mov	sl, r0
 8011c16:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8011c1a:	3d01      	subs	r5, #1
 8011c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8011c1e:	e772      	b.n	8011b06 <_dtoa_r+0xf6>
 8011c20:	9b00      	ldr	r3, [sp, #0]
 8011c22:	f1c0 0020 	rsb	r0, r0, #32
 8011c26:	fa03 f000 	lsl.w	r0, r3, r0
 8011c2a:	e7f0      	b.n	8011c0e <_dtoa_r+0x1fe>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e7b1      	b.n	8011b94 <_dtoa_r+0x184>
 8011c30:	900f      	str	r0, [sp, #60]	; 0x3c
 8011c32:	e7b0      	b.n	8011b96 <_dtoa_r+0x186>
 8011c34:	9b05      	ldr	r3, [sp, #20]
 8011c36:	eba3 030a 	sub.w	r3, r3, sl
 8011c3a:	9305      	str	r3, [sp, #20]
 8011c3c:	f1ca 0300 	rsb	r3, sl, #0
 8011c40:	9307      	str	r3, [sp, #28]
 8011c42:	2300      	movs	r3, #0
 8011c44:	930e      	str	r3, [sp, #56]	; 0x38
 8011c46:	e7bb      	b.n	8011bc0 <_dtoa_r+0x1b0>
 8011c48:	2301      	movs	r3, #1
 8011c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8011c4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	dd59      	ble.n	8011d06 <_dtoa_r+0x2f6>
 8011c52:	9302      	str	r3, [sp, #8]
 8011c54:	4699      	mov	r9, r3
 8011c56:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011c58:	2200      	movs	r2, #0
 8011c5a:	6072      	str	r2, [r6, #4]
 8011c5c:	2204      	movs	r2, #4
 8011c5e:	f102 0014 	add.w	r0, r2, #20
 8011c62:	4298      	cmp	r0, r3
 8011c64:	6871      	ldr	r1, [r6, #4]
 8011c66:	d953      	bls.n	8011d10 <_dtoa_r+0x300>
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f000 fe7d 	bl	8012968 <_Balloc>
 8011c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c70:	6030      	str	r0, [r6, #0]
 8011c72:	f1b9 0f0e 	cmp.w	r9, #14
 8011c76:	f8d3 b000 	ldr.w	fp, [r3]
 8011c7a:	f200 80e6 	bhi.w	8011e4a <_dtoa_r+0x43a>
 8011c7e:	2d00      	cmp	r5, #0
 8011c80:	f000 80e3 	beq.w	8011e4a <_dtoa_r+0x43a>
 8011c84:	ed9d 7b00 	vldr	d7, [sp]
 8011c88:	f1ba 0f00 	cmp.w	sl, #0
 8011c8c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011c90:	dd74      	ble.n	8011d7c <_dtoa_r+0x36c>
 8011c92:	4a2a      	ldr	r2, [pc, #168]	; (8011d3c <_dtoa_r+0x32c>)
 8011c94:	f00a 030f 	and.w	r3, sl, #15
 8011c98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011c9c:	ed93 7b00 	vldr	d7, [r3]
 8011ca0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011ca4:	06f0      	lsls	r0, r6, #27
 8011ca6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011caa:	d565      	bpl.n	8011d78 <_dtoa_r+0x368>
 8011cac:	4b24      	ldr	r3, [pc, #144]	; (8011d40 <_dtoa_r+0x330>)
 8011cae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011cb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011cb6:	f7ee fdc9 	bl	800084c <__aeabi_ddiv>
 8011cba:	e9cd 0100 	strd	r0, r1, [sp]
 8011cbe:	f006 060f 	and.w	r6, r6, #15
 8011cc2:	2503      	movs	r5, #3
 8011cc4:	4f1e      	ldr	r7, [pc, #120]	; (8011d40 <_dtoa_r+0x330>)
 8011cc6:	e04c      	b.n	8011d62 <_dtoa_r+0x352>
 8011cc8:	2301      	movs	r3, #1
 8011cca:	930a      	str	r3, [sp, #40]	; 0x28
 8011ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cce:	4453      	add	r3, sl
 8011cd0:	f103 0901 	add.w	r9, r3, #1
 8011cd4:	9302      	str	r3, [sp, #8]
 8011cd6:	464b      	mov	r3, r9
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	bfb8      	it	lt
 8011cdc:	2301      	movlt	r3, #1
 8011cde:	e7ba      	b.n	8011c56 <_dtoa_r+0x246>
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	e7b2      	b.n	8011c4a <_dtoa_r+0x23a>
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	e7f0      	b.n	8011cca <_dtoa_r+0x2ba>
 8011ce8:	2501      	movs	r5, #1
 8011cea:	2300      	movs	r3, #0
 8011cec:	9306      	str	r3, [sp, #24]
 8011cee:	950a      	str	r5, [sp, #40]	; 0x28
 8011cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf4:	9302      	str	r3, [sp, #8]
 8011cf6:	4699      	mov	r9, r3
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	2312      	movs	r3, #18
 8011cfc:	920b      	str	r2, [sp, #44]	; 0x2c
 8011cfe:	e7aa      	b.n	8011c56 <_dtoa_r+0x246>
 8011d00:	2301      	movs	r3, #1
 8011d02:	930a      	str	r3, [sp, #40]	; 0x28
 8011d04:	e7f4      	b.n	8011cf0 <_dtoa_r+0x2e0>
 8011d06:	2301      	movs	r3, #1
 8011d08:	9302      	str	r3, [sp, #8]
 8011d0a:	4699      	mov	r9, r3
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	e7f5      	b.n	8011cfc <_dtoa_r+0x2ec>
 8011d10:	3101      	adds	r1, #1
 8011d12:	6071      	str	r1, [r6, #4]
 8011d14:	0052      	lsls	r2, r2, #1
 8011d16:	e7a2      	b.n	8011c5e <_dtoa_r+0x24e>
 8011d18:	636f4361 	.word	0x636f4361
 8011d1c:	3fd287a7 	.word	0x3fd287a7
 8011d20:	8b60c8b3 	.word	0x8b60c8b3
 8011d24:	3fc68a28 	.word	0x3fc68a28
 8011d28:	509f79fb 	.word	0x509f79fb
 8011d2c:	3fd34413 	.word	0x3fd34413
 8011d30:	7ff00000 	.word	0x7ff00000
 8011d34:	08014ca9 	.word	0x08014ca9
 8011d38:	3ff80000 	.word	0x3ff80000
 8011d3c:	08014d68 	.word	0x08014d68
 8011d40:	08014d40 	.word	0x08014d40
 8011d44:	08014cd5 	.word	0x08014cd5
 8011d48:	07f1      	lsls	r1, r6, #31
 8011d4a:	d508      	bpl.n	8011d5e <_dtoa_r+0x34e>
 8011d4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011d50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d54:	f7ee fc50 	bl	80005f8 <__aeabi_dmul>
 8011d58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011d5c:	3501      	adds	r5, #1
 8011d5e:	1076      	asrs	r6, r6, #1
 8011d60:	3708      	adds	r7, #8
 8011d62:	2e00      	cmp	r6, #0
 8011d64:	d1f0      	bne.n	8011d48 <_dtoa_r+0x338>
 8011d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011d6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d6e:	f7ee fd6d 	bl	800084c <__aeabi_ddiv>
 8011d72:	e9cd 0100 	strd	r0, r1, [sp]
 8011d76:	e01a      	b.n	8011dae <_dtoa_r+0x39e>
 8011d78:	2502      	movs	r5, #2
 8011d7a:	e7a3      	b.n	8011cc4 <_dtoa_r+0x2b4>
 8011d7c:	f000 80a0 	beq.w	8011ec0 <_dtoa_r+0x4b0>
 8011d80:	f1ca 0600 	rsb	r6, sl, #0
 8011d84:	4b9f      	ldr	r3, [pc, #636]	; (8012004 <_dtoa_r+0x5f4>)
 8011d86:	4fa0      	ldr	r7, [pc, #640]	; (8012008 <_dtoa_r+0x5f8>)
 8011d88:	f006 020f 	and.w	r2, r6, #15
 8011d8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011d98:	f7ee fc2e 	bl	80005f8 <__aeabi_dmul>
 8011d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8011da0:	1136      	asrs	r6, r6, #4
 8011da2:	2300      	movs	r3, #0
 8011da4:	2502      	movs	r5, #2
 8011da6:	2e00      	cmp	r6, #0
 8011da8:	d17f      	bne.n	8011eaa <_dtoa_r+0x49a>
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d1e1      	bne.n	8011d72 <_dtoa_r+0x362>
 8011dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	f000 8087 	beq.w	8011ec4 <_dtoa_r+0x4b4>
 8011db6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	4b93      	ldr	r3, [pc, #588]	; (801200c <_dtoa_r+0x5fc>)
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	4639      	mov	r1, r7
 8011dc2:	f7ee fe8b 	bl	8000adc <__aeabi_dcmplt>
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d07c      	beq.n	8011ec4 <_dtoa_r+0x4b4>
 8011dca:	f1b9 0f00 	cmp.w	r9, #0
 8011dce:	d079      	beq.n	8011ec4 <_dtoa_r+0x4b4>
 8011dd0:	9b02      	ldr	r3, [sp, #8]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	dd35      	ble.n	8011e42 <_dtoa_r+0x432>
 8011dd6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011dda:	9308      	str	r3, [sp, #32]
 8011ddc:	4639      	mov	r1, r7
 8011dde:	2200      	movs	r2, #0
 8011de0:	4b8b      	ldr	r3, [pc, #556]	; (8012010 <_dtoa_r+0x600>)
 8011de2:	4630      	mov	r0, r6
 8011de4:	f7ee fc08 	bl	80005f8 <__aeabi_dmul>
 8011de8:	e9cd 0100 	strd	r0, r1, [sp]
 8011dec:	9f02      	ldr	r7, [sp, #8]
 8011dee:	3501      	adds	r5, #1
 8011df0:	4628      	mov	r0, r5
 8011df2:	f7ee fb97 	bl	8000524 <__aeabi_i2d>
 8011df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dfa:	f7ee fbfd 	bl	80005f8 <__aeabi_dmul>
 8011dfe:	2200      	movs	r2, #0
 8011e00:	4b84      	ldr	r3, [pc, #528]	; (8012014 <_dtoa_r+0x604>)
 8011e02:	f7ee fa43 	bl	800028c <__adddf3>
 8011e06:	4605      	mov	r5, r0
 8011e08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011e0c:	2f00      	cmp	r7, #0
 8011e0e:	d15d      	bne.n	8011ecc <_dtoa_r+0x4bc>
 8011e10:	2200      	movs	r2, #0
 8011e12:	4b81      	ldr	r3, [pc, #516]	; (8012018 <_dtoa_r+0x608>)
 8011e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e18:	f7ee fa36 	bl	8000288 <__aeabi_dsub>
 8011e1c:	462a      	mov	r2, r5
 8011e1e:	4633      	mov	r3, r6
 8011e20:	e9cd 0100 	strd	r0, r1, [sp]
 8011e24:	f7ee fe78 	bl	8000b18 <__aeabi_dcmpgt>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	f040 8288 	bne.w	801233e <_dtoa_r+0x92e>
 8011e2e:	462a      	mov	r2, r5
 8011e30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e38:	f7ee fe50 	bl	8000adc <__aeabi_dcmplt>
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	f040 827c 	bne.w	801233a <_dtoa_r+0x92a>
 8011e42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011e46:	e9cd 2300 	strd	r2, r3, [sp]
 8011e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	f2c0 8150 	blt.w	80120f2 <_dtoa_r+0x6e2>
 8011e52:	f1ba 0f0e 	cmp.w	sl, #14
 8011e56:	f300 814c 	bgt.w	80120f2 <_dtoa_r+0x6e2>
 8011e5a:	4b6a      	ldr	r3, [pc, #424]	; (8012004 <_dtoa_r+0x5f4>)
 8011e5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011e60:	ed93 7b00 	vldr	d7, [r3]
 8011e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011e6c:	f280 80d8 	bge.w	8012020 <_dtoa_r+0x610>
 8011e70:	f1b9 0f00 	cmp.w	r9, #0
 8011e74:	f300 80d4 	bgt.w	8012020 <_dtoa_r+0x610>
 8011e78:	f040 825e 	bne.w	8012338 <_dtoa_r+0x928>
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	4b66      	ldr	r3, [pc, #408]	; (8012018 <_dtoa_r+0x608>)
 8011e80:	ec51 0b17 	vmov	r0, r1, d7
 8011e84:	f7ee fbb8 	bl	80005f8 <__aeabi_dmul>
 8011e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e8c:	f7ee fe3a 	bl	8000b04 <__aeabi_dcmpge>
 8011e90:	464f      	mov	r7, r9
 8011e92:	464e      	mov	r6, r9
 8011e94:	2800      	cmp	r0, #0
 8011e96:	f040 8234 	bne.w	8012302 <_dtoa_r+0x8f2>
 8011e9a:	2331      	movs	r3, #49	; 0x31
 8011e9c:	f10b 0501 	add.w	r5, fp, #1
 8011ea0:	f88b 3000 	strb.w	r3, [fp]
 8011ea4:	f10a 0a01 	add.w	sl, sl, #1
 8011ea8:	e22f      	b.n	801230a <_dtoa_r+0x8fa>
 8011eaa:	07f2      	lsls	r2, r6, #31
 8011eac:	d505      	bpl.n	8011eba <_dtoa_r+0x4aa>
 8011eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011eb2:	f7ee fba1 	bl	80005f8 <__aeabi_dmul>
 8011eb6:	3501      	adds	r5, #1
 8011eb8:	2301      	movs	r3, #1
 8011eba:	1076      	asrs	r6, r6, #1
 8011ebc:	3708      	adds	r7, #8
 8011ebe:	e772      	b.n	8011da6 <_dtoa_r+0x396>
 8011ec0:	2502      	movs	r5, #2
 8011ec2:	e774      	b.n	8011dae <_dtoa_r+0x39e>
 8011ec4:	f8cd a020 	str.w	sl, [sp, #32]
 8011ec8:	464f      	mov	r7, r9
 8011eca:	e791      	b.n	8011df0 <_dtoa_r+0x3e0>
 8011ecc:	4b4d      	ldr	r3, [pc, #308]	; (8012004 <_dtoa_r+0x5f4>)
 8011ece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011ed2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d047      	beq.n	8011f6c <_dtoa_r+0x55c>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	494e      	ldr	r1, [pc, #312]	; (801201c <_dtoa_r+0x60c>)
 8011ee4:	f7ee fcb2 	bl	800084c <__aeabi_ddiv>
 8011ee8:	462a      	mov	r2, r5
 8011eea:	4633      	mov	r3, r6
 8011eec:	f7ee f9cc 	bl	8000288 <__aeabi_dsub>
 8011ef0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011ef4:	465d      	mov	r5, fp
 8011ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011efa:	f7ee fe2d 	bl	8000b58 <__aeabi_d2iz>
 8011efe:	4606      	mov	r6, r0
 8011f00:	f7ee fb10 	bl	8000524 <__aeabi_i2d>
 8011f04:	4602      	mov	r2, r0
 8011f06:	460b      	mov	r3, r1
 8011f08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f0c:	f7ee f9bc 	bl	8000288 <__aeabi_dsub>
 8011f10:	3630      	adds	r6, #48	; 0x30
 8011f12:	f805 6b01 	strb.w	r6, [r5], #1
 8011f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011f1a:	e9cd 0100 	strd	r0, r1, [sp]
 8011f1e:	f7ee fddd 	bl	8000adc <__aeabi_dcmplt>
 8011f22:	2800      	cmp	r0, #0
 8011f24:	d163      	bne.n	8011fee <_dtoa_r+0x5de>
 8011f26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f2a:	2000      	movs	r0, #0
 8011f2c:	4937      	ldr	r1, [pc, #220]	; (801200c <_dtoa_r+0x5fc>)
 8011f2e:	f7ee f9ab 	bl	8000288 <__aeabi_dsub>
 8011f32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011f36:	f7ee fdd1 	bl	8000adc <__aeabi_dcmplt>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	f040 80b7 	bne.w	80120ae <_dtoa_r+0x69e>
 8011f40:	eba5 030b 	sub.w	r3, r5, fp
 8011f44:	429f      	cmp	r7, r3
 8011f46:	f77f af7c 	ble.w	8011e42 <_dtoa_r+0x432>
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	4b30      	ldr	r3, [pc, #192]	; (8012010 <_dtoa_r+0x600>)
 8011f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011f52:	f7ee fb51 	bl	80005f8 <__aeabi_dmul>
 8011f56:	2200      	movs	r2, #0
 8011f58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011f5c:	4b2c      	ldr	r3, [pc, #176]	; (8012010 <_dtoa_r+0x600>)
 8011f5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f62:	f7ee fb49 	bl	80005f8 <__aeabi_dmul>
 8011f66:	e9cd 0100 	strd	r0, r1, [sp]
 8011f6a:	e7c4      	b.n	8011ef6 <_dtoa_r+0x4e6>
 8011f6c:	462a      	mov	r2, r5
 8011f6e:	4633      	mov	r3, r6
 8011f70:	f7ee fb42 	bl	80005f8 <__aeabi_dmul>
 8011f74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011f78:	eb0b 0507 	add.w	r5, fp, r7
 8011f7c:	465e      	mov	r6, fp
 8011f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f82:	f7ee fde9 	bl	8000b58 <__aeabi_d2iz>
 8011f86:	4607      	mov	r7, r0
 8011f88:	f7ee facc 	bl	8000524 <__aeabi_i2d>
 8011f8c:	3730      	adds	r7, #48	; 0x30
 8011f8e:	4602      	mov	r2, r0
 8011f90:	460b      	mov	r3, r1
 8011f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f96:	f7ee f977 	bl	8000288 <__aeabi_dsub>
 8011f9a:	f806 7b01 	strb.w	r7, [r6], #1
 8011f9e:	42ae      	cmp	r6, r5
 8011fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8011fa4:	f04f 0200 	mov.w	r2, #0
 8011fa8:	d126      	bne.n	8011ff8 <_dtoa_r+0x5e8>
 8011faa:	4b1c      	ldr	r3, [pc, #112]	; (801201c <_dtoa_r+0x60c>)
 8011fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011fb0:	f7ee f96c 	bl	800028c <__adddf3>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fbc:	f7ee fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8011fc0:	2800      	cmp	r0, #0
 8011fc2:	d174      	bne.n	80120ae <_dtoa_r+0x69e>
 8011fc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011fc8:	2000      	movs	r0, #0
 8011fca:	4914      	ldr	r1, [pc, #80]	; (801201c <_dtoa_r+0x60c>)
 8011fcc:	f7ee f95c 	bl	8000288 <__aeabi_dsub>
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	460b      	mov	r3, r1
 8011fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fd8:	f7ee fd80 	bl	8000adc <__aeabi_dcmplt>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	f43f af30 	beq.w	8011e42 <_dtoa_r+0x432>
 8011fe2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011fe6:	2b30      	cmp	r3, #48	; 0x30
 8011fe8:	f105 32ff 	add.w	r2, r5, #4294967295
 8011fec:	d002      	beq.n	8011ff4 <_dtoa_r+0x5e4>
 8011fee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011ff2:	e04a      	b.n	801208a <_dtoa_r+0x67a>
 8011ff4:	4615      	mov	r5, r2
 8011ff6:	e7f4      	b.n	8011fe2 <_dtoa_r+0x5d2>
 8011ff8:	4b05      	ldr	r3, [pc, #20]	; (8012010 <_dtoa_r+0x600>)
 8011ffa:	f7ee fafd 	bl	80005f8 <__aeabi_dmul>
 8011ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8012002:	e7bc      	b.n	8011f7e <_dtoa_r+0x56e>
 8012004:	08014d68 	.word	0x08014d68
 8012008:	08014d40 	.word	0x08014d40
 801200c:	3ff00000 	.word	0x3ff00000
 8012010:	40240000 	.word	0x40240000
 8012014:	401c0000 	.word	0x401c0000
 8012018:	40140000 	.word	0x40140000
 801201c:	3fe00000 	.word	0x3fe00000
 8012020:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012024:	465d      	mov	r5, fp
 8012026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801202a:	4630      	mov	r0, r6
 801202c:	4639      	mov	r1, r7
 801202e:	f7ee fc0d 	bl	800084c <__aeabi_ddiv>
 8012032:	f7ee fd91 	bl	8000b58 <__aeabi_d2iz>
 8012036:	4680      	mov	r8, r0
 8012038:	f7ee fa74 	bl	8000524 <__aeabi_i2d>
 801203c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012040:	f7ee fada 	bl	80005f8 <__aeabi_dmul>
 8012044:	4602      	mov	r2, r0
 8012046:	460b      	mov	r3, r1
 8012048:	4630      	mov	r0, r6
 801204a:	4639      	mov	r1, r7
 801204c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012050:	f7ee f91a 	bl	8000288 <__aeabi_dsub>
 8012054:	f805 6b01 	strb.w	r6, [r5], #1
 8012058:	eba5 060b 	sub.w	r6, r5, fp
 801205c:	45b1      	cmp	r9, r6
 801205e:	4602      	mov	r2, r0
 8012060:	460b      	mov	r3, r1
 8012062:	d139      	bne.n	80120d8 <_dtoa_r+0x6c8>
 8012064:	f7ee f912 	bl	800028c <__adddf3>
 8012068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801206c:	4606      	mov	r6, r0
 801206e:	460f      	mov	r7, r1
 8012070:	f7ee fd52 	bl	8000b18 <__aeabi_dcmpgt>
 8012074:	b9c8      	cbnz	r0, 80120aa <_dtoa_r+0x69a>
 8012076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801207a:	4630      	mov	r0, r6
 801207c:	4639      	mov	r1, r7
 801207e:	f7ee fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 8012082:	b110      	cbz	r0, 801208a <_dtoa_r+0x67a>
 8012084:	f018 0f01 	tst.w	r8, #1
 8012088:	d10f      	bne.n	80120aa <_dtoa_r+0x69a>
 801208a:	9904      	ldr	r1, [sp, #16]
 801208c:	4620      	mov	r0, r4
 801208e:	f000 fc9f 	bl	80129d0 <_Bfree>
 8012092:	2300      	movs	r3, #0
 8012094:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012096:	702b      	strb	r3, [r5, #0]
 8012098:	f10a 0301 	add.w	r3, sl, #1
 801209c:	6013      	str	r3, [r2, #0]
 801209e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	f000 8241 	beq.w	8012528 <_dtoa_r+0xb18>
 80120a6:	601d      	str	r5, [r3, #0]
 80120a8:	e23e      	b.n	8012528 <_dtoa_r+0xb18>
 80120aa:	f8cd a020 	str.w	sl, [sp, #32]
 80120ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80120b2:	2a39      	cmp	r2, #57	; 0x39
 80120b4:	f105 33ff 	add.w	r3, r5, #4294967295
 80120b8:	d108      	bne.n	80120cc <_dtoa_r+0x6bc>
 80120ba:	459b      	cmp	fp, r3
 80120bc:	d10a      	bne.n	80120d4 <_dtoa_r+0x6c4>
 80120be:	9b08      	ldr	r3, [sp, #32]
 80120c0:	3301      	adds	r3, #1
 80120c2:	9308      	str	r3, [sp, #32]
 80120c4:	2330      	movs	r3, #48	; 0x30
 80120c6:	f88b 3000 	strb.w	r3, [fp]
 80120ca:	465b      	mov	r3, fp
 80120cc:	781a      	ldrb	r2, [r3, #0]
 80120ce:	3201      	adds	r2, #1
 80120d0:	701a      	strb	r2, [r3, #0]
 80120d2:	e78c      	b.n	8011fee <_dtoa_r+0x5de>
 80120d4:	461d      	mov	r5, r3
 80120d6:	e7ea      	b.n	80120ae <_dtoa_r+0x69e>
 80120d8:	2200      	movs	r2, #0
 80120da:	4b9b      	ldr	r3, [pc, #620]	; (8012348 <_dtoa_r+0x938>)
 80120dc:	f7ee fa8c 	bl	80005f8 <__aeabi_dmul>
 80120e0:	2200      	movs	r2, #0
 80120e2:	2300      	movs	r3, #0
 80120e4:	4606      	mov	r6, r0
 80120e6:	460f      	mov	r7, r1
 80120e8:	f7ee fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d09a      	beq.n	8012026 <_dtoa_r+0x616>
 80120f0:	e7cb      	b.n	801208a <_dtoa_r+0x67a>
 80120f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120f4:	2a00      	cmp	r2, #0
 80120f6:	f000 808b 	beq.w	8012210 <_dtoa_r+0x800>
 80120fa:	9a06      	ldr	r2, [sp, #24]
 80120fc:	2a01      	cmp	r2, #1
 80120fe:	dc6e      	bgt.n	80121de <_dtoa_r+0x7ce>
 8012100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012102:	2a00      	cmp	r2, #0
 8012104:	d067      	beq.n	80121d6 <_dtoa_r+0x7c6>
 8012106:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801210a:	9f07      	ldr	r7, [sp, #28]
 801210c:	9d05      	ldr	r5, [sp, #20]
 801210e:	9a05      	ldr	r2, [sp, #20]
 8012110:	2101      	movs	r1, #1
 8012112:	441a      	add	r2, r3
 8012114:	4620      	mov	r0, r4
 8012116:	9205      	str	r2, [sp, #20]
 8012118:	4498      	add	r8, r3
 801211a:	f000 fcf9 	bl	8012b10 <__i2b>
 801211e:	4606      	mov	r6, r0
 8012120:	2d00      	cmp	r5, #0
 8012122:	dd0c      	ble.n	801213e <_dtoa_r+0x72e>
 8012124:	f1b8 0f00 	cmp.w	r8, #0
 8012128:	dd09      	ble.n	801213e <_dtoa_r+0x72e>
 801212a:	4545      	cmp	r5, r8
 801212c:	9a05      	ldr	r2, [sp, #20]
 801212e:	462b      	mov	r3, r5
 8012130:	bfa8      	it	ge
 8012132:	4643      	movge	r3, r8
 8012134:	1ad2      	subs	r2, r2, r3
 8012136:	9205      	str	r2, [sp, #20]
 8012138:	1aed      	subs	r5, r5, r3
 801213a:	eba8 0803 	sub.w	r8, r8, r3
 801213e:	9b07      	ldr	r3, [sp, #28]
 8012140:	b1eb      	cbz	r3, 801217e <_dtoa_r+0x76e>
 8012142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012144:	2b00      	cmp	r3, #0
 8012146:	d067      	beq.n	8012218 <_dtoa_r+0x808>
 8012148:	b18f      	cbz	r7, 801216e <_dtoa_r+0x75e>
 801214a:	4631      	mov	r1, r6
 801214c:	463a      	mov	r2, r7
 801214e:	4620      	mov	r0, r4
 8012150:	f000 fd7e 	bl	8012c50 <__pow5mult>
 8012154:	9a04      	ldr	r2, [sp, #16]
 8012156:	4601      	mov	r1, r0
 8012158:	4606      	mov	r6, r0
 801215a:	4620      	mov	r0, r4
 801215c:	f000 fce1 	bl	8012b22 <__multiply>
 8012160:	9904      	ldr	r1, [sp, #16]
 8012162:	9008      	str	r0, [sp, #32]
 8012164:	4620      	mov	r0, r4
 8012166:	f000 fc33 	bl	80129d0 <_Bfree>
 801216a:	9b08      	ldr	r3, [sp, #32]
 801216c:	9304      	str	r3, [sp, #16]
 801216e:	9b07      	ldr	r3, [sp, #28]
 8012170:	1bda      	subs	r2, r3, r7
 8012172:	d004      	beq.n	801217e <_dtoa_r+0x76e>
 8012174:	9904      	ldr	r1, [sp, #16]
 8012176:	4620      	mov	r0, r4
 8012178:	f000 fd6a 	bl	8012c50 <__pow5mult>
 801217c:	9004      	str	r0, [sp, #16]
 801217e:	2101      	movs	r1, #1
 8012180:	4620      	mov	r0, r4
 8012182:	f000 fcc5 	bl	8012b10 <__i2b>
 8012186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012188:	4607      	mov	r7, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	f000 81d0 	beq.w	8012530 <_dtoa_r+0xb20>
 8012190:	461a      	mov	r2, r3
 8012192:	4601      	mov	r1, r0
 8012194:	4620      	mov	r0, r4
 8012196:	f000 fd5b 	bl	8012c50 <__pow5mult>
 801219a:	9b06      	ldr	r3, [sp, #24]
 801219c:	2b01      	cmp	r3, #1
 801219e:	4607      	mov	r7, r0
 80121a0:	dc40      	bgt.n	8012224 <_dtoa_r+0x814>
 80121a2:	9b00      	ldr	r3, [sp, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d139      	bne.n	801221c <_dtoa_r+0x80c>
 80121a8:	9b01      	ldr	r3, [sp, #4]
 80121aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d136      	bne.n	8012220 <_dtoa_r+0x810>
 80121b2:	9b01      	ldr	r3, [sp, #4]
 80121b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80121b8:	0d1b      	lsrs	r3, r3, #20
 80121ba:	051b      	lsls	r3, r3, #20
 80121bc:	b12b      	cbz	r3, 80121ca <_dtoa_r+0x7ba>
 80121be:	9b05      	ldr	r3, [sp, #20]
 80121c0:	3301      	adds	r3, #1
 80121c2:	9305      	str	r3, [sp, #20]
 80121c4:	f108 0801 	add.w	r8, r8, #1
 80121c8:	2301      	movs	r3, #1
 80121ca:	9307      	str	r3, [sp, #28]
 80121cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d12a      	bne.n	8012228 <_dtoa_r+0x818>
 80121d2:	2001      	movs	r0, #1
 80121d4:	e030      	b.n	8012238 <_dtoa_r+0x828>
 80121d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80121d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80121dc:	e795      	b.n	801210a <_dtoa_r+0x6fa>
 80121de:	9b07      	ldr	r3, [sp, #28]
 80121e0:	f109 37ff 	add.w	r7, r9, #4294967295
 80121e4:	42bb      	cmp	r3, r7
 80121e6:	bfbf      	itttt	lt
 80121e8:	9b07      	ldrlt	r3, [sp, #28]
 80121ea:	9707      	strlt	r7, [sp, #28]
 80121ec:	1afa      	sublt	r2, r7, r3
 80121ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80121f0:	bfbb      	ittet	lt
 80121f2:	189b      	addlt	r3, r3, r2
 80121f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80121f6:	1bdf      	subge	r7, r3, r7
 80121f8:	2700      	movlt	r7, #0
 80121fa:	f1b9 0f00 	cmp.w	r9, #0
 80121fe:	bfb5      	itete	lt
 8012200:	9b05      	ldrlt	r3, [sp, #20]
 8012202:	9d05      	ldrge	r5, [sp, #20]
 8012204:	eba3 0509 	sublt.w	r5, r3, r9
 8012208:	464b      	movge	r3, r9
 801220a:	bfb8      	it	lt
 801220c:	2300      	movlt	r3, #0
 801220e:	e77e      	b.n	801210e <_dtoa_r+0x6fe>
 8012210:	9f07      	ldr	r7, [sp, #28]
 8012212:	9d05      	ldr	r5, [sp, #20]
 8012214:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012216:	e783      	b.n	8012120 <_dtoa_r+0x710>
 8012218:	9a07      	ldr	r2, [sp, #28]
 801221a:	e7ab      	b.n	8012174 <_dtoa_r+0x764>
 801221c:	2300      	movs	r3, #0
 801221e:	e7d4      	b.n	80121ca <_dtoa_r+0x7ba>
 8012220:	9b00      	ldr	r3, [sp, #0]
 8012222:	e7d2      	b.n	80121ca <_dtoa_r+0x7ba>
 8012224:	2300      	movs	r3, #0
 8012226:	9307      	str	r3, [sp, #28]
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801222e:	6918      	ldr	r0, [r3, #16]
 8012230:	f000 fc20 	bl	8012a74 <__hi0bits>
 8012234:	f1c0 0020 	rsb	r0, r0, #32
 8012238:	4440      	add	r0, r8
 801223a:	f010 001f 	ands.w	r0, r0, #31
 801223e:	d047      	beq.n	80122d0 <_dtoa_r+0x8c0>
 8012240:	f1c0 0320 	rsb	r3, r0, #32
 8012244:	2b04      	cmp	r3, #4
 8012246:	dd3b      	ble.n	80122c0 <_dtoa_r+0x8b0>
 8012248:	9b05      	ldr	r3, [sp, #20]
 801224a:	f1c0 001c 	rsb	r0, r0, #28
 801224e:	4403      	add	r3, r0
 8012250:	9305      	str	r3, [sp, #20]
 8012252:	4405      	add	r5, r0
 8012254:	4480      	add	r8, r0
 8012256:	9b05      	ldr	r3, [sp, #20]
 8012258:	2b00      	cmp	r3, #0
 801225a:	dd05      	ble.n	8012268 <_dtoa_r+0x858>
 801225c:	461a      	mov	r2, r3
 801225e:	9904      	ldr	r1, [sp, #16]
 8012260:	4620      	mov	r0, r4
 8012262:	f000 fd43 	bl	8012cec <__lshift>
 8012266:	9004      	str	r0, [sp, #16]
 8012268:	f1b8 0f00 	cmp.w	r8, #0
 801226c:	dd05      	ble.n	801227a <_dtoa_r+0x86a>
 801226e:	4639      	mov	r1, r7
 8012270:	4642      	mov	r2, r8
 8012272:	4620      	mov	r0, r4
 8012274:	f000 fd3a 	bl	8012cec <__lshift>
 8012278:	4607      	mov	r7, r0
 801227a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801227c:	b353      	cbz	r3, 80122d4 <_dtoa_r+0x8c4>
 801227e:	4639      	mov	r1, r7
 8012280:	9804      	ldr	r0, [sp, #16]
 8012282:	f000 fd87 	bl	8012d94 <__mcmp>
 8012286:	2800      	cmp	r0, #0
 8012288:	da24      	bge.n	80122d4 <_dtoa_r+0x8c4>
 801228a:	2300      	movs	r3, #0
 801228c:	220a      	movs	r2, #10
 801228e:	9904      	ldr	r1, [sp, #16]
 8012290:	4620      	mov	r0, r4
 8012292:	f000 fbb4 	bl	80129fe <__multadd>
 8012296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012298:	9004      	str	r0, [sp, #16]
 801229a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f000 814d 	beq.w	801253e <_dtoa_r+0xb2e>
 80122a4:	2300      	movs	r3, #0
 80122a6:	4631      	mov	r1, r6
 80122a8:	220a      	movs	r2, #10
 80122aa:	4620      	mov	r0, r4
 80122ac:	f000 fba7 	bl	80129fe <__multadd>
 80122b0:	9b02      	ldr	r3, [sp, #8]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	4606      	mov	r6, r0
 80122b6:	dc4f      	bgt.n	8012358 <_dtoa_r+0x948>
 80122b8:	9b06      	ldr	r3, [sp, #24]
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	dd4c      	ble.n	8012358 <_dtoa_r+0x948>
 80122be:	e011      	b.n	80122e4 <_dtoa_r+0x8d4>
 80122c0:	d0c9      	beq.n	8012256 <_dtoa_r+0x846>
 80122c2:	9a05      	ldr	r2, [sp, #20]
 80122c4:	331c      	adds	r3, #28
 80122c6:	441a      	add	r2, r3
 80122c8:	9205      	str	r2, [sp, #20]
 80122ca:	441d      	add	r5, r3
 80122cc:	4498      	add	r8, r3
 80122ce:	e7c2      	b.n	8012256 <_dtoa_r+0x846>
 80122d0:	4603      	mov	r3, r0
 80122d2:	e7f6      	b.n	80122c2 <_dtoa_r+0x8b2>
 80122d4:	f1b9 0f00 	cmp.w	r9, #0
 80122d8:	dc38      	bgt.n	801234c <_dtoa_r+0x93c>
 80122da:	9b06      	ldr	r3, [sp, #24]
 80122dc:	2b02      	cmp	r3, #2
 80122de:	dd35      	ble.n	801234c <_dtoa_r+0x93c>
 80122e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80122e4:	9b02      	ldr	r3, [sp, #8]
 80122e6:	b963      	cbnz	r3, 8012302 <_dtoa_r+0x8f2>
 80122e8:	4639      	mov	r1, r7
 80122ea:	2205      	movs	r2, #5
 80122ec:	4620      	mov	r0, r4
 80122ee:	f000 fb86 	bl	80129fe <__multadd>
 80122f2:	4601      	mov	r1, r0
 80122f4:	4607      	mov	r7, r0
 80122f6:	9804      	ldr	r0, [sp, #16]
 80122f8:	f000 fd4c 	bl	8012d94 <__mcmp>
 80122fc:	2800      	cmp	r0, #0
 80122fe:	f73f adcc 	bgt.w	8011e9a <_dtoa_r+0x48a>
 8012302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012304:	465d      	mov	r5, fp
 8012306:	ea6f 0a03 	mvn.w	sl, r3
 801230a:	f04f 0900 	mov.w	r9, #0
 801230e:	4639      	mov	r1, r7
 8012310:	4620      	mov	r0, r4
 8012312:	f000 fb5d 	bl	80129d0 <_Bfree>
 8012316:	2e00      	cmp	r6, #0
 8012318:	f43f aeb7 	beq.w	801208a <_dtoa_r+0x67a>
 801231c:	f1b9 0f00 	cmp.w	r9, #0
 8012320:	d005      	beq.n	801232e <_dtoa_r+0x91e>
 8012322:	45b1      	cmp	r9, r6
 8012324:	d003      	beq.n	801232e <_dtoa_r+0x91e>
 8012326:	4649      	mov	r1, r9
 8012328:	4620      	mov	r0, r4
 801232a:	f000 fb51 	bl	80129d0 <_Bfree>
 801232e:	4631      	mov	r1, r6
 8012330:	4620      	mov	r0, r4
 8012332:	f000 fb4d 	bl	80129d0 <_Bfree>
 8012336:	e6a8      	b.n	801208a <_dtoa_r+0x67a>
 8012338:	2700      	movs	r7, #0
 801233a:	463e      	mov	r6, r7
 801233c:	e7e1      	b.n	8012302 <_dtoa_r+0x8f2>
 801233e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012342:	463e      	mov	r6, r7
 8012344:	e5a9      	b.n	8011e9a <_dtoa_r+0x48a>
 8012346:	bf00      	nop
 8012348:	40240000 	.word	0x40240000
 801234c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801234e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012352:	2b00      	cmp	r3, #0
 8012354:	f000 80fa 	beq.w	801254c <_dtoa_r+0xb3c>
 8012358:	2d00      	cmp	r5, #0
 801235a:	dd05      	ble.n	8012368 <_dtoa_r+0x958>
 801235c:	4631      	mov	r1, r6
 801235e:	462a      	mov	r2, r5
 8012360:	4620      	mov	r0, r4
 8012362:	f000 fcc3 	bl	8012cec <__lshift>
 8012366:	4606      	mov	r6, r0
 8012368:	9b07      	ldr	r3, [sp, #28]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d04c      	beq.n	8012408 <_dtoa_r+0x9f8>
 801236e:	6871      	ldr	r1, [r6, #4]
 8012370:	4620      	mov	r0, r4
 8012372:	f000 faf9 	bl	8012968 <_Balloc>
 8012376:	6932      	ldr	r2, [r6, #16]
 8012378:	3202      	adds	r2, #2
 801237a:	4605      	mov	r5, r0
 801237c:	0092      	lsls	r2, r2, #2
 801237e:	f106 010c 	add.w	r1, r6, #12
 8012382:	300c      	adds	r0, #12
 8012384:	f7fe fc46 	bl	8010c14 <memcpy>
 8012388:	2201      	movs	r2, #1
 801238a:	4629      	mov	r1, r5
 801238c:	4620      	mov	r0, r4
 801238e:	f000 fcad 	bl	8012cec <__lshift>
 8012392:	9b00      	ldr	r3, [sp, #0]
 8012394:	f8cd b014 	str.w	fp, [sp, #20]
 8012398:	f003 0301 	and.w	r3, r3, #1
 801239c:	46b1      	mov	r9, r6
 801239e:	9307      	str	r3, [sp, #28]
 80123a0:	4606      	mov	r6, r0
 80123a2:	4639      	mov	r1, r7
 80123a4:	9804      	ldr	r0, [sp, #16]
 80123a6:	f7ff faa7 	bl	80118f8 <quorem>
 80123aa:	4649      	mov	r1, r9
 80123ac:	4605      	mov	r5, r0
 80123ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80123b2:	9804      	ldr	r0, [sp, #16]
 80123b4:	f000 fcee 	bl	8012d94 <__mcmp>
 80123b8:	4632      	mov	r2, r6
 80123ba:	9000      	str	r0, [sp, #0]
 80123bc:	4639      	mov	r1, r7
 80123be:	4620      	mov	r0, r4
 80123c0:	f000 fd02 	bl	8012dc8 <__mdiff>
 80123c4:	68c3      	ldr	r3, [r0, #12]
 80123c6:	4602      	mov	r2, r0
 80123c8:	bb03      	cbnz	r3, 801240c <_dtoa_r+0x9fc>
 80123ca:	4601      	mov	r1, r0
 80123cc:	9008      	str	r0, [sp, #32]
 80123ce:	9804      	ldr	r0, [sp, #16]
 80123d0:	f000 fce0 	bl	8012d94 <__mcmp>
 80123d4:	9a08      	ldr	r2, [sp, #32]
 80123d6:	4603      	mov	r3, r0
 80123d8:	4611      	mov	r1, r2
 80123da:	4620      	mov	r0, r4
 80123dc:	9308      	str	r3, [sp, #32]
 80123de:	f000 faf7 	bl	80129d0 <_Bfree>
 80123e2:	9b08      	ldr	r3, [sp, #32]
 80123e4:	b9a3      	cbnz	r3, 8012410 <_dtoa_r+0xa00>
 80123e6:	9a06      	ldr	r2, [sp, #24]
 80123e8:	b992      	cbnz	r2, 8012410 <_dtoa_r+0xa00>
 80123ea:	9a07      	ldr	r2, [sp, #28]
 80123ec:	b982      	cbnz	r2, 8012410 <_dtoa_r+0xa00>
 80123ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80123f2:	d029      	beq.n	8012448 <_dtoa_r+0xa38>
 80123f4:	9b00      	ldr	r3, [sp, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	dd01      	ble.n	80123fe <_dtoa_r+0x9ee>
 80123fa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80123fe:	9b05      	ldr	r3, [sp, #20]
 8012400:	1c5d      	adds	r5, r3, #1
 8012402:	f883 8000 	strb.w	r8, [r3]
 8012406:	e782      	b.n	801230e <_dtoa_r+0x8fe>
 8012408:	4630      	mov	r0, r6
 801240a:	e7c2      	b.n	8012392 <_dtoa_r+0x982>
 801240c:	2301      	movs	r3, #1
 801240e:	e7e3      	b.n	80123d8 <_dtoa_r+0x9c8>
 8012410:	9a00      	ldr	r2, [sp, #0]
 8012412:	2a00      	cmp	r2, #0
 8012414:	db04      	blt.n	8012420 <_dtoa_r+0xa10>
 8012416:	d125      	bne.n	8012464 <_dtoa_r+0xa54>
 8012418:	9a06      	ldr	r2, [sp, #24]
 801241a:	bb1a      	cbnz	r2, 8012464 <_dtoa_r+0xa54>
 801241c:	9a07      	ldr	r2, [sp, #28]
 801241e:	bb0a      	cbnz	r2, 8012464 <_dtoa_r+0xa54>
 8012420:	2b00      	cmp	r3, #0
 8012422:	ddec      	ble.n	80123fe <_dtoa_r+0x9ee>
 8012424:	2201      	movs	r2, #1
 8012426:	9904      	ldr	r1, [sp, #16]
 8012428:	4620      	mov	r0, r4
 801242a:	f000 fc5f 	bl	8012cec <__lshift>
 801242e:	4639      	mov	r1, r7
 8012430:	9004      	str	r0, [sp, #16]
 8012432:	f000 fcaf 	bl	8012d94 <__mcmp>
 8012436:	2800      	cmp	r0, #0
 8012438:	dc03      	bgt.n	8012442 <_dtoa_r+0xa32>
 801243a:	d1e0      	bne.n	80123fe <_dtoa_r+0x9ee>
 801243c:	f018 0f01 	tst.w	r8, #1
 8012440:	d0dd      	beq.n	80123fe <_dtoa_r+0x9ee>
 8012442:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012446:	d1d8      	bne.n	80123fa <_dtoa_r+0x9ea>
 8012448:	9b05      	ldr	r3, [sp, #20]
 801244a:	9a05      	ldr	r2, [sp, #20]
 801244c:	1c5d      	adds	r5, r3, #1
 801244e:	2339      	movs	r3, #57	; 0x39
 8012450:	7013      	strb	r3, [r2, #0]
 8012452:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012456:	2b39      	cmp	r3, #57	; 0x39
 8012458:	f105 32ff 	add.w	r2, r5, #4294967295
 801245c:	d04f      	beq.n	80124fe <_dtoa_r+0xaee>
 801245e:	3301      	adds	r3, #1
 8012460:	7013      	strb	r3, [r2, #0]
 8012462:	e754      	b.n	801230e <_dtoa_r+0x8fe>
 8012464:	9a05      	ldr	r2, [sp, #20]
 8012466:	2b00      	cmp	r3, #0
 8012468:	f102 0501 	add.w	r5, r2, #1
 801246c:	dd06      	ble.n	801247c <_dtoa_r+0xa6c>
 801246e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012472:	d0e9      	beq.n	8012448 <_dtoa_r+0xa38>
 8012474:	f108 0801 	add.w	r8, r8, #1
 8012478:	9b05      	ldr	r3, [sp, #20]
 801247a:	e7c2      	b.n	8012402 <_dtoa_r+0x9f2>
 801247c:	9a02      	ldr	r2, [sp, #8]
 801247e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012482:	eba5 030b 	sub.w	r3, r5, fp
 8012486:	4293      	cmp	r3, r2
 8012488:	d021      	beq.n	80124ce <_dtoa_r+0xabe>
 801248a:	2300      	movs	r3, #0
 801248c:	220a      	movs	r2, #10
 801248e:	9904      	ldr	r1, [sp, #16]
 8012490:	4620      	mov	r0, r4
 8012492:	f000 fab4 	bl	80129fe <__multadd>
 8012496:	45b1      	cmp	r9, r6
 8012498:	9004      	str	r0, [sp, #16]
 801249a:	f04f 0300 	mov.w	r3, #0
 801249e:	f04f 020a 	mov.w	r2, #10
 80124a2:	4649      	mov	r1, r9
 80124a4:	4620      	mov	r0, r4
 80124a6:	d105      	bne.n	80124b4 <_dtoa_r+0xaa4>
 80124a8:	f000 faa9 	bl	80129fe <__multadd>
 80124ac:	4681      	mov	r9, r0
 80124ae:	4606      	mov	r6, r0
 80124b0:	9505      	str	r5, [sp, #20]
 80124b2:	e776      	b.n	80123a2 <_dtoa_r+0x992>
 80124b4:	f000 faa3 	bl	80129fe <__multadd>
 80124b8:	4631      	mov	r1, r6
 80124ba:	4681      	mov	r9, r0
 80124bc:	2300      	movs	r3, #0
 80124be:	220a      	movs	r2, #10
 80124c0:	4620      	mov	r0, r4
 80124c2:	f000 fa9c 	bl	80129fe <__multadd>
 80124c6:	4606      	mov	r6, r0
 80124c8:	e7f2      	b.n	80124b0 <_dtoa_r+0xaa0>
 80124ca:	f04f 0900 	mov.w	r9, #0
 80124ce:	2201      	movs	r2, #1
 80124d0:	9904      	ldr	r1, [sp, #16]
 80124d2:	4620      	mov	r0, r4
 80124d4:	f000 fc0a 	bl	8012cec <__lshift>
 80124d8:	4639      	mov	r1, r7
 80124da:	9004      	str	r0, [sp, #16]
 80124dc:	f000 fc5a 	bl	8012d94 <__mcmp>
 80124e0:	2800      	cmp	r0, #0
 80124e2:	dcb6      	bgt.n	8012452 <_dtoa_r+0xa42>
 80124e4:	d102      	bne.n	80124ec <_dtoa_r+0xadc>
 80124e6:	f018 0f01 	tst.w	r8, #1
 80124ea:	d1b2      	bne.n	8012452 <_dtoa_r+0xa42>
 80124ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80124f0:	2b30      	cmp	r3, #48	; 0x30
 80124f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80124f6:	f47f af0a 	bne.w	801230e <_dtoa_r+0x8fe>
 80124fa:	4615      	mov	r5, r2
 80124fc:	e7f6      	b.n	80124ec <_dtoa_r+0xadc>
 80124fe:	4593      	cmp	fp, r2
 8012500:	d105      	bne.n	801250e <_dtoa_r+0xafe>
 8012502:	2331      	movs	r3, #49	; 0x31
 8012504:	f10a 0a01 	add.w	sl, sl, #1
 8012508:	f88b 3000 	strb.w	r3, [fp]
 801250c:	e6ff      	b.n	801230e <_dtoa_r+0x8fe>
 801250e:	4615      	mov	r5, r2
 8012510:	e79f      	b.n	8012452 <_dtoa_r+0xa42>
 8012512:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012578 <_dtoa_r+0xb68>
 8012516:	e007      	b.n	8012528 <_dtoa_r+0xb18>
 8012518:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801251a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801257c <_dtoa_r+0xb6c>
 801251e:	b11b      	cbz	r3, 8012528 <_dtoa_r+0xb18>
 8012520:	f10b 0308 	add.w	r3, fp, #8
 8012524:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012526:	6013      	str	r3, [r2, #0]
 8012528:	4658      	mov	r0, fp
 801252a:	b017      	add	sp, #92	; 0x5c
 801252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012530:	9b06      	ldr	r3, [sp, #24]
 8012532:	2b01      	cmp	r3, #1
 8012534:	f77f ae35 	ble.w	80121a2 <_dtoa_r+0x792>
 8012538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801253a:	9307      	str	r3, [sp, #28]
 801253c:	e649      	b.n	80121d2 <_dtoa_r+0x7c2>
 801253e:	9b02      	ldr	r3, [sp, #8]
 8012540:	2b00      	cmp	r3, #0
 8012542:	dc03      	bgt.n	801254c <_dtoa_r+0xb3c>
 8012544:	9b06      	ldr	r3, [sp, #24]
 8012546:	2b02      	cmp	r3, #2
 8012548:	f73f aecc 	bgt.w	80122e4 <_dtoa_r+0x8d4>
 801254c:	465d      	mov	r5, fp
 801254e:	4639      	mov	r1, r7
 8012550:	9804      	ldr	r0, [sp, #16]
 8012552:	f7ff f9d1 	bl	80118f8 <quorem>
 8012556:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801255a:	f805 8b01 	strb.w	r8, [r5], #1
 801255e:	9a02      	ldr	r2, [sp, #8]
 8012560:	eba5 030b 	sub.w	r3, r5, fp
 8012564:	429a      	cmp	r2, r3
 8012566:	ddb0      	ble.n	80124ca <_dtoa_r+0xaba>
 8012568:	2300      	movs	r3, #0
 801256a:	220a      	movs	r2, #10
 801256c:	9904      	ldr	r1, [sp, #16]
 801256e:	4620      	mov	r0, r4
 8012570:	f000 fa45 	bl	80129fe <__multadd>
 8012574:	9004      	str	r0, [sp, #16]
 8012576:	e7ea      	b.n	801254e <_dtoa_r+0xb3e>
 8012578:	08014ca8 	.word	0x08014ca8
 801257c:	08014ccc 	.word	0x08014ccc

08012580 <__sflush_r>:
 8012580:	898a      	ldrh	r2, [r1, #12]
 8012582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012586:	4605      	mov	r5, r0
 8012588:	0710      	lsls	r0, r2, #28
 801258a:	460c      	mov	r4, r1
 801258c:	d458      	bmi.n	8012640 <__sflush_r+0xc0>
 801258e:	684b      	ldr	r3, [r1, #4]
 8012590:	2b00      	cmp	r3, #0
 8012592:	dc05      	bgt.n	80125a0 <__sflush_r+0x20>
 8012594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012596:	2b00      	cmp	r3, #0
 8012598:	dc02      	bgt.n	80125a0 <__sflush_r+0x20>
 801259a:	2000      	movs	r0, #0
 801259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125a2:	2e00      	cmp	r6, #0
 80125a4:	d0f9      	beq.n	801259a <__sflush_r+0x1a>
 80125a6:	2300      	movs	r3, #0
 80125a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80125ac:	682f      	ldr	r7, [r5, #0]
 80125ae:	6a21      	ldr	r1, [r4, #32]
 80125b0:	602b      	str	r3, [r5, #0]
 80125b2:	d032      	beq.n	801261a <__sflush_r+0x9a>
 80125b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80125b6:	89a3      	ldrh	r3, [r4, #12]
 80125b8:	075a      	lsls	r2, r3, #29
 80125ba:	d505      	bpl.n	80125c8 <__sflush_r+0x48>
 80125bc:	6863      	ldr	r3, [r4, #4]
 80125be:	1ac0      	subs	r0, r0, r3
 80125c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125c2:	b10b      	cbz	r3, 80125c8 <__sflush_r+0x48>
 80125c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125c6:	1ac0      	subs	r0, r0, r3
 80125c8:	2300      	movs	r3, #0
 80125ca:	4602      	mov	r2, r0
 80125cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125ce:	6a21      	ldr	r1, [r4, #32]
 80125d0:	4628      	mov	r0, r5
 80125d2:	47b0      	blx	r6
 80125d4:	1c43      	adds	r3, r0, #1
 80125d6:	89a3      	ldrh	r3, [r4, #12]
 80125d8:	d106      	bne.n	80125e8 <__sflush_r+0x68>
 80125da:	6829      	ldr	r1, [r5, #0]
 80125dc:	291d      	cmp	r1, #29
 80125de:	d848      	bhi.n	8012672 <__sflush_r+0xf2>
 80125e0:	4a29      	ldr	r2, [pc, #164]	; (8012688 <__sflush_r+0x108>)
 80125e2:	40ca      	lsrs	r2, r1
 80125e4:	07d6      	lsls	r6, r2, #31
 80125e6:	d544      	bpl.n	8012672 <__sflush_r+0xf2>
 80125e8:	2200      	movs	r2, #0
 80125ea:	6062      	str	r2, [r4, #4]
 80125ec:	04d9      	lsls	r1, r3, #19
 80125ee:	6922      	ldr	r2, [r4, #16]
 80125f0:	6022      	str	r2, [r4, #0]
 80125f2:	d504      	bpl.n	80125fe <__sflush_r+0x7e>
 80125f4:	1c42      	adds	r2, r0, #1
 80125f6:	d101      	bne.n	80125fc <__sflush_r+0x7c>
 80125f8:	682b      	ldr	r3, [r5, #0]
 80125fa:	b903      	cbnz	r3, 80125fe <__sflush_r+0x7e>
 80125fc:	6560      	str	r0, [r4, #84]	; 0x54
 80125fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012600:	602f      	str	r7, [r5, #0]
 8012602:	2900      	cmp	r1, #0
 8012604:	d0c9      	beq.n	801259a <__sflush_r+0x1a>
 8012606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801260a:	4299      	cmp	r1, r3
 801260c:	d002      	beq.n	8012614 <__sflush_r+0x94>
 801260e:	4628      	mov	r0, r5
 8012610:	f000 fc94 	bl	8012f3c <_free_r>
 8012614:	2000      	movs	r0, #0
 8012616:	6360      	str	r0, [r4, #52]	; 0x34
 8012618:	e7c0      	b.n	801259c <__sflush_r+0x1c>
 801261a:	2301      	movs	r3, #1
 801261c:	4628      	mov	r0, r5
 801261e:	47b0      	blx	r6
 8012620:	1c41      	adds	r1, r0, #1
 8012622:	d1c8      	bne.n	80125b6 <__sflush_r+0x36>
 8012624:	682b      	ldr	r3, [r5, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d0c5      	beq.n	80125b6 <__sflush_r+0x36>
 801262a:	2b1d      	cmp	r3, #29
 801262c:	d001      	beq.n	8012632 <__sflush_r+0xb2>
 801262e:	2b16      	cmp	r3, #22
 8012630:	d101      	bne.n	8012636 <__sflush_r+0xb6>
 8012632:	602f      	str	r7, [r5, #0]
 8012634:	e7b1      	b.n	801259a <__sflush_r+0x1a>
 8012636:	89a3      	ldrh	r3, [r4, #12]
 8012638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801263c:	81a3      	strh	r3, [r4, #12]
 801263e:	e7ad      	b.n	801259c <__sflush_r+0x1c>
 8012640:	690f      	ldr	r7, [r1, #16]
 8012642:	2f00      	cmp	r7, #0
 8012644:	d0a9      	beq.n	801259a <__sflush_r+0x1a>
 8012646:	0793      	lsls	r3, r2, #30
 8012648:	680e      	ldr	r6, [r1, #0]
 801264a:	bf08      	it	eq
 801264c:	694b      	ldreq	r3, [r1, #20]
 801264e:	600f      	str	r7, [r1, #0]
 8012650:	bf18      	it	ne
 8012652:	2300      	movne	r3, #0
 8012654:	eba6 0807 	sub.w	r8, r6, r7
 8012658:	608b      	str	r3, [r1, #8]
 801265a:	f1b8 0f00 	cmp.w	r8, #0
 801265e:	dd9c      	ble.n	801259a <__sflush_r+0x1a>
 8012660:	4643      	mov	r3, r8
 8012662:	463a      	mov	r2, r7
 8012664:	6a21      	ldr	r1, [r4, #32]
 8012666:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012668:	4628      	mov	r0, r5
 801266a:	47b0      	blx	r6
 801266c:	2800      	cmp	r0, #0
 801266e:	dc06      	bgt.n	801267e <__sflush_r+0xfe>
 8012670:	89a3      	ldrh	r3, [r4, #12]
 8012672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012676:	81a3      	strh	r3, [r4, #12]
 8012678:	f04f 30ff 	mov.w	r0, #4294967295
 801267c:	e78e      	b.n	801259c <__sflush_r+0x1c>
 801267e:	4407      	add	r7, r0
 8012680:	eba8 0800 	sub.w	r8, r8, r0
 8012684:	e7e9      	b.n	801265a <__sflush_r+0xda>
 8012686:	bf00      	nop
 8012688:	20400001 	.word	0x20400001

0801268c <_fflush_r>:
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	690b      	ldr	r3, [r1, #16]
 8012690:	4605      	mov	r5, r0
 8012692:	460c      	mov	r4, r1
 8012694:	b1db      	cbz	r3, 80126ce <_fflush_r+0x42>
 8012696:	b118      	cbz	r0, 80126a0 <_fflush_r+0x14>
 8012698:	6983      	ldr	r3, [r0, #24]
 801269a:	b90b      	cbnz	r3, 80126a0 <_fflush_r+0x14>
 801269c:	f000 f860 	bl	8012760 <__sinit>
 80126a0:	4b0c      	ldr	r3, [pc, #48]	; (80126d4 <_fflush_r+0x48>)
 80126a2:	429c      	cmp	r4, r3
 80126a4:	d109      	bne.n	80126ba <_fflush_r+0x2e>
 80126a6:	686c      	ldr	r4, [r5, #4]
 80126a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126ac:	b17b      	cbz	r3, 80126ce <_fflush_r+0x42>
 80126ae:	4621      	mov	r1, r4
 80126b0:	4628      	mov	r0, r5
 80126b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126b6:	f7ff bf63 	b.w	8012580 <__sflush_r>
 80126ba:	4b07      	ldr	r3, [pc, #28]	; (80126d8 <_fflush_r+0x4c>)
 80126bc:	429c      	cmp	r4, r3
 80126be:	d101      	bne.n	80126c4 <_fflush_r+0x38>
 80126c0:	68ac      	ldr	r4, [r5, #8]
 80126c2:	e7f1      	b.n	80126a8 <_fflush_r+0x1c>
 80126c4:	4b05      	ldr	r3, [pc, #20]	; (80126dc <_fflush_r+0x50>)
 80126c6:	429c      	cmp	r4, r3
 80126c8:	bf08      	it	eq
 80126ca:	68ec      	ldreq	r4, [r5, #12]
 80126cc:	e7ec      	b.n	80126a8 <_fflush_r+0x1c>
 80126ce:	2000      	movs	r0, #0
 80126d0:	bd38      	pop	{r3, r4, r5, pc}
 80126d2:	bf00      	nop
 80126d4:	08014cfc 	.word	0x08014cfc
 80126d8:	08014d1c 	.word	0x08014d1c
 80126dc:	08014cdc 	.word	0x08014cdc

080126e0 <std>:
 80126e0:	2300      	movs	r3, #0
 80126e2:	b510      	push	{r4, lr}
 80126e4:	4604      	mov	r4, r0
 80126e6:	e9c0 3300 	strd	r3, r3, [r0]
 80126ea:	6083      	str	r3, [r0, #8]
 80126ec:	8181      	strh	r1, [r0, #12]
 80126ee:	6643      	str	r3, [r0, #100]	; 0x64
 80126f0:	81c2      	strh	r2, [r0, #14]
 80126f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80126f6:	6183      	str	r3, [r0, #24]
 80126f8:	4619      	mov	r1, r3
 80126fa:	2208      	movs	r2, #8
 80126fc:	305c      	adds	r0, #92	; 0x5c
 80126fe:	f7fe faad 	bl	8010c5c <memset>
 8012702:	4b05      	ldr	r3, [pc, #20]	; (8012718 <std+0x38>)
 8012704:	6263      	str	r3, [r4, #36]	; 0x24
 8012706:	4b05      	ldr	r3, [pc, #20]	; (801271c <std+0x3c>)
 8012708:	62a3      	str	r3, [r4, #40]	; 0x28
 801270a:	4b05      	ldr	r3, [pc, #20]	; (8012720 <std+0x40>)
 801270c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801270e:	4b05      	ldr	r3, [pc, #20]	; (8012724 <std+0x44>)
 8012710:	6224      	str	r4, [r4, #32]
 8012712:	6323      	str	r3, [r4, #48]	; 0x30
 8012714:	bd10      	pop	{r4, pc}
 8012716:	bf00      	nop
 8012718:	0801332d 	.word	0x0801332d
 801271c:	0801334f 	.word	0x0801334f
 8012720:	08013387 	.word	0x08013387
 8012724:	080133ab 	.word	0x080133ab

08012728 <_cleanup_r>:
 8012728:	4901      	ldr	r1, [pc, #4]	; (8012730 <_cleanup_r+0x8>)
 801272a:	f000 b885 	b.w	8012838 <_fwalk_reent>
 801272e:	bf00      	nop
 8012730:	0801268d 	.word	0x0801268d

08012734 <__sfmoreglue>:
 8012734:	b570      	push	{r4, r5, r6, lr}
 8012736:	1e4a      	subs	r2, r1, #1
 8012738:	2568      	movs	r5, #104	; 0x68
 801273a:	4355      	muls	r5, r2
 801273c:	460e      	mov	r6, r1
 801273e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012742:	f000 fc49 	bl	8012fd8 <_malloc_r>
 8012746:	4604      	mov	r4, r0
 8012748:	b140      	cbz	r0, 801275c <__sfmoreglue+0x28>
 801274a:	2100      	movs	r1, #0
 801274c:	e9c0 1600 	strd	r1, r6, [r0]
 8012750:	300c      	adds	r0, #12
 8012752:	60a0      	str	r0, [r4, #8]
 8012754:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012758:	f7fe fa80 	bl	8010c5c <memset>
 801275c:	4620      	mov	r0, r4
 801275e:	bd70      	pop	{r4, r5, r6, pc}

08012760 <__sinit>:
 8012760:	6983      	ldr	r3, [r0, #24]
 8012762:	b510      	push	{r4, lr}
 8012764:	4604      	mov	r4, r0
 8012766:	bb33      	cbnz	r3, 80127b6 <__sinit+0x56>
 8012768:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801276c:	6503      	str	r3, [r0, #80]	; 0x50
 801276e:	4b12      	ldr	r3, [pc, #72]	; (80127b8 <__sinit+0x58>)
 8012770:	4a12      	ldr	r2, [pc, #72]	; (80127bc <__sinit+0x5c>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	6282      	str	r2, [r0, #40]	; 0x28
 8012776:	4298      	cmp	r0, r3
 8012778:	bf04      	itt	eq
 801277a:	2301      	moveq	r3, #1
 801277c:	6183      	streq	r3, [r0, #24]
 801277e:	f000 f81f 	bl	80127c0 <__sfp>
 8012782:	6060      	str	r0, [r4, #4]
 8012784:	4620      	mov	r0, r4
 8012786:	f000 f81b 	bl	80127c0 <__sfp>
 801278a:	60a0      	str	r0, [r4, #8]
 801278c:	4620      	mov	r0, r4
 801278e:	f000 f817 	bl	80127c0 <__sfp>
 8012792:	2200      	movs	r2, #0
 8012794:	60e0      	str	r0, [r4, #12]
 8012796:	2104      	movs	r1, #4
 8012798:	6860      	ldr	r0, [r4, #4]
 801279a:	f7ff ffa1 	bl	80126e0 <std>
 801279e:	2201      	movs	r2, #1
 80127a0:	2109      	movs	r1, #9
 80127a2:	68a0      	ldr	r0, [r4, #8]
 80127a4:	f7ff ff9c 	bl	80126e0 <std>
 80127a8:	2202      	movs	r2, #2
 80127aa:	2112      	movs	r1, #18
 80127ac:	68e0      	ldr	r0, [r4, #12]
 80127ae:	f7ff ff97 	bl	80126e0 <std>
 80127b2:	2301      	movs	r3, #1
 80127b4:	61a3      	str	r3, [r4, #24]
 80127b6:	bd10      	pop	{r4, pc}
 80127b8:	08014c98 	.word	0x08014c98
 80127bc:	08012729 	.word	0x08012729

080127c0 <__sfp>:
 80127c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127c2:	4b1b      	ldr	r3, [pc, #108]	; (8012830 <__sfp+0x70>)
 80127c4:	681e      	ldr	r6, [r3, #0]
 80127c6:	69b3      	ldr	r3, [r6, #24]
 80127c8:	4607      	mov	r7, r0
 80127ca:	b913      	cbnz	r3, 80127d2 <__sfp+0x12>
 80127cc:	4630      	mov	r0, r6
 80127ce:	f7ff ffc7 	bl	8012760 <__sinit>
 80127d2:	3648      	adds	r6, #72	; 0x48
 80127d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80127d8:	3b01      	subs	r3, #1
 80127da:	d503      	bpl.n	80127e4 <__sfp+0x24>
 80127dc:	6833      	ldr	r3, [r6, #0]
 80127de:	b133      	cbz	r3, 80127ee <__sfp+0x2e>
 80127e0:	6836      	ldr	r6, [r6, #0]
 80127e2:	e7f7      	b.n	80127d4 <__sfp+0x14>
 80127e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80127e8:	b16d      	cbz	r5, 8012806 <__sfp+0x46>
 80127ea:	3468      	adds	r4, #104	; 0x68
 80127ec:	e7f4      	b.n	80127d8 <__sfp+0x18>
 80127ee:	2104      	movs	r1, #4
 80127f0:	4638      	mov	r0, r7
 80127f2:	f7ff ff9f 	bl	8012734 <__sfmoreglue>
 80127f6:	6030      	str	r0, [r6, #0]
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d1f1      	bne.n	80127e0 <__sfp+0x20>
 80127fc:	230c      	movs	r3, #12
 80127fe:	603b      	str	r3, [r7, #0]
 8012800:	4604      	mov	r4, r0
 8012802:	4620      	mov	r0, r4
 8012804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012806:	4b0b      	ldr	r3, [pc, #44]	; (8012834 <__sfp+0x74>)
 8012808:	6665      	str	r5, [r4, #100]	; 0x64
 801280a:	e9c4 5500 	strd	r5, r5, [r4]
 801280e:	60a5      	str	r5, [r4, #8]
 8012810:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012814:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012818:	2208      	movs	r2, #8
 801281a:	4629      	mov	r1, r5
 801281c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012820:	f7fe fa1c 	bl	8010c5c <memset>
 8012824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801282c:	e7e9      	b.n	8012802 <__sfp+0x42>
 801282e:	bf00      	nop
 8012830:	08014c98 	.word	0x08014c98
 8012834:	ffff0001 	.word	0xffff0001

08012838 <_fwalk_reent>:
 8012838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801283c:	4680      	mov	r8, r0
 801283e:	4689      	mov	r9, r1
 8012840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012844:	2600      	movs	r6, #0
 8012846:	b914      	cbnz	r4, 801284e <_fwalk_reent+0x16>
 8012848:	4630      	mov	r0, r6
 801284a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801284e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012852:	3f01      	subs	r7, #1
 8012854:	d501      	bpl.n	801285a <_fwalk_reent+0x22>
 8012856:	6824      	ldr	r4, [r4, #0]
 8012858:	e7f5      	b.n	8012846 <_fwalk_reent+0xe>
 801285a:	89ab      	ldrh	r3, [r5, #12]
 801285c:	2b01      	cmp	r3, #1
 801285e:	d907      	bls.n	8012870 <_fwalk_reent+0x38>
 8012860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012864:	3301      	adds	r3, #1
 8012866:	d003      	beq.n	8012870 <_fwalk_reent+0x38>
 8012868:	4629      	mov	r1, r5
 801286a:	4640      	mov	r0, r8
 801286c:	47c8      	blx	r9
 801286e:	4306      	orrs	r6, r0
 8012870:	3568      	adds	r5, #104	; 0x68
 8012872:	e7ee      	b.n	8012852 <_fwalk_reent+0x1a>

08012874 <_localeconv_r>:
 8012874:	4b04      	ldr	r3, [pc, #16]	; (8012888 <_localeconv_r+0x14>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	6a18      	ldr	r0, [r3, #32]
 801287a:	4b04      	ldr	r3, [pc, #16]	; (801288c <_localeconv_r+0x18>)
 801287c:	2800      	cmp	r0, #0
 801287e:	bf08      	it	eq
 8012880:	4618      	moveq	r0, r3
 8012882:	30f0      	adds	r0, #240	; 0xf0
 8012884:	4770      	bx	lr
 8012886:	bf00      	nop
 8012888:	20001dac 	.word	0x20001dac
 801288c:	20001e10 	.word	0x20001e10

08012890 <__swhatbuf_r>:
 8012890:	b570      	push	{r4, r5, r6, lr}
 8012892:	460e      	mov	r6, r1
 8012894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012898:	2900      	cmp	r1, #0
 801289a:	b096      	sub	sp, #88	; 0x58
 801289c:	4614      	mov	r4, r2
 801289e:	461d      	mov	r5, r3
 80128a0:	da07      	bge.n	80128b2 <__swhatbuf_r+0x22>
 80128a2:	2300      	movs	r3, #0
 80128a4:	602b      	str	r3, [r5, #0]
 80128a6:	89b3      	ldrh	r3, [r6, #12]
 80128a8:	061a      	lsls	r2, r3, #24
 80128aa:	d410      	bmi.n	80128ce <__swhatbuf_r+0x3e>
 80128ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128b0:	e00e      	b.n	80128d0 <__swhatbuf_r+0x40>
 80128b2:	466a      	mov	r2, sp
 80128b4:	f000 fda0 	bl	80133f8 <_fstat_r>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	dbf2      	blt.n	80128a2 <__swhatbuf_r+0x12>
 80128bc:	9a01      	ldr	r2, [sp, #4]
 80128be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80128c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80128c6:	425a      	negs	r2, r3
 80128c8:	415a      	adcs	r2, r3
 80128ca:	602a      	str	r2, [r5, #0]
 80128cc:	e7ee      	b.n	80128ac <__swhatbuf_r+0x1c>
 80128ce:	2340      	movs	r3, #64	; 0x40
 80128d0:	2000      	movs	r0, #0
 80128d2:	6023      	str	r3, [r4, #0]
 80128d4:	b016      	add	sp, #88	; 0x58
 80128d6:	bd70      	pop	{r4, r5, r6, pc}

080128d8 <__smakebuf_r>:
 80128d8:	898b      	ldrh	r3, [r1, #12]
 80128da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128dc:	079d      	lsls	r5, r3, #30
 80128de:	4606      	mov	r6, r0
 80128e0:	460c      	mov	r4, r1
 80128e2:	d507      	bpl.n	80128f4 <__smakebuf_r+0x1c>
 80128e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128e8:	6023      	str	r3, [r4, #0]
 80128ea:	6123      	str	r3, [r4, #16]
 80128ec:	2301      	movs	r3, #1
 80128ee:	6163      	str	r3, [r4, #20]
 80128f0:	b002      	add	sp, #8
 80128f2:	bd70      	pop	{r4, r5, r6, pc}
 80128f4:	ab01      	add	r3, sp, #4
 80128f6:	466a      	mov	r2, sp
 80128f8:	f7ff ffca 	bl	8012890 <__swhatbuf_r>
 80128fc:	9900      	ldr	r1, [sp, #0]
 80128fe:	4605      	mov	r5, r0
 8012900:	4630      	mov	r0, r6
 8012902:	f000 fb69 	bl	8012fd8 <_malloc_r>
 8012906:	b948      	cbnz	r0, 801291c <__smakebuf_r+0x44>
 8012908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801290c:	059a      	lsls	r2, r3, #22
 801290e:	d4ef      	bmi.n	80128f0 <__smakebuf_r+0x18>
 8012910:	f023 0303 	bic.w	r3, r3, #3
 8012914:	f043 0302 	orr.w	r3, r3, #2
 8012918:	81a3      	strh	r3, [r4, #12]
 801291a:	e7e3      	b.n	80128e4 <__smakebuf_r+0xc>
 801291c:	4b0d      	ldr	r3, [pc, #52]	; (8012954 <__smakebuf_r+0x7c>)
 801291e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012920:	89a3      	ldrh	r3, [r4, #12]
 8012922:	6020      	str	r0, [r4, #0]
 8012924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012928:	81a3      	strh	r3, [r4, #12]
 801292a:	9b00      	ldr	r3, [sp, #0]
 801292c:	6163      	str	r3, [r4, #20]
 801292e:	9b01      	ldr	r3, [sp, #4]
 8012930:	6120      	str	r0, [r4, #16]
 8012932:	b15b      	cbz	r3, 801294c <__smakebuf_r+0x74>
 8012934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012938:	4630      	mov	r0, r6
 801293a:	f000 fd6f 	bl	801341c <_isatty_r>
 801293e:	b128      	cbz	r0, 801294c <__smakebuf_r+0x74>
 8012940:	89a3      	ldrh	r3, [r4, #12]
 8012942:	f023 0303 	bic.w	r3, r3, #3
 8012946:	f043 0301 	orr.w	r3, r3, #1
 801294a:	81a3      	strh	r3, [r4, #12]
 801294c:	89a3      	ldrh	r3, [r4, #12]
 801294e:	431d      	orrs	r5, r3
 8012950:	81a5      	strh	r5, [r4, #12]
 8012952:	e7cd      	b.n	80128f0 <__smakebuf_r+0x18>
 8012954:	08012729 	.word	0x08012729

08012958 <malloc>:
 8012958:	4b02      	ldr	r3, [pc, #8]	; (8012964 <malloc+0xc>)
 801295a:	4601      	mov	r1, r0
 801295c:	6818      	ldr	r0, [r3, #0]
 801295e:	f000 bb3b 	b.w	8012fd8 <_malloc_r>
 8012962:	bf00      	nop
 8012964:	20001dac 	.word	0x20001dac

08012968 <_Balloc>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801296c:	4604      	mov	r4, r0
 801296e:	460e      	mov	r6, r1
 8012970:	b93d      	cbnz	r5, 8012982 <_Balloc+0x1a>
 8012972:	2010      	movs	r0, #16
 8012974:	f7ff fff0 	bl	8012958 <malloc>
 8012978:	6260      	str	r0, [r4, #36]	; 0x24
 801297a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801297e:	6005      	str	r5, [r0, #0]
 8012980:	60c5      	str	r5, [r0, #12]
 8012982:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012984:	68eb      	ldr	r3, [r5, #12]
 8012986:	b183      	cbz	r3, 80129aa <_Balloc+0x42>
 8012988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801298a:	68db      	ldr	r3, [r3, #12]
 801298c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012990:	b9b8      	cbnz	r0, 80129c2 <_Balloc+0x5a>
 8012992:	2101      	movs	r1, #1
 8012994:	fa01 f506 	lsl.w	r5, r1, r6
 8012998:	1d6a      	adds	r2, r5, #5
 801299a:	0092      	lsls	r2, r2, #2
 801299c:	4620      	mov	r0, r4
 801299e:	f000 fabf 	bl	8012f20 <_calloc_r>
 80129a2:	b160      	cbz	r0, 80129be <_Balloc+0x56>
 80129a4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80129a8:	e00e      	b.n	80129c8 <_Balloc+0x60>
 80129aa:	2221      	movs	r2, #33	; 0x21
 80129ac:	2104      	movs	r1, #4
 80129ae:	4620      	mov	r0, r4
 80129b0:	f000 fab6 	bl	8012f20 <_calloc_r>
 80129b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129b6:	60e8      	str	r0, [r5, #12]
 80129b8:	68db      	ldr	r3, [r3, #12]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d1e4      	bne.n	8012988 <_Balloc+0x20>
 80129be:	2000      	movs	r0, #0
 80129c0:	bd70      	pop	{r4, r5, r6, pc}
 80129c2:	6802      	ldr	r2, [r0, #0]
 80129c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80129c8:	2300      	movs	r3, #0
 80129ca:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80129ce:	e7f7      	b.n	80129c0 <_Balloc+0x58>

080129d0 <_Bfree>:
 80129d0:	b570      	push	{r4, r5, r6, lr}
 80129d2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80129d4:	4606      	mov	r6, r0
 80129d6:	460d      	mov	r5, r1
 80129d8:	b93c      	cbnz	r4, 80129ea <_Bfree+0x1a>
 80129da:	2010      	movs	r0, #16
 80129dc:	f7ff ffbc 	bl	8012958 <malloc>
 80129e0:	6270      	str	r0, [r6, #36]	; 0x24
 80129e2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129e6:	6004      	str	r4, [r0, #0]
 80129e8:	60c4      	str	r4, [r0, #12]
 80129ea:	b13d      	cbz	r5, 80129fc <_Bfree+0x2c>
 80129ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80129ee:	686a      	ldr	r2, [r5, #4]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80129f6:	6029      	str	r1, [r5, #0]
 80129f8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80129fc:	bd70      	pop	{r4, r5, r6, pc}

080129fe <__multadd>:
 80129fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a02:	690d      	ldr	r5, [r1, #16]
 8012a04:	461f      	mov	r7, r3
 8012a06:	4606      	mov	r6, r0
 8012a08:	460c      	mov	r4, r1
 8012a0a:	f101 0c14 	add.w	ip, r1, #20
 8012a0e:	2300      	movs	r3, #0
 8012a10:	f8dc 0000 	ldr.w	r0, [ip]
 8012a14:	b281      	uxth	r1, r0
 8012a16:	fb02 7101 	mla	r1, r2, r1, r7
 8012a1a:	0c0f      	lsrs	r7, r1, #16
 8012a1c:	0c00      	lsrs	r0, r0, #16
 8012a1e:	fb02 7000 	mla	r0, r2, r0, r7
 8012a22:	b289      	uxth	r1, r1
 8012a24:	3301      	adds	r3, #1
 8012a26:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8012a2a:	429d      	cmp	r5, r3
 8012a2c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012a30:	f84c 1b04 	str.w	r1, [ip], #4
 8012a34:	dcec      	bgt.n	8012a10 <__multadd+0x12>
 8012a36:	b1d7      	cbz	r7, 8012a6e <__multadd+0x70>
 8012a38:	68a3      	ldr	r3, [r4, #8]
 8012a3a:	42ab      	cmp	r3, r5
 8012a3c:	dc12      	bgt.n	8012a64 <__multadd+0x66>
 8012a3e:	6861      	ldr	r1, [r4, #4]
 8012a40:	4630      	mov	r0, r6
 8012a42:	3101      	adds	r1, #1
 8012a44:	f7ff ff90 	bl	8012968 <_Balloc>
 8012a48:	6922      	ldr	r2, [r4, #16]
 8012a4a:	3202      	adds	r2, #2
 8012a4c:	f104 010c 	add.w	r1, r4, #12
 8012a50:	4680      	mov	r8, r0
 8012a52:	0092      	lsls	r2, r2, #2
 8012a54:	300c      	adds	r0, #12
 8012a56:	f7fe f8dd 	bl	8010c14 <memcpy>
 8012a5a:	4621      	mov	r1, r4
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	f7ff ffb7 	bl	80129d0 <_Bfree>
 8012a62:	4644      	mov	r4, r8
 8012a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a68:	3501      	adds	r5, #1
 8012a6a:	615f      	str	r7, [r3, #20]
 8012a6c:	6125      	str	r5, [r4, #16]
 8012a6e:	4620      	mov	r0, r4
 8012a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a74 <__hi0bits>:
 8012a74:	0c02      	lsrs	r2, r0, #16
 8012a76:	0412      	lsls	r2, r2, #16
 8012a78:	4603      	mov	r3, r0
 8012a7a:	b9b2      	cbnz	r2, 8012aaa <__hi0bits+0x36>
 8012a7c:	0403      	lsls	r3, r0, #16
 8012a7e:	2010      	movs	r0, #16
 8012a80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012a84:	bf04      	itt	eq
 8012a86:	021b      	lsleq	r3, r3, #8
 8012a88:	3008      	addeq	r0, #8
 8012a8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012a8e:	bf04      	itt	eq
 8012a90:	011b      	lsleq	r3, r3, #4
 8012a92:	3004      	addeq	r0, #4
 8012a94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012a98:	bf04      	itt	eq
 8012a9a:	009b      	lsleq	r3, r3, #2
 8012a9c:	3002      	addeq	r0, #2
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	db06      	blt.n	8012ab0 <__hi0bits+0x3c>
 8012aa2:	005b      	lsls	r3, r3, #1
 8012aa4:	d503      	bpl.n	8012aae <__hi0bits+0x3a>
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	4770      	bx	lr
 8012aaa:	2000      	movs	r0, #0
 8012aac:	e7e8      	b.n	8012a80 <__hi0bits+0xc>
 8012aae:	2020      	movs	r0, #32
 8012ab0:	4770      	bx	lr

08012ab2 <__lo0bits>:
 8012ab2:	6803      	ldr	r3, [r0, #0]
 8012ab4:	f013 0207 	ands.w	r2, r3, #7
 8012ab8:	4601      	mov	r1, r0
 8012aba:	d00b      	beq.n	8012ad4 <__lo0bits+0x22>
 8012abc:	07da      	lsls	r2, r3, #31
 8012abe:	d423      	bmi.n	8012b08 <__lo0bits+0x56>
 8012ac0:	0798      	lsls	r0, r3, #30
 8012ac2:	bf49      	itett	mi
 8012ac4:	085b      	lsrmi	r3, r3, #1
 8012ac6:	089b      	lsrpl	r3, r3, #2
 8012ac8:	2001      	movmi	r0, #1
 8012aca:	600b      	strmi	r3, [r1, #0]
 8012acc:	bf5c      	itt	pl
 8012ace:	600b      	strpl	r3, [r1, #0]
 8012ad0:	2002      	movpl	r0, #2
 8012ad2:	4770      	bx	lr
 8012ad4:	b298      	uxth	r0, r3
 8012ad6:	b9a8      	cbnz	r0, 8012b04 <__lo0bits+0x52>
 8012ad8:	0c1b      	lsrs	r3, r3, #16
 8012ada:	2010      	movs	r0, #16
 8012adc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012ae0:	bf04      	itt	eq
 8012ae2:	0a1b      	lsreq	r3, r3, #8
 8012ae4:	3008      	addeq	r0, #8
 8012ae6:	071a      	lsls	r2, r3, #28
 8012ae8:	bf04      	itt	eq
 8012aea:	091b      	lsreq	r3, r3, #4
 8012aec:	3004      	addeq	r0, #4
 8012aee:	079a      	lsls	r2, r3, #30
 8012af0:	bf04      	itt	eq
 8012af2:	089b      	lsreq	r3, r3, #2
 8012af4:	3002      	addeq	r0, #2
 8012af6:	07da      	lsls	r2, r3, #31
 8012af8:	d402      	bmi.n	8012b00 <__lo0bits+0x4e>
 8012afa:	085b      	lsrs	r3, r3, #1
 8012afc:	d006      	beq.n	8012b0c <__lo0bits+0x5a>
 8012afe:	3001      	adds	r0, #1
 8012b00:	600b      	str	r3, [r1, #0]
 8012b02:	4770      	bx	lr
 8012b04:	4610      	mov	r0, r2
 8012b06:	e7e9      	b.n	8012adc <__lo0bits+0x2a>
 8012b08:	2000      	movs	r0, #0
 8012b0a:	4770      	bx	lr
 8012b0c:	2020      	movs	r0, #32
 8012b0e:	4770      	bx	lr

08012b10 <__i2b>:
 8012b10:	b510      	push	{r4, lr}
 8012b12:	460c      	mov	r4, r1
 8012b14:	2101      	movs	r1, #1
 8012b16:	f7ff ff27 	bl	8012968 <_Balloc>
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	6144      	str	r4, [r0, #20]
 8012b1e:	6102      	str	r2, [r0, #16]
 8012b20:	bd10      	pop	{r4, pc}

08012b22 <__multiply>:
 8012b22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b26:	4614      	mov	r4, r2
 8012b28:	690a      	ldr	r2, [r1, #16]
 8012b2a:	6923      	ldr	r3, [r4, #16]
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	bfb8      	it	lt
 8012b30:	460b      	movlt	r3, r1
 8012b32:	4688      	mov	r8, r1
 8012b34:	bfbc      	itt	lt
 8012b36:	46a0      	movlt	r8, r4
 8012b38:	461c      	movlt	r4, r3
 8012b3a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012b3e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012b42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012b46:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012b4a:	eb07 0609 	add.w	r6, r7, r9
 8012b4e:	42b3      	cmp	r3, r6
 8012b50:	bfb8      	it	lt
 8012b52:	3101      	addlt	r1, #1
 8012b54:	f7ff ff08 	bl	8012968 <_Balloc>
 8012b58:	f100 0514 	add.w	r5, r0, #20
 8012b5c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012b60:	462b      	mov	r3, r5
 8012b62:	2200      	movs	r2, #0
 8012b64:	4573      	cmp	r3, lr
 8012b66:	d316      	bcc.n	8012b96 <__multiply+0x74>
 8012b68:	f104 0214 	add.w	r2, r4, #20
 8012b6c:	f108 0114 	add.w	r1, r8, #20
 8012b70:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012b74:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	9b00      	ldr	r3, [sp, #0]
 8012b7c:	9201      	str	r2, [sp, #4]
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d80c      	bhi.n	8012b9c <__multiply+0x7a>
 8012b82:	2e00      	cmp	r6, #0
 8012b84:	dd03      	ble.n	8012b8e <__multiply+0x6c>
 8012b86:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d05d      	beq.n	8012c4a <__multiply+0x128>
 8012b8e:	6106      	str	r6, [r0, #16]
 8012b90:	b003      	add	sp, #12
 8012b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b96:	f843 2b04 	str.w	r2, [r3], #4
 8012b9a:	e7e3      	b.n	8012b64 <__multiply+0x42>
 8012b9c:	f8b2 b000 	ldrh.w	fp, [r2]
 8012ba0:	f1bb 0f00 	cmp.w	fp, #0
 8012ba4:	d023      	beq.n	8012bee <__multiply+0xcc>
 8012ba6:	4689      	mov	r9, r1
 8012ba8:	46ac      	mov	ip, r5
 8012baa:	f04f 0800 	mov.w	r8, #0
 8012bae:	f859 4b04 	ldr.w	r4, [r9], #4
 8012bb2:	f8dc a000 	ldr.w	sl, [ip]
 8012bb6:	b2a3      	uxth	r3, r4
 8012bb8:	fa1f fa8a 	uxth.w	sl, sl
 8012bbc:	fb0b a303 	mla	r3, fp, r3, sl
 8012bc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012bc4:	f8dc 4000 	ldr.w	r4, [ip]
 8012bc8:	4443      	add	r3, r8
 8012bca:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012bce:	fb0b 840a 	mla	r4, fp, sl, r8
 8012bd2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012bd6:	46e2      	mov	sl, ip
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012bde:	454f      	cmp	r7, r9
 8012be0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012be4:	f84a 3b04 	str.w	r3, [sl], #4
 8012be8:	d82b      	bhi.n	8012c42 <__multiply+0x120>
 8012bea:	f8cc 8004 	str.w	r8, [ip, #4]
 8012bee:	9b01      	ldr	r3, [sp, #4]
 8012bf0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012bf4:	3204      	adds	r2, #4
 8012bf6:	f1ba 0f00 	cmp.w	sl, #0
 8012bfa:	d020      	beq.n	8012c3e <__multiply+0x11c>
 8012bfc:	682b      	ldr	r3, [r5, #0]
 8012bfe:	4689      	mov	r9, r1
 8012c00:	46a8      	mov	r8, r5
 8012c02:	f04f 0b00 	mov.w	fp, #0
 8012c06:	f8b9 c000 	ldrh.w	ip, [r9]
 8012c0a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012c0e:	fb0a 440c 	mla	r4, sl, ip, r4
 8012c12:	445c      	add	r4, fp
 8012c14:	46c4      	mov	ip, r8
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012c1c:	f84c 3b04 	str.w	r3, [ip], #4
 8012c20:	f859 3b04 	ldr.w	r3, [r9], #4
 8012c24:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012c28:	0c1b      	lsrs	r3, r3, #16
 8012c2a:	fb0a b303 	mla	r3, sl, r3, fp
 8012c2e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012c32:	454f      	cmp	r7, r9
 8012c34:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012c38:	d805      	bhi.n	8012c46 <__multiply+0x124>
 8012c3a:	f8c8 3004 	str.w	r3, [r8, #4]
 8012c3e:	3504      	adds	r5, #4
 8012c40:	e79b      	b.n	8012b7a <__multiply+0x58>
 8012c42:	46d4      	mov	ip, sl
 8012c44:	e7b3      	b.n	8012bae <__multiply+0x8c>
 8012c46:	46e0      	mov	r8, ip
 8012c48:	e7dd      	b.n	8012c06 <__multiply+0xe4>
 8012c4a:	3e01      	subs	r6, #1
 8012c4c:	e799      	b.n	8012b82 <__multiply+0x60>
	...

08012c50 <__pow5mult>:
 8012c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c54:	4615      	mov	r5, r2
 8012c56:	f012 0203 	ands.w	r2, r2, #3
 8012c5a:	4606      	mov	r6, r0
 8012c5c:	460f      	mov	r7, r1
 8012c5e:	d007      	beq.n	8012c70 <__pow5mult+0x20>
 8012c60:	3a01      	subs	r2, #1
 8012c62:	4c21      	ldr	r4, [pc, #132]	; (8012ce8 <__pow5mult+0x98>)
 8012c64:	2300      	movs	r3, #0
 8012c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c6a:	f7ff fec8 	bl	80129fe <__multadd>
 8012c6e:	4607      	mov	r7, r0
 8012c70:	10ad      	asrs	r5, r5, #2
 8012c72:	d035      	beq.n	8012ce0 <__pow5mult+0x90>
 8012c74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012c76:	b93c      	cbnz	r4, 8012c88 <__pow5mult+0x38>
 8012c78:	2010      	movs	r0, #16
 8012c7a:	f7ff fe6d 	bl	8012958 <malloc>
 8012c7e:	6270      	str	r0, [r6, #36]	; 0x24
 8012c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c84:	6004      	str	r4, [r0, #0]
 8012c86:	60c4      	str	r4, [r0, #12]
 8012c88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c90:	b94c      	cbnz	r4, 8012ca6 <__pow5mult+0x56>
 8012c92:	f240 2171 	movw	r1, #625	; 0x271
 8012c96:	4630      	mov	r0, r6
 8012c98:	f7ff ff3a 	bl	8012b10 <__i2b>
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ca2:	4604      	mov	r4, r0
 8012ca4:	6003      	str	r3, [r0, #0]
 8012ca6:	f04f 0800 	mov.w	r8, #0
 8012caa:	07eb      	lsls	r3, r5, #31
 8012cac:	d50a      	bpl.n	8012cc4 <__pow5mult+0x74>
 8012cae:	4639      	mov	r1, r7
 8012cb0:	4622      	mov	r2, r4
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f7ff ff35 	bl	8012b22 <__multiply>
 8012cb8:	4639      	mov	r1, r7
 8012cba:	4681      	mov	r9, r0
 8012cbc:	4630      	mov	r0, r6
 8012cbe:	f7ff fe87 	bl	80129d0 <_Bfree>
 8012cc2:	464f      	mov	r7, r9
 8012cc4:	106d      	asrs	r5, r5, #1
 8012cc6:	d00b      	beq.n	8012ce0 <__pow5mult+0x90>
 8012cc8:	6820      	ldr	r0, [r4, #0]
 8012cca:	b938      	cbnz	r0, 8012cdc <__pow5mult+0x8c>
 8012ccc:	4622      	mov	r2, r4
 8012cce:	4621      	mov	r1, r4
 8012cd0:	4630      	mov	r0, r6
 8012cd2:	f7ff ff26 	bl	8012b22 <__multiply>
 8012cd6:	6020      	str	r0, [r4, #0]
 8012cd8:	f8c0 8000 	str.w	r8, [r0]
 8012cdc:	4604      	mov	r4, r0
 8012cde:	e7e4      	b.n	8012caa <__pow5mult+0x5a>
 8012ce0:	4638      	mov	r0, r7
 8012ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ce6:	bf00      	nop
 8012ce8:	08014e30 	.word	0x08014e30

08012cec <__lshift>:
 8012cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf0:	460c      	mov	r4, r1
 8012cf2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012cf6:	6923      	ldr	r3, [r4, #16]
 8012cf8:	6849      	ldr	r1, [r1, #4]
 8012cfa:	eb0a 0903 	add.w	r9, sl, r3
 8012cfe:	68a3      	ldr	r3, [r4, #8]
 8012d00:	4607      	mov	r7, r0
 8012d02:	4616      	mov	r6, r2
 8012d04:	f109 0501 	add.w	r5, r9, #1
 8012d08:	42ab      	cmp	r3, r5
 8012d0a:	db32      	blt.n	8012d72 <__lshift+0x86>
 8012d0c:	4638      	mov	r0, r7
 8012d0e:	f7ff fe2b 	bl	8012968 <_Balloc>
 8012d12:	2300      	movs	r3, #0
 8012d14:	4680      	mov	r8, r0
 8012d16:	f100 0114 	add.w	r1, r0, #20
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	4553      	cmp	r3, sl
 8012d1e:	db2b      	blt.n	8012d78 <__lshift+0x8c>
 8012d20:	6920      	ldr	r0, [r4, #16]
 8012d22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d26:	f104 0314 	add.w	r3, r4, #20
 8012d2a:	f016 021f 	ands.w	r2, r6, #31
 8012d2e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012d36:	d025      	beq.n	8012d84 <__lshift+0x98>
 8012d38:	f1c2 0e20 	rsb	lr, r2, #32
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	681e      	ldr	r6, [r3, #0]
 8012d40:	468a      	mov	sl, r1
 8012d42:	4096      	lsls	r6, r2
 8012d44:	4330      	orrs	r0, r6
 8012d46:	f84a 0b04 	str.w	r0, [sl], #4
 8012d4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8012d4e:	459c      	cmp	ip, r3
 8012d50:	fa20 f00e 	lsr.w	r0, r0, lr
 8012d54:	d814      	bhi.n	8012d80 <__lshift+0x94>
 8012d56:	6048      	str	r0, [r1, #4]
 8012d58:	b108      	cbz	r0, 8012d5e <__lshift+0x72>
 8012d5a:	f109 0502 	add.w	r5, r9, #2
 8012d5e:	3d01      	subs	r5, #1
 8012d60:	4638      	mov	r0, r7
 8012d62:	f8c8 5010 	str.w	r5, [r8, #16]
 8012d66:	4621      	mov	r1, r4
 8012d68:	f7ff fe32 	bl	80129d0 <_Bfree>
 8012d6c:	4640      	mov	r0, r8
 8012d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d72:	3101      	adds	r1, #1
 8012d74:	005b      	lsls	r3, r3, #1
 8012d76:	e7c7      	b.n	8012d08 <__lshift+0x1c>
 8012d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	e7cd      	b.n	8012d1c <__lshift+0x30>
 8012d80:	4651      	mov	r1, sl
 8012d82:	e7dc      	b.n	8012d3e <__lshift+0x52>
 8012d84:	3904      	subs	r1, #4
 8012d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8012d8e:	459c      	cmp	ip, r3
 8012d90:	d8f9      	bhi.n	8012d86 <__lshift+0x9a>
 8012d92:	e7e4      	b.n	8012d5e <__lshift+0x72>

08012d94 <__mcmp>:
 8012d94:	6903      	ldr	r3, [r0, #16]
 8012d96:	690a      	ldr	r2, [r1, #16]
 8012d98:	1a9b      	subs	r3, r3, r2
 8012d9a:	b530      	push	{r4, r5, lr}
 8012d9c:	d10c      	bne.n	8012db8 <__mcmp+0x24>
 8012d9e:	0092      	lsls	r2, r2, #2
 8012da0:	3014      	adds	r0, #20
 8012da2:	3114      	adds	r1, #20
 8012da4:	1884      	adds	r4, r0, r2
 8012da6:	4411      	add	r1, r2
 8012da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012db0:	4295      	cmp	r5, r2
 8012db2:	d003      	beq.n	8012dbc <__mcmp+0x28>
 8012db4:	d305      	bcc.n	8012dc2 <__mcmp+0x2e>
 8012db6:	2301      	movs	r3, #1
 8012db8:	4618      	mov	r0, r3
 8012dba:	bd30      	pop	{r4, r5, pc}
 8012dbc:	42a0      	cmp	r0, r4
 8012dbe:	d3f3      	bcc.n	8012da8 <__mcmp+0x14>
 8012dc0:	e7fa      	b.n	8012db8 <__mcmp+0x24>
 8012dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8012dc6:	e7f7      	b.n	8012db8 <__mcmp+0x24>

08012dc8 <__mdiff>:
 8012dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dcc:	460d      	mov	r5, r1
 8012dce:	4607      	mov	r7, r0
 8012dd0:	4611      	mov	r1, r2
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	4614      	mov	r4, r2
 8012dd6:	f7ff ffdd 	bl	8012d94 <__mcmp>
 8012dda:	1e06      	subs	r6, r0, #0
 8012ddc:	d108      	bne.n	8012df0 <__mdiff+0x28>
 8012dde:	4631      	mov	r1, r6
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7ff fdc1 	bl	8012968 <_Balloc>
 8012de6:	2301      	movs	r3, #1
 8012de8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012df0:	bfa4      	itt	ge
 8012df2:	4623      	movge	r3, r4
 8012df4:	462c      	movge	r4, r5
 8012df6:	4638      	mov	r0, r7
 8012df8:	6861      	ldr	r1, [r4, #4]
 8012dfa:	bfa6      	itte	ge
 8012dfc:	461d      	movge	r5, r3
 8012dfe:	2600      	movge	r6, #0
 8012e00:	2601      	movlt	r6, #1
 8012e02:	f7ff fdb1 	bl	8012968 <_Balloc>
 8012e06:	692b      	ldr	r3, [r5, #16]
 8012e08:	60c6      	str	r6, [r0, #12]
 8012e0a:	6926      	ldr	r6, [r4, #16]
 8012e0c:	f105 0914 	add.w	r9, r5, #20
 8012e10:	f104 0214 	add.w	r2, r4, #20
 8012e14:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8012e18:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012e1c:	f100 0514 	add.w	r5, r0, #20
 8012e20:	f04f 0e00 	mov.w	lr, #0
 8012e24:	f852 ab04 	ldr.w	sl, [r2], #4
 8012e28:	f859 4b04 	ldr.w	r4, [r9], #4
 8012e2c:	fa1e f18a 	uxtah	r1, lr, sl
 8012e30:	b2a3      	uxth	r3, r4
 8012e32:	1ac9      	subs	r1, r1, r3
 8012e34:	0c23      	lsrs	r3, r4, #16
 8012e36:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8012e3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012e3e:	b289      	uxth	r1, r1
 8012e40:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012e44:	45c8      	cmp	r8, r9
 8012e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012e4a:	4694      	mov	ip, r2
 8012e4c:	f845 3b04 	str.w	r3, [r5], #4
 8012e50:	d8e8      	bhi.n	8012e24 <__mdiff+0x5c>
 8012e52:	45bc      	cmp	ip, r7
 8012e54:	d304      	bcc.n	8012e60 <__mdiff+0x98>
 8012e56:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012e5a:	b183      	cbz	r3, 8012e7e <__mdiff+0xb6>
 8012e5c:	6106      	str	r6, [r0, #16]
 8012e5e:	e7c5      	b.n	8012dec <__mdiff+0x24>
 8012e60:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012e64:	fa1e f381 	uxtah	r3, lr, r1
 8012e68:	141a      	asrs	r2, r3, #16
 8012e6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012e6e:	b29b      	uxth	r3, r3
 8012e70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e74:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012e78:	f845 3b04 	str.w	r3, [r5], #4
 8012e7c:	e7e9      	b.n	8012e52 <__mdiff+0x8a>
 8012e7e:	3e01      	subs	r6, #1
 8012e80:	e7e9      	b.n	8012e56 <__mdiff+0x8e>

08012e82 <__d2b>:
 8012e82:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e86:	460e      	mov	r6, r1
 8012e88:	2101      	movs	r1, #1
 8012e8a:	ec59 8b10 	vmov	r8, r9, d0
 8012e8e:	4615      	mov	r5, r2
 8012e90:	f7ff fd6a 	bl	8012968 <_Balloc>
 8012e94:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012e98:	4607      	mov	r7, r0
 8012e9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e9e:	bb34      	cbnz	r4, 8012eee <__d2b+0x6c>
 8012ea0:	9301      	str	r3, [sp, #4]
 8012ea2:	f1b8 0300 	subs.w	r3, r8, #0
 8012ea6:	d027      	beq.n	8012ef8 <__d2b+0x76>
 8012ea8:	a802      	add	r0, sp, #8
 8012eaa:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012eae:	f7ff fe00 	bl	8012ab2 <__lo0bits>
 8012eb2:	9900      	ldr	r1, [sp, #0]
 8012eb4:	b1f0      	cbz	r0, 8012ef4 <__d2b+0x72>
 8012eb6:	9a01      	ldr	r2, [sp, #4]
 8012eb8:	f1c0 0320 	rsb	r3, r0, #32
 8012ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8012ec0:	430b      	orrs	r3, r1
 8012ec2:	40c2      	lsrs	r2, r0
 8012ec4:	617b      	str	r3, [r7, #20]
 8012ec6:	9201      	str	r2, [sp, #4]
 8012ec8:	9b01      	ldr	r3, [sp, #4]
 8012eca:	61bb      	str	r3, [r7, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	bf14      	ite	ne
 8012ed0:	2102      	movne	r1, #2
 8012ed2:	2101      	moveq	r1, #1
 8012ed4:	6139      	str	r1, [r7, #16]
 8012ed6:	b1c4      	cbz	r4, 8012f0a <__d2b+0x88>
 8012ed8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012edc:	4404      	add	r4, r0
 8012ede:	6034      	str	r4, [r6, #0]
 8012ee0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ee4:	6028      	str	r0, [r5, #0]
 8012ee6:	4638      	mov	r0, r7
 8012ee8:	b003      	add	sp, #12
 8012eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ef2:	e7d5      	b.n	8012ea0 <__d2b+0x1e>
 8012ef4:	6179      	str	r1, [r7, #20]
 8012ef6:	e7e7      	b.n	8012ec8 <__d2b+0x46>
 8012ef8:	a801      	add	r0, sp, #4
 8012efa:	f7ff fdda 	bl	8012ab2 <__lo0bits>
 8012efe:	9b01      	ldr	r3, [sp, #4]
 8012f00:	617b      	str	r3, [r7, #20]
 8012f02:	2101      	movs	r1, #1
 8012f04:	6139      	str	r1, [r7, #16]
 8012f06:	3020      	adds	r0, #32
 8012f08:	e7e5      	b.n	8012ed6 <__d2b+0x54>
 8012f0a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012f0e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012f12:	6030      	str	r0, [r6, #0]
 8012f14:	6918      	ldr	r0, [r3, #16]
 8012f16:	f7ff fdad 	bl	8012a74 <__hi0bits>
 8012f1a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012f1e:	e7e1      	b.n	8012ee4 <__d2b+0x62>

08012f20 <_calloc_r>:
 8012f20:	b538      	push	{r3, r4, r5, lr}
 8012f22:	fb02 f401 	mul.w	r4, r2, r1
 8012f26:	4621      	mov	r1, r4
 8012f28:	f000 f856 	bl	8012fd8 <_malloc_r>
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	b118      	cbz	r0, 8012f38 <_calloc_r+0x18>
 8012f30:	4622      	mov	r2, r4
 8012f32:	2100      	movs	r1, #0
 8012f34:	f7fd fe92 	bl	8010c5c <memset>
 8012f38:	4628      	mov	r0, r5
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}

08012f3c <_free_r>:
 8012f3c:	b538      	push	{r3, r4, r5, lr}
 8012f3e:	4605      	mov	r5, r0
 8012f40:	2900      	cmp	r1, #0
 8012f42:	d045      	beq.n	8012fd0 <_free_r+0x94>
 8012f44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f48:	1f0c      	subs	r4, r1, #4
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	bfb8      	it	lt
 8012f4e:	18e4      	addlt	r4, r4, r3
 8012f50:	f000 fa98 	bl	8013484 <__malloc_lock>
 8012f54:	4a1f      	ldr	r2, [pc, #124]	; (8012fd4 <_free_r+0x98>)
 8012f56:	6813      	ldr	r3, [r2, #0]
 8012f58:	4610      	mov	r0, r2
 8012f5a:	b933      	cbnz	r3, 8012f6a <_free_r+0x2e>
 8012f5c:	6063      	str	r3, [r4, #4]
 8012f5e:	6014      	str	r4, [r2, #0]
 8012f60:	4628      	mov	r0, r5
 8012f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f66:	f000 ba8e 	b.w	8013486 <__malloc_unlock>
 8012f6a:	42a3      	cmp	r3, r4
 8012f6c:	d90c      	bls.n	8012f88 <_free_r+0x4c>
 8012f6e:	6821      	ldr	r1, [r4, #0]
 8012f70:	1862      	adds	r2, r4, r1
 8012f72:	4293      	cmp	r3, r2
 8012f74:	bf04      	itt	eq
 8012f76:	681a      	ldreq	r2, [r3, #0]
 8012f78:	685b      	ldreq	r3, [r3, #4]
 8012f7a:	6063      	str	r3, [r4, #4]
 8012f7c:	bf04      	itt	eq
 8012f7e:	1852      	addeq	r2, r2, r1
 8012f80:	6022      	streq	r2, [r4, #0]
 8012f82:	6004      	str	r4, [r0, #0]
 8012f84:	e7ec      	b.n	8012f60 <_free_r+0x24>
 8012f86:	4613      	mov	r3, r2
 8012f88:	685a      	ldr	r2, [r3, #4]
 8012f8a:	b10a      	cbz	r2, 8012f90 <_free_r+0x54>
 8012f8c:	42a2      	cmp	r2, r4
 8012f8e:	d9fa      	bls.n	8012f86 <_free_r+0x4a>
 8012f90:	6819      	ldr	r1, [r3, #0]
 8012f92:	1858      	adds	r0, r3, r1
 8012f94:	42a0      	cmp	r0, r4
 8012f96:	d10b      	bne.n	8012fb0 <_free_r+0x74>
 8012f98:	6820      	ldr	r0, [r4, #0]
 8012f9a:	4401      	add	r1, r0
 8012f9c:	1858      	adds	r0, r3, r1
 8012f9e:	4282      	cmp	r2, r0
 8012fa0:	6019      	str	r1, [r3, #0]
 8012fa2:	d1dd      	bne.n	8012f60 <_free_r+0x24>
 8012fa4:	6810      	ldr	r0, [r2, #0]
 8012fa6:	6852      	ldr	r2, [r2, #4]
 8012fa8:	605a      	str	r2, [r3, #4]
 8012faa:	4401      	add	r1, r0
 8012fac:	6019      	str	r1, [r3, #0]
 8012fae:	e7d7      	b.n	8012f60 <_free_r+0x24>
 8012fb0:	d902      	bls.n	8012fb8 <_free_r+0x7c>
 8012fb2:	230c      	movs	r3, #12
 8012fb4:	602b      	str	r3, [r5, #0]
 8012fb6:	e7d3      	b.n	8012f60 <_free_r+0x24>
 8012fb8:	6820      	ldr	r0, [r4, #0]
 8012fba:	1821      	adds	r1, r4, r0
 8012fbc:	428a      	cmp	r2, r1
 8012fbe:	bf04      	itt	eq
 8012fc0:	6811      	ldreq	r1, [r2, #0]
 8012fc2:	6852      	ldreq	r2, [r2, #4]
 8012fc4:	6062      	str	r2, [r4, #4]
 8012fc6:	bf04      	itt	eq
 8012fc8:	1809      	addeq	r1, r1, r0
 8012fca:	6021      	streq	r1, [r4, #0]
 8012fcc:	605c      	str	r4, [r3, #4]
 8012fce:	e7c7      	b.n	8012f60 <_free_r+0x24>
 8012fd0:	bd38      	pop	{r3, r4, r5, pc}
 8012fd2:	bf00      	nop
 8012fd4:	200026f8 	.word	0x200026f8

08012fd8 <_malloc_r>:
 8012fd8:	b570      	push	{r4, r5, r6, lr}
 8012fda:	1ccd      	adds	r5, r1, #3
 8012fdc:	f025 0503 	bic.w	r5, r5, #3
 8012fe0:	3508      	adds	r5, #8
 8012fe2:	2d0c      	cmp	r5, #12
 8012fe4:	bf38      	it	cc
 8012fe6:	250c      	movcc	r5, #12
 8012fe8:	2d00      	cmp	r5, #0
 8012fea:	4606      	mov	r6, r0
 8012fec:	db01      	blt.n	8012ff2 <_malloc_r+0x1a>
 8012fee:	42a9      	cmp	r1, r5
 8012ff0:	d903      	bls.n	8012ffa <_malloc_r+0x22>
 8012ff2:	230c      	movs	r3, #12
 8012ff4:	6033      	str	r3, [r6, #0]
 8012ff6:	2000      	movs	r0, #0
 8012ff8:	bd70      	pop	{r4, r5, r6, pc}
 8012ffa:	f000 fa43 	bl	8013484 <__malloc_lock>
 8012ffe:	4a21      	ldr	r2, [pc, #132]	; (8013084 <_malloc_r+0xac>)
 8013000:	6814      	ldr	r4, [r2, #0]
 8013002:	4621      	mov	r1, r4
 8013004:	b991      	cbnz	r1, 801302c <_malloc_r+0x54>
 8013006:	4c20      	ldr	r4, [pc, #128]	; (8013088 <_malloc_r+0xb0>)
 8013008:	6823      	ldr	r3, [r4, #0]
 801300a:	b91b      	cbnz	r3, 8013014 <_malloc_r+0x3c>
 801300c:	4630      	mov	r0, r6
 801300e:	f000 f97d 	bl	801330c <_sbrk_r>
 8013012:	6020      	str	r0, [r4, #0]
 8013014:	4629      	mov	r1, r5
 8013016:	4630      	mov	r0, r6
 8013018:	f000 f978 	bl	801330c <_sbrk_r>
 801301c:	1c43      	adds	r3, r0, #1
 801301e:	d124      	bne.n	801306a <_malloc_r+0x92>
 8013020:	230c      	movs	r3, #12
 8013022:	6033      	str	r3, [r6, #0]
 8013024:	4630      	mov	r0, r6
 8013026:	f000 fa2e 	bl	8013486 <__malloc_unlock>
 801302a:	e7e4      	b.n	8012ff6 <_malloc_r+0x1e>
 801302c:	680b      	ldr	r3, [r1, #0]
 801302e:	1b5b      	subs	r3, r3, r5
 8013030:	d418      	bmi.n	8013064 <_malloc_r+0x8c>
 8013032:	2b0b      	cmp	r3, #11
 8013034:	d90f      	bls.n	8013056 <_malloc_r+0x7e>
 8013036:	600b      	str	r3, [r1, #0]
 8013038:	50cd      	str	r5, [r1, r3]
 801303a:	18cc      	adds	r4, r1, r3
 801303c:	4630      	mov	r0, r6
 801303e:	f000 fa22 	bl	8013486 <__malloc_unlock>
 8013042:	f104 000b 	add.w	r0, r4, #11
 8013046:	1d23      	adds	r3, r4, #4
 8013048:	f020 0007 	bic.w	r0, r0, #7
 801304c:	1ac3      	subs	r3, r0, r3
 801304e:	d0d3      	beq.n	8012ff8 <_malloc_r+0x20>
 8013050:	425a      	negs	r2, r3
 8013052:	50e2      	str	r2, [r4, r3]
 8013054:	e7d0      	b.n	8012ff8 <_malloc_r+0x20>
 8013056:	428c      	cmp	r4, r1
 8013058:	684b      	ldr	r3, [r1, #4]
 801305a:	bf16      	itet	ne
 801305c:	6063      	strne	r3, [r4, #4]
 801305e:	6013      	streq	r3, [r2, #0]
 8013060:	460c      	movne	r4, r1
 8013062:	e7eb      	b.n	801303c <_malloc_r+0x64>
 8013064:	460c      	mov	r4, r1
 8013066:	6849      	ldr	r1, [r1, #4]
 8013068:	e7cc      	b.n	8013004 <_malloc_r+0x2c>
 801306a:	1cc4      	adds	r4, r0, #3
 801306c:	f024 0403 	bic.w	r4, r4, #3
 8013070:	42a0      	cmp	r0, r4
 8013072:	d005      	beq.n	8013080 <_malloc_r+0xa8>
 8013074:	1a21      	subs	r1, r4, r0
 8013076:	4630      	mov	r0, r6
 8013078:	f000 f948 	bl	801330c <_sbrk_r>
 801307c:	3001      	adds	r0, #1
 801307e:	d0cf      	beq.n	8013020 <_malloc_r+0x48>
 8013080:	6025      	str	r5, [r4, #0]
 8013082:	e7db      	b.n	801303c <_malloc_r+0x64>
 8013084:	200026f8 	.word	0x200026f8
 8013088:	200026fc 	.word	0x200026fc

0801308c <__sfputc_r>:
 801308c:	6893      	ldr	r3, [r2, #8]
 801308e:	3b01      	subs	r3, #1
 8013090:	2b00      	cmp	r3, #0
 8013092:	b410      	push	{r4}
 8013094:	6093      	str	r3, [r2, #8]
 8013096:	da08      	bge.n	80130aa <__sfputc_r+0x1e>
 8013098:	6994      	ldr	r4, [r2, #24]
 801309a:	42a3      	cmp	r3, r4
 801309c:	db01      	blt.n	80130a2 <__sfputc_r+0x16>
 801309e:	290a      	cmp	r1, #10
 80130a0:	d103      	bne.n	80130aa <__sfputc_r+0x1e>
 80130a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130a6:	f7fe bb67 	b.w	8011778 <__swbuf_r>
 80130aa:	6813      	ldr	r3, [r2, #0]
 80130ac:	1c58      	adds	r0, r3, #1
 80130ae:	6010      	str	r0, [r2, #0]
 80130b0:	7019      	strb	r1, [r3, #0]
 80130b2:	4608      	mov	r0, r1
 80130b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130b8:	4770      	bx	lr

080130ba <__sfputs_r>:
 80130ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130bc:	4606      	mov	r6, r0
 80130be:	460f      	mov	r7, r1
 80130c0:	4614      	mov	r4, r2
 80130c2:	18d5      	adds	r5, r2, r3
 80130c4:	42ac      	cmp	r4, r5
 80130c6:	d101      	bne.n	80130cc <__sfputs_r+0x12>
 80130c8:	2000      	movs	r0, #0
 80130ca:	e007      	b.n	80130dc <__sfputs_r+0x22>
 80130cc:	463a      	mov	r2, r7
 80130ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130d2:	4630      	mov	r0, r6
 80130d4:	f7ff ffda 	bl	801308c <__sfputc_r>
 80130d8:	1c43      	adds	r3, r0, #1
 80130da:	d1f3      	bne.n	80130c4 <__sfputs_r+0xa>
 80130dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080130e0 <_vfiprintf_r>:
 80130e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e4:	460c      	mov	r4, r1
 80130e6:	b09d      	sub	sp, #116	; 0x74
 80130e8:	4617      	mov	r7, r2
 80130ea:	461d      	mov	r5, r3
 80130ec:	4606      	mov	r6, r0
 80130ee:	b118      	cbz	r0, 80130f8 <_vfiprintf_r+0x18>
 80130f0:	6983      	ldr	r3, [r0, #24]
 80130f2:	b90b      	cbnz	r3, 80130f8 <_vfiprintf_r+0x18>
 80130f4:	f7ff fb34 	bl	8012760 <__sinit>
 80130f8:	4b7c      	ldr	r3, [pc, #496]	; (80132ec <_vfiprintf_r+0x20c>)
 80130fa:	429c      	cmp	r4, r3
 80130fc:	d158      	bne.n	80131b0 <_vfiprintf_r+0xd0>
 80130fe:	6874      	ldr	r4, [r6, #4]
 8013100:	89a3      	ldrh	r3, [r4, #12]
 8013102:	0718      	lsls	r0, r3, #28
 8013104:	d55e      	bpl.n	80131c4 <_vfiprintf_r+0xe4>
 8013106:	6923      	ldr	r3, [r4, #16]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d05b      	beq.n	80131c4 <_vfiprintf_r+0xe4>
 801310c:	2300      	movs	r3, #0
 801310e:	9309      	str	r3, [sp, #36]	; 0x24
 8013110:	2320      	movs	r3, #32
 8013112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013116:	2330      	movs	r3, #48	; 0x30
 8013118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801311c:	9503      	str	r5, [sp, #12]
 801311e:	f04f 0b01 	mov.w	fp, #1
 8013122:	46b8      	mov	r8, r7
 8013124:	4645      	mov	r5, r8
 8013126:	f815 3b01 	ldrb.w	r3, [r5], #1
 801312a:	b10b      	cbz	r3, 8013130 <_vfiprintf_r+0x50>
 801312c:	2b25      	cmp	r3, #37	; 0x25
 801312e:	d154      	bne.n	80131da <_vfiprintf_r+0xfa>
 8013130:	ebb8 0a07 	subs.w	sl, r8, r7
 8013134:	d00b      	beq.n	801314e <_vfiprintf_r+0x6e>
 8013136:	4653      	mov	r3, sl
 8013138:	463a      	mov	r2, r7
 801313a:	4621      	mov	r1, r4
 801313c:	4630      	mov	r0, r6
 801313e:	f7ff ffbc 	bl	80130ba <__sfputs_r>
 8013142:	3001      	adds	r0, #1
 8013144:	f000 80c2 	beq.w	80132cc <_vfiprintf_r+0x1ec>
 8013148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801314a:	4453      	add	r3, sl
 801314c:	9309      	str	r3, [sp, #36]	; 0x24
 801314e:	f898 3000 	ldrb.w	r3, [r8]
 8013152:	2b00      	cmp	r3, #0
 8013154:	f000 80ba 	beq.w	80132cc <_vfiprintf_r+0x1ec>
 8013158:	2300      	movs	r3, #0
 801315a:	f04f 32ff 	mov.w	r2, #4294967295
 801315e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013162:	9304      	str	r3, [sp, #16]
 8013164:	9307      	str	r3, [sp, #28]
 8013166:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801316a:	931a      	str	r3, [sp, #104]	; 0x68
 801316c:	46a8      	mov	r8, r5
 801316e:	2205      	movs	r2, #5
 8013170:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013174:	485e      	ldr	r0, [pc, #376]	; (80132f0 <_vfiprintf_r+0x210>)
 8013176:	f7ed f833 	bl	80001e0 <memchr>
 801317a:	9b04      	ldr	r3, [sp, #16]
 801317c:	bb78      	cbnz	r0, 80131de <_vfiprintf_r+0xfe>
 801317e:	06d9      	lsls	r1, r3, #27
 8013180:	bf44      	itt	mi
 8013182:	2220      	movmi	r2, #32
 8013184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013188:	071a      	lsls	r2, r3, #28
 801318a:	bf44      	itt	mi
 801318c:	222b      	movmi	r2, #43	; 0x2b
 801318e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013192:	782a      	ldrb	r2, [r5, #0]
 8013194:	2a2a      	cmp	r2, #42	; 0x2a
 8013196:	d02a      	beq.n	80131ee <_vfiprintf_r+0x10e>
 8013198:	9a07      	ldr	r2, [sp, #28]
 801319a:	46a8      	mov	r8, r5
 801319c:	2000      	movs	r0, #0
 801319e:	250a      	movs	r5, #10
 80131a0:	4641      	mov	r1, r8
 80131a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131a6:	3b30      	subs	r3, #48	; 0x30
 80131a8:	2b09      	cmp	r3, #9
 80131aa:	d969      	bls.n	8013280 <_vfiprintf_r+0x1a0>
 80131ac:	b360      	cbz	r0, 8013208 <_vfiprintf_r+0x128>
 80131ae:	e024      	b.n	80131fa <_vfiprintf_r+0x11a>
 80131b0:	4b50      	ldr	r3, [pc, #320]	; (80132f4 <_vfiprintf_r+0x214>)
 80131b2:	429c      	cmp	r4, r3
 80131b4:	d101      	bne.n	80131ba <_vfiprintf_r+0xda>
 80131b6:	68b4      	ldr	r4, [r6, #8]
 80131b8:	e7a2      	b.n	8013100 <_vfiprintf_r+0x20>
 80131ba:	4b4f      	ldr	r3, [pc, #316]	; (80132f8 <_vfiprintf_r+0x218>)
 80131bc:	429c      	cmp	r4, r3
 80131be:	bf08      	it	eq
 80131c0:	68f4      	ldreq	r4, [r6, #12]
 80131c2:	e79d      	b.n	8013100 <_vfiprintf_r+0x20>
 80131c4:	4621      	mov	r1, r4
 80131c6:	4630      	mov	r0, r6
 80131c8:	f7fe fb28 	bl	801181c <__swsetup_r>
 80131cc:	2800      	cmp	r0, #0
 80131ce:	d09d      	beq.n	801310c <_vfiprintf_r+0x2c>
 80131d0:	f04f 30ff 	mov.w	r0, #4294967295
 80131d4:	b01d      	add	sp, #116	; 0x74
 80131d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131da:	46a8      	mov	r8, r5
 80131dc:	e7a2      	b.n	8013124 <_vfiprintf_r+0x44>
 80131de:	4a44      	ldr	r2, [pc, #272]	; (80132f0 <_vfiprintf_r+0x210>)
 80131e0:	1a80      	subs	r0, r0, r2
 80131e2:	fa0b f000 	lsl.w	r0, fp, r0
 80131e6:	4318      	orrs	r0, r3
 80131e8:	9004      	str	r0, [sp, #16]
 80131ea:	4645      	mov	r5, r8
 80131ec:	e7be      	b.n	801316c <_vfiprintf_r+0x8c>
 80131ee:	9a03      	ldr	r2, [sp, #12]
 80131f0:	1d11      	adds	r1, r2, #4
 80131f2:	6812      	ldr	r2, [r2, #0]
 80131f4:	9103      	str	r1, [sp, #12]
 80131f6:	2a00      	cmp	r2, #0
 80131f8:	db01      	blt.n	80131fe <_vfiprintf_r+0x11e>
 80131fa:	9207      	str	r2, [sp, #28]
 80131fc:	e004      	b.n	8013208 <_vfiprintf_r+0x128>
 80131fe:	4252      	negs	r2, r2
 8013200:	f043 0302 	orr.w	r3, r3, #2
 8013204:	9207      	str	r2, [sp, #28]
 8013206:	9304      	str	r3, [sp, #16]
 8013208:	f898 3000 	ldrb.w	r3, [r8]
 801320c:	2b2e      	cmp	r3, #46	; 0x2e
 801320e:	d10e      	bne.n	801322e <_vfiprintf_r+0x14e>
 8013210:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013214:	2b2a      	cmp	r3, #42	; 0x2a
 8013216:	d138      	bne.n	801328a <_vfiprintf_r+0x1aa>
 8013218:	9b03      	ldr	r3, [sp, #12]
 801321a:	1d1a      	adds	r2, r3, #4
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	9203      	str	r2, [sp, #12]
 8013220:	2b00      	cmp	r3, #0
 8013222:	bfb8      	it	lt
 8013224:	f04f 33ff 	movlt.w	r3, #4294967295
 8013228:	f108 0802 	add.w	r8, r8, #2
 801322c:	9305      	str	r3, [sp, #20]
 801322e:	4d33      	ldr	r5, [pc, #204]	; (80132fc <_vfiprintf_r+0x21c>)
 8013230:	f898 1000 	ldrb.w	r1, [r8]
 8013234:	2203      	movs	r2, #3
 8013236:	4628      	mov	r0, r5
 8013238:	f7ec ffd2 	bl	80001e0 <memchr>
 801323c:	b140      	cbz	r0, 8013250 <_vfiprintf_r+0x170>
 801323e:	2340      	movs	r3, #64	; 0x40
 8013240:	1b40      	subs	r0, r0, r5
 8013242:	fa03 f000 	lsl.w	r0, r3, r0
 8013246:	9b04      	ldr	r3, [sp, #16]
 8013248:	4303      	orrs	r3, r0
 801324a:	f108 0801 	add.w	r8, r8, #1
 801324e:	9304      	str	r3, [sp, #16]
 8013250:	f898 1000 	ldrb.w	r1, [r8]
 8013254:	482a      	ldr	r0, [pc, #168]	; (8013300 <_vfiprintf_r+0x220>)
 8013256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801325a:	2206      	movs	r2, #6
 801325c:	f108 0701 	add.w	r7, r8, #1
 8013260:	f7ec ffbe 	bl	80001e0 <memchr>
 8013264:	2800      	cmp	r0, #0
 8013266:	d037      	beq.n	80132d8 <_vfiprintf_r+0x1f8>
 8013268:	4b26      	ldr	r3, [pc, #152]	; (8013304 <_vfiprintf_r+0x224>)
 801326a:	bb1b      	cbnz	r3, 80132b4 <_vfiprintf_r+0x1d4>
 801326c:	9b03      	ldr	r3, [sp, #12]
 801326e:	3307      	adds	r3, #7
 8013270:	f023 0307 	bic.w	r3, r3, #7
 8013274:	3308      	adds	r3, #8
 8013276:	9303      	str	r3, [sp, #12]
 8013278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801327a:	444b      	add	r3, r9
 801327c:	9309      	str	r3, [sp, #36]	; 0x24
 801327e:	e750      	b.n	8013122 <_vfiprintf_r+0x42>
 8013280:	fb05 3202 	mla	r2, r5, r2, r3
 8013284:	2001      	movs	r0, #1
 8013286:	4688      	mov	r8, r1
 8013288:	e78a      	b.n	80131a0 <_vfiprintf_r+0xc0>
 801328a:	2300      	movs	r3, #0
 801328c:	f108 0801 	add.w	r8, r8, #1
 8013290:	9305      	str	r3, [sp, #20]
 8013292:	4619      	mov	r1, r3
 8013294:	250a      	movs	r5, #10
 8013296:	4640      	mov	r0, r8
 8013298:	f810 2b01 	ldrb.w	r2, [r0], #1
 801329c:	3a30      	subs	r2, #48	; 0x30
 801329e:	2a09      	cmp	r2, #9
 80132a0:	d903      	bls.n	80132aa <_vfiprintf_r+0x1ca>
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d0c3      	beq.n	801322e <_vfiprintf_r+0x14e>
 80132a6:	9105      	str	r1, [sp, #20]
 80132a8:	e7c1      	b.n	801322e <_vfiprintf_r+0x14e>
 80132aa:	fb05 2101 	mla	r1, r5, r1, r2
 80132ae:	2301      	movs	r3, #1
 80132b0:	4680      	mov	r8, r0
 80132b2:	e7f0      	b.n	8013296 <_vfiprintf_r+0x1b6>
 80132b4:	ab03      	add	r3, sp, #12
 80132b6:	9300      	str	r3, [sp, #0]
 80132b8:	4622      	mov	r2, r4
 80132ba:	4b13      	ldr	r3, [pc, #76]	; (8013308 <_vfiprintf_r+0x228>)
 80132bc:	a904      	add	r1, sp, #16
 80132be:	4630      	mov	r0, r6
 80132c0:	f7fd fd68 	bl	8010d94 <_printf_float>
 80132c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80132c8:	4681      	mov	r9, r0
 80132ca:	d1d5      	bne.n	8013278 <_vfiprintf_r+0x198>
 80132cc:	89a3      	ldrh	r3, [r4, #12]
 80132ce:	065b      	lsls	r3, r3, #25
 80132d0:	f53f af7e 	bmi.w	80131d0 <_vfiprintf_r+0xf0>
 80132d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132d6:	e77d      	b.n	80131d4 <_vfiprintf_r+0xf4>
 80132d8:	ab03      	add	r3, sp, #12
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	4622      	mov	r2, r4
 80132de:	4b0a      	ldr	r3, [pc, #40]	; (8013308 <_vfiprintf_r+0x228>)
 80132e0:	a904      	add	r1, sp, #16
 80132e2:	4630      	mov	r0, r6
 80132e4:	f7fe f80c 	bl	8011300 <_printf_i>
 80132e8:	e7ec      	b.n	80132c4 <_vfiprintf_r+0x1e4>
 80132ea:	bf00      	nop
 80132ec:	08014cfc 	.word	0x08014cfc
 80132f0:	08014e3c 	.word	0x08014e3c
 80132f4:	08014d1c 	.word	0x08014d1c
 80132f8:	08014cdc 	.word	0x08014cdc
 80132fc:	08014e42 	.word	0x08014e42
 8013300:	08014e46 	.word	0x08014e46
 8013304:	08010d95 	.word	0x08010d95
 8013308:	080130bb 	.word	0x080130bb

0801330c <_sbrk_r>:
 801330c:	b538      	push	{r3, r4, r5, lr}
 801330e:	4c06      	ldr	r4, [pc, #24]	; (8013328 <_sbrk_r+0x1c>)
 8013310:	2300      	movs	r3, #0
 8013312:	4605      	mov	r5, r0
 8013314:	4608      	mov	r0, r1
 8013316:	6023      	str	r3, [r4, #0]
 8013318:	f7f4 fb7c 	bl	8007a14 <_sbrk>
 801331c:	1c43      	adds	r3, r0, #1
 801331e:	d102      	bne.n	8013326 <_sbrk_r+0x1a>
 8013320:	6823      	ldr	r3, [r4, #0]
 8013322:	b103      	cbz	r3, 8013326 <_sbrk_r+0x1a>
 8013324:	602b      	str	r3, [r5, #0]
 8013326:	bd38      	pop	{r3, r4, r5, pc}
 8013328:	20003c24 	.word	0x20003c24

0801332c <__sread>:
 801332c:	b510      	push	{r4, lr}
 801332e:	460c      	mov	r4, r1
 8013330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013334:	f000 f8a8 	bl	8013488 <_read_r>
 8013338:	2800      	cmp	r0, #0
 801333a:	bfab      	itete	ge
 801333c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801333e:	89a3      	ldrhlt	r3, [r4, #12]
 8013340:	181b      	addge	r3, r3, r0
 8013342:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013346:	bfac      	ite	ge
 8013348:	6563      	strge	r3, [r4, #84]	; 0x54
 801334a:	81a3      	strhlt	r3, [r4, #12]
 801334c:	bd10      	pop	{r4, pc}

0801334e <__swrite>:
 801334e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013352:	461f      	mov	r7, r3
 8013354:	898b      	ldrh	r3, [r1, #12]
 8013356:	05db      	lsls	r3, r3, #23
 8013358:	4605      	mov	r5, r0
 801335a:	460c      	mov	r4, r1
 801335c:	4616      	mov	r6, r2
 801335e:	d505      	bpl.n	801336c <__swrite+0x1e>
 8013360:	2302      	movs	r3, #2
 8013362:	2200      	movs	r2, #0
 8013364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013368:	f000 f868 	bl	801343c <_lseek_r>
 801336c:	89a3      	ldrh	r3, [r4, #12]
 801336e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013372:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013376:	81a3      	strh	r3, [r4, #12]
 8013378:	4632      	mov	r2, r6
 801337a:	463b      	mov	r3, r7
 801337c:	4628      	mov	r0, r5
 801337e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013382:	f000 b817 	b.w	80133b4 <_write_r>

08013386 <__sseek>:
 8013386:	b510      	push	{r4, lr}
 8013388:	460c      	mov	r4, r1
 801338a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801338e:	f000 f855 	bl	801343c <_lseek_r>
 8013392:	1c43      	adds	r3, r0, #1
 8013394:	89a3      	ldrh	r3, [r4, #12]
 8013396:	bf15      	itete	ne
 8013398:	6560      	strne	r0, [r4, #84]	; 0x54
 801339a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801339e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80133a2:	81a3      	strheq	r3, [r4, #12]
 80133a4:	bf18      	it	ne
 80133a6:	81a3      	strhne	r3, [r4, #12]
 80133a8:	bd10      	pop	{r4, pc}

080133aa <__sclose>:
 80133aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133ae:	f000 b813 	b.w	80133d8 <_close_r>
	...

080133b4 <_write_r>:
 80133b4:	b538      	push	{r3, r4, r5, lr}
 80133b6:	4c07      	ldr	r4, [pc, #28]	; (80133d4 <_write_r+0x20>)
 80133b8:	4605      	mov	r5, r0
 80133ba:	4608      	mov	r0, r1
 80133bc:	4611      	mov	r1, r2
 80133be:	2200      	movs	r2, #0
 80133c0:	6022      	str	r2, [r4, #0]
 80133c2:	461a      	mov	r2, r3
 80133c4:	f7f0 f96c 	bl	80036a0 <_write>
 80133c8:	1c43      	adds	r3, r0, #1
 80133ca:	d102      	bne.n	80133d2 <_write_r+0x1e>
 80133cc:	6823      	ldr	r3, [r4, #0]
 80133ce:	b103      	cbz	r3, 80133d2 <_write_r+0x1e>
 80133d0:	602b      	str	r3, [r5, #0]
 80133d2:	bd38      	pop	{r3, r4, r5, pc}
 80133d4:	20003c24 	.word	0x20003c24

080133d8 <_close_r>:
 80133d8:	b538      	push	{r3, r4, r5, lr}
 80133da:	4c06      	ldr	r4, [pc, #24]	; (80133f4 <_close_r+0x1c>)
 80133dc:	2300      	movs	r3, #0
 80133de:	4605      	mov	r5, r0
 80133e0:	4608      	mov	r0, r1
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	f7f0 f986 	bl	80036f4 <_close>
 80133e8:	1c43      	adds	r3, r0, #1
 80133ea:	d102      	bne.n	80133f2 <_close_r+0x1a>
 80133ec:	6823      	ldr	r3, [r4, #0]
 80133ee:	b103      	cbz	r3, 80133f2 <_close_r+0x1a>
 80133f0:	602b      	str	r3, [r5, #0]
 80133f2:	bd38      	pop	{r3, r4, r5, pc}
 80133f4:	20003c24 	.word	0x20003c24

080133f8 <_fstat_r>:
 80133f8:	b538      	push	{r3, r4, r5, lr}
 80133fa:	4c07      	ldr	r4, [pc, #28]	; (8013418 <_fstat_r+0x20>)
 80133fc:	2300      	movs	r3, #0
 80133fe:	4605      	mov	r5, r0
 8013400:	4608      	mov	r0, r1
 8013402:	4611      	mov	r1, r2
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	f7f0 f9c5 	bl	8003794 <_fstat>
 801340a:	1c43      	adds	r3, r0, #1
 801340c:	d102      	bne.n	8013414 <_fstat_r+0x1c>
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	b103      	cbz	r3, 8013414 <_fstat_r+0x1c>
 8013412:	602b      	str	r3, [r5, #0]
 8013414:	bd38      	pop	{r3, r4, r5, pc}
 8013416:	bf00      	nop
 8013418:	20003c24 	.word	0x20003c24

0801341c <_isatty_r>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	4c06      	ldr	r4, [pc, #24]	; (8013438 <_isatty_r+0x1c>)
 8013420:	2300      	movs	r3, #0
 8013422:	4605      	mov	r5, r0
 8013424:	4608      	mov	r0, r1
 8013426:	6023      	str	r3, [r4, #0]
 8013428:	f7f0 f924 	bl	8003674 <_isatty>
 801342c:	1c43      	adds	r3, r0, #1
 801342e:	d102      	bne.n	8013436 <_isatty_r+0x1a>
 8013430:	6823      	ldr	r3, [r4, #0]
 8013432:	b103      	cbz	r3, 8013436 <_isatty_r+0x1a>
 8013434:	602b      	str	r3, [r5, #0]
 8013436:	bd38      	pop	{r3, r4, r5, pc}
 8013438:	20003c24 	.word	0x20003c24

0801343c <_lseek_r>:
 801343c:	b538      	push	{r3, r4, r5, lr}
 801343e:	4c07      	ldr	r4, [pc, #28]	; (801345c <_lseek_r+0x20>)
 8013440:	4605      	mov	r5, r0
 8013442:	4608      	mov	r0, r1
 8013444:	4611      	mov	r1, r2
 8013446:	2200      	movs	r2, #0
 8013448:	6022      	str	r2, [r4, #0]
 801344a:	461a      	mov	r2, r3
 801344c:	f7f0 f969 	bl	8003722 <_lseek>
 8013450:	1c43      	adds	r3, r0, #1
 8013452:	d102      	bne.n	801345a <_lseek_r+0x1e>
 8013454:	6823      	ldr	r3, [r4, #0]
 8013456:	b103      	cbz	r3, 801345a <_lseek_r+0x1e>
 8013458:	602b      	str	r3, [r5, #0]
 801345a:	bd38      	pop	{r3, r4, r5, pc}
 801345c:	20003c24 	.word	0x20003c24

08013460 <__ascii_mbtowc>:
 8013460:	b082      	sub	sp, #8
 8013462:	b901      	cbnz	r1, 8013466 <__ascii_mbtowc+0x6>
 8013464:	a901      	add	r1, sp, #4
 8013466:	b142      	cbz	r2, 801347a <__ascii_mbtowc+0x1a>
 8013468:	b14b      	cbz	r3, 801347e <__ascii_mbtowc+0x1e>
 801346a:	7813      	ldrb	r3, [r2, #0]
 801346c:	600b      	str	r3, [r1, #0]
 801346e:	7812      	ldrb	r2, [r2, #0]
 8013470:	1c10      	adds	r0, r2, #0
 8013472:	bf18      	it	ne
 8013474:	2001      	movne	r0, #1
 8013476:	b002      	add	sp, #8
 8013478:	4770      	bx	lr
 801347a:	4610      	mov	r0, r2
 801347c:	e7fb      	b.n	8013476 <__ascii_mbtowc+0x16>
 801347e:	f06f 0001 	mvn.w	r0, #1
 8013482:	e7f8      	b.n	8013476 <__ascii_mbtowc+0x16>

08013484 <__malloc_lock>:
 8013484:	4770      	bx	lr

08013486 <__malloc_unlock>:
 8013486:	4770      	bx	lr

08013488 <_read_r>:
 8013488:	b538      	push	{r3, r4, r5, lr}
 801348a:	4c07      	ldr	r4, [pc, #28]	; (80134a8 <_read_r+0x20>)
 801348c:	4605      	mov	r5, r0
 801348e:	4608      	mov	r0, r1
 8013490:	4611      	mov	r1, r2
 8013492:	2200      	movs	r2, #0
 8013494:	6022      	str	r2, [r4, #0]
 8013496:	461a      	mov	r2, r3
 8013498:	f7f0 f954 	bl	8003744 <_read>
 801349c:	1c43      	adds	r3, r0, #1
 801349e:	d102      	bne.n	80134a6 <_read_r+0x1e>
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	b103      	cbz	r3, 80134a6 <_read_r+0x1e>
 80134a4:	602b      	str	r3, [r5, #0]
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	20003c24 	.word	0x20003c24

080134ac <__ascii_wctomb>:
 80134ac:	b149      	cbz	r1, 80134c2 <__ascii_wctomb+0x16>
 80134ae:	2aff      	cmp	r2, #255	; 0xff
 80134b0:	bf85      	ittet	hi
 80134b2:	238a      	movhi	r3, #138	; 0x8a
 80134b4:	6003      	strhi	r3, [r0, #0]
 80134b6:	700a      	strbls	r2, [r1, #0]
 80134b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80134bc:	bf98      	it	ls
 80134be:	2001      	movls	r0, #1
 80134c0:	4770      	bx	lr
 80134c2:	4608      	mov	r0, r1
 80134c4:	4770      	bx	lr
	...

080134c8 <cosf>:
 80134c8:	ee10 3a10 	vmov	r3, s0
 80134cc:	b507      	push	{r0, r1, r2, lr}
 80134ce:	4a1c      	ldr	r2, [pc, #112]	; (8013540 <cosf+0x78>)
 80134d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80134d4:	4293      	cmp	r3, r2
 80134d6:	dc04      	bgt.n	80134e2 <cosf+0x1a>
 80134d8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8013544 <cosf+0x7c>
 80134dc:	f000 ff5a 	bl	8014394 <__kernel_cosf>
 80134e0:	e004      	b.n	80134ec <cosf+0x24>
 80134e2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80134e6:	db04      	blt.n	80134f2 <cosf+0x2a>
 80134e8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80134ec:	b003      	add	sp, #12
 80134ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80134f2:	4668      	mov	r0, sp
 80134f4:	f000 fe1e 	bl	8014134 <__ieee754_rem_pio2f>
 80134f8:	f000 0003 	and.w	r0, r0, #3
 80134fc:	2801      	cmp	r0, #1
 80134fe:	d007      	beq.n	8013510 <cosf+0x48>
 8013500:	2802      	cmp	r0, #2
 8013502:	d00e      	beq.n	8013522 <cosf+0x5a>
 8013504:	b9a0      	cbnz	r0, 8013530 <cosf+0x68>
 8013506:	eddd 0a01 	vldr	s1, [sp, #4]
 801350a:	ed9d 0a00 	vldr	s0, [sp]
 801350e:	e7e5      	b.n	80134dc <cosf+0x14>
 8013510:	eddd 0a01 	vldr	s1, [sp, #4]
 8013514:	ed9d 0a00 	vldr	s0, [sp]
 8013518:	f001 fa1c 	bl	8014954 <__kernel_sinf>
 801351c:	eeb1 0a40 	vneg.f32	s0, s0
 8013520:	e7e4      	b.n	80134ec <cosf+0x24>
 8013522:	eddd 0a01 	vldr	s1, [sp, #4]
 8013526:	ed9d 0a00 	vldr	s0, [sp]
 801352a:	f000 ff33 	bl	8014394 <__kernel_cosf>
 801352e:	e7f5      	b.n	801351c <cosf+0x54>
 8013530:	2001      	movs	r0, #1
 8013532:	eddd 0a01 	vldr	s1, [sp, #4]
 8013536:	ed9d 0a00 	vldr	s0, [sp]
 801353a:	f001 fa0b 	bl	8014954 <__kernel_sinf>
 801353e:	e7d5      	b.n	80134ec <cosf+0x24>
 8013540:	3f490fd8 	.word	0x3f490fd8
 8013544:	00000000 	.word	0x00000000

08013548 <sinf>:
 8013548:	ee10 3a10 	vmov	r3, s0
 801354c:	b507      	push	{r0, r1, r2, lr}
 801354e:	4a1d      	ldr	r2, [pc, #116]	; (80135c4 <sinf+0x7c>)
 8013550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013554:	4293      	cmp	r3, r2
 8013556:	dc05      	bgt.n	8013564 <sinf+0x1c>
 8013558:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80135c8 <sinf+0x80>
 801355c:	2000      	movs	r0, #0
 801355e:	f001 f9f9 	bl	8014954 <__kernel_sinf>
 8013562:	e004      	b.n	801356e <sinf+0x26>
 8013564:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013568:	db04      	blt.n	8013574 <sinf+0x2c>
 801356a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801356e:	b003      	add	sp, #12
 8013570:	f85d fb04 	ldr.w	pc, [sp], #4
 8013574:	4668      	mov	r0, sp
 8013576:	f000 fddd 	bl	8014134 <__ieee754_rem_pio2f>
 801357a:	f000 0003 	and.w	r0, r0, #3
 801357e:	2801      	cmp	r0, #1
 8013580:	d008      	beq.n	8013594 <sinf+0x4c>
 8013582:	2802      	cmp	r0, #2
 8013584:	d00d      	beq.n	80135a2 <sinf+0x5a>
 8013586:	b9b0      	cbnz	r0, 80135b6 <sinf+0x6e>
 8013588:	2001      	movs	r0, #1
 801358a:	eddd 0a01 	vldr	s1, [sp, #4]
 801358e:	ed9d 0a00 	vldr	s0, [sp]
 8013592:	e7e4      	b.n	801355e <sinf+0x16>
 8013594:	eddd 0a01 	vldr	s1, [sp, #4]
 8013598:	ed9d 0a00 	vldr	s0, [sp]
 801359c:	f000 fefa 	bl	8014394 <__kernel_cosf>
 80135a0:	e7e5      	b.n	801356e <sinf+0x26>
 80135a2:	2001      	movs	r0, #1
 80135a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80135a8:	ed9d 0a00 	vldr	s0, [sp]
 80135ac:	f001 f9d2 	bl	8014954 <__kernel_sinf>
 80135b0:	eeb1 0a40 	vneg.f32	s0, s0
 80135b4:	e7db      	b.n	801356e <sinf+0x26>
 80135b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80135ba:	ed9d 0a00 	vldr	s0, [sp]
 80135be:	f000 fee9 	bl	8014394 <__kernel_cosf>
 80135c2:	e7f5      	b.n	80135b0 <sinf+0x68>
 80135c4:	3f490fd8 	.word	0x3f490fd8
 80135c8:	00000000 	.word	0x00000000

080135cc <asinf>:
 80135cc:	b510      	push	{r4, lr}
 80135ce:	ed2d 8b02 	vpush	{d8}
 80135d2:	4c27      	ldr	r4, [pc, #156]	; (8013670 <asinf+0xa4>)
 80135d4:	b08a      	sub	sp, #40	; 0x28
 80135d6:	eeb0 8a40 	vmov.f32	s16, s0
 80135da:	f000 fa03 	bl	80139e4 <__ieee754_asinf>
 80135de:	f994 3000 	ldrsb.w	r3, [r4]
 80135e2:	3301      	adds	r3, #1
 80135e4:	eef0 8a40 	vmov.f32	s17, s0
 80135e8:	d03c      	beq.n	8013664 <asinf+0x98>
 80135ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80135ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f2:	d637      	bvs.n	8013664 <asinf+0x98>
 80135f4:	eeb0 0a48 	vmov.f32	s0, s16
 80135f8:	f001 f9fe 	bl	80149f8 <fabsf>
 80135fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013600:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013608:	dd2c      	ble.n	8013664 <asinf+0x98>
 801360a:	2301      	movs	r3, #1
 801360c:	9300      	str	r3, [sp, #0]
 801360e:	4b19      	ldr	r3, [pc, #100]	; (8013674 <asinf+0xa8>)
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	ee18 0a10 	vmov	r0, s16
 8013616:	2300      	movs	r3, #0
 8013618:	9308      	str	r3, [sp, #32]
 801361a:	f7ec ff95 	bl	8000548 <__aeabi_f2d>
 801361e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013622:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013626:	4814      	ldr	r0, [pc, #80]	; (8013678 <asinf+0xac>)
 8013628:	f001 f9de 	bl	80149e8 <nan>
 801362c:	f994 3000 	ldrsb.w	r3, [r4]
 8013630:	2b02      	cmp	r3, #2
 8013632:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013636:	d104      	bne.n	8013642 <asinf+0x76>
 8013638:	f7fd fac2 	bl	8010bc0 <__errno>
 801363c:	2321      	movs	r3, #33	; 0x21
 801363e:	6003      	str	r3, [r0, #0]
 8013640:	e004      	b.n	801364c <asinf+0x80>
 8013642:	4668      	mov	r0, sp
 8013644:	f001 f9ce 	bl	80149e4 <matherr>
 8013648:	2800      	cmp	r0, #0
 801364a:	d0f5      	beq.n	8013638 <asinf+0x6c>
 801364c:	9b08      	ldr	r3, [sp, #32]
 801364e:	b11b      	cbz	r3, 8013658 <asinf+0x8c>
 8013650:	f7fd fab6 	bl	8010bc0 <__errno>
 8013654:	9b08      	ldr	r3, [sp, #32]
 8013656:	6003      	str	r3, [r0, #0]
 8013658:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801365c:	f7ed faa4 	bl	8000ba8 <__aeabi_d2f>
 8013660:	ee08 0a90 	vmov	s17, r0
 8013664:	eeb0 0a68 	vmov.f32	s0, s17
 8013668:	b00a      	add	sp, #40	; 0x28
 801366a:	ecbd 8b02 	vpop	{d8}
 801366e:	bd10      	pop	{r4, pc}
 8013670:	20001f7c 	.word	0x20001f7c
 8013674:	08014f58 	.word	0x08014f58
 8013678:	08014e41 	.word	0x08014e41

0801367c <powf>:
 801367c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8013680:	ed2d 8b04 	vpush	{d8-d9}
 8013684:	4ca7      	ldr	r4, [pc, #668]	; (8013924 <powf+0x2a8>)
 8013686:	b08a      	sub	sp, #40	; 0x28
 8013688:	eef0 8a40 	vmov.f32	s17, s0
 801368c:	eeb0 8a60 	vmov.f32	s16, s1
 8013690:	f000 fa90 	bl	8013bb4 <__ieee754_powf>
 8013694:	f994 5000 	ldrsb.w	r5, [r4]
 8013698:	1c6b      	adds	r3, r5, #1
 801369a:	eeb0 9a40 	vmov.f32	s18, s0
 801369e:	4626      	mov	r6, r4
 80136a0:	d05f      	beq.n	8013762 <powf+0xe6>
 80136a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80136a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136aa:	d65a      	bvs.n	8013762 <powf+0xe6>
 80136ac:	eef4 8a68 	vcmp.f32	s17, s17
 80136b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b4:	d721      	bvc.n	80136fa <powf+0x7e>
 80136b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80136ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136be:	d150      	bne.n	8013762 <powf+0xe6>
 80136c0:	2301      	movs	r3, #1
 80136c2:	9300      	str	r3, [sp, #0]
 80136c4:	4b98      	ldr	r3, [pc, #608]	; (8013928 <powf+0x2ac>)
 80136c6:	9301      	str	r3, [sp, #4]
 80136c8:	ee18 0a90 	vmov	r0, s17
 80136cc:	2300      	movs	r3, #0
 80136ce:	9308      	str	r3, [sp, #32]
 80136d0:	f7ec ff3a 	bl	8000548 <__aeabi_f2d>
 80136d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136d8:	ee18 0a10 	vmov	r0, s16
 80136dc:	f7ec ff34 	bl	8000548 <__aeabi_f2d>
 80136e0:	4b92      	ldr	r3, [pc, #584]	; (801392c <powf+0x2b0>)
 80136e2:	2200      	movs	r2, #0
 80136e4:	2d02      	cmp	r5, #2
 80136e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80136ee:	d032      	beq.n	8013756 <powf+0xda>
 80136f0:	4668      	mov	r0, sp
 80136f2:	f001 f977 	bl	80149e4 <matherr>
 80136f6:	bb40      	cbnz	r0, 801374a <powf+0xce>
 80136f8:	e065      	b.n	80137c6 <powf+0x14a>
 80136fa:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8013930 <powf+0x2b4>
 80136fe:	eef4 8a69 	vcmp.f32	s17, s19
 8013702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013706:	d163      	bne.n	80137d0 <powf+0x154>
 8013708:	eeb4 8a69 	vcmp.f32	s16, s19
 801370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013710:	d12e      	bne.n	8013770 <powf+0xf4>
 8013712:	2301      	movs	r3, #1
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	4b84      	ldr	r3, [pc, #528]	; (8013928 <powf+0x2ac>)
 8013718:	9301      	str	r3, [sp, #4]
 801371a:	ee18 0a90 	vmov	r0, s17
 801371e:	2300      	movs	r3, #0
 8013720:	9308      	str	r3, [sp, #32]
 8013722:	f7ec ff11 	bl	8000548 <__aeabi_f2d>
 8013726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801372a:	ee18 0a10 	vmov	r0, s16
 801372e:	f7ec ff0b 	bl	8000548 <__aeabi_f2d>
 8013732:	2200      	movs	r2, #0
 8013734:	2300      	movs	r3, #0
 8013736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801373a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801373e:	2d00      	cmp	r5, #0
 8013740:	d0d6      	beq.n	80136f0 <powf+0x74>
 8013742:	4b7a      	ldr	r3, [pc, #488]	; (801392c <powf+0x2b0>)
 8013744:	2200      	movs	r2, #0
 8013746:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801374a:	9b08      	ldr	r3, [sp, #32]
 801374c:	b11b      	cbz	r3, 8013756 <powf+0xda>
 801374e:	f7fd fa37 	bl	8010bc0 <__errno>
 8013752:	9b08      	ldr	r3, [sp, #32]
 8013754:	6003      	str	r3, [r0, #0]
 8013756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801375a:	f7ed fa25 	bl	8000ba8 <__aeabi_d2f>
 801375e:	ee09 0a10 	vmov	s18, r0
 8013762:	eeb0 0a49 	vmov.f32	s0, s18
 8013766:	b00a      	add	sp, #40	; 0x28
 8013768:	ecbd 8b04 	vpop	{d8-d9}
 801376c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013770:	eeb0 0a48 	vmov.f32	s0, s16
 8013774:	f001 f947 	bl	8014a06 <finitef>
 8013778:	2800      	cmp	r0, #0
 801377a:	d0f2      	beq.n	8013762 <powf+0xe6>
 801377c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013784:	d5ed      	bpl.n	8013762 <powf+0xe6>
 8013786:	2301      	movs	r3, #1
 8013788:	9300      	str	r3, [sp, #0]
 801378a:	4b67      	ldr	r3, [pc, #412]	; (8013928 <powf+0x2ac>)
 801378c:	9301      	str	r3, [sp, #4]
 801378e:	ee18 0a90 	vmov	r0, s17
 8013792:	2300      	movs	r3, #0
 8013794:	9308      	str	r3, [sp, #32]
 8013796:	f7ec fed7 	bl	8000548 <__aeabi_f2d>
 801379a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801379e:	ee18 0a10 	vmov	r0, s16
 80137a2:	f7ec fed1 	bl	8000548 <__aeabi_f2d>
 80137a6:	f994 3000 	ldrsb.w	r3, [r4]
 80137aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80137ae:	b923      	cbnz	r3, 80137ba <powf+0x13e>
 80137b0:	2200      	movs	r2, #0
 80137b2:	2300      	movs	r3, #0
 80137b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80137b8:	e79a      	b.n	80136f0 <powf+0x74>
 80137ba:	495e      	ldr	r1, [pc, #376]	; (8013934 <powf+0x2b8>)
 80137bc:	2000      	movs	r0, #0
 80137be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80137c2:	2b02      	cmp	r3, #2
 80137c4:	d194      	bne.n	80136f0 <powf+0x74>
 80137c6:	f7fd f9fb 	bl	8010bc0 <__errno>
 80137ca:	2321      	movs	r3, #33	; 0x21
 80137cc:	6003      	str	r3, [r0, #0]
 80137ce:	e7bc      	b.n	801374a <powf+0xce>
 80137d0:	f001 f919 	bl	8014a06 <finitef>
 80137d4:	4605      	mov	r5, r0
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d173      	bne.n	80138c2 <powf+0x246>
 80137da:	eeb0 0a68 	vmov.f32	s0, s17
 80137de:	f001 f912 	bl	8014a06 <finitef>
 80137e2:	2800      	cmp	r0, #0
 80137e4:	d06d      	beq.n	80138c2 <powf+0x246>
 80137e6:	eeb0 0a48 	vmov.f32	s0, s16
 80137ea:	f001 f90c 	bl	8014a06 <finitef>
 80137ee:	2800      	cmp	r0, #0
 80137f0:	d067      	beq.n	80138c2 <powf+0x246>
 80137f2:	ee18 0a90 	vmov	r0, s17
 80137f6:	f7ec fea7 	bl	8000548 <__aeabi_f2d>
 80137fa:	4680      	mov	r8, r0
 80137fc:	ee18 0a10 	vmov	r0, s16
 8013800:	4689      	mov	r9, r1
 8013802:	f7ec fea1 	bl	8000548 <__aeabi_f2d>
 8013806:	eeb4 9a49 	vcmp.f32	s18, s18
 801380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801380e:	f994 4000 	ldrsb.w	r4, [r4]
 8013812:	4b45      	ldr	r3, [pc, #276]	; (8013928 <powf+0x2ac>)
 8013814:	d713      	bvc.n	801383e <powf+0x1c2>
 8013816:	2201      	movs	r2, #1
 8013818:	e9cd 2300 	strd	r2, r3, [sp]
 801381c:	9508      	str	r5, [sp, #32]
 801381e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013826:	2c00      	cmp	r4, #0
 8013828:	d0c2      	beq.n	80137b0 <powf+0x134>
 801382a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801382e:	ee17 0a90 	vmov	r0, s15
 8013832:	f7ec fe89 	bl	8000548 <__aeabi_f2d>
 8013836:	2c02      	cmp	r4, #2
 8013838:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801383c:	e7c2      	b.n	80137c4 <powf+0x148>
 801383e:	2203      	movs	r2, #3
 8013840:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013844:	e9cd 2300 	strd	r2, r3, [sp]
 8013848:	9508      	str	r5, [sp, #32]
 801384a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801384e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013852:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013856:	b9fc      	cbnz	r4, 8013898 <powf+0x21c>
 8013858:	4b37      	ldr	r3, [pc, #220]	; (8013938 <powf+0x2bc>)
 801385a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801385e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013866:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801386a:	d553      	bpl.n	8013914 <powf+0x298>
 801386c:	eeb0 0a48 	vmov.f32	s0, s16
 8013870:	f001 f91c 	bl	8014aac <rintf>
 8013874:	eeb4 0a48 	vcmp.f32	s0, s16
 8013878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801387c:	d004      	beq.n	8013888 <powf+0x20c>
 801387e:	4b2f      	ldr	r3, [pc, #188]	; (801393c <powf+0x2c0>)
 8013880:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013884:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013888:	f996 3000 	ldrsb.w	r3, [r6]
 801388c:	2b02      	cmp	r3, #2
 801388e:	d141      	bne.n	8013914 <powf+0x298>
 8013890:	f7fd f996 	bl	8010bc0 <__errno>
 8013894:	2322      	movs	r3, #34	; 0x22
 8013896:	e799      	b.n	80137cc <powf+0x150>
 8013898:	4b29      	ldr	r3, [pc, #164]	; (8013940 <powf+0x2c4>)
 801389a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801389e:	2200      	movs	r2, #0
 80138a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80138a8:	d5ee      	bpl.n	8013888 <powf+0x20c>
 80138aa:	eeb0 0a48 	vmov.f32	s0, s16
 80138ae:	f001 f8fd 	bl	8014aac <rintf>
 80138b2:	eeb4 0a48 	vcmp.f32	s0, s16
 80138b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ba:	d0e5      	beq.n	8013888 <powf+0x20c>
 80138bc:	2200      	movs	r2, #0
 80138be:	4b1d      	ldr	r3, [pc, #116]	; (8013934 <powf+0x2b8>)
 80138c0:	e7e0      	b.n	8013884 <powf+0x208>
 80138c2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80138c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ca:	f47f af4a 	bne.w	8013762 <powf+0xe6>
 80138ce:	eeb0 0a68 	vmov.f32	s0, s17
 80138d2:	f001 f898 	bl	8014a06 <finitef>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	f43f af43 	beq.w	8013762 <powf+0xe6>
 80138dc:	eeb0 0a48 	vmov.f32	s0, s16
 80138e0:	f001 f891 	bl	8014a06 <finitef>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	f43f af3c 	beq.w	8013762 <powf+0xe6>
 80138ea:	2304      	movs	r3, #4
 80138ec:	9300      	str	r3, [sp, #0]
 80138ee:	4b0e      	ldr	r3, [pc, #56]	; (8013928 <powf+0x2ac>)
 80138f0:	9301      	str	r3, [sp, #4]
 80138f2:	ee18 0a90 	vmov	r0, s17
 80138f6:	2300      	movs	r3, #0
 80138f8:	9308      	str	r3, [sp, #32]
 80138fa:	f7ec fe25 	bl	8000548 <__aeabi_f2d>
 80138fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013902:	ee18 0a10 	vmov	r0, s16
 8013906:	f7ec fe1f 	bl	8000548 <__aeabi_f2d>
 801390a:	2200      	movs	r2, #0
 801390c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013910:	2300      	movs	r3, #0
 8013912:	e7b7      	b.n	8013884 <powf+0x208>
 8013914:	4668      	mov	r0, sp
 8013916:	f001 f865 	bl	80149e4 <matherr>
 801391a:	2800      	cmp	r0, #0
 801391c:	f47f af15 	bne.w	801374a <powf+0xce>
 8013920:	e7b6      	b.n	8013890 <powf+0x214>
 8013922:	bf00      	nop
 8013924:	20001f7c 	.word	0x20001f7c
 8013928:	08014f5e 	.word	0x08014f5e
 801392c:	3ff00000 	.word	0x3ff00000
 8013930:	00000000 	.word	0x00000000
 8013934:	fff00000 	.word	0xfff00000
 8013938:	47efffff 	.word	0x47efffff
 801393c:	c7efffff 	.word	0xc7efffff
 8013940:	7ff00000 	.word	0x7ff00000

08013944 <sqrtf>:
 8013944:	b510      	push	{r4, lr}
 8013946:	ed2d 8b02 	vpush	{d8}
 801394a:	b08a      	sub	sp, #40	; 0x28
 801394c:	eeb0 8a40 	vmov.f32	s16, s0
 8013950:	f000 fd1c 	bl	801438c <__ieee754_sqrtf>
 8013954:	4b21      	ldr	r3, [pc, #132]	; (80139dc <sqrtf+0x98>)
 8013956:	f993 4000 	ldrsb.w	r4, [r3]
 801395a:	1c63      	adds	r3, r4, #1
 801395c:	d02c      	beq.n	80139b8 <sqrtf+0x74>
 801395e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013966:	d627      	bvs.n	80139b8 <sqrtf+0x74>
 8013968:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013970:	d522      	bpl.n	80139b8 <sqrtf+0x74>
 8013972:	2301      	movs	r3, #1
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	4b1a      	ldr	r3, [pc, #104]	; (80139e0 <sqrtf+0x9c>)
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	ee18 0a10 	vmov	r0, s16
 801397e:	2300      	movs	r3, #0
 8013980:	9308      	str	r3, [sp, #32]
 8013982:	f7ec fde1 	bl	8000548 <__aeabi_f2d>
 8013986:	2200      	movs	r2, #0
 8013988:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801398c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013990:	2300      	movs	r3, #0
 8013992:	b9ac      	cbnz	r4, 80139c0 <sqrtf+0x7c>
 8013994:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013998:	4668      	mov	r0, sp
 801399a:	f001 f823 	bl	80149e4 <matherr>
 801399e:	b1b8      	cbz	r0, 80139d0 <sqrtf+0x8c>
 80139a0:	9b08      	ldr	r3, [sp, #32]
 80139a2:	b11b      	cbz	r3, 80139ac <sqrtf+0x68>
 80139a4:	f7fd f90c 	bl	8010bc0 <__errno>
 80139a8:	9b08      	ldr	r3, [sp, #32]
 80139aa:	6003      	str	r3, [r0, #0]
 80139ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139b0:	f7ed f8fa 	bl	8000ba8 <__aeabi_d2f>
 80139b4:	ee00 0a10 	vmov	s0, r0
 80139b8:	b00a      	add	sp, #40	; 0x28
 80139ba:	ecbd 8b02 	vpop	{d8}
 80139be:	bd10      	pop	{r4, pc}
 80139c0:	4610      	mov	r0, r2
 80139c2:	4619      	mov	r1, r3
 80139c4:	f7ec ff42 	bl	800084c <__aeabi_ddiv>
 80139c8:	2c02      	cmp	r4, #2
 80139ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80139ce:	d1e3      	bne.n	8013998 <sqrtf+0x54>
 80139d0:	f7fd f8f6 	bl	8010bc0 <__errno>
 80139d4:	2321      	movs	r3, #33	; 0x21
 80139d6:	6003      	str	r3, [r0, #0]
 80139d8:	e7e2      	b.n	80139a0 <sqrtf+0x5c>
 80139da:	bf00      	nop
 80139dc:	20001f7c 	.word	0x20001f7c
 80139e0:	08014f63 	.word	0x08014f63

080139e4 <__ieee754_asinf>:
 80139e4:	b538      	push	{r3, r4, r5, lr}
 80139e6:	ee10 5a10 	vmov	r5, s0
 80139ea:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80139ee:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80139f2:	ed2d 8b04 	vpush	{d8-d9}
 80139f6:	d10c      	bne.n	8013a12 <__ieee754_asinf+0x2e>
 80139f8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8013b74 <__ieee754_asinf+0x190>
 80139fc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8013b78 <__ieee754_asinf+0x194>
 8013a00:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013a04:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013a08:	eeb0 0a67 	vmov.f32	s0, s15
 8013a0c:	ecbd 8b04 	vpop	{d8-d9}
 8013a10:	bd38      	pop	{r3, r4, r5, pc}
 8013a12:	dd04      	ble.n	8013a1e <__ieee754_asinf+0x3a>
 8013a14:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013a18:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013a1c:	e7f6      	b.n	8013a0c <__ieee754_asinf+0x28>
 8013a1e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013a22:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013a26:	da0b      	bge.n	8013a40 <__ieee754_asinf+0x5c>
 8013a28:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013a2c:	da52      	bge.n	8013ad4 <__ieee754_asinf+0xf0>
 8013a2e:	eddf 7a53 	vldr	s15, [pc, #332]	; 8013b7c <__ieee754_asinf+0x198>
 8013a32:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013a36:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3e:	dce5      	bgt.n	8013a0c <__ieee754_asinf+0x28>
 8013a40:	f000 ffda 	bl	80149f8 <fabsf>
 8013a44:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013a48:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013a4c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013a50:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8013b80 <__ieee754_asinf+0x19c>
 8013a54:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013b84 <__ieee754_asinf+0x1a0>
 8013a58:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8013b88 <__ieee754_asinf+0x1a4>
 8013a5c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013a60:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013b8c <__ieee754_asinf+0x1a8>
 8013a64:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013a68:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013b90 <__ieee754_asinf+0x1ac>
 8013a6c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013a70:	eddf 7a48 	vldr	s15, [pc, #288]	; 8013b94 <__ieee754_asinf+0x1b0>
 8013a74:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013a78:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013b98 <__ieee754_asinf+0x1b4>
 8013a7c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013a80:	eddf 7a46 	vldr	s15, [pc, #280]	; 8013b9c <__ieee754_asinf+0x1b8>
 8013a84:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013a88:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8013ba0 <__ieee754_asinf+0x1bc>
 8013a8c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013a90:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013ba4 <__ieee754_asinf+0x1c0>
 8013a94:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013a98:	eeb0 0a48 	vmov.f32	s0, s16
 8013a9c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013aa0:	f000 fc74 	bl	801438c <__ieee754_sqrtf>
 8013aa4:	4b40      	ldr	r3, [pc, #256]	; (8013ba8 <__ieee754_asinf+0x1c4>)
 8013aa6:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013aaa:	429c      	cmp	r4, r3
 8013aac:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013ab0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013ab4:	dd3d      	ble.n	8013b32 <__ieee754_asinf+0x14e>
 8013ab6:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013aba:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8013bac <__ieee754_asinf+0x1c8>
 8013abe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013ac2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8013b78 <__ieee754_asinf+0x194>
 8013ac6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013aca:	2d00      	cmp	r5, #0
 8013acc:	bfd8      	it	le
 8013ace:	eeb1 0a40 	vnegle.f32	s0, s0
 8013ad2:	e79b      	b.n	8013a0c <__ieee754_asinf+0x28>
 8013ad4:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013ad8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013b80 <__ieee754_asinf+0x19c>
 8013adc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013b84 <__ieee754_asinf+0x1a0>
 8013ae0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8013b98 <__ieee754_asinf+0x1b4>
 8013ae4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013ae8:	eddf 6a28 	vldr	s13, [pc, #160]	; 8013b8c <__ieee754_asinf+0x1a8>
 8013aec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013af0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013b90 <__ieee754_asinf+0x1ac>
 8013af4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013af8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013b94 <__ieee754_asinf+0x1b0>
 8013afc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013b00:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8013b88 <__ieee754_asinf+0x1a4>
 8013b04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b08:	eddf 6a24 	vldr	s13, [pc, #144]	; 8013b9c <__ieee754_asinf+0x1b8>
 8013b0c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013b10:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8013ba0 <__ieee754_asinf+0x1bc>
 8013b14:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013b18:	eddf 6a22 	vldr	s13, [pc, #136]	; 8013ba4 <__ieee754_asinf+0x1c0>
 8013b1c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b24:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013b28:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013b2c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013b30:	e76c      	b.n	8013a0c <__ieee754_asinf+0x28>
 8013b32:	ee10 3a10 	vmov	r3, s0
 8013b36:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013b3a:	f023 030f 	bic.w	r3, r3, #15
 8013b3e:	ee07 3a90 	vmov	s15, r3
 8013b42:	eef1 6a67 	vneg.f32	s13, s15
 8013b46:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8013b4a:	ee70 5a00 	vadd.f32	s11, s0, s0
 8013b4e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013b52:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013b74 <__ieee754_asinf+0x190>
 8013b56:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8013b5a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8013bb0 <__ieee754_asinf+0x1cc>
 8013b5e:	eee5 7a47 	vfms.f32	s15, s10, s14
 8013b62:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8013b66:	eeb0 6a40 	vmov.f32	s12, s0
 8013b6a:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013b6e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013b72:	e7a8      	b.n	8013ac6 <__ieee754_asinf+0xe2>
 8013b74:	b33bbd2e 	.word	0xb33bbd2e
 8013b78:	3fc90fdb 	.word	0x3fc90fdb
 8013b7c:	7149f2ca 	.word	0x7149f2ca
 8013b80:	3811ef08 	.word	0x3811ef08
 8013b84:	3a4f7f04 	.word	0x3a4f7f04
 8013b88:	3e2aaaab 	.word	0x3e2aaaab
 8013b8c:	bd241146 	.word	0xbd241146
 8013b90:	3e4e0aa8 	.word	0x3e4e0aa8
 8013b94:	bea6b090 	.word	0xbea6b090
 8013b98:	3d9dc62e 	.word	0x3d9dc62e
 8013b9c:	bf303361 	.word	0xbf303361
 8013ba0:	4001572d 	.word	0x4001572d
 8013ba4:	c019d139 	.word	0xc019d139
 8013ba8:	3f799999 	.word	0x3f799999
 8013bac:	333bbd2e 	.word	0x333bbd2e
 8013bb0:	3f490fdb 	.word	0x3f490fdb

08013bb4 <__ieee754_powf>:
 8013bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bb8:	ee10 5a90 	vmov	r5, s1
 8013bbc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8013bc0:	ed2d 8b02 	vpush	{d8}
 8013bc4:	eeb0 8a40 	vmov.f32	s16, s0
 8013bc8:	eef0 8a60 	vmov.f32	s17, s1
 8013bcc:	f000 8293 	beq.w	80140f6 <__ieee754_powf+0x542>
 8013bd0:	ee10 8a10 	vmov	r8, s0
 8013bd4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8013bd8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013bdc:	dc06      	bgt.n	8013bec <__ieee754_powf+0x38>
 8013bde:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013be2:	dd0a      	ble.n	8013bfa <__ieee754_powf+0x46>
 8013be4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013be8:	f000 8285 	beq.w	80140f6 <__ieee754_powf+0x542>
 8013bec:	ecbd 8b02 	vpop	{d8}
 8013bf0:	48d9      	ldr	r0, [pc, #868]	; (8013f58 <__ieee754_powf+0x3a4>)
 8013bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf6:	f000 bf53 	b.w	8014aa0 <nanf>
 8013bfa:	f1b8 0f00 	cmp.w	r8, #0
 8013bfe:	da1d      	bge.n	8013c3c <__ieee754_powf+0x88>
 8013c00:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8013c04:	da2c      	bge.n	8013c60 <__ieee754_powf+0xac>
 8013c06:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013c0a:	db30      	blt.n	8013c6e <__ieee754_powf+0xba>
 8013c0c:	15fb      	asrs	r3, r7, #23
 8013c0e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013c12:	fa47 f603 	asr.w	r6, r7, r3
 8013c16:	fa06 f303 	lsl.w	r3, r6, r3
 8013c1a:	42bb      	cmp	r3, r7
 8013c1c:	d127      	bne.n	8013c6e <__ieee754_powf+0xba>
 8013c1e:	f006 0601 	and.w	r6, r6, #1
 8013c22:	f1c6 0602 	rsb	r6, r6, #2
 8013c26:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013c2a:	d122      	bne.n	8013c72 <__ieee754_powf+0xbe>
 8013c2c:	2d00      	cmp	r5, #0
 8013c2e:	f280 8268 	bge.w	8014102 <__ieee754_powf+0x54e>
 8013c32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c36:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013c3a:	e00d      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013c3c:	2600      	movs	r6, #0
 8013c3e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013c42:	d1f0      	bne.n	8013c26 <__ieee754_powf+0x72>
 8013c44:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013c48:	f000 8255 	beq.w	80140f6 <__ieee754_powf+0x542>
 8013c4c:	dd0a      	ble.n	8013c64 <__ieee754_powf+0xb0>
 8013c4e:	2d00      	cmp	r5, #0
 8013c50:	f280 8254 	bge.w	80140fc <__ieee754_powf+0x548>
 8013c54:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013f5c <__ieee754_powf+0x3a8>
 8013c58:	ecbd 8b02 	vpop	{d8}
 8013c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c60:	2602      	movs	r6, #2
 8013c62:	e7ec      	b.n	8013c3e <__ieee754_powf+0x8a>
 8013c64:	2d00      	cmp	r5, #0
 8013c66:	daf5      	bge.n	8013c54 <__ieee754_powf+0xa0>
 8013c68:	eeb1 0a68 	vneg.f32	s0, s17
 8013c6c:	e7f4      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013c6e:	2600      	movs	r6, #0
 8013c70:	e7d9      	b.n	8013c26 <__ieee754_powf+0x72>
 8013c72:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8013c76:	d102      	bne.n	8013c7e <__ieee754_powf+0xca>
 8013c78:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013c7c:	e7ec      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013c7e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8013c82:	eeb0 0a48 	vmov.f32	s0, s16
 8013c86:	d108      	bne.n	8013c9a <__ieee754_powf+0xe6>
 8013c88:	f1b8 0f00 	cmp.w	r8, #0
 8013c8c:	db05      	blt.n	8013c9a <__ieee754_powf+0xe6>
 8013c8e:	ecbd 8b02 	vpop	{d8}
 8013c92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c96:	f000 bb79 	b.w	801438c <__ieee754_sqrtf>
 8013c9a:	f000 fead 	bl	80149f8 <fabsf>
 8013c9e:	b124      	cbz	r4, 8013caa <__ieee754_powf+0xf6>
 8013ca0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8013ca4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013ca8:	d117      	bne.n	8013cda <__ieee754_powf+0x126>
 8013caa:	2d00      	cmp	r5, #0
 8013cac:	bfbc      	itt	lt
 8013cae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013cb2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013cb6:	f1b8 0f00 	cmp.w	r8, #0
 8013cba:	dacd      	bge.n	8013c58 <__ieee754_powf+0xa4>
 8013cbc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8013cc0:	ea54 0306 	orrs.w	r3, r4, r6
 8013cc4:	d104      	bne.n	8013cd0 <__ieee754_powf+0x11c>
 8013cc6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013cca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013cce:	e7c3      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013cd0:	2e01      	cmp	r6, #1
 8013cd2:	d1c1      	bne.n	8013c58 <__ieee754_powf+0xa4>
 8013cd4:	eeb1 0a40 	vneg.f32	s0, s0
 8013cd8:	e7be      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013cda:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8013cde:	3801      	subs	r0, #1
 8013ce0:	ea56 0300 	orrs.w	r3, r6, r0
 8013ce4:	d104      	bne.n	8013cf0 <__ieee754_powf+0x13c>
 8013ce6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013cea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013cee:	e7b3      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013cf0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8013cf4:	dd6d      	ble.n	8013dd2 <__ieee754_powf+0x21e>
 8013cf6:	4b9a      	ldr	r3, [pc, #616]	; (8013f60 <__ieee754_powf+0x3ac>)
 8013cf8:	429c      	cmp	r4, r3
 8013cfa:	dc06      	bgt.n	8013d0a <__ieee754_powf+0x156>
 8013cfc:	2d00      	cmp	r5, #0
 8013cfe:	daa9      	bge.n	8013c54 <__ieee754_powf+0xa0>
 8013d00:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8013f64 <__ieee754_powf+0x3b0>
 8013d04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013d08:	e7a6      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013d0a:	4b97      	ldr	r3, [pc, #604]	; (8013f68 <__ieee754_powf+0x3b4>)
 8013d0c:	429c      	cmp	r4, r3
 8013d0e:	dd02      	ble.n	8013d16 <__ieee754_powf+0x162>
 8013d10:	2d00      	cmp	r5, #0
 8013d12:	dcf5      	bgt.n	8013d00 <__ieee754_powf+0x14c>
 8013d14:	e79e      	b.n	8013c54 <__ieee754_powf+0xa0>
 8013d16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013d1e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8013f6c <__ieee754_powf+0x3b8>
 8013d22:	eef1 6a40 	vneg.f32	s13, s0
 8013d26:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8013d2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013d2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d32:	eee7 7a40 	vfms.f32	s15, s14, s0
 8013d36:	ee60 0a00 	vmul.f32	s1, s0, s0
 8013d3a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8013f70 <__ieee754_powf+0x3bc>
 8013d3e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013d42:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8013f74 <__ieee754_powf+0x3c0>
 8013d46:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8013d4a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013d4e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013f78 <__ieee754_powf+0x3c4>
 8013d52:	eeb0 6a67 	vmov.f32	s12, s15
 8013d56:	eea0 6a07 	vfma.f32	s12, s0, s14
 8013d5a:	ee16 3a10 	vmov	r3, s12
 8013d5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013d62:	f023 030f 	bic.w	r3, r3, #15
 8013d66:	ee00 3a90 	vmov	s1, r3
 8013d6a:	eee6 0a87 	vfma.f32	s1, s13, s14
 8013d6e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013d72:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8013d76:	f025 050f 	bic.w	r5, r5, #15
 8013d7a:	ee07 5a10 	vmov	s14, r5
 8013d7e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013d82:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013d86:	ee07 3a90 	vmov	s15, r3
 8013d8a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013d8e:	3e01      	subs	r6, #1
 8013d90:	ea56 0200 	orrs.w	r2, r6, r0
 8013d94:	ee07 5a10 	vmov	s14, r5
 8013d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d9c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013da0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013da4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013da8:	ee17 4a10 	vmov	r4, s14
 8013dac:	bf08      	it	eq
 8013dae:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013db2:	2c00      	cmp	r4, #0
 8013db4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013db8:	f340 8184 	ble.w	80140c4 <__ieee754_powf+0x510>
 8013dbc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013dc0:	f340 80fc 	ble.w	8013fbc <__ieee754_powf+0x408>
 8013dc4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8013f64 <__ieee754_powf+0x3b0>
 8013dc8:	ee28 0a27 	vmul.f32	s0, s16, s15
 8013dcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013dd0:	e742      	b.n	8013c58 <__ieee754_powf+0xa4>
 8013dd2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8013dd6:	bfbf      	itttt	lt
 8013dd8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8013f7c <__ieee754_powf+0x3c8>
 8013ddc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013de0:	f06f 0217 	mvnlt.w	r2, #23
 8013de4:	ee17 4a90 	vmovlt	r4, s15
 8013de8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8013dec:	bfa8      	it	ge
 8013dee:	2200      	movge	r2, #0
 8013df0:	3b7f      	subs	r3, #127	; 0x7f
 8013df2:	4413      	add	r3, r2
 8013df4:	4a62      	ldr	r2, [pc, #392]	; (8013f80 <__ieee754_powf+0x3cc>)
 8013df6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8013dfa:	4294      	cmp	r4, r2
 8013dfc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8013e00:	dd06      	ble.n	8013e10 <__ieee754_powf+0x25c>
 8013e02:	4a60      	ldr	r2, [pc, #384]	; (8013f84 <__ieee754_powf+0x3d0>)
 8013e04:	4294      	cmp	r4, r2
 8013e06:	f340 80a5 	ble.w	8013f54 <__ieee754_powf+0x3a0>
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013e10:	2400      	movs	r4, #0
 8013e12:	4a5d      	ldr	r2, [pc, #372]	; (8013f88 <__ieee754_powf+0x3d4>)
 8013e14:	00a7      	lsls	r7, r4, #2
 8013e16:	443a      	add	r2, r7
 8013e18:	ee07 1a90 	vmov	s15, r1
 8013e1c:	ed92 7a00 	vldr	s14, [r2]
 8013e20:	4a5a      	ldr	r2, [pc, #360]	; (8013f8c <__ieee754_powf+0x3d8>)
 8013e22:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013e26:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013e2a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8013e2e:	1049      	asrs	r1, r1, #1
 8013e30:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013e34:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013e38:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8013e3c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8013e40:	ee06 1a10 	vmov	s12, r1
 8013e44:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8013e48:	ee14 ca90 	vmov	ip, s9
 8013e4c:	ea02 0c0c 	and.w	ip, r2, ip
 8013e50:	ee05 ca10 	vmov	s10, ip
 8013e54:	eeb1 4a45 	vneg.f32	s8, s10
 8013e58:	eee4 5a06 	vfma.f32	s11, s8, s12
 8013e5c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013e60:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013f90 <__ieee754_powf+0x3dc>
 8013e64:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8013e68:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8013e6c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8013e70:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8013e74:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8013e78:	eddf 5a46 	vldr	s11, [pc, #280]	; 8013f94 <__ieee754_powf+0x3e0>
 8013e7c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013e80:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013f98 <__ieee754_powf+0x3e4>
 8013e84:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013e88:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8013f6c <__ieee754_powf+0x3b8>
 8013e8c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013e90:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013f9c <__ieee754_powf+0x3e8>
 8013e94:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013e98:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013fa0 <__ieee754_powf+0x3ec>
 8013e9c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8013ea0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013ea4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013ea8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8013eac:	eef0 7a65 	vmov.f32	s15, s11
 8013eb0:	eee3 6a87 	vfma.f32	s13, s7, s14
 8013eb4:	eee5 7a05 	vfma.f32	s15, s10, s10
 8013eb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ebc:	ee17 1a90 	vmov	r1, s15
 8013ec0:	4011      	ands	r1, r2
 8013ec2:	ee07 1a90 	vmov	s15, r1
 8013ec6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8013eca:	eddf 5a36 	vldr	s11, [pc, #216]	; 8013fa4 <__ieee754_powf+0x3f0>
 8013ece:	eea4 7a05 	vfma.f32	s14, s8, s10
 8013ed2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013ed6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013eda:	eea7 7a86 	vfma.f32	s14, s15, s12
 8013ede:	eeb0 6a47 	vmov.f32	s12, s14
 8013ee2:	eea5 6a27 	vfma.f32	s12, s10, s15
 8013ee6:	ee16 1a10 	vmov	r1, s12
 8013eea:	4011      	ands	r1, r2
 8013eec:	ee06 1a90 	vmov	s13, r1
 8013ef0:	eee4 6a27 	vfma.f32	s13, s8, s15
 8013ef4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013fa8 <__ieee754_powf+0x3f4>
 8013ef8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013efc:	ee06 1a10 	vmov	s12, r1
 8013f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013f04:	eddf 7a29 	vldr	s15, [pc, #164]	; 8013fac <__ieee754_powf+0x3f8>
 8013f08:	4929      	ldr	r1, [pc, #164]	; (8013fb0 <__ieee754_powf+0x3fc>)
 8013f0a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013f0e:	4439      	add	r1, r7
 8013f10:	edd1 7a00 	vldr	s15, [r1]
 8013f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f18:	ee07 3a90 	vmov	s15, r3
 8013f1c:	eef0 0a47 	vmov.f32	s1, s14
 8013f20:	4b24      	ldr	r3, [pc, #144]	; (8013fb4 <__ieee754_powf+0x400>)
 8013f22:	eee6 0a25 	vfma.f32	s1, s12, s11
 8013f26:	443b      	add	r3, r7
 8013f28:	ed93 5a00 	vldr	s10, [r3]
 8013f2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013f30:	ee70 0a85 	vadd.f32	s1, s1, s10
 8013f34:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8013f38:	ee17 3a90 	vmov	r3, s15
 8013f3c:	4013      	ands	r3, r2
 8013f3e:	ee07 3a90 	vmov	s15, r3
 8013f42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013f46:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013f4a:	eee6 7a65 	vfms.f32	s15, s12, s11
 8013f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f52:	e70e      	b.n	8013d72 <__ieee754_powf+0x1be>
 8013f54:	2401      	movs	r4, #1
 8013f56:	e75c      	b.n	8013e12 <__ieee754_powf+0x25e>
 8013f58:	08014e41 	.word	0x08014e41
 8013f5c:	00000000 	.word	0x00000000
 8013f60:	3f7ffff7 	.word	0x3f7ffff7
 8013f64:	7149f2ca 	.word	0x7149f2ca
 8013f68:	3f800007 	.word	0x3f800007
 8013f6c:	3eaaaaab 	.word	0x3eaaaaab
 8013f70:	36eca570 	.word	0x36eca570
 8013f74:	3fb8aa3b 	.word	0x3fb8aa3b
 8013f78:	3fb8aa00 	.word	0x3fb8aa00
 8013f7c:	4b800000 	.word	0x4b800000
 8013f80:	001cc471 	.word	0x001cc471
 8013f84:	005db3d6 	.word	0x005db3d6
 8013f88:	08014f6c 	.word	0x08014f6c
 8013f8c:	fffff000 	.word	0xfffff000
 8013f90:	3e6c3255 	.word	0x3e6c3255
 8013f94:	3e53f142 	.word	0x3e53f142
 8013f98:	3e8ba305 	.word	0x3e8ba305
 8013f9c:	3edb6db7 	.word	0x3edb6db7
 8013fa0:	3f19999a 	.word	0x3f19999a
 8013fa4:	3f763800 	.word	0x3f763800
 8013fa8:	3f76384f 	.word	0x3f76384f
 8013fac:	369dc3a0 	.word	0x369dc3a0
 8013fb0:	08014f7c 	.word	0x08014f7c
 8013fb4:	08014f74 	.word	0x08014f74
 8013fb8:	3338aa3c 	.word	0x3338aa3c
 8013fbc:	f040 8092 	bne.w	80140e4 <__ieee754_powf+0x530>
 8013fc0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013fb8 <__ieee754_powf+0x404>
 8013fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013fc8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013fcc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd4:	f73f aef6 	bgt.w	8013dc4 <__ieee754_powf+0x210>
 8013fd8:	15db      	asrs	r3, r3, #23
 8013fda:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8013fde:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013fe2:	4103      	asrs	r3, r0
 8013fe4:	4423      	add	r3, r4
 8013fe6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013fea:	4947      	ldr	r1, [pc, #284]	; (8014108 <__ieee754_powf+0x554>)
 8013fec:	3a7f      	subs	r2, #127	; 0x7f
 8013fee:	4111      	asrs	r1, r2
 8013ff0:	ea23 0101 	bic.w	r1, r3, r1
 8013ff4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8013ff8:	ee07 1a10 	vmov	s14, r1
 8013ffc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014000:	f1c2 0217 	rsb	r2, r2, #23
 8014004:	4110      	asrs	r0, r2
 8014006:	2c00      	cmp	r4, #0
 8014008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801400c:	bfb8      	it	lt
 801400e:	4240      	neglt	r0, r0
 8014010:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014014:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801410c <__ieee754_powf+0x558>
 8014018:	ee17 3a10 	vmov	r3, s14
 801401c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014020:	f023 030f 	bic.w	r3, r3, #15
 8014024:	ee07 3a10 	vmov	s14, r3
 8014028:	ee77 7a67 	vsub.f32	s15, s14, s15
 801402c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014030:	eddf 7a37 	vldr	s15, [pc, #220]	; 8014110 <__ieee754_powf+0x55c>
 8014034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014038:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801403c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8014114 <__ieee754_powf+0x560>
 8014040:	eeb0 0a67 	vmov.f32	s0, s15
 8014044:	eea7 0a26 	vfma.f32	s0, s14, s13
 8014048:	eeb0 6a40 	vmov.f32	s12, s0
 801404c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014050:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014054:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014058:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014118 <__ieee754_powf+0x564>
 801405c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801411c <__ieee754_powf+0x568>
 8014060:	eea7 6a26 	vfma.f32	s12, s14, s13
 8014064:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014120 <__ieee754_powf+0x56c>
 8014068:	eee6 6a07 	vfma.f32	s13, s12, s14
 801406c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8014124 <__ieee754_powf+0x570>
 8014070:	eea6 6a87 	vfma.f32	s12, s13, s14
 8014074:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8014128 <__ieee754_powf+0x574>
 8014078:	eee6 6a07 	vfma.f32	s13, s12, s14
 801407c:	eeb0 6a40 	vmov.f32	s12, s0
 8014080:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8014084:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014088:	eeb0 7a46 	vmov.f32	s14, s12
 801408c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014090:	ee20 6a06 	vmul.f32	s12, s0, s12
 8014094:	eee0 7a27 	vfma.f32	s15, s0, s15
 8014098:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801409c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80140a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80140a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80140ac:	ee10 3a10 	vmov	r3, s0
 80140b0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80140b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80140b8:	da1a      	bge.n	80140f0 <__ieee754_powf+0x53c>
 80140ba:	f000 fd51 	bl	8014b60 <scalbnf>
 80140be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80140c2:	e5c9      	b.n	8013c58 <__ieee754_powf+0xa4>
 80140c4:	4a19      	ldr	r2, [pc, #100]	; (801412c <__ieee754_powf+0x578>)
 80140c6:	4293      	cmp	r3, r2
 80140c8:	dd02      	ble.n	80140d0 <__ieee754_powf+0x51c>
 80140ca:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014130 <__ieee754_powf+0x57c>
 80140ce:	e67b      	b.n	8013dc8 <__ieee754_powf+0x214>
 80140d0:	d108      	bne.n	80140e4 <__ieee754_powf+0x530>
 80140d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80140d6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80140da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140de:	f6ff af7b 	blt.w	8013fd8 <__ieee754_powf+0x424>
 80140e2:	e7f2      	b.n	80140ca <__ieee754_powf+0x516>
 80140e4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80140e8:	f73f af76 	bgt.w	8013fd8 <__ieee754_powf+0x424>
 80140ec:	2000      	movs	r0, #0
 80140ee:	e78f      	b.n	8014010 <__ieee754_powf+0x45c>
 80140f0:	ee00 3a10 	vmov	s0, r3
 80140f4:	e7e3      	b.n	80140be <__ieee754_powf+0x50a>
 80140f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80140fa:	e5ad      	b.n	8013c58 <__ieee754_powf+0xa4>
 80140fc:	eeb0 0a68 	vmov.f32	s0, s17
 8014100:	e5aa      	b.n	8013c58 <__ieee754_powf+0xa4>
 8014102:	eeb0 0a48 	vmov.f32	s0, s16
 8014106:	e5a7      	b.n	8013c58 <__ieee754_powf+0xa4>
 8014108:	007fffff 	.word	0x007fffff
 801410c:	3f317218 	.word	0x3f317218
 8014110:	35bfbe8c 	.word	0x35bfbe8c
 8014114:	3f317200 	.word	0x3f317200
 8014118:	3331bb4c 	.word	0x3331bb4c
 801411c:	b5ddea0e 	.word	0xb5ddea0e
 8014120:	388ab355 	.word	0x388ab355
 8014124:	bb360b61 	.word	0xbb360b61
 8014128:	3e2aaaab 	.word	0x3e2aaaab
 801412c:	43160000 	.word	0x43160000
 8014130:	0da24260 	.word	0x0da24260

08014134 <__ieee754_rem_pio2f>:
 8014134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014136:	ee10 6a10 	vmov	r6, s0
 801413a:	4b86      	ldr	r3, [pc, #536]	; (8014354 <__ieee754_rem_pio2f+0x220>)
 801413c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8014140:	429c      	cmp	r4, r3
 8014142:	b087      	sub	sp, #28
 8014144:	4605      	mov	r5, r0
 8014146:	dc05      	bgt.n	8014154 <__ieee754_rem_pio2f+0x20>
 8014148:	2300      	movs	r3, #0
 801414a:	ed85 0a00 	vstr	s0, [r5]
 801414e:	6043      	str	r3, [r0, #4]
 8014150:	2000      	movs	r0, #0
 8014152:	e020      	b.n	8014196 <__ieee754_rem_pio2f+0x62>
 8014154:	4b80      	ldr	r3, [pc, #512]	; (8014358 <__ieee754_rem_pio2f+0x224>)
 8014156:	429c      	cmp	r4, r3
 8014158:	dc38      	bgt.n	80141cc <__ieee754_rem_pio2f+0x98>
 801415a:	2e00      	cmp	r6, #0
 801415c:	f024 040f 	bic.w	r4, r4, #15
 8014160:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 801435c <__ieee754_rem_pio2f+0x228>
 8014164:	4b7e      	ldr	r3, [pc, #504]	; (8014360 <__ieee754_rem_pio2f+0x22c>)
 8014166:	dd18      	ble.n	801419a <__ieee754_rem_pio2f+0x66>
 8014168:	429c      	cmp	r4, r3
 801416a:	ee70 7a47 	vsub.f32	s15, s0, s14
 801416e:	bf09      	itett	eq
 8014170:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8014364 <__ieee754_rem_pio2f+0x230>
 8014174:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8014368 <__ieee754_rem_pio2f+0x234>
 8014178:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801417c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 801436c <__ieee754_rem_pio2f+0x238>
 8014180:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8014184:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014188:	edc0 6a00 	vstr	s13, [r0]
 801418c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014190:	edc0 7a01 	vstr	s15, [r0, #4]
 8014194:	2001      	movs	r0, #1
 8014196:	b007      	add	sp, #28
 8014198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801419a:	429c      	cmp	r4, r3
 801419c:	ee70 7a07 	vadd.f32	s15, s0, s14
 80141a0:	bf09      	itett	eq
 80141a2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8014364 <__ieee754_rem_pio2f+0x230>
 80141a6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8014368 <__ieee754_rem_pio2f+0x234>
 80141aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80141ae:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 801436c <__ieee754_rem_pio2f+0x238>
 80141b2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80141b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80141ba:	edc0 6a00 	vstr	s13, [r0]
 80141be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141c2:	edc0 7a01 	vstr	s15, [r0, #4]
 80141c6:	f04f 30ff 	mov.w	r0, #4294967295
 80141ca:	e7e4      	b.n	8014196 <__ieee754_rem_pio2f+0x62>
 80141cc:	4b68      	ldr	r3, [pc, #416]	; (8014370 <__ieee754_rem_pio2f+0x23c>)
 80141ce:	429c      	cmp	r4, r3
 80141d0:	dc71      	bgt.n	80142b6 <__ieee754_rem_pio2f+0x182>
 80141d2:	f000 fc11 	bl	80149f8 <fabsf>
 80141d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8014374 <__ieee754_rem_pio2f+0x240>
 80141da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80141de:	eee0 7a07 	vfma.f32	s15, s0, s14
 80141e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80141ea:	ee17 0a90 	vmov	r0, s15
 80141ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801435c <__ieee754_rem_pio2f+0x228>
 80141f2:	eeb1 7a46 	vneg.f32	s14, s12
 80141f6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80141fa:	281f      	cmp	r0, #31
 80141fc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8014368 <__ieee754_rem_pio2f+0x234>
 8014200:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014204:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014208:	ee16 3a90 	vmov	r3, s13
 801420c:	dc1c      	bgt.n	8014248 <__ieee754_rem_pio2f+0x114>
 801420e:	1e47      	subs	r7, r0, #1
 8014210:	4959      	ldr	r1, [pc, #356]	; (8014378 <__ieee754_rem_pio2f+0x244>)
 8014212:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8014216:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801421a:	428a      	cmp	r2, r1
 801421c:	d014      	beq.n	8014248 <__ieee754_rem_pio2f+0x114>
 801421e:	602b      	str	r3, [r5, #0]
 8014220:	ed95 7a00 	vldr	s14, [r5]
 8014224:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014228:	2e00      	cmp	r6, #0
 801422a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801422e:	ed85 0a01 	vstr	s0, [r5, #4]
 8014232:	dab0      	bge.n	8014196 <__ieee754_rem_pio2f+0x62>
 8014234:	eeb1 7a47 	vneg.f32	s14, s14
 8014238:	eeb1 0a40 	vneg.f32	s0, s0
 801423c:	ed85 7a00 	vstr	s14, [r5]
 8014240:	ed85 0a01 	vstr	s0, [r5, #4]
 8014244:	4240      	negs	r0, r0
 8014246:	e7a6      	b.n	8014196 <__ieee754_rem_pio2f+0x62>
 8014248:	15e4      	asrs	r4, r4, #23
 801424a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801424e:	1aa2      	subs	r2, r4, r2
 8014250:	2a08      	cmp	r2, #8
 8014252:	dde4      	ble.n	801421e <__ieee754_rem_pio2f+0xea>
 8014254:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014364 <__ieee754_rem_pio2f+0x230>
 8014258:	eef0 6a40 	vmov.f32	s13, s0
 801425c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014260:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014264:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014268:	eddf 7a40 	vldr	s15, [pc, #256]	; 801436c <__ieee754_rem_pio2f+0x238>
 801426c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8014270:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8014274:	eef0 7a40 	vmov.f32	s15, s0
 8014278:	ee15 3a90 	vmov	r3, s11
 801427c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014280:	1aa4      	subs	r4, r4, r2
 8014282:	2c19      	cmp	r4, #25
 8014284:	dc04      	bgt.n	8014290 <__ieee754_rem_pio2f+0x15c>
 8014286:	edc5 5a00 	vstr	s11, [r5]
 801428a:	eeb0 0a66 	vmov.f32	s0, s13
 801428e:	e7c7      	b.n	8014220 <__ieee754_rem_pio2f+0xec>
 8014290:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801437c <__ieee754_rem_pio2f+0x248>
 8014294:	eeb0 0a66 	vmov.f32	s0, s13
 8014298:	eea7 0a25 	vfma.f32	s0, s14, s11
 801429c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80142a0:	eee7 7a25 	vfma.f32	s15, s14, s11
 80142a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014380 <__ieee754_rem_pio2f+0x24c>
 80142a8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 80142ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 80142b0:	ed85 7a00 	vstr	s14, [r5]
 80142b4:	e7b4      	b.n	8014220 <__ieee754_rem_pio2f+0xec>
 80142b6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80142ba:	db06      	blt.n	80142ca <__ieee754_rem_pio2f+0x196>
 80142bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80142c0:	edc0 7a01 	vstr	s15, [r0, #4]
 80142c4:	edc0 7a00 	vstr	s15, [r0]
 80142c8:	e742      	b.n	8014150 <__ieee754_rem_pio2f+0x1c>
 80142ca:	15e2      	asrs	r2, r4, #23
 80142cc:	3a86      	subs	r2, #134	; 0x86
 80142ce:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80142d2:	ee07 3a90 	vmov	s15, r3
 80142d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80142da:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014384 <__ieee754_rem_pio2f+0x250>
 80142de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80142ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80142ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80142f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80142fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014302:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801430a:	edcd 7a05 	vstr	s15, [sp, #20]
 801430e:	d11e      	bne.n	801434e <__ieee754_rem_pio2f+0x21a>
 8014310:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8014314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014318:	bf0c      	ite	eq
 801431a:	2301      	moveq	r3, #1
 801431c:	2302      	movne	r3, #2
 801431e:	491a      	ldr	r1, [pc, #104]	; (8014388 <__ieee754_rem_pio2f+0x254>)
 8014320:	9101      	str	r1, [sp, #4]
 8014322:	2102      	movs	r1, #2
 8014324:	9100      	str	r1, [sp, #0]
 8014326:	a803      	add	r0, sp, #12
 8014328:	4629      	mov	r1, r5
 801432a:	f000 f891 	bl	8014450 <__kernel_rem_pio2f>
 801432e:	2e00      	cmp	r6, #0
 8014330:	f6bf af31 	bge.w	8014196 <__ieee754_rem_pio2f+0x62>
 8014334:	edd5 7a00 	vldr	s15, [r5]
 8014338:	eef1 7a67 	vneg.f32	s15, s15
 801433c:	edc5 7a00 	vstr	s15, [r5]
 8014340:	edd5 7a01 	vldr	s15, [r5, #4]
 8014344:	eef1 7a67 	vneg.f32	s15, s15
 8014348:	edc5 7a01 	vstr	s15, [r5, #4]
 801434c:	e77a      	b.n	8014244 <__ieee754_rem_pio2f+0x110>
 801434e:	2303      	movs	r3, #3
 8014350:	e7e5      	b.n	801431e <__ieee754_rem_pio2f+0x1ea>
 8014352:	bf00      	nop
 8014354:	3f490fd8 	.word	0x3f490fd8
 8014358:	4016cbe3 	.word	0x4016cbe3
 801435c:	3fc90f80 	.word	0x3fc90f80
 8014360:	3fc90fd0 	.word	0x3fc90fd0
 8014364:	37354400 	.word	0x37354400
 8014368:	37354443 	.word	0x37354443
 801436c:	2e85a308 	.word	0x2e85a308
 8014370:	43490f80 	.word	0x43490f80
 8014374:	3f22f984 	.word	0x3f22f984
 8014378:	08014f84 	.word	0x08014f84
 801437c:	2e85a300 	.word	0x2e85a300
 8014380:	248d3132 	.word	0x248d3132
 8014384:	43800000 	.word	0x43800000
 8014388:	08015004 	.word	0x08015004

0801438c <__ieee754_sqrtf>:
 801438c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014390:	4770      	bx	lr
	...

08014394 <__kernel_cosf>:
 8014394:	ee10 3a10 	vmov	r3, s0
 8014398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801439c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80143a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80143a4:	da05      	bge.n	80143b2 <__kernel_cosf+0x1e>
 80143a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80143aa:	ee17 2a90 	vmov	r2, s15
 80143ae:	2a00      	cmp	r2, #0
 80143b0:	d03b      	beq.n	801442a <__kernel_cosf+0x96>
 80143b2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80143b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80143ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8014430 <__kernel_cosf+0x9c>
 80143be:	4a1d      	ldr	r2, [pc, #116]	; (8014434 <__kernel_cosf+0xa0>)
 80143c0:	ee66 7a07 	vmul.f32	s15, s12, s14
 80143c4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8014438 <__kernel_cosf+0xa4>
 80143c8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80143cc:	4293      	cmp	r3, r2
 80143ce:	eddf 5a1b 	vldr	s11, [pc, #108]	; 801443c <__kernel_cosf+0xa8>
 80143d2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80143d6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014440 <__kernel_cosf+0xac>
 80143da:	eea5 7a86 	vfma.f32	s14, s11, s12
 80143de:	eddf 5a19 	vldr	s11, [pc, #100]	; 8014444 <__kernel_cosf+0xb0>
 80143e2:	eee7 5a06 	vfma.f32	s11, s14, s12
 80143e6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8014448 <__kernel_cosf+0xb4>
 80143ea:	eea5 7a86 	vfma.f32	s14, s11, s12
 80143ee:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80143f2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80143f6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80143fa:	dc04      	bgt.n	8014406 <__kernel_cosf+0x72>
 80143fc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8014400:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8014404:	4770      	bx	lr
 8014406:	4a11      	ldr	r2, [pc, #68]	; (801444c <__kernel_cosf+0xb8>)
 8014408:	4293      	cmp	r3, r2
 801440a:	bfda      	itte	le
 801440c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8014410:	ee07 3a10 	vmovle	s14, r3
 8014414:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8014418:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801441c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8014420:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014424:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014428:	4770      	bx	lr
 801442a:	eeb0 0a66 	vmov.f32	s0, s13
 801442e:	4770      	bx	lr
 8014430:	ad47d74e 	.word	0xad47d74e
 8014434:	3e999999 	.word	0x3e999999
 8014438:	310f74f6 	.word	0x310f74f6
 801443c:	b493f27c 	.word	0xb493f27c
 8014440:	37d00d01 	.word	0x37d00d01
 8014444:	bab60b61 	.word	0xbab60b61
 8014448:	3d2aaaab 	.word	0x3d2aaaab
 801444c:	3f480000 	.word	0x3f480000

08014450 <__kernel_rem_pio2f>:
 8014450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014454:	ed2d 8b04 	vpush	{d8-d9}
 8014458:	b0d7      	sub	sp, #348	; 0x15c
 801445a:	469b      	mov	fp, r3
 801445c:	460e      	mov	r6, r1
 801445e:	4bbe      	ldr	r3, [pc, #760]	; (8014758 <__kernel_rem_pio2f+0x308>)
 8014460:	9964      	ldr	r1, [sp, #400]	; 0x190
 8014462:	9002      	str	r0, [sp, #8]
 8014464:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8014468:	9865      	ldr	r0, [sp, #404]	; 0x194
 801446a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8014768 <__kernel_rem_pio2f+0x318>
 801446e:	1ed1      	subs	r1, r2, #3
 8014470:	2308      	movs	r3, #8
 8014472:	fb91 f1f3 	sdiv	r1, r1, r3
 8014476:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801447a:	f10b 3aff 	add.w	sl, fp, #4294967295
 801447e:	1c4c      	adds	r4, r1, #1
 8014480:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8014484:	eba1 050a 	sub.w	r5, r1, sl
 8014488:	aa1a      	add	r2, sp, #104	; 0x68
 801448a:	eb09 070a 	add.w	r7, r9, sl
 801448e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8014492:	4696      	mov	lr, r2
 8014494:	2300      	movs	r3, #0
 8014496:	42bb      	cmp	r3, r7
 8014498:	dd0f      	ble.n	80144ba <__kernel_rem_pio2f+0x6a>
 801449a:	af42      	add	r7, sp, #264	; 0x108
 801449c:	2200      	movs	r2, #0
 801449e:	454a      	cmp	r2, r9
 80144a0:	dc27      	bgt.n	80144f2 <__kernel_rem_pio2f+0xa2>
 80144a2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80144a6:	eb0b 0302 	add.w	r3, fp, r2
 80144aa:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80144ae:	9d02      	ldr	r5, [sp, #8]
 80144b0:	eddf 7aad 	vldr	s15, [pc, #692]	; 8014768 <__kernel_rem_pio2f+0x318>
 80144b4:	f04f 0c00 	mov.w	ip, #0
 80144b8:	e015      	b.n	80144e6 <__kernel_rem_pio2f+0x96>
 80144ba:	42dd      	cmn	r5, r3
 80144bc:	bf5d      	ittte	pl
 80144be:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 80144c2:	ee07 2a90 	vmovpl	s15, r2
 80144c6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80144ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80144ce:	ecee 7a01 	vstmia	lr!, {s15}
 80144d2:	3301      	adds	r3, #1
 80144d4:	e7df      	b.n	8014496 <__kernel_rem_pio2f+0x46>
 80144d6:	ecf5 6a01 	vldmia	r5!, {s13}
 80144da:	ed33 7a01 	vldmdb	r3!, {s14}
 80144de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80144e2:	f10c 0c01 	add.w	ip, ip, #1
 80144e6:	45d4      	cmp	ip, sl
 80144e8:	ddf5      	ble.n	80144d6 <__kernel_rem_pio2f+0x86>
 80144ea:	ece7 7a01 	vstmia	r7!, {s15}
 80144ee:	3201      	adds	r2, #1
 80144f0:	e7d5      	b.n	801449e <__kernel_rem_pio2f+0x4e>
 80144f2:	ab06      	add	r3, sp, #24
 80144f4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80144f8:	9304      	str	r3, [sp, #16]
 80144fa:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8014764 <__kernel_rem_pio2f+0x314>
 80144fe:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8014760 <__kernel_rem_pio2f+0x310>
 8014502:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8014506:	9303      	str	r3, [sp, #12]
 8014508:	464d      	mov	r5, r9
 801450a:	ab56      	add	r3, sp, #344	; 0x158
 801450c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8014510:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8014514:	3f01      	subs	r7, #1
 8014516:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801451a:	00bf      	lsls	r7, r7, #2
 801451c:	ab56      	add	r3, sp, #344	; 0x158
 801451e:	19da      	adds	r2, r3, r7
 8014520:	3a4c      	subs	r2, #76	; 0x4c
 8014522:	2300      	movs	r3, #0
 8014524:	1ae9      	subs	r1, r5, r3
 8014526:	2900      	cmp	r1, #0
 8014528:	dc4c      	bgt.n	80145c4 <__kernel_rem_pio2f+0x174>
 801452a:	4620      	mov	r0, r4
 801452c:	f000 fb18 	bl	8014b60 <scalbnf>
 8014530:	eeb0 8a40 	vmov.f32	s16, s0
 8014534:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014538:	ee28 0a00 	vmul.f32	s0, s16, s0
 801453c:	f000 fa6e 	bl	8014a1c <floorf>
 8014540:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014544:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014548:	2c00      	cmp	r4, #0
 801454a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801454e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014556:	ee38 8a67 	vsub.f32	s16, s16, s15
 801455a:	dd48      	ble.n	80145ee <__kernel_rem_pio2f+0x19e>
 801455c:	1e69      	subs	r1, r5, #1
 801455e:	ab06      	add	r3, sp, #24
 8014560:	f1c4 0008 	rsb	r0, r4, #8
 8014564:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8014568:	9a01      	ldr	r2, [sp, #4]
 801456a:	fa4c f300 	asr.w	r3, ip, r0
 801456e:	441a      	add	r2, r3
 8014570:	4083      	lsls	r3, r0
 8014572:	9201      	str	r2, [sp, #4]
 8014574:	ebac 0203 	sub.w	r2, ip, r3
 8014578:	ab06      	add	r3, sp, #24
 801457a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801457e:	f1c4 0307 	rsb	r3, r4, #7
 8014582:	fa42 f803 	asr.w	r8, r2, r3
 8014586:	f1b8 0f00 	cmp.w	r8, #0
 801458a:	dd41      	ble.n	8014610 <__kernel_rem_pio2f+0x1c0>
 801458c:	9b01      	ldr	r3, [sp, #4]
 801458e:	2000      	movs	r0, #0
 8014590:	3301      	adds	r3, #1
 8014592:	9301      	str	r3, [sp, #4]
 8014594:	4601      	mov	r1, r0
 8014596:	4285      	cmp	r5, r0
 8014598:	dc6d      	bgt.n	8014676 <__kernel_rem_pio2f+0x226>
 801459a:	2c00      	cmp	r4, #0
 801459c:	dd04      	ble.n	80145a8 <__kernel_rem_pio2f+0x158>
 801459e:	2c01      	cmp	r4, #1
 80145a0:	d07e      	beq.n	80146a0 <__kernel_rem_pio2f+0x250>
 80145a2:	2c02      	cmp	r4, #2
 80145a4:	f000 8086 	beq.w	80146b4 <__kernel_rem_pio2f+0x264>
 80145a8:	f1b8 0f02 	cmp.w	r8, #2
 80145ac:	d130      	bne.n	8014610 <__kernel_rem_pio2f+0x1c0>
 80145ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80145b2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80145b6:	b359      	cbz	r1, 8014610 <__kernel_rem_pio2f+0x1c0>
 80145b8:	4620      	mov	r0, r4
 80145ba:	f000 fad1 	bl	8014b60 <scalbnf>
 80145be:	ee38 8a40 	vsub.f32	s16, s16, s0
 80145c2:	e025      	b.n	8014610 <__kernel_rem_pio2f+0x1c0>
 80145c4:	ee60 7a28 	vmul.f32	s15, s0, s17
 80145c8:	a806      	add	r0, sp, #24
 80145ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145d2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80145d6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80145da:	ee10 1a10 	vmov	r1, s0
 80145de:	ed32 0a01 	vldmdb	r2!, {s0}
 80145e2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80145e6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80145ea:	3301      	adds	r3, #1
 80145ec:	e79a      	b.n	8014524 <__kernel_rem_pio2f+0xd4>
 80145ee:	d106      	bne.n	80145fe <__kernel_rem_pio2f+0x1ae>
 80145f0:	1e6b      	subs	r3, r5, #1
 80145f2:	aa06      	add	r2, sp, #24
 80145f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80145f8:	ea4f 2822 	mov.w	r8, r2, asr #8
 80145fc:	e7c3      	b.n	8014586 <__kernel_rem_pio2f+0x136>
 80145fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014602:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801460a:	da31      	bge.n	8014670 <__kernel_rem_pio2f+0x220>
 801460c:	f04f 0800 	mov.w	r8, #0
 8014610:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014618:	f040 80a8 	bne.w	801476c <__kernel_rem_pio2f+0x31c>
 801461c:	1e6b      	subs	r3, r5, #1
 801461e:	4618      	mov	r0, r3
 8014620:	2200      	movs	r2, #0
 8014622:	4548      	cmp	r0, r9
 8014624:	da4d      	bge.n	80146c2 <__kernel_rem_pio2f+0x272>
 8014626:	2a00      	cmp	r2, #0
 8014628:	f000 8087 	beq.w	801473a <__kernel_rem_pio2f+0x2ea>
 801462c:	aa06      	add	r2, sp, #24
 801462e:	3c08      	subs	r4, #8
 8014630:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014634:	2900      	cmp	r1, #0
 8014636:	f000 808d 	beq.w	8014754 <__kernel_rem_pio2f+0x304>
 801463a:	4620      	mov	r0, r4
 801463c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014640:	9302      	str	r3, [sp, #8]
 8014642:	f000 fa8d 	bl	8014b60 <scalbnf>
 8014646:	9b02      	ldr	r3, [sp, #8]
 8014648:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014764 <__kernel_rem_pio2f+0x314>
 801464c:	0099      	lsls	r1, r3, #2
 801464e:	aa42      	add	r2, sp, #264	; 0x108
 8014650:	1850      	adds	r0, r2, r1
 8014652:	1d05      	adds	r5, r0, #4
 8014654:	461c      	mov	r4, r3
 8014656:	2c00      	cmp	r4, #0
 8014658:	f280 80b8 	bge.w	80147cc <__kernel_rem_pio2f+0x37c>
 801465c:	2500      	movs	r5, #0
 801465e:	1b5c      	subs	r4, r3, r5
 8014660:	2c00      	cmp	r4, #0
 8014662:	f2c0 80d8 	blt.w	8014816 <__kernel_rem_pio2f+0x3c6>
 8014666:	4f3d      	ldr	r7, [pc, #244]	; (801475c <__kernel_rem_pio2f+0x30c>)
 8014668:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8014768 <__kernel_rem_pio2f+0x318>
 801466c:	2400      	movs	r4, #0
 801466e:	e0c6      	b.n	80147fe <__kernel_rem_pio2f+0x3ae>
 8014670:	f04f 0802 	mov.w	r8, #2
 8014674:	e78a      	b.n	801458c <__kernel_rem_pio2f+0x13c>
 8014676:	ab06      	add	r3, sp, #24
 8014678:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801467c:	b949      	cbnz	r1, 8014692 <__kernel_rem_pio2f+0x242>
 801467e:	b12b      	cbz	r3, 801468c <__kernel_rem_pio2f+0x23c>
 8014680:	aa06      	add	r2, sp, #24
 8014682:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014686:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801468a:	2301      	movs	r3, #1
 801468c:	3001      	adds	r0, #1
 801468e:	4619      	mov	r1, r3
 8014690:	e781      	b.n	8014596 <__kernel_rem_pio2f+0x146>
 8014692:	aa06      	add	r2, sp, #24
 8014694:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014698:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801469c:	460b      	mov	r3, r1
 801469e:	e7f5      	b.n	801468c <__kernel_rem_pio2f+0x23c>
 80146a0:	1e68      	subs	r0, r5, #1
 80146a2:	ab06      	add	r3, sp, #24
 80146a4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80146a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80146ac:	aa06      	add	r2, sp, #24
 80146ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80146b2:	e779      	b.n	80145a8 <__kernel_rem_pio2f+0x158>
 80146b4:	1e68      	subs	r0, r5, #1
 80146b6:	ab06      	add	r3, sp, #24
 80146b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80146bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80146c0:	e7f4      	b.n	80146ac <__kernel_rem_pio2f+0x25c>
 80146c2:	a906      	add	r1, sp, #24
 80146c4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80146c8:	3801      	subs	r0, #1
 80146ca:	430a      	orrs	r2, r1
 80146cc:	e7a9      	b.n	8014622 <__kernel_rem_pio2f+0x1d2>
 80146ce:	f10c 0c01 	add.w	ip, ip, #1
 80146d2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80146d6:	2a00      	cmp	r2, #0
 80146d8:	d0f9      	beq.n	80146ce <__kernel_rem_pio2f+0x27e>
 80146da:	eb0b 0305 	add.w	r3, fp, r5
 80146de:	aa1a      	add	r2, sp, #104	; 0x68
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	1898      	adds	r0, r3, r2
 80146e4:	3004      	adds	r0, #4
 80146e6:	1c69      	adds	r1, r5, #1
 80146e8:	3704      	adds	r7, #4
 80146ea:	2200      	movs	r2, #0
 80146ec:	4465      	add	r5, ip
 80146ee:	9005      	str	r0, [sp, #20]
 80146f0:	428d      	cmp	r5, r1
 80146f2:	f6ff af0a 	blt.w	801450a <__kernel_rem_pio2f+0xba>
 80146f6:	a81a      	add	r0, sp, #104	; 0x68
 80146f8:	eb02 0c03 	add.w	ip, r2, r3
 80146fc:	4484      	add	ip, r0
 80146fe:	9803      	ldr	r0, [sp, #12]
 8014700:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014704:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8014708:	9001      	str	r0, [sp, #4]
 801470a:	ee07 0a90 	vmov	s15, r0
 801470e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014712:	9805      	ldr	r0, [sp, #20]
 8014714:	edcc 7a00 	vstr	s15, [ip]
 8014718:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014768 <__kernel_rem_pio2f+0x318>
 801471c:	eb00 0802 	add.w	r8, r0, r2
 8014720:	f04f 0c00 	mov.w	ip, #0
 8014724:	45d4      	cmp	ip, sl
 8014726:	dd0c      	ble.n	8014742 <__kernel_rem_pio2f+0x2f2>
 8014728:	eb02 0c07 	add.w	ip, r2, r7
 801472c:	a842      	add	r0, sp, #264	; 0x108
 801472e:	4484      	add	ip, r0
 8014730:	edcc 7a01 	vstr	s15, [ip, #4]
 8014734:	3101      	adds	r1, #1
 8014736:	3204      	adds	r2, #4
 8014738:	e7da      	b.n	80146f0 <__kernel_rem_pio2f+0x2a0>
 801473a:	9b04      	ldr	r3, [sp, #16]
 801473c:	f04f 0c01 	mov.w	ip, #1
 8014740:	e7c7      	b.n	80146d2 <__kernel_rem_pio2f+0x282>
 8014742:	ecfe 6a01 	vldmia	lr!, {s13}
 8014746:	ed38 7a01 	vldmdb	r8!, {s14}
 801474a:	f10c 0c01 	add.w	ip, ip, #1
 801474e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014752:	e7e7      	b.n	8014724 <__kernel_rem_pio2f+0x2d4>
 8014754:	3b01      	subs	r3, #1
 8014756:	e769      	b.n	801462c <__kernel_rem_pio2f+0x1dc>
 8014758:	08015348 	.word	0x08015348
 801475c:	0801531c 	.word	0x0801531c
 8014760:	43800000 	.word	0x43800000
 8014764:	3b800000 	.word	0x3b800000
 8014768:	00000000 	.word	0x00000000
 801476c:	4260      	negs	r0, r4
 801476e:	eeb0 0a48 	vmov.f32	s0, s16
 8014772:	f000 f9f5 	bl	8014b60 <scalbnf>
 8014776:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8014760 <__kernel_rem_pio2f+0x310>
 801477a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801477e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014782:	db1a      	blt.n	80147ba <__kernel_rem_pio2f+0x36a>
 8014784:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014764 <__kernel_rem_pio2f+0x314>
 8014788:	ee60 7a27 	vmul.f32	s15, s0, s15
 801478c:	aa06      	add	r2, sp, #24
 801478e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014792:	a906      	add	r1, sp, #24
 8014794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014798:	3408      	adds	r4, #8
 801479a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801479e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80147a6:	ee10 3a10 	vmov	r3, s0
 80147aa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80147ae:	1c6b      	adds	r3, r5, #1
 80147b0:	ee17 2a90 	vmov	r2, s15
 80147b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80147b8:	e73f      	b.n	801463a <__kernel_rem_pio2f+0x1ea>
 80147ba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80147be:	aa06      	add	r2, sp, #24
 80147c0:	ee10 3a10 	vmov	r3, s0
 80147c4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80147c8:	462b      	mov	r3, r5
 80147ca:	e736      	b.n	801463a <__kernel_rem_pio2f+0x1ea>
 80147cc:	aa06      	add	r2, sp, #24
 80147ce:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80147d2:	9202      	str	r2, [sp, #8]
 80147d4:	ee07 2a90 	vmov	s15, r2
 80147d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147dc:	3c01      	subs	r4, #1
 80147de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80147e2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80147e6:	ed65 7a01 	vstmdb	r5!, {s15}
 80147ea:	e734      	b.n	8014656 <__kernel_rem_pio2f+0x206>
 80147ec:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80147f0:	ecf7 6a01 	vldmia	r7!, {s13}
 80147f4:	ed9c 7a00 	vldr	s14, [ip]
 80147f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80147fc:	3401      	adds	r4, #1
 80147fe:	454c      	cmp	r4, r9
 8014800:	dc01      	bgt.n	8014806 <__kernel_rem_pio2f+0x3b6>
 8014802:	42a5      	cmp	r5, r4
 8014804:	daf2      	bge.n	80147ec <__kernel_rem_pio2f+0x39c>
 8014806:	aa56      	add	r2, sp, #344	; 0x158
 8014808:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 801480c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8014810:	3501      	adds	r5, #1
 8014812:	3804      	subs	r0, #4
 8014814:	e723      	b.n	801465e <__kernel_rem_pio2f+0x20e>
 8014816:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014818:	2a03      	cmp	r2, #3
 801481a:	d84d      	bhi.n	80148b8 <__kernel_rem_pio2f+0x468>
 801481c:	e8df f002 	tbb	[pc, r2]
 8014820:	021f1f3e 	.word	0x021f1f3e
 8014824:	aa56      	add	r2, sp, #344	; 0x158
 8014826:	4411      	add	r1, r2
 8014828:	399c      	subs	r1, #156	; 0x9c
 801482a:	4608      	mov	r0, r1
 801482c:	461c      	mov	r4, r3
 801482e:	2c00      	cmp	r4, #0
 8014830:	dc5f      	bgt.n	80148f2 <__kernel_rem_pio2f+0x4a2>
 8014832:	4608      	mov	r0, r1
 8014834:	461c      	mov	r4, r3
 8014836:	2c01      	cmp	r4, #1
 8014838:	dc6b      	bgt.n	8014912 <__kernel_rem_pio2f+0x4c2>
 801483a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8014768 <__kernel_rem_pio2f+0x318>
 801483e:	2b01      	cmp	r3, #1
 8014840:	dc77      	bgt.n	8014932 <__kernel_rem_pio2f+0x4e2>
 8014842:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8014846:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801484a:	f1b8 0f00 	cmp.w	r8, #0
 801484e:	d176      	bne.n	801493e <__kernel_rem_pio2f+0x4ee>
 8014850:	edc6 6a00 	vstr	s13, [r6]
 8014854:	ed86 7a01 	vstr	s14, [r6, #4]
 8014858:	edc6 7a02 	vstr	s15, [r6, #8]
 801485c:	e02c      	b.n	80148b8 <__kernel_rem_pio2f+0x468>
 801485e:	aa56      	add	r2, sp, #344	; 0x158
 8014860:	4411      	add	r1, r2
 8014862:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8014768 <__kernel_rem_pio2f+0x318>
 8014866:	399c      	subs	r1, #156	; 0x9c
 8014868:	4618      	mov	r0, r3
 801486a:	2800      	cmp	r0, #0
 801486c:	da32      	bge.n	80148d4 <__kernel_rem_pio2f+0x484>
 801486e:	f1b8 0f00 	cmp.w	r8, #0
 8014872:	d035      	beq.n	80148e0 <__kernel_rem_pio2f+0x490>
 8014874:	eef1 7a47 	vneg.f32	s15, s14
 8014878:	edc6 7a00 	vstr	s15, [r6]
 801487c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8014880:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014884:	a82f      	add	r0, sp, #188	; 0xbc
 8014886:	2101      	movs	r1, #1
 8014888:	428b      	cmp	r3, r1
 801488a:	da2c      	bge.n	80148e6 <__kernel_rem_pio2f+0x496>
 801488c:	f1b8 0f00 	cmp.w	r8, #0
 8014890:	d001      	beq.n	8014896 <__kernel_rem_pio2f+0x446>
 8014892:	eef1 7a67 	vneg.f32	s15, s15
 8014896:	edc6 7a01 	vstr	s15, [r6, #4]
 801489a:	e00d      	b.n	80148b8 <__kernel_rem_pio2f+0x468>
 801489c:	aa56      	add	r2, sp, #344	; 0x158
 801489e:	4411      	add	r1, r2
 80148a0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8014768 <__kernel_rem_pio2f+0x318>
 80148a4:	399c      	subs	r1, #156	; 0x9c
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	da0e      	bge.n	80148c8 <__kernel_rem_pio2f+0x478>
 80148aa:	f1b8 0f00 	cmp.w	r8, #0
 80148ae:	d001      	beq.n	80148b4 <__kernel_rem_pio2f+0x464>
 80148b0:	eef1 7a67 	vneg.f32	s15, s15
 80148b4:	edc6 7a00 	vstr	s15, [r6]
 80148b8:	9b01      	ldr	r3, [sp, #4]
 80148ba:	f003 0007 	and.w	r0, r3, #7
 80148be:	b057      	add	sp, #348	; 0x15c
 80148c0:	ecbd 8b04 	vpop	{d8-d9}
 80148c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c8:	ed31 7a01 	vldmdb	r1!, {s14}
 80148cc:	3b01      	subs	r3, #1
 80148ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148d2:	e7e8      	b.n	80148a6 <__kernel_rem_pio2f+0x456>
 80148d4:	ed71 7a01 	vldmdb	r1!, {s15}
 80148d8:	3801      	subs	r0, #1
 80148da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80148de:	e7c4      	b.n	801486a <__kernel_rem_pio2f+0x41a>
 80148e0:	eef0 7a47 	vmov.f32	s15, s14
 80148e4:	e7c8      	b.n	8014878 <__kernel_rem_pio2f+0x428>
 80148e6:	ecb0 7a01 	vldmia	r0!, {s14}
 80148ea:	3101      	adds	r1, #1
 80148ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80148f0:	e7ca      	b.n	8014888 <__kernel_rem_pio2f+0x438>
 80148f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80148f6:	ed70 6a01 	vldmdb	r0!, {s13}
 80148fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80148fe:	3c01      	subs	r4, #1
 8014900:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014904:	ed00 7a01 	vstr	s14, [r0, #-4]
 8014908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801490c:	edc0 7a00 	vstr	s15, [r0]
 8014910:	e78d      	b.n	801482e <__kernel_rem_pio2f+0x3de>
 8014912:	ed50 7a02 	vldr	s15, [r0, #-8]
 8014916:	ed70 6a01 	vldmdb	r0!, {s13}
 801491a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801491e:	3c01      	subs	r4, #1
 8014920:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014924:	ed00 7a01 	vstr	s14, [r0, #-4]
 8014928:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801492c:	edc0 7a00 	vstr	s15, [r0]
 8014930:	e781      	b.n	8014836 <__kernel_rem_pio2f+0x3e6>
 8014932:	ed31 7a01 	vldmdb	r1!, {s14}
 8014936:	3b01      	subs	r3, #1
 8014938:	ee77 7a87 	vadd.f32	s15, s15, s14
 801493c:	e77f      	b.n	801483e <__kernel_rem_pio2f+0x3ee>
 801493e:	eef1 6a66 	vneg.f32	s13, s13
 8014942:	eeb1 7a47 	vneg.f32	s14, s14
 8014946:	edc6 6a00 	vstr	s13, [r6]
 801494a:	ed86 7a01 	vstr	s14, [r6, #4]
 801494e:	eef1 7a67 	vneg.f32	s15, s15
 8014952:	e781      	b.n	8014858 <__kernel_rem_pio2f+0x408>

08014954 <__kernel_sinf>:
 8014954:	ee10 3a10 	vmov	r3, s0
 8014958:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801495c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014960:	da04      	bge.n	801496c <__kernel_sinf+0x18>
 8014962:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014966:	ee17 3a90 	vmov	r3, s15
 801496a:	b35b      	cbz	r3, 80149c4 <__kernel_sinf+0x70>
 801496c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014970:	eddf 7a15 	vldr	s15, [pc, #84]	; 80149c8 <__kernel_sinf+0x74>
 8014974:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80149cc <__kernel_sinf+0x78>
 8014978:	eea7 6a27 	vfma.f32	s12, s14, s15
 801497c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80149d0 <__kernel_sinf+0x7c>
 8014980:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014984:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80149d4 <__kernel_sinf+0x80>
 8014988:	eea7 6a87 	vfma.f32	s12, s15, s14
 801498c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80149d8 <__kernel_sinf+0x84>
 8014990:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014994:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014998:	b930      	cbnz	r0, 80149a8 <__kernel_sinf+0x54>
 801499a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80149dc <__kernel_sinf+0x88>
 801499e:	eea7 6a27 	vfma.f32	s12, s14, s15
 80149a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80149a6:	4770      	bx	lr
 80149a8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80149ac:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80149b0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80149b4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80149b8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80149e0 <__kernel_sinf+0x8c>
 80149bc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80149c0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80149c4:	4770      	bx	lr
 80149c6:	bf00      	nop
 80149c8:	2f2ec9d3 	.word	0x2f2ec9d3
 80149cc:	b2d72f34 	.word	0xb2d72f34
 80149d0:	3638ef1b 	.word	0x3638ef1b
 80149d4:	b9500d01 	.word	0xb9500d01
 80149d8:	3c088889 	.word	0x3c088889
 80149dc:	be2aaaab 	.word	0xbe2aaaab
 80149e0:	3e2aaaab 	.word	0x3e2aaaab

080149e4 <matherr>:
 80149e4:	2000      	movs	r0, #0
 80149e6:	4770      	bx	lr

080149e8 <nan>:
 80149e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80149f0 <nan+0x8>
 80149ec:	4770      	bx	lr
 80149ee:	bf00      	nop
 80149f0:	00000000 	.word	0x00000000
 80149f4:	7ff80000 	.word	0x7ff80000

080149f8 <fabsf>:
 80149f8:	ee10 3a10 	vmov	r3, s0
 80149fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a00:	ee00 3a10 	vmov	s0, r3
 8014a04:	4770      	bx	lr

08014a06 <finitef>:
 8014a06:	ee10 3a10 	vmov	r3, s0
 8014a0a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014a0e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014a12:	bfac      	ite	ge
 8014a14:	2000      	movge	r0, #0
 8014a16:	2001      	movlt	r0, #1
 8014a18:	4770      	bx	lr
	...

08014a1c <floorf>:
 8014a1c:	ee10 3a10 	vmov	r3, s0
 8014a20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014a24:	0dca      	lsrs	r2, r1, #23
 8014a26:	3a7f      	subs	r2, #127	; 0x7f
 8014a28:	2a16      	cmp	r2, #22
 8014a2a:	dc2a      	bgt.n	8014a82 <floorf+0x66>
 8014a2c:	2a00      	cmp	r2, #0
 8014a2e:	da11      	bge.n	8014a54 <floorf+0x38>
 8014a30:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014a94 <floorf+0x78>
 8014a34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a40:	dd05      	ble.n	8014a4e <floorf+0x32>
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	da23      	bge.n	8014a8e <floorf+0x72>
 8014a46:	4a14      	ldr	r2, [pc, #80]	; (8014a98 <floorf+0x7c>)
 8014a48:	2900      	cmp	r1, #0
 8014a4a:	bf18      	it	ne
 8014a4c:	4613      	movne	r3, r2
 8014a4e:	ee00 3a10 	vmov	s0, r3
 8014a52:	4770      	bx	lr
 8014a54:	4911      	ldr	r1, [pc, #68]	; (8014a9c <floorf+0x80>)
 8014a56:	4111      	asrs	r1, r2
 8014a58:	420b      	tst	r3, r1
 8014a5a:	d0fa      	beq.n	8014a52 <floorf+0x36>
 8014a5c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014a94 <floorf+0x78>
 8014a60:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a64:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a6c:	ddef      	ble.n	8014a4e <floorf+0x32>
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	bfbe      	ittt	lt
 8014a72:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014a76:	fa40 f202 	asrlt.w	r2, r0, r2
 8014a7a:	189b      	addlt	r3, r3, r2
 8014a7c:	ea23 0301 	bic.w	r3, r3, r1
 8014a80:	e7e5      	b.n	8014a4e <floorf+0x32>
 8014a82:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014a86:	d3e4      	bcc.n	8014a52 <floorf+0x36>
 8014a88:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014a8c:	4770      	bx	lr
 8014a8e:	2300      	movs	r3, #0
 8014a90:	e7dd      	b.n	8014a4e <floorf+0x32>
 8014a92:	bf00      	nop
 8014a94:	7149f2ca 	.word	0x7149f2ca
 8014a98:	bf800000 	.word	0xbf800000
 8014a9c:	007fffff 	.word	0x007fffff

08014aa0 <nanf>:
 8014aa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014aa8 <nanf+0x8>
 8014aa4:	4770      	bx	lr
 8014aa6:	bf00      	nop
 8014aa8:	7fc00000 	.word	0x7fc00000

08014aac <rintf>:
 8014aac:	b513      	push	{r0, r1, r4, lr}
 8014aae:	ee10 1a10 	vmov	r1, s0
 8014ab2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ab6:	0ddc      	lsrs	r4, r3, #23
 8014ab8:	3c7f      	subs	r4, #127	; 0x7f
 8014aba:	2c16      	cmp	r4, #22
 8014abc:	dc46      	bgt.n	8014b4c <rintf+0xa0>
 8014abe:	b32b      	cbz	r3, 8014b0c <rintf+0x60>
 8014ac0:	2c00      	cmp	r4, #0
 8014ac2:	ee10 2a10 	vmov	r2, s0
 8014ac6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8014aca:	da21      	bge.n	8014b10 <rintf+0x64>
 8014acc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8014ad0:	425b      	negs	r3, r3
 8014ad2:	4a21      	ldr	r2, [pc, #132]	; (8014b58 <rintf+0xac>)
 8014ad4:	0a5b      	lsrs	r3, r3, #9
 8014ad6:	0d09      	lsrs	r1, r1, #20
 8014ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014adc:	0509      	lsls	r1, r1, #20
 8014ade:	430b      	orrs	r3, r1
 8014ae0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014ae4:	ee07 3a90 	vmov	s15, r3
 8014ae8:	edd2 6a00 	vldr	s13, [r2]
 8014aec:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8014af0:	ed8d 7a01 	vstr	s14, [sp, #4]
 8014af4:	eddd 7a01 	vldr	s15, [sp, #4]
 8014af8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014afc:	ee17 3a90 	vmov	r3, s15
 8014b00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b04:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8014b08:	ee00 3a10 	vmov	s0, r3
 8014b0c:	b002      	add	sp, #8
 8014b0e:	bd10      	pop	{r4, pc}
 8014b10:	4b12      	ldr	r3, [pc, #72]	; (8014b5c <rintf+0xb0>)
 8014b12:	4123      	asrs	r3, r4
 8014b14:	4219      	tst	r1, r3
 8014b16:	d0f9      	beq.n	8014b0c <rintf+0x60>
 8014b18:	085b      	lsrs	r3, r3, #1
 8014b1a:	4219      	tst	r1, r3
 8014b1c:	d006      	beq.n	8014b2c <rintf+0x80>
 8014b1e:	ea21 0203 	bic.w	r2, r1, r3
 8014b22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014b26:	fa43 f404 	asr.w	r4, r3, r4
 8014b2a:	4322      	orrs	r2, r4
 8014b2c:	4b0a      	ldr	r3, [pc, #40]	; (8014b58 <rintf+0xac>)
 8014b2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014b32:	ed90 7a00 	vldr	s14, [r0]
 8014b36:	ee07 2a90 	vmov	s15, r2
 8014b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b3e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014b42:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014b46:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014b4a:	e7df      	b.n	8014b0c <rintf+0x60>
 8014b4c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b50:	d3dc      	bcc.n	8014b0c <rintf+0x60>
 8014b52:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b56:	e7d9      	b.n	8014b0c <rintf+0x60>
 8014b58:	08015354 	.word	0x08015354
 8014b5c:	007fffff 	.word	0x007fffff

08014b60 <scalbnf>:
 8014b60:	b508      	push	{r3, lr}
 8014b62:	ee10 2a10 	vmov	r2, s0
 8014b66:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8014b6a:	ed2d 8b02 	vpush	{d8}
 8014b6e:	eef0 0a40 	vmov.f32	s1, s0
 8014b72:	d004      	beq.n	8014b7e <scalbnf+0x1e>
 8014b74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b78:	d306      	bcc.n	8014b88 <scalbnf+0x28>
 8014b7a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8014b7e:	ecbd 8b02 	vpop	{d8}
 8014b82:	eeb0 0a60 	vmov.f32	s0, s1
 8014b86:	bd08      	pop	{r3, pc}
 8014b88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014b8c:	d21c      	bcs.n	8014bc8 <scalbnf+0x68>
 8014b8e:	4b1f      	ldr	r3, [pc, #124]	; (8014c0c <scalbnf+0xac>)
 8014b90:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014c10 <scalbnf+0xb0>
 8014b94:	4298      	cmp	r0, r3
 8014b96:	ee60 0a27 	vmul.f32	s1, s0, s15
 8014b9a:	db10      	blt.n	8014bbe <scalbnf+0x5e>
 8014b9c:	ee10 2a90 	vmov	r2, s1
 8014ba0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014ba4:	3b19      	subs	r3, #25
 8014ba6:	4403      	add	r3, r0
 8014ba8:	2bfe      	cmp	r3, #254	; 0xfe
 8014baa:	dd0f      	ble.n	8014bcc <scalbnf+0x6c>
 8014bac:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8014c14 <scalbnf+0xb4>
 8014bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8014bb4:	f000 f834 	bl	8014c20 <copysignf>
 8014bb8:	ee60 0a08 	vmul.f32	s1, s0, s16
 8014bbc:	e7df      	b.n	8014b7e <scalbnf+0x1e>
 8014bbe:	eddf 7a16 	vldr	s15, [pc, #88]	; 8014c18 <scalbnf+0xb8>
 8014bc2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014bc6:	e7da      	b.n	8014b7e <scalbnf+0x1e>
 8014bc8:	0ddb      	lsrs	r3, r3, #23
 8014bca:	e7ec      	b.n	8014ba6 <scalbnf+0x46>
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	dd06      	ble.n	8014bde <scalbnf+0x7e>
 8014bd0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8014bd4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014bd8:	ee00 3a90 	vmov	s1, r3
 8014bdc:	e7cf      	b.n	8014b7e <scalbnf+0x1e>
 8014bde:	f113 0f16 	cmn.w	r3, #22
 8014be2:	da06      	bge.n	8014bf2 <scalbnf+0x92>
 8014be4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014be8:	4298      	cmp	r0, r3
 8014bea:	dcdf      	bgt.n	8014bac <scalbnf+0x4c>
 8014bec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8014c18 <scalbnf+0xb8>
 8014bf0:	e7de      	b.n	8014bb0 <scalbnf+0x50>
 8014bf2:	3319      	adds	r3, #25
 8014bf4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8014bf8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014bfc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014c1c <scalbnf+0xbc>
 8014c00:	ee07 3a10 	vmov	s14, r3
 8014c04:	ee67 0a27 	vmul.f32	s1, s14, s15
 8014c08:	e7b9      	b.n	8014b7e <scalbnf+0x1e>
 8014c0a:	bf00      	nop
 8014c0c:	ffff3cb0 	.word	0xffff3cb0
 8014c10:	4c000000 	.word	0x4c000000
 8014c14:	7149f2ca 	.word	0x7149f2ca
 8014c18:	0da24260 	.word	0x0da24260
 8014c1c:	33000000 	.word	0x33000000

08014c20 <copysignf>:
 8014c20:	ee10 3a10 	vmov	r3, s0
 8014c24:	ee10 2a90 	vmov	r2, s1
 8014c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8014c30:	4313      	orrs	r3, r2
 8014c32:	ee00 3a10 	vmov	s0, r3
 8014c36:	4770      	bx	lr

08014c38 <_init>:
 8014c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c3a:	bf00      	nop
 8014c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c3e:	bc08      	pop	{r3}
 8014c40:	469e      	mov	lr, r3
 8014c42:	4770      	bx	lr

08014c44 <_fini>:
 8014c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c46:	bf00      	nop
 8014c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c4a:	bc08      	pop	{r3}
 8014c4c:	469e      	mov	lr, r3
 8014c4e:	4770      	bx	lr
