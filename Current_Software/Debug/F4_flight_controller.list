
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800b170  0800b170  0001b170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b474  0800b474  00020cd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b474  0800b474  0001b474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b47c  0800b47c  00020cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b47c  0800b47c  0001b47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000cd0  20000000  0800b484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000960  20000cd0  0800c154  00020cd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  0800c154  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020cd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002476d  00000000  00000000  00020d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004857  00000000  00000000  0004546d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001708  00000000  00000000  00049cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014d8  00000000  00000000  0004b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f14  00000000  00000000  0004c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019c86  00000000  00000000  000727bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbd4a  00000000  00000000  0008c442  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015818c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c9c  00000000  00000000  00158208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000cd0 	.word	0x20000cd0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b158 	.word	0x0800b158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000cd4 	.word	0x20000cd4
 80001cc:	0800b158 	.word	0x0800b158

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <angle_180>:
static float absolu(float x);
static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 8000f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f56:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000fac <angle_180+0x64>
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd08      	ble.n	8000f76 <angle_180+0x2e>
		x -= 360;
 8000f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f68:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000fb0 <angle_180+0x68>
 8000f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f70:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f74:	e010      	b.n	8000f98 <angle_180+0x50>
	else if( x < -180)
 8000f76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000fb4 <angle_180+0x6c>
 8000f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	d507      	bpl.n	8000f98 <angle_180+0x50>
		x += 360 ;
 8000f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000fb0 <angle_180+0x68>
 8000f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f94:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	ee07 3a90 	vmov	s15, r3
}
 8000f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	43340000 	.word	0x43340000
 8000fb0:	43b40000 	.word	0x43b40000
 8000fb4:	c3340000 	.word	0xc3340000

08000fb8 <absolu>:

static float absolu(float x){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8000fc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	dd02      	ble.n	8000fd6 <absolu+0x1e>
		return x ;
 8000fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd4:	e003      	b.n	8000fde <absolu+0x26>
	else
		return -x ;
 8000fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fda:	eef1 7a67 	vneg.f32	s15, s15
}
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <acc_correction>:
static float acc_correction(float x){
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	ed87 0a01 	vstr	s0, [r7, #4]
	x = ( x > 0) ? 180 - x : -180 -x ;
 8000ff6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	dd06      	ble.n	8001012 <acc_correction+0x26>
 8001004:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001038 <acc_correction+0x4c>
 8001008:	edd7 7a01 	vldr	s15, [r7, #4]
 800100c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001010:	e005      	b.n	800101e <acc_correction+0x32>
 8001012:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800103c <acc_correction+0x50>
 8001016:	edd7 7a01 	vldr	s15, [r7, #4]
 800101a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101e:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	ee07 3a90 	vmov	s15, r3
}
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	43340000 	.word	0x43340000
 800103c:	c3340000 	.word	0xc3340000

08001040 <ORIENTATION_Init>:

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f103 0208 	add.w	r2, r3, #8
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <ORIENTATION_Init+0x84>)
 8001086:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	e011      	b.n	80010b2 <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	ddea      	ble.n	800108e <ORIENTATION_Init+0x4e>
	}

}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	3f7d70a4 	.word	0x3f7d70a4

080010c8 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	//Just to make the code lighter
	acc_t * acc = orientation->acc ;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	61fb      	str	r3, [r7, #28]
	gyro_t * gyro = orientation->gyro ;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	61bb      	str	r3, [r7, #24]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ACC_AXE_X] * acc->filtered[ACC_AXE_X] ;
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	ed93 7a02 	vldr	s14, [r3, #8]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ec:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Y] * acc->filtered[ACC_AXE_Y] ;
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total += acc->filtered[ACC_AXE_Z] * acc->filtered[ACC_AXE_Z] ;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	edd3 7a04 	vldr	s15, [r3, #16]
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001124:	edc7 7a05 	vstr	s15, [r7, #20]
	acc_total = sqrtf(acc_total);
 8001128:	ed97 0a05 	vldr	s0, [r7, #20]
 800112c:	f009 fec6 	bl	800aebc <sqrtf>
 8001130:	ed87 0a05 	vstr	s0, [r7, #20]

	if(acc_total)	//To avoid /0
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	eef5 7a40 	vcmp.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d069      	beq.n	8001216 <ORIENTATION_Update+0x14e>
	{
		if(absolu(acc->filtered[ACC_AXE_X]) < acc_total)	//To avoid asin x with x greater than 1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	edd3 7a02 	vldr	s15, [r3, #8]
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	f7ff ff34 	bl	8000fb8 <absolu>
 8001150:	eeb0 7a40 	vmov.f32	s14, s0
 8001154:	edd7 7a05 	vldr	s15, [r7, #20]
 8001158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	dd15      	ble.n	800118e <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ACC_AXE_Y] = -asinf(acc->filtered[ACC_AXE_X] / acc_total) * 57.32f;
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	ed93 7a02 	vldr	s14, [r3, #8]
 8001168:	edd7 7a05 	vldr	s15, [r7, #20]
 800116c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001170:	eeb0 0a66 	vmov.f32	s0, s13
 8001174:	f009 fe4a 	bl	800ae0c <asinf>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	eef1 7a67 	vneg.f32	s15, s15
 8001180:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001354 <ORIENTATION_Update+0x28c>
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ACC_AXE_Y]) < acc_total) 	//To avoid asin x with x greater than 1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	edd3 7a03 	vldr	s15, [r3, #12]
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	f7ff ff0e 	bl	8000fb8 <absolu>
 800119c:	eeb0 7a40 	vmov.f32	s14, s0
 80011a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ac:	dd13      	ble.n	80011d6 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ACC_AXE_X] = asinf(acc->filtered[ACC_AXE_Y] / acc_total) * 57.32f;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	ed93 7a03 	vldr	s14, [r3, #12]
 80011b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011bc:	eeb0 0a66 	vmov.f32	s0, s13
 80011c0:	f009 fe24 	bl	800ae0c <asinf>
 80011c4:	eeb0 7a40 	vmov.f32	s14, s0
 80011c8:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001354 <ORIENTATION_Update+0x28c>
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	edc3 7a04 	vstr	s15, [r3, #16]
		if(acc->filtered[ACC_AXE_Z] < 0)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	d517      	bpl.n	8001216 <ORIENTATION_Update+0x14e>
		{
			orientation->acc_angles[ACC_AXE_X] = acc_correction(orientation->acc_angles[ACC_AXE_X]);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f7ff fefc 	bl	8000fec <acc_correction>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edc3 7a04 	vstr	s15, [r3, #16]
			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edd3 7a05 	vldr	s15, [r3, #20]
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	f7ff fef0 	bl	8000fec <acc_correction>
 800120c:	eef0 7a40 	vmov.f32	s15, s0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edc3 7a05 	vstr	s15, [r3, #20]
		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <ORIENTATION_Update+0x290>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00f      	beq.n	800123e <ORIENTATION_Update+0x176>
	{
		orientation->angular_position[GYRO_AXE_X] = orientation->acc_angles[ACC_AXE_X] ;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->acc_angles[ACC_AXE_Y] ;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	605a      	str	r2, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] = 0 ;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <ORIENTATION_Update+0x290>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];



	}
}
 800123c:	e085      	b.n	800134a <ORIENTATION_Update+0x282>
		float dx = gyro->filtered[GYRO_AXE_X] * orientation->periode ;
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	ed93 7a02 	vldr	s14, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	edc7 7a04 	vstr	s15, [r7, #16]
		float dy = gyro->filtered[GYRO_AXE_Y] * orientation->periode ;
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	ed93 7a03 	vldr	s14, [r3, #12]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800125e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001262:	edc7 7a03 	vstr	s15, [r7, #12]
		float dz = gyro->filtered[GYRO_AXE_Z] * orientation->periode ;
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	ed93 7a04 	vldr	s14, [r3, #16]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001276:	edc7 7a02 	vstr	s15, [r7, #8]
		orientation->angular_position[GYRO_AXE_X] += dx ;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	ed93 7a00 	vldr	s14, [r3]
 8001280:	edd7 7a04 	vldr	s15, [r7, #16]
 8001284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] += dy ;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	ed93 7a01 	vldr	s14, [r3, #4]
 8001294:	edd7 7a03 	vldr	s15, [r7, #12]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_Z] += dz ;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80012a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edc3 7a02 	vstr	s15, [r3, #8]
		orientation->angular_position[GYRO_AXE_X] = angle_180(orientation->angular_position[GYRO_AXE_X]);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f7ff fe42 	bl	8000f48 <angle_180>
 80012c4:	eef0 7a40 	vmov.f32	s15, s0
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = angle_180(orientation->angular_position[GYRO_AXE_Y]);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	f7ff fe36 	bl	8000f48 <angle_180>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[GYRO_AXE_X] = orientation->alpha * orientation->angular_position[GYRO_AXE_X] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_X];
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001300:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edd3 7a04 	vldr	s15, [r3, #16]
 800130a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[GYRO_AXE_Y] = orientation->alpha * orientation->angular_position[GYRO_AXE_Y] + (1.0f - orientation->alpha) * orientation->acc_angles[ACC_AXE_Y];
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a01 	vldr	s15, [r3, #4]
 8001324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800132e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001332:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 7a05 	vldr	s15, [r3, #20]
 800133c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	426547ae 	.word	0x426547ae
 8001358:	20000000 	.word	0x20000000

0800135c <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <DEBUG_init+0x14>)
 8001362:	f000 f809 	bl	8001378 <RetargetInit>
	printf("Debuger is init\n");
 8001366:	4803      	ldr	r0, [pc, #12]	; (8001374 <DEBUG_init+0x18>)
 8001368:	f007 fde8 	bl	8008f3c <puts>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200015a8 	.word	0x200015a8
 8001374:	0800b170 	.word	0x0800b170

08001378 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001380:	4a07      	ldr	r2, [pc, #28]	; (80013a0 <RetargetInit+0x28>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <RetargetInit+0x2c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6898      	ldr	r0, [r3, #8]
 800138c:	2300      	movs	r3, #0
 800138e:	2202      	movs	r2, #2
 8001390:	2100      	movs	r1, #0
 8001392:	f007 fddb 	bl	8008f4c <setvbuf>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000d90 	.word	0x20000d90
 80013a4:	20000afc 	.word	0x20000afc

080013a8 <_isatty>:

int _isatty(int fd) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db04      	blt.n	80013c0 <_isatty+0x18>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	dc01      	bgt.n	80013c0 <_isatty+0x18>
    return 1;
 80013bc:	2301      	movs	r3, #1
 80013be:	e005      	b.n	80013cc <_isatty+0x24>

  errno = EBADF;
 80013c0:	f007 f8a0 	bl	8008504 <__errno>
 80013c4:	4602      	mov	r2, r0
 80013c6:	2309      	movs	r3, #9
 80013c8:	6013      	str	r3, [r2, #0]
  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_write>:

int _write(int fd, char* ptr, int len) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d002      	beq.n	80013ec <_write+0x18>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d110      	bne.n	800140e <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <_write+0x50>)
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	2364      	movs	r3, #100	; 0x64
 80013f6:	68b9      	ldr	r1, [r7, #8]
 80013f8:	f006 fa73 	bl	80078e2 <HAL_UART_Transmit>
 80013fc:	4603      	mov	r3, r0
 80013fe:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <_write+0x36>
      return len;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e008      	b.n	800141c <_write+0x48>
    else
      return EIO;
 800140a:	2305      	movs	r3, #5
 800140c:	e006      	b.n	800141c <_write+0x48>
  }
  errno = EBADF;
 800140e:	f007 f879 	bl	8008504 <__errno>
 8001412:	4602      	mov	r2, r0
 8001414:	2309      	movs	r3, #9
 8001416:	6013      	str	r3, [r2, #0]
  return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000d90 	.word	0x20000d90

08001428 <_close>:

int _close(int fd) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db04      	blt.n	8001440 <_close+0x18>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b02      	cmp	r3, #2
 800143a:	dc01      	bgt.n	8001440 <_close+0x18>
    return 0;
 800143c:	2300      	movs	r3, #0
 800143e:	e006      	b.n	800144e <_close+0x26>

  errno = EBADF;
 8001440:	f007 f860 	bl	8008504 <__errno>
 8001444:	4602      	mov	r2, r0
 8001446:	2309      	movs	r3, #9
 8001448:	6013      	str	r3, [r2, #0]
  return -1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001462:	f007 f84f 	bl	8008504 <__errno>
 8001466:	4602      	mov	r2, r0
 8001468:	2309      	movs	r3, #9
 800146a:	6013      	str	r3, [r2, #0]
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_read>:

int _read(int fd, char* ptr, int len) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d110      	bne.n	80014ac <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <_read+0x4c>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	2201      	movs	r2, #1
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	f006 fabd 	bl	8007a14 <HAL_UART_Receive>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <_read+0x30>
      return 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e008      	b.n	80014ba <_read+0x42>
    else
      return EIO;
 80014a8:	2305      	movs	r3, #5
 80014aa:	e006      	b.n	80014ba <_read+0x42>
  }
  errno = EBADF;
 80014ac:	f007 f82a 	bl	8008504 <__errno>
 80014b0:	4602      	mov	r2, r0
 80014b2:	2309      	movs	r3, #9
 80014b4:	6013      	str	r3, [r2, #0]
  return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000d90 	.word	0x20000d90

080014c8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db08      	blt.n	80014ea <_fstat+0x22>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	dc05      	bgt.n	80014ea <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e4:	605a      	str	r2, [r3, #4]
    return 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e005      	b.n	80014f6 <_fstat+0x2e>
  }

  errno = EBADF;
 80014ea:	f007 f80b 	bl	8008504 <__errno>
 80014ee:	4602      	mov	r2, r0
 80014f0:	2309      	movs	r3, #9
 80014f2:	6013      	str	r3, [r2, #0]
  return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <gyro_init_ok_func>:
		//Events array
		[EVENT_MAIN_GYRO_INIT_OK] = DEFINE_EVENT(gyro_init_ok_func, 1, EVENT_ENABLED),
		[EVENT_MAIN_ACC_INIT_OK] = DEFINE_EVENT(acc_init_ok_func, 1, EVENT_DISABLED)
};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 800150a:	2001      	movs	r0, #1
 800150c:	f000 f96e 	bl	80017ec <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8001510:	2101      	movs	r1, #1
 8001512:	2004      	movs	r0, #4
 8001514:	f000 fcda 	bl	8001ecc <SCHEDULER_task_set_mode>
	events_main[EVENT_MAIN_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <gyro_init_ok_func+0x28>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000004 	.word	0x20000004

0800152c <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 8001536:	2005      	movs	r0, #5
 8001538:	f000 f958 	bl	80017ec <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 800153c:	2101      	movs	r1, #1
 800153e:	2006      	movs	r0, #6
 8001540:	f000 fcc4 	bl	8001ecc <SCHEDULER_task_set_mode>
	events_main[EVENT_MAIN_ACC_INIT_OK].state = EVENT_DISABLED ;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <acc_init_ok_func+0x28>)
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000004 	.word	0x20000004

08001558 <gyro_data_ready_func>:
		[EVENT_IT_GYRO_DATA_READY] = 		DEFINE_EVENT(gyro_data_ready_func, 	1, EVENT_ENABLED),
		[EVENT_IT_ACC_DATA_READY] = 		DEFINE_EVENT(acc_data_ready_func, 	1, EVENT_ENABLED),
		[EVENT_IT_ORIENTATION_UPDATE] = 	DEFINE_EVENT(orientation_update, 	1, EVENT_ENABLED)
};

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001562:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8001564:	2102      	movs	r1, #2
 8001566:	4806      	ldr	r0, [pc, #24]	; (8001580 <gyro_data_ready_func+0x28>)
 8001568:	f000 fa52 	bl	8001a10 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800156c:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 800156e:	2102      	movs	r1, #2
 8001570:	2005      	movs	r0, #5
 8001572:	f000 fcab 	bl	8001ecc <SCHEDULER_task_set_mode>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000cec 	.word	0x20000cec

08001584 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800158e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 8001590:	2106      	movs	r1, #6
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <acc_data_ready_func+0x28>)
 8001594:	f000 fa3c 	bl	8001a10 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001598:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 800159a:	2102      	movs	r1, #2
 800159c:	2007      	movs	r0, #7
 800159e:	f000 fc95 	bl	8001ecc <SCHEDULER_task_set_mode>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000cec 	.word	0x20000cec

080015b0 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80015ba:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 80015bc:	2107      	movs	r1, #7
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <orientation_update+0x30>)
 80015c0:	f000 fa26 	bl	8001a10 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 80015c4:	2103      	movs	r1, #3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <orientation_update+0x30>)
 80015c8:	f000 fa22 	bl	8001a10 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80015cc:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 80015ce:	2102      	movs	r1, #2
 80015d0:	2008      	movs	r0, #8
 80015d2:	f000 fc7b 	bl	8001ecc <SCHEDULER_task_set_mode>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000cec 	.word	0x20000cec

080015e4 <EVENT_process_events_main>:


//Déclenchement des events en main
void EVENT_process_events_main(){
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
	if(initialized){
 80015ea:	4b3c      	ldr	r3, [pc, #240]	; (80016dc <EVENT_process_events_main+0xf8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d06f      	beq.n	80016d2 <EVENT_process_events_main+0xee>
	//Pout chaque event
		for(uint32_t e = 0; e < EVENT_MAIN_COUNT; e ++){
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e069      	b.n	80016cc <EVENT_process_events_main+0xe8>

			uint32_t m = 0 ;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
			bool_e function_did_run_once = FALSE ;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED){
 8001600:	e049      	b.n	8001696 <EVENT_process_events_main+0xb2>
				if(Mask_test_and(events_main[e].mask_and[m], flags)){		//Mask and test
 8001602:	4837      	ldr	r0, [pc, #220]	; (80016e0 <EVENT_process_events_main+0xfc>)
 8001604:	4937      	ldr	r1, [pc, #220]	; (80016e4 <EVENT_process_events_main+0x100>)
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	00d2      	lsls	r2, r2, #3
 800160c:	24b4      	movs	r4, #180	; 0xb4
 800160e:	fb04 f303 	mul.w	r3, r4, r3
 8001612:	4413      	add	r3, r2
 8001614:	4419      	add	r1, r3
 8001616:	e890 000c 	ldmia.w	r0, {r2, r3}
 800161a:	c903      	ldmia	r1, {r0, r1}
 800161c:	f000 f969 	bl	80018f2 <Mask_test_and>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d034      	beq.n	8001690 <EVENT_process_events_main+0xac>
					if(Mask_test_or(events_main[e].mask_or[m], flags)){		//Mask or test
 8001626:	482e      	ldr	r0, [pc, #184]	; (80016e0 <EVENT_process_events_main+0xfc>)
 8001628:	492e      	ldr	r1, [pc, #184]	; (80016e4 <EVENT_process_events_main+0x100>)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1dda      	adds	r2, r3, #7
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	00d2      	lsls	r2, r2, #3
 8001632:	24b4      	movs	r4, #180	; 0xb4
 8001634:	fb04 f303 	mul.w	r3, r4, r3
 8001638:	4413      	add	r3, r2
 800163a:	4419      	add	r1, r3
 800163c:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001640:	c903      	ldmia	r1, {r0, r1}
 8001642:	f000 f989 	bl	8001958 <Mask_test_or>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d021      	beq.n	8001690 <EVENT_process_events_main+0xac>
						if(!Mask_test_or(events_main[e].mask_not[m], flags)){	//Mask not test
 800164c:	4824      	ldr	r0, [pc, #144]	; (80016e0 <EVENT_process_events_main+0xfc>)
 800164e:	4925      	ldr	r1, [pc, #148]	; (80016e4 <EVENT_process_events_main+0x100>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f103 020e 	add.w	r2, r3, #14
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	00d2      	lsls	r2, r2, #3
 800165a:	24b4      	movs	r4, #180	; 0xb4
 800165c:	fb04 f303 	mul.w	r3, r4, r3
 8001660:	4413      	add	r3, r2
 8001662:	4419      	add	r1, r3
 8001664:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001668:	c903      	ldmia	r1, {r0, r1}
 800166a:	f000 f975 	bl	8001958 <Mask_test_or>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <EVENT_process_events_main+0xac>
							events_main[e].function(m);
 8001674:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <EVENT_process_events_main+0x100>)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	21b4      	movs	r1, #180	; 0xb4
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	33b0      	adds	r3, #176	; 0xb0
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	4610      	mov	r0, r2
 800168a:	4798      	blx	r3
							function_did_run_once = TRUE ;
 800168c:	2301      	movs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
						}
					}
				}
				m++ ;
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	3301      	adds	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED){
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <EVENT_process_events_main+0x100>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	21b4      	movs	r1, #180	; 0xb4
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	33a8      	adds	r3, #168	; 0xa8
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d20c      	bcs.n	80016c6 <EVENT_process_events_main+0xe2>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <EVENT_process_events_main+0xe2>
 80016b2:	4a0c      	ldr	r2, [pc, #48]	; (80016e4 <EVENT_process_events_main+0x100>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	21b4      	movs	r1, #180	; 0xb4
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	33ac      	adds	r3, #172	; 0xac
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d09d      	beq.n	8001602 <EVENT_process_events_main+0x1e>
		for(uint32_t e = 0; e < EVENT_MAIN_COUNT; e ++){
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3301      	adds	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d992      	bls.n	80015f8 <EVENT_process_events_main+0x14>
			}

		}
	}
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000d00 	.word	0x20000d00
 80016e0:	20000cec 	.word	0x20000cec
 80016e4:	20000004 	.word	0x20000004

080016e8 <EVENT_process_events_it>:

//Déclenchement des events en it
void EVENT_process_events_it(){
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
	if(initialized){
 80016ee:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <EVENT_process_events_it+0xf8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d06f      	beq.n	80017d6 <EVENT_process_events_it+0xee>
	//Pout chaque event
		for(uint32_t e = 0; e < EVENT_IT_COUNT; e ++){
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	e069      	b.n	80017d0 <EVENT_process_events_it+0xe8>
			uint32_t m = 0 ;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
			bool_e function_did_run_once = FALSE ;
 8001700:	2300      	movs	r3, #0
 8001702:	607b      	str	r3, [r7, #4]
			//On test chaque paires de masque
			while(m < events_it[e].nb_mask && !function_did_run_once && events_it[e].state == EVENT_ENABLED){
 8001704:	e049      	b.n	800179a <EVENT_process_events_it+0xb2>
				if(Mask_test_and(events_it[e].mask_and[m], flags)){		//Mask and test
 8001706:	4837      	ldr	r0, [pc, #220]	; (80017e4 <EVENT_process_events_it+0xfc>)
 8001708:	4937      	ldr	r1, [pc, #220]	; (80017e8 <EVENT_process_events_it+0x100>)
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	00d2      	lsls	r2, r2, #3
 8001710:	24b4      	movs	r4, #180	; 0xb4
 8001712:	fb04 f303 	mul.w	r3, r4, r3
 8001716:	4413      	add	r3, r2
 8001718:	4419      	add	r1, r3
 800171a:	e890 000c 	ldmia.w	r0, {r2, r3}
 800171e:	c903      	ldmia	r1, {r0, r1}
 8001720:	f000 f8e7 	bl	80018f2 <Mask_test_and>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d034      	beq.n	8001794 <EVENT_process_events_it+0xac>
					if(Mask_test_or(events_it[e].mask_or[m], flags)){		//Mask or test
 800172a:	482e      	ldr	r0, [pc, #184]	; (80017e4 <EVENT_process_events_it+0xfc>)
 800172c:	492e      	ldr	r1, [pc, #184]	; (80017e8 <EVENT_process_events_it+0x100>)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1dda      	adds	r2, r3, #7
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	00d2      	lsls	r2, r2, #3
 8001736:	24b4      	movs	r4, #180	; 0xb4
 8001738:	fb04 f303 	mul.w	r3, r4, r3
 800173c:	4413      	add	r3, r2
 800173e:	4419      	add	r1, r3
 8001740:	e890 000c 	ldmia.w	r0, {r2, r3}
 8001744:	c903      	ldmia	r1, {r0, r1}
 8001746:	f000 f907 	bl	8001958 <Mask_test_or>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d021      	beq.n	8001794 <EVENT_process_events_it+0xac>
						if(!Mask_test_or(events_it[e].mask_not[m], flags)){	//Mask not test
 8001750:	4824      	ldr	r0, [pc, #144]	; (80017e4 <EVENT_process_events_it+0xfc>)
 8001752:	4925      	ldr	r1, [pc, #148]	; (80017e8 <EVENT_process_events_it+0x100>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f103 020e 	add.w	r2, r3, #14
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	00d2      	lsls	r2, r2, #3
 800175e:	24b4      	movs	r4, #180	; 0xb4
 8001760:	fb04 f303 	mul.w	r3, r4, r3
 8001764:	4413      	add	r3, r2
 8001766:	4419      	add	r1, r3
 8001768:	e890 000c 	ldmia.w	r0, {r2, r3}
 800176c:	c903      	ldmia	r1, {r0, r1}
 800176e:	f000 f8f3 	bl	8001958 <Mask_test_or>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10d      	bne.n	8001794 <EVENT_process_events_it+0xac>
							events_it[e].function(m);
 8001778:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <EVENT_process_events_it+0x100>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	21b4      	movs	r1, #180	; 0xb4
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	4413      	add	r3, r2
 8001784:	33b0      	adds	r3, #176	; 0xb0
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	4610      	mov	r0, r2
 800178e:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8001790:	2301      	movs	r3, #1
 8001792:	607b      	str	r3, [r7, #4]
						}
					}
				}
				m++ ;
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	3301      	adds	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
			while(m < events_it[e].nb_mask && !function_did_run_once && events_it[e].state == EVENT_ENABLED){
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <EVENT_process_events_it+0x100>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	21b4      	movs	r1, #180	; 0xb4
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	33a8      	adds	r3, #168	; 0xa8
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d20c      	bcs.n	80017ca <EVENT_process_events_it+0xe2>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <EVENT_process_events_it+0xe2>
 80017b6:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <EVENT_process_events_it+0x100>)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	21b4      	movs	r1, #180	; 0xb4
 80017bc:	fb01 f303 	mul.w	r3, r1, r3
 80017c0:	4413      	add	r3, r2
 80017c2:	33ac      	adds	r3, #172	; 0xac
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d09d      	beq.n	8001706 <EVENT_process_events_it+0x1e>
		for(uint32_t e = 0; e < EVENT_IT_COUNT; e ++){
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d992      	bls.n	80016fc <EVENT_process_events_it+0x14>

			}
		}
	}
}
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000d00 	.word	0x20000d00
 80017e4:	20000cec 	.word	0x20000cec
 80017e8:	2000016c 	.word	0x2000016c

080017ec <EVENT_Set_flag>:

//Set et clean depuis le main
bool_e EVENT_Set_flag(Flags_t flag){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
	bool_e to_ret ;
	new_flag_it = TRUE ;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <EVENT_Set_flag+0x2c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
	__disable_irq();
	to_ret = MASK_set_flag(&flags, flag);		//It désactivitées pour éviter la réentrance
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	4619      	mov	r1, r3
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <EVENT_Set_flag+0x30>)
 8001804:	f000 f8d4 	bl	80019b0 <MASK_set_flag>
 8001808:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800180a:	b662      	cpsie	i
	__enable_irq();
	return to_ret ;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000cf4 	.word	0x20000cf4
 800181c:	20000cec 	.word	0x20000cec

08001820 <EVENT_Clean_flag>:
bool_e EVENT_Clean_flag(Flags_t flag){
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	bool_e to_ret ;
	new_flag_it = TRUE ;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <EVENT_Clean_flag+0x2c>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
	__disable_irq();
	to_ret = MASK_clean_flag(&flags, flag);		//It désactivitées pour éviter la réentrance
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <EVENT_Clean_flag+0x30>)
 8001838:	f000 f8ea 	bl	8001a10 <MASK_clean_flag>
 800183c:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800183e:	b662      	cpsie	i
	__enable_irq();
	return to_ret ;
 8001840:	68fb      	ldr	r3, [r7, #12]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000cf4 	.word	0x20000cf4
 8001850:	20000cec 	.word	0x20000cec

08001854 <EVENT_timmer_callback>:
bool_e EVENT_clean_flag_it(Flags_t flag){
	new_flag_it = TRUE ;
	return MASK_clean_flag(&flags, flag);
}

void EVENT_timmer_callback(TIM_HandleTypeDef * htim){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	if(new_flag_it){
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <EVENT_timmer_callback+0x2c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <EVENT_timmer_callback+0x24>
		if(htim == htim_event){
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <EVENT_timmer_callback+0x30>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d104      	bne.n	8001878 <EVENT_timmer_callback+0x24>
			new_flag_it = FALSE ;
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <EVENT_timmer_callback+0x2c>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
			EVENT_process_events_it();
 8001874:	f7ff ff38 	bl	80016e8 <EVENT_process_events_it>
		}
	}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000cf4 	.word	0x20000cf4
 8001884:	20000cf8 	.word	0x20000cf8

08001888 <EVENT_init>:

void EVENT_init(system_t * sys_, TIM_HandleTypeDef * htim_event_){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	initialized = TRUE ;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <EVENT_init+0x40>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8001898:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <EVENT_init+0x44>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_it_init(events_it);
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <EVENT_init+0x48>)
 80018a0:	f000 f8e5 	bl	8001a6e <mask_def_events_it_init>
	mask_def_events_main_init(events_main);
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <EVENT_init+0x4c>)
 80018a6:	f000 f8f8 	bl	8001a9a <mask_def_events_main_init>

	//On lance le timmer dédié à l'it event
	if(htim_event_ != NULL){
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <EVENT_init+0x38>
		htim_event = htim_event_ ;
 80018b0:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <EVENT_init+0x50>)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6013      	str	r3, [r2, #0]
		HAL_TIM_Base_Start_IT(htim_event);
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <EVENT_init+0x50>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f005 f957 	bl	8006b6e <HAL_TIM_Base_Start_IT>
	}
}
 80018c0:	bf00      	nop
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000d00 	.word	0x20000d00
 80018cc:	20000cfc 	.word	0x20000cfc
 80018d0:	2000016c 	.word	0x2000016c
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000cf8 	.word	0x20000cf8

080018dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  EVENT_timmer_callback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffb5 	bl	8001854 <EVENT_timmer_callback>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 80018f2:	b490      	push	{r4, r7}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	f107 0408 	add.w	r4, r7, #8
 80018fc:	e884 0003 	stmia.w	r4, {r0, r1}
 8001900:	4639      	mov	r1, r7
 8001902:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	e01c      	b.n	8001946 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	f107 0218 	add.w	r2, r7, #24
 8001914:	4413      	add	r3, r2
 8001916:	f853 2c10 	ldr.w	r2, [r3, #-16]
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	f107 0118 	add.w	r1, r7, #24
 8001922:	440b      	add	r3, r1
 8001924:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001928:	401a      	ands	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	f107 0118 	add.w	r1, r7, #24
 8001932:	440b      	add	r3, r1
 8001934:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 800193c:	2300      	movs	r3, #0
 800193e:	e006      	b.n	800194e <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b01      	cmp	r3, #1
 800194a:	dddf      	ble.n	800190c <Mask_test_and+0x1a>
		}
	return TRUE ;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bc90      	pop	{r4, r7}
 8001956:	4770      	bx	lr

08001958 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8001958:	b490      	push	{r4, r7}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	f107 0408 	add.w	r4, r7, #8
 8001962:	e884 0003 	stmia.w	r4, {r0, r1}
 8001966:	4639      	mov	r1, r7
 8001968:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e015      	b.n	800199e <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	f107 0218 	add.w	r2, r7, #24
 800197a:	4413      	add	r3, r2
 800197c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	f107 0118 	add.w	r1, r7, #24
 8001988:	440b      	add	r3, r1
 800198a:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8001994:	2301      	movs	r3, #1
 8001996:	e006      	b.n	80019a6 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	dde6      	ble.n	8001972 <Mask_test_or+0x1a>
	return FALSE ;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc90      	pop	{r4, r7}
 80019ae:	4770      	bx	lr

080019b0 <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_t flag){
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	095b      	lsrs	r3, r3, #5
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 80019cc:	2201      	movs	r2, #1
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d101      	bne.n	80019ec <MASK_set_flag+0x3c>
		return FALSE ;
 80019e8:	2300      	movs	r3, #0
 80019ea:	e00b      	b.n	8001a04 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	ea42 0103 	orr.w	r1, r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_t flag){
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d10b      	bne.n	8001a60 <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad1      	subs	r1, r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <mask_def_events_it_init>:

// ----------------	Orientation ------------------------
static void mask_def_orientation_update(Event_t * event);

//----------------	GLOBAL INIT ------------------------
void mask_def_events_it_init(Event_t * event){
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_data_ready(&event[EVENT_IT_GYRO_DATA_READY]);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f838 	bl	8001aec <mask_def_gyro_data_ready>

	//Acc mask def
	mask_def_acc_data_ready(&event[EVENT_IT_ACC_DATA_READY]);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	33b4      	adds	r3, #180	; 0xb4
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 f85f 	bl	8001b44 <mask_def_acc_data_ready>

	//Orientation
	mask_def_orientation_update(&event[EVENT_IT_ORIENTATION_UPDATE]);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 f86c 	bl	8001b6a <mask_def_orientation_update>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <mask_def_events_main_init>:

void mask_def_events_main_init(Event_t * event){
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_MAIN_GYRO_INIT_OK]);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f809 	bl	8001aba <mask_def_gyro_init_ok>

	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_MAIN_ACC_INIT_OK]);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	33b4      	adds	r3, #180	; 0xb4
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 f830 	bl	8001b12 <mask_def_acc_init_ok>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff72 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3338      	adds	r3, #56	; 0x38
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ff6c 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3370      	adds	r3, #112	; 0x70
 8001adc:	2101      	movs	r1, #1
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff66 	bl	80019b0 <MASK_set_flag>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff59 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3338      	adds	r3, #56	; 0x38
 8001b02:	2102      	movs	r1, #2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff53 	bl	80019b0 <MASK_set_flag>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff46 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3338      	adds	r3, #56	; 0x38
 8001b28:	2104      	movs	r1, #4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff40 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3370      	adds	r3, #112	; 0x70
 8001b34:	2105      	movs	r1, #5
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff3a 	bl	80019b0 <MASK_set_flag>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff2d 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3338      	adds	r3, #56	; 0x38
 8001b5a:	2106      	movs	r1, #6
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff27 	bl	80019b0 <MASK_set_flag>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2104      	movs	r1, #4
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff1a 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff15 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff10 	bl	80019b0 <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3338      	adds	r3, #56	; 0x38
 8001b94:	2107      	movs	r1, #7
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff ff0a 	bl	80019b0 <MASK_set_flag>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8001bac:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <SCHEDULER_init+0x20>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8001bb2:	f7ff fbd3 	bl	800135c <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 fa7e 	bl	80020b8 <tasks_init>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000d30 	.word	0x20000d30

08001bc8 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8001bce:	f000 fb7f 	bl	80022d0 <TIME_us>
 8001bd2:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8001bd4:	f000 f886 	bl	8001ce4 <get_first_task>
 8001bd8:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8001bde:	e046      	b.n	8001c6e <SCHEDULER_run+0xa6>

		switch(task->mode){
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	7a1b      	ldrb	r3, [r3, #8]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d020      	beq.n	8001c2a <SCHEDULER_run+0x62>
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d002      	beq.n	8001bf2 <SCHEDULER_run+0x2a>
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d008      	beq.n	8001c02 <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 8001bf0:	e027      	b.n	8001c42 <SCHEDULER_run+0x7a>
				current_time_us = task_process(task, current_time_us);
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	68b8      	ldr	r0, [r7, #8]
 8001bf6:	f000 f89b 	bl	8001d30 <task_process>
 8001bfa:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
				break;
 8001c00:	e01f      	b.n	8001c42 <SCHEDULER_run+0x7a>
				if(current_time_us >= task->desired_next_start_us){
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d319      	bcc.n	8001c40 <SCHEDULER_run+0x78>
					current_time_us = task_process(task, current_time_us);
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	f000 f88e 	bl	8001d30 <task_process>
 8001c14:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us += task->desired_period_us ;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	6a1a      	ldr	r2, [r3, #32]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	441a      	add	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	621a      	str	r2, [r3, #32]
					task_executed = TRUE ;
 8001c24:	2301      	movs	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
				break;
 8001c28:	e00a      	b.n	8001c40 <SCHEDULER_run+0x78>
				current_time_us = task_process(task, current_time_us);
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	68b8      	ldr	r0, [r7, #8]
 8001c2e:	f000 f87f 	bl	8001d30 <task_process>
 8001c32:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8001c34:	2301      	movs	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	721a      	strb	r2, [r3, #8]
				break;
 8001c3e:	e000      	b.n	8001c42 <SCHEDULER_run+0x7a>
				break;
 8001c40:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00d      	beq.n	8001c64 <SCHEDULER_run+0x9c>
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f000 fb2d 	bl	80022a8 <TASK_get_task>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d006      	beq.n	8001c64 <SCHEDULER_run+0x9c>
 8001c56:	2001      	movs	r0, #1
 8001c58:	f000 fb26 	bl	80022a8 <TASK_get_task>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d10e      	bne.n	8001c82 <SCHEDULER_run+0xba>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 8001c68:	f000 f84c 	bl	8001d04 <get_next_task>
 8001c6c:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <SCHEDULER_run+0xc4>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <SCHEDULER_run+0xc8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d204      	bcs.n	8001c84 <SCHEDULER_run+0xbc>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1af      	bne.n	8001be0 <SCHEDULER_run+0x18>
	}
}
 8001c80:	e000      	b.n	8001c84 <SCHEDULER_run+0xbc>
			break;
 8001c82:	bf00      	nop
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000d2c 	.word	0x20000d2c
 8001c90:	20000d28 	.word	0x20000d28

08001c94 <SCHEDULER_task>:

void SCHEDULER_task(void){
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	e00b      	b.n	8001cb8 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8001ca0:	79fa      	ldrb	r2, [r7, #7]
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <SCHEDULER_task+0x44>)
 8001ca6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001caa:	490c      	ldr	r1, [pc, #48]	; (8001cdc <SCHEDULER_task+0x48>)
 8001cac:	5c8a      	ldrb	r2, [r1, r2]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <SCHEDULER_task+0x4c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	79fa      	ldrb	r2, [r7, #7]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d3ed      	bcc.n	8001ca0 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <SCHEDULER_task+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000d34 	.word	0x20000d34
 8001cdc:	20000d58 	.word	0x20000d58
 8001ce0:	20000d61 	.word	0x20000d61

08001ce4 <get_first_task>:
	for(uint32_t t = 0; t < task_queu_size; t++)
		load_pourcentage += task_queu[t]->duration_us * 10000 / task_queu[t]->real_period_us ;
	return load_pourcentage ;
}

static task_t * get_first_task(void){
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <get_first_task+0x18>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <get_first_task+0x1c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20000d2c 	.word	0x20000d2c
 8001d00:	20000d04 	.word	0x20000d04

08001d04 <get_next_task>:

static task_t * get_next_task(void){
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <get_next_task+0x24>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <get_next_task+0x24>)
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <get_next_task+0x24>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <get_next_task+0x28>)
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000d2c 	.word	0x20000d2c
 8001d2c:	20000d04 	.word	0x20000d04

08001d30 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <task_process+0x16>
		return current_time_us ;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	e09d      	b.n	8001e82 <task_process+0x152>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	3308      	adds	r3, #8
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	1ad2      	subs	r2, r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001d6a:	6839      	ldr	r1, [r7, #0]
 8001d6c:	1a8a      	subs	r2, r1, r2
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	3308      	adds	r3, #8
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	605a      	str	r2, [r3, #4]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	3308      	adds	r3, #8
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	675a      	str	r2, [r3, #116]	; 0x74
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d96:	4a3d      	ldr	r2, [pc, #244]	; (8001e8c <task_process+0x15c>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	091a      	lsrs	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]

	task->last_execution_us = current_time_us ;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	61da      	str	r2, [r3, #28]
	task->process(current_time_us);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	4798      	blx	r3
	current_time_us = TIME_us();
 8001db0:	f000 fa8e 	bl	80022d0 <TIME_us>
 8001db4:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	311e      	adds	r1, #30
 8001dc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dca:	1ad2      	subs	r2, r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8001ddc:	6839      	ldr	r1, [r7, #0]
 8001dde:	1ac9      	subs	r1, r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	321e      	adds	r2, #30
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	311e      	adds	r1, #30
 8001df6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	bf38      	it	cc
 8001dfe:	461a      	movcc	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	611a      	str	r2, [r3, #16]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	311e      	adds	r1, #30
 8001e14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001e18:	441a      	add	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001e26:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <task_process+0x15c>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	091a      	lsrs	r2, r3, #4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60da      	str	r2, [r3, #12]

	if(task->duration_us_average_array[task->average_index] > 1000)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	321e      	adds	r2, #30
 8001e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e44:	d90c      	bls.n	8001e60 <task_process+0x130>
		task->duration_us_average_array[task->average_index] ++ ;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	f103 011e 	add.w	r1, r3, #30
 8001e52:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001e56:	1c51      	adds	r1, r2, #1
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	331e      	adds	r3, #30
 8001e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001e74:	2b14      	cmp	r3, #20
 8001e76:	d103      	bne.n	8001e80 <task_process+0x150>
		task->average_index = 0 ;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	return current_time_us ;
 8001e80:	683b      	ldr	r3, [r7, #0]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	cccccccd 	.word	0xcccccccd

08001e90 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
	if(enable)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d008      	beq.n	8001eb4 <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f9ff 	bl	80022a8 <TASK_get_task>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 f861 	bl	8001f74 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 8001eb2:	e007      	b.n	8001ec4 <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 f9f6 	bl	80022a8 <TASK_get_task>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f8b8 	bl	8002034 <queu_remove>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	71fb      	strb	r3, [r7, #7]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <SCHEDULER_task_set_mode+0x4c>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 f9dd 	bl	80022a8 <TASK_get_task>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <SCHEDULER_task_set_mode+0x50>)
 8001ef2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <SCHEDULER_task_set_mode+0x4c>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	b2d1      	uxtb	r1, r2
 8001f00:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SCHEDULER_task_set_mode+0x4c>)
 8001f02:	7011      	strb	r1, [r2, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <SCHEDULER_task_set_mode+0x54>)
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f0c:	b662      	cpsie	i
	__enable_irq();
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd90      	pop	{r4, r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000d61 	.word	0x20000d61
 8001f1c:	20000d34 	.word	0x20000d34
 8001f20:	20000d58 	.word	0x20000d58

08001f24 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <queu_contains+0x12>
		return FALSE ;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e014      	b.n	8001f60 <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e00b      	b.n	8001f54 <queu_contains+0x30>
		if(task_queu[t] == task)
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <queu_contains+0x48>)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d101      	bne.n	8001f4e <queu_contains+0x2a>
			return TRUE ;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e008      	b.n	8001f60 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <queu_contains+0x4c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3ee      	bcc.n	8001f3c <queu_contains+0x18>
	return FALSE ;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	20000d04 	.word	0x20000d04
 8001f70:	20000d28 	.word	0x20000d28

08001f74 <queu_add>:

static bool_e queu_add(task_t * task){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ffd1 	bl	8001f24 <queu_contains>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d106      	bne.n	8001f96 <queu_add+0x22>
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <queu_add+0xb8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d802      	bhi.n	8001f96 <queu_add+0x22>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <queu_add+0x26>
		return FALSE ;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e043      	b.n	8002022 <queu_add+0xae>


	uint32_t t = 0 ;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8001f9e:	e03c      	b.n	800201a <queu_add+0xa6>
	{
		if(task_queu[t] == NULL)
 8001fa0:	4a23      	ldr	r2, [pc, #140]	; (8002030 <queu_add+0xbc>)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10b      	bne.n	8001fc4 <queu_add+0x50>
		{
			task_queu[t] = task ;
 8001fac:	4920      	ldr	r1, [pc, #128]	; (8002030 <queu_add+0xbc>)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <queu_add+0xb8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	4a1b      	ldr	r2, [pc, #108]	; (800202c <queu_add+0xb8>)
 8001fbe:	6013      	str	r3, [r2, #0]
			return TRUE;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e02e      	b.n	8002022 <queu_add+0xae>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f993 2000 	ldrsb.w	r2, [r3]
 8001fca:	4919      	ldr	r1, [pc, #100]	; (8002030 <queu_add+0xbc>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dd1c      	ble.n	8002014 <queu_add+0xa0>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <queu_add+0xbc>)
 8001fe2:	1898      	adds	r0, r3, r2
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4a11      	ldr	r2, [pc, #68]	; (8002030 <queu_add+0xbc>)
 8001fea:	1899      	adds	r1, r3, r2
 8001fec:	4b0f      	ldr	r3, [pc, #60]	; (800202c <queu_add+0xb8>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f006 faae 	bl	8008558 <memmove>
			task_queu[t] = task ;
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <queu_add+0xbc>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <queu_add+0xb8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	4a07      	ldr	r2, [pc, #28]	; (800202c <queu_add+0xb8>)
 800200e:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8002010:	2301      	movs	r3, #1
 8002012:	e006      	b.n	8002022 <queu_add+0xae>
		}
		t++;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3301      	adds	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d9bf      	bls.n	8001fa0 <queu_add+0x2c>
	}
	return FALSE ;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000d28 	.word	0x20000d28
 8002030:	20000d04 	.word	0x20000d04

08002034 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff71 	bl	8001f24 <queu_contains>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <queu_remove+0x1a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <queu_remove+0x1e>
		return FALSE ;
 800204e:	2300      	movs	r3, #0
 8002050:	e02a      	b.n	80020a8 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e021      	b.n	800209c <queu_remove+0x68>
		if(task == task_queu[t]){
 8002058:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <queu_remove+0x7c>)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d117      	bne.n	8002096 <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <queu_remove+0x7c>)
 800206c:	1898      	adds	r0, r3, r2
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3301      	adds	r3, #1
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <queu_remove+0x7c>)
 8002076:	1899      	adds	r1, r3, r2
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <queu_remove+0x80>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	461a      	mov	r2, r3
 8002084:	f006 fa68 	bl	8008558 <memmove>
			task_queu_size -- ;
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <queu_remove+0x80>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3b01      	subs	r3, #1
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <queu_remove+0x80>)
 8002090:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8002092:	2301      	movs	r3, #1
 8002094:	e008      	b.n	80020a8 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <queu_remove+0x80>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3d8      	bcc.n	8002058 <queu_remove+0x24>
		}
	}
	return FALSE ;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000d04 	.word	0x20000d04
 80020b4:	20000d28 	.word	0x20000d28

080020b8 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;
static uint32_t delta_1 ;

void tasks_init(system_t * sys_){
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <tasks_init+0x50>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 80020c6:	2101      	movs	r1, #1
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7ff fee1 	bl	8001e90 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 80020ce:	2101      	movs	r1, #1
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff fedd 	bl	8001e90 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 80020d6:	2101      	movs	r1, #1
 80020d8:	2003      	movs	r0, #3
 80020da:	f7ff fed9 	bl	8001e90 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 80020de:	2101      	movs	r1, #1
 80020e0:	2008      	movs	r0, #8
 80020e2:	f7ff fed5 	bl	8001e90 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 80020e6:	2101      	movs	r1, #1
 80020e8:	2005      	movs	r0, #5
 80020ea:	f7ff fed1 	bl	8001e90 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 80020ee:	2101      	movs	r1, #1
 80020f0:	2004      	movs	r0, #4
 80020f2:	f7ff fecd 	bl	8001e90 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 80020f6:	2101      	movs	r1, #1
 80020f8:	2007      	movs	r0, #7
 80020fa:	f7ff fec9 	bl	8001e90 <SCHEDULER_enable_task>



}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000d64 	.word	0x20000d64

0800210c <process_print_f>:

void process_print_f(uint32_t current_time_us){
 800210c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002110:	b088      	sub	sp, #32
 8002112:	af04      	add	r7, sp, #16
 8002114:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <process_print_f+0x5c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800211e:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa0f 	bl	8000548 <__aeabi_f2d>
 800212a:	4680      	mov	r8, r0
 800212c:	4689      	mov	r9, r1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fa07 	bl	8000548 <__aeabi_f2d>
 800213a:	4604      	mov	r4, r0
 800213c:	460d      	mov	r5, r1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa00 	bl	8000548 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002150:	e9cd 4500 	strd	r4, r5, [sp]
 8002154:	4642      	mov	r2, r8
 8002156:	464b      	mov	r3, r9
 8002158:	4804      	ldr	r0, [pc, #16]	; (800216c <process_print_f+0x60>)
 800215a:	f006 fe7b 	bl	8008e54 <iprintf>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002168:	20000d64 	.word	0x20000d64
 800216c:	0800b180 	.word	0x0800b180

08002170 <process_led>:


void process_led(uint32_t current_time_us){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	LED_SEQUENCE_play(&sys->ihm.led_blue, current_time_us);
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <process_led+0x38>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3338      	adds	r3, #56	; 0x38
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4618      	mov	r0, r3
 8002182:	f006 f96b 	bl	800845c <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_red, current_time_us);
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <process_led+0x38>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	f006 f965 	bl	800845c <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_green, current_time_us);
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <process_led+0x38>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	331c      	adds	r3, #28
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	f006 f95e 	bl	800845c <LED_SEQUENCE_play>
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000d64 	.word	0x20000d64

080021ac <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <process_gyro_update+0x24>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <process_gyro_update+0x28>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3354      	adds	r3, #84	; 0x54
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f99d 	bl	8002500 <GYRO_ACC_update_dma>

}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000d68 	.word	0x20000d68
 80021d4:	20000d64 	.word	0x20000d64

080021d8 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <process_gyro_filter+0x24>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
//	delta_1 = 90  * delta_1 + 10* (end_time_filtering_gyro - start_time_gyro) ;
//	delta_1 /= 100 ;

	GYRO_process_lpf(&sys->sensors.gyro);
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <process_gyro_filter+0x28>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3354      	adds	r3, #84	; 0x54
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f9a3 	bl	8002538 <GYRO_process_lpf>

}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000d6c 	.word	0x20000d6c
 8002200:	20000d64 	.word	0x20000d64

08002204 <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <process_acc_update+0x1c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	33bc      	adds	r3, #188	; 0xbc
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f8cc 	bl	80023b0 <ACC_update>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000d64 	.word	0x20000d64

08002224 <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <process_acc_filter+0x1c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	33bc      	adds	r3, #188	; 0xbc
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8da 	bl	80023ec <ACC_process_lpf>
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000d64 	.word	0x20000d64

08002244 <process_event_main>:

void process_event_main(uint32_t current_time_us){
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process_events_main();
 800224c:	f7ff f9ca 	bl	80015e4 <EVENT_process_events_main>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	delta_1 = (end_time_filtering_gyro - start_time_gyro) ;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <process_orientation_update+0x2c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <process_orientation_update+0x30>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <process_orientation_update+0x34>)
 800226c:	6013      	str	r3, [r2, #0]
	ORIENTATION_Update(&sys->orientation);
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <process_orientation_update+0x38>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe ff26 	bl	80010c8 <ORIENTATION_Update>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000d6c 	.word	0x20000d6c
 8002288:	20000d68 	.word	0x20000d68
 800228c:	20000d70 	.word	0x20000d70
 8002290:	20000d64 	.word	0x20000d64

08002294 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 800229c:	f7ff fcfa 	bl	8001c94 <SCHEDULER_task>
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <TASK_get_task>:
		[TASK_ACC_FILTER] = 	DEFINE_TASK(TASK_ACC_FILTER, 		PRIORITY_HIGH,	 		process_acc_filter, 		PERIOD_US_FROM_HERTZ(1), 					TASK_MODE_EVENT),

		[TASK_ORIENTATION_UPDATE] = 	DEFINE_TASK(TASK_ORIENTATION_UPDATE, 		PRIORITY_HIGH,	 		process_orientation_update, 		PERIOD_US_FROM_HERTZ(1), 	TASK_MODE_EVENT),
};

task_t * TASK_get_task(task_ids_t id){
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	22d0      	movs	r2, #208	; 0xd0
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <TASK_get_task+0x24>)
 80022bc:	4413      	add	r3, r2
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000388 	.word	0x20000388

080022d0 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022d6:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 80022d8:	f001 ffa2 	bl	8004220 <HAL_GetTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	3301      	adds	r3, #1
 80022e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e4:	fb02 f203 	mul.w	r2, r2, r3
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <TIME_us+0x50>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	490d      	ldr	r1, [pc, #52]	; (8002324 <TIME_us+0x54>)
 80022f0:	fba1 1303 	umull	r1, r3, r1, r3
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80022fa:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <TIME_us+0x58>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d803      	bhi.n	800230e <TIME_us+0x3e>
		t_us += 1000;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800230c:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 800230e:	4a06      	ldr	r2, [pc, #24]	; (8002328 <TIME_us+0x58>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6013      	str	r3, [r2, #0]

	return t_us;
 8002314:	687b      	ldr	r3, [r7, #4]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010
 8002324:	18618619 	.word	0x18618619
 8002328:	20000d74 	.word	0x20000d74

0800232c <ACC_init>:

static void acc_data_callback(void);

float filter_config [3] = {0.1f, 0.9f, 0};

void ACC_init(acc_t * acc, mpu_t * mpu){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_FIRST_ORDER);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3314      	adds	r3, #20
 800233a:	2200      	movs	r2, #0
 800233c:	491a      	ldr	r1, [pc, #104]	; (80023a8 <ACC_init+0x7c>)
 800233e:	4618      	mov	r0, r3
 8002340:	f005 ffd4 	bl	80082ec <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_FIRST_ORDER);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3330      	adds	r3, #48	; 0x30
 8002348:	2200      	movs	r2, #0
 800234a:	4917      	ldr	r1, [pc, #92]	; (80023a8 <ACC_init+0x7c>)
 800234c:	4618      	mov	r0, r3
 800234e:	f005 ffcd 	bl	80082ec <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_FIRST_ORDER);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	334c      	adds	r3, #76	; 0x4c
 8002356:	2200      	movs	r2, #0
 8002358:	4913      	ldr	r1, [pc, #76]	; (80023a8 <ACC_init+0x7c>)
 800235a:	4618      	mov	r0, r3
 800235c:	f005 ffc6 	bl	80082ec <FILTER_init>


	acc->mpu = mpu ;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	605a      	str	r2, [r3, #4]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <ACC_init+0x80>)
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fb20 	bl	80029c0 <MPU_init_acc>
 8002380:	4603      	mov	r3, r0
 8002382:	2b01      	cmp	r3, #1
 8002384:	d008      	beq.n	8002398 <ACC_init+0x6c>
 8002386:	2b02      	cmp	r3, #2
 8002388:	d008      	beq.n	800239c <ACC_init+0x70>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d000      	beq.n	8002390 <ACC_init+0x64>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 800238e:	e006      	b.n	800239e <ACC_init+0x72>
			EVENT_Set_flag(FLAG_ACC_OK);
 8002390:	2004      	movs	r0, #4
 8002392:	f7ff fa2b 	bl	80017ec <EVENT_Set_flag>
			break;
 8002396:	e002      	b.n	800239e <ACC_init+0x72>
			break;
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <ACC_init+0x72>
			break;
 800239c:	bf00      	nop
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000ad8 	.word	0x20000ad8
 80023ac:	0800246d 	.word	0x0800246d

080023b0 <ACC_update>:

void ACC_update(acc_t * acc){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fba3 	bl	8002b08 <MPU_update_acc>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d00c      	beq.n	80023e2 <ACC_update+0x32>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d006      	beq.n	80023da <ACC_update+0x2a>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d000      	beq.n	80023d2 <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 80023d0:	e008      	b.n	80023e4 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 80023d2:	2006      	movs	r0, #6
 80023d4:	f7ff fa0a 	bl	80017ec <EVENT_Set_flag>
			break;
 80023d8:	e004      	b.n	80023e4 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80023da:	2004      	movs	r0, #4
 80023dc:	f7ff fa20 	bl	8001820 <EVENT_Clean_flag>
			break;
 80023e0:	e000      	b.n	80023e4 <ACC_update+0x34>
			break;
 80023e2:	bf00      	nop
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f103 0214 	add.w	r2, r3, #20
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eeb0 0a67 	vmov.f32	s0, s15
 8002406:	4610      	mov	r0, r2
 8002408:	f005 ff93 	bl	8008332 <FILTER_process>
 800240c:	eef0 7a40 	vmov.f32	s15, s0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	3304      	adds	r3, #4
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	4610      	mov	r0, r2
 800242c:	f005 ff81 	bl	8008332 <FILTER_process>
 8002430:	eef0 7a40 	vmov.f32	s15, s0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	3308      	adds	r3, #8
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	eeb0 0a67 	vmov.f32	s0, s15
 800244e:	4610      	mov	r0, r2
 8002450:	f005 ff6f 	bl	8008332 <FILTER_process>
 8002454:	eef0 7a40 	vmov.f32	s15, s0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 800245e:	2007      	movs	r0, #7
 8002460:	f7ff f9c4 	bl	80017ec <EVENT_Set_flag>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <acc_data_callback>:

static void acc_data_callback(void){
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8002470:	2006      	movs	r0, #6
 8002472:	f7ff f9bb 	bl	80017ec <EVENT_Set_flag>
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <GYRO_init>:

float filter[3] = {0.1f, 0.9f, 0};

static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[GYRO_AXE_X], filter, FILTER_FIRST_ORDER);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3314      	adds	r3, #20
 800248a:	2200      	movs	r2, #0
 800248c:	491a      	ldr	r1, [pc, #104]	; (80024f8 <GYRO_init+0x7c>)
 800248e:	4618      	mov	r0, r3
 8002490:	f005 ff2c 	bl	80082ec <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Y], filter, FILTER_FIRST_ORDER);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3330      	adds	r3, #48	; 0x30
 8002498:	2200      	movs	r2, #0
 800249a:	4917      	ldr	r1, [pc, #92]	; (80024f8 <GYRO_init+0x7c>)
 800249c:	4618      	mov	r0, r3
 800249e:	f005 ff25 	bl	80082ec <FILTER_init>
	FILTER_init(&gyro->filters[GYRO_AXE_Z], filter, FILTER_FIRST_ORDER);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	334c      	adds	r3, #76	; 0x4c
 80024a6:	2200      	movs	r2, #0
 80024a8:	4913      	ldr	r1, [pc, #76]	; (80024f8 <GYRO_init+0x7c>)
 80024aa:	4618      	mov	r0, r3
 80024ac:	f005 ff1e 	bl	80082ec <FILTER_init>

	gyro->mpu = mpu ;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	605a      	str	r2, [r3, #4]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <GYRO_init+0x80>)
 80024c8:	2103      	movs	r1, #3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f9c8 	bl	8002860 <MPU_init_gyro>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d008      	beq.n	80024e8 <GYRO_init+0x6c>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d008      	beq.n	80024ec <GYRO_init+0x70>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d000      	beq.n	80024e0 <GYRO_init+0x64>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 80024de:	e006      	b.n	80024ee <GYRO_init+0x72>
			EVENT_Set_flag(FLAG_GYRO_OK);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7ff f983 	bl	80017ec <EVENT_Set_flag>
			break;
 80024e6:	e002      	b.n	80024ee <GYRO_init+0x72>
			break;
 80024e8:	bf00      	nop
 80024ea:	e000      	b.n	80024ee <GYRO_init+0x72>
			break;
 80024ec:	bf00      	nop
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000ae4 	.word	0x20000ae4
 80024fc:	080025b9 	.word	0x080025b9

08002500 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fb3a 	bl	8002b86 <MPU_update_all_dma>
 8002512:	4603      	mov	r3, r0
 8002514:	2b01      	cmp	r3, #1
 8002516:	d00a      	beq.n	800252e <GYRO_ACC_update_dma+0x2e>
 8002518:	2b02      	cmp	r3, #2
 800251a:	d001      	beq.n	8002520 <GYRO_ACC_update_dma+0x20>
 800251c:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 800251e:	e007      	b.n	8002530 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 8002520:	2000      	movs	r0, #0
 8002522:	f7ff f97d 	bl	8001820 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8002526:	2004      	movs	r0, #4
 8002528:	f7ff f97a 	bl	8001820 <EVENT_Clean_flag>
			break;
 800252c:	e000      	b.n	8002530 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 800252e:	bf00      	nop
	}
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	gyro->filtered[GYRO_AXE_X] =  FILTER_process(&gyro->filters[GYRO_AXE_X], gyro->raw[GYRO_AXE_X]);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0214 	add.w	r2, r3, #20
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	eeb0 0a67 	vmov.f32	s0, s15
 8002552:	4610      	mov	r0, r2
 8002554:	f005 feed 	bl	8008332 <FILTER_process>
 8002558:	eef0 7a40 	vmov.f32	s15, s0
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[GYRO_AXE_Y] =  FILTER_process(&gyro->filters[GYRO_AXE_Y], gyro->raw[GYRO_AXE_Y]);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	3304      	adds	r3, #4
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	eeb0 0a67 	vmov.f32	s0, s15
 8002576:	4610      	mov	r0, r2
 8002578:	f005 fedb 	bl	8008332 <FILTER_process>
 800257c:	eef0 7a40 	vmov.f32	s15, s0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[GYRO_AXE_Z] =  FILTER_process(&gyro->filters[GYRO_AXE_Z], gyro->raw[GYRO_AXE_Z]);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	3308      	adds	r3, #8
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eeb0 0a67 	vmov.f32	s0, s15
 800259a:	4610      	mov	r0, r2
 800259c:	f005 fec9 	bl	8008332 <FILTER_process>
 80025a0:	eef0 7a40 	vmov.f32	s15, s0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	edc3 7a04 	vstr	s15, [r3, #16]
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 80025aa:	2003      	movs	r0, #3
 80025ac:	f7ff f91e 	bl	80017ec <EVENT_Set_flag>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <gyro_data_callback>:

static void gyro_data_callback(void){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 80025bc:	2002      	movs	r0, #2
 80025be:	f7ff f915 	bl	80017ec <EVENT_Set_flag>
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <convert_gyro>:
static void MPU_cs_lock(mpu_t * mpu);
static void MPU_cs_unlock(mpu_t * mpu);


//Private functions def
static void convert_gyro(mpu_t * mpu){
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	3301      	adds	r3, #1
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b21a      	sxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	4313      	orrs	r3, r2
 80025e4:	b21a      	sxth	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	3303      	adds	r3, #3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	3302      	adds	r3, #2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21a      	sxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	3305      	adds	r3, #5
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21a      	sxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	3304      	adds	r3, #4
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b21b      	sxth	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b21a      	sxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800262c:	ee07 3a90 	vmov	s15, r3
 8002630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800263a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <convert_acc>:
static void convert_acc(mpu_t * mpu){
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	3301      	adds	r3, #1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b21a      	sxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	3303      	adds	r3, #3
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	b21a      	sxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	3302      	adds	r3, #2
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b21b      	sxth	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	3305      	adds	r3, #5
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	b21a      	sxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	3304      	adds	r3, #4
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b21b      	sxth	r3, r3
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6898      	ldr	r0, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	899b      	ldrh	r3, [r3, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	4619      	mov	r1, r3
 800276c:	f002 fe02 	bl	8005374 <HAL_GPIO_WritePin>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	899b      	ldrh	r3, [r3, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	4619      	mov	r1, r3
 800278c:	f002 fdf2 	bl	8005374 <HAL_GPIO_WritePin>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <MPU_init>:

/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	807b      	strh	r3, [r7, #2]

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2201      	movs	r2, #1
 80027aa:	73da      	strb	r2, [r3, #15]

	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f103 021a 	add.w	r2, r3, #26
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f103 0212 	add.w	r2, r3, #18
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	; 0x44


	//Requiert un I2C ou SPI pour fonctionner
	if(hspi == NULL)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <MPU_init+0x32>
		return SENSOR_REQUEST_FAIL ;
 80027c6:	2302      	movs	r3, #2
 80027c8:	e040      	b.n	800284c <MPU_init+0xb4>

	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	22d0      	movs	r2, #208	; 0xd0
 80027e0:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <MPU_init+0xbc>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <MPU_init+0xc0>)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MPU_init+0xbc>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	b2d1      	uxtb	r1, r2
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <MPU_init+0xbc>)
 80027fa:	7011      	strb	r1, [r2, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <MPU_init+0xc4>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x00} ;
 8002806:	236b      	movs	r3, #107	; 0x6b
 8002808:	753b      	strb	r3, [r7, #20]
 800280a:	2300      	movs	r3, #0
 800280c:	757b      	strb	r3, [r7, #21]

	MPU_cs_lock(mpu);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff ffa2 	bl	8002758 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6858      	ldr	r0, [r3, #4]
 8002818:	f107 0114 	add.w	r1, r7, #20
 800281c:	2302      	movs	r3, #2
 800281e:	2202      	movs	r2, #2
 8002820:	f003 fb9a 	bl	8005f58 <HAL_SPI_Transmit>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ffa3 	bl	8002778 <MPU_cs_unlock>

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	7b9b      	ldrb	r3, [r3, #14]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <MPU_init+0xac>
		mpu->state = SENSOR_ERROR ;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2204      	movs	r2, #4
 800283e:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8002840:	2302      	movs	r3, #2
 8002842:	e003      	b.n	800284c <MPU_init+0xb4>
	}

	mpu->state = SENSOR_IDDLE ;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000d80 	.word	0x20000d80
 8002858:	20000d7c 	.word	0x20000d7c
 800285c:	20000d78 	.word	0x20000d78

08002860 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	460b      	mov	r3, r1
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	7afa      	ldrb	r2, [r7, #11]
 8002872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	7bdb      	ldrb	r3, [r3, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 8002884:	2302      	movs	r3, #2
 8002886:	e08e      	b.n	80029a6 <MPU_init_gyro+0x146>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8002888:	239b      	movs	r3, #155	; 0x9b
 800288a:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff ff63 	bl	8002758 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6858      	ldr	r0, [r3, #4]
 8002896:	f107 0214 	add.w	r2, r7, #20
 800289a:	f107 0114 	add.w	r1, r7, #20
 800289e:	2302      	movs	r3, #2
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2302      	movs	r3, #2
 80028a4:	f003 fc8c 	bl	80061c0 <HAL_SPI_TransmitReceive>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff ff61 	bl	8002778 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	7b9b      	ldrb	r3, [r3, #14]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d122      	bne.n	8002904 <MPU_init_gyro+0xa4>
		HAL_Delay(1);
 80028be:	2001      	movs	r0, #1
 80028c0:	f001 fcba 	bl	8004238 <HAL_Delay>
		MPU_cs_lock(mpu);
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7ff ff47 	bl	8002758 <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 80028ca:	231b      	movs	r3, #27
 80028cc:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 80028ce:	7d7b      	ldrb	r3, [r7, #21]
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	f023 0318 	bic.w	r3, r3, #24
 80028d6:	b25a      	sxtb	r2, r3
 80028d8:	7afb      	ldrb	r3, [r7, #11]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6858      	ldr	r0, [r3, #4]
 80028ea:	f107 0114 	add.w	r1, r7, #20
 80028ee:	2302      	movs	r3, #2
 80028f0:	2202      	movs	r2, #2
 80028f2:	f003 fb31 	bl	8005f58 <HAL_SPI_Transmit>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f7ff ff3a 	bl	8002778 <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	7b9b      	ldrb	r3, [r3, #14]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d124      	bne.n	8002956 <MPU_init_gyro+0xf6>
		uint8_t temp2 = temp[1];
 800290c:	7d7b      	ldrb	r3, [r7, #21]
 800290e:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8002910:	239b      	movs	r3, #155	; 0x9b
 8002912:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8002914:	2001      	movs	r0, #1
 8002916:	f001 fc8f 	bl	8004238 <HAL_Delay>
		MPU_cs_lock(mpu);
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff ff1c 	bl	8002758 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6858      	ldr	r0, [r3, #4]
 8002924:	f107 0214 	add.w	r2, r7, #20
 8002928:	f107 0114 	add.w	r1, r7, #20
 800292c:	2302      	movs	r3, #2
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2302      	movs	r3, #2
 8002932:	f003 fc45 	bl	80061c0 <HAL_SPI_TransmitReceive>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff ff1a 	bl	8002778 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8002944:	7d7b      	ldrb	r3, [r7, #21]
 8002946:	7dfa      	ldrb	r2, [r7, #23]
 8002948:	429a      	cmp	r2, r3
 800294a:	d004      	beq.n	8002956 <MPU_init_gyro+0xf6>
		{
			mpu->state = SENSOR_ERROR ;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2204      	movs	r2, #4
 8002950:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8002952:	2302      	movs	r3, #2
 8002954:	e027      	b.n	80029a6 <MPU_init_gyro+0x146>

	}



	if(mpu->hal_state != HAL_OK)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	7b9b      	ldrb	r3, [r3, #14]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d004      	beq.n	8002968 <MPU_init_gyro+0x108>
	{
		mpu->state = SENSOR_ERROR ;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2204      	movs	r2, #4
 8002962:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8002964:	2302      	movs	r3, #2
 8002966:	e01e      	b.n	80029a6 <MPU_init_gyro+0x146>
	}

	switch(gyro_range){
 8002968:	7afb      	ldrb	r3, [r7, #11]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d81a      	bhi.n	80029a4 <MPU_init_gyro+0x144>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <MPU_init_gyro+0x114>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002985 	.word	0x08002985
 8002978:	0800298d 	.word	0x0800298d
 800297c:	08002995 	.word	0x08002995
 8002980:	0800299d 	.word	0x0800299d
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <MPU_init_gyro+0x150>)
 8002988:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800298a:	e00b      	b.n	80029a4 <MPU_init_gyro+0x144>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <MPU_init_gyro+0x154>)
 8002990:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002992:	e007      	b.n	80029a4 <MPU_init_gyro+0x144>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <MPU_init_gyro+0x158>)
 8002998:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800299a:	e003      	b.n	80029a4 <MPU_init_gyro+0x144>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <MPU_init_gyro+0x15c>)
 80029a0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80029a2:	bf00      	nop
	}
	return SENSOR_REQUEST_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	3bfa232d 	.word	0x3bfa232d
 80029b4:	3c7a232d 	.word	0x3c7a232d
 80029b8:	3cf9c190 	.word	0x3cf9c190
 80029bc:	3d79c190 	.word	0x3d79c190

080029c0 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	460b      	mov	r3, r1
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	7afa      	ldrb	r2, [r7, #11]
 80029d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	7bdb      	ldrb	r3, [r3, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 80029e4:	2302      	movs	r3, #2
 80029e6:	e08a      	b.n	8002afe <MPU_init_acc+0x13e>


	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 80029e8:	239c      	movs	r3, #156	; 0x9c
 80029ea:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff feb3 	bl	8002758 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6858      	ldr	r0, [r3, #4]
 80029f6:	f107 0214 	add.w	r2, r7, #20
 80029fa:	f107 0114 	add.w	r1, r7, #20
 80029fe:	2302      	movs	r3, #2
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2302      	movs	r3, #2
 8002a04:	f003 fbdc 	bl	80061c0 <HAL_SPI_TransmitReceive>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff feb1 	bl	8002778 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	7b9b      	ldrb	r3, [r3, #14]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d122      	bne.n	8002a64 <MPU_init_acc+0xa4>
		HAL_Delay(1);
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f001 fc0a 	bl	8004238 <HAL_Delay>
		MPU_cs_lock(mpu);
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f7ff fe97 	bl	8002758 <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 8002a2a:	231c      	movs	r3, #28
 8002a2c:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 8002a2e:	7d7b      	ldrb	r3, [r7, #21]
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	f023 0318 	bic.w	r3, r3, #24
 8002a36:	b25a      	sxtb	r2, r3
 8002a38:	7afb      	ldrb	r3, [r7, #11]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6858      	ldr	r0, [r3, #4]
 8002a4a:	f107 0114 	add.w	r1, r7, #20
 8002a4e:	2302      	movs	r3, #2
 8002a50:	2202      	movs	r2, #2
 8002a52:	f003 fa81 	bl	8005f58 <HAL_SPI_Transmit>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff fe8a 	bl	8002778 <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	7b9b      	ldrb	r3, [r3, #14]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d124      	bne.n	8002ab6 <MPU_init_acc+0xf6>
		uint8_t temp2 = temp[1];
 8002a6c:	7d7b      	ldrb	r3, [r7, #21]
 8002a6e:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8002a70:	239c      	movs	r3, #156	; 0x9c
 8002a72:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f001 fbdf 	bl	8004238 <HAL_Delay>
		MPU_cs_lock(mpu);
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f7ff fe6c 	bl	8002758 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6858      	ldr	r0, [r3, #4]
 8002a84:	f107 0214 	add.w	r2, r7, #20
 8002a88:	f107 0114 	add.w	r1, r7, #20
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2302      	movs	r3, #2
 8002a92:	f003 fb95 	bl	80061c0 <HAL_SPI_TransmitReceive>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff fe6a 	bl	8002778 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8002aa4:	7d7b      	ldrb	r3, [r7, #21]
 8002aa6:	7dfa      	ldrb	r2, [r7, #23]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d004      	beq.n	8002ab6 <MPU_init_acc+0xf6>
		{
			mpu->state = SENSOR_ERROR ;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e023      	b.n	8002afe <MPU_init_acc+0x13e>
		}
	}



	switch(acc_range){
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d81f      	bhi.n	8002afc <MPU_init_acc+0x13c>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <MPU_init_acc+0x104>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002adf 	.word	0x08002adf
 8002acc:	08002ae9 	.word	0x08002ae9
 8002ad0:	08002af3 	.word	0x08002af3
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8002adc:	e00e      	b.n	8002afc <MPU_init_acc+0x13c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8002ae6:	e009      	b.n	8002afc <MPU_init_acc+0x13c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002aee:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8002af0:	e004      	b.n	8002afc <MPU_init_acc+0x13c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002af8:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8002afa:	bf00      	nop
	}
	return SENSOR_REQUEST_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop

08002b08 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7bdb      	ldrb	r3, [r3, #15]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e030      	b.n	8002b7e <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 8002b1c:	23bb      	movs	r3, #187	; 0xbb
 8002b1e:	723b      	strb	r3, [r7, #8]
 8002b20:	2300      	movs	r3, #0
 8002b22:	727b      	strb	r3, [r7, #9]
 8002b24:	2300      	movs	r3, #0
 8002b26:	72bb      	strb	r3, [r7, #10]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	72fb      	strb	r3, [r7, #11]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	733b      	strb	r3, [r7, #12]
 8002b30:	2300      	movs	r3, #0
 8002b32:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff fe0f 	bl	8002758 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6858      	ldr	r0, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b42:	f107 0108 	add.w	r1, r7, #8
 8002b46:	2302      	movs	r3, #2
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	f003 fb38 	bl	80061c0 <HAL_SPI_TransmitReceive>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fe0d 	bl	8002778 <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7b9b      	ldrb	r3, [r3, #14]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d101      	bne.n	8002b6a <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e009      	b.n	8002b7e <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7b9b      	ldrb	r3, [r3, #14]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 8002b72:	2302      	movs	r3, #2
 8002b74:	e003      	b.n	8002b7e <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fd88 	bl	800268c <convert_acc>
	return SENSOR_REQUEST_OK ;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b086      	sub	sp, #24
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 8002b9c:	23bb      	movs	r3, #187	; 0xbb
 8002b9e:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fdd9 	bl	8002758 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6858      	ldr	r0, [r3, #4]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f103 0212 	add.w	r2, r3, #18
 8002bb0:	f107 0108 	add.w	r1, r7, #8
 8002bb4:	230e      	movs	r3, #14
 8002bb6:	f003 fca5 	bl	8006504 <HAL_SPI_TransmitReceive_DMA>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7b9b      	ldrb	r3, [r3, #14]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d107      	bne.n	8002bda <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2203      	movs	r2, #3
 8002bce:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e009      	b.n	8002bee <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7b9b      	ldrb	r3, [r3, #14]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d101      	bne.n	8002be6 <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e003      	b.n	8002bee <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8002bec:	2302      	movs	r3, #2
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fdba 	bl	8002778 <MPU_cs_unlock>


	switch(mpu->dma_state){
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7c1b      	ldrb	r3, [r3, #16]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d00b      	beq.n	8002c24 <MPU_dma_transmit_complete+0x2e>
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d010      	beq.n	8002c32 <MPU_dma_transmit_complete+0x3c>
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d000      	beq.n	8002c16 <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 8002c14:	e014      	b.n	8002c40 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fcd5 	bl	80025c6 <convert_gyro>
			mpu->gyro_data_callback();
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4798      	blx	r3
			break;
 8002c22:	e00d      	b.n	8002c40 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fd31 	bl	800268c <convert_acc>
			mpu->acc_data_callback();
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2e:	4798      	blx	r3
			break;
 8002c30:	e006      	b.n	8002c40 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff fcc7 	bl	80025c6 <convert_gyro>
			mpu->gyro_data_callback();
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4798      	blx	r3
			break;
 8002c3e:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	741a      	strb	r2, [r3, #16]
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7c1b      	ldrb	r3, [r3, #16]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d105      	bne.n	8002c6a <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff fd14 	bl	800268c <convert_acc>
		mpu->acc_data_callback();
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c68:	4798      	blx	r3
	}
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_SPI_TxRxCpltCallback+0x24>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d104      	bne.n	8002c90 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_SPI_TxRxCpltCallback+0x28>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ffb3 	bl	8002bf6 <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000d78 	.word	0x20000d78
 8002c9c:	20000d7c 	.word	0x20000d7c

08002ca0 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d104      	bne.n	8002cbc <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ffc9 	bl	8002c4e <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000d78 	.word	0x20000d78
 8002cc8:	20000d7c 	.word	0x20000d7c

08002ccc <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002cde:	4b21      	ldr	r3, [pc, #132]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002ce0:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <MX_ADC2_Init+0x9c>)
 8002ce2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002ce6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d06:	4b17      	ldr	r3, [pc, #92]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d0c:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d0e:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <MX_ADC2_Init+0xa0>)
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002d2c:	480d      	ldr	r0, [pc, #52]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d2e:	f001 faa5 	bl	800427c <HAL_ADC_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002d38:	f000 fb8a 	bl	8003450 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002d3c:	230b      	movs	r3, #11
 8002d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d40:	2301      	movs	r3, #1
 8002d42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002d48:	463b      	mov	r3, r7
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <MX_ADC2_Init+0x98>)
 8002d4e:	f001 fad9 	bl	8004304 <HAL_ADC_ConfigChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002d58:	f000 fb7a 	bl	8003450 <Error_Handler>
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000d94 	.word	0x20000d94
 8002d68:	40012100 	.word	0x40012100
 8002d6c:	0f000001 	.word	0x0f000001

08002d70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a3c      	ldr	r2, [pc, #240]	; (8002e80 <HAL_ADC_MspInit+0x110>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d171      	bne.n	8002e76 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a3a      	ldr	r2, [pc, #232]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b38      	ldr	r3, [pc, #224]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a33      	ldr	r2, [pc, #204]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	4b2d      	ldr	r3, [pc, #180]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a2c      	ldr	r2, [pc, #176]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <HAL_ADC_MspInit+0x114>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8002de6:	2302      	movs	r3, #2
 8002de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dea:	2303      	movs	r3, #3
 8002dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8002df2:	f107 0314 	add.w	r3, r7, #20
 8002df6:	4619      	mov	r1, r3
 8002df8:	4823      	ldr	r0, [pc, #140]	; (8002e88 <HAL_ADC_MspInit+0x118>)
 8002dfa:	f002 f921 	bl	8005040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e02:	2303      	movs	r3, #3
 8002e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	481e      	ldr	r0, [pc, #120]	; (8002e8c <HAL_ADC_MspInit+0x11c>)
 8002e12:	f002 f915 	bl	8005040 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8002e16:	4b1e      	ldr	r3, [pc, #120]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e18:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <HAL_ADC_MspInit+0x124>)
 8002e1a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002e1c:	4b1c      	ldr	r3, [pc, #112]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e22:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e36:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e38:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e3e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e46:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e54:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002e5a:	480d      	ldr	r0, [pc, #52]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e5c:	f001 fd82 	bl	8004964 <HAL_DMA_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002e66:	f000 faf3 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <HAL_ADC_MspInit+0x120>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002e76:	bf00      	nop
 8002e78:	3728      	adds	r7, #40	; 0x28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40012100 	.word	0x40012100
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020800 	.word	0x40020800
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	20000ddc 	.word	0x20000ddc
 8002e94:	40026440 	.word	0x40026440

08002e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	4b3b      	ldr	r3, [pc, #236]	; (8002f90 <MX_DMA_Init+0xf8>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a3a      	ldr	r2, [pc, #232]	; (8002f90 <MX_DMA_Init+0xf8>)
 8002ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <MX_DMA_Init+0xf8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb6:	607b      	str	r3, [r7, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <MX_DMA_Init+0xf8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a33      	ldr	r2, [pc, #204]	; (8002f90 <MX_DMA_Init+0xf8>)
 8002ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <MX_DMA_Init+0xf8>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	200b      	movs	r0, #11
 8002edc:	f001 fd0b 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002ee0:	200b      	movs	r0, #11
 8002ee2:	f001 fd24 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	200c      	movs	r0, #12
 8002eec:	f001 fd03 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ef0:	200c      	movs	r0, #12
 8002ef2:	f001 fd1c 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	200e      	movs	r0, #14
 8002efc:	f001 fcfb 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002f00:	200e      	movs	r0, #14
 8002f02:	f001 fd14 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	200f      	movs	r0, #15
 8002f0c:	f001 fcf3 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002f10:	200f      	movs	r0, #15
 8002f12:	f001 fd0c 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2010      	movs	r0, #16
 8002f1c:	f001 fceb 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f20:	2010      	movs	r0, #16
 8002f22:	f001 fd04 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2100      	movs	r1, #0
 8002f2a:	202f      	movs	r0, #47	; 0x2f
 8002f2c:	f001 fce3 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002f30:	202f      	movs	r0, #47	; 0x2f
 8002f32:	f001 fcfc 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f36:	2200      	movs	r2, #0
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2038      	movs	r0, #56	; 0x38
 8002f3c:	f001 fcdb 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002f40:	2038      	movs	r0, #56	; 0x38
 8002f42:	f001 fcf4 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2039      	movs	r0, #57	; 0x39
 8002f4c:	f001 fcd3 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f50:	2039      	movs	r0, #57	; 0x39
 8002f52:	f001 fcec 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	203a      	movs	r0, #58	; 0x3a
 8002f5c:	f001 fccb 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002f60:	203a      	movs	r0, #58	; 0x3a
 8002f62:	f001 fce4 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	203b      	movs	r0, #59	; 0x3b
 8002f6c:	f001 fcc3 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002f70:	203b      	movs	r0, #59	; 0x3b
 8002f72:	f001 fcdc 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	2045      	movs	r0, #69	; 0x45
 8002f7c:	f001 fcbb 	bl	80048f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002f80:	2045      	movs	r0, #69	; 0x45
 8002f82:	f001 fcd4 	bl	800492e <HAL_NVIC_EnableIRQ>

}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a43      	ldr	r2, [pc, #268]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a3c      	ldr	r2, [pc, #240]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <MX_GPIO_Init+0x12c>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 800301a:	2200      	movs	r2, #0
 800301c:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8003020:	4828      	ldr	r0, [pc, #160]	; (80030c4 <MX_GPIO_Init+0x130>)
 8003022:	f002 f9a7 	bl	8005374 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8003026:	2201      	movs	r2, #1
 8003028:	2101      	movs	r1, #1
 800302a:	4826      	ldr	r0, [pc, #152]	; (80030c4 <MX_GPIO_Init+0x130>)
 800302c:	f002 f9a2 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8003030:	2200      	movs	r2, #0
 8003032:	2101      	movs	r1, #1
 8003034:	4824      	ldr	r0, [pc, #144]	; (80030c8 <MX_GPIO_Init+0x134>)
 8003036:	f002 f99d 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 800303a:	2200      	movs	r2, #0
 800303c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003040:	4822      	ldr	r0, [pc, #136]	; (80030cc <MX_GPIO_Init+0x138>)
 8003042:	f002 f997 	bl	8005374 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8003046:	f24e 231d 	movw	r3, #57885	; 0xe21d
 800304a:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4619      	mov	r1, r3
 800305e:	4819      	ldr	r0, [pc, #100]	; (80030c4 <MX_GPIO_Init+0x130>)
 8003060:	f001 ffee 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8003064:	2301      	movs	r3, #1
 8003066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003068:	2301      	movs	r3, #1
 800306a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	4813      	ldr	r0, [pc, #76]	; (80030c8 <MX_GPIO_Init+0x134>)
 800307c:	f001 ffe0 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8003080:	2302      	movs	r3, #2
 8003082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4619      	mov	r1, r3
 8003092:	480d      	ldr	r0, [pc, #52]	; (80030c8 <MX_GPIO_Init+0x134>)
 8003094:	f001 ffd4 	bl	8005040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8003098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800309c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309e:	2301      	movs	r3, #1
 80030a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	2300      	movs	r3, #0
 80030a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	4619      	mov	r1, r3
 80030b0:	4806      	ldr	r0, [pc, #24]	; (80030cc <MX_GPIO_Init+0x138>)
 80030b2:	f001 ffc5 	bl	8005040 <HAL_GPIO_Init>

}
 80030b6:	bf00      	nop
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400

080030d0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <MX_I2C1_Init+0x50>)
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <MX_I2C1_Init+0x54>)
 80030d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <MX_I2C1_Init+0x50>)
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <MX_I2C1_Init+0x58>)
 80030de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <MX_I2C1_Init+0x50>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_I2C1_Init+0x50>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <MX_I2C1_Init+0x50>)
 80030ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <MX_I2C1_Init+0x50>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <MX_I2C1_Init+0x50>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <MX_I2C1_Init+0x50>)
 8003102:	2200      	movs	r2, #0
 8003104:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_I2C1_Init+0x50>)
 8003108:	2200      	movs	r2, #0
 800310a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800310c:	4804      	ldr	r0, [pc, #16]	; (8003120 <MX_I2C1_Init+0x50>)
 800310e:	f002 f94b 	bl	80053a8 <HAL_I2C_Init>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003118:	f000 f99a 	bl	8003450 <Error_Handler>
  }

}
 800311c:	bf00      	nop
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000e9c 	.word	0x20000e9c
 8003124:	40005400 	.word	0x40005400
 8003128:	00061a80 	.word	0x00061a80

0800312c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a47      	ldr	r2, [pc, #284]	; (8003268 <HAL_I2C_MspInit+0x13c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f040 8088 	bne.w	8003260 <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	4b45      	ldr	r3, [pc, #276]	; (800326c <HAL_I2C_MspInit+0x140>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	4a44      	ldr	r2, [pc, #272]	; (800326c <HAL_I2C_MspInit+0x140>)
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	6313      	str	r3, [r2, #48]	; 0x30
 8003160:	4b42      	ldr	r3, [pc, #264]	; (800326c <HAL_I2C_MspInit+0x140>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800316c:	23c0      	movs	r3, #192	; 0xc0
 800316e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003170:	2312      	movs	r3, #18
 8003172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003174:	2301      	movs	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2303      	movs	r3, #3
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800317c:	2304      	movs	r3, #4
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4619      	mov	r1, r3
 8003186:	483a      	ldr	r0, [pc, #232]	; (8003270 <HAL_I2C_MspInit+0x144>)
 8003188:	f001 ff5a 	bl	8005040 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	4b36      	ldr	r3, [pc, #216]	; (800326c <HAL_I2C_MspInit+0x140>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	4a35      	ldr	r2, [pc, #212]	; (800326c <HAL_I2C_MspInit+0x140>)
 8003196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800319a:	6413      	str	r3, [r2, #64]	; 0x40
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <HAL_I2C_MspInit+0x140>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80031a8:	4b32      	ldr	r3, [pc, #200]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031aa:	4a33      	ldr	r2, [pc, #204]	; (8003278 <HAL_I2C_MspInit+0x14c>)
 80031ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031b4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031d8:	2200      	movs	r2, #0
 80031da:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031dc:	4b25      	ldr	r3, [pc, #148]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031de:	2200      	movs	r2, #0
 80031e0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80031e8:	4822      	ldr	r0, [pc, #136]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031ea:	f001 fbbb 	bl	8004964 <HAL_DMA_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80031f4:	f000 f92c 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_I2C_MspInit+0x148>)
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_I2C_MspInit+0x148>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003206:	4a1e      	ldr	r2, [pc, #120]	; (8003280 <HAL_I2C_MspInit+0x154>)
 8003208:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <HAL_I2C_MspInit+0x150>)
 800320c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003210:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003214:	2240      	movs	r2, #64	; 0x40
 8003216:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_I2C_MspInit+0x150>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003224:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_I2C_MspInit+0x150>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003238:	4b10      	ldr	r3, [pc, #64]	; (800327c <HAL_I2C_MspInit+0x150>)
 800323a:	2200      	movs	r2, #0
 800323c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003240:	2200      	movs	r2, #0
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003244:	480d      	ldr	r0, [pc, #52]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003246:	f001 fb8d 	bl	8004964 <HAL_DMA_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8003250:	f000 f8fe 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_I2C_MspInit+0x150>)
 8003258:	635a      	str	r2, [r3, #52]	; 0x34
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_I2C_MspInit+0x150>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003260:	bf00      	nop
 8003262:	3728      	adds	r7, #40	; 0x28
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40005400 	.word	0x40005400
 800326c:	40023800 	.word	0x40023800
 8003270:	40020400 	.word	0x40020400
 8003274:	20000ef0 	.word	0x20000ef0
 8003278:	40026010 	.word	0x40026010
 800327c:	20000e3c 	.word	0x20000e3c
 8003280:	400260b8 	.word	0x400260b8

08003284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800328a:	f000 ff63 	bl	8004154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800328e:	f000 f875 	bl	800337c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003292:	f7ff fe7f 	bl	8002f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8003296:	f7ff fdff 	bl	8002e98 <MX_DMA_Init>
  MX_I2C1_Init();
 800329a:	f7ff ff19 	bl	80030d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800329e:	f000 f8df 	bl	8003460 <MX_SPI1_Init>
  MX_SPI2_Init();
 80032a2:	f000 f913 	bl	80034cc <MX_SPI2_Init>
  MX_TIM1_Init();
 80032a6:	f000 fba7 	bl	80039f8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80032aa:	f000 fd2b 	bl	8003d04 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80032ae:	f000 fd53 	bl	8003d58 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80032b2:	f000 fd7b 	bl	8003dac <MX_USART6_UART_Init>
  MX_ADC2_Init();
 80032b6:	f7ff fd09 	bl	8002ccc <MX_ADC2_Init>
  MX_TIM2_Init();
 80032ba:	f000 fc61 	bl	8003b80 <MX_TIM2_Init>

  //Init du baromètre
  //MS5611_init(&sys.sensors.ms5611, &hi2c1);

  //Init du GYRO et de l ACC en utilisant un MPU
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 80032be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c2:	4a23      	ldr	r2, [pc, #140]	; (8003350 <main+0xcc>)
 80032c4:	4923      	ldr	r1, [pc, #140]	; (8003354 <main+0xd0>)
 80032c6:	4824      	ldr	r0, [pc, #144]	; (8003358 <main+0xd4>)
 80032c8:	f7ff fa66 	bl	8002798 <MPU_init>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 80032cc:	4922      	ldr	r1, [pc, #136]	; (8003358 <main+0xd4>)
 80032ce:	4823      	ldr	r0, [pc, #140]	; (800335c <main+0xd8>)
 80032d0:	f7ff f8d4 	bl	800247c <GYRO_init>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 80032d4:	4920      	ldr	r1, [pc, #128]	; (8003358 <main+0xd4>)
 80032d6:	4822      	ldr	r0, [pc, #136]	; (8003360 <main+0xdc>)
 80032d8:	f7ff f828 	bl	800232c <ACC_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_LOOP_FREQUENCY);
 80032dc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80032e0:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <main+0xdc>)
 80032e2:	491e      	ldr	r1, [pc, #120]	; (800335c <main+0xd8>)
 80032e4:	481f      	ldr	r0, [pc, #124]	; (8003364 <main+0xe0>)
 80032e6:	f7fd feab 	bl	8001040 <ORIENTATION_Init>

  LED_SEQUENCE_init(&sys.ihm.led_blue, PIN_LED_BLUE_GPIO_Port, PIN_LED_BLUE_Pin, SEQUENCE_LED_5, 1, 12, 1);
 80032ea:	2301      	movs	r3, #1
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	230c      	movs	r3, #12
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2301      	movs	r3, #1
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80032fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032fe:	491a      	ldr	r1, [pc, #104]	; (8003368 <main+0xe4>)
 8003300:	481a      	ldr	r0, [pc, #104]	; (800336c <main+0xe8>)
 8003302:	f005 f87d 	bl	8008400 <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_red, PIN_LED_RED_GPIO_Port, PIN_LED_RED_Pin, SEQUENCE_LED_OFF, 200, 12, 1);
 8003306:	2301      	movs	r3, #1
 8003308:	9302      	str	r3, [sp, #8]
 800330a:	230c      	movs	r3, #12
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	23c8      	movs	r3, #200	; 0xc8
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2300      	movs	r3, #0
 8003314:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003318:	4913      	ldr	r1, [pc, #76]	; (8003368 <main+0xe4>)
 800331a:	4815      	ldr	r0, [pc, #84]	; (8003370 <main+0xec>)
 800331c:	f005 f870 	bl	8008400 <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_green, PIN_LED_GREEN_GPIO_Port, PIN_LED_GREEN_Pin, SEQUENCE_LED_OFF, 200, 12, 1);
 8003320:	2301      	movs	r3, #1
 8003322:	9302      	str	r3, [sp, #8]
 8003324:	230c      	movs	r3, #12
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	23c8      	movs	r3, #200	; 0xc8
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2300      	movs	r3, #0
 800332e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003332:	490d      	ldr	r1, [pc, #52]	; (8003368 <main+0xe4>)
 8003334:	480f      	ldr	r0, [pc, #60]	; (8003374 <main+0xf0>)
 8003336:	f005 f863 	bl	8008400 <LED_SEQUENCE_init>

  SCHEDULER_init(&sys);
 800333a:	480d      	ldr	r0, [pc, #52]	; (8003370 <main+0xec>)
 800333c:	f7fe fc32 	bl	8001ba4 <SCHEDULER_init>
  EVENT_init(&sys, &htim2);
 8003340:	490d      	ldr	r1, [pc, #52]	; (8003378 <main+0xf4>)
 8003342:	480b      	ldr	r0, [pc, #44]	; (8003370 <main+0xec>)
 8003344:	f7fe faa0 	bl	8001888 <EVENT_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 8003348:	f7fe fc3e 	bl	8001bc8 <SCHEDULER_run>
 800334c:	e7fc      	b.n	8003348 <main+0xc4>
 800334e:	bf00      	nop
 8003350:	40020400 	.word	0x40020400
 8003354:	20001138 	.word	0x20001138
 8003358:	20001074 	.word	0x20001074
 800335c:	20000fa4 	.word	0x20000fa4
 8003360:	2000100c 	.word	0x2000100c
 8003364:	20001104 	.word	0x20001104
 8003368:	40020800 	.word	0x40020800
 800336c:	20000f88 	.word	0x20000f88
 8003370:	20000f50 	.word	0x20000f50
 8003374:	20000f6c 	.word	0x20000f6c
 8003378:	200013a8 	.word	0x200013a8

0800337c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b094      	sub	sp, #80	; 0x50
 8003380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	2230      	movs	r2, #48	; 0x30
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f005 f8fd 	bl	800858a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003390:	f107 030c 	add.w	r3, r7, #12
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <SystemClock_Config+0xcc>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	4a27      	ldr	r2, [pc, #156]	; (8003448 <SystemClock_Config+0xcc>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6413      	str	r3, [r2, #64]	; 0x40
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <SystemClock_Config+0xcc>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033bc:	2300      	movs	r3, #0
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	4b22      	ldr	r3, [pc, #136]	; (800344c <SystemClock_Config+0xd0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a21      	ldr	r2, [pc, #132]	; (800344c <SystemClock_Config+0xd0>)
 80033c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <SystemClock_Config+0xd0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033d8:	2302      	movs	r3, #2
 80033da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033dc:	2301      	movs	r3, #1
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033e0:	2310      	movs	r3, #16
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e4:	2302      	movs	r3, #2
 80033e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033e8:	2300      	movs	r3, #0
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033ec:	2308      	movs	r3, #8
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80033f0:	23a8      	movs	r3, #168	; 0xa8
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033f4:	2302      	movs	r3, #2
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033f8:	2304      	movs	r3, #4
 80033fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033fc:	f107 0320 	add.w	r3, r7, #32
 8003400:	4618      	mov	r0, r3
 8003402:	f002 f909 	bl	8005618 <HAL_RCC_OscConfig>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800340c:	f000 f820 	bl	8003450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003410:	230f      	movs	r3, #15
 8003412:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003414:	2302      	movs	r3, #2
 8003416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800341c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003426:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	2105      	movs	r1, #5
 800342e:	4618      	mov	r0, r3
 8003430:	f002 fb62 	bl	8005af8 <HAL_RCC_ClockConfig>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800343a:	f000 f809 	bl	8003450 <Error_Handler>
  }
}
 800343e:	bf00      	nop
 8003440:	3750      	adds	r7, #80	; 0x50
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40007000 	.word	0x40007000

08003450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003464:	4b17      	ldr	r3, [pc, #92]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <MX_SPI1_Init+0x68>)
 8003468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <MX_SPI1_Init+0x64>)
 800346c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003472:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003474:	2200      	movs	r2, #0
 8003476:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <MX_SPI1_Init+0x64>)
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003480:	2200      	movs	r2, #0
 8003482:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003486:	2200      	movs	r2, #0
 8003488:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800348a:	4b0e      	ldr	r3, [pc, #56]	; (80034c4 <MX_SPI1_Init+0x64>)
 800348c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003490:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <MX_SPI1_Init+0x64>)
 8003494:	2220      	movs	r2, #32
 8003496:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <MX_SPI1_Init+0x64>)
 800349a:	2200      	movs	r2, #0
 800349c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a4:	4b07      	ldr	r3, [pc, #28]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034ac:	220a      	movs	r2, #10
 80034ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034b0:	4804      	ldr	r0, [pc, #16]	; (80034c4 <MX_SPI1_Init+0x64>)
 80034b2:	f002 fced 	bl	8005e90 <HAL_SPI_Init>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80034bc:	f7ff ffc8 	bl	8003450 <Error_Handler>
  }

}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200011f0 	.word	0x200011f0
 80034c8:	40013000 	.word	0x40013000

080034cc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <MX_SPI2_Init+0x64>)
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <MX_SPI2_Init+0x68>)
 80034d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034d6:	4b16      	ldr	r3, [pc, #88]	; (8003530 <MX_SPI2_Init+0x64>)
 80034d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034de:	4b14      	ldr	r3, [pc, #80]	; (8003530 <MX_SPI2_Init+0x64>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <MX_SPI2_Init+0x64>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ea:	4b11      	ldr	r3, [pc, #68]	; (8003530 <MX_SPI2_Init+0x64>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <MX_SPI2_Init+0x64>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <MX_SPI2_Init+0x64>)
 80034f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <MX_SPI2_Init+0x64>)
 8003500:	2208      	movs	r2, #8
 8003502:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <MX_SPI2_Init+0x64>)
 8003506:	2200      	movs	r2, #0
 8003508:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800350a:	4b09      	ldr	r3, [pc, #36]	; (8003530 <MX_SPI2_Init+0x64>)
 800350c:	2200      	movs	r2, #0
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <MX_SPI2_Init+0x64>)
 8003512:	2200      	movs	r2, #0
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <MX_SPI2_Init+0x64>)
 8003518:	220a      	movs	r2, #10
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800351c:	4804      	ldr	r0, [pc, #16]	; (8003530 <MX_SPI2_Init+0x64>)
 800351e:	f002 fcb7 	bl	8005e90 <HAL_SPI_Init>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003528:	f7ff ff92 	bl	8003450 <Error_Handler>
  }

}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20001138 	.word	0x20001138
 8003534:	40003800 	.word	0x40003800

08003538 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	; 0x30
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a8e      	ldr	r2, [pc, #568]	; (8003790 <HAL_SPI_MspInit+0x258>)
 8003556:	4293      	cmp	r3, r2
 8003558:	f040 8089 	bne.w	800366e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	4a8b      	ldr	r2, [pc, #556]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 8003566:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800356a:	6453      	str	r3, [r2, #68]	; 0x44
 800356c:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	4b85      	ldr	r3, [pc, #532]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	4a84      	ldr	r2, [pc, #528]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6313      	str	r3, [r2, #48]	; 0x30
 8003588:	4b82      	ldr	r3, [pc, #520]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003594:	23e0      	movs	r3, #224	; 0xe0
 8003596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035a4:	2305      	movs	r3, #5
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a8:	f107 031c 	add.w	r3, r7, #28
 80035ac:	4619      	mov	r1, r3
 80035ae:	487a      	ldr	r0, [pc, #488]	; (8003798 <HAL_SPI_MspInit+0x260>)
 80035b0:	f001 fd46 	bl	8005040 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80035b4:	4b79      	ldr	r3, [pc, #484]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035b6:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_SPI_MspInit+0x268>)
 80035b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80035ba:	4b78      	ldr	r3, [pc, #480]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80035c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035c2:	4b76      	ldr	r3, [pc, #472]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035c8:	4b74      	ldr	r3, [pc, #464]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ce:	4b73      	ldr	r3, [pc, #460]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035d6:	4b71      	ldr	r3, [pc, #452]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035d8:	2200      	movs	r2, #0
 80035da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035dc:	4b6f      	ldr	r3, [pc, #444]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035de:	2200      	movs	r2, #0
 80035e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80035e2:	4b6e      	ldr	r3, [pc, #440]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035e8:	4b6c      	ldr	r3, [pc, #432]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ee:	4b6b      	ldr	r3, [pc, #428]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80035f4:	4869      	ldr	r0, [pc, #420]	; (800379c <HAL_SPI_MspInit+0x264>)
 80035f6:	f001 f9b5 	bl	8004964 <HAL_DMA_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003600:	f7ff ff26 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_SPI_MspInit+0x264>)
 8003608:	64da      	str	r2, [r3, #76]	; 0x4c
 800360a:	4a64      	ldr	r2, [pc, #400]	; (800379c <HAL_SPI_MspInit+0x264>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003610:	4b64      	ldr	r3, [pc, #400]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003612:	4a65      	ldr	r2, [pc, #404]	; (80037a8 <HAL_SPI_MspInit+0x270>)
 8003614:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003618:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800361c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800361e:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003624:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800362a:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 800362c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003630:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003632:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003634:	2200      	movs	r2, #0
 8003636:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003638:	4b5a      	ldr	r3, [pc, #360]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 800363a:	2200      	movs	r2, #0
 800363c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003640:	2200      	movs	r2, #0
 8003642:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003644:	4b57      	ldr	r3, [pc, #348]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003646:	2200      	movs	r2, #0
 8003648:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 800364c:	2200      	movs	r2, #0
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003650:	4854      	ldr	r0, [pc, #336]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003652:	f001 f987 	bl	8004964 <HAL_DMA_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800365c:	f7ff fef8 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a50      	ldr	r2, [pc, #320]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003664:	649a      	str	r2, [r3, #72]	; 0x48
 8003666:	4a4f      	ldr	r2, [pc, #316]	; (80037a4 <HAL_SPI_MspInit+0x26c>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800366c:	e08c      	b.n	8003788 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <HAL_SPI_MspInit+0x274>)
 8003674:	4293      	cmp	r3, r2
 8003676:	f040 8087 	bne.w	8003788 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	4b45      	ldr	r3, [pc, #276]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a44      	ldr	r2, [pc, #272]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b42      	ldr	r3, [pc, #264]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	4a3d      	ldr	r2, [pc, #244]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 80036a0:	f043 0302 	orr.w	r3, r3, #2
 80036a4:	6313      	str	r3, [r2, #48]	; 0x30
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_SPI_MspInit+0x25c>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80036b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c0:	2303      	movs	r3, #3
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036c4:	2305      	movs	r3, #5
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c8:	f107 031c 	add.w	r3, r7, #28
 80036cc:	4619      	mov	r1, r3
 80036ce:	4838      	ldr	r0, [pc, #224]	; (80037b0 <HAL_SPI_MspInit+0x278>)
 80036d0:	f001 fcb6 	bl	8005040 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80036d4:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 80036d6:	4a38      	ldr	r2, [pc, #224]	; (80037b8 <HAL_SPI_MspInit+0x280>)
 80036d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80036da:	4b36      	ldr	r3, [pc, #216]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e0:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e6:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ec:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 80036ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036f2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036f4:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003700:	4b2c      	ldr	r3, [pc, #176]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003706:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 8003708:	2200      	movs	r2, #0
 800370a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800370c:	4b29      	ldr	r3, [pc, #164]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 800370e:	2200      	movs	r2, #0
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003712:	4828      	ldr	r0, [pc, #160]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 8003714:	f001 f926 	bl	8004964 <HAL_DMA_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 800371e:	f7ff fe97 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 8003726:	64da      	str	r2, [r3, #76]	; 0x4c
 8003728:	4a22      	ldr	r2, [pc, #136]	; (80037b4 <HAL_SPI_MspInit+0x27c>)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800372e:	4b23      	ldr	r3, [pc, #140]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_SPI_MspInit+0x288>)
 8003732:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_SPI_MspInit+0x284>)
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003740:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003748:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800374c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003750:	2200      	movs	r2, #0
 8003752:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_SPI_MspInit+0x284>)
 800375c:	2200      	movs	r2, #0
 800375e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003762:	2200      	movs	r2, #0
 8003764:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003768:	2200      	movs	r2, #0
 800376a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800376c:	4813      	ldr	r0, [pc, #76]	; (80037bc <HAL_SPI_MspInit+0x284>)
 800376e:	f001 f8f9 	bl	8004964 <HAL_DMA_Init>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8003778:	f7ff fe6a 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003780:	649a      	str	r2, [r3, #72]	; 0x48
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_SPI_MspInit+0x284>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003788:	bf00      	nop
 800378a:	3730      	adds	r7, #48	; 0x30
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40013000 	.word	0x40013000
 8003794:	40023800 	.word	0x40023800
 8003798:	40020000 	.word	0x40020000
 800379c:	20001248 	.word	0x20001248
 80037a0:	40026410 	.word	0x40026410
 80037a4:	20001308 	.word	0x20001308
 80037a8:	40026458 	.word	0x40026458
 80037ac:	40003800 	.word	0x40003800
 80037b0:	40020400 	.word	0x40020400
 80037b4:	20001190 	.word	0x20001190
 80037b8:	40026058 	.word	0x40026058
 80037bc:	200012a8 	.word	0x200012a8
 80037c0:	40026070 	.word	0x40026070

080037c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_MspInit+0x4c>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <HAL_MspInit+0x4c>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d8:	6453      	str	r3, [r2, #68]	; 0x44
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <HAL_MspInit+0x4c>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_MspInit+0x4c>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a08      	ldr	r2, [pc, #32]	; (8003810 <HAL_MspInit+0x4c>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_MspInit+0x4c>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40023800 	.word	0x40023800

08003814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003826:	e7fe      	b.n	8003826 <HardFault_Handler+0x4>

08003828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800382c:	e7fe      	b.n	800382c <MemManage_Handler+0x4>

0800382e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003832:	e7fe      	b.n	8003832 <BusFault_Handler+0x4>

08003834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003838:	e7fe      	b.n	8003838 <UsageFault_Handler+0x4>

0800383a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800384c:	bf00      	nop
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003856:	b480      	push	{r7}
 8003858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003868:	f000 fcc6 	bl	80041f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <DMA1_Stream0_IRQHandler+0x10>)
 8003876:	f001 f97b 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000ef0 	.word	0x20000ef0

08003884 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <DMA1_Stream1_IRQHandler+0x10>)
 800388a:	f001 f971 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200014a8 	.word	0x200014a8

08003898 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <DMA1_Stream3_IRQHandler+0x10>)
 800389e:	f001 f967 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20001190 	.word	0x20001190

080038ac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80038b0:	4802      	ldr	r0, [pc, #8]	; (80038bc <DMA1_Stream4_IRQHandler+0x10>)
 80038b2:	f001 f95d 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200012a8 	.word	0x200012a8

080038c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80038c4:	4802      	ldr	r0, [pc, #8]	; (80038d0 <DMA1_Stream5_IRQHandler+0x10>)
 80038c6:	f001 f953 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200013e8 	.word	0x200013e8

080038d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038d8:	4802      	ldr	r0, [pc, #8]	; (80038e4 <TIM2_IRQHandler+0x10>)
 80038da:	f003 f9a1 	bl	8006c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200013a8 	.word	0x200013a8

080038e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <DMA1_Stream7_IRQHandler+0x10>)
 80038ee:	f001 f93f 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000e3c 	.word	0x20000e3c

080038fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003900:	4802      	ldr	r0, [pc, #8]	; (800390c <DMA2_Stream0_IRQHandler+0x10>)
 8003902:	f001 f935 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003906:	bf00      	nop
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20001248 	.word	0x20001248

08003910 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003914:	4802      	ldr	r0, [pc, #8]	; (8003920 <DMA2_Stream1_IRQHandler+0x10>)
 8003916:	f001 f92b 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20001448 	.word	0x20001448

08003924 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003928:	4802      	ldr	r0, [pc, #8]	; (8003934 <DMA2_Stream2_IRQHandler+0x10>)
 800392a:	f001 f921 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000ddc 	.word	0x20000ddc

08003938 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800393c:	4802      	ldr	r0, [pc, #8]	; (8003948 <DMA2_Stream3_IRQHandler+0x10>)
 800393e:	f001 f917 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003942:	bf00      	nop
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20001308 	.word	0x20001308

0800394c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003950:	4802      	ldr	r0, [pc, #8]	; (800395c <DMA2_Stream6_IRQHandler+0x10>)
 8003952:	f001 f90d 	bl	8004b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20001548 	.word	0x20001548

08003960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <_sbrk+0x5c>)
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <_sbrk+0x60>)
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003974:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <_sbrk+0x64>)
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <_sbrk+0x68>)
 8003980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <_sbrk+0x64>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4413      	add	r3, r2
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	429a      	cmp	r2, r3
 800398e:	d207      	bcs.n	80039a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003990:	f004 fdb8 	bl	8008504 <__errno>
 8003994:	4602      	mov	r2, r0
 8003996:	230c      	movs	r3, #12
 8003998:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	e009      	b.n	80039b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <_sbrk+0x64>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039a6:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <_sbrk+0x64>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4413      	add	r3, r2
 80039ae:	4a05      	ldr	r2, [pc, #20]	; (80039c4 <_sbrk+0x64>)
 80039b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039b2:	68fb      	ldr	r3, [r7, #12]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20020000 	.word	0x20020000
 80039c0:	00000400 	.word	0x00000400
 80039c4:	20000d84 	.word	0x20000d84
 80039c8:	20001630 	.word	0x20001630

080039cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <SystemInit+0x28>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	4a07      	ldr	r2, [pc, #28]	; (80039f4 <SystemInit+0x28>)
 80039d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <SystemInit+0x28>)
 80039e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039e6:	609a      	str	r2, [r3, #8]
#endif
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b096      	sub	sp, #88	; 0x58
 80039fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	615a      	str	r2, [r3, #20]
 8003a28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a2a:	1d3b      	adds	r3, r7, #4
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f004 fdaa 	bl	800858a <memset>

  htim1.Instance = TIM1;
 8003a36:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a38:	4a50      	ldr	r2, [pc, #320]	; (8003b7c <MX_TIM1_Init+0x184>)
 8003a3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003a3c:	4b4e      	ldr	r3, [pc, #312]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a42:	4b4d      	ldr	r3, [pc, #308]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a48:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a50:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a56:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a5c:	4b46      	ldr	r3, [pc, #280]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a62:	4845      	ldr	r0, [pc, #276]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a64:	f003 f858 	bl	8006b18 <HAL_TIM_Base_Init>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a6e:	f7ff fcef 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	483e      	ldr	r0, [pc, #248]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a80:	f003 fa36 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003a8a:	f7ff fce1 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003a8e:	483a      	ldr	r0, [pc, #232]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003a90:	f003 f891 	bl	8006bb6 <HAL_TIM_OC_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003a9a:	f7ff fcd9 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4832      	ldr	r0, [pc, #200]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003aae:	f003 fde9 	bl	8007684 <HAL_TIMEx_MasterConfigSynchronization>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003ab8:	f7ff fcca 	bl	8003450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003adc:	2200      	movs	r2, #0
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4825      	ldr	r0, [pc, #148]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003ae2:	f003 f9a5 	bl	8006e30 <HAL_TIM_OC_ConfigChannel>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003aec:	f7ff fcb0 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af4:	2204      	movs	r2, #4
 8003af6:	4619      	mov	r1, r3
 8003af8:	481f      	ldr	r0, [pc, #124]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003afa:	f003 f999 	bl	8006e30 <HAL_TIM_OC_ConfigChannel>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003b04:	f7ff fca4 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4819      	ldr	r0, [pc, #100]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003b12:	f003 f98d 	bl	8006e30 <HAL_TIM_OC_ConfigChannel>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003b1c:	f7ff fc98 	bl	8003450 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b24:	220c      	movs	r2, #12
 8003b26:	4619      	mov	r1, r3
 8003b28:	4813      	ldr	r0, [pc, #76]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003b2a:	f003 f981 	bl	8006e30 <HAL_TIM_OC_ConfigChannel>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003b34:	f7ff fc8c 	bl	8003450 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4807      	ldr	r0, [pc, #28]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003b5c:	f003 fe0e 	bl	800777c <HAL_TIMEx_ConfigBreakDeadTime>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8003b66:	f7ff fc73 	bl	8003450 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003b6a:	4803      	ldr	r0, [pc, #12]	; (8003b78 <MX_TIM1_Init+0x180>)
 8003b6c:	f000 f890 	bl	8003c90 <HAL_TIM_MspPostInit>

}
 8003b70:	bf00      	nop
 8003b72:	3758      	adds	r7, #88	; 0x58
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20001368 	.word	0x20001368
 8003b7c:	40010000 	.word	0x40010000

08003b80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b86:	f107 0308 	add.w	r3, r7, #8
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b94:	463b      	mov	r3, r7
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003ba6:	22a7      	movs	r2, #167	; 0xa7
 8003ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 8003bb0:	4b18      	ldr	r3, [pc, #96]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb6:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bbc:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003bc2:	4814      	ldr	r0, [pc, #80]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003bc4:	f002 ffa8 	bl	8006b18 <HAL_TIM_Base_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003bce:	f7ff fc3f 	bl	8003450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480d      	ldr	r0, [pc, #52]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003be0:	f003 f986 	bl	8006ef0 <HAL_TIM_ConfigClockSource>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003bea:	f7ff fc31 	bl	8003450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4806      	ldr	r0, [pc, #24]	; (8003c14 <MX_TIM2_Init+0x94>)
 8003bfc:	f003 fd42 	bl	8007684 <HAL_TIMEx_MasterConfigSynchronization>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003c06:	f7ff fc23 	bl	8003450 <Error_Handler>
  }

}
 8003c0a:	bf00      	nop
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200013a8 	.word	0x200013a8

08003c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_TIM_Base_MspInit+0x70>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10e      	bne.n	8003c48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <HAL_TIM_Base_MspInit+0x74>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_TIM_Base_MspInit+0x74>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <HAL_TIM_Base_MspInit+0x74>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003c46:	e01a      	b.n	8003c7e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d115      	bne.n	8003c7e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <HAL_TIM_Base_MspInit+0x74>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <HAL_TIM_Base_MspInit+0x74>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <HAL_TIM_Base_MspInit+0x74>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	201c      	movs	r0, #28
 8003c74:	f000 fe3f 	bl	80048f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c78:	201c      	movs	r0, #28
 8003c7a:	f000 fe58 	bl	800492e <HAL_NVIC_EnableIRQ>
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40023800 	.word	0x40023800

08003c90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <HAL_TIM_MspPostInit+0x68>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d11e      	bne.n	8003cf0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <HAL_TIM_MspPostInit+0x6c>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_TIM_MspPostInit+0x6c>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_TIM_MspPostInit+0x6c>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003cce:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <HAL_TIM_MspPostInit+0x70>)
 8003cec:	f001 f9a8 	bl	8005040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003cf0:	bf00      	nop
 8003cf2:	3720      	adds	r7, #32
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40020000 	.word	0x40020000

08003d04 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <MX_USART2_UART_Init+0x50>)
 8003d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d16:	4b0e      	ldr	r3, [pc, #56]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d28:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d2a:	220c      	movs	r2, #12
 8003d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d2e:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d3a:	4805      	ldr	r0, [pc, #20]	; (8003d50 <MX_USART2_UART_Init+0x4c>)
 8003d3c:	f003 fd84 	bl	8007848 <HAL_UART_Init>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d46:	f7ff fb83 	bl	8003450 <Error_Handler>
  }

}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200015e8 	.word	0x200015e8
 8003d54:	40004400 	.word	0x40004400

08003d58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003d5c:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d5e:	4a12      	ldr	r2, [pc, #72]	; (8003da8 <MX_USART3_UART_Init+0x50>)
 8003d60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d6a:	4b0e      	ldr	r3, [pc, #56]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d70:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d76:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d7e:	220c      	movs	r2, #12
 8003d80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d82:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d8e:	4805      	ldr	r0, [pc, #20]	; (8003da4 <MX_USART3_UART_Init+0x4c>)
 8003d90:	f003 fd5a 	bl	8007848 <HAL_UART_Init>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003d9a:	f7ff fb59 	bl	8003450 <Error_Handler>
  }

}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20001508 	.word	0x20001508
 8003da8:	40004800 	.word	0x40004800

08003dac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003db2:	4a12      	ldr	r2, [pc, #72]	; (8003dfc <MX_USART6_UART_Init+0x50>)
 8003db4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003db8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8003dbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003dbe:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd6:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003de2:	4805      	ldr	r0, [pc, #20]	; (8003df8 <MX_USART6_UART_Init+0x4c>)
 8003de4:	f003 fd30 	bl	8007848 <HAL_UART_Init>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003dee:	f7ff fb2f 	bl	8003450 <Error_Handler>
  }

}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200015a8 	.word	0x200015a8
 8003dfc:	40011400 	.word	0x40011400

08003e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08e      	sub	sp, #56	; 0x38
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5f      	ldr	r2, [pc, #380]	; (8003f9c <HAL_UART_MspInit+0x19c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d15a      	bne.n	8003ed8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	4b5e      	ldr	r3, [pc, #376]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a5d      	ldr	r2, [pc, #372]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	623b      	str	r3, [r7, #32]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	4b57      	ldr	r3, [pc, #348]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b54      	ldr	r3, [pc, #336]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e66:	2303      	movs	r3, #3
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e6a:	2307      	movs	r3, #7
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e72:	4619      	mov	r1, r3
 8003e74:	484b      	ldr	r0, [pc, #300]	; (8003fa4 <HAL_UART_MspInit+0x1a4>)
 8003e76:	f001 f8e3 	bl	8005040 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003e7c:	4a4b      	ldr	r2, [pc, #300]	; (8003fac <HAL_UART_MspInit+0x1ac>)
 8003e7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e80:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e86:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e88:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8e:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e94:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e9c:	4b42      	ldr	r3, [pc, #264]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ea8:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eb4:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003eba:	483b      	ldr	r0, [pc, #236]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003ebc:	f000 fd52 	bl	8004964 <HAL_DMA_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003ec6:	f7ff fac3 	bl	8003450 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a36      	ldr	r2, [pc, #216]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003ece:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed0:	4a35      	ldr	r2, [pc, #212]	; (8003fa8 <HAL_UART_MspInit+0x1a8>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003ed6:	e101      	b.n	80040dc <HAL_UART_MspInit+0x2dc>
  else if(uartHandle->Instance==USART3)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <HAL_UART_MspInit+0x1b0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d16e      	bne.n	8003fc0 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003f08:	f043 0302 	orr.w	r3, r3, #2
 8003f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_UART_MspInit+0x1a0>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f20:	2302      	movs	r3, #2
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f2c:	2307      	movs	r3, #7
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f34:	4619      	mov	r1, r3
 8003f36:	481f      	ldr	r0, [pc, #124]	; (8003fb4 <HAL_UART_MspInit+0x1b4>)
 8003f38:	f001 f882 	bl	8005040 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <HAL_UART_MspInit+0x1bc>)
 8003f40:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003f42:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f48:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f56:	4b18      	ldr	r3, [pc, #96]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f64:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f70:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f7e:	480e      	ldr	r0, [pc, #56]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f80:	f000 fcf0 	bl	8004964 <HAL_DMA_Init>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8003f8a:	f7ff fa61 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <HAL_UART_MspInit+0x1b8>)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f9a:	e09f      	b.n	80040dc <HAL_UART_MspInit+0x2dc>
 8003f9c:	40004400 	.word	0x40004400
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40020000 	.word	0x40020000
 8003fa8:	200013e8 	.word	0x200013e8
 8003fac:	40026088 	.word	0x40026088
 8003fb0:	40004800 	.word	0x40004800
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	200014a8 	.word	0x200014a8
 8003fbc:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a47      	ldr	r2, [pc, #284]	; (80040e4 <HAL_UART_MspInit+0x2e4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f040 8088 	bne.w	80040dc <HAL_UART_MspInit+0x2dc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <HAL_UART_MspInit+0x2e8>)
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	4a44      	ldr	r2, [pc, #272]	; (80040e8 <HAL_UART_MspInit+0x2e8>)
 8003fd6:	f043 0320 	orr.w	r3, r3, #32
 8003fda:	6453      	str	r3, [r2, #68]	; 0x44
 8003fdc:	4b42      	ldr	r3, [pc, #264]	; (80040e8 <HAL_UART_MspInit+0x2e8>)
 8003fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_UART_MspInit+0x2e8>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	4a3d      	ldr	r2, [pc, #244]	; (80040e8 <HAL_UART_MspInit+0x2e8>)
 8003ff2:	f043 0304 	orr.w	r3, r3, #4
 8003ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff8:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_UART_MspInit+0x2e8>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004004:	23c0      	movs	r3, #192	; 0xc0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004008:	2302      	movs	r3, #2
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004014:	2308      	movs	r3, #8
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401c:	4619      	mov	r1, r3
 800401e:	4833      	ldr	r0, [pc, #204]	; (80040ec <HAL_UART_MspInit+0x2ec>)
 8004020:	f001 f80e 	bl	8005040 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8004024:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004026:	4a33      	ldr	r2, [pc, #204]	; (80040f4 <HAL_UART_MspInit+0x2f4>)
 8004028:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800402a:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 800402c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004030:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004034:	2240      	movs	r2, #64	; 0x40
 8004036:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004038:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800403e:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004044:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004046:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004048:	2200      	movs	r2, #0
 800404a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800404c:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 800404e:	2200      	movs	r2, #0
 8004050:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004054:	2200      	movs	r2, #0
 8004056:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 800405a:	2200      	movs	r2, #0
 800405c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004060:	2200      	movs	r2, #0
 8004062:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8004064:	4822      	ldr	r0, [pc, #136]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004066:	f000 fc7d 	bl	8004964 <HAL_DMA_Init>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8004070:	f7ff f9ee 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
 800407a:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_UART_MspInit+0x2f0>)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 8004082:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <HAL_UART_MspInit+0x2fc>)
 8004084:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004086:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 8004088:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800408c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800408e:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 8004096:	2200      	movs	r2, #0
 8004098:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800409a:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 800409c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040a0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040b4:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040bc:	2200      	movs	r2, #0
 80040be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80040c0:	480d      	ldr	r0, [pc, #52]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040c2:	f000 fc4f 	bl	8004964 <HAL_DMA_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 80040cc:	f7ff f9c0 	bl	8003450 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a09      	ldr	r2, [pc, #36]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34
 80040d6:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <HAL_UART_MspInit+0x2f8>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6393      	str	r3, [r2, #56]	; 0x38
}
 80040dc:	bf00      	nop
 80040de:	3738      	adds	r7, #56	; 0x38
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40011400 	.word	0x40011400
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020800 	.word	0x40020800
 80040f0:	20001548 	.word	0x20001548
 80040f4:	400264a0 	.word	0x400264a0
 80040f8:	20001448 	.word	0x20001448
 80040fc:	40026428 	.word	0x40026428

08004100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004138 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004104:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004106:	e003      	b.n	8004110 <LoopCopyDataInit>

08004108 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800410a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800410c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800410e:	3104      	adds	r1, #4

08004110 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004114:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004116:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004118:	d3f6      	bcc.n	8004108 <CopyDataInit>
  ldr  r2, =_sbss
 800411a:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800411c:	e002      	b.n	8004124 <LoopFillZerobss>

0800411e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800411e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004120:	f842 3b04 	str.w	r3, [r2], #4

08004124 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004126:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004128:	d3f9      	bcc.n	800411e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800412a:	f7ff fc4f 	bl	80039cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800412e:	f004 f9ef 	bl	8008510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004132:	f7ff f8a7 	bl	8003284 <main>
  bx  lr    
 8004136:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004138:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800413c:	0800b484 	.word	0x0800b484
  ldr  r0, =_sdata
 8004140:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004144:	20000cd0 	.word	0x20000cd0
  ldr  r2, =_sbss
 8004148:	20000cd0 	.word	0x20000cd0
  ldr  r3, = _ebss
 800414c:	20001630 	.word	0x20001630

08004150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004150:	e7fe      	b.n	8004150 <ADC_IRQHandler>
	...

08004154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <HAL_Init+0x40>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0d      	ldr	r2, [pc, #52]	; (8004194 <HAL_Init+0x40>)
 800415e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_Init+0x40>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <HAL_Init+0x40>)
 800416a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004170:	4b08      	ldr	r3, [pc, #32]	; (8004194 <HAL_Init+0x40>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a07      	ldr	r2, [pc, #28]	; (8004194 <HAL_Init+0x40>)
 8004176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800417c:	2003      	movs	r0, #3
 800417e:	f000 fbaf 	bl	80048e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004182:	2000      	movs	r0, #0
 8004184:	f000 f808 	bl	8004198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004188:	f7ff fb1c 	bl	80037c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40023c00 	.word	0x40023c00

08004198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041a0:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_InitTick+0x54>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_InitTick+0x58>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	4619      	mov	r1, r3
 80041aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80041b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fbc7 	bl	800494a <HAL_SYSTICK_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e00e      	b.n	80041e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b0f      	cmp	r3, #15
 80041ca:	d80a      	bhi.n	80041e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041cc:	2200      	movs	r2, #0
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	f04f 30ff 	mov.w	r0, #4294967295
 80041d4:	f000 fb8f 	bl	80048f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041d8:	4a06      	ldr	r2, [pc, #24]	; (80041f4 <HAL_InitTick+0x5c>)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000af0 	.word	0x20000af0
 80041f0:	20000af8 	.word	0x20000af8
 80041f4:	20000af4 	.word	0x20000af4

080041f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_IncTick+0x20>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	4b06      	ldr	r3, [pc, #24]	; (800421c <HAL_IncTick+0x24>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4413      	add	r3, r2
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <HAL_IncTick+0x24>)
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000af8 	.word	0x20000af8
 800421c:	20001628 	.word	0x20001628

08004220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return uwTick;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_GetTick+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20001628 	.word	0x20001628

08004238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7ff ffee 	bl	8004220 <HAL_GetTick>
 8004244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d005      	beq.n	800425e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004252:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_Delay+0x40>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800425e:	bf00      	nop
 8004260:	f7ff ffde 	bl	8004220 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	429a      	cmp	r2, r3
 800426e:	d8f7      	bhi.n	8004260 <HAL_Delay+0x28>
  {
  }
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000af8 	.word	0x20000af8

0800427c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e033      	b.n	80042fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe fd68 	bl	8002d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042c2:	f023 0302 	bic.w	r3, r3, #2
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f93a 	bl	8004548 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
 80042ea:	e001      	b.n	80042f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1c>
 800431c:	2302      	movs	r3, #2
 800431e:	e105      	b.n	800452c <HAL_ADC_ConfigChannel+0x228>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b09      	cmp	r3, #9
 800432e:	d925      	bls.n	800437c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	3b1e      	subs	r3, #30
 8004346:	2207      	movs	r2, #7
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43da      	mvns	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	400a      	ands	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68d9      	ldr	r1, [r3, #12]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	4618      	mov	r0, r3
 8004368:	4603      	mov	r3, r0
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4403      	add	r3, r0
 800436e:	3b1e      	subs	r3, #30
 8004370:	409a      	lsls	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	e022      	b.n	80043c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	2207      	movs	r2, #7
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	400a      	ands	r2, r1
 800439e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4618      	mov	r0, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4403      	add	r3, r0
 80043b8:	409a      	lsls	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d824      	bhi.n	8004414 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	3b05      	subs	r3, #5
 80043dc:	221f      	movs	r2, #31
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	400a      	ands	r2, r1
 80043ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4618      	mov	r0, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b05      	subs	r3, #5
 8004406:	fa00 f203 	lsl.w	r2, r0, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	635a      	str	r2, [r3, #52]	; 0x34
 8004412:	e04c      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d824      	bhi.n	8004466 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	3b23      	subs	r3, #35	; 0x23
 800442e:	221f      	movs	r2, #31
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43da      	mvns	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	400a      	ands	r2, r1
 800443c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	4618      	mov	r0, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	3b23      	subs	r3, #35	; 0x23
 8004458:	fa00 f203 	lsl.w	r2, r0, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
 8004464:	e023      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	3b41      	subs	r3, #65	; 0x41
 8004478:	221f      	movs	r2, #31
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	400a      	ands	r2, r1
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	4618      	mov	r0, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	3b41      	subs	r3, #65	; 0x41
 80044a2:	fa00 f203 	lsl.w	r2, r0, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ae:	4b22      	ldr	r3, [pc, #136]	; (8004538 <HAL_ADC_ConfigChannel+0x234>)
 80044b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <HAL_ADC_ConfigChannel+0x238>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d109      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1cc>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b12      	cmp	r3, #18
 80044c2:	d105      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_ADC_ConfigChannel+0x238>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d123      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x21e>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d003      	beq.n	80044ea <HAL_ADC_ConfigChannel+0x1e6>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b11      	cmp	r3, #17
 80044e8:	d11b      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d111      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_ADC_ConfigChannel+0x23c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <HAL_ADC_ConfigChannel+0x240>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	0c9a      	lsrs	r2, r3, #18
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004514:	e002      	b.n	800451c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	3b01      	subs	r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f9      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40012300 	.word	0x40012300
 800453c:	40012000 	.word	0x40012000
 8004540:	20000af0 	.word	0x20000af0
 8004544:	431bde83 	.word	0x431bde83

08004548 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004550:	4b79      	ldr	r3, [pc, #484]	; (8004738 <ADC_Init+0x1f0>)
 8004552:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800457c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	021a      	lsls	r2, r3, #8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6899      	ldr	r1, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	4a58      	ldr	r2, [pc, #352]	; (800473c <ADC_Init+0x1f4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d022      	beq.n	8004626 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	e00f      	b.n	8004646 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004644:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0202 	bic.w	r2, r2, #2
 8004654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6899      	ldr	r1, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7e1b      	ldrb	r3, [r3, #24]
 8004660:	005a      	lsls	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004682:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004692:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	3b01      	subs	r3, #1
 80046a0:	035a      	lsls	r2, r3, #13
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
 80046aa:	e007      	b.n	80046bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	051a      	lsls	r2, r3, #20
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046fe:	025a      	lsls	r2, r3, #9
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6899      	ldr	r1, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	029a      	lsls	r2, r3, #10
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	40012300 	.word	0x40012300
 800473c:	0f000001 	.word	0x0f000001

08004740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800475c:	4013      	ands	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800476c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004772:	4a04      	ldr	r2, [pc, #16]	; (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	60d3      	str	r3, [r2, #12]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800478c:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <__NVIC_GetPriorityGrouping+0x18>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	f003 0307 	and.w	r3, r3, #7
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	db0b      	blt.n	80047ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	f003 021f 	and.w	r2, r3, #31
 80047bc:	4907      	ldr	r1, [pc, #28]	; (80047dc <__NVIC_EnableIRQ+0x38>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2001      	movs	r0, #1
 80047c6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000e100 	.word	0xe000e100

080047e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	6039      	str	r1, [r7, #0]
 80047ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	db0a      	blt.n	800480a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	490c      	ldr	r1, [pc, #48]	; (800482c <__NVIC_SetPriority+0x4c>)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	0112      	lsls	r2, r2, #4
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	440b      	add	r3, r1
 8004804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004808:	e00a      	b.n	8004820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	4908      	ldr	r1, [pc, #32]	; (8004830 <__NVIC_SetPriority+0x50>)
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	3b04      	subs	r3, #4
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	440b      	add	r3, r1
 800481e:	761a      	strb	r2, [r3, #24]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000e100 	.word	0xe000e100
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f1c3 0307 	rsb	r3, r3, #7
 800484e:	2b04      	cmp	r3, #4
 8004850:	bf28      	it	cs
 8004852:	2304      	movcs	r3, #4
 8004854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3304      	adds	r3, #4
 800485a:	2b06      	cmp	r3, #6
 800485c:	d902      	bls.n	8004864 <NVIC_EncodePriority+0x30>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3b03      	subs	r3, #3
 8004862:	e000      	b.n	8004866 <NVIC_EncodePriority+0x32>
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004868:	f04f 32ff 	mov.w	r2, #4294967295
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43da      	mvns	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	401a      	ands	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800487c:	f04f 31ff 	mov.w	r1, #4294967295
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	43d9      	mvns	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	4313      	orrs	r3, r2
         );
}
 800488e:	4618      	mov	r0, r3
 8004890:	3724      	adds	r7, #36	; 0x24
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ac:	d301      	bcc.n	80048b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ae:	2301      	movs	r3, #1
 80048b0:	e00f      	b.n	80048d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048b2:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <SysTick_Config+0x40>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ba:	210f      	movs	r1, #15
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	f7ff ff8e 	bl	80047e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <SysTick_Config+0x40>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ca:	4b04      	ldr	r3, [pc, #16]	; (80048dc <SysTick_Config+0x40>)
 80048cc:	2207      	movs	r2, #7
 80048ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	e000e010 	.word	0xe000e010

080048e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff29 	bl	8004740 <__NVIC_SetPriorityGrouping>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b086      	sub	sp, #24
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	4603      	mov	r3, r0
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004908:	f7ff ff3e 	bl	8004788 <__NVIC_GetPriorityGrouping>
 800490c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	6978      	ldr	r0, [r7, #20]
 8004914:	f7ff ff8e 	bl	8004834 <NVIC_EncodePriority>
 8004918:	4602      	mov	r2, r0
 800491a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff5d 	bl	80047e0 <__NVIC_SetPriority>
}
 8004926:	bf00      	nop
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	4603      	mov	r3, r0
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff31 	bl	80047a4 <__NVIC_EnableIRQ>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ffa2 	bl	800489c <SysTick_Config>
 8004958:	4603      	mov	r3, r0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004970:	f7ff fc56 	bl	8004220 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e099      	b.n	8004ab4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a0:	e00f      	b.n	80049c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a2:	f7ff fc3d 	bl	8004220 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b05      	cmp	r3, #5
 80049ae:	d908      	bls.n	80049c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2203      	movs	r2, #3
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e078      	b.n	8004ab4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e8      	bne.n	80049a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_DMA_Init+0x158>)
 80049dc:	4013      	ands	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d107      	bne.n	8004a2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	4313      	orrs	r3, r2
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0307 	bic.w	r3, r3, #7
 8004a42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d117      	bne.n	8004a86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00e      	beq.n	8004a86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fa6f 	bl	8004f4c <DMA_CheckFifoParam>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2240      	movs	r2, #64	; 0x40
 8004a78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a82:	2301      	movs	r3, #1
 8004a84:	e016      	b.n	8004ab4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa26 	bl	8004ee0 <DMA_CalcBaseAndBitshift>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9c:	223f      	movs	r2, #63	; 0x3f
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	f010803f 	.word	0xf010803f

08004ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_DMA_Start_IT+0x26>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e040      	b.n	8004b68 <HAL_DMA_Start_IT+0xa8>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d12f      	bne.n	8004b5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f9b8 	bl	8004e84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	223f      	movs	r2, #63	; 0x3f
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0216 	orr.w	r2, r2, #22
 8004b2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d007      	beq.n	8004b48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0208 	orr.w	r2, r2, #8
 8004b46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e005      	b.n	8004b66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
 8004b64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b7c:	4b92      	ldr	r3, [pc, #584]	; (8004dc8 <HAL_DMA_IRQHandler+0x258>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a92      	ldr	r2, [pc, #584]	; (8004dcc <HAL_DMA_IRQHandler+0x25c>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	0a9b      	lsrs	r3, r3, #10
 8004b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d01a      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d013      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	2208      	movs	r2, #8
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	f043 0201 	orr.w	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be0:	2201      	movs	r2, #1
 8004be2:	409a      	lsls	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4013      	ands	r3, r2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00b      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	2201      	movs	r2, #1
 8004c00:	409a      	lsls	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0a:	f043 0202 	orr.w	r2, r3, #2
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c16:	2204      	movs	r2, #4
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d012      	beq.n	8004c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c34:	2204      	movs	r2, #4
 8004c36:	409a      	lsls	r2, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d043      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03c      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6a:	2210      	movs	r2, #16
 8004c6c:	409a      	lsls	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d018      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d108      	bne.n	8004ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d024      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
 8004c9e:	e01f      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01b      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	4798      	blx	r3
 8004cb0:	e016      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0208 	bic.w	r2, r2, #8
 8004cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 808e 	beq.w	8004e0e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8086 	beq.w	8004e0e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d06:	2220      	movs	r2, #32
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b05      	cmp	r3, #5
 8004d18:	d136      	bne.n	8004d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0216 	bic.w	r2, r2, #22
 8004d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695a      	ldr	r2, [r3, #20]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d103      	bne.n	8004d4a <HAL_DMA_IRQHandler+0x1da>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0208 	bic.w	r2, r2, #8
 8004d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5e:	223f      	movs	r2, #63	; 0x3f
 8004d60:	409a      	lsls	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d07d      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
        }
        return;
 8004d86:	e078      	b.n	8004e7a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01c      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d108      	bne.n	8004db6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d030      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
 8004db4:	e02b      	b.n	8004e0e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d027      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	4798      	blx	r3
 8004dc6:	e022      	b.n	8004e0e <HAL_DMA_IRQHandler+0x29e>
 8004dc8:	20000af0 	.word	0x20000af0
 8004dcc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10f      	bne.n	8004dfe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0210 	bic.w	r2, r2, #16
 8004dec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d032      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d022      	beq.n	8004e68 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2205      	movs	r2, #5
 8004e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d307      	bcc.n	8004e56 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f2      	bne.n	8004e3a <HAL_DMA_IRQHandler+0x2ca>
 8004e54:	e000      	b.n	8004e58 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004e56:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	4798      	blx	r3
 8004e78:	e000      	b.n	8004e7c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004e7a:	bf00      	nop
    }
  }
}
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop

08004e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d108      	bne.n	8004ec4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ec2:	e007      	b.n	8004ed4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3b10      	subs	r3, #16
 8004ef0:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <DMA_CalcBaseAndBitshift+0x64>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004efa:	4a13      	ldr	r2, [pc, #76]	; (8004f48 <DMA_CalcBaseAndBitshift+0x68>)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d909      	bls.n	8004f22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	1d1a      	adds	r2, r3, #4
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f20:	e007      	b.n	8004f32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	aaaaaaab 	.word	0xaaaaaaab
 8004f48:	0800b1a4 	.word	0x0800b1a4

08004f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d11f      	bne.n	8004fa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d855      	bhi.n	8005018 <DMA_CheckFifoParam+0xcc>
 8004f6c:	a201      	add	r2, pc, #4	; (adr r2, 8004f74 <DMA_CheckFifoParam+0x28>)
 8004f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f72:	bf00      	nop
 8004f74:	08004f85 	.word	0x08004f85
 8004f78:	08004f97 	.word	0x08004f97
 8004f7c:	08004f85 	.word	0x08004f85
 8004f80:	08005019 	.word	0x08005019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d045      	beq.n	800501c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f94:	e042      	b.n	800501c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f9e:	d13f      	bne.n	8005020 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa4:	e03c      	b.n	8005020 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fae:	d121      	bne.n	8004ff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d836      	bhi.n	8005024 <DMA_CheckFifoParam+0xd8>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <DMA_CheckFifoParam+0x70>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fcd 	.word	0x08004fcd
 8004fc0:	08004fd3 	.word	0x08004fd3
 8004fc4:	08004fcd 	.word	0x08004fcd
 8004fc8:	08004fe5 	.word	0x08004fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd0:	e02f      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d024      	beq.n	8005028 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe2:	e021      	b.n	8005028 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fec:	d11e      	bne.n	800502c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ff2:	e01b      	b.n	800502c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d902      	bls.n	8005000 <DMA_CheckFifoParam+0xb4>
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d003      	beq.n	8005006 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ffe:	e018      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      break;
 8005004:	e015      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00e      	beq.n	8005030 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
      break;
 8005016:	e00b      	b.n	8005030 <DMA_CheckFifoParam+0xe4>
      break;
 8005018:	bf00      	nop
 800501a:	e00a      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      break;
 800501c:	bf00      	nop
 800501e:	e008      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      break;
 8005020:	bf00      	nop
 8005022:	e006      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      break;
 8005024:	bf00      	nop
 8005026:	e004      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      break;
 8005028:	bf00      	nop
 800502a:	e002      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      break;   
 800502c:	bf00      	nop
 800502e:	e000      	b.n	8005032 <DMA_CheckFifoParam+0xe6>
      break;
 8005030:	bf00      	nop
    }
  } 
  
  return status; 
 8005032:	7bfb      	ldrb	r3, [r7, #15]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005040:	b480      	push	{r7}
 8005042:	b089      	sub	sp, #36	; 0x24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800504a:	2300      	movs	r3, #0
 800504c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005056:	2300      	movs	r3, #0
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	e16b      	b.n	8005334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800505c:	2201      	movs	r2, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4013      	ands	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	429a      	cmp	r2, r3
 8005076:	f040 815a 	bne.w	800532e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d00b      	beq.n	800509a <HAL_GPIO_Init+0x5a>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d007      	beq.n	800509a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800508e:	2b11      	cmp	r3, #17
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b12      	cmp	r3, #18
 8005098:	d130      	bne.n	80050fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	2203      	movs	r2, #3
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050d0:	2201      	movs	r2, #1
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	4013      	ands	r3, r2
 80050de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 0201 	and.w	r2, r3, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	2203      	movs	r2, #3
 8005108:	fa02 f303 	lsl.w	r3, r2, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4013      	ands	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	fa02 f303 	lsl.w	r3, r2, r3
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	4313      	orrs	r3, r2
 8005124:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0xfc>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b12      	cmp	r3, #18
 800513a:	d123      	bne.n	8005184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	08da      	lsrs	r2, r3, #3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3208      	adds	r2, #8
 8005144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	220f      	movs	r2, #15
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	08da      	lsrs	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3208      	adds	r2, #8
 800517e:	69b9      	ldr	r1, [r7, #24]
 8005180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	2203      	movs	r2, #3
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4013      	ands	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 0203 	and.w	r2, r3, #3
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80b4 	beq.w	800532e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <HAL_GPIO_Init+0x308>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	4a5e      	ldr	r2, [pc, #376]	; (8005348 <HAL_GPIO_Init+0x308>)
 80051d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051d4:	6453      	str	r3, [r2, #68]	; 0x44
 80051d6:	4b5c      	ldr	r3, [pc, #368]	; (8005348 <HAL_GPIO_Init+0x308>)
 80051d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051e2:	4a5a      	ldr	r2, [pc, #360]	; (800534c <HAL_GPIO_Init+0x30c>)
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	089b      	lsrs	r3, r3, #2
 80051e8:	3302      	adds	r3, #2
 80051ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	220f      	movs	r2, #15
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a51      	ldr	r2, [pc, #324]	; (8005350 <HAL_GPIO_Init+0x310>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d02b      	beq.n	8005266 <HAL_GPIO_Init+0x226>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a50      	ldr	r2, [pc, #320]	; (8005354 <HAL_GPIO_Init+0x314>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d025      	beq.n	8005262 <HAL_GPIO_Init+0x222>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a4f      	ldr	r2, [pc, #316]	; (8005358 <HAL_GPIO_Init+0x318>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01f      	beq.n	800525e <HAL_GPIO_Init+0x21e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a4e      	ldr	r2, [pc, #312]	; (800535c <HAL_GPIO_Init+0x31c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d019      	beq.n	800525a <HAL_GPIO_Init+0x21a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a4d      	ldr	r2, [pc, #308]	; (8005360 <HAL_GPIO_Init+0x320>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <HAL_GPIO_Init+0x216>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a4c      	ldr	r2, [pc, #304]	; (8005364 <HAL_GPIO_Init+0x324>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00d      	beq.n	8005252 <HAL_GPIO_Init+0x212>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a4b      	ldr	r2, [pc, #300]	; (8005368 <HAL_GPIO_Init+0x328>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d007      	beq.n	800524e <HAL_GPIO_Init+0x20e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a4a      	ldr	r2, [pc, #296]	; (800536c <HAL_GPIO_Init+0x32c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <HAL_GPIO_Init+0x20a>
 8005246:	2307      	movs	r3, #7
 8005248:	e00e      	b.n	8005268 <HAL_GPIO_Init+0x228>
 800524a:	2308      	movs	r3, #8
 800524c:	e00c      	b.n	8005268 <HAL_GPIO_Init+0x228>
 800524e:	2306      	movs	r3, #6
 8005250:	e00a      	b.n	8005268 <HAL_GPIO_Init+0x228>
 8005252:	2305      	movs	r3, #5
 8005254:	e008      	b.n	8005268 <HAL_GPIO_Init+0x228>
 8005256:	2304      	movs	r3, #4
 8005258:	e006      	b.n	8005268 <HAL_GPIO_Init+0x228>
 800525a:	2303      	movs	r3, #3
 800525c:	e004      	b.n	8005268 <HAL_GPIO_Init+0x228>
 800525e:	2302      	movs	r3, #2
 8005260:	e002      	b.n	8005268 <HAL_GPIO_Init+0x228>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <HAL_GPIO_Init+0x228>
 8005266:	2300      	movs	r3, #0
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	f002 0203 	and.w	r2, r2, #3
 800526e:	0092      	lsls	r2, r2, #2
 8005270:	4093      	lsls	r3, r2
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	4313      	orrs	r3, r2
 8005276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005278:	4934      	ldr	r1, [pc, #208]	; (800534c <HAL_GPIO_Init+0x30c>)
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	089b      	lsrs	r3, r3, #2
 800527e:	3302      	adds	r3, #2
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005286:	4b3a      	ldr	r3, [pc, #232]	; (8005370 <HAL_GPIO_Init+0x330>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	43db      	mvns	r3, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4013      	ands	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052aa:	4a31      	ldr	r2, [pc, #196]	; (8005370 <HAL_GPIO_Init+0x330>)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <HAL_GPIO_Init+0x330>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <HAL_GPIO_Init+0x330>)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052da:	4b25      	ldr	r3, [pc, #148]	; (8005370 <HAL_GPIO_Init+0x330>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	43db      	mvns	r3, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4013      	ands	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052fe:	4a1c      	ldr	r2, [pc, #112]	; (8005370 <HAL_GPIO_Init+0x330>)
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <HAL_GPIO_Init+0x330>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	43db      	mvns	r3, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4013      	ands	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005328:	4a11      	ldr	r2, [pc, #68]	; (8005370 <HAL_GPIO_Init+0x330>)
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3301      	adds	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	f67f ae90 	bls.w	800505c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800533c:	bf00      	nop
 800533e:	3724      	adds	r7, #36	; 0x24
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40023800 	.word	0x40023800
 800534c:	40013800 	.word	0x40013800
 8005350:	40020000 	.word	0x40020000
 8005354:	40020400 	.word	0x40020400
 8005358:	40020800 	.word	0x40020800
 800535c:	40020c00 	.word	0x40020c00
 8005360:	40021000 	.word	0x40021000
 8005364:	40021400 	.word	0x40021400
 8005368:	40021800 	.word	0x40021800
 800536c:	40021c00 	.word	0x40021c00
 8005370:	40013c00 	.word	0x40013c00

08005374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	807b      	strh	r3, [r7, #2]
 8005380:	4613      	mov	r3, r2
 8005382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005384:	787b      	ldrb	r3, [r7, #1]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800538a:	887a      	ldrh	r2, [r7, #2]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005390:	e003      	b.n	800539a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005392:	887b      	ldrh	r3, [r7, #2]
 8005394:	041a      	lsls	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	619a      	str	r2, [r3, #24]
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e11f      	b.n	80055fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d106      	bne.n	80053d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7fd feac 	bl	800312c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2224      	movs	r2, #36	; 0x24
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800540a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800540c:	f000 fd18 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 8005410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4a7b      	ldr	r2, [pc, #492]	; (8005604 <HAL_I2C_Init+0x25c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d807      	bhi.n	800542c <HAL_I2C_Init+0x84>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a7a      	ldr	r2, [pc, #488]	; (8005608 <HAL_I2C_Init+0x260>)
 8005420:	4293      	cmp	r3, r2
 8005422:	bf94      	ite	ls
 8005424:	2301      	movls	r3, #1
 8005426:	2300      	movhi	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e006      	b.n	800543a <HAL_I2C_Init+0x92>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4a77      	ldr	r2, [pc, #476]	; (800560c <HAL_I2C_Init+0x264>)
 8005430:	4293      	cmp	r3, r2
 8005432:	bf94      	ite	ls
 8005434:	2301      	movls	r3, #1
 8005436:	2300      	movhi	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0db      	b.n	80055fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a72      	ldr	r2, [pc, #456]	; (8005610 <HAL_I2C_Init+0x268>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0c9b      	lsrs	r3, r3, #18
 800544c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a64      	ldr	r2, [pc, #400]	; (8005604 <HAL_I2C_Init+0x25c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d802      	bhi.n	800547c <HAL_I2C_Init+0xd4>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	3301      	adds	r3, #1
 800547a:	e009      	b.n	8005490 <HAL_I2C_Init+0xe8>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	4a63      	ldr	r2, [pc, #396]	; (8005614 <HAL_I2C_Init+0x26c>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	099b      	lsrs	r3, r3, #6
 800548e:	3301      	adds	r3, #1
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80054a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4956      	ldr	r1, [pc, #344]	; (8005604 <HAL_I2C_Init+0x25c>)
 80054ac:	428b      	cmp	r3, r1
 80054ae:	d80d      	bhi.n	80054cc <HAL_I2C_Init+0x124>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	1e59      	subs	r1, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	bf38      	it	cc
 80054c8:	2304      	movcc	r3, #4
 80054ca:	e04f      	b.n	800556c <HAL_I2C_Init+0x1c4>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d111      	bne.n	80054f8 <HAL_I2C_Init+0x150>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1e58      	subs	r0, r3, #1
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6859      	ldr	r1, [r3, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	440b      	add	r3, r1
 80054e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e6:	3301      	adds	r3, #1
 80054e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bf0c      	ite	eq
 80054f0:	2301      	moveq	r3, #1
 80054f2:	2300      	movne	r3, #0
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e012      	b.n	800551e <HAL_I2C_Init+0x176>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1e58      	subs	r0, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6859      	ldr	r1, [r3, #4]
 8005500:	460b      	mov	r3, r1
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	0099      	lsls	r1, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	fbb0 f3f3 	udiv	r3, r0, r3
 800550e:	3301      	adds	r3, #1
 8005510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005514:	2b00      	cmp	r3, #0
 8005516:	bf0c      	ite	eq
 8005518:	2301      	moveq	r3, #1
 800551a:	2300      	movne	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_I2C_Init+0x17e>
 8005522:	2301      	movs	r3, #1
 8005524:	e022      	b.n	800556c <HAL_I2C_Init+0x1c4>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10e      	bne.n	800554c <HAL_I2C_Init+0x1a4>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1e58      	subs	r0, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	460b      	mov	r3, r1
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	440b      	add	r3, r1
 800553c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005540:	3301      	adds	r3, #1
 8005542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	e00f      	b.n	800556c <HAL_I2C_Init+0x1c4>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1e58      	subs	r0, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6859      	ldr	r1, [r3, #4]
 8005554:	460b      	mov	r3, r1
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	440b      	add	r3, r1
 800555a:	0099      	lsls	r1, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005562:	3301      	adds	r3, #1
 8005564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	6809      	ldr	r1, [r1, #0]
 8005570:	4313      	orrs	r3, r2
 8005572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69da      	ldr	r2, [r3, #28]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800559a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6911      	ldr	r1, [r2, #16]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68d2      	ldr	r2, [r2, #12]
 80055a6:	4311      	orrs	r1, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695a      	ldr	r2, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0201 	orr.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	000186a0 	.word	0x000186a0
 8005608:	001e847f 	.word	0x001e847f
 800560c:	003d08ff 	.word	0x003d08ff
 8005610:	431bde83 	.word	0x431bde83
 8005614:	10624dd3 	.word	0x10624dd3

08005618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e25b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d075      	beq.n	8005722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005636:	4ba3      	ldr	r3, [pc, #652]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00c      	beq.n	800565c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005642:	4ba0      	ldr	r3, [pc, #640]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800564a:	2b08      	cmp	r3, #8
 800564c:	d112      	bne.n	8005674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564e:	4b9d      	ldr	r3, [pc, #628]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800565a:	d10b      	bne.n	8005674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	4b99      	ldr	r3, [pc, #612]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05b      	beq.n	8005720 <HAL_RCC_OscConfig+0x108>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d157      	bne.n	8005720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e236      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800567c:	d106      	bne.n	800568c <HAL_RCC_OscConfig+0x74>
 800567e:	4b91      	ldr	r3, [pc, #580]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a90      	ldr	r2, [pc, #576]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e01d      	b.n	80056c8 <HAL_RCC_OscConfig+0xb0>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x98>
 8005696:	4b8b      	ldr	r3, [pc, #556]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a8a      	ldr	r2, [pc, #552]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b88      	ldr	r3, [pc, #544]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a87      	ldr	r2, [pc, #540]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0xb0>
 80056b0:	4b84      	ldr	r3, [pc, #528]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a83      	ldr	r2, [pc, #524]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b81      	ldr	r3, [pc, #516]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a80      	ldr	r2, [pc, #512]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80056c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fe fda6 	bl	8004220 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fe fda2 	bl	8004220 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	; 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1fb      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	4b76      	ldr	r3, [pc, #472]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0xc0>
 80056f6:	e014      	b.n	8005722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fe fd92 	bl	8004220 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005700:	f7fe fd8e 	bl	8004220 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e1e7      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005712:	4b6c      	ldr	r3, [pc, #432]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0xe8>
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d063      	beq.n	80057f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800572e:	4b65      	ldr	r3, [pc, #404]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800573a:	4b62      	ldr	r3, [pc, #392]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005742:	2b08      	cmp	r3, #8
 8005744:	d11c      	bne.n	8005780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005746:	4b5f      	ldr	r3, [pc, #380]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d116      	bne.n	8005780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005752:	4b5c      	ldr	r3, [pc, #368]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_RCC_OscConfig+0x152>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b01      	cmp	r3, #1
 8005764:	d001      	beq.n	800576a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e1bb      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576a:	4b56      	ldr	r3, [pc, #344]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4952      	ldr	r1, [pc, #328]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800577e:	e03a      	b.n	80057f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d020      	beq.n	80057ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005788:	4b4f      	ldr	r3, [pc, #316]	; (80058c8 <HAL_RCC_OscConfig+0x2b0>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fe fd47 	bl	8004220 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005796:	f7fe fd43 	bl	8004220 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e19c      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a8:	4b46      	ldr	r3, [pc, #280]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b4:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4940      	ldr	r1, [pc, #256]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	600b      	str	r3, [r1, #0]
 80057c8:	e015      	b.n	80057f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ca:	4b3f      	ldr	r3, [pc, #252]	; (80058c8 <HAL_RCC_OscConfig+0x2b0>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d0:	f7fe fd26 	bl	8004220 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d8:	f7fe fd22 	bl	8004220 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e17b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d030      	beq.n	8005864 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800580a:	4b30      	ldr	r3, [pc, #192]	; (80058cc <HAL_RCC_OscConfig+0x2b4>)
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7fe fd06 	bl	8004220 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005818:	f7fe fd02 	bl	8004220 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e15b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582a:	4b26      	ldr	r3, [pc, #152]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800582c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCC_OscConfig+0x200>
 8005836:	e015      	b.n	8005864 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005838:	4b24      	ldr	r3, [pc, #144]	; (80058cc <HAL_RCC_OscConfig+0x2b4>)
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583e:	f7fe fcef 	bl	8004220 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005846:	f7fe fceb 	bl	8004220 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e144      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800585a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80a0 	beq.w	80059b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005876:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10f      	bne.n	80058a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	2300      	movs	r3, #0
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	4a0e      	ldr	r2, [pc, #56]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 800588c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005890:	6413      	str	r3, [r2, #64]	; 0x40
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <HAL_RCC_OscConfig+0x2ac>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589a:	60bb      	str	r3, [r7, #8]
 800589c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589e:	2301      	movs	r3, #1
 80058a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_RCC_OscConfig+0x2b8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d121      	bne.n	80058f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ae:	4b08      	ldr	r3, [pc, #32]	; (80058d0 <HAL_RCC_OscConfig+0x2b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a07      	ldr	r2, [pc, #28]	; (80058d0 <HAL_RCC_OscConfig+0x2b8>)
 80058b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ba:	f7fe fcb1 	bl	8004220 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c0:	e011      	b.n	80058e6 <HAL_RCC_OscConfig+0x2ce>
 80058c2:	bf00      	nop
 80058c4:	40023800 	.word	0x40023800
 80058c8:	42470000 	.word	0x42470000
 80058cc:	42470e80 	.word	0x42470e80
 80058d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d4:	f7fe fca4 	bl	8004220 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0fd      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e6:	4b81      	ldr	r3, [pc, #516]	; (8005aec <HAL_RCC_OscConfig+0x4d4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d106      	bne.n	8005908 <HAL_RCC_OscConfig+0x2f0>
 80058fa:	4b7d      	ldr	r3, [pc, #500]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	4a7c      	ldr	r2, [pc, #496]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6713      	str	r3, [r2, #112]	; 0x70
 8005906:	e01c      	b.n	8005942 <HAL_RCC_OscConfig+0x32a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b05      	cmp	r3, #5
 800590e:	d10c      	bne.n	800592a <HAL_RCC_OscConfig+0x312>
 8005910:	4b77      	ldr	r3, [pc, #476]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005914:	4a76      	ldr	r2, [pc, #472]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	6713      	str	r3, [r2, #112]	; 0x70
 800591c:	4b74      	ldr	r3, [pc, #464]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	4a73      	ldr	r2, [pc, #460]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6713      	str	r3, [r2, #112]	; 0x70
 8005928:	e00b      	b.n	8005942 <HAL_RCC_OscConfig+0x32a>
 800592a:	4b71      	ldr	r3, [pc, #452]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	4a70      	ldr	r2, [pc, #448]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005930:	f023 0301 	bic.w	r3, r3, #1
 8005934:	6713      	str	r3, [r2, #112]	; 0x70
 8005936:	4b6e      	ldr	r3, [pc, #440]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	4a6d      	ldr	r2, [pc, #436]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 800593c:	f023 0304 	bic.w	r3, r3, #4
 8005940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d015      	beq.n	8005976 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fe fc69 	bl	8004220 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005950:	e00a      	b.n	8005968 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fe fc65 	bl	8004220 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005960:	4293      	cmp	r3, r2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e0bc      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005968:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d0ee      	beq.n	8005952 <HAL_RCC_OscConfig+0x33a>
 8005974:	e014      	b.n	80059a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005976:	f7fe fc53 	bl	8004220 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597c:	e00a      	b.n	8005994 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597e:	f7fe fc4f 	bl	8004220 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	f241 3288 	movw	r2, #5000	; 0x1388
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e0a6      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005994:	4b56      	ldr	r3, [pc, #344]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1ee      	bne.n	800597e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d105      	bne.n	80059b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a6:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	4a51      	ldr	r2, [pc, #324]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 80059ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8092 	beq.w	8005ae0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059bc:	4b4c      	ldr	r3, [pc, #304]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 030c 	and.w	r3, r3, #12
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d05c      	beq.n	8005a82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d141      	bne.n	8005a54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d0:	4b48      	ldr	r3, [pc, #288]	; (8005af4 <HAL_RCC_OscConfig+0x4dc>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d6:	f7fe fc23 	bl	8004220 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059de:	f7fe fc1f 	bl	8004220 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e078      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f0:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	019b      	lsls	r3, r3, #6
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	3b01      	subs	r3, #1
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	4933      	ldr	r1, [pc, #204]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a26:	4b33      	ldr	r3, [pc, #204]	; (8005af4 <HAL_RCC_OscConfig+0x4dc>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fe fbf8 	bl	8004220 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fe fbf4 	bl	8004220 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e04d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a46:	4b2a      	ldr	r3, [pc, #168]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0f0      	beq.n	8005a34 <HAL_RCC_OscConfig+0x41c>
 8005a52:	e045      	b.n	8005ae0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a54:	4b27      	ldr	r3, [pc, #156]	; (8005af4 <HAL_RCC_OscConfig+0x4dc>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5a:	f7fe fbe1 	bl	8004220 <HAL_GetTick>
 8005a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a60:	e008      	b.n	8005a74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a62:	f7fe fbdd 	bl	8004220 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d901      	bls.n	8005a74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e036      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a74:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f0      	bne.n	8005a62 <HAL_RCC_OscConfig+0x44a>
 8005a80:	e02e      	b.n	8005ae0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e029      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a8e:	4b18      	ldr	r3, [pc, #96]	; (8005af0 <HAL_RCC_OscConfig+0x4d8>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d11c      	bne.n	8005adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d115      	bne.n	8005adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10d      	bne.n	8005adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d106      	bne.n	8005adc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40007000 	.word	0x40007000
 8005af0:	40023800 	.word	0x40023800
 8005af4:	42470060 	.word	0x42470060

08005af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0cc      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b0c:	4b68      	ldr	r3, [pc, #416]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 030f 	and.w	r3, r3, #15
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d90c      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1a:	4b65      	ldr	r3, [pc, #404]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	4b63      	ldr	r3, [pc, #396]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0b8      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d020      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b4c:	4b59      	ldr	r3, [pc, #356]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a58      	ldr	r2, [pc, #352]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b64:	4b53      	ldr	r3, [pc, #332]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a52      	ldr	r2, [pc, #328]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b70:	4b50      	ldr	r3, [pc, #320]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	494d      	ldr	r1, [pc, #308]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d044      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b96:	4b47      	ldr	r3, [pc, #284]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d119      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e07f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d107      	bne.n	8005bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb6:	4b3f      	ldr	r3, [pc, #252]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d109      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e06f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc6:	4b3b      	ldr	r3, [pc, #236]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e067      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bd6:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f023 0203 	bic.w	r2, r3, #3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4934      	ldr	r1, [pc, #208]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005be8:	f7fe fb1a 	bl	8004220 <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	e00a      	b.n	8005c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf0:	f7fe fb16 	bl	8004220 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e04f      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	4b2b      	ldr	r3, [pc, #172]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 020c 	and.w	r2, r3, #12
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d1eb      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d20c      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b22      	ldr	r3, [pc, #136]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b20      	ldr	r3, [pc, #128]	; (8005cb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e032      	b.n	8005ca6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c4c:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	4916      	ldr	r1, [pc, #88]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0308 	and.w	r3, r3, #8
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c6a:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	490e      	ldr	r1, [pc, #56]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c7e:	f000 f821 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8005c82:	4601      	mov	r1, r0
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	091b      	lsrs	r3, r3, #4
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005c90:	5cd3      	ldrb	r3, [r2, r3]
 8005c92:	fa21 f303 	lsr.w	r3, r1, r3
 8005c96:	4a09      	ldr	r2, [pc, #36]	; (8005cbc <HAL_RCC_ClockConfig+0x1c4>)
 8005c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fa7a 	bl	8004198 <HAL_InitTick>

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40023c00 	.word	0x40023c00
 8005cb4:	40023800 	.word	0x40023800
 8005cb8:	0800b18c 	.word	0x0800b18c
 8005cbc:	20000af0 	.word	0x20000af0
 8005cc0:	20000af4 	.word	0x20000af4

08005cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cda:	4b50      	ldr	r3, [pc, #320]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d007      	beq.n	8005cf6 <HAL_RCC_GetSysClockFreq+0x32>
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d008      	beq.n	8005cfc <HAL_RCC_GetSysClockFreq+0x38>
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 808d 	bne.w	8005e0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cf0:	4b4b      	ldr	r3, [pc, #300]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005cf2:	60bb      	str	r3, [r7, #8]
       break;
 8005cf4:	e08c      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cf6:	4b4b      	ldr	r3, [pc, #300]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005cf8:	60bb      	str	r3, [r7, #8]
      break;
 8005cfa:	e089      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cfc:	4b47      	ldr	r3, [pc, #284]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d06:	4b45      	ldr	r3, [pc, #276]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d023      	beq.n	8005d5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d12:	4b42      	ldr	r3, [pc, #264]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	099b      	lsrs	r3, r3, #6
 8005d18:	f04f 0400 	mov.w	r4, #0
 8005d1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	ea03 0501 	and.w	r5, r3, r1
 8005d28:	ea04 0602 	and.w	r6, r4, r2
 8005d2c:	4a3d      	ldr	r2, [pc, #244]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d2e:	fb02 f106 	mul.w	r1, r2, r6
 8005d32:	2200      	movs	r2, #0
 8005d34:	fb02 f205 	mul.w	r2, r2, r5
 8005d38:	440a      	add	r2, r1
 8005d3a:	493a      	ldr	r1, [pc, #232]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d3c:	fba5 0101 	umull	r0, r1, r5, r1
 8005d40:	1853      	adds	r3, r2, r1
 8005d42:	4619      	mov	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f04f 0400 	mov.w	r4, #0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	f7fa ff7b 	bl	8000c48 <__aeabi_uldivmod>
 8005d52:	4603      	mov	r3, r0
 8005d54:	460c      	mov	r4, r1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	e049      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d5a:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	099b      	lsrs	r3, r3, #6
 8005d60:	f04f 0400 	mov.w	r4, #0
 8005d64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d68:	f04f 0200 	mov.w	r2, #0
 8005d6c:	ea03 0501 	and.w	r5, r3, r1
 8005d70:	ea04 0602 	and.w	r6, r4, r2
 8005d74:	4629      	mov	r1, r5
 8005d76:	4632      	mov	r2, r6
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	f04f 0400 	mov.w	r4, #0
 8005d80:	0154      	lsls	r4, r2, #5
 8005d82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d86:	014b      	lsls	r3, r1, #5
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	1b49      	subs	r1, r1, r5
 8005d8e:	eb62 0206 	sbc.w	r2, r2, r6
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	f04f 0400 	mov.w	r4, #0
 8005d9a:	0194      	lsls	r4, r2, #6
 8005d9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005da0:	018b      	lsls	r3, r1, #6
 8005da2:	1a5b      	subs	r3, r3, r1
 8005da4:	eb64 0402 	sbc.w	r4, r4, r2
 8005da8:	f04f 0100 	mov.w	r1, #0
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	00e2      	lsls	r2, r4, #3
 8005db2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005db6:	00d9      	lsls	r1, r3, #3
 8005db8:	460b      	mov	r3, r1
 8005dba:	4614      	mov	r4, r2
 8005dbc:	195b      	adds	r3, r3, r5
 8005dbe:	eb44 0406 	adc.w	r4, r4, r6
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	02a2      	lsls	r2, r4, #10
 8005dcc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005dd0:	0299      	lsls	r1, r3, #10
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	4621      	mov	r1, r4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f04f 0400 	mov.w	r4, #0
 8005de0:	461a      	mov	r2, r3
 8005de2:	4623      	mov	r3, r4
 8005de4:	f7fa ff30 	bl	8000c48 <__aeabi_uldivmod>
 8005de8:	4603      	mov	r3, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dee:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_RCC_GetSysClockFreq+0x158>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f003 0303 	and.w	r3, r3, #3
 8005df8:	3301      	adds	r3, #1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e06:	60bb      	str	r3, [r7, #8]
      break;
 8005e08:	e002      	b.n	8005e10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005e0c:	60bb      	str	r3, [r7, #8]
      break;
 8005e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e10:	68bb      	ldr	r3, [r7, #8]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	00f42400 	.word	0x00f42400
 8005e24:	017d7840 	.word	0x017d7840

08005e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e2c:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	20000af0 	.word	0x20000af0

08005e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e44:	f7ff fff0 	bl	8005e28 <HAL_RCC_GetHCLKFreq>
 8005e48:	4601      	mov	r1, r0
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	0a9b      	lsrs	r3, r3, #10
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	4a03      	ldr	r2, [pc, #12]	; (8005e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e56:	5cd3      	ldrb	r3, [r2, r3]
 8005e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40023800 	.word	0x40023800
 8005e64:	0800b19c 	.word	0x0800b19c

08005e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e6c:	f7ff ffdc 	bl	8005e28 <HAL_RCC_GetHCLKFreq>
 8005e70:	4601      	mov	r1, r0
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	0b5b      	lsrs	r3, r3, #13
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	4a03      	ldr	r2, [pc, #12]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e7e:	5cd3      	ldrb	r3, [r2, r3]
 8005e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	0800b19c 	.word	0x0800b19c

08005e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e056      	b.n	8005f50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fd fb3b 	bl	8003538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	ea42 0103 	orr.w	r1, r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	f003 0104 	and.w	r1, r3, #4
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69da      	ldr	r2, [r3, #28]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d101      	bne.n	8005f7a <HAL_SPI_Transmit+0x22>
 8005f76:	2302      	movs	r3, #2
 8005f78:	e11e      	b.n	80061b8 <HAL_SPI_Transmit+0x260>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f82:	f7fe f94d 	bl	8004220 <HAL_GetTick>
 8005f86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d002      	beq.n	8005f9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
 8005f9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f9c:	e103      	b.n	80061a6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <HAL_SPI_Transmit+0x52>
 8005fa4:	88fb      	ldrh	r3, [r7, #6]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d102      	bne.n	8005fb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fae:	e0fa      	b.n	80061a6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2203      	movs	r2, #3
 8005fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	88fa      	ldrh	r2, [r7, #6]
 8005fce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff6:	d107      	bne.n	8006008 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006006:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d007      	beq.n	8006026 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602e:	d14b      	bne.n	80060c8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <HAL_SPI_Transmit+0xe6>
 8006038:	8afb      	ldrh	r3, [r7, #22]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d13e      	bne.n	80060bc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	881a      	ldrh	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	1c9a      	adds	r2, r3, #2
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006062:	e02b      	b.n	80060bc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b02      	cmp	r3, #2
 8006070:	d112      	bne.n	8006098 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	881a      	ldrh	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	1c9a      	adds	r2, r3, #2
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	86da      	strh	r2, [r3, #54]	; 0x36
 8006096:	e011      	b.n	80060bc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006098:	f7fe f8c2 	bl	8004220 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d803      	bhi.n	80060b0 <HAL_SPI_Transmit+0x158>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ae:	d102      	bne.n	80060b6 <HAL_SPI_Transmit+0x15e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060ba:	e074      	b.n	80061a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ce      	bne.n	8006064 <HAL_SPI_Transmit+0x10c>
 80060c6:	e04c      	b.n	8006162 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_SPI_Transmit+0x17e>
 80060d0:	8afb      	ldrh	r3, [r7, #22]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d140      	bne.n	8006158 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	330c      	adds	r3, #12
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80060fc:	e02c      	b.n	8006158 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b02      	cmp	r3, #2
 800610a:	d113      	bne.n	8006134 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	330c      	adds	r3, #12
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006128:	b29b      	uxth	r3, r3
 800612a:	3b01      	subs	r3, #1
 800612c:	b29a      	uxth	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	86da      	strh	r2, [r3, #54]	; 0x36
 8006132:	e011      	b.n	8006158 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006134:	f7fe f874 	bl	8004220 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d803      	bhi.n	800614c <HAL_SPI_Transmit+0x1f4>
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614a:	d102      	bne.n	8006152 <HAL_SPI_Transmit+0x1fa>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006156:	e026      	b.n	80061a6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1cd      	bne.n	80060fe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fc94 	bl	8006a94 <SPI_EndRxTxTransaction>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006180:	2300      	movs	r3, #0
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	77fb      	strb	r3, [r7, #31]
 80061a2:	e000      	b.n	80061a6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80061a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08c      	sub	sp, #48	; 0x30
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061ce:	2301      	movs	r3, #1
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_SPI_TransmitReceive+0x26>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e18a      	b.n	80064fc <HAL_SPI_TransmitReceive+0x33c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ee:	f7fe f817 	bl	8004220 <HAL_GetTick>
 80061f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006204:	887b      	ldrh	r3, [r7, #2]
 8006206:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006208:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800620c:	2b01      	cmp	r3, #1
 800620e:	d00f      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x70>
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006216:	d107      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <HAL_SPI_TransmitReceive+0x68>
 8006220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006224:	2b04      	cmp	r3, #4
 8006226:	d003      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006228:	2302      	movs	r3, #2
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800622e:	e15b      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x82>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_SPI_TransmitReceive+0x82>
 800623c:	887b      	ldrh	r3, [r7, #2]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d103      	bne.n	800624a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006248:	e14e      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b04      	cmp	r3, #4
 8006254:	d003      	beq.n	800625e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2205      	movs	r2, #5
 800625a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	887a      	ldrh	r2, [r7, #2]
 800626e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	887a      	ldrh	r2, [r7, #2]
 8006274:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629e:	2b40      	cmp	r3, #64	; 0x40
 80062a0:	d007      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ba:	d178      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x10a>
 80062c4:	8b7b      	ldrh	r3, [r7, #26]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d166      	bne.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062da:	1c9a      	adds	r2, r3, #2
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ee:	e053      	b.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d11b      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x176>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d016      	beq.n	8006336 <HAL_SPI_TransmitReceive+0x176>
 8006308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d113      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	881a      	ldrh	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	1c9a      	adds	r2, r3, #2
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b01      	cmp	r3, #1
 8006342:	d119      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x1b8>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006348:	b29b      	uxth	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d014      	beq.n	8006378 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	b292      	uxth	r2, r2
 800635a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	1c9a      	adds	r2, r3, #2
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006374:	2301      	movs	r3, #1
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006378:	f7fd ff52 	bl	8004220 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006384:	429a      	cmp	r2, r3
 8006386:	d807      	bhi.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d003      	beq.n	8006398 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006396:	e0a7      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1a6      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x130>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1a1      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x130>
 80063ac:	e07c      	b.n	80064a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x1fc>
 80063b6:	8b7b      	ldrh	r3, [r7, #26]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d16b      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	7812      	ldrb	r2, [r2, #0]
 80063c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063e2:	e057      	b.n	8006494 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d11c      	bne.n	800642c <HAL_SPI_TransmitReceive+0x26c>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d017      	beq.n	800642c <HAL_SPI_TransmitReceive+0x26c>
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d114      	bne.n	800642c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	330c      	adds	r3, #12
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b01      	cmp	r3, #1
 8006438:	d119      	bne.n	800646e <HAL_SPI_TransmitReceive+0x2ae>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d014      	beq.n	800646e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006460:	b29b      	uxth	r3, r3
 8006462:	3b01      	subs	r3, #1
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800646a:	2301      	movs	r3, #1
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800646e:	f7fd fed7 	bl	8004220 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800647a:	429a      	cmp	r2, r3
 800647c:	d803      	bhi.n	8006486 <HAL_SPI_TransmitReceive+0x2c6>
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d102      	bne.n	800648c <HAL_SPI_TransmitReceive+0x2cc>
 8006486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006488:	2b00      	cmp	r3, #0
 800648a:	d103      	bne.n	8006494 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006492:	e029      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1a2      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x224>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d19d      	bne.n	80063e4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 faf1 	bl	8006a94 <SPI_EndRxTxTransaction>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d006      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2220      	movs	r2, #32
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064c4:	e010      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10b      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064ce:	2300      	movs	r3, #0
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	e000      	b.n	80064e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80064e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80064f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3730      	adds	r7, #48	; 0x30
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006520:	2302      	movs	r3, #2
 8006522:	e0e3      	b.n	80066ec <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006532:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800653a:	7dbb      	ldrb	r3, [r7, #22]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d00d      	beq.n	800655c <HAL_SPI_TransmitReceive_DMA+0x58>
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006546:	d106      	bne.n	8006556 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d102      	bne.n	8006556 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006550:	7dbb      	ldrb	r3, [r7, #22]
 8006552:	2b04      	cmp	r3, #4
 8006554:	d002      	beq.n	800655c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006556:	2302      	movs	r3, #2
 8006558:	75fb      	strb	r3, [r7, #23]
    goto error;
 800655a:	e0c2      	b.n	80066e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006568:	887b      	ldrh	r3, [r7, #2]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d102      	bne.n	8006574 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006572:	e0b6      	b.n	80066e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b04      	cmp	r3, #4
 800657e:	d003      	beq.n	8006588 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2205      	movs	r2, #5
 8006584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	887a      	ldrh	r2, [r7, #2]
 8006598:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	887a      	ldrh	r2, [r7, #2]
 800659e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	887a      	ldrh	r2, [r7, #2]
 80065aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	887a      	ldrh	r2, [r7, #2]
 80065b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d108      	bne.n	80065dc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ce:	4a49      	ldr	r2, [pc, #292]	; (80066f4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d6:	4a48      	ldr	r2, [pc, #288]	; (80066f8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80065da:	e007      	b.n	80065ec <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e0:	4a46      	ldr	r2, [pc, #280]	; (80066fc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	4a45      	ldr	r2, [pc, #276]	; (8006700 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80065ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f0:	4a44      	ldr	r2, [pc, #272]	; (8006704 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80065f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f8:	2200      	movs	r2, #0
 80065fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	330c      	adds	r3, #12
 8006606:	4619      	mov	r1, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006612:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006614:	f7fe fa54 	bl	8004ac0 <HAL_DMA_Start_IT>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00c      	beq.n	8006638 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	f043 0210 	orr.w	r2, r3, #16
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006636:	e054      	b.n	80066e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664c:	2200      	movs	r2, #0
 800664e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006654:	2200      	movs	r2, #0
 8006656:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665c:	2200      	movs	r2, #0
 800665e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006664:	2200      	movs	r2, #0
 8006666:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	4619      	mov	r1, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	330c      	adds	r3, #12
 8006678:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006680:	f7fe fa1e 	bl	8004ac0 <HAL_DMA_Start_IT>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668e:	f043 0210 	orr.w	r2, r3, #16
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80066a2:	e01e      	b.n	80066e2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d007      	beq.n	80066c2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066c0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0220 	orr.w	r2, r2, #32
 80066d0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f042 0202 	orr.w	r2, r2, #2
 80066e0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	0800687d 	.word	0x0800687d
 80066f8:	08006745 	.word	0x08006745
 80066fc:	08006899 	.word	0x08006899
 8006700:	080067ed 	.word	0x080067ed
 8006704:	080068b5 	.word	0x080068b5

08006708 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006752:	f7fd fd65 	bl	8004220 <HAL_GetTick>
 8006756:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006766:	d03b      	beq.n	80067e0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0220 	bic.w	r2, r2, #32
 8006776:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10d      	bne.n	800679c <SPI_DMAReceiveCplt+0x58>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006788:	d108      	bne.n	800679c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0203 	bic.w	r2, r2, #3
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	e007      	b.n	80067ac <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	2164      	movs	r1, #100	; 0x64
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f909 	bl	80069c8 <SPI_EndRxTransaction>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2220      	movs	r2, #32
 80067c0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f7ff ffa9 	bl	8006730 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80067de:	e002      	b.n	80067e6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff ff91 	bl	8006708 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067fa:	f7fd fd11 	bl	8004220 <HAL_GetTick>
 80067fe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680e:	d02f      	beq.n	8006870 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0220 	bic.w	r2, r2, #32
 800681e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	2164      	movs	r1, #100	; 0x64
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f935 	bl	8006a94 <SPI_EndRxTxTransaction>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006834:	f043 0220 	orr.w	r2, r3, #32
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0203 	bic.w	r2, r2, #3
 800684a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff ff61 	bl	8006730 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800686e:	e002      	b.n	8006876 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7fc f9ff 	bl	8002c74 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff ff46 	bl	800671c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f7fc f9fa 	bl	8002ca0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0203 	bic.w	r2, r2, #3
 80068d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	f043 0210 	orr.w	r2, r3, #16
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f7ff ff22 	bl	8006730 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006904:	e04c      	b.n	80069a0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d048      	beq.n	80069a0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800690e:	f7fd fc87 	bl	8004220 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d902      	bls.n	8006924 <SPI_WaitFlagStateUntilTimeout+0x30>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d13d      	bne.n	80069a0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006932:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800693c:	d111      	bne.n	8006962 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006946:	d004      	beq.n	8006952 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006950:	d107      	bne.n	8006962 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006960:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696a:	d10f      	bne.n	800698c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800698a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e00f      	b.n	80069c0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4013      	ands	r3, r2
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d1a3      	bne.n	8006906 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069dc:	d111      	bne.n	8006a02 <SPI_EndRxTransaction+0x3a>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e6:	d004      	beq.n	80069f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f0:	d107      	bne.n	8006a02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0a:	d12a      	bne.n	8006a62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a14:	d012      	beq.n	8006a3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff ff67 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02d      	beq.n	8006a88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e026      	b.n	8006a8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2101      	movs	r1, #1
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff ff54 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01a      	beq.n	8006a88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e013      	b.n	8006a8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff ff41 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d007      	beq.n	8006a88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f043 0220 	orr.w	r2, r3, #32
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e000      	b.n	8006a8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006aa0:	4b1b      	ldr	r3, [pc, #108]	; (8006b10 <SPI_EndRxTxTransaction+0x7c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <SPI_EndRxTxTransaction+0x80>)
 8006aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aaa:	0d5b      	lsrs	r3, r3, #21
 8006aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ab0:	fb02 f303 	mul.w	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006abe:	d112      	bne.n	8006ae6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2180      	movs	r1, #128	; 0x80
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff ff12 	bl	80068f4 <SPI_WaitFlagStateUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d016      	beq.n	8006b04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e00f      	b.n	8006b06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	2b80      	cmp	r3, #128	; 0x80
 8006afe:	d0f2      	beq.n	8006ae6 <SPI_EndRxTxTransaction+0x52>
 8006b00:	e000      	b.n	8006b04 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b02:	bf00      	nop
  }

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3718      	adds	r7, #24
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20000af0 	.word	0x20000af0
 8006b14:	165e9f81 	.word	0x165e9f81

08006b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e01d      	b.n	8006b66 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fd f86a 	bl	8003c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	3304      	adds	r3, #4
 8006b54:	4619      	mov	r1, r3
 8006b56:	4610      	mov	r0, r2
 8006b58:	f000 faaa 	bl	80070b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0201 	orr.w	r2, r2, #1
 8006b84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b06      	cmp	r3, #6
 8006b96:	d007      	beq.n	8006ba8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e01d      	b.n	8006c04 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f815 	bl	8006c0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f000 fa5b 	bl	80070b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d122      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d11b      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0202 	mvn.w	r2, #2
 8006c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fa05 	bl	8007072 <HAL_TIM_IC_CaptureCallback>
 8006c68:	e005      	b.n	8006c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f9f7 	bl	800705e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa08 	bl	8007086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d122      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d11b      	bne.n	8006cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0204 	mvn.w	r2, #4
 8006ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9db 	bl	8007072 <HAL_TIM_IC_CaptureCallback>
 8006cbc:	e005      	b.n	8006cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9cd 	bl	800705e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9de 	bl	8007086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	d122      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b08      	cmp	r3, #8
 8006cea:	d11b      	bne.n	8006d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0208 	mvn.w	r2, #8
 8006cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f9b1 	bl	8007072 <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9a3 	bl	800705e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f9b4 	bl	8007086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d122      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d11b      	bne.n	8006d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f06f 0210 	mvn.w	r2, #16
 8006d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f987 	bl	8007072 <HAL_TIM_IC_CaptureCallback>
 8006d64:	e005      	b.n	8006d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f979 	bl	800705e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f98a 	bl	8007086 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d10e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d107      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0201 	mvn.w	r2, #1
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fa fd9c 	bl	80018dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dae:	2b80      	cmp	r3, #128	; 0x80
 8006db0:	d10e      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbc:	2b80      	cmp	r3, #128	; 0x80
 8006dbe:	d107      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fd32 	bl	8007834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d10e      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d107      	bne.n	8006dfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f94f 	bl	800709a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d10e      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f003 0320 	and.w	r3, r3, #32
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d107      	bne.n	8006e28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f06f 0220 	mvn.w	r2, #32
 8006e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fcfc 	bl	8007820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e28:	bf00      	nop
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e04e      	b.n	8006ee8 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b0c      	cmp	r3, #12
 8006e5e:	d839      	bhi.n	8006ed4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006e60:	a201      	add	r2, pc, #4	; (adr r2, 8006e68 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e66:	bf00      	nop
 8006e68:	08006e9d 	.word	0x08006e9d
 8006e6c:	08006ed5 	.word	0x08006ed5
 8006e70:	08006ed5 	.word	0x08006ed5
 8006e74:	08006ed5 	.word	0x08006ed5
 8006e78:	08006eab 	.word	0x08006eab
 8006e7c:	08006ed5 	.word	0x08006ed5
 8006e80:	08006ed5 	.word	0x08006ed5
 8006e84:	08006ed5 	.word	0x08006ed5
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006ed5 	.word	0x08006ed5
 8006e90:	08006ed5 	.word	0x08006ed5
 8006e94:	08006ed5 	.word	0x08006ed5
 8006e98:	08006ec7 	.word	0x08006ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f9a4 	bl	80071f0 <TIM_OC1_SetConfig>
      break;
 8006ea8:	e015      	b.n	8006ed6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fa0d 	bl	80072d0 <TIM_OC2_SetConfig>
      break;
 8006eb6:	e00e      	b.n	8006ed6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fa7c 	bl	80073bc <TIM_OC3_SetConfig>
      break;
 8006ec4:	e007      	b.n	8006ed6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fae9 	bl	80074a4 <TIM_OC4_SetConfig>
      break;
 8006ed2:	e000      	b.n	8006ed6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006ed4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_TIM_ConfigClockSource+0x18>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e0a6      	b.n	8007056 <HAL_TIM_ConfigClockSource+0x166>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d067      	beq.n	8007010 <HAL_TIM_ConfigClockSource+0x120>
 8006f40:	2b40      	cmp	r3, #64	; 0x40
 8006f42:	d80b      	bhi.n	8006f5c <HAL_TIM_ConfigClockSource+0x6c>
 8006f44:	2b10      	cmp	r3, #16
 8006f46:	d073      	beq.n	8007030 <HAL_TIM_ConfigClockSource+0x140>
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d802      	bhi.n	8006f52 <HAL_TIM_ConfigClockSource+0x62>
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d06f      	beq.n	8007030 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006f50:	e078      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d06c      	beq.n	8007030 <HAL_TIM_ConfigClockSource+0x140>
 8006f56:	2b30      	cmp	r3, #48	; 0x30
 8006f58:	d06a      	beq.n	8007030 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006f5a:	e073      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006f5c:	2b70      	cmp	r3, #112	; 0x70
 8006f5e:	d00d      	beq.n	8006f7c <HAL_TIM_ConfigClockSource+0x8c>
 8006f60:	2b70      	cmp	r3, #112	; 0x70
 8006f62:	d804      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x7e>
 8006f64:	2b50      	cmp	r3, #80	; 0x50
 8006f66:	d033      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0xe0>
 8006f68:	2b60      	cmp	r3, #96	; 0x60
 8006f6a:	d041      	beq.n	8006ff0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006f6c:	e06a      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f72:	d066      	beq.n	8007042 <HAL_TIM_ConfigClockSource+0x152>
 8006f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f78:	d017      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006f7a:	e063      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6899      	ldr	r1, [r3, #8]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f000 fb5a 	bl	8007644 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	609a      	str	r2, [r3, #8]
      break;
 8006fa8:	e04c      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6899      	ldr	r1, [r3, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f000 fb43 	bl	8007644 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fcc:	609a      	str	r2, [r3, #8]
      break;
 8006fce:	e039      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	6859      	ldr	r1, [r3, #4]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f000 fab7 	bl	8007550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2150      	movs	r1, #80	; 0x50
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fb10 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 8006fee:	e029      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6859      	ldr	r1, [r3, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f000 fad6 	bl	80075ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2160      	movs	r1, #96	; 0x60
 8007008:	4618      	mov	r0, r3
 800700a:	f000 fb00 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 800700e:	e019      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	6859      	ldr	r1, [r3, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	461a      	mov	r2, r3
 800701e:	f000 fa97 	bl	8007550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2140      	movs	r1, #64	; 0x40
 8007028:	4618      	mov	r0, r3
 800702a:	f000 faf0 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 800702e:	e009      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4619      	mov	r1, r3
 800703a:	4610      	mov	r0, r2
 800703c:	f000 fae7 	bl	800760e <TIM_ITRx_SetConfig>
      break;
 8007040:	e000      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a40      	ldr	r2, [pc, #256]	; (80071c4 <TIM_Base_SetConfig+0x114>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <TIM_Base_SetConfig+0x40>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ce:	d00f      	beq.n	80070f0 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a3d      	ldr	r2, [pc, #244]	; (80071c8 <TIM_Base_SetConfig+0x118>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00b      	beq.n	80070f0 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a3c      	ldr	r2, [pc, #240]	; (80071cc <TIM_Base_SetConfig+0x11c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d007      	beq.n	80070f0 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a3b      	ldr	r2, [pc, #236]	; (80071d0 <TIM_Base_SetConfig+0x120>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d003      	beq.n	80070f0 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a3a      	ldr	r2, [pc, #232]	; (80071d4 <TIM_Base_SetConfig+0x124>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d108      	bne.n	8007102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2f      	ldr	r2, [pc, #188]	; (80071c4 <TIM_Base_SetConfig+0x114>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d02b      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007110:	d027      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2c      	ldr	r2, [pc, #176]	; (80071c8 <TIM_Base_SetConfig+0x118>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d023      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2b      	ldr	r2, [pc, #172]	; (80071cc <TIM_Base_SetConfig+0x11c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d01f      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2a      	ldr	r2, [pc, #168]	; (80071d0 <TIM_Base_SetConfig+0x120>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01b      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <TIM_Base_SetConfig+0x124>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d017      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a28      	ldr	r2, [pc, #160]	; (80071d8 <TIM_Base_SetConfig+0x128>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d013      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a27      	ldr	r2, [pc, #156]	; (80071dc <TIM_Base_SetConfig+0x12c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00f      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a26      	ldr	r2, [pc, #152]	; (80071e0 <TIM_Base_SetConfig+0x130>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00b      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a25      	ldr	r2, [pc, #148]	; (80071e4 <TIM_Base_SetConfig+0x134>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d007      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a24      	ldr	r2, [pc, #144]	; (80071e8 <TIM_Base_SetConfig+0x138>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d003      	beq.n	8007162 <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a23      	ldr	r2, [pc, #140]	; (80071ec <TIM_Base_SetConfig+0x13c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d108      	bne.n	8007174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <TIM_Base_SetConfig+0x114>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_Base_SetConfig+0xf8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a0c      	ldr	r2, [pc, #48]	; (80071d4 <TIM_Base_SetConfig+0x124>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d103      	bne.n	80071b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	615a      	str	r2, [r3, #20]
}
 80071b6:	bf00      	nop
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40000400 	.word	0x40000400
 80071cc:	40000800 	.word	0x40000800
 80071d0:	40000c00 	.word	0x40000c00
 80071d4:	40010400 	.word	0x40010400
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40014400 	.word	0x40014400
 80071e0:	40014800 	.word	0x40014800
 80071e4:	40001800 	.word	0x40001800
 80071e8:	40001c00 	.word	0x40001c00
 80071ec:	40002000 	.word	0x40002000

080071f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f023 0302 	bic.w	r3, r3, #2
 8007238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	4313      	orrs	r3, r2
 8007242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a20      	ldr	r2, [pc, #128]	; (80072c8 <TIM_OC1_SetConfig+0xd8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d003      	beq.n	8007254 <TIM_OC1_SetConfig+0x64>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a1f      	ldr	r2, [pc, #124]	; (80072cc <TIM_OC1_SetConfig+0xdc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d10c      	bne.n	800726e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f023 0308 	bic.w	r3, r3, #8
 800725a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f023 0304 	bic.w	r3, r3, #4
 800726c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <TIM_OC1_SetConfig+0xd8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d003      	beq.n	800727e <TIM_OC1_SetConfig+0x8e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a14      	ldr	r2, [pc, #80]	; (80072cc <TIM_OC1_SetConfig+0xdc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d111      	bne.n	80072a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800728c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	4313      	orrs	r3, r2
 8007296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	621a      	str	r2, [r3, #32]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40010400 	.word	0x40010400

080072d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	f023 0210 	bic.w	r2, r3, #16
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f023 0320 	bic.w	r3, r3, #32
 800731a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	011b      	lsls	r3, r3, #4
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a22      	ldr	r2, [pc, #136]	; (80073b4 <TIM_OC2_SetConfig+0xe4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d003      	beq.n	8007338 <TIM_OC2_SetConfig+0x68>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a21      	ldr	r2, [pc, #132]	; (80073b8 <TIM_OC2_SetConfig+0xe8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d10d      	bne.n	8007354 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800733e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	4313      	orrs	r3, r2
 800734a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a17      	ldr	r2, [pc, #92]	; (80073b4 <TIM_OC2_SetConfig+0xe4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC2_SetConfig+0x94>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a16      	ldr	r2, [pc, #88]	; (80073b8 <TIM_OC2_SetConfig+0xe8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d113      	bne.n	800738c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800736a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	40010000 	.word	0x40010000
 80073b8:	40010400 	.word	0x40010400

080073bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0303 	bic.w	r3, r3, #3
 80073f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a21      	ldr	r2, [pc, #132]	; (800749c <TIM_OC3_SetConfig+0xe0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_OC3_SetConfig+0x66>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a20      	ldr	r2, [pc, #128]	; (80074a0 <TIM_OC3_SetConfig+0xe4>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d10d      	bne.n	800743e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800743c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a16      	ldr	r2, [pc, #88]	; (800749c <TIM_OC3_SetConfig+0xe0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_OC3_SetConfig+0x92>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a15      	ldr	r2, [pc, #84]	; (80074a0 <TIM_OC3_SetConfig+0xe4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d113      	bne.n	8007476 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800745c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	621a      	str	r2, [r3, #32]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40010000 	.word	0x40010000
 80074a0:	40010400 	.word	0x40010400

080074a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	031b      	lsls	r3, r3, #12
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a12      	ldr	r2, [pc, #72]	; (8007548 <TIM_OC4_SetConfig+0xa4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_OC4_SetConfig+0x68>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a11      	ldr	r2, [pc, #68]	; (800754c <TIM_OC4_SetConfig+0xa8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d109      	bne.n	8007520 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	019b      	lsls	r3, r3, #6
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4313      	orrs	r3, r2
 800751e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685a      	ldr	r2, [r3, #4]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40010400 	.word	0x40010400

08007550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f023 0201 	bic.w	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800757a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f023 030a 	bic.w	r3, r3, #10
 800758c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	621a      	str	r2, [r3, #32]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b087      	sub	sp, #28
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0210 	bic.w	r2, r3, #16
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	031b      	lsls	r3, r3, #12
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	621a      	str	r2, [r3, #32]
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800760e:	b480      	push	{r7}
 8007610:	b085      	sub	sp, #20
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4313      	orrs	r3, r2
 800762c:	f043 0307 	orr.w	r3, r3, #7
 8007630:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	609a      	str	r2, [r3, #8]
}
 8007638:	bf00      	nop
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800765e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	021a      	lsls	r2, r3, #8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	431a      	orrs	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4313      	orrs	r3, r2
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	609a      	str	r2, [r3, #8]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007698:	2302      	movs	r3, #2
 800769a:	e05a      	b.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a21      	ldr	r2, [pc, #132]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d022      	beq.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e8:	d01d      	beq.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1d      	ldr	r2, [pc, #116]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d018      	beq.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a1b      	ldr	r2, [pc, #108]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1a      	ldr	r2, [pc, #104]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00e      	beq.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a18      	ldr	r2, [pc, #96]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d009      	beq.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a17      	ldr	r2, [pc, #92]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d004      	beq.n	8007726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a15      	ldr	r2, [pc, #84]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d10c      	bne.n	8007740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800772c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4313      	orrs	r3, r2
 8007736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	40010000 	.word	0x40010000
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40010400 	.word	0x40010400
 8007774:	40014000 	.word	0x40014000
 8007778:	40001800 	.word	0x40001800

0800777c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007794:	2302      	movs	r3, #2
 8007796:	e03d      	b.n	8007814 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e03f      	b.n	80078da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d106      	bne.n	8007874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fc fac6 	bl	8003e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2224      	movs	r2, #36	; 0x24
 8007878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800788a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f9b1 	bl	8007bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b088      	sub	sp, #32
 80078e6:	af02      	add	r7, sp, #8
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b20      	cmp	r3, #32
 8007900:	f040 8083 	bne.w	8007a0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d002      	beq.n	8007910 <HAL_UART_Transmit+0x2e>
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e07b      	b.n	8007a0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_UART_Transmit+0x40>
 800791e:	2302      	movs	r3, #2
 8007920:	e074      	b.n	8007a0c <HAL_UART_Transmit+0x12a>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2221      	movs	r2, #33	; 0x21
 8007934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007938:	f7fc fc72 	bl	8004220 <HAL_GetTick>
 800793c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	88fa      	ldrh	r2, [r7, #6]
 8007942:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	88fa      	ldrh	r2, [r7, #6]
 8007948:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007952:	e042      	b.n	80079da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007958:	b29b      	uxth	r3, r3
 800795a:	3b01      	subs	r3, #1
 800795c:	b29a      	uxth	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	d122      	bne.n	80079b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2200      	movs	r2, #0
 8007974:	2180      	movs	r1, #128	; 0x80
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f8f2 	bl	8007b60 <UART_WaitOnFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e042      	b.n	8007a0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007998:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d103      	bne.n	80079aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	3302      	adds	r3, #2
 80079a6:	60bb      	str	r3, [r7, #8]
 80079a8:	e017      	b.n	80079da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	3301      	adds	r3, #1
 80079ae:	60bb      	str	r3, [r7, #8]
 80079b0:	e013      	b.n	80079da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2200      	movs	r2, #0
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f8cf 	bl	8007b60 <UART_WaitOnFlagUntilTimeout>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e01f      	b.n	8007a0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	60ba      	str	r2, [r7, #8]
 80079d2:	781a      	ldrb	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1b7      	bne.n	8007954 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2200      	movs	r2, #0
 80079ec:	2140      	movs	r1, #64	; 0x40
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f8b6 	bl	8007b60 <UART_WaitOnFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e006      	b.n	8007a0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	4613      	mov	r3, r2
 8007a22:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	f040 8090 	bne.w	8007b56 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <HAL_UART_Receive+0x2e>
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e088      	b.n	8007b58 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_UART_Receive+0x40>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e081      	b.n	8007b58 <HAL_UART_Receive+0x144>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2222      	movs	r2, #34	; 0x22
 8007a66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007a6a:	f7fc fbd9 	bl	8004220 <HAL_GetTick>
 8007a6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	88fa      	ldrh	r2, [r7, #6]
 8007a74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	88fa      	ldrh	r2, [r7, #6]
 8007a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a84:	e05c      	b.n	8007b40 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9c:	d12b      	bne.n	8007af6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2120      	movs	r1, #32
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f859 	bl	8007b60 <UART_WaitOnFlagUntilTimeout>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e04f      	b.n	8007b58 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10c      	bne.n	8007ade <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	3302      	adds	r3, #2
 8007ada:	60bb      	str	r3, [r7, #8]
 8007adc:	e030      	b.n	8007b40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60bb      	str	r3, [r7, #8]
 8007af4:	e024      	b.n	8007b40 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	2120      	movs	r1, #32
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f82d 	bl	8007b60 <UART_WaitOnFlagUntilTimeout>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e023      	b.n	8007b58 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d108      	bne.n	8007b2a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	60ba      	str	r2, [r7, #8]
 8007b24:	b2ca      	uxtb	r2, r1
 8007b26:	701a      	strb	r2, [r3, #0]
 8007b28:	e00a      	b.n	8007b40 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	1c59      	adds	r1, r3, #1
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d19d      	bne.n	8007a86 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e000      	b.n	8007b58 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007b56:	2302      	movs	r3, #2
  }
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b70:	e02c      	b.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b78:	d028      	beq.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b80:	f7fc fb4e 	bl	8004220 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d21d      	bcs.n	8007bcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695a      	ldr	r2, [r3, #20]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 0201 	bic.w	r2, r2, #1
 8007bae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2220      	movs	r2, #32
 8007bbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e00f      	b.n	8007bec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	461a      	mov	r2, r3
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d0c3      	beq.n	8007b72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007c36:	f023 030c 	bic.w	r3, r3, #12
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	68f9      	ldr	r1, [r7, #12]
 8007c40:	430b      	orrs	r3, r1
 8007c42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c62:	f040 818b 	bne.w	8007f7c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4ac1      	ldr	r2, [pc, #772]	; (8007f70 <UART_SetConfig+0x37c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d005      	beq.n	8007c7c <UART_SetConfig+0x88>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4abf      	ldr	r2, [pc, #764]	; (8007f74 <UART_SetConfig+0x380>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	f040 80bd 	bne.w	8007df6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c7c:	f7fe f8f4 	bl	8005e68 <HAL_RCC_GetPCLK2Freq>
 8007c80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	461d      	mov	r5, r3
 8007c86:	f04f 0600 	mov.w	r6, #0
 8007c8a:	46a8      	mov	r8, r5
 8007c8c:	46b1      	mov	r9, r6
 8007c8e:	eb18 0308 	adds.w	r3, r8, r8
 8007c92:	eb49 0409 	adc.w	r4, r9, r9
 8007c96:	4698      	mov	r8, r3
 8007c98:	46a1      	mov	r9, r4
 8007c9a:	eb18 0805 	adds.w	r8, r8, r5
 8007c9e:	eb49 0906 	adc.w	r9, r9, r6
 8007ca2:	f04f 0100 	mov.w	r1, #0
 8007ca6:	f04f 0200 	mov.w	r2, #0
 8007caa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007cae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007cb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007cb6:	4688      	mov	r8, r1
 8007cb8:	4691      	mov	r9, r2
 8007cba:	eb18 0005 	adds.w	r0, r8, r5
 8007cbe:	eb49 0106 	adc.w	r1, r9, r6
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	f04f 0600 	mov.w	r6, #0
 8007ccc:	196b      	adds	r3, r5, r5
 8007cce:	eb46 0406 	adc.w	r4, r6, r6
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4623      	mov	r3, r4
 8007cd6:	f7f8 ffb7 	bl	8000c48 <__aeabi_uldivmod>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4ba5      	ldr	r3, [pc, #660]	; (8007f78 <UART_SetConfig+0x384>)
 8007ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	461d      	mov	r5, r3
 8007cf0:	f04f 0600 	mov.w	r6, #0
 8007cf4:	46a9      	mov	r9, r5
 8007cf6:	46b2      	mov	sl, r6
 8007cf8:	eb19 0309 	adds.w	r3, r9, r9
 8007cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8007d00:	4699      	mov	r9, r3
 8007d02:	46a2      	mov	sl, r4
 8007d04:	eb19 0905 	adds.w	r9, r9, r5
 8007d08:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d0c:	f04f 0100 	mov.w	r1, #0
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d20:	4689      	mov	r9, r1
 8007d22:	4692      	mov	sl, r2
 8007d24:	eb19 0005 	adds.w	r0, r9, r5
 8007d28:	eb4a 0106 	adc.w	r1, sl, r6
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	461d      	mov	r5, r3
 8007d32:	f04f 0600 	mov.w	r6, #0
 8007d36:	196b      	adds	r3, r5, r5
 8007d38:	eb46 0406 	adc.w	r4, r6, r6
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	4623      	mov	r3, r4
 8007d40:	f7f8 ff82 	bl	8000c48 <__aeabi_uldivmod>
 8007d44:	4603      	mov	r3, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4b8b      	ldr	r3, [pc, #556]	; (8007f78 <UART_SetConfig+0x384>)
 8007d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	2164      	movs	r1, #100	; 0x64
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	3332      	adds	r3, #50	; 0x32
 8007d5e:	4a86      	ldr	r2, [pc, #536]	; (8007f78 <UART_SetConfig+0x384>)
 8007d60:	fba2 2303 	umull	r2, r3, r2, r3
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d6c:	4498      	add	r8, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	461d      	mov	r5, r3
 8007d72:	f04f 0600 	mov.w	r6, #0
 8007d76:	46a9      	mov	r9, r5
 8007d78:	46b2      	mov	sl, r6
 8007d7a:	eb19 0309 	adds.w	r3, r9, r9
 8007d7e:	eb4a 040a 	adc.w	r4, sl, sl
 8007d82:	4699      	mov	r9, r3
 8007d84:	46a2      	mov	sl, r4
 8007d86:	eb19 0905 	adds.w	r9, r9, r5
 8007d8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007d8e:	f04f 0100 	mov.w	r1, #0
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007da2:	4689      	mov	r9, r1
 8007da4:	4692      	mov	sl, r2
 8007da6:	eb19 0005 	adds.w	r0, r9, r5
 8007daa:	eb4a 0106 	adc.w	r1, sl, r6
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	461d      	mov	r5, r3
 8007db4:	f04f 0600 	mov.w	r6, #0
 8007db8:	196b      	adds	r3, r5, r5
 8007dba:	eb46 0406 	adc.w	r4, r6, r6
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	f7f8 ff41 	bl	8000c48 <__aeabi_uldivmod>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4b6a      	ldr	r3, [pc, #424]	; (8007f78 <UART_SetConfig+0x384>)
 8007dce:	fba3 1302 	umull	r1, r3, r3, r2
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	2164      	movs	r1, #100	; 0x64
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	3332      	adds	r3, #50	; 0x32
 8007de0:	4a65      	ldr	r2, [pc, #404]	; (8007f78 <UART_SetConfig+0x384>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	f003 0207 	and.w	r2, r3, #7
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4442      	add	r2, r8
 8007df2:	609a      	str	r2, [r3, #8]
 8007df4:	e26f      	b.n	80082d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007df6:	f7fe f823 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 8007dfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	461d      	mov	r5, r3
 8007e00:	f04f 0600 	mov.w	r6, #0
 8007e04:	46a8      	mov	r8, r5
 8007e06:	46b1      	mov	r9, r6
 8007e08:	eb18 0308 	adds.w	r3, r8, r8
 8007e0c:	eb49 0409 	adc.w	r4, r9, r9
 8007e10:	4698      	mov	r8, r3
 8007e12:	46a1      	mov	r9, r4
 8007e14:	eb18 0805 	adds.w	r8, r8, r5
 8007e18:	eb49 0906 	adc.w	r9, r9, r6
 8007e1c:	f04f 0100 	mov.w	r1, #0
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e30:	4688      	mov	r8, r1
 8007e32:	4691      	mov	r9, r2
 8007e34:	eb18 0005 	adds.w	r0, r8, r5
 8007e38:	eb49 0106 	adc.w	r1, r9, r6
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	461d      	mov	r5, r3
 8007e42:	f04f 0600 	mov.w	r6, #0
 8007e46:	196b      	adds	r3, r5, r5
 8007e48:	eb46 0406 	adc.w	r4, r6, r6
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4623      	mov	r3, r4
 8007e50:	f7f8 fefa 	bl	8000c48 <__aeabi_uldivmod>
 8007e54:	4603      	mov	r3, r0
 8007e56:	460c      	mov	r4, r1
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4b47      	ldr	r3, [pc, #284]	; (8007f78 <UART_SetConfig+0x384>)
 8007e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	461d      	mov	r5, r3
 8007e6a:	f04f 0600 	mov.w	r6, #0
 8007e6e:	46a9      	mov	r9, r5
 8007e70:	46b2      	mov	sl, r6
 8007e72:	eb19 0309 	adds.w	r3, r9, r9
 8007e76:	eb4a 040a 	adc.w	r4, sl, sl
 8007e7a:	4699      	mov	r9, r3
 8007e7c:	46a2      	mov	sl, r4
 8007e7e:	eb19 0905 	adds.w	r9, r9, r5
 8007e82:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e86:	f04f 0100 	mov.w	r1, #0
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e9a:	4689      	mov	r9, r1
 8007e9c:	4692      	mov	sl, r2
 8007e9e:	eb19 0005 	adds.w	r0, r9, r5
 8007ea2:	eb4a 0106 	adc.w	r1, sl, r6
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	461d      	mov	r5, r3
 8007eac:	f04f 0600 	mov.w	r6, #0
 8007eb0:	196b      	adds	r3, r5, r5
 8007eb2:	eb46 0406 	adc.w	r4, r6, r6
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	4623      	mov	r3, r4
 8007eba:	f7f8 fec5 	bl	8000c48 <__aeabi_uldivmod>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	4b2c      	ldr	r3, [pc, #176]	; (8007f78 <UART_SetConfig+0x384>)
 8007ec6:	fba3 1302 	umull	r1, r3, r3, r2
 8007eca:	095b      	lsrs	r3, r3, #5
 8007ecc:	2164      	movs	r1, #100	; 0x64
 8007ece:	fb01 f303 	mul.w	r3, r1, r3
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	3332      	adds	r3, #50	; 0x32
 8007ed8:	4a27      	ldr	r2, [pc, #156]	; (8007f78 <UART_SetConfig+0x384>)
 8007eda:	fba2 2303 	umull	r2, r3, r2, r3
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ee6:	4498      	add	r8, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	461d      	mov	r5, r3
 8007eec:	f04f 0600 	mov.w	r6, #0
 8007ef0:	46a9      	mov	r9, r5
 8007ef2:	46b2      	mov	sl, r6
 8007ef4:	eb19 0309 	adds.w	r3, r9, r9
 8007ef8:	eb4a 040a 	adc.w	r4, sl, sl
 8007efc:	4699      	mov	r9, r3
 8007efe:	46a2      	mov	sl, r4
 8007f00:	eb19 0905 	adds.w	r9, r9, r5
 8007f04:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f08:	f04f 0100 	mov.w	r1, #0
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f1c:	4689      	mov	r9, r1
 8007f1e:	4692      	mov	sl, r2
 8007f20:	eb19 0005 	adds.w	r0, r9, r5
 8007f24:	eb4a 0106 	adc.w	r1, sl, r6
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	461d      	mov	r5, r3
 8007f2e:	f04f 0600 	mov.w	r6, #0
 8007f32:	196b      	adds	r3, r5, r5
 8007f34:	eb46 0406 	adc.w	r4, r6, r6
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4623      	mov	r3, r4
 8007f3c:	f7f8 fe84 	bl	8000c48 <__aeabi_uldivmod>
 8007f40:	4603      	mov	r3, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	461a      	mov	r2, r3
 8007f46:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <UART_SetConfig+0x384>)
 8007f48:	fba3 1302 	umull	r1, r3, r3, r2
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	2164      	movs	r1, #100	; 0x64
 8007f50:	fb01 f303 	mul.w	r3, r1, r3
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	3332      	adds	r3, #50	; 0x32
 8007f5a:	4a07      	ldr	r2, [pc, #28]	; (8007f78 <UART_SetConfig+0x384>)
 8007f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	f003 0207 	and.w	r2, r3, #7
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4442      	add	r2, r8
 8007f6c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007f6e:	e1b2      	b.n	80082d6 <UART_SetConfig+0x6e2>
 8007f70:	40011000 	.word	0x40011000
 8007f74:	40011400 	.word	0x40011400
 8007f78:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4ad7      	ldr	r2, [pc, #860]	; (80082e0 <UART_SetConfig+0x6ec>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d005      	beq.n	8007f92 <UART_SetConfig+0x39e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4ad6      	ldr	r2, [pc, #856]	; (80082e4 <UART_SetConfig+0x6f0>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	f040 80d1 	bne.w	8008134 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f92:	f7fd ff69 	bl	8005e68 <HAL_RCC_GetPCLK2Freq>
 8007f96:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	469a      	mov	sl, r3
 8007f9c:	f04f 0b00 	mov.w	fp, #0
 8007fa0:	46d0      	mov	r8, sl
 8007fa2:	46d9      	mov	r9, fp
 8007fa4:	eb18 0308 	adds.w	r3, r8, r8
 8007fa8:	eb49 0409 	adc.w	r4, r9, r9
 8007fac:	4698      	mov	r8, r3
 8007fae:	46a1      	mov	r9, r4
 8007fb0:	eb18 080a 	adds.w	r8, r8, sl
 8007fb4:	eb49 090b 	adc.w	r9, r9, fp
 8007fb8:	f04f 0100 	mov.w	r1, #0
 8007fbc:	f04f 0200 	mov.w	r2, #0
 8007fc0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007fc4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007fc8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007fcc:	4688      	mov	r8, r1
 8007fce:	4691      	mov	r9, r2
 8007fd0:	eb1a 0508 	adds.w	r5, sl, r8
 8007fd4:	eb4b 0609 	adc.w	r6, fp, r9
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	f04f 0400 	mov.w	r4, #0
 8007fea:	0094      	lsls	r4, r2, #2
 8007fec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ff0:	008b      	lsls	r3, r1, #2
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	f7f8 fe25 	bl	8000c48 <__aeabi_uldivmod>
 8007ffe:	4603      	mov	r3, r0
 8008000:	460c      	mov	r4, r1
 8008002:	461a      	mov	r2, r3
 8008004:	4bb8      	ldr	r3, [pc, #736]	; (80082e8 <UART_SetConfig+0x6f4>)
 8008006:	fba3 2302 	umull	r2, r3, r3, r2
 800800a:	095b      	lsrs	r3, r3, #5
 800800c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	469b      	mov	fp, r3
 8008014:	f04f 0c00 	mov.w	ip, #0
 8008018:	46d9      	mov	r9, fp
 800801a:	46e2      	mov	sl, ip
 800801c:	eb19 0309 	adds.w	r3, r9, r9
 8008020:	eb4a 040a 	adc.w	r4, sl, sl
 8008024:	4699      	mov	r9, r3
 8008026:	46a2      	mov	sl, r4
 8008028:	eb19 090b 	adds.w	r9, r9, fp
 800802c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008030:	f04f 0100 	mov.w	r1, #0
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800803c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008040:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008044:	4689      	mov	r9, r1
 8008046:	4692      	mov	sl, r2
 8008048:	eb1b 0509 	adds.w	r5, fp, r9
 800804c:	eb4c 060a 	adc.w	r6, ip, sl
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	4619      	mov	r1, r3
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	f04f 0300 	mov.w	r3, #0
 800805e:	f04f 0400 	mov.w	r4, #0
 8008062:	0094      	lsls	r4, r2, #2
 8008064:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008068:	008b      	lsls	r3, r1, #2
 800806a:	461a      	mov	r2, r3
 800806c:	4623      	mov	r3, r4
 800806e:	4628      	mov	r0, r5
 8008070:	4631      	mov	r1, r6
 8008072:	f7f8 fde9 	bl	8000c48 <__aeabi_uldivmod>
 8008076:	4603      	mov	r3, r0
 8008078:	460c      	mov	r4, r1
 800807a:	461a      	mov	r2, r3
 800807c:	4b9a      	ldr	r3, [pc, #616]	; (80082e8 <UART_SetConfig+0x6f4>)
 800807e:	fba3 1302 	umull	r1, r3, r3, r2
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	2164      	movs	r1, #100	; 0x64
 8008086:	fb01 f303 	mul.w	r3, r1, r3
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	3332      	adds	r3, #50	; 0x32
 8008090:	4a95      	ldr	r2, [pc, #596]	; (80082e8 <UART_SetConfig+0x6f4>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	095b      	lsrs	r3, r3, #5
 8008098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800809c:	4498      	add	r8, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	469b      	mov	fp, r3
 80080a2:	f04f 0c00 	mov.w	ip, #0
 80080a6:	46d9      	mov	r9, fp
 80080a8:	46e2      	mov	sl, ip
 80080aa:	eb19 0309 	adds.w	r3, r9, r9
 80080ae:	eb4a 040a 	adc.w	r4, sl, sl
 80080b2:	4699      	mov	r9, r3
 80080b4:	46a2      	mov	sl, r4
 80080b6:	eb19 090b 	adds.w	r9, r9, fp
 80080ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80080be:	f04f 0100 	mov.w	r1, #0
 80080c2:	f04f 0200 	mov.w	r2, #0
 80080c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080d2:	4689      	mov	r9, r1
 80080d4:	4692      	mov	sl, r2
 80080d6:	eb1b 0509 	adds.w	r5, fp, r9
 80080da:	eb4c 060a 	adc.w	r6, ip, sl
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	4619      	mov	r1, r3
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	f04f 0400 	mov.w	r4, #0
 80080f0:	0094      	lsls	r4, r2, #2
 80080f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080f6:	008b      	lsls	r3, r1, #2
 80080f8:	461a      	mov	r2, r3
 80080fa:	4623      	mov	r3, r4
 80080fc:	4628      	mov	r0, r5
 80080fe:	4631      	mov	r1, r6
 8008100:	f7f8 fda2 	bl	8000c48 <__aeabi_uldivmod>
 8008104:	4603      	mov	r3, r0
 8008106:	460c      	mov	r4, r1
 8008108:	461a      	mov	r2, r3
 800810a:	4b77      	ldr	r3, [pc, #476]	; (80082e8 <UART_SetConfig+0x6f4>)
 800810c:	fba3 1302 	umull	r1, r3, r3, r2
 8008110:	095b      	lsrs	r3, r3, #5
 8008112:	2164      	movs	r1, #100	; 0x64
 8008114:	fb01 f303 	mul.w	r3, r1, r3
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	3332      	adds	r3, #50	; 0x32
 800811e:	4a72      	ldr	r2, [pc, #456]	; (80082e8 <UART_SetConfig+0x6f4>)
 8008120:	fba2 2303 	umull	r2, r3, r2, r3
 8008124:	095b      	lsrs	r3, r3, #5
 8008126:	f003 020f 	and.w	r2, r3, #15
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4442      	add	r2, r8
 8008130:	609a      	str	r2, [r3, #8]
 8008132:	e0d0      	b.n	80082d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008134:	f7fd fe84 	bl	8005e40 <HAL_RCC_GetPCLK1Freq>
 8008138:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	469a      	mov	sl, r3
 800813e:	f04f 0b00 	mov.w	fp, #0
 8008142:	46d0      	mov	r8, sl
 8008144:	46d9      	mov	r9, fp
 8008146:	eb18 0308 	adds.w	r3, r8, r8
 800814a:	eb49 0409 	adc.w	r4, r9, r9
 800814e:	4698      	mov	r8, r3
 8008150:	46a1      	mov	r9, r4
 8008152:	eb18 080a 	adds.w	r8, r8, sl
 8008156:	eb49 090b 	adc.w	r9, r9, fp
 800815a:	f04f 0100 	mov.w	r1, #0
 800815e:	f04f 0200 	mov.w	r2, #0
 8008162:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008166:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800816a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800816e:	4688      	mov	r8, r1
 8008170:	4691      	mov	r9, r2
 8008172:	eb1a 0508 	adds.w	r5, sl, r8
 8008176:	eb4b 0609 	adc.w	r6, fp, r9
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	4619      	mov	r1, r3
 8008180:	f04f 0200 	mov.w	r2, #0
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	f04f 0400 	mov.w	r4, #0
 800818c:	0094      	lsls	r4, r2, #2
 800818e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008192:	008b      	lsls	r3, r1, #2
 8008194:	461a      	mov	r2, r3
 8008196:	4623      	mov	r3, r4
 8008198:	4628      	mov	r0, r5
 800819a:	4631      	mov	r1, r6
 800819c:	f7f8 fd54 	bl	8000c48 <__aeabi_uldivmod>
 80081a0:	4603      	mov	r3, r0
 80081a2:	460c      	mov	r4, r1
 80081a4:	461a      	mov	r2, r3
 80081a6:	4b50      	ldr	r3, [pc, #320]	; (80082e8 <UART_SetConfig+0x6f4>)
 80081a8:	fba3 2302 	umull	r2, r3, r3, r2
 80081ac:	095b      	lsrs	r3, r3, #5
 80081ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	469b      	mov	fp, r3
 80081b6:	f04f 0c00 	mov.w	ip, #0
 80081ba:	46d9      	mov	r9, fp
 80081bc:	46e2      	mov	sl, ip
 80081be:	eb19 0309 	adds.w	r3, r9, r9
 80081c2:	eb4a 040a 	adc.w	r4, sl, sl
 80081c6:	4699      	mov	r9, r3
 80081c8:	46a2      	mov	sl, r4
 80081ca:	eb19 090b 	adds.w	r9, r9, fp
 80081ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80081d2:	f04f 0100 	mov.w	r1, #0
 80081d6:	f04f 0200 	mov.w	r2, #0
 80081da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081e6:	4689      	mov	r9, r1
 80081e8:	4692      	mov	sl, r2
 80081ea:	eb1b 0509 	adds.w	r5, fp, r9
 80081ee:	eb4c 060a 	adc.w	r6, ip, sl
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	4619      	mov	r1, r3
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	f04f 0400 	mov.w	r4, #0
 8008204:	0094      	lsls	r4, r2, #2
 8008206:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800820a:	008b      	lsls	r3, r1, #2
 800820c:	461a      	mov	r2, r3
 800820e:	4623      	mov	r3, r4
 8008210:	4628      	mov	r0, r5
 8008212:	4631      	mov	r1, r6
 8008214:	f7f8 fd18 	bl	8000c48 <__aeabi_uldivmod>
 8008218:	4603      	mov	r3, r0
 800821a:	460c      	mov	r4, r1
 800821c:	461a      	mov	r2, r3
 800821e:	4b32      	ldr	r3, [pc, #200]	; (80082e8 <UART_SetConfig+0x6f4>)
 8008220:	fba3 1302 	umull	r1, r3, r3, r2
 8008224:	095b      	lsrs	r3, r3, #5
 8008226:	2164      	movs	r1, #100	; 0x64
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	3332      	adds	r3, #50	; 0x32
 8008232:	4a2d      	ldr	r2, [pc, #180]	; (80082e8 <UART_SetConfig+0x6f4>)
 8008234:	fba2 2303 	umull	r2, r3, r2, r3
 8008238:	095b      	lsrs	r3, r3, #5
 800823a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800823e:	4498      	add	r8, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	469b      	mov	fp, r3
 8008244:	f04f 0c00 	mov.w	ip, #0
 8008248:	46d9      	mov	r9, fp
 800824a:	46e2      	mov	sl, ip
 800824c:	eb19 0309 	adds.w	r3, r9, r9
 8008250:	eb4a 040a 	adc.w	r4, sl, sl
 8008254:	4699      	mov	r9, r3
 8008256:	46a2      	mov	sl, r4
 8008258:	eb19 090b 	adds.w	r9, r9, fp
 800825c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008260:	f04f 0100 	mov.w	r1, #0
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800826c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008270:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008274:	4689      	mov	r9, r1
 8008276:	4692      	mov	sl, r2
 8008278:	eb1b 0509 	adds.w	r5, fp, r9
 800827c:	eb4c 060a 	adc.w	r6, ip, sl
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	4619      	mov	r1, r3
 8008286:	f04f 0200 	mov.w	r2, #0
 800828a:	f04f 0300 	mov.w	r3, #0
 800828e:	f04f 0400 	mov.w	r4, #0
 8008292:	0094      	lsls	r4, r2, #2
 8008294:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008298:	008b      	lsls	r3, r1, #2
 800829a:	461a      	mov	r2, r3
 800829c:	4623      	mov	r3, r4
 800829e:	4628      	mov	r0, r5
 80082a0:	4631      	mov	r1, r6
 80082a2:	f7f8 fcd1 	bl	8000c48 <__aeabi_uldivmod>
 80082a6:	4603      	mov	r3, r0
 80082a8:	460c      	mov	r4, r1
 80082aa:	461a      	mov	r2, r3
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <UART_SetConfig+0x6f4>)
 80082ae:	fba3 1302 	umull	r1, r3, r3, r2
 80082b2:	095b      	lsrs	r3, r3, #5
 80082b4:	2164      	movs	r1, #100	; 0x64
 80082b6:	fb01 f303 	mul.w	r3, r1, r3
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	3332      	adds	r3, #50	; 0x32
 80082c0:	4a09      	ldr	r2, [pc, #36]	; (80082e8 <UART_SetConfig+0x6f4>)
 80082c2:	fba2 2303 	umull	r2, r3, r2, r3
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	f003 020f 	and.w	r2, r3, #15
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4442      	add	r2, r8
 80082d2:	609a      	str	r2, [r3, #8]
}
 80082d4:	e7ff      	b.n	80082d6 <UART_SetConfig+0x6e2>
 80082d6:	bf00      	nop
 80082d8:	3714      	adds	r7, #20
 80082da:	46bd      	mov	sp, r7
 80082dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e0:	40011000 	.word	0x40011000
 80082e4:	40011400 	.word	0x40011400
 80082e8:	51eb851f 	.word	0x51eb851f

080082ec <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]
 80082fe:	e00c      	b.n	800831a <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	4413      	add	r3, r2
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3301      	adds	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b02      	cmp	r3, #2
 800831e:	ddef      	ble.n	8008300 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	79fa      	ldrb	r2, [r7, #7]
 8008324:	761a      	strb	r2, [r3, #24]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800833e:	f04f 0300 	mov.w	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	7e1b      	ldrb	r3, [r3, #24]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d01f      	beq.n	800838c <FILTER_process+0x5a>
 800834c:	2b02      	cmp	r3, #2
 800834e:	d047      	beq.n	80083e0 <FILTER_process+0xae>
 8008350:	2b00      	cmp	r3, #0
 8008352:	d148      	bne.n	80083e6 <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	ed93 7a00 	vldr	s14, [r3]
 800835a:	edd7 7a00 	vldr	s15, [r7]
 800835e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	edd3 6a04 	vldr	s13, [r3, #16]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	edd3 7a01 	vldr	s15, [r3, #4]
 800836e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	60fb      	str	r3, [r7, #12]
			break ;
 800838a:	e02f      	b.n	80083ec <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	ed93 7a00 	vldr	s14, [r3]
 8008392:	edd7 7a00 	vldr	s15, [r7]
 8008396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	edd3 6a04 	vldr	s13, [r3, #16]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80083a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	edd3 6a05 	vldr	s13, [r3, #20]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80083ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68da      	ldr	r2, [r3, #12]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	60fb      	str	r3, [r7, #12]
			break;
 80083de:	e005      	b.n	80083ec <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
			break;
 80083e4:	e002      	b.n	80083ec <FILTER_process+0xba>
		default:
			to_return = new_value ;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	60fb      	str	r3, [r7, #12]
			break;
 80083ea:	bf00      	nop
	}

	return to_return ;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	ee07 3a90 	vmov	s15, r3
};
 80083f2:	eeb0 0a67 	vmov.f32	s0, s15
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <LED_SEQUENCE_init>:

#include "../Inc/Sequence_led.h"


//On initialise les paramètres
void LED_SEQUENCE_init(sequence_led_t * seq_led, GPIO_TypeDef* gpio, uint16_t gpio_pin, int32_t init_seq, uint32_t periode, int8_t length_sequence, bool_e output_logic){
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	4613      	mov	r3, r2
 800840e:	80fb      	strh	r3, [r7, #6]
	//Init des varaibles
	seq_led->compteur = 0;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	741a      	strb	r2, [r3, #16]
	seq_led->gpio = gpio ;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	601a      	str	r2, [r3, #0]
	seq_led->gpio_pin = gpio_pin ;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	88fa      	ldrh	r2, [r7, #6]
 8008420:	809a      	strh	r2, [r3, #4]
	seq_led->length_sequence = length_sequence ;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	7f3a      	ldrb	r2, [r7, #28]
 8008426:	745a      	strb	r2, [r3, #17]
	seq_led->periode = periode ;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	609a      	str	r2, [r3, #8]
	seq_led->output_logic = output_logic ;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a3a      	ldr	r2, [r7, #32]
 8008432:	619a      	str	r2, [r3, #24]
	if(seq_led->output_logic == 1)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d102      	bne.n	8008442 <LED_SEQUENCE_init+0x42>
		//Si logique négative on inverse la séquence
		init_seq = ~init_seq ;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	43db      	mvns	r3, r3
 8008440:	603b      	str	r3, [r7, #0]
	seq_led->sequence = init_seq ;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	60da      	str	r2, [r3, #12]
	seq_led->previous_time = 0 ;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	615a      	str	r2, [r3, #20]



}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
	...

0800845c <LED_SEQUENCE_play>:
	seq_led->compteur = 0 ;
	seq_led->sequence = seq ;
}

//On change la sortie de la led en fonction de la séquence active
void LED_SEQUENCE_play(sequence_led_t * seq_led, uint32_t current_time_us){
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
	if(current_time_us / 1000 > seq_led->previous_time + seq_led->periode){
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	4a25      	ldr	r2, [pc, #148]	; (8008500 <LED_SEQUENCE_play+0xa4>)
 800846a:	fba2 2303 	umull	r2, r3, r2, r3
 800846e:	099a      	lsrs	r2, r3, #6
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6959      	ldr	r1, [r3, #20]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	440b      	add	r3, r1
 800847a:	429a      	cmp	r2, r3
 800847c:	d93a      	bls.n	80084f4 <LED_SEQUENCE_play+0x98>
		seq_led->previous_time += seq_led->periode ;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695a      	ldr	r2, [r3, #20]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	441a      	add	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	615a      	str	r2, [r3, #20]
		//on récupère le niveau logique de la sortie
		bool_e output = ((seq_led->sequence) >> ((seq_led->length_sequence - seq_led->compteur) - 1)) & 1 ;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8008496:	4619      	mov	r1, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800849e:	1acb      	subs	r3, r1, r3
 80084a0:	3b01      	subs	r3, #1
 80084a2:	fa42 f303 	asr.w	r3, r2, r3
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
		//On update la sortie
		if(output)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d005      	beq.n	80084be <LED_SEQUENCE_play+0x62>
			seq_led->gpio->BSRR = seq_led->gpio_pin ;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	889a      	ldrh	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	619a      	str	r2, [r3, #24]
 80084bc:	e006      	b.n	80084cc <LED_SEQUENCE_play+0x70>
		else
			seq_led->gpio->BSRR = (uint32_t)(seq_led->gpio_pin) << 16U ;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	461a      	mov	r2, r3
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	0412      	lsls	r2, r2, #16
 80084ca:	619a      	str	r2, [r3, #24]
		//on update le compteur
		seq_led->compteur ++ ;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	3301      	adds	r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	b25a      	sxtb	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	741a      	strb	r2, [r3, #16]
		//TODO : verif l'init si length > 0
		if(seq_led->compteur == seq_led->length_sequence)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f993 2010 	ldrsb.w	r2, [r3, #16]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d102      	bne.n	80084f4 <LED_SEQUENCE_play+0x98>
			seq_led->compteur = 0 ;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	741a      	strb	r2, [r3, #16]
	}
}
 80084f4:	bf00      	nop
 80084f6:	3714      	adds	r7, #20
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr
 8008500:	10624dd3 	.word	0x10624dd3

08008504 <__errno>:
 8008504:	4b01      	ldr	r3, [pc, #4]	; (800850c <__errno+0x8>)
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000afc 	.word	0x20000afc

08008510 <__libc_init_array>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	4e0d      	ldr	r6, [pc, #52]	; (8008548 <__libc_init_array+0x38>)
 8008514:	4c0d      	ldr	r4, [pc, #52]	; (800854c <__libc_init_array+0x3c>)
 8008516:	1ba4      	subs	r4, r4, r6
 8008518:	10a4      	asrs	r4, r4, #2
 800851a:	2500      	movs	r5, #0
 800851c:	42a5      	cmp	r5, r4
 800851e:	d109      	bne.n	8008534 <__libc_init_array+0x24>
 8008520:	4e0b      	ldr	r6, [pc, #44]	; (8008550 <__libc_init_array+0x40>)
 8008522:	4c0c      	ldr	r4, [pc, #48]	; (8008554 <__libc_init_array+0x44>)
 8008524:	f002 fe18 	bl	800b158 <_init>
 8008528:	1ba4      	subs	r4, r4, r6
 800852a:	10a4      	asrs	r4, r4, #2
 800852c:	2500      	movs	r5, #0
 800852e:	42a5      	cmp	r5, r4
 8008530:	d105      	bne.n	800853e <__libc_init_array+0x2e>
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008538:	4798      	blx	r3
 800853a:	3501      	adds	r5, #1
 800853c:	e7ee      	b.n	800851c <__libc_init_array+0xc>
 800853e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008542:	4798      	blx	r3
 8008544:	3501      	adds	r5, #1
 8008546:	e7f2      	b.n	800852e <__libc_init_array+0x1e>
 8008548:	0800b47c 	.word	0x0800b47c
 800854c:	0800b47c 	.word	0x0800b47c
 8008550:	0800b47c 	.word	0x0800b47c
 8008554:	0800b480 	.word	0x0800b480

08008558 <memmove>:
 8008558:	4288      	cmp	r0, r1
 800855a:	b510      	push	{r4, lr}
 800855c:	eb01 0302 	add.w	r3, r1, r2
 8008560:	d807      	bhi.n	8008572 <memmove+0x1a>
 8008562:	1e42      	subs	r2, r0, #1
 8008564:	4299      	cmp	r1, r3
 8008566:	d00a      	beq.n	800857e <memmove+0x26>
 8008568:	f811 4b01 	ldrb.w	r4, [r1], #1
 800856c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008570:	e7f8      	b.n	8008564 <memmove+0xc>
 8008572:	4283      	cmp	r3, r0
 8008574:	d9f5      	bls.n	8008562 <memmove+0xa>
 8008576:	1881      	adds	r1, r0, r2
 8008578:	1ad2      	subs	r2, r2, r3
 800857a:	42d3      	cmn	r3, r2
 800857c:	d100      	bne.n	8008580 <memmove+0x28>
 800857e:	bd10      	pop	{r4, pc}
 8008580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008584:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008588:	e7f7      	b.n	800857a <memmove+0x22>

0800858a <memset>:
 800858a:	4402      	add	r2, r0
 800858c:	4603      	mov	r3, r0
 800858e:	4293      	cmp	r3, r2
 8008590:	d100      	bne.n	8008594 <memset+0xa>
 8008592:	4770      	bx	lr
 8008594:	f803 1b01 	strb.w	r1, [r3], #1
 8008598:	e7f9      	b.n	800858e <memset+0x4>

0800859a <__cvt>:
 800859a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800859e:	ec55 4b10 	vmov	r4, r5, d0
 80085a2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80085a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085a8:	2d00      	cmp	r5, #0
 80085aa:	460e      	mov	r6, r1
 80085ac:	4691      	mov	r9, r2
 80085ae:	4619      	mov	r1, r3
 80085b0:	bfb8      	it	lt
 80085b2:	4622      	movlt	r2, r4
 80085b4:	462b      	mov	r3, r5
 80085b6:	f027 0720 	bic.w	r7, r7, #32
 80085ba:	bfbb      	ittet	lt
 80085bc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085c0:	461d      	movlt	r5, r3
 80085c2:	2300      	movge	r3, #0
 80085c4:	232d      	movlt	r3, #45	; 0x2d
 80085c6:	bfb8      	it	lt
 80085c8:	4614      	movlt	r4, r2
 80085ca:	2f46      	cmp	r7, #70	; 0x46
 80085cc:	700b      	strb	r3, [r1, #0]
 80085ce:	d004      	beq.n	80085da <__cvt+0x40>
 80085d0:	2f45      	cmp	r7, #69	; 0x45
 80085d2:	d100      	bne.n	80085d6 <__cvt+0x3c>
 80085d4:	3601      	adds	r6, #1
 80085d6:	2102      	movs	r1, #2
 80085d8:	e000      	b.n	80085dc <__cvt+0x42>
 80085da:	2103      	movs	r1, #3
 80085dc:	ab03      	add	r3, sp, #12
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	ab02      	add	r3, sp, #8
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	4632      	mov	r2, r6
 80085e6:	4653      	mov	r3, sl
 80085e8:	ec45 4b10 	vmov	d0, r4, r5
 80085ec:	f000 fea8 	bl	8009340 <_dtoa_r>
 80085f0:	2f47      	cmp	r7, #71	; 0x47
 80085f2:	4680      	mov	r8, r0
 80085f4:	d102      	bne.n	80085fc <__cvt+0x62>
 80085f6:	f019 0f01 	tst.w	r9, #1
 80085fa:	d026      	beq.n	800864a <__cvt+0xb0>
 80085fc:	2f46      	cmp	r7, #70	; 0x46
 80085fe:	eb08 0906 	add.w	r9, r8, r6
 8008602:	d111      	bne.n	8008628 <__cvt+0x8e>
 8008604:	f898 3000 	ldrb.w	r3, [r8]
 8008608:	2b30      	cmp	r3, #48	; 0x30
 800860a:	d10a      	bne.n	8008622 <__cvt+0x88>
 800860c:	2200      	movs	r2, #0
 800860e:	2300      	movs	r3, #0
 8008610:	4620      	mov	r0, r4
 8008612:	4629      	mov	r1, r5
 8008614:	f7f8 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008618:	b918      	cbnz	r0, 8008622 <__cvt+0x88>
 800861a:	f1c6 0601 	rsb	r6, r6, #1
 800861e:	f8ca 6000 	str.w	r6, [sl]
 8008622:	f8da 3000 	ldr.w	r3, [sl]
 8008626:	4499      	add	r9, r3
 8008628:	2200      	movs	r2, #0
 800862a:	2300      	movs	r3, #0
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f8 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008634:	b938      	cbnz	r0, 8008646 <__cvt+0xac>
 8008636:	2230      	movs	r2, #48	; 0x30
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	454b      	cmp	r3, r9
 800863c:	d205      	bcs.n	800864a <__cvt+0xb0>
 800863e:	1c59      	adds	r1, r3, #1
 8008640:	9103      	str	r1, [sp, #12]
 8008642:	701a      	strb	r2, [r3, #0]
 8008644:	e7f8      	b.n	8008638 <__cvt+0x9e>
 8008646:	f8cd 900c 	str.w	r9, [sp, #12]
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800864e:	eba3 0308 	sub.w	r3, r3, r8
 8008652:	4640      	mov	r0, r8
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	b004      	add	sp, #16
 8008658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800865c <__exponent>:
 800865c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800865e:	2900      	cmp	r1, #0
 8008660:	4604      	mov	r4, r0
 8008662:	bfba      	itte	lt
 8008664:	4249      	neglt	r1, r1
 8008666:	232d      	movlt	r3, #45	; 0x2d
 8008668:	232b      	movge	r3, #43	; 0x2b
 800866a:	2909      	cmp	r1, #9
 800866c:	f804 2b02 	strb.w	r2, [r4], #2
 8008670:	7043      	strb	r3, [r0, #1]
 8008672:	dd20      	ble.n	80086b6 <__exponent+0x5a>
 8008674:	f10d 0307 	add.w	r3, sp, #7
 8008678:	461f      	mov	r7, r3
 800867a:	260a      	movs	r6, #10
 800867c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008680:	fb06 1115 	mls	r1, r6, r5, r1
 8008684:	3130      	adds	r1, #48	; 0x30
 8008686:	2d09      	cmp	r5, #9
 8008688:	f803 1c01 	strb.w	r1, [r3, #-1]
 800868c:	f103 32ff 	add.w	r2, r3, #4294967295
 8008690:	4629      	mov	r1, r5
 8008692:	dc09      	bgt.n	80086a8 <__exponent+0x4c>
 8008694:	3130      	adds	r1, #48	; 0x30
 8008696:	3b02      	subs	r3, #2
 8008698:	f802 1c01 	strb.w	r1, [r2, #-1]
 800869c:	42bb      	cmp	r3, r7
 800869e:	4622      	mov	r2, r4
 80086a0:	d304      	bcc.n	80086ac <__exponent+0x50>
 80086a2:	1a10      	subs	r0, r2, r0
 80086a4:	b003      	add	sp, #12
 80086a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a8:	4613      	mov	r3, r2
 80086aa:	e7e7      	b.n	800867c <__exponent+0x20>
 80086ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b0:	f804 2b01 	strb.w	r2, [r4], #1
 80086b4:	e7f2      	b.n	800869c <__exponent+0x40>
 80086b6:	2330      	movs	r3, #48	; 0x30
 80086b8:	4419      	add	r1, r3
 80086ba:	7083      	strb	r3, [r0, #2]
 80086bc:	1d02      	adds	r2, r0, #4
 80086be:	70c1      	strb	r1, [r0, #3]
 80086c0:	e7ef      	b.n	80086a2 <__exponent+0x46>
	...

080086c4 <_printf_float>:
 80086c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c8:	b08d      	sub	sp, #52	; 0x34
 80086ca:	460c      	mov	r4, r1
 80086cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80086d0:	4616      	mov	r6, r2
 80086d2:	461f      	mov	r7, r3
 80086d4:	4605      	mov	r5, r0
 80086d6:	f001 fd65 	bl	800a1a4 <_localeconv_r>
 80086da:	6803      	ldr	r3, [r0, #0]
 80086dc:	9304      	str	r3, [sp, #16]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7f7 fd76 	bl	80001d0 <strlen>
 80086e4:	2300      	movs	r3, #0
 80086e6:	930a      	str	r3, [sp, #40]	; 0x28
 80086e8:	f8d8 3000 	ldr.w	r3, [r8]
 80086ec:	9005      	str	r0, [sp, #20]
 80086ee:	3307      	adds	r3, #7
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	f103 0208 	add.w	r2, r3, #8
 80086f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086fc:	f8d4 b000 	ldr.w	fp, [r4]
 8008700:	f8c8 2000 	str.w	r2, [r8]
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800870c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008710:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008714:	9307      	str	r3, [sp, #28]
 8008716:	f8cd 8018 	str.w	r8, [sp, #24]
 800871a:	f04f 32ff 	mov.w	r2, #4294967295
 800871e:	4ba7      	ldr	r3, [pc, #668]	; (80089bc <_printf_float+0x2f8>)
 8008720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008724:	f7f8 fa02 	bl	8000b2c <__aeabi_dcmpun>
 8008728:	bb70      	cbnz	r0, 8008788 <_printf_float+0xc4>
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	4ba3      	ldr	r3, [pc, #652]	; (80089bc <_printf_float+0x2f8>)
 8008730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008734:	f7f8 f9dc 	bl	8000af0 <__aeabi_dcmple>
 8008738:	bb30      	cbnz	r0, 8008788 <_printf_float+0xc4>
 800873a:	2200      	movs	r2, #0
 800873c:	2300      	movs	r3, #0
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	f7f8 f9cb 	bl	8000adc <__aeabi_dcmplt>
 8008746:	b110      	cbz	r0, 800874e <_printf_float+0x8a>
 8008748:	232d      	movs	r3, #45	; 0x2d
 800874a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800874e:	4a9c      	ldr	r2, [pc, #624]	; (80089c0 <_printf_float+0x2fc>)
 8008750:	4b9c      	ldr	r3, [pc, #624]	; (80089c4 <_printf_float+0x300>)
 8008752:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008756:	bf8c      	ite	hi
 8008758:	4690      	movhi	r8, r2
 800875a:	4698      	movls	r8, r3
 800875c:	2303      	movs	r3, #3
 800875e:	f02b 0204 	bic.w	r2, fp, #4
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	6022      	str	r2, [r4, #0]
 8008766:	f04f 0900 	mov.w	r9, #0
 800876a:	9700      	str	r7, [sp, #0]
 800876c:	4633      	mov	r3, r6
 800876e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008770:	4621      	mov	r1, r4
 8008772:	4628      	mov	r0, r5
 8008774:	f000 f9e6 	bl	8008b44 <_printf_common>
 8008778:	3001      	adds	r0, #1
 800877a:	f040 808d 	bne.w	8008898 <_printf_float+0x1d4>
 800877e:	f04f 30ff 	mov.w	r0, #4294967295
 8008782:	b00d      	add	sp, #52	; 0x34
 8008784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008788:	4642      	mov	r2, r8
 800878a:	464b      	mov	r3, r9
 800878c:	4640      	mov	r0, r8
 800878e:	4649      	mov	r1, r9
 8008790:	f7f8 f9cc 	bl	8000b2c <__aeabi_dcmpun>
 8008794:	b110      	cbz	r0, 800879c <_printf_float+0xd8>
 8008796:	4a8c      	ldr	r2, [pc, #560]	; (80089c8 <_printf_float+0x304>)
 8008798:	4b8c      	ldr	r3, [pc, #560]	; (80089cc <_printf_float+0x308>)
 800879a:	e7da      	b.n	8008752 <_printf_float+0x8e>
 800879c:	6861      	ldr	r1, [r4, #4]
 800879e:	1c4b      	adds	r3, r1, #1
 80087a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80087a4:	a80a      	add	r0, sp, #40	; 0x28
 80087a6:	d13e      	bne.n	8008826 <_printf_float+0x162>
 80087a8:	2306      	movs	r3, #6
 80087aa:	6063      	str	r3, [r4, #4]
 80087ac:	2300      	movs	r3, #0
 80087ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087b2:	ab09      	add	r3, sp, #36	; 0x24
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	ec49 8b10 	vmov	d0, r8, r9
 80087ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	f8cd a004 	str.w	sl, [sp, #4]
 80087c4:	6861      	ldr	r1, [r4, #4]
 80087c6:	4628      	mov	r0, r5
 80087c8:	f7ff fee7 	bl	800859a <__cvt>
 80087cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80087d0:	2b47      	cmp	r3, #71	; 0x47
 80087d2:	4680      	mov	r8, r0
 80087d4:	d109      	bne.n	80087ea <_printf_float+0x126>
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	1cd8      	adds	r0, r3, #3
 80087da:	db02      	blt.n	80087e2 <_printf_float+0x11e>
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	4293      	cmp	r3, r2
 80087e0:	dd47      	ble.n	8008872 <_printf_float+0x1ae>
 80087e2:	f1aa 0a02 	sub.w	sl, sl, #2
 80087e6:	fa5f fa8a 	uxtb.w	sl, sl
 80087ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80087ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087f0:	d824      	bhi.n	800883c <_printf_float+0x178>
 80087f2:	3901      	subs	r1, #1
 80087f4:	4652      	mov	r2, sl
 80087f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087fa:	9109      	str	r1, [sp, #36]	; 0x24
 80087fc:	f7ff ff2e 	bl	800865c <__exponent>
 8008800:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008802:	1813      	adds	r3, r2, r0
 8008804:	2a01      	cmp	r2, #1
 8008806:	4681      	mov	r9, r0
 8008808:	6123      	str	r3, [r4, #16]
 800880a:	dc02      	bgt.n	8008812 <_printf_float+0x14e>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	07d1      	lsls	r1, r2, #31
 8008810:	d501      	bpl.n	8008816 <_printf_float+0x152>
 8008812:	3301      	adds	r3, #1
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0a5      	beq.n	800876a <_printf_float+0xa6>
 800881e:	232d      	movs	r3, #45	; 0x2d
 8008820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008824:	e7a1      	b.n	800876a <_printf_float+0xa6>
 8008826:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800882a:	f000 8177 	beq.w	8008b1c <_printf_float+0x458>
 800882e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008832:	d1bb      	bne.n	80087ac <_printf_float+0xe8>
 8008834:	2900      	cmp	r1, #0
 8008836:	d1b9      	bne.n	80087ac <_printf_float+0xe8>
 8008838:	2301      	movs	r3, #1
 800883a:	e7b6      	b.n	80087aa <_printf_float+0xe6>
 800883c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008840:	d119      	bne.n	8008876 <_printf_float+0x1b2>
 8008842:	2900      	cmp	r1, #0
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	dd0c      	ble.n	8008862 <_printf_float+0x19e>
 8008848:	6121      	str	r1, [r4, #16]
 800884a:	b913      	cbnz	r3, 8008852 <_printf_float+0x18e>
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	07d2      	lsls	r2, r2, #31
 8008850:	d502      	bpl.n	8008858 <_printf_float+0x194>
 8008852:	3301      	adds	r3, #1
 8008854:	440b      	add	r3, r1
 8008856:	6123      	str	r3, [r4, #16]
 8008858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885a:	65a3      	str	r3, [r4, #88]	; 0x58
 800885c:	f04f 0900 	mov.w	r9, #0
 8008860:	e7d9      	b.n	8008816 <_printf_float+0x152>
 8008862:	b913      	cbnz	r3, 800886a <_printf_float+0x1a6>
 8008864:	6822      	ldr	r2, [r4, #0]
 8008866:	07d0      	lsls	r0, r2, #31
 8008868:	d501      	bpl.n	800886e <_printf_float+0x1aa>
 800886a:	3302      	adds	r3, #2
 800886c:	e7f3      	b.n	8008856 <_printf_float+0x192>
 800886e:	2301      	movs	r3, #1
 8008870:	e7f1      	b.n	8008856 <_printf_float+0x192>
 8008872:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008876:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800887a:	4293      	cmp	r3, r2
 800887c:	db05      	blt.n	800888a <_printf_float+0x1c6>
 800887e:	6822      	ldr	r2, [r4, #0]
 8008880:	6123      	str	r3, [r4, #16]
 8008882:	07d1      	lsls	r1, r2, #31
 8008884:	d5e8      	bpl.n	8008858 <_printf_float+0x194>
 8008886:	3301      	adds	r3, #1
 8008888:	e7e5      	b.n	8008856 <_printf_float+0x192>
 800888a:	2b00      	cmp	r3, #0
 800888c:	bfd4      	ite	le
 800888e:	f1c3 0302 	rsble	r3, r3, #2
 8008892:	2301      	movgt	r3, #1
 8008894:	4413      	add	r3, r2
 8008896:	e7de      	b.n	8008856 <_printf_float+0x192>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	055a      	lsls	r2, r3, #21
 800889c:	d407      	bmi.n	80088ae <_printf_float+0x1ea>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	4642      	mov	r2, r8
 80088a2:	4631      	mov	r1, r6
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b8      	blx	r7
 80088a8:	3001      	adds	r0, #1
 80088aa:	d12b      	bne.n	8008904 <_printf_float+0x240>
 80088ac:	e767      	b.n	800877e <_printf_float+0xba>
 80088ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80088b2:	f240 80dc 	bls.w	8008a6e <_printf_float+0x3aa>
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088be:	f7f8 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d033      	beq.n	800892e <_printf_float+0x26a>
 80088c6:	2301      	movs	r3, #1
 80088c8:	4a41      	ldr	r2, [pc, #260]	; (80089d0 <_printf_float+0x30c>)
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	f43f af54 	beq.w	800877e <_printf_float+0xba>
 80088d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088da:	429a      	cmp	r2, r3
 80088dc:	db02      	blt.n	80088e4 <_printf_float+0x220>
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	07d8      	lsls	r0, r3, #31
 80088e2:	d50f      	bpl.n	8008904 <_printf_float+0x240>
 80088e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	f43f af45 	beq.w	800877e <_printf_float+0xba>
 80088f4:	f04f 0800 	mov.w	r8, #0
 80088f8:	f104 091a 	add.w	r9, r4, #26
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	3b01      	subs	r3, #1
 8008900:	4543      	cmp	r3, r8
 8008902:	dc09      	bgt.n	8008918 <_printf_float+0x254>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	079b      	lsls	r3, r3, #30
 8008908:	f100 8103 	bmi.w	8008b12 <_printf_float+0x44e>
 800890c:	68e0      	ldr	r0, [r4, #12]
 800890e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008910:	4298      	cmp	r0, r3
 8008912:	bfb8      	it	lt
 8008914:	4618      	movlt	r0, r3
 8008916:	e734      	b.n	8008782 <_printf_float+0xbe>
 8008918:	2301      	movs	r3, #1
 800891a:	464a      	mov	r2, r9
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f af2b 	beq.w	800877e <_printf_float+0xba>
 8008928:	f108 0801 	add.w	r8, r8, #1
 800892c:	e7e6      	b.n	80088fc <_printf_float+0x238>
 800892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc2b      	bgt.n	800898c <_printf_float+0x2c8>
 8008934:	2301      	movs	r3, #1
 8008936:	4a26      	ldr	r2, [pc, #152]	; (80089d0 <_printf_float+0x30c>)
 8008938:	4631      	mov	r1, r6
 800893a:	4628      	mov	r0, r5
 800893c:	47b8      	blx	r7
 800893e:	3001      	adds	r0, #1
 8008940:	f43f af1d 	beq.w	800877e <_printf_float+0xba>
 8008944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008946:	b923      	cbnz	r3, 8008952 <_printf_float+0x28e>
 8008948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894a:	b913      	cbnz	r3, 8008952 <_printf_float+0x28e>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	07d9      	lsls	r1, r3, #31
 8008950:	d5d8      	bpl.n	8008904 <_printf_float+0x240>
 8008952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008956:	4631      	mov	r1, r6
 8008958:	4628      	mov	r0, r5
 800895a:	47b8      	blx	r7
 800895c:	3001      	adds	r0, #1
 800895e:	f43f af0e 	beq.w	800877e <_printf_float+0xba>
 8008962:	f04f 0900 	mov.w	r9, #0
 8008966:	f104 0a1a 	add.w	sl, r4, #26
 800896a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896c:	425b      	negs	r3, r3
 800896e:	454b      	cmp	r3, r9
 8008970:	dc01      	bgt.n	8008976 <_printf_float+0x2b2>
 8008972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008974:	e794      	b.n	80088a0 <_printf_float+0x1dc>
 8008976:	2301      	movs	r3, #1
 8008978:	4652      	mov	r2, sl
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	f43f aefc 	beq.w	800877e <_printf_float+0xba>
 8008986:	f109 0901 	add.w	r9, r9, #1
 800898a:	e7ee      	b.n	800896a <_printf_float+0x2a6>
 800898c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800898e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008990:	429a      	cmp	r2, r3
 8008992:	bfa8      	it	ge
 8008994:	461a      	movge	r2, r3
 8008996:	2a00      	cmp	r2, #0
 8008998:	4691      	mov	r9, r2
 800899a:	dd07      	ble.n	80089ac <_printf_float+0x2e8>
 800899c:	4613      	mov	r3, r2
 800899e:	4631      	mov	r1, r6
 80089a0:	4642      	mov	r2, r8
 80089a2:	4628      	mov	r0, r5
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	f43f aee9 	beq.w	800877e <_printf_float+0xba>
 80089ac:	f104 031a 	add.w	r3, r4, #26
 80089b0:	f04f 0b00 	mov.w	fp, #0
 80089b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b8:	9306      	str	r3, [sp, #24]
 80089ba:	e015      	b.n	80089e8 <_printf_float+0x324>
 80089bc:	7fefffff 	.word	0x7fefffff
 80089c0:	0800b46a 	.word	0x0800b46a
 80089c4:	0800b1b0 	.word	0x0800b1b0
 80089c8:	0800b1b8 	.word	0x0800b1b8
 80089cc:	0800b1b4 	.word	0x0800b1b4
 80089d0:	0800b1bc 	.word	0x0800b1bc
 80089d4:	2301      	movs	r3, #1
 80089d6:	9a06      	ldr	r2, [sp, #24]
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	47b8      	blx	r7
 80089de:	3001      	adds	r0, #1
 80089e0:	f43f aecd 	beq.w	800877e <_printf_float+0xba>
 80089e4:	f10b 0b01 	add.w	fp, fp, #1
 80089e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80089ec:	ebaa 0309 	sub.w	r3, sl, r9
 80089f0:	455b      	cmp	r3, fp
 80089f2:	dcef      	bgt.n	80089d4 <_printf_float+0x310>
 80089f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089f8:	429a      	cmp	r2, r3
 80089fa:	44d0      	add	r8, sl
 80089fc:	db15      	blt.n	8008a2a <_printf_float+0x366>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	07da      	lsls	r2, r3, #31
 8008a02:	d412      	bmi.n	8008a2a <_printf_float+0x366>
 8008a04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a08:	eba3 020a 	sub.w	r2, r3, sl
 8008a0c:	eba3 0a01 	sub.w	sl, r3, r1
 8008a10:	4592      	cmp	sl, r2
 8008a12:	bfa8      	it	ge
 8008a14:	4692      	movge	sl, r2
 8008a16:	f1ba 0f00 	cmp.w	sl, #0
 8008a1a:	dc0e      	bgt.n	8008a3a <_printf_float+0x376>
 8008a1c:	f04f 0800 	mov.w	r8, #0
 8008a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a24:	f104 091a 	add.w	r9, r4, #26
 8008a28:	e019      	b.n	8008a5e <_printf_float+0x39a>
 8008a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	d1e5      	bne.n	8008a04 <_printf_float+0x340>
 8008a38:	e6a1      	b.n	800877e <_printf_float+0xba>
 8008a3a:	4653      	mov	r3, sl
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	d1e9      	bne.n	8008a1c <_printf_float+0x358>
 8008a48:	e699      	b.n	800877e <_printf_float+0xba>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	464a      	mov	r2, r9
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4628      	mov	r0, r5
 8008a52:	47b8      	blx	r7
 8008a54:	3001      	adds	r0, #1
 8008a56:	f43f ae92 	beq.w	800877e <_printf_float+0xba>
 8008a5a:	f108 0801 	add.w	r8, r8, #1
 8008a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a62:	1a9b      	subs	r3, r3, r2
 8008a64:	eba3 030a 	sub.w	r3, r3, sl
 8008a68:	4543      	cmp	r3, r8
 8008a6a:	dcee      	bgt.n	8008a4a <_printf_float+0x386>
 8008a6c:	e74a      	b.n	8008904 <_printf_float+0x240>
 8008a6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a70:	2a01      	cmp	r2, #1
 8008a72:	dc01      	bgt.n	8008a78 <_printf_float+0x3b4>
 8008a74:	07db      	lsls	r3, r3, #31
 8008a76:	d53a      	bpl.n	8008aee <_printf_float+0x42a>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4642      	mov	r2, r8
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f ae7b 	beq.w	800877e <_printf_float+0xba>
 8008a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b8      	blx	r7
 8008a92:	3001      	adds	r0, #1
 8008a94:	f108 0801 	add.w	r8, r8, #1
 8008a98:	f43f ae71 	beq.w	800877e <_printf_float+0xba>
 8008a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f103 3aff 	add.w	sl, r3, #4294967295
 8008aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f7f8 f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aae:	b9c8      	cbnz	r0, 8008ae4 <_printf_float+0x420>
 8008ab0:	4653      	mov	r3, sl
 8008ab2:	4642      	mov	r2, r8
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	d10e      	bne.n	8008adc <_printf_float+0x418>
 8008abe:	e65e      	b.n	800877e <_printf_float+0xba>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4652      	mov	r2, sl
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f ae57 	beq.w	800877e <_printf_float+0xba>
 8008ad0:	f108 0801 	add.w	r8, r8, #1
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	4543      	cmp	r3, r8
 8008ada:	dcf1      	bgt.n	8008ac0 <_printf_float+0x3fc>
 8008adc:	464b      	mov	r3, r9
 8008ade:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ae2:	e6de      	b.n	80088a2 <_printf_float+0x1de>
 8008ae4:	f04f 0800 	mov.w	r8, #0
 8008ae8:	f104 0a1a 	add.w	sl, r4, #26
 8008aec:	e7f2      	b.n	8008ad4 <_printf_float+0x410>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e7df      	b.n	8008ab2 <_printf_float+0x3ee>
 8008af2:	2301      	movs	r3, #1
 8008af4:	464a      	mov	r2, r9
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	f43f ae3e 	beq.w	800877e <_printf_float+0xba>
 8008b02:	f108 0801 	add.w	r8, r8, #1
 8008b06:	68e3      	ldr	r3, [r4, #12]
 8008b08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	4543      	cmp	r3, r8
 8008b0e:	dcf0      	bgt.n	8008af2 <_printf_float+0x42e>
 8008b10:	e6fc      	b.n	800890c <_printf_float+0x248>
 8008b12:	f04f 0800 	mov.w	r8, #0
 8008b16:	f104 0919 	add.w	r9, r4, #25
 8008b1a:	e7f4      	b.n	8008b06 <_printf_float+0x442>
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	f43f ae8b 	beq.w	8008838 <_printf_float+0x174>
 8008b22:	2300      	movs	r3, #0
 8008b24:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008b28:	ab09      	add	r3, sp, #36	; 0x24
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	ec49 8b10 	vmov	d0, r8, r9
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	f8cd a004 	str.w	sl, [sp, #4]
 8008b36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7ff fd2d 	bl	800859a <__cvt>
 8008b40:	4680      	mov	r8, r0
 8008b42:	e648      	b.n	80087d6 <_printf_float+0x112>

08008b44 <_printf_common>:
 8008b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b48:	4691      	mov	r9, r2
 8008b4a:	461f      	mov	r7, r3
 8008b4c:	688a      	ldr	r2, [r1, #8]
 8008b4e:	690b      	ldr	r3, [r1, #16]
 8008b50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b54:	4293      	cmp	r3, r2
 8008b56:	bfb8      	it	lt
 8008b58:	4613      	movlt	r3, r2
 8008b5a:	f8c9 3000 	str.w	r3, [r9]
 8008b5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b62:	4606      	mov	r6, r0
 8008b64:	460c      	mov	r4, r1
 8008b66:	b112      	cbz	r2, 8008b6e <_printf_common+0x2a>
 8008b68:	3301      	adds	r3, #1
 8008b6a:	f8c9 3000 	str.w	r3, [r9]
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	0699      	lsls	r1, r3, #26
 8008b72:	bf42      	ittt	mi
 8008b74:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b78:	3302      	addmi	r3, #2
 8008b7a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b7e:	6825      	ldr	r5, [r4, #0]
 8008b80:	f015 0506 	ands.w	r5, r5, #6
 8008b84:	d107      	bne.n	8008b96 <_printf_common+0x52>
 8008b86:	f104 0a19 	add.w	sl, r4, #25
 8008b8a:	68e3      	ldr	r3, [r4, #12]
 8008b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	42ab      	cmp	r3, r5
 8008b94:	dc28      	bgt.n	8008be8 <_printf_common+0xa4>
 8008b96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b9a:	6822      	ldr	r2, [r4, #0]
 8008b9c:	3300      	adds	r3, #0
 8008b9e:	bf18      	it	ne
 8008ba0:	2301      	movne	r3, #1
 8008ba2:	0692      	lsls	r2, r2, #26
 8008ba4:	d42d      	bmi.n	8008c02 <_printf_common+0xbe>
 8008ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008baa:	4639      	mov	r1, r7
 8008bac:	4630      	mov	r0, r6
 8008bae:	47c0      	blx	r8
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d020      	beq.n	8008bf6 <_printf_common+0xb2>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	68e5      	ldr	r5, [r4, #12]
 8008bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bbc:	f003 0306 	and.w	r3, r3, #6
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	bf08      	it	eq
 8008bc4:	1aad      	subeq	r5, r5, r2
 8008bc6:	68a3      	ldr	r3, [r4, #8]
 8008bc8:	6922      	ldr	r2, [r4, #16]
 8008bca:	bf0c      	ite	eq
 8008bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd0:	2500      	movne	r5, #0
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	bfc4      	itt	gt
 8008bd6:	1a9b      	subgt	r3, r3, r2
 8008bd8:	18ed      	addgt	r5, r5, r3
 8008bda:	f04f 0900 	mov.w	r9, #0
 8008bde:	341a      	adds	r4, #26
 8008be0:	454d      	cmp	r5, r9
 8008be2:	d11a      	bne.n	8008c1a <_printf_common+0xd6>
 8008be4:	2000      	movs	r0, #0
 8008be6:	e008      	b.n	8008bfa <_printf_common+0xb6>
 8008be8:	2301      	movs	r3, #1
 8008bea:	4652      	mov	r2, sl
 8008bec:	4639      	mov	r1, r7
 8008bee:	4630      	mov	r0, r6
 8008bf0:	47c0      	blx	r8
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	d103      	bne.n	8008bfe <_printf_common+0xba>
 8008bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfe:	3501      	adds	r5, #1
 8008c00:	e7c3      	b.n	8008b8a <_printf_common+0x46>
 8008c02:	18e1      	adds	r1, r4, r3
 8008c04:	1c5a      	adds	r2, r3, #1
 8008c06:	2030      	movs	r0, #48	; 0x30
 8008c08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c0c:	4422      	add	r2, r4
 8008c0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c16:	3302      	adds	r3, #2
 8008c18:	e7c5      	b.n	8008ba6 <_printf_common+0x62>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	4622      	mov	r2, r4
 8008c1e:	4639      	mov	r1, r7
 8008c20:	4630      	mov	r0, r6
 8008c22:	47c0      	blx	r8
 8008c24:	3001      	adds	r0, #1
 8008c26:	d0e6      	beq.n	8008bf6 <_printf_common+0xb2>
 8008c28:	f109 0901 	add.w	r9, r9, #1
 8008c2c:	e7d8      	b.n	8008be0 <_printf_common+0x9c>
	...

08008c30 <_printf_i>:
 8008c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c38:	460c      	mov	r4, r1
 8008c3a:	7e09      	ldrb	r1, [r1, #24]
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	296e      	cmp	r1, #110	; 0x6e
 8008c40:	4617      	mov	r7, r2
 8008c42:	4606      	mov	r6, r0
 8008c44:	4698      	mov	r8, r3
 8008c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c48:	f000 80b3 	beq.w	8008db2 <_printf_i+0x182>
 8008c4c:	d822      	bhi.n	8008c94 <_printf_i+0x64>
 8008c4e:	2963      	cmp	r1, #99	; 0x63
 8008c50:	d036      	beq.n	8008cc0 <_printf_i+0x90>
 8008c52:	d80a      	bhi.n	8008c6a <_printf_i+0x3a>
 8008c54:	2900      	cmp	r1, #0
 8008c56:	f000 80b9 	beq.w	8008dcc <_printf_i+0x19c>
 8008c5a:	2958      	cmp	r1, #88	; 0x58
 8008c5c:	f000 8083 	beq.w	8008d66 <_printf_i+0x136>
 8008c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c68:	e032      	b.n	8008cd0 <_printf_i+0xa0>
 8008c6a:	2964      	cmp	r1, #100	; 0x64
 8008c6c:	d001      	beq.n	8008c72 <_printf_i+0x42>
 8008c6e:	2969      	cmp	r1, #105	; 0x69
 8008c70:	d1f6      	bne.n	8008c60 <_printf_i+0x30>
 8008c72:	6820      	ldr	r0, [r4, #0]
 8008c74:	6813      	ldr	r3, [r2, #0]
 8008c76:	0605      	lsls	r5, r0, #24
 8008c78:	f103 0104 	add.w	r1, r3, #4
 8008c7c:	d52a      	bpl.n	8008cd4 <_printf_i+0xa4>
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	da03      	bge.n	8008c8e <_printf_i+0x5e>
 8008c86:	222d      	movs	r2, #45	; 0x2d
 8008c88:	425b      	negs	r3, r3
 8008c8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c8e:	486f      	ldr	r0, [pc, #444]	; (8008e4c <_printf_i+0x21c>)
 8008c90:	220a      	movs	r2, #10
 8008c92:	e039      	b.n	8008d08 <_printf_i+0xd8>
 8008c94:	2973      	cmp	r1, #115	; 0x73
 8008c96:	f000 809d 	beq.w	8008dd4 <_printf_i+0x1a4>
 8008c9a:	d808      	bhi.n	8008cae <_printf_i+0x7e>
 8008c9c:	296f      	cmp	r1, #111	; 0x6f
 8008c9e:	d020      	beq.n	8008ce2 <_printf_i+0xb2>
 8008ca0:	2970      	cmp	r1, #112	; 0x70
 8008ca2:	d1dd      	bne.n	8008c60 <_printf_i+0x30>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	f043 0320 	orr.w	r3, r3, #32
 8008caa:	6023      	str	r3, [r4, #0]
 8008cac:	e003      	b.n	8008cb6 <_printf_i+0x86>
 8008cae:	2975      	cmp	r1, #117	; 0x75
 8008cb0:	d017      	beq.n	8008ce2 <_printf_i+0xb2>
 8008cb2:	2978      	cmp	r1, #120	; 0x78
 8008cb4:	d1d4      	bne.n	8008c60 <_printf_i+0x30>
 8008cb6:	2378      	movs	r3, #120	; 0x78
 8008cb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cbc:	4864      	ldr	r0, [pc, #400]	; (8008e50 <_printf_i+0x220>)
 8008cbe:	e055      	b.n	8008d6c <_printf_i+0x13c>
 8008cc0:	6813      	ldr	r3, [r2, #0]
 8008cc2:	1d19      	adds	r1, r3, #4
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6011      	str	r1, [r2, #0]
 8008cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e08c      	b.n	8008dee <_printf_i+0x1be>
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6011      	str	r1, [r2, #0]
 8008cd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cdc:	bf18      	it	ne
 8008cde:	b21b      	sxthne	r3, r3
 8008ce0:	e7cf      	b.n	8008c82 <_printf_i+0x52>
 8008ce2:	6813      	ldr	r3, [r2, #0]
 8008ce4:	6825      	ldr	r5, [r4, #0]
 8008ce6:	1d18      	adds	r0, r3, #4
 8008ce8:	6010      	str	r0, [r2, #0]
 8008cea:	0628      	lsls	r0, r5, #24
 8008cec:	d501      	bpl.n	8008cf2 <_printf_i+0xc2>
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	e002      	b.n	8008cf8 <_printf_i+0xc8>
 8008cf2:	0668      	lsls	r0, r5, #25
 8008cf4:	d5fb      	bpl.n	8008cee <_printf_i+0xbe>
 8008cf6:	881b      	ldrh	r3, [r3, #0]
 8008cf8:	4854      	ldr	r0, [pc, #336]	; (8008e4c <_printf_i+0x21c>)
 8008cfa:	296f      	cmp	r1, #111	; 0x6f
 8008cfc:	bf14      	ite	ne
 8008cfe:	220a      	movne	r2, #10
 8008d00:	2208      	moveq	r2, #8
 8008d02:	2100      	movs	r1, #0
 8008d04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d08:	6865      	ldr	r5, [r4, #4]
 8008d0a:	60a5      	str	r5, [r4, #8]
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	f2c0 8095 	blt.w	8008e3c <_printf_i+0x20c>
 8008d12:	6821      	ldr	r1, [r4, #0]
 8008d14:	f021 0104 	bic.w	r1, r1, #4
 8008d18:	6021      	str	r1, [r4, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d13d      	bne.n	8008d9a <_printf_i+0x16a>
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	f040 808e 	bne.w	8008e40 <_printf_i+0x210>
 8008d24:	4665      	mov	r5, ip
 8008d26:	2a08      	cmp	r2, #8
 8008d28:	d10b      	bne.n	8008d42 <_printf_i+0x112>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	07db      	lsls	r3, r3, #31
 8008d2e:	d508      	bpl.n	8008d42 <_printf_i+0x112>
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	6862      	ldr	r2, [r4, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	bfde      	ittt	le
 8008d38:	2330      	movle	r3, #48	; 0x30
 8008d3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d42:	ebac 0305 	sub.w	r3, ip, r5
 8008d46:	6123      	str	r3, [r4, #16]
 8008d48:	f8cd 8000 	str.w	r8, [sp]
 8008d4c:	463b      	mov	r3, r7
 8008d4e:	aa03      	add	r2, sp, #12
 8008d50:	4621      	mov	r1, r4
 8008d52:	4630      	mov	r0, r6
 8008d54:	f7ff fef6 	bl	8008b44 <_printf_common>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d14d      	bne.n	8008df8 <_printf_i+0x1c8>
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	b005      	add	sp, #20
 8008d62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d66:	4839      	ldr	r0, [pc, #228]	; (8008e4c <_printf_i+0x21c>)
 8008d68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d6c:	6813      	ldr	r3, [r2, #0]
 8008d6e:	6821      	ldr	r1, [r4, #0]
 8008d70:	1d1d      	adds	r5, r3, #4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	6015      	str	r5, [r2, #0]
 8008d76:	060a      	lsls	r2, r1, #24
 8008d78:	d50b      	bpl.n	8008d92 <_printf_i+0x162>
 8008d7a:	07ca      	lsls	r2, r1, #31
 8008d7c:	bf44      	itt	mi
 8008d7e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d82:	6021      	strmi	r1, [r4, #0]
 8008d84:	b91b      	cbnz	r3, 8008d8e <_printf_i+0x15e>
 8008d86:	6822      	ldr	r2, [r4, #0]
 8008d88:	f022 0220 	bic.w	r2, r2, #32
 8008d8c:	6022      	str	r2, [r4, #0]
 8008d8e:	2210      	movs	r2, #16
 8008d90:	e7b7      	b.n	8008d02 <_printf_i+0xd2>
 8008d92:	064d      	lsls	r5, r1, #25
 8008d94:	bf48      	it	mi
 8008d96:	b29b      	uxthmi	r3, r3
 8008d98:	e7ef      	b.n	8008d7a <_printf_i+0x14a>
 8008d9a:	4665      	mov	r5, ip
 8008d9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008da0:	fb02 3311 	mls	r3, r2, r1, r3
 8008da4:	5cc3      	ldrb	r3, [r0, r3]
 8008da6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008daa:	460b      	mov	r3, r1
 8008dac:	2900      	cmp	r1, #0
 8008dae:	d1f5      	bne.n	8008d9c <_printf_i+0x16c>
 8008db0:	e7b9      	b.n	8008d26 <_printf_i+0xf6>
 8008db2:	6813      	ldr	r3, [r2, #0]
 8008db4:	6825      	ldr	r5, [r4, #0]
 8008db6:	6961      	ldr	r1, [r4, #20]
 8008db8:	1d18      	adds	r0, r3, #4
 8008dba:	6010      	str	r0, [r2, #0]
 8008dbc:	0628      	lsls	r0, r5, #24
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	d501      	bpl.n	8008dc6 <_printf_i+0x196>
 8008dc2:	6019      	str	r1, [r3, #0]
 8008dc4:	e002      	b.n	8008dcc <_printf_i+0x19c>
 8008dc6:	066a      	lsls	r2, r5, #25
 8008dc8:	d5fb      	bpl.n	8008dc2 <_printf_i+0x192>
 8008dca:	8019      	strh	r1, [r3, #0]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	4665      	mov	r5, ip
 8008dd2:	e7b9      	b.n	8008d48 <_printf_i+0x118>
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	1d19      	adds	r1, r3, #4
 8008dd8:	6011      	str	r1, [r2, #0]
 8008dda:	681d      	ldr	r5, [r3, #0]
 8008ddc:	6862      	ldr	r2, [r4, #4]
 8008dde:	2100      	movs	r1, #0
 8008de0:	4628      	mov	r0, r5
 8008de2:	f7f7 f9fd 	bl	80001e0 <memchr>
 8008de6:	b108      	cbz	r0, 8008dec <_printf_i+0x1bc>
 8008de8:	1b40      	subs	r0, r0, r5
 8008dea:	6060      	str	r0, [r4, #4]
 8008dec:	6863      	ldr	r3, [r4, #4]
 8008dee:	6123      	str	r3, [r4, #16]
 8008df0:	2300      	movs	r3, #0
 8008df2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df6:	e7a7      	b.n	8008d48 <_printf_i+0x118>
 8008df8:	6923      	ldr	r3, [r4, #16]
 8008dfa:	462a      	mov	r2, r5
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	4630      	mov	r0, r6
 8008e00:	47c0      	blx	r8
 8008e02:	3001      	adds	r0, #1
 8008e04:	d0aa      	beq.n	8008d5c <_printf_i+0x12c>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	079b      	lsls	r3, r3, #30
 8008e0a:	d413      	bmi.n	8008e34 <_printf_i+0x204>
 8008e0c:	68e0      	ldr	r0, [r4, #12]
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	4298      	cmp	r0, r3
 8008e12:	bfb8      	it	lt
 8008e14:	4618      	movlt	r0, r3
 8008e16:	e7a3      	b.n	8008d60 <_printf_i+0x130>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	464a      	mov	r2, r9
 8008e1c:	4639      	mov	r1, r7
 8008e1e:	4630      	mov	r0, r6
 8008e20:	47c0      	blx	r8
 8008e22:	3001      	adds	r0, #1
 8008e24:	d09a      	beq.n	8008d5c <_printf_i+0x12c>
 8008e26:	3501      	adds	r5, #1
 8008e28:	68e3      	ldr	r3, [r4, #12]
 8008e2a:	9a03      	ldr	r2, [sp, #12]
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	42ab      	cmp	r3, r5
 8008e30:	dcf2      	bgt.n	8008e18 <_printf_i+0x1e8>
 8008e32:	e7eb      	b.n	8008e0c <_printf_i+0x1dc>
 8008e34:	2500      	movs	r5, #0
 8008e36:	f104 0919 	add.w	r9, r4, #25
 8008e3a:	e7f5      	b.n	8008e28 <_printf_i+0x1f8>
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1ac      	bne.n	8008d9a <_printf_i+0x16a>
 8008e40:	7803      	ldrb	r3, [r0, #0]
 8008e42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e4a:	e76c      	b.n	8008d26 <_printf_i+0xf6>
 8008e4c:	0800b1be 	.word	0x0800b1be
 8008e50:	0800b1cf 	.word	0x0800b1cf

08008e54 <iprintf>:
 8008e54:	b40f      	push	{r0, r1, r2, r3}
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <iprintf+0x2c>)
 8008e58:	b513      	push	{r0, r1, r4, lr}
 8008e5a:	681c      	ldr	r4, [r3, #0]
 8008e5c:	b124      	cbz	r4, 8008e68 <iprintf+0x14>
 8008e5e:	69a3      	ldr	r3, [r4, #24]
 8008e60:	b913      	cbnz	r3, 8008e68 <iprintf+0x14>
 8008e62:	4620      	mov	r0, r4
 8008e64:	f001 f914 	bl	800a090 <__sinit>
 8008e68:	ab05      	add	r3, sp, #20
 8008e6a:	9a04      	ldr	r2, [sp, #16]
 8008e6c:	68a1      	ldr	r1, [r4, #8]
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	4620      	mov	r0, r4
 8008e72:	f001 fdd7 	bl	800aa24 <_vfiprintf_r>
 8008e76:	b002      	add	sp, #8
 8008e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7c:	b004      	add	sp, #16
 8008e7e:	4770      	bx	lr
 8008e80:	20000afc 	.word	0x20000afc

08008e84 <_puts_r>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	460e      	mov	r6, r1
 8008e88:	4605      	mov	r5, r0
 8008e8a:	b118      	cbz	r0, 8008e94 <_puts_r+0x10>
 8008e8c:	6983      	ldr	r3, [r0, #24]
 8008e8e:	b90b      	cbnz	r3, 8008e94 <_puts_r+0x10>
 8008e90:	f001 f8fe 	bl	800a090 <__sinit>
 8008e94:	69ab      	ldr	r3, [r5, #24]
 8008e96:	68ac      	ldr	r4, [r5, #8]
 8008e98:	b913      	cbnz	r3, 8008ea0 <_puts_r+0x1c>
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f001 f8f8 	bl	800a090 <__sinit>
 8008ea0:	4b23      	ldr	r3, [pc, #140]	; (8008f30 <_puts_r+0xac>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d117      	bne.n	8008ed6 <_puts_r+0x52>
 8008ea6:	686c      	ldr	r4, [r5, #4]
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	071b      	lsls	r3, r3, #28
 8008eac:	d51d      	bpl.n	8008eea <_puts_r+0x66>
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	b1db      	cbz	r3, 8008eea <_puts_r+0x66>
 8008eb2:	3e01      	subs	r6, #1
 8008eb4:	68a3      	ldr	r3, [r4, #8]
 8008eb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	b9e9      	cbnz	r1, 8008efc <_puts_r+0x78>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	da2e      	bge.n	8008f22 <_puts_r+0x9e>
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	210a      	movs	r1, #10
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f8ed 	bl	80090a8 <__swbuf_r>
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d011      	beq.n	8008ef6 <_puts_r+0x72>
 8008ed2:	200a      	movs	r0, #10
 8008ed4:	e011      	b.n	8008efa <_puts_r+0x76>
 8008ed6:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <_puts_r+0xb0>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	d101      	bne.n	8008ee0 <_puts_r+0x5c>
 8008edc:	68ac      	ldr	r4, [r5, #8]
 8008ede:	e7e3      	b.n	8008ea8 <_puts_r+0x24>
 8008ee0:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <_puts_r+0xb4>)
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	bf08      	it	eq
 8008ee6:	68ec      	ldreq	r4, [r5, #12]
 8008ee8:	e7de      	b.n	8008ea8 <_puts_r+0x24>
 8008eea:	4621      	mov	r1, r4
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 f92d 	bl	800914c <__swsetup_r>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d0dd      	beq.n	8008eb2 <_puts_r+0x2e>
 8008ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	da04      	bge.n	8008f0a <_puts_r+0x86>
 8008f00:	69a2      	ldr	r2, [r4, #24]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	dc06      	bgt.n	8008f14 <_puts_r+0x90>
 8008f06:	290a      	cmp	r1, #10
 8008f08:	d004      	beq.n	8008f14 <_puts_r+0x90>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	1c5a      	adds	r2, r3, #1
 8008f0e:	6022      	str	r2, [r4, #0]
 8008f10:	7019      	strb	r1, [r3, #0]
 8008f12:	e7cf      	b.n	8008eb4 <_puts_r+0x30>
 8008f14:	4622      	mov	r2, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 f8c6 	bl	80090a8 <__swbuf_r>
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d1c9      	bne.n	8008eb4 <_puts_r+0x30>
 8008f20:	e7e9      	b.n	8008ef6 <_puts_r+0x72>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	200a      	movs	r0, #10
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	6022      	str	r2, [r4, #0]
 8008f2a:	7018      	strb	r0, [r3, #0]
 8008f2c:	e7e5      	b.n	8008efa <_puts_r+0x76>
 8008f2e:	bf00      	nop
 8008f30:	0800b210 	.word	0x0800b210
 8008f34:	0800b230 	.word	0x0800b230
 8008f38:	0800b1f0 	.word	0x0800b1f0

08008f3c <puts>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <puts+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f7ff bf9f 	b.w	8008e84 <_puts_r>
 8008f46:	bf00      	nop
 8008f48:	20000afc 	.word	0x20000afc

08008f4c <setvbuf>:
 8008f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f50:	461d      	mov	r5, r3
 8008f52:	4b51      	ldr	r3, [pc, #324]	; (8009098 <setvbuf+0x14c>)
 8008f54:	681e      	ldr	r6, [r3, #0]
 8008f56:	4604      	mov	r4, r0
 8008f58:	460f      	mov	r7, r1
 8008f5a:	4690      	mov	r8, r2
 8008f5c:	b126      	cbz	r6, 8008f68 <setvbuf+0x1c>
 8008f5e:	69b3      	ldr	r3, [r6, #24]
 8008f60:	b913      	cbnz	r3, 8008f68 <setvbuf+0x1c>
 8008f62:	4630      	mov	r0, r6
 8008f64:	f001 f894 	bl	800a090 <__sinit>
 8008f68:	4b4c      	ldr	r3, [pc, #304]	; (800909c <setvbuf+0x150>)
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	d152      	bne.n	8009014 <setvbuf+0xc8>
 8008f6e:	6874      	ldr	r4, [r6, #4]
 8008f70:	f1b8 0f02 	cmp.w	r8, #2
 8008f74:	d006      	beq.n	8008f84 <setvbuf+0x38>
 8008f76:	f1b8 0f01 	cmp.w	r8, #1
 8008f7a:	f200 8089 	bhi.w	8009090 <setvbuf+0x144>
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	f2c0 8086 	blt.w	8009090 <setvbuf+0x144>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4630      	mov	r0, r6
 8008f88:	f001 f818 	bl	8009fbc <_fflush_r>
 8008f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f8e:	b141      	cbz	r1, 8008fa2 <setvbuf+0x56>
 8008f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f94:	4299      	cmp	r1, r3
 8008f96:	d002      	beq.n	8008f9e <setvbuf+0x52>
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f001 fc71 	bl	800a880 <_free_r>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61a3      	str	r3, [r4, #24]
 8008fa6:	6063      	str	r3, [r4, #4]
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	061b      	lsls	r3, r3, #24
 8008fac:	d503      	bpl.n	8008fb6 <setvbuf+0x6a>
 8008fae:	6921      	ldr	r1, [r4, #16]
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f001 fc65 	bl	800a880 <_free_r>
 8008fb6:	89a3      	ldrh	r3, [r4, #12]
 8008fb8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008fbc:	f023 0303 	bic.w	r3, r3, #3
 8008fc0:	f1b8 0f02 	cmp.w	r8, #2
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	d05d      	beq.n	8009084 <setvbuf+0x138>
 8008fc8:	ab01      	add	r3, sp, #4
 8008fca:	466a      	mov	r2, sp
 8008fcc:	4621      	mov	r1, r4
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f001 f8f6 	bl	800a1c0 <__swhatbuf_r>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	4318      	orrs	r0, r3
 8008fd8:	81a0      	strh	r0, [r4, #12]
 8008fda:	bb2d      	cbnz	r5, 8009028 <setvbuf+0xdc>
 8008fdc:	9d00      	ldr	r5, [sp, #0]
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f001 f952 	bl	800a288 <malloc>
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d14e      	bne.n	8009088 <setvbuf+0x13c>
 8008fea:	f8dd 9000 	ldr.w	r9, [sp]
 8008fee:	45a9      	cmp	r9, r5
 8008ff0:	d13c      	bne.n	800906c <setvbuf+0x120>
 8008ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f043 0302 	orr.w	r3, r3, #2
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	2300      	movs	r3, #0
 8009000:	60a3      	str	r3, [r4, #8]
 8009002:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009006:	6023      	str	r3, [r4, #0]
 8009008:	6123      	str	r3, [r4, #16]
 800900a:	2301      	movs	r3, #1
 800900c:	6163      	str	r3, [r4, #20]
 800900e:	b003      	add	sp, #12
 8009010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009014:	4b22      	ldr	r3, [pc, #136]	; (80090a0 <setvbuf+0x154>)
 8009016:	429c      	cmp	r4, r3
 8009018:	d101      	bne.n	800901e <setvbuf+0xd2>
 800901a:	68b4      	ldr	r4, [r6, #8]
 800901c:	e7a8      	b.n	8008f70 <setvbuf+0x24>
 800901e:	4b21      	ldr	r3, [pc, #132]	; (80090a4 <setvbuf+0x158>)
 8009020:	429c      	cmp	r4, r3
 8009022:	bf08      	it	eq
 8009024:	68f4      	ldreq	r4, [r6, #12]
 8009026:	e7a3      	b.n	8008f70 <setvbuf+0x24>
 8009028:	2f00      	cmp	r7, #0
 800902a:	d0d8      	beq.n	8008fde <setvbuf+0x92>
 800902c:	69b3      	ldr	r3, [r6, #24]
 800902e:	b913      	cbnz	r3, 8009036 <setvbuf+0xea>
 8009030:	4630      	mov	r0, r6
 8009032:	f001 f82d 	bl	800a090 <__sinit>
 8009036:	f1b8 0f01 	cmp.w	r8, #1
 800903a:	bf08      	it	eq
 800903c:	89a3      	ldrheq	r3, [r4, #12]
 800903e:	6027      	str	r7, [r4, #0]
 8009040:	bf04      	itt	eq
 8009042:	f043 0301 	orreq.w	r3, r3, #1
 8009046:	81a3      	strheq	r3, [r4, #12]
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f013 0008 	ands.w	r0, r3, #8
 800904e:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8009052:	d01b      	beq.n	800908c <setvbuf+0x140>
 8009054:	f013 0001 	ands.w	r0, r3, #1
 8009058:	bf18      	it	ne
 800905a:	426d      	negne	r5, r5
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	bf1d      	ittte	ne
 8009062:	60a3      	strne	r3, [r4, #8]
 8009064:	61a5      	strne	r5, [r4, #24]
 8009066:	4618      	movne	r0, r3
 8009068:	60a5      	streq	r5, [r4, #8]
 800906a:	e7d0      	b.n	800900e <setvbuf+0xc2>
 800906c:	4648      	mov	r0, r9
 800906e:	f001 f90b 	bl	800a288 <malloc>
 8009072:	4607      	mov	r7, r0
 8009074:	2800      	cmp	r0, #0
 8009076:	d0bc      	beq.n	8008ff2 <setvbuf+0xa6>
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907e:	81a3      	strh	r3, [r4, #12]
 8009080:	464d      	mov	r5, r9
 8009082:	e7d3      	b.n	800902c <setvbuf+0xe0>
 8009084:	2000      	movs	r0, #0
 8009086:	e7b6      	b.n	8008ff6 <setvbuf+0xaa>
 8009088:	46a9      	mov	r9, r5
 800908a:	e7f5      	b.n	8009078 <setvbuf+0x12c>
 800908c:	60a0      	str	r0, [r4, #8]
 800908e:	e7be      	b.n	800900e <setvbuf+0xc2>
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	e7bb      	b.n	800900e <setvbuf+0xc2>
 8009096:	bf00      	nop
 8009098:	20000afc 	.word	0x20000afc
 800909c:	0800b210 	.word	0x0800b210
 80090a0:	0800b230 	.word	0x0800b230
 80090a4:	0800b1f0 	.word	0x0800b1f0

080090a8 <__swbuf_r>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	460e      	mov	r6, r1
 80090ac:	4614      	mov	r4, r2
 80090ae:	4605      	mov	r5, r0
 80090b0:	b118      	cbz	r0, 80090ba <__swbuf_r+0x12>
 80090b2:	6983      	ldr	r3, [r0, #24]
 80090b4:	b90b      	cbnz	r3, 80090ba <__swbuf_r+0x12>
 80090b6:	f000 ffeb 	bl	800a090 <__sinit>
 80090ba:	4b21      	ldr	r3, [pc, #132]	; (8009140 <__swbuf_r+0x98>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	d12a      	bne.n	8009116 <__swbuf_r+0x6e>
 80090c0:	686c      	ldr	r4, [r5, #4]
 80090c2:	69a3      	ldr	r3, [r4, #24]
 80090c4:	60a3      	str	r3, [r4, #8]
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	071a      	lsls	r2, r3, #28
 80090ca:	d52e      	bpl.n	800912a <__swbuf_r+0x82>
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	b363      	cbz	r3, 800912a <__swbuf_r+0x82>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	1ac0      	subs	r0, r0, r3
 80090d6:	6963      	ldr	r3, [r4, #20]
 80090d8:	b2f6      	uxtb	r6, r6
 80090da:	4283      	cmp	r3, r0
 80090dc:	4637      	mov	r7, r6
 80090de:	dc04      	bgt.n	80090ea <__swbuf_r+0x42>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 ff6a 	bl	8009fbc <_fflush_r>
 80090e8:	bb28      	cbnz	r0, 8009136 <__swbuf_r+0x8e>
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	3b01      	subs	r3, #1
 80090ee:	60a3      	str	r3, [r4, #8]
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	6022      	str	r2, [r4, #0]
 80090f6:	701e      	strb	r6, [r3, #0]
 80090f8:	6963      	ldr	r3, [r4, #20]
 80090fa:	3001      	adds	r0, #1
 80090fc:	4283      	cmp	r3, r0
 80090fe:	d004      	beq.n	800910a <__swbuf_r+0x62>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	07db      	lsls	r3, r3, #31
 8009104:	d519      	bpl.n	800913a <__swbuf_r+0x92>
 8009106:	2e0a      	cmp	r6, #10
 8009108:	d117      	bne.n	800913a <__swbuf_r+0x92>
 800910a:	4621      	mov	r1, r4
 800910c:	4628      	mov	r0, r5
 800910e:	f000 ff55 	bl	8009fbc <_fflush_r>
 8009112:	b190      	cbz	r0, 800913a <__swbuf_r+0x92>
 8009114:	e00f      	b.n	8009136 <__swbuf_r+0x8e>
 8009116:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <__swbuf_r+0x9c>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d101      	bne.n	8009120 <__swbuf_r+0x78>
 800911c:	68ac      	ldr	r4, [r5, #8]
 800911e:	e7d0      	b.n	80090c2 <__swbuf_r+0x1a>
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <__swbuf_r+0xa0>)
 8009122:	429c      	cmp	r4, r3
 8009124:	bf08      	it	eq
 8009126:	68ec      	ldreq	r4, [r5, #12]
 8009128:	e7cb      	b.n	80090c2 <__swbuf_r+0x1a>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f000 f80d 	bl	800914c <__swsetup_r>
 8009132:	2800      	cmp	r0, #0
 8009134:	d0cc      	beq.n	80090d0 <__swbuf_r+0x28>
 8009136:	f04f 37ff 	mov.w	r7, #4294967295
 800913a:	4638      	mov	r0, r7
 800913c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800913e:	bf00      	nop
 8009140:	0800b210 	.word	0x0800b210
 8009144:	0800b230 	.word	0x0800b230
 8009148:	0800b1f0 	.word	0x0800b1f0

0800914c <__swsetup_r>:
 800914c:	4b32      	ldr	r3, [pc, #200]	; (8009218 <__swsetup_r+0xcc>)
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	4606      	mov	r6, r0
 8009154:	460c      	mov	r4, r1
 8009156:	b125      	cbz	r5, 8009162 <__swsetup_r+0x16>
 8009158:	69ab      	ldr	r3, [r5, #24]
 800915a:	b913      	cbnz	r3, 8009162 <__swsetup_r+0x16>
 800915c:	4628      	mov	r0, r5
 800915e:	f000 ff97 	bl	800a090 <__sinit>
 8009162:	4b2e      	ldr	r3, [pc, #184]	; (800921c <__swsetup_r+0xd0>)
 8009164:	429c      	cmp	r4, r3
 8009166:	d10f      	bne.n	8009188 <__swsetup_r+0x3c>
 8009168:	686c      	ldr	r4, [r5, #4]
 800916a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800916e:	b29a      	uxth	r2, r3
 8009170:	0715      	lsls	r5, r2, #28
 8009172:	d42c      	bmi.n	80091ce <__swsetup_r+0x82>
 8009174:	06d0      	lsls	r0, r2, #27
 8009176:	d411      	bmi.n	800919c <__swsetup_r+0x50>
 8009178:	2209      	movs	r2, #9
 800917a:	6032      	str	r2, [r6, #0]
 800917c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	e03e      	b.n	8009206 <__swsetup_r+0xba>
 8009188:	4b25      	ldr	r3, [pc, #148]	; (8009220 <__swsetup_r+0xd4>)
 800918a:	429c      	cmp	r4, r3
 800918c:	d101      	bne.n	8009192 <__swsetup_r+0x46>
 800918e:	68ac      	ldr	r4, [r5, #8]
 8009190:	e7eb      	b.n	800916a <__swsetup_r+0x1e>
 8009192:	4b24      	ldr	r3, [pc, #144]	; (8009224 <__swsetup_r+0xd8>)
 8009194:	429c      	cmp	r4, r3
 8009196:	bf08      	it	eq
 8009198:	68ec      	ldreq	r4, [r5, #12]
 800919a:	e7e6      	b.n	800916a <__swsetup_r+0x1e>
 800919c:	0751      	lsls	r1, r2, #29
 800919e:	d512      	bpl.n	80091c6 <__swsetup_r+0x7a>
 80091a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091a2:	b141      	cbz	r1, 80091b6 <__swsetup_r+0x6a>
 80091a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d002      	beq.n	80091b2 <__swsetup_r+0x66>
 80091ac:	4630      	mov	r0, r6
 80091ae:	f001 fb67 	bl	800a880 <_free_r>
 80091b2:	2300      	movs	r3, #0
 80091b4:	6363      	str	r3, [r4, #52]	; 0x34
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	2300      	movs	r3, #0
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f043 0308 	orr.w	r3, r3, #8
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	b94b      	cbnz	r3, 80091e6 <__swsetup_r+0x9a>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091dc:	d003      	beq.n	80091e6 <__swsetup_r+0x9a>
 80091de:	4621      	mov	r1, r4
 80091e0:	4630      	mov	r0, r6
 80091e2:	f001 f811 	bl	800a208 <__smakebuf_r>
 80091e6:	89a2      	ldrh	r2, [r4, #12]
 80091e8:	f012 0301 	ands.w	r3, r2, #1
 80091ec:	d00c      	beq.n	8009208 <__swsetup_r+0xbc>
 80091ee:	2300      	movs	r3, #0
 80091f0:	60a3      	str	r3, [r4, #8]
 80091f2:	6963      	ldr	r3, [r4, #20]
 80091f4:	425b      	negs	r3, r3
 80091f6:	61a3      	str	r3, [r4, #24]
 80091f8:	6923      	ldr	r3, [r4, #16]
 80091fa:	b953      	cbnz	r3, 8009212 <__swsetup_r+0xc6>
 80091fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009200:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009204:	d1ba      	bne.n	800917c <__swsetup_r+0x30>
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	0792      	lsls	r2, r2, #30
 800920a:	bf58      	it	pl
 800920c:	6963      	ldrpl	r3, [r4, #20]
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	e7f2      	b.n	80091f8 <__swsetup_r+0xac>
 8009212:	2000      	movs	r0, #0
 8009214:	e7f7      	b.n	8009206 <__swsetup_r+0xba>
 8009216:	bf00      	nop
 8009218:	20000afc 	.word	0x20000afc
 800921c:	0800b210 	.word	0x0800b210
 8009220:	0800b230 	.word	0x0800b230
 8009224:	0800b1f0 	.word	0x0800b1f0

08009228 <quorem>:
 8009228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	6903      	ldr	r3, [r0, #16]
 800922e:	690c      	ldr	r4, [r1, #16]
 8009230:	42a3      	cmp	r3, r4
 8009232:	4680      	mov	r8, r0
 8009234:	f2c0 8082 	blt.w	800933c <quorem+0x114>
 8009238:	3c01      	subs	r4, #1
 800923a:	f101 0714 	add.w	r7, r1, #20
 800923e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009242:	f100 0614 	add.w	r6, r0, #20
 8009246:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800924a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800924e:	eb06 030c 	add.w	r3, r6, ip
 8009252:	3501      	adds	r5, #1
 8009254:	eb07 090c 	add.w	r9, r7, ip
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	fbb0 f5f5 	udiv	r5, r0, r5
 800925e:	b395      	cbz	r5, 80092c6 <quorem+0x9e>
 8009260:	f04f 0a00 	mov.w	sl, #0
 8009264:	4638      	mov	r0, r7
 8009266:	46b6      	mov	lr, r6
 8009268:	46d3      	mov	fp, sl
 800926a:	f850 2b04 	ldr.w	r2, [r0], #4
 800926e:	b293      	uxth	r3, r2
 8009270:	fb05 a303 	mla	r3, r5, r3, sl
 8009274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009278:	b29b      	uxth	r3, r3
 800927a:	ebab 0303 	sub.w	r3, fp, r3
 800927e:	0c12      	lsrs	r2, r2, #16
 8009280:	f8de b000 	ldr.w	fp, [lr]
 8009284:	fb05 a202 	mla	r2, r5, r2, sl
 8009288:	fa13 f38b 	uxtah	r3, r3, fp
 800928c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009290:	fa1f fb82 	uxth.w	fp, r2
 8009294:	f8de 2000 	ldr.w	r2, [lr]
 8009298:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800929c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a6:	4581      	cmp	r9, r0
 80092a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80092ac:	f84e 3b04 	str.w	r3, [lr], #4
 80092b0:	d2db      	bcs.n	800926a <quorem+0x42>
 80092b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80092b6:	b933      	cbnz	r3, 80092c6 <quorem+0x9e>
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	3b04      	subs	r3, #4
 80092bc:	429e      	cmp	r6, r3
 80092be:	461a      	mov	r2, r3
 80092c0:	d330      	bcc.n	8009324 <quorem+0xfc>
 80092c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80092c6:	4640      	mov	r0, r8
 80092c8:	f001 fa06 	bl	800a6d8 <__mcmp>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	db25      	blt.n	800931c <quorem+0xf4>
 80092d0:	3501      	adds	r5, #1
 80092d2:	4630      	mov	r0, r6
 80092d4:	f04f 0c00 	mov.w	ip, #0
 80092d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80092dc:	f8d0 e000 	ldr.w	lr, [r0]
 80092e0:	b293      	uxth	r3, r2
 80092e2:	ebac 0303 	sub.w	r3, ip, r3
 80092e6:	0c12      	lsrs	r2, r2, #16
 80092e8:	fa13 f38e 	uxtah	r3, r3, lr
 80092ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092fa:	45b9      	cmp	r9, r7
 80092fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009300:	f840 3b04 	str.w	r3, [r0], #4
 8009304:	d2e8      	bcs.n	80092d8 <quorem+0xb0>
 8009306:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800930a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800930e:	b92a      	cbnz	r2, 800931c <quorem+0xf4>
 8009310:	3b04      	subs	r3, #4
 8009312:	429e      	cmp	r6, r3
 8009314:	461a      	mov	r2, r3
 8009316:	d30b      	bcc.n	8009330 <quorem+0x108>
 8009318:	f8c8 4010 	str.w	r4, [r8, #16]
 800931c:	4628      	mov	r0, r5
 800931e:	b003      	add	sp, #12
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	3b04      	subs	r3, #4
 8009328:	2a00      	cmp	r2, #0
 800932a:	d1ca      	bne.n	80092c2 <quorem+0x9a>
 800932c:	3c01      	subs	r4, #1
 800932e:	e7c5      	b.n	80092bc <quorem+0x94>
 8009330:	6812      	ldr	r2, [r2, #0]
 8009332:	3b04      	subs	r3, #4
 8009334:	2a00      	cmp	r2, #0
 8009336:	d1ef      	bne.n	8009318 <quorem+0xf0>
 8009338:	3c01      	subs	r4, #1
 800933a:	e7ea      	b.n	8009312 <quorem+0xea>
 800933c:	2000      	movs	r0, #0
 800933e:	e7ee      	b.n	800931e <quorem+0xf6>

08009340 <_dtoa_r>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	ec57 6b10 	vmov	r6, r7, d0
 8009348:	b097      	sub	sp, #92	; 0x5c
 800934a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800934c:	9106      	str	r1, [sp, #24]
 800934e:	4604      	mov	r4, r0
 8009350:	920b      	str	r2, [sp, #44]	; 0x2c
 8009352:	9312      	str	r3, [sp, #72]	; 0x48
 8009354:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009358:	e9cd 6700 	strd	r6, r7, [sp]
 800935c:	b93d      	cbnz	r5, 800936e <_dtoa_r+0x2e>
 800935e:	2010      	movs	r0, #16
 8009360:	f000 ff92 	bl	800a288 <malloc>
 8009364:	6260      	str	r0, [r4, #36]	; 0x24
 8009366:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800936a:	6005      	str	r5, [r0, #0]
 800936c:	60c5      	str	r5, [r0, #12]
 800936e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009370:	6819      	ldr	r1, [r3, #0]
 8009372:	b151      	cbz	r1, 800938a <_dtoa_r+0x4a>
 8009374:	685a      	ldr	r2, [r3, #4]
 8009376:	604a      	str	r2, [r1, #4]
 8009378:	2301      	movs	r3, #1
 800937a:	4093      	lsls	r3, r2
 800937c:	608b      	str	r3, [r1, #8]
 800937e:	4620      	mov	r0, r4
 8009380:	f000 ffc9 	bl	800a316 <_Bfree>
 8009384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009386:	2200      	movs	r2, #0
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	1e3b      	subs	r3, r7, #0
 800938c:	bfbb      	ittet	lt
 800938e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009392:	9301      	strlt	r3, [sp, #4]
 8009394:	2300      	movge	r3, #0
 8009396:	2201      	movlt	r2, #1
 8009398:	bfac      	ite	ge
 800939a:	f8c8 3000 	strge.w	r3, [r8]
 800939e:	f8c8 2000 	strlt.w	r2, [r8]
 80093a2:	4baf      	ldr	r3, [pc, #700]	; (8009660 <_dtoa_r+0x320>)
 80093a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093a8:	ea33 0308 	bics.w	r3, r3, r8
 80093ac:	d114      	bne.n	80093d8 <_dtoa_r+0x98>
 80093ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80093b4:	6013      	str	r3, [r2, #0]
 80093b6:	9b00      	ldr	r3, [sp, #0]
 80093b8:	b923      	cbnz	r3, 80093c4 <_dtoa_r+0x84>
 80093ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80093be:	2800      	cmp	r0, #0
 80093c0:	f000 8542 	beq.w	8009e48 <_dtoa_r+0xb08>
 80093c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009674 <_dtoa_r+0x334>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 8544 	beq.w	8009e58 <_dtoa_r+0xb18>
 80093d0:	f10b 0303 	add.w	r3, fp, #3
 80093d4:	f000 bd3e 	b.w	8009e54 <_dtoa_r+0xb14>
 80093d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80093dc:	2200      	movs	r2, #0
 80093de:	2300      	movs	r3, #0
 80093e0:	4630      	mov	r0, r6
 80093e2:	4639      	mov	r1, r7
 80093e4:	f7f7 fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 80093e8:	4681      	mov	r9, r0
 80093ea:	b168      	cbz	r0, 8009408 <_dtoa_r+0xc8>
 80093ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093ee:	2301      	movs	r3, #1
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 8524 	beq.w	8009e42 <_dtoa_r+0xb02>
 80093fa:	4b9a      	ldr	r3, [pc, #616]	; (8009664 <_dtoa_r+0x324>)
 80093fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093fe:	f103 3bff 	add.w	fp, r3, #4294967295
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	f000 bd28 	b.w	8009e58 <_dtoa_r+0xb18>
 8009408:	aa14      	add	r2, sp, #80	; 0x50
 800940a:	a915      	add	r1, sp, #84	; 0x54
 800940c:	ec47 6b10 	vmov	d0, r6, r7
 8009410:	4620      	mov	r0, r4
 8009412:	f001 f9d8 	bl	800a7c6 <__d2b>
 8009416:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800941a:	9004      	str	r0, [sp, #16]
 800941c:	2d00      	cmp	r5, #0
 800941e:	d07c      	beq.n	800951a <_dtoa_r+0x1da>
 8009420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009424:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009428:	46b2      	mov	sl, r6
 800942a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800942e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009432:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009436:	2200      	movs	r2, #0
 8009438:	4b8b      	ldr	r3, [pc, #556]	; (8009668 <_dtoa_r+0x328>)
 800943a:	4650      	mov	r0, sl
 800943c:	4659      	mov	r1, fp
 800943e:	f7f6 ff23 	bl	8000288 <__aeabi_dsub>
 8009442:	a381      	add	r3, pc, #516	; (adr r3, 8009648 <_dtoa_r+0x308>)
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f7f7 f8d6 	bl	80005f8 <__aeabi_dmul>
 800944c:	a380      	add	r3, pc, #512	; (adr r3, 8009650 <_dtoa_r+0x310>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 ff1b 	bl	800028c <__adddf3>
 8009456:	4606      	mov	r6, r0
 8009458:	4628      	mov	r0, r5
 800945a:	460f      	mov	r7, r1
 800945c:	f7f7 f862 	bl	8000524 <__aeabi_i2d>
 8009460:	a37d      	add	r3, pc, #500	; (adr r3, 8009658 <_dtoa_r+0x318>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f7f7 f8c7 	bl	80005f8 <__aeabi_dmul>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7f6 ff0b 	bl	800028c <__adddf3>
 8009476:	4606      	mov	r6, r0
 8009478:	460f      	mov	r7, r1
 800947a:	f7f7 fb6d 	bl	8000b58 <__aeabi_d2iz>
 800947e:	2200      	movs	r2, #0
 8009480:	4682      	mov	sl, r0
 8009482:	2300      	movs	r3, #0
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f7f7 fb28 	bl	8000adc <__aeabi_dcmplt>
 800948c:	b148      	cbz	r0, 80094a2 <_dtoa_r+0x162>
 800948e:	4650      	mov	r0, sl
 8009490:	f7f7 f848 	bl	8000524 <__aeabi_i2d>
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	f7f7 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800949c:	b908      	cbnz	r0, 80094a2 <_dtoa_r+0x162>
 800949e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094a2:	f1ba 0f16 	cmp.w	sl, #22
 80094a6:	d859      	bhi.n	800955c <_dtoa_r+0x21c>
 80094a8:	4970      	ldr	r1, [pc, #448]	; (800966c <_dtoa_r+0x32c>)
 80094aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80094ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094b6:	f7f7 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d050      	beq.n	8009560 <_dtoa_r+0x220>
 80094be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094c2:	2300      	movs	r3, #0
 80094c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80094c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094c8:	1b5d      	subs	r5, r3, r5
 80094ca:	f1b5 0801 	subs.w	r8, r5, #1
 80094ce:	bf49      	itett	mi
 80094d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80094d4:	2300      	movpl	r3, #0
 80094d6:	9305      	strmi	r3, [sp, #20]
 80094d8:	f04f 0800 	movmi.w	r8, #0
 80094dc:	bf58      	it	pl
 80094de:	9305      	strpl	r3, [sp, #20]
 80094e0:	f1ba 0f00 	cmp.w	sl, #0
 80094e4:	db3e      	blt.n	8009564 <_dtoa_r+0x224>
 80094e6:	2300      	movs	r3, #0
 80094e8:	44d0      	add	r8, sl
 80094ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80094ee:	9307      	str	r3, [sp, #28]
 80094f0:	9b06      	ldr	r3, [sp, #24]
 80094f2:	2b09      	cmp	r3, #9
 80094f4:	f200 8090 	bhi.w	8009618 <_dtoa_r+0x2d8>
 80094f8:	2b05      	cmp	r3, #5
 80094fa:	bfc4      	itt	gt
 80094fc:	3b04      	subgt	r3, #4
 80094fe:	9306      	strgt	r3, [sp, #24]
 8009500:	9b06      	ldr	r3, [sp, #24]
 8009502:	f1a3 0302 	sub.w	r3, r3, #2
 8009506:	bfcc      	ite	gt
 8009508:	2500      	movgt	r5, #0
 800950a:	2501      	movle	r5, #1
 800950c:	2b03      	cmp	r3, #3
 800950e:	f200 808f 	bhi.w	8009630 <_dtoa_r+0x2f0>
 8009512:	e8df f003 	tbb	[pc, r3]
 8009516:	7f7d      	.short	0x7f7d
 8009518:	7131      	.short	0x7131
 800951a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800951e:	441d      	add	r5, r3
 8009520:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009524:	2820      	cmp	r0, #32
 8009526:	dd13      	ble.n	8009550 <_dtoa_r+0x210>
 8009528:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800952c:	9b00      	ldr	r3, [sp, #0]
 800952e:	fa08 f800 	lsl.w	r8, r8, r0
 8009532:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009536:	fa23 f000 	lsr.w	r0, r3, r0
 800953a:	ea48 0000 	orr.w	r0, r8, r0
 800953e:	f7f6 ffe1 	bl	8000504 <__aeabi_ui2d>
 8009542:	2301      	movs	r3, #1
 8009544:	4682      	mov	sl, r0
 8009546:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800954a:	3d01      	subs	r5, #1
 800954c:	9313      	str	r3, [sp, #76]	; 0x4c
 800954e:	e772      	b.n	8009436 <_dtoa_r+0xf6>
 8009550:	9b00      	ldr	r3, [sp, #0]
 8009552:	f1c0 0020 	rsb	r0, r0, #32
 8009556:	fa03 f000 	lsl.w	r0, r3, r0
 800955a:	e7f0      	b.n	800953e <_dtoa_r+0x1fe>
 800955c:	2301      	movs	r3, #1
 800955e:	e7b1      	b.n	80094c4 <_dtoa_r+0x184>
 8009560:	900f      	str	r0, [sp, #60]	; 0x3c
 8009562:	e7b0      	b.n	80094c6 <_dtoa_r+0x186>
 8009564:	9b05      	ldr	r3, [sp, #20]
 8009566:	eba3 030a 	sub.w	r3, r3, sl
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	f1ca 0300 	rsb	r3, sl, #0
 8009570:	9307      	str	r3, [sp, #28]
 8009572:	2300      	movs	r3, #0
 8009574:	930e      	str	r3, [sp, #56]	; 0x38
 8009576:	e7bb      	b.n	80094f0 <_dtoa_r+0x1b0>
 8009578:	2301      	movs	r3, #1
 800957a:	930a      	str	r3, [sp, #40]	; 0x28
 800957c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957e:	2b00      	cmp	r3, #0
 8009580:	dd59      	ble.n	8009636 <_dtoa_r+0x2f6>
 8009582:	9302      	str	r3, [sp, #8]
 8009584:	4699      	mov	r9, r3
 8009586:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009588:	2200      	movs	r2, #0
 800958a:	6072      	str	r2, [r6, #4]
 800958c:	2204      	movs	r2, #4
 800958e:	f102 0014 	add.w	r0, r2, #20
 8009592:	4298      	cmp	r0, r3
 8009594:	6871      	ldr	r1, [r6, #4]
 8009596:	d953      	bls.n	8009640 <_dtoa_r+0x300>
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fe88 	bl	800a2ae <_Balloc>
 800959e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095a0:	6030      	str	r0, [r6, #0]
 80095a2:	f1b9 0f0e 	cmp.w	r9, #14
 80095a6:	f8d3 b000 	ldr.w	fp, [r3]
 80095aa:	f200 80e6 	bhi.w	800977a <_dtoa_r+0x43a>
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	f000 80e3 	beq.w	800977a <_dtoa_r+0x43a>
 80095b4:	ed9d 7b00 	vldr	d7, [sp]
 80095b8:	f1ba 0f00 	cmp.w	sl, #0
 80095bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80095c0:	dd74      	ble.n	80096ac <_dtoa_r+0x36c>
 80095c2:	4a2a      	ldr	r2, [pc, #168]	; (800966c <_dtoa_r+0x32c>)
 80095c4:	f00a 030f 	and.w	r3, sl, #15
 80095c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80095cc:	ed93 7b00 	vldr	d7, [r3]
 80095d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80095d4:	06f0      	lsls	r0, r6, #27
 80095d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80095da:	d565      	bpl.n	80096a8 <_dtoa_r+0x368>
 80095dc:	4b24      	ldr	r3, [pc, #144]	; (8009670 <_dtoa_r+0x330>)
 80095de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095e6:	f7f7 f931 	bl	800084c <__aeabi_ddiv>
 80095ea:	e9cd 0100 	strd	r0, r1, [sp]
 80095ee:	f006 060f 	and.w	r6, r6, #15
 80095f2:	2503      	movs	r5, #3
 80095f4:	4f1e      	ldr	r7, [pc, #120]	; (8009670 <_dtoa_r+0x330>)
 80095f6:	e04c      	b.n	8009692 <_dtoa_r+0x352>
 80095f8:	2301      	movs	r3, #1
 80095fa:	930a      	str	r3, [sp, #40]	; 0x28
 80095fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095fe:	4453      	add	r3, sl
 8009600:	f103 0901 	add.w	r9, r3, #1
 8009604:	9302      	str	r3, [sp, #8]
 8009606:	464b      	mov	r3, r9
 8009608:	2b01      	cmp	r3, #1
 800960a:	bfb8      	it	lt
 800960c:	2301      	movlt	r3, #1
 800960e:	e7ba      	b.n	8009586 <_dtoa_r+0x246>
 8009610:	2300      	movs	r3, #0
 8009612:	e7b2      	b.n	800957a <_dtoa_r+0x23a>
 8009614:	2300      	movs	r3, #0
 8009616:	e7f0      	b.n	80095fa <_dtoa_r+0x2ba>
 8009618:	2501      	movs	r5, #1
 800961a:	2300      	movs	r3, #0
 800961c:	9306      	str	r3, [sp, #24]
 800961e:	950a      	str	r5, [sp, #40]	; 0x28
 8009620:	f04f 33ff 	mov.w	r3, #4294967295
 8009624:	9302      	str	r3, [sp, #8]
 8009626:	4699      	mov	r9, r3
 8009628:	2200      	movs	r2, #0
 800962a:	2312      	movs	r3, #18
 800962c:	920b      	str	r2, [sp, #44]	; 0x2c
 800962e:	e7aa      	b.n	8009586 <_dtoa_r+0x246>
 8009630:	2301      	movs	r3, #1
 8009632:	930a      	str	r3, [sp, #40]	; 0x28
 8009634:	e7f4      	b.n	8009620 <_dtoa_r+0x2e0>
 8009636:	2301      	movs	r3, #1
 8009638:	9302      	str	r3, [sp, #8]
 800963a:	4699      	mov	r9, r3
 800963c:	461a      	mov	r2, r3
 800963e:	e7f5      	b.n	800962c <_dtoa_r+0x2ec>
 8009640:	3101      	adds	r1, #1
 8009642:	6071      	str	r1, [r6, #4]
 8009644:	0052      	lsls	r2, r2, #1
 8009646:	e7a2      	b.n	800958e <_dtoa_r+0x24e>
 8009648:	636f4361 	.word	0x636f4361
 800964c:	3fd287a7 	.word	0x3fd287a7
 8009650:	8b60c8b3 	.word	0x8b60c8b3
 8009654:	3fc68a28 	.word	0x3fc68a28
 8009658:	509f79fb 	.word	0x509f79fb
 800965c:	3fd34413 	.word	0x3fd34413
 8009660:	7ff00000 	.word	0x7ff00000
 8009664:	0800b1bd 	.word	0x0800b1bd
 8009668:	3ff80000 	.word	0x3ff80000
 800966c:	0800b278 	.word	0x0800b278
 8009670:	0800b250 	.word	0x0800b250
 8009674:	0800b1e9 	.word	0x0800b1e9
 8009678:	07f1      	lsls	r1, r6, #31
 800967a:	d508      	bpl.n	800968e <_dtoa_r+0x34e>
 800967c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009684:	f7f6 ffb8 	bl	80005f8 <__aeabi_dmul>
 8009688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800968c:	3501      	adds	r5, #1
 800968e:	1076      	asrs	r6, r6, #1
 8009690:	3708      	adds	r7, #8
 8009692:	2e00      	cmp	r6, #0
 8009694:	d1f0      	bne.n	8009678 <_dtoa_r+0x338>
 8009696:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800969a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800969e:	f7f7 f8d5 	bl	800084c <__aeabi_ddiv>
 80096a2:	e9cd 0100 	strd	r0, r1, [sp]
 80096a6:	e01a      	b.n	80096de <_dtoa_r+0x39e>
 80096a8:	2502      	movs	r5, #2
 80096aa:	e7a3      	b.n	80095f4 <_dtoa_r+0x2b4>
 80096ac:	f000 80a0 	beq.w	80097f0 <_dtoa_r+0x4b0>
 80096b0:	f1ca 0600 	rsb	r6, sl, #0
 80096b4:	4b9f      	ldr	r3, [pc, #636]	; (8009934 <_dtoa_r+0x5f4>)
 80096b6:	4fa0      	ldr	r7, [pc, #640]	; (8009938 <_dtoa_r+0x5f8>)
 80096b8:	f006 020f 	and.w	r2, r6, #15
 80096bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096c8:	f7f6 ff96 	bl	80005f8 <__aeabi_dmul>
 80096cc:	e9cd 0100 	strd	r0, r1, [sp]
 80096d0:	1136      	asrs	r6, r6, #4
 80096d2:	2300      	movs	r3, #0
 80096d4:	2502      	movs	r5, #2
 80096d6:	2e00      	cmp	r6, #0
 80096d8:	d17f      	bne.n	80097da <_dtoa_r+0x49a>
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e1      	bne.n	80096a2 <_dtoa_r+0x362>
 80096de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8087 	beq.w	80097f4 <_dtoa_r+0x4b4>
 80096e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80096ea:	2200      	movs	r2, #0
 80096ec:	4b93      	ldr	r3, [pc, #588]	; (800993c <_dtoa_r+0x5fc>)
 80096ee:	4630      	mov	r0, r6
 80096f0:	4639      	mov	r1, r7
 80096f2:	f7f7 f9f3 	bl	8000adc <__aeabi_dcmplt>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d07c      	beq.n	80097f4 <_dtoa_r+0x4b4>
 80096fa:	f1b9 0f00 	cmp.w	r9, #0
 80096fe:	d079      	beq.n	80097f4 <_dtoa_r+0x4b4>
 8009700:	9b02      	ldr	r3, [sp, #8]
 8009702:	2b00      	cmp	r3, #0
 8009704:	dd35      	ble.n	8009772 <_dtoa_r+0x432>
 8009706:	f10a 33ff 	add.w	r3, sl, #4294967295
 800970a:	9308      	str	r3, [sp, #32]
 800970c:	4639      	mov	r1, r7
 800970e:	2200      	movs	r2, #0
 8009710:	4b8b      	ldr	r3, [pc, #556]	; (8009940 <_dtoa_r+0x600>)
 8009712:	4630      	mov	r0, r6
 8009714:	f7f6 ff70 	bl	80005f8 <__aeabi_dmul>
 8009718:	e9cd 0100 	strd	r0, r1, [sp]
 800971c:	9f02      	ldr	r7, [sp, #8]
 800971e:	3501      	adds	r5, #1
 8009720:	4628      	mov	r0, r5
 8009722:	f7f6 feff 	bl	8000524 <__aeabi_i2d>
 8009726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800972a:	f7f6 ff65 	bl	80005f8 <__aeabi_dmul>
 800972e:	2200      	movs	r2, #0
 8009730:	4b84      	ldr	r3, [pc, #528]	; (8009944 <_dtoa_r+0x604>)
 8009732:	f7f6 fdab 	bl	800028c <__adddf3>
 8009736:	4605      	mov	r5, r0
 8009738:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800973c:	2f00      	cmp	r7, #0
 800973e:	d15d      	bne.n	80097fc <_dtoa_r+0x4bc>
 8009740:	2200      	movs	r2, #0
 8009742:	4b81      	ldr	r3, [pc, #516]	; (8009948 <_dtoa_r+0x608>)
 8009744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009748:	f7f6 fd9e 	bl	8000288 <__aeabi_dsub>
 800974c:	462a      	mov	r2, r5
 800974e:	4633      	mov	r3, r6
 8009750:	e9cd 0100 	strd	r0, r1, [sp]
 8009754:	f7f7 f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 8009758:	2800      	cmp	r0, #0
 800975a:	f040 8288 	bne.w	8009c6e <_dtoa_r+0x92e>
 800975e:	462a      	mov	r2, r5
 8009760:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009764:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009768:	f7f7 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800976c:	2800      	cmp	r0, #0
 800976e:	f040 827c 	bne.w	8009c6a <_dtoa_r+0x92a>
 8009772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009776:	e9cd 2300 	strd	r2, r3, [sp]
 800977a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800977c:	2b00      	cmp	r3, #0
 800977e:	f2c0 8150 	blt.w	8009a22 <_dtoa_r+0x6e2>
 8009782:	f1ba 0f0e 	cmp.w	sl, #14
 8009786:	f300 814c 	bgt.w	8009a22 <_dtoa_r+0x6e2>
 800978a:	4b6a      	ldr	r3, [pc, #424]	; (8009934 <_dtoa_r+0x5f4>)
 800978c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009790:	ed93 7b00 	vldr	d7, [r3]
 8009794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009796:	2b00      	cmp	r3, #0
 8009798:	ed8d 7b02 	vstr	d7, [sp, #8]
 800979c:	f280 80d8 	bge.w	8009950 <_dtoa_r+0x610>
 80097a0:	f1b9 0f00 	cmp.w	r9, #0
 80097a4:	f300 80d4 	bgt.w	8009950 <_dtoa_r+0x610>
 80097a8:	f040 825e 	bne.w	8009c68 <_dtoa_r+0x928>
 80097ac:	2200      	movs	r2, #0
 80097ae:	4b66      	ldr	r3, [pc, #408]	; (8009948 <_dtoa_r+0x608>)
 80097b0:	ec51 0b17 	vmov	r0, r1, d7
 80097b4:	f7f6 ff20 	bl	80005f8 <__aeabi_dmul>
 80097b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097bc:	f7f7 f9a2 	bl	8000b04 <__aeabi_dcmpge>
 80097c0:	464f      	mov	r7, r9
 80097c2:	464e      	mov	r6, r9
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f040 8234 	bne.w	8009c32 <_dtoa_r+0x8f2>
 80097ca:	2331      	movs	r3, #49	; 0x31
 80097cc:	f10b 0501 	add.w	r5, fp, #1
 80097d0:	f88b 3000 	strb.w	r3, [fp]
 80097d4:	f10a 0a01 	add.w	sl, sl, #1
 80097d8:	e22f      	b.n	8009c3a <_dtoa_r+0x8fa>
 80097da:	07f2      	lsls	r2, r6, #31
 80097dc:	d505      	bpl.n	80097ea <_dtoa_r+0x4aa>
 80097de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e2:	f7f6 ff09 	bl	80005f8 <__aeabi_dmul>
 80097e6:	3501      	adds	r5, #1
 80097e8:	2301      	movs	r3, #1
 80097ea:	1076      	asrs	r6, r6, #1
 80097ec:	3708      	adds	r7, #8
 80097ee:	e772      	b.n	80096d6 <_dtoa_r+0x396>
 80097f0:	2502      	movs	r5, #2
 80097f2:	e774      	b.n	80096de <_dtoa_r+0x39e>
 80097f4:	f8cd a020 	str.w	sl, [sp, #32]
 80097f8:	464f      	mov	r7, r9
 80097fa:	e791      	b.n	8009720 <_dtoa_r+0x3e0>
 80097fc:	4b4d      	ldr	r3, [pc, #308]	; (8009934 <_dtoa_r+0x5f4>)
 80097fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009802:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009808:	2b00      	cmp	r3, #0
 800980a:	d047      	beq.n	800989c <_dtoa_r+0x55c>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	2000      	movs	r0, #0
 8009812:	494e      	ldr	r1, [pc, #312]	; (800994c <_dtoa_r+0x60c>)
 8009814:	f7f7 f81a 	bl	800084c <__aeabi_ddiv>
 8009818:	462a      	mov	r2, r5
 800981a:	4633      	mov	r3, r6
 800981c:	f7f6 fd34 	bl	8000288 <__aeabi_dsub>
 8009820:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009824:	465d      	mov	r5, fp
 8009826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800982a:	f7f7 f995 	bl	8000b58 <__aeabi_d2iz>
 800982e:	4606      	mov	r6, r0
 8009830:	f7f6 fe78 	bl	8000524 <__aeabi_i2d>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800983c:	f7f6 fd24 	bl	8000288 <__aeabi_dsub>
 8009840:	3630      	adds	r6, #48	; 0x30
 8009842:	f805 6b01 	strb.w	r6, [r5], #1
 8009846:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800984a:	e9cd 0100 	strd	r0, r1, [sp]
 800984e:	f7f7 f945 	bl	8000adc <__aeabi_dcmplt>
 8009852:	2800      	cmp	r0, #0
 8009854:	d163      	bne.n	800991e <_dtoa_r+0x5de>
 8009856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800985a:	2000      	movs	r0, #0
 800985c:	4937      	ldr	r1, [pc, #220]	; (800993c <_dtoa_r+0x5fc>)
 800985e:	f7f6 fd13 	bl	8000288 <__aeabi_dsub>
 8009862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009866:	f7f7 f939 	bl	8000adc <__aeabi_dcmplt>
 800986a:	2800      	cmp	r0, #0
 800986c:	f040 80b7 	bne.w	80099de <_dtoa_r+0x69e>
 8009870:	eba5 030b 	sub.w	r3, r5, fp
 8009874:	429f      	cmp	r7, r3
 8009876:	f77f af7c 	ble.w	8009772 <_dtoa_r+0x432>
 800987a:	2200      	movs	r2, #0
 800987c:	4b30      	ldr	r3, [pc, #192]	; (8009940 <_dtoa_r+0x600>)
 800987e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009882:	f7f6 feb9 	bl	80005f8 <__aeabi_dmul>
 8009886:	2200      	movs	r2, #0
 8009888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800988c:	4b2c      	ldr	r3, [pc, #176]	; (8009940 <_dtoa_r+0x600>)
 800988e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	e9cd 0100 	strd	r0, r1, [sp]
 800989a:	e7c4      	b.n	8009826 <_dtoa_r+0x4e6>
 800989c:	462a      	mov	r2, r5
 800989e:	4633      	mov	r3, r6
 80098a0:	f7f6 feaa 	bl	80005f8 <__aeabi_dmul>
 80098a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80098a8:	eb0b 0507 	add.w	r5, fp, r7
 80098ac:	465e      	mov	r6, fp
 80098ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098b2:	f7f7 f951 	bl	8000b58 <__aeabi_d2iz>
 80098b6:	4607      	mov	r7, r0
 80098b8:	f7f6 fe34 	bl	8000524 <__aeabi_i2d>
 80098bc:	3730      	adds	r7, #48	; 0x30
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098c6:	f7f6 fcdf 	bl	8000288 <__aeabi_dsub>
 80098ca:	f806 7b01 	strb.w	r7, [r6], #1
 80098ce:	42ae      	cmp	r6, r5
 80098d0:	e9cd 0100 	strd	r0, r1, [sp]
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	d126      	bne.n	8009928 <_dtoa_r+0x5e8>
 80098da:	4b1c      	ldr	r3, [pc, #112]	; (800994c <_dtoa_r+0x60c>)
 80098dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e0:	f7f6 fcd4 	bl	800028c <__adddf3>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098ec:	f7f7 f914 	bl	8000b18 <__aeabi_dcmpgt>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d174      	bne.n	80099de <_dtoa_r+0x69e>
 80098f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098f8:	2000      	movs	r0, #0
 80098fa:	4914      	ldr	r1, [pc, #80]	; (800994c <_dtoa_r+0x60c>)
 80098fc:	f7f6 fcc4 	bl	8000288 <__aeabi_dsub>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009908:	f7f7 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800990c:	2800      	cmp	r0, #0
 800990e:	f43f af30 	beq.w	8009772 <_dtoa_r+0x432>
 8009912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009916:	2b30      	cmp	r3, #48	; 0x30
 8009918:	f105 32ff 	add.w	r2, r5, #4294967295
 800991c:	d002      	beq.n	8009924 <_dtoa_r+0x5e4>
 800991e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009922:	e04a      	b.n	80099ba <_dtoa_r+0x67a>
 8009924:	4615      	mov	r5, r2
 8009926:	e7f4      	b.n	8009912 <_dtoa_r+0x5d2>
 8009928:	4b05      	ldr	r3, [pc, #20]	; (8009940 <_dtoa_r+0x600>)
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	e9cd 0100 	strd	r0, r1, [sp]
 8009932:	e7bc      	b.n	80098ae <_dtoa_r+0x56e>
 8009934:	0800b278 	.word	0x0800b278
 8009938:	0800b250 	.word	0x0800b250
 800993c:	3ff00000 	.word	0x3ff00000
 8009940:	40240000 	.word	0x40240000
 8009944:	401c0000 	.word	0x401c0000
 8009948:	40140000 	.word	0x40140000
 800994c:	3fe00000 	.word	0x3fe00000
 8009950:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009954:	465d      	mov	r5, fp
 8009956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 ff75 	bl	800084c <__aeabi_ddiv>
 8009962:	f7f7 f8f9 	bl	8000b58 <__aeabi_d2iz>
 8009966:	4680      	mov	r8, r0
 8009968:	f7f6 fddc 	bl	8000524 <__aeabi_i2d>
 800996c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009970:	f7f6 fe42 	bl	80005f8 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4630      	mov	r0, r6
 800997a:	4639      	mov	r1, r7
 800997c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009980:	f7f6 fc82 	bl	8000288 <__aeabi_dsub>
 8009984:	f805 6b01 	strb.w	r6, [r5], #1
 8009988:	eba5 060b 	sub.w	r6, r5, fp
 800998c:	45b1      	cmp	r9, r6
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	d139      	bne.n	8009a08 <_dtoa_r+0x6c8>
 8009994:	f7f6 fc7a 	bl	800028c <__adddf3>
 8009998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800999c:	4606      	mov	r6, r0
 800999e:	460f      	mov	r7, r1
 80099a0:	f7f7 f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 80099a4:	b9c8      	cbnz	r0, 80099da <_dtoa_r+0x69a>
 80099a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099aa:	4630      	mov	r0, r6
 80099ac:	4639      	mov	r1, r7
 80099ae:	f7f7 f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b2:	b110      	cbz	r0, 80099ba <_dtoa_r+0x67a>
 80099b4:	f018 0f01 	tst.w	r8, #1
 80099b8:	d10f      	bne.n	80099da <_dtoa_r+0x69a>
 80099ba:	9904      	ldr	r1, [sp, #16]
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fcaa 	bl	800a316 <_Bfree>
 80099c2:	2300      	movs	r3, #0
 80099c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099c6:	702b      	strb	r3, [r5, #0]
 80099c8:	f10a 0301 	add.w	r3, sl, #1
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 8241 	beq.w	8009e58 <_dtoa_r+0xb18>
 80099d6:	601d      	str	r5, [r3, #0]
 80099d8:	e23e      	b.n	8009e58 <_dtoa_r+0xb18>
 80099da:	f8cd a020 	str.w	sl, [sp, #32]
 80099de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099e2:	2a39      	cmp	r2, #57	; 0x39
 80099e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80099e8:	d108      	bne.n	80099fc <_dtoa_r+0x6bc>
 80099ea:	459b      	cmp	fp, r3
 80099ec:	d10a      	bne.n	8009a04 <_dtoa_r+0x6c4>
 80099ee:	9b08      	ldr	r3, [sp, #32]
 80099f0:	3301      	adds	r3, #1
 80099f2:	9308      	str	r3, [sp, #32]
 80099f4:	2330      	movs	r3, #48	; 0x30
 80099f6:	f88b 3000 	strb.w	r3, [fp]
 80099fa:	465b      	mov	r3, fp
 80099fc:	781a      	ldrb	r2, [r3, #0]
 80099fe:	3201      	adds	r2, #1
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	e78c      	b.n	800991e <_dtoa_r+0x5de>
 8009a04:	461d      	mov	r5, r3
 8009a06:	e7ea      	b.n	80099de <_dtoa_r+0x69e>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4b9b      	ldr	r3, [pc, #620]	; (8009c78 <_dtoa_r+0x938>)
 8009a0c:	f7f6 fdf4 	bl	80005f8 <__aeabi_dmul>
 8009a10:	2200      	movs	r2, #0
 8009a12:	2300      	movs	r3, #0
 8009a14:	4606      	mov	r6, r0
 8009a16:	460f      	mov	r7, r1
 8009a18:	f7f7 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d09a      	beq.n	8009956 <_dtoa_r+0x616>
 8009a20:	e7cb      	b.n	80099ba <_dtoa_r+0x67a>
 8009a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a24:	2a00      	cmp	r2, #0
 8009a26:	f000 808b 	beq.w	8009b40 <_dtoa_r+0x800>
 8009a2a:	9a06      	ldr	r2, [sp, #24]
 8009a2c:	2a01      	cmp	r2, #1
 8009a2e:	dc6e      	bgt.n	8009b0e <_dtoa_r+0x7ce>
 8009a30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	d067      	beq.n	8009b06 <_dtoa_r+0x7c6>
 8009a36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a3a:	9f07      	ldr	r7, [sp, #28]
 8009a3c:	9d05      	ldr	r5, [sp, #20]
 8009a3e:	9a05      	ldr	r2, [sp, #20]
 8009a40:	2101      	movs	r1, #1
 8009a42:	441a      	add	r2, r3
 8009a44:	4620      	mov	r0, r4
 8009a46:	9205      	str	r2, [sp, #20]
 8009a48:	4498      	add	r8, r3
 8009a4a:	f000 fd04 	bl	800a456 <__i2b>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	2d00      	cmp	r5, #0
 8009a52:	dd0c      	ble.n	8009a6e <_dtoa_r+0x72e>
 8009a54:	f1b8 0f00 	cmp.w	r8, #0
 8009a58:	dd09      	ble.n	8009a6e <_dtoa_r+0x72e>
 8009a5a:	4545      	cmp	r5, r8
 8009a5c:	9a05      	ldr	r2, [sp, #20]
 8009a5e:	462b      	mov	r3, r5
 8009a60:	bfa8      	it	ge
 8009a62:	4643      	movge	r3, r8
 8009a64:	1ad2      	subs	r2, r2, r3
 8009a66:	9205      	str	r2, [sp, #20]
 8009a68:	1aed      	subs	r5, r5, r3
 8009a6a:	eba8 0803 	sub.w	r8, r8, r3
 8009a6e:	9b07      	ldr	r3, [sp, #28]
 8009a70:	b1eb      	cbz	r3, 8009aae <_dtoa_r+0x76e>
 8009a72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d067      	beq.n	8009b48 <_dtoa_r+0x808>
 8009a78:	b18f      	cbz	r7, 8009a9e <_dtoa_r+0x75e>
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	463a      	mov	r2, r7
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 fd88 	bl	800a594 <__pow5mult>
 8009a84:	9a04      	ldr	r2, [sp, #16]
 8009a86:	4601      	mov	r1, r0
 8009a88:	4606      	mov	r6, r0
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 fcec 	bl	800a468 <__multiply>
 8009a90:	9904      	ldr	r1, [sp, #16]
 8009a92:	9008      	str	r0, [sp, #32]
 8009a94:	4620      	mov	r0, r4
 8009a96:	f000 fc3e 	bl	800a316 <_Bfree>
 8009a9a:	9b08      	ldr	r3, [sp, #32]
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	9b07      	ldr	r3, [sp, #28]
 8009aa0:	1bda      	subs	r2, r3, r7
 8009aa2:	d004      	beq.n	8009aae <_dtoa_r+0x76e>
 8009aa4:	9904      	ldr	r1, [sp, #16]
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f000 fd74 	bl	800a594 <__pow5mult>
 8009aac:	9004      	str	r0, [sp, #16]
 8009aae:	2101      	movs	r1, #1
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 fcd0 	bl	800a456 <__i2b>
 8009ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ab8:	4607      	mov	r7, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 81d0 	beq.w	8009e60 <_dtoa_r+0xb20>
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fd65 	bl	800a594 <__pow5mult>
 8009aca:	9b06      	ldr	r3, [sp, #24]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	4607      	mov	r7, r0
 8009ad0:	dc40      	bgt.n	8009b54 <_dtoa_r+0x814>
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d139      	bne.n	8009b4c <_dtoa_r+0x80c>
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d136      	bne.n	8009b50 <_dtoa_r+0x810>
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ae8:	0d1b      	lsrs	r3, r3, #20
 8009aea:	051b      	lsls	r3, r3, #20
 8009aec:	b12b      	cbz	r3, 8009afa <_dtoa_r+0x7ba>
 8009aee:	9b05      	ldr	r3, [sp, #20]
 8009af0:	3301      	adds	r3, #1
 8009af2:	9305      	str	r3, [sp, #20]
 8009af4:	f108 0801 	add.w	r8, r8, #1
 8009af8:	2301      	movs	r3, #1
 8009afa:	9307      	str	r3, [sp, #28]
 8009afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d12a      	bne.n	8009b58 <_dtoa_r+0x818>
 8009b02:	2001      	movs	r0, #1
 8009b04:	e030      	b.n	8009b68 <_dtoa_r+0x828>
 8009b06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b0c:	e795      	b.n	8009a3a <_dtoa_r+0x6fa>
 8009b0e:	9b07      	ldr	r3, [sp, #28]
 8009b10:	f109 37ff 	add.w	r7, r9, #4294967295
 8009b14:	42bb      	cmp	r3, r7
 8009b16:	bfbf      	itttt	lt
 8009b18:	9b07      	ldrlt	r3, [sp, #28]
 8009b1a:	9707      	strlt	r7, [sp, #28]
 8009b1c:	1afa      	sublt	r2, r7, r3
 8009b1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009b20:	bfbb      	ittet	lt
 8009b22:	189b      	addlt	r3, r3, r2
 8009b24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009b26:	1bdf      	subge	r7, r3, r7
 8009b28:	2700      	movlt	r7, #0
 8009b2a:	f1b9 0f00 	cmp.w	r9, #0
 8009b2e:	bfb5      	itete	lt
 8009b30:	9b05      	ldrlt	r3, [sp, #20]
 8009b32:	9d05      	ldrge	r5, [sp, #20]
 8009b34:	eba3 0509 	sublt.w	r5, r3, r9
 8009b38:	464b      	movge	r3, r9
 8009b3a:	bfb8      	it	lt
 8009b3c:	2300      	movlt	r3, #0
 8009b3e:	e77e      	b.n	8009a3e <_dtoa_r+0x6fe>
 8009b40:	9f07      	ldr	r7, [sp, #28]
 8009b42:	9d05      	ldr	r5, [sp, #20]
 8009b44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009b46:	e783      	b.n	8009a50 <_dtoa_r+0x710>
 8009b48:	9a07      	ldr	r2, [sp, #28]
 8009b4a:	e7ab      	b.n	8009aa4 <_dtoa_r+0x764>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e7d4      	b.n	8009afa <_dtoa_r+0x7ba>
 8009b50:	9b00      	ldr	r3, [sp, #0]
 8009b52:	e7d2      	b.n	8009afa <_dtoa_r+0x7ba>
 8009b54:	2300      	movs	r3, #0
 8009b56:	9307      	str	r3, [sp, #28]
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009b5e:	6918      	ldr	r0, [r3, #16]
 8009b60:	f000 fc2b 	bl	800a3ba <__hi0bits>
 8009b64:	f1c0 0020 	rsb	r0, r0, #32
 8009b68:	4440      	add	r0, r8
 8009b6a:	f010 001f 	ands.w	r0, r0, #31
 8009b6e:	d047      	beq.n	8009c00 <_dtoa_r+0x8c0>
 8009b70:	f1c0 0320 	rsb	r3, r0, #32
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	dd3b      	ble.n	8009bf0 <_dtoa_r+0x8b0>
 8009b78:	9b05      	ldr	r3, [sp, #20]
 8009b7a:	f1c0 001c 	rsb	r0, r0, #28
 8009b7e:	4403      	add	r3, r0
 8009b80:	9305      	str	r3, [sp, #20]
 8009b82:	4405      	add	r5, r0
 8009b84:	4480      	add	r8, r0
 8009b86:	9b05      	ldr	r3, [sp, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	dd05      	ble.n	8009b98 <_dtoa_r+0x858>
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	9904      	ldr	r1, [sp, #16]
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fd4d 	bl	800a630 <__lshift>
 8009b96:	9004      	str	r0, [sp, #16]
 8009b98:	f1b8 0f00 	cmp.w	r8, #0
 8009b9c:	dd05      	ble.n	8009baa <_dtoa_r+0x86a>
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 fd44 	bl	800a630 <__lshift>
 8009ba8:	4607      	mov	r7, r0
 8009baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bac:	b353      	cbz	r3, 8009c04 <_dtoa_r+0x8c4>
 8009bae:	4639      	mov	r1, r7
 8009bb0:	9804      	ldr	r0, [sp, #16]
 8009bb2:	f000 fd91 	bl	800a6d8 <__mcmp>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	da24      	bge.n	8009c04 <_dtoa_r+0x8c4>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	220a      	movs	r2, #10
 8009bbe:	9904      	ldr	r1, [sp, #16]
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	f000 fbbf 	bl	800a344 <__multadd>
 8009bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc8:	9004      	str	r0, [sp, #16]
 8009bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 814d 	beq.w	8009e6e <_dtoa_r+0xb2e>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	220a      	movs	r2, #10
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 fbb2 	bl	800a344 <__multadd>
 8009be0:	9b02      	ldr	r3, [sp, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	4606      	mov	r6, r0
 8009be6:	dc4f      	bgt.n	8009c88 <_dtoa_r+0x948>
 8009be8:	9b06      	ldr	r3, [sp, #24]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	dd4c      	ble.n	8009c88 <_dtoa_r+0x948>
 8009bee:	e011      	b.n	8009c14 <_dtoa_r+0x8d4>
 8009bf0:	d0c9      	beq.n	8009b86 <_dtoa_r+0x846>
 8009bf2:	9a05      	ldr	r2, [sp, #20]
 8009bf4:	331c      	adds	r3, #28
 8009bf6:	441a      	add	r2, r3
 8009bf8:	9205      	str	r2, [sp, #20]
 8009bfa:	441d      	add	r5, r3
 8009bfc:	4498      	add	r8, r3
 8009bfe:	e7c2      	b.n	8009b86 <_dtoa_r+0x846>
 8009c00:	4603      	mov	r3, r0
 8009c02:	e7f6      	b.n	8009bf2 <_dtoa_r+0x8b2>
 8009c04:	f1b9 0f00 	cmp.w	r9, #0
 8009c08:	dc38      	bgt.n	8009c7c <_dtoa_r+0x93c>
 8009c0a:	9b06      	ldr	r3, [sp, #24]
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	dd35      	ble.n	8009c7c <_dtoa_r+0x93c>
 8009c10:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c14:	9b02      	ldr	r3, [sp, #8]
 8009c16:	b963      	cbnz	r3, 8009c32 <_dtoa_r+0x8f2>
 8009c18:	4639      	mov	r1, r7
 8009c1a:	2205      	movs	r2, #5
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fb91 	bl	800a344 <__multadd>
 8009c22:	4601      	mov	r1, r0
 8009c24:	4607      	mov	r7, r0
 8009c26:	9804      	ldr	r0, [sp, #16]
 8009c28:	f000 fd56 	bl	800a6d8 <__mcmp>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f73f adcc 	bgt.w	80097ca <_dtoa_r+0x48a>
 8009c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c34:	465d      	mov	r5, fp
 8009c36:	ea6f 0a03 	mvn.w	sl, r3
 8009c3a:	f04f 0900 	mov.w	r9, #0
 8009c3e:	4639      	mov	r1, r7
 8009c40:	4620      	mov	r0, r4
 8009c42:	f000 fb68 	bl	800a316 <_Bfree>
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	f43f aeb7 	beq.w	80099ba <_dtoa_r+0x67a>
 8009c4c:	f1b9 0f00 	cmp.w	r9, #0
 8009c50:	d005      	beq.n	8009c5e <_dtoa_r+0x91e>
 8009c52:	45b1      	cmp	r9, r6
 8009c54:	d003      	beq.n	8009c5e <_dtoa_r+0x91e>
 8009c56:	4649      	mov	r1, r9
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f000 fb5c 	bl	800a316 <_Bfree>
 8009c5e:	4631      	mov	r1, r6
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 fb58 	bl	800a316 <_Bfree>
 8009c66:	e6a8      	b.n	80099ba <_dtoa_r+0x67a>
 8009c68:	2700      	movs	r7, #0
 8009c6a:	463e      	mov	r6, r7
 8009c6c:	e7e1      	b.n	8009c32 <_dtoa_r+0x8f2>
 8009c6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009c72:	463e      	mov	r6, r7
 8009c74:	e5a9      	b.n	80097ca <_dtoa_r+0x48a>
 8009c76:	bf00      	nop
 8009c78:	40240000 	.word	0x40240000
 8009c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 80fa 	beq.w	8009e7c <_dtoa_r+0xb3c>
 8009c88:	2d00      	cmp	r5, #0
 8009c8a:	dd05      	ble.n	8009c98 <_dtoa_r+0x958>
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4620      	mov	r0, r4
 8009c92:	f000 fccd 	bl	800a630 <__lshift>
 8009c96:	4606      	mov	r6, r0
 8009c98:	9b07      	ldr	r3, [sp, #28]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d04c      	beq.n	8009d38 <_dtoa_r+0x9f8>
 8009c9e:	6871      	ldr	r1, [r6, #4]
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f000 fb04 	bl	800a2ae <_Balloc>
 8009ca6:	6932      	ldr	r2, [r6, #16]
 8009ca8:	3202      	adds	r2, #2
 8009caa:	4605      	mov	r5, r0
 8009cac:	0092      	lsls	r2, r2, #2
 8009cae:	f106 010c 	add.w	r1, r6, #12
 8009cb2:	300c      	adds	r0, #12
 8009cb4:	f000 faf0 	bl	800a298 <memcpy>
 8009cb8:	2201      	movs	r2, #1
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 fcb7 	bl	800a630 <__lshift>
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	f8cd b014 	str.w	fp, [sp, #20]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	46b1      	mov	r9, r6
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	9804      	ldr	r0, [sp, #16]
 8009cd6:	f7ff faa7 	bl	8009228 <quorem>
 8009cda:	4649      	mov	r1, r9
 8009cdc:	4605      	mov	r5, r0
 8009cde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009ce2:	9804      	ldr	r0, [sp, #16]
 8009ce4:	f000 fcf8 	bl	800a6d8 <__mcmp>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	9000      	str	r0, [sp, #0]
 8009cec:	4639      	mov	r1, r7
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fd0c 	bl	800a70c <__mdiff>
 8009cf4:	68c3      	ldr	r3, [r0, #12]
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	bb03      	cbnz	r3, 8009d3c <_dtoa_r+0x9fc>
 8009cfa:	4601      	mov	r1, r0
 8009cfc:	9008      	str	r0, [sp, #32]
 8009cfe:	9804      	ldr	r0, [sp, #16]
 8009d00:	f000 fcea 	bl	800a6d8 <__mcmp>
 8009d04:	9a08      	ldr	r2, [sp, #32]
 8009d06:	4603      	mov	r3, r0
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	9308      	str	r3, [sp, #32]
 8009d0e:	f000 fb02 	bl	800a316 <_Bfree>
 8009d12:	9b08      	ldr	r3, [sp, #32]
 8009d14:	b9a3      	cbnz	r3, 8009d40 <_dtoa_r+0xa00>
 8009d16:	9a06      	ldr	r2, [sp, #24]
 8009d18:	b992      	cbnz	r2, 8009d40 <_dtoa_r+0xa00>
 8009d1a:	9a07      	ldr	r2, [sp, #28]
 8009d1c:	b982      	cbnz	r2, 8009d40 <_dtoa_r+0xa00>
 8009d1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d22:	d029      	beq.n	8009d78 <_dtoa_r+0xa38>
 8009d24:	9b00      	ldr	r3, [sp, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dd01      	ble.n	8009d2e <_dtoa_r+0x9ee>
 8009d2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009d2e:	9b05      	ldr	r3, [sp, #20]
 8009d30:	1c5d      	adds	r5, r3, #1
 8009d32:	f883 8000 	strb.w	r8, [r3]
 8009d36:	e782      	b.n	8009c3e <_dtoa_r+0x8fe>
 8009d38:	4630      	mov	r0, r6
 8009d3a:	e7c2      	b.n	8009cc2 <_dtoa_r+0x982>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e7e3      	b.n	8009d08 <_dtoa_r+0x9c8>
 8009d40:	9a00      	ldr	r2, [sp, #0]
 8009d42:	2a00      	cmp	r2, #0
 8009d44:	db04      	blt.n	8009d50 <_dtoa_r+0xa10>
 8009d46:	d125      	bne.n	8009d94 <_dtoa_r+0xa54>
 8009d48:	9a06      	ldr	r2, [sp, #24]
 8009d4a:	bb1a      	cbnz	r2, 8009d94 <_dtoa_r+0xa54>
 8009d4c:	9a07      	ldr	r2, [sp, #28]
 8009d4e:	bb0a      	cbnz	r2, 8009d94 <_dtoa_r+0xa54>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	ddec      	ble.n	8009d2e <_dtoa_r+0x9ee>
 8009d54:	2201      	movs	r2, #1
 8009d56:	9904      	ldr	r1, [sp, #16]
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 fc69 	bl	800a630 <__lshift>
 8009d5e:	4639      	mov	r1, r7
 8009d60:	9004      	str	r0, [sp, #16]
 8009d62:	f000 fcb9 	bl	800a6d8 <__mcmp>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	dc03      	bgt.n	8009d72 <_dtoa_r+0xa32>
 8009d6a:	d1e0      	bne.n	8009d2e <_dtoa_r+0x9ee>
 8009d6c:	f018 0f01 	tst.w	r8, #1
 8009d70:	d0dd      	beq.n	8009d2e <_dtoa_r+0x9ee>
 8009d72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d76:	d1d8      	bne.n	8009d2a <_dtoa_r+0x9ea>
 8009d78:	9b05      	ldr	r3, [sp, #20]
 8009d7a:	9a05      	ldr	r2, [sp, #20]
 8009d7c:	1c5d      	adds	r5, r3, #1
 8009d7e:	2339      	movs	r3, #57	; 0x39
 8009d80:	7013      	strb	r3, [r2, #0]
 8009d82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d86:	2b39      	cmp	r3, #57	; 0x39
 8009d88:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d8c:	d04f      	beq.n	8009e2e <_dtoa_r+0xaee>
 8009d8e:	3301      	adds	r3, #1
 8009d90:	7013      	strb	r3, [r2, #0]
 8009d92:	e754      	b.n	8009c3e <_dtoa_r+0x8fe>
 8009d94:	9a05      	ldr	r2, [sp, #20]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f102 0501 	add.w	r5, r2, #1
 8009d9c:	dd06      	ble.n	8009dac <_dtoa_r+0xa6c>
 8009d9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009da2:	d0e9      	beq.n	8009d78 <_dtoa_r+0xa38>
 8009da4:	f108 0801 	add.w	r8, r8, #1
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	e7c2      	b.n	8009d32 <_dtoa_r+0x9f2>
 8009dac:	9a02      	ldr	r2, [sp, #8]
 8009dae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009db2:	eba5 030b 	sub.w	r3, r5, fp
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d021      	beq.n	8009dfe <_dtoa_r+0xabe>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	220a      	movs	r2, #10
 8009dbe:	9904      	ldr	r1, [sp, #16]
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 fabf 	bl	800a344 <__multadd>
 8009dc6:	45b1      	cmp	r9, r6
 8009dc8:	9004      	str	r0, [sp, #16]
 8009dca:	f04f 0300 	mov.w	r3, #0
 8009dce:	f04f 020a 	mov.w	r2, #10
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	d105      	bne.n	8009de4 <_dtoa_r+0xaa4>
 8009dd8:	f000 fab4 	bl	800a344 <__multadd>
 8009ddc:	4681      	mov	r9, r0
 8009dde:	4606      	mov	r6, r0
 8009de0:	9505      	str	r5, [sp, #20]
 8009de2:	e776      	b.n	8009cd2 <_dtoa_r+0x992>
 8009de4:	f000 faae 	bl	800a344 <__multadd>
 8009de8:	4631      	mov	r1, r6
 8009dea:	4681      	mov	r9, r0
 8009dec:	2300      	movs	r3, #0
 8009dee:	220a      	movs	r2, #10
 8009df0:	4620      	mov	r0, r4
 8009df2:	f000 faa7 	bl	800a344 <__multadd>
 8009df6:	4606      	mov	r6, r0
 8009df8:	e7f2      	b.n	8009de0 <_dtoa_r+0xaa0>
 8009dfa:	f04f 0900 	mov.w	r9, #0
 8009dfe:	2201      	movs	r2, #1
 8009e00:	9904      	ldr	r1, [sp, #16]
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fc14 	bl	800a630 <__lshift>
 8009e08:	4639      	mov	r1, r7
 8009e0a:	9004      	str	r0, [sp, #16]
 8009e0c:	f000 fc64 	bl	800a6d8 <__mcmp>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	dcb6      	bgt.n	8009d82 <_dtoa_r+0xa42>
 8009e14:	d102      	bne.n	8009e1c <_dtoa_r+0xadc>
 8009e16:	f018 0f01 	tst.w	r8, #1
 8009e1a:	d1b2      	bne.n	8009d82 <_dtoa_r+0xa42>
 8009e1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e20:	2b30      	cmp	r3, #48	; 0x30
 8009e22:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e26:	f47f af0a 	bne.w	8009c3e <_dtoa_r+0x8fe>
 8009e2a:	4615      	mov	r5, r2
 8009e2c:	e7f6      	b.n	8009e1c <_dtoa_r+0xadc>
 8009e2e:	4593      	cmp	fp, r2
 8009e30:	d105      	bne.n	8009e3e <_dtoa_r+0xafe>
 8009e32:	2331      	movs	r3, #49	; 0x31
 8009e34:	f10a 0a01 	add.w	sl, sl, #1
 8009e38:	f88b 3000 	strb.w	r3, [fp]
 8009e3c:	e6ff      	b.n	8009c3e <_dtoa_r+0x8fe>
 8009e3e:	4615      	mov	r5, r2
 8009e40:	e79f      	b.n	8009d82 <_dtoa_r+0xa42>
 8009e42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009ea8 <_dtoa_r+0xb68>
 8009e46:	e007      	b.n	8009e58 <_dtoa_r+0xb18>
 8009e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009eac <_dtoa_r+0xb6c>
 8009e4e:	b11b      	cbz	r3, 8009e58 <_dtoa_r+0xb18>
 8009e50:	f10b 0308 	add.w	r3, fp, #8
 8009e54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	4658      	mov	r0, fp
 8009e5a:	b017      	add	sp, #92	; 0x5c
 8009e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e60:	9b06      	ldr	r3, [sp, #24]
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	f77f ae35 	ble.w	8009ad2 <_dtoa_r+0x792>
 8009e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e6a:	9307      	str	r3, [sp, #28]
 8009e6c:	e649      	b.n	8009b02 <_dtoa_r+0x7c2>
 8009e6e:	9b02      	ldr	r3, [sp, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dc03      	bgt.n	8009e7c <_dtoa_r+0xb3c>
 8009e74:	9b06      	ldr	r3, [sp, #24]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	f73f aecc 	bgt.w	8009c14 <_dtoa_r+0x8d4>
 8009e7c:	465d      	mov	r5, fp
 8009e7e:	4639      	mov	r1, r7
 8009e80:	9804      	ldr	r0, [sp, #16]
 8009e82:	f7ff f9d1 	bl	8009228 <quorem>
 8009e86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009e8a:	f805 8b01 	strb.w	r8, [r5], #1
 8009e8e:	9a02      	ldr	r2, [sp, #8]
 8009e90:	eba5 030b 	sub.w	r3, r5, fp
 8009e94:	429a      	cmp	r2, r3
 8009e96:	ddb0      	ble.n	8009dfa <_dtoa_r+0xaba>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	220a      	movs	r2, #10
 8009e9c:	9904      	ldr	r1, [sp, #16]
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f000 fa50 	bl	800a344 <__multadd>
 8009ea4:	9004      	str	r0, [sp, #16]
 8009ea6:	e7ea      	b.n	8009e7e <_dtoa_r+0xb3e>
 8009ea8:	0800b1bc 	.word	0x0800b1bc
 8009eac:	0800b1e0 	.word	0x0800b1e0

08009eb0 <__sflush_r>:
 8009eb0:	898a      	ldrh	r2, [r1, #12]
 8009eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eb6:	4605      	mov	r5, r0
 8009eb8:	0710      	lsls	r0, r2, #28
 8009eba:	460c      	mov	r4, r1
 8009ebc:	d458      	bmi.n	8009f70 <__sflush_r+0xc0>
 8009ebe:	684b      	ldr	r3, [r1, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dc05      	bgt.n	8009ed0 <__sflush_r+0x20>
 8009ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dc02      	bgt.n	8009ed0 <__sflush_r+0x20>
 8009eca:	2000      	movs	r0, #0
 8009ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	d0f9      	beq.n	8009eca <__sflush_r+0x1a>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009edc:	682f      	ldr	r7, [r5, #0]
 8009ede:	6a21      	ldr	r1, [r4, #32]
 8009ee0:	602b      	str	r3, [r5, #0]
 8009ee2:	d032      	beq.n	8009f4a <__sflush_r+0x9a>
 8009ee4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	075a      	lsls	r2, r3, #29
 8009eea:	d505      	bpl.n	8009ef8 <__sflush_r+0x48>
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	1ac0      	subs	r0, r0, r3
 8009ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ef2:	b10b      	cbz	r3, 8009ef8 <__sflush_r+0x48>
 8009ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ef6:	1ac0      	subs	r0, r0, r3
 8009ef8:	2300      	movs	r3, #0
 8009efa:	4602      	mov	r2, r0
 8009efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009efe:	6a21      	ldr	r1, [r4, #32]
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b0      	blx	r6
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	d106      	bne.n	8009f18 <__sflush_r+0x68>
 8009f0a:	6829      	ldr	r1, [r5, #0]
 8009f0c:	291d      	cmp	r1, #29
 8009f0e:	d848      	bhi.n	8009fa2 <__sflush_r+0xf2>
 8009f10:	4a29      	ldr	r2, [pc, #164]	; (8009fb8 <__sflush_r+0x108>)
 8009f12:	40ca      	lsrs	r2, r1
 8009f14:	07d6      	lsls	r6, r2, #31
 8009f16:	d544      	bpl.n	8009fa2 <__sflush_r+0xf2>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	6062      	str	r2, [r4, #4]
 8009f1c:	04d9      	lsls	r1, r3, #19
 8009f1e:	6922      	ldr	r2, [r4, #16]
 8009f20:	6022      	str	r2, [r4, #0]
 8009f22:	d504      	bpl.n	8009f2e <__sflush_r+0x7e>
 8009f24:	1c42      	adds	r2, r0, #1
 8009f26:	d101      	bne.n	8009f2c <__sflush_r+0x7c>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	b903      	cbnz	r3, 8009f2e <__sflush_r+0x7e>
 8009f2c:	6560      	str	r0, [r4, #84]	; 0x54
 8009f2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f30:	602f      	str	r7, [r5, #0]
 8009f32:	2900      	cmp	r1, #0
 8009f34:	d0c9      	beq.n	8009eca <__sflush_r+0x1a>
 8009f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	d002      	beq.n	8009f44 <__sflush_r+0x94>
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f000 fc9e 	bl	800a880 <_free_r>
 8009f44:	2000      	movs	r0, #0
 8009f46:	6360      	str	r0, [r4, #52]	; 0x34
 8009f48:	e7c0      	b.n	8009ecc <__sflush_r+0x1c>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b0      	blx	r6
 8009f50:	1c41      	adds	r1, r0, #1
 8009f52:	d1c8      	bne.n	8009ee6 <__sflush_r+0x36>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0c5      	beq.n	8009ee6 <__sflush_r+0x36>
 8009f5a:	2b1d      	cmp	r3, #29
 8009f5c:	d001      	beq.n	8009f62 <__sflush_r+0xb2>
 8009f5e:	2b16      	cmp	r3, #22
 8009f60:	d101      	bne.n	8009f66 <__sflush_r+0xb6>
 8009f62:	602f      	str	r7, [r5, #0]
 8009f64:	e7b1      	b.n	8009eca <__sflush_r+0x1a>
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	e7ad      	b.n	8009ecc <__sflush_r+0x1c>
 8009f70:	690f      	ldr	r7, [r1, #16]
 8009f72:	2f00      	cmp	r7, #0
 8009f74:	d0a9      	beq.n	8009eca <__sflush_r+0x1a>
 8009f76:	0793      	lsls	r3, r2, #30
 8009f78:	680e      	ldr	r6, [r1, #0]
 8009f7a:	bf08      	it	eq
 8009f7c:	694b      	ldreq	r3, [r1, #20]
 8009f7e:	600f      	str	r7, [r1, #0]
 8009f80:	bf18      	it	ne
 8009f82:	2300      	movne	r3, #0
 8009f84:	eba6 0807 	sub.w	r8, r6, r7
 8009f88:	608b      	str	r3, [r1, #8]
 8009f8a:	f1b8 0f00 	cmp.w	r8, #0
 8009f8e:	dd9c      	ble.n	8009eca <__sflush_r+0x1a>
 8009f90:	4643      	mov	r3, r8
 8009f92:	463a      	mov	r2, r7
 8009f94:	6a21      	ldr	r1, [r4, #32]
 8009f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b0      	blx	r6
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	dc06      	bgt.n	8009fae <__sflush_r+0xfe>
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fac:	e78e      	b.n	8009ecc <__sflush_r+0x1c>
 8009fae:	4407      	add	r7, r0
 8009fb0:	eba8 0800 	sub.w	r8, r8, r0
 8009fb4:	e7e9      	b.n	8009f8a <__sflush_r+0xda>
 8009fb6:	bf00      	nop
 8009fb8:	20400001 	.word	0x20400001

08009fbc <_fflush_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	690b      	ldr	r3, [r1, #16]
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	b1db      	cbz	r3, 8009ffe <_fflush_r+0x42>
 8009fc6:	b118      	cbz	r0, 8009fd0 <_fflush_r+0x14>
 8009fc8:	6983      	ldr	r3, [r0, #24]
 8009fca:	b90b      	cbnz	r3, 8009fd0 <_fflush_r+0x14>
 8009fcc:	f000 f860 	bl	800a090 <__sinit>
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <_fflush_r+0x48>)
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	d109      	bne.n	8009fea <_fflush_r+0x2e>
 8009fd6:	686c      	ldr	r4, [r5, #4]
 8009fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fdc:	b17b      	cbz	r3, 8009ffe <_fflush_r+0x42>
 8009fde:	4621      	mov	r1, r4
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fe6:	f7ff bf63 	b.w	8009eb0 <__sflush_r>
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <_fflush_r+0x4c>)
 8009fec:	429c      	cmp	r4, r3
 8009fee:	d101      	bne.n	8009ff4 <_fflush_r+0x38>
 8009ff0:	68ac      	ldr	r4, [r5, #8]
 8009ff2:	e7f1      	b.n	8009fd8 <_fflush_r+0x1c>
 8009ff4:	4b05      	ldr	r3, [pc, #20]	; (800a00c <_fflush_r+0x50>)
 8009ff6:	429c      	cmp	r4, r3
 8009ff8:	bf08      	it	eq
 8009ffa:	68ec      	ldreq	r4, [r5, #12]
 8009ffc:	e7ec      	b.n	8009fd8 <_fflush_r+0x1c>
 8009ffe:	2000      	movs	r0, #0
 800a000:	bd38      	pop	{r3, r4, r5, pc}
 800a002:	bf00      	nop
 800a004:	0800b210 	.word	0x0800b210
 800a008:	0800b230 	.word	0x0800b230
 800a00c:	0800b1f0 	.word	0x0800b1f0

0800a010 <std>:
 800a010:	2300      	movs	r3, #0
 800a012:	b510      	push	{r4, lr}
 800a014:	4604      	mov	r4, r0
 800a016:	e9c0 3300 	strd	r3, r3, [r0]
 800a01a:	6083      	str	r3, [r0, #8]
 800a01c:	8181      	strh	r1, [r0, #12]
 800a01e:	6643      	str	r3, [r0, #100]	; 0x64
 800a020:	81c2      	strh	r2, [r0, #14]
 800a022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a026:	6183      	str	r3, [r0, #24]
 800a028:	4619      	mov	r1, r3
 800a02a:	2208      	movs	r2, #8
 800a02c:	305c      	adds	r0, #92	; 0x5c
 800a02e:	f7fe faac 	bl	800858a <memset>
 800a032:	4b05      	ldr	r3, [pc, #20]	; (800a048 <std+0x38>)
 800a034:	6263      	str	r3, [r4, #36]	; 0x24
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <std+0x3c>)
 800a038:	62a3      	str	r3, [r4, #40]	; 0x28
 800a03a:	4b05      	ldr	r3, [pc, #20]	; (800a050 <std+0x40>)
 800a03c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a03e:	4b05      	ldr	r3, [pc, #20]	; (800a054 <std+0x44>)
 800a040:	6224      	str	r4, [r4, #32]
 800a042:	6323      	str	r3, [r4, #48]	; 0x30
 800a044:	bd10      	pop	{r4, pc}
 800a046:	bf00      	nop
 800a048:	0800ac71 	.word	0x0800ac71
 800a04c:	0800ac93 	.word	0x0800ac93
 800a050:	0800accb 	.word	0x0800accb
 800a054:	0800acef 	.word	0x0800acef

0800a058 <_cleanup_r>:
 800a058:	4901      	ldr	r1, [pc, #4]	; (800a060 <_cleanup_r+0x8>)
 800a05a:	f000 b885 	b.w	800a168 <_fwalk_reent>
 800a05e:	bf00      	nop
 800a060:	08009fbd 	.word	0x08009fbd

0800a064 <__sfmoreglue>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	1e4a      	subs	r2, r1, #1
 800a068:	2568      	movs	r5, #104	; 0x68
 800a06a:	4355      	muls	r5, r2
 800a06c:	460e      	mov	r6, r1
 800a06e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a072:	f000 fc53 	bl	800a91c <_malloc_r>
 800a076:	4604      	mov	r4, r0
 800a078:	b140      	cbz	r0, 800a08c <__sfmoreglue+0x28>
 800a07a:	2100      	movs	r1, #0
 800a07c:	e9c0 1600 	strd	r1, r6, [r0]
 800a080:	300c      	adds	r0, #12
 800a082:	60a0      	str	r0, [r4, #8]
 800a084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a088:	f7fe fa7f 	bl	800858a <memset>
 800a08c:	4620      	mov	r0, r4
 800a08e:	bd70      	pop	{r4, r5, r6, pc}

0800a090 <__sinit>:
 800a090:	6983      	ldr	r3, [r0, #24]
 800a092:	b510      	push	{r4, lr}
 800a094:	4604      	mov	r4, r0
 800a096:	bb33      	cbnz	r3, 800a0e6 <__sinit+0x56>
 800a098:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a09c:	6503      	str	r3, [r0, #80]	; 0x50
 800a09e:	4b12      	ldr	r3, [pc, #72]	; (800a0e8 <__sinit+0x58>)
 800a0a0:	4a12      	ldr	r2, [pc, #72]	; (800a0ec <__sinit+0x5c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6282      	str	r2, [r0, #40]	; 0x28
 800a0a6:	4298      	cmp	r0, r3
 800a0a8:	bf04      	itt	eq
 800a0aa:	2301      	moveq	r3, #1
 800a0ac:	6183      	streq	r3, [r0, #24]
 800a0ae:	f000 f81f 	bl	800a0f0 <__sfp>
 800a0b2:	6060      	str	r0, [r4, #4]
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	f000 f81b 	bl	800a0f0 <__sfp>
 800a0ba:	60a0      	str	r0, [r4, #8]
 800a0bc:	4620      	mov	r0, r4
 800a0be:	f000 f817 	bl	800a0f0 <__sfp>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	60e0      	str	r0, [r4, #12]
 800a0c6:	2104      	movs	r1, #4
 800a0c8:	6860      	ldr	r0, [r4, #4]
 800a0ca:	f7ff ffa1 	bl	800a010 <std>
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	2109      	movs	r1, #9
 800a0d2:	68a0      	ldr	r0, [r4, #8]
 800a0d4:	f7ff ff9c 	bl	800a010 <std>
 800a0d8:	2202      	movs	r2, #2
 800a0da:	2112      	movs	r1, #18
 800a0dc:	68e0      	ldr	r0, [r4, #12]
 800a0de:	f7ff ff97 	bl	800a010 <std>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	61a3      	str	r3, [r4, #24]
 800a0e6:	bd10      	pop	{r4, pc}
 800a0e8:	0800b1ac 	.word	0x0800b1ac
 800a0ec:	0800a059 	.word	0x0800a059

0800a0f0 <__sfp>:
 800a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f2:	4b1b      	ldr	r3, [pc, #108]	; (800a160 <__sfp+0x70>)
 800a0f4:	681e      	ldr	r6, [r3, #0]
 800a0f6:	69b3      	ldr	r3, [r6, #24]
 800a0f8:	4607      	mov	r7, r0
 800a0fa:	b913      	cbnz	r3, 800a102 <__sfp+0x12>
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7ff ffc7 	bl	800a090 <__sinit>
 800a102:	3648      	adds	r6, #72	; 0x48
 800a104:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a108:	3b01      	subs	r3, #1
 800a10a:	d503      	bpl.n	800a114 <__sfp+0x24>
 800a10c:	6833      	ldr	r3, [r6, #0]
 800a10e:	b133      	cbz	r3, 800a11e <__sfp+0x2e>
 800a110:	6836      	ldr	r6, [r6, #0]
 800a112:	e7f7      	b.n	800a104 <__sfp+0x14>
 800a114:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a118:	b16d      	cbz	r5, 800a136 <__sfp+0x46>
 800a11a:	3468      	adds	r4, #104	; 0x68
 800a11c:	e7f4      	b.n	800a108 <__sfp+0x18>
 800a11e:	2104      	movs	r1, #4
 800a120:	4638      	mov	r0, r7
 800a122:	f7ff ff9f 	bl	800a064 <__sfmoreglue>
 800a126:	6030      	str	r0, [r6, #0]
 800a128:	2800      	cmp	r0, #0
 800a12a:	d1f1      	bne.n	800a110 <__sfp+0x20>
 800a12c:	230c      	movs	r3, #12
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	4604      	mov	r4, r0
 800a132:	4620      	mov	r0, r4
 800a134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a136:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <__sfp+0x74>)
 800a138:	6665      	str	r5, [r4, #100]	; 0x64
 800a13a:	e9c4 5500 	strd	r5, r5, [r4]
 800a13e:	60a5      	str	r5, [r4, #8]
 800a140:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a144:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a148:	2208      	movs	r2, #8
 800a14a:	4629      	mov	r1, r5
 800a14c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a150:	f7fe fa1b 	bl	800858a <memset>
 800a154:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a158:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a15c:	e7e9      	b.n	800a132 <__sfp+0x42>
 800a15e:	bf00      	nop
 800a160:	0800b1ac 	.word	0x0800b1ac
 800a164:	ffff0001 	.word	0xffff0001

0800a168 <_fwalk_reent>:
 800a168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a16c:	4680      	mov	r8, r0
 800a16e:	4689      	mov	r9, r1
 800a170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a174:	2600      	movs	r6, #0
 800a176:	b914      	cbnz	r4, 800a17e <_fwalk_reent+0x16>
 800a178:	4630      	mov	r0, r6
 800a17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a17e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a182:	3f01      	subs	r7, #1
 800a184:	d501      	bpl.n	800a18a <_fwalk_reent+0x22>
 800a186:	6824      	ldr	r4, [r4, #0]
 800a188:	e7f5      	b.n	800a176 <_fwalk_reent+0xe>
 800a18a:	89ab      	ldrh	r3, [r5, #12]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d907      	bls.n	800a1a0 <_fwalk_reent+0x38>
 800a190:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a194:	3301      	adds	r3, #1
 800a196:	d003      	beq.n	800a1a0 <_fwalk_reent+0x38>
 800a198:	4629      	mov	r1, r5
 800a19a:	4640      	mov	r0, r8
 800a19c:	47c8      	blx	r9
 800a19e:	4306      	orrs	r6, r0
 800a1a0:	3568      	adds	r5, #104	; 0x68
 800a1a2:	e7ee      	b.n	800a182 <_fwalk_reent+0x1a>

0800a1a4 <_localeconv_r>:
 800a1a4:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <_localeconv_r+0x14>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6a18      	ldr	r0, [r3, #32]
 800a1aa:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <_localeconv_r+0x18>)
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	bf08      	it	eq
 800a1b0:	4618      	moveq	r0, r3
 800a1b2:	30f0      	adds	r0, #240	; 0xf0
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20000afc 	.word	0x20000afc
 800a1bc:	20000b60 	.word	0x20000b60

0800a1c0 <__swhatbuf_r>:
 800a1c0:	b570      	push	{r4, r5, r6, lr}
 800a1c2:	460e      	mov	r6, r1
 800a1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	b096      	sub	sp, #88	; 0x58
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	461d      	mov	r5, r3
 800a1d0:	da07      	bge.n	800a1e2 <__swhatbuf_r+0x22>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	89b3      	ldrh	r3, [r6, #12]
 800a1d8:	061a      	lsls	r2, r3, #24
 800a1da:	d410      	bmi.n	800a1fe <__swhatbuf_r+0x3e>
 800a1dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e0:	e00e      	b.n	800a200 <__swhatbuf_r+0x40>
 800a1e2:	466a      	mov	r2, sp
 800a1e4:	f000 fdaa 	bl	800ad3c <_fstat_r>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	dbf2      	blt.n	800a1d2 <__swhatbuf_r+0x12>
 800a1ec:	9a01      	ldr	r2, [sp, #4]
 800a1ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1f6:	425a      	negs	r2, r3
 800a1f8:	415a      	adcs	r2, r3
 800a1fa:	602a      	str	r2, [r5, #0]
 800a1fc:	e7ee      	b.n	800a1dc <__swhatbuf_r+0x1c>
 800a1fe:	2340      	movs	r3, #64	; 0x40
 800a200:	2000      	movs	r0, #0
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	b016      	add	sp, #88	; 0x58
 800a206:	bd70      	pop	{r4, r5, r6, pc}

0800a208 <__smakebuf_r>:
 800a208:	898b      	ldrh	r3, [r1, #12]
 800a20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a20c:	079d      	lsls	r5, r3, #30
 800a20e:	4606      	mov	r6, r0
 800a210:	460c      	mov	r4, r1
 800a212:	d507      	bpl.n	800a224 <__smakebuf_r+0x1c>
 800a214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	6123      	str	r3, [r4, #16]
 800a21c:	2301      	movs	r3, #1
 800a21e:	6163      	str	r3, [r4, #20]
 800a220:	b002      	add	sp, #8
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	ab01      	add	r3, sp, #4
 800a226:	466a      	mov	r2, sp
 800a228:	f7ff ffca 	bl	800a1c0 <__swhatbuf_r>
 800a22c:	9900      	ldr	r1, [sp, #0]
 800a22e:	4605      	mov	r5, r0
 800a230:	4630      	mov	r0, r6
 800a232:	f000 fb73 	bl	800a91c <_malloc_r>
 800a236:	b948      	cbnz	r0, 800a24c <__smakebuf_r+0x44>
 800a238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a23c:	059a      	lsls	r2, r3, #22
 800a23e:	d4ef      	bmi.n	800a220 <__smakebuf_r+0x18>
 800a240:	f023 0303 	bic.w	r3, r3, #3
 800a244:	f043 0302 	orr.w	r3, r3, #2
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	e7e3      	b.n	800a214 <__smakebuf_r+0xc>
 800a24c:	4b0d      	ldr	r3, [pc, #52]	; (800a284 <__smakebuf_r+0x7c>)
 800a24e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	6020      	str	r0, [r4, #0]
 800a254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a258:	81a3      	strh	r3, [r4, #12]
 800a25a:	9b00      	ldr	r3, [sp, #0]
 800a25c:	6163      	str	r3, [r4, #20]
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	6120      	str	r0, [r4, #16]
 800a262:	b15b      	cbz	r3, 800a27c <__smakebuf_r+0x74>
 800a264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a268:	4630      	mov	r0, r6
 800a26a:	f000 fd79 	bl	800ad60 <_isatty_r>
 800a26e:	b128      	cbz	r0, 800a27c <__smakebuf_r+0x74>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f023 0303 	bic.w	r3, r3, #3
 800a276:	f043 0301 	orr.w	r3, r3, #1
 800a27a:	81a3      	strh	r3, [r4, #12]
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	431d      	orrs	r5, r3
 800a280:	81a5      	strh	r5, [r4, #12]
 800a282:	e7cd      	b.n	800a220 <__smakebuf_r+0x18>
 800a284:	0800a059 	.word	0x0800a059

0800a288 <malloc>:
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <malloc+0xc>)
 800a28a:	4601      	mov	r1, r0
 800a28c:	6818      	ldr	r0, [r3, #0]
 800a28e:	f000 bb45 	b.w	800a91c <_malloc_r>
 800a292:	bf00      	nop
 800a294:	20000afc 	.word	0x20000afc

0800a298 <memcpy>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	1e43      	subs	r3, r0, #1
 800a29c:	440a      	add	r2, r1
 800a29e:	4291      	cmp	r1, r2
 800a2a0:	d100      	bne.n	800a2a4 <memcpy+0xc>
 800a2a2:	bd10      	pop	{r4, pc}
 800a2a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ac:	e7f7      	b.n	800a29e <memcpy+0x6>

0800a2ae <_Balloc>:
 800a2ae:	b570      	push	{r4, r5, r6, lr}
 800a2b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460e      	mov	r6, r1
 800a2b6:	b93d      	cbnz	r5, 800a2c8 <_Balloc+0x1a>
 800a2b8:	2010      	movs	r0, #16
 800a2ba:	f7ff ffe5 	bl	800a288 <malloc>
 800a2be:	6260      	str	r0, [r4, #36]	; 0x24
 800a2c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2c4:	6005      	str	r5, [r0, #0]
 800a2c6:	60c5      	str	r5, [r0, #12]
 800a2c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a2ca:	68eb      	ldr	r3, [r5, #12]
 800a2cc:	b183      	cbz	r3, 800a2f0 <_Balloc+0x42>
 800a2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a2d6:	b9b8      	cbnz	r0, 800a308 <_Balloc+0x5a>
 800a2d8:	2101      	movs	r1, #1
 800a2da:	fa01 f506 	lsl.w	r5, r1, r6
 800a2de:	1d6a      	adds	r2, r5, #5
 800a2e0:	0092      	lsls	r2, r2, #2
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 fabe 	bl	800a864 <_calloc_r>
 800a2e8:	b160      	cbz	r0, 800a304 <_Balloc+0x56>
 800a2ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a2ee:	e00e      	b.n	800a30e <_Balloc+0x60>
 800a2f0:	2221      	movs	r2, #33	; 0x21
 800a2f2:	2104      	movs	r1, #4
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fab5 	bl	800a864 <_calloc_r>
 800a2fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2fc:	60e8      	str	r0, [r5, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e4      	bne.n	800a2ce <_Balloc+0x20>
 800a304:	2000      	movs	r0, #0
 800a306:	bd70      	pop	{r4, r5, r6, pc}
 800a308:	6802      	ldr	r2, [r0, #0]
 800a30a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a30e:	2300      	movs	r3, #0
 800a310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a314:	e7f7      	b.n	800a306 <_Balloc+0x58>

0800a316 <_Bfree>:
 800a316:	b570      	push	{r4, r5, r6, lr}
 800a318:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a31a:	4606      	mov	r6, r0
 800a31c:	460d      	mov	r5, r1
 800a31e:	b93c      	cbnz	r4, 800a330 <_Bfree+0x1a>
 800a320:	2010      	movs	r0, #16
 800a322:	f7ff ffb1 	bl	800a288 <malloc>
 800a326:	6270      	str	r0, [r6, #36]	; 0x24
 800a328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a32c:	6004      	str	r4, [r0, #0]
 800a32e:	60c4      	str	r4, [r0, #12]
 800a330:	b13d      	cbz	r5, 800a342 <_Bfree+0x2c>
 800a332:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a334:	686a      	ldr	r2, [r5, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a33c:	6029      	str	r1, [r5, #0]
 800a33e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a342:	bd70      	pop	{r4, r5, r6, pc}

0800a344 <__multadd>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	690d      	ldr	r5, [r1, #16]
 800a34a:	461f      	mov	r7, r3
 800a34c:	4606      	mov	r6, r0
 800a34e:	460c      	mov	r4, r1
 800a350:	f101 0c14 	add.w	ip, r1, #20
 800a354:	2300      	movs	r3, #0
 800a356:	f8dc 0000 	ldr.w	r0, [ip]
 800a35a:	b281      	uxth	r1, r0
 800a35c:	fb02 7101 	mla	r1, r2, r1, r7
 800a360:	0c0f      	lsrs	r7, r1, #16
 800a362:	0c00      	lsrs	r0, r0, #16
 800a364:	fb02 7000 	mla	r0, r2, r0, r7
 800a368:	b289      	uxth	r1, r1
 800a36a:	3301      	adds	r3, #1
 800a36c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a370:	429d      	cmp	r5, r3
 800a372:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a376:	f84c 1b04 	str.w	r1, [ip], #4
 800a37a:	dcec      	bgt.n	800a356 <__multadd+0x12>
 800a37c:	b1d7      	cbz	r7, 800a3b4 <__multadd+0x70>
 800a37e:	68a3      	ldr	r3, [r4, #8]
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc12      	bgt.n	800a3aa <__multadd+0x66>
 800a384:	6861      	ldr	r1, [r4, #4]
 800a386:	4630      	mov	r0, r6
 800a388:	3101      	adds	r1, #1
 800a38a:	f7ff ff90 	bl	800a2ae <_Balloc>
 800a38e:	6922      	ldr	r2, [r4, #16]
 800a390:	3202      	adds	r2, #2
 800a392:	f104 010c 	add.w	r1, r4, #12
 800a396:	4680      	mov	r8, r0
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	300c      	adds	r0, #12
 800a39c:	f7ff ff7c 	bl	800a298 <memcpy>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ffb7 	bl	800a316 <_Bfree>
 800a3a8:	4644      	mov	r4, r8
 800a3aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3ae:	3501      	adds	r5, #1
 800a3b0:	615f      	str	r7, [r3, #20]
 800a3b2:	6125      	str	r5, [r4, #16]
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3ba <__hi0bits>:
 800a3ba:	0c02      	lsrs	r2, r0, #16
 800a3bc:	0412      	lsls	r2, r2, #16
 800a3be:	4603      	mov	r3, r0
 800a3c0:	b9b2      	cbnz	r2, 800a3f0 <__hi0bits+0x36>
 800a3c2:	0403      	lsls	r3, r0, #16
 800a3c4:	2010      	movs	r0, #16
 800a3c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a3ca:	bf04      	itt	eq
 800a3cc:	021b      	lsleq	r3, r3, #8
 800a3ce:	3008      	addeq	r0, #8
 800a3d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a3d4:	bf04      	itt	eq
 800a3d6:	011b      	lsleq	r3, r3, #4
 800a3d8:	3004      	addeq	r0, #4
 800a3da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a3de:	bf04      	itt	eq
 800a3e0:	009b      	lsleq	r3, r3, #2
 800a3e2:	3002      	addeq	r0, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	db06      	blt.n	800a3f6 <__hi0bits+0x3c>
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	d503      	bpl.n	800a3f4 <__hi0bits+0x3a>
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	4770      	bx	lr
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7e8      	b.n	800a3c6 <__hi0bits+0xc>
 800a3f4:	2020      	movs	r0, #32
 800a3f6:	4770      	bx	lr

0800a3f8 <__lo0bits>:
 800a3f8:	6803      	ldr	r3, [r0, #0]
 800a3fa:	f013 0207 	ands.w	r2, r3, #7
 800a3fe:	4601      	mov	r1, r0
 800a400:	d00b      	beq.n	800a41a <__lo0bits+0x22>
 800a402:	07da      	lsls	r2, r3, #31
 800a404:	d423      	bmi.n	800a44e <__lo0bits+0x56>
 800a406:	0798      	lsls	r0, r3, #30
 800a408:	bf49      	itett	mi
 800a40a:	085b      	lsrmi	r3, r3, #1
 800a40c:	089b      	lsrpl	r3, r3, #2
 800a40e:	2001      	movmi	r0, #1
 800a410:	600b      	strmi	r3, [r1, #0]
 800a412:	bf5c      	itt	pl
 800a414:	600b      	strpl	r3, [r1, #0]
 800a416:	2002      	movpl	r0, #2
 800a418:	4770      	bx	lr
 800a41a:	b298      	uxth	r0, r3
 800a41c:	b9a8      	cbnz	r0, 800a44a <__lo0bits+0x52>
 800a41e:	0c1b      	lsrs	r3, r3, #16
 800a420:	2010      	movs	r0, #16
 800a422:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a426:	bf04      	itt	eq
 800a428:	0a1b      	lsreq	r3, r3, #8
 800a42a:	3008      	addeq	r0, #8
 800a42c:	071a      	lsls	r2, r3, #28
 800a42e:	bf04      	itt	eq
 800a430:	091b      	lsreq	r3, r3, #4
 800a432:	3004      	addeq	r0, #4
 800a434:	079a      	lsls	r2, r3, #30
 800a436:	bf04      	itt	eq
 800a438:	089b      	lsreq	r3, r3, #2
 800a43a:	3002      	addeq	r0, #2
 800a43c:	07da      	lsls	r2, r3, #31
 800a43e:	d402      	bmi.n	800a446 <__lo0bits+0x4e>
 800a440:	085b      	lsrs	r3, r3, #1
 800a442:	d006      	beq.n	800a452 <__lo0bits+0x5a>
 800a444:	3001      	adds	r0, #1
 800a446:	600b      	str	r3, [r1, #0]
 800a448:	4770      	bx	lr
 800a44a:	4610      	mov	r0, r2
 800a44c:	e7e9      	b.n	800a422 <__lo0bits+0x2a>
 800a44e:	2000      	movs	r0, #0
 800a450:	4770      	bx	lr
 800a452:	2020      	movs	r0, #32
 800a454:	4770      	bx	lr

0800a456 <__i2b>:
 800a456:	b510      	push	{r4, lr}
 800a458:	460c      	mov	r4, r1
 800a45a:	2101      	movs	r1, #1
 800a45c:	f7ff ff27 	bl	800a2ae <_Balloc>
 800a460:	2201      	movs	r2, #1
 800a462:	6144      	str	r4, [r0, #20]
 800a464:	6102      	str	r2, [r0, #16]
 800a466:	bd10      	pop	{r4, pc}

0800a468 <__multiply>:
 800a468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	4614      	mov	r4, r2
 800a46e:	690a      	ldr	r2, [r1, #16]
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	429a      	cmp	r2, r3
 800a474:	bfb8      	it	lt
 800a476:	460b      	movlt	r3, r1
 800a478:	4688      	mov	r8, r1
 800a47a:	bfbc      	itt	lt
 800a47c:	46a0      	movlt	r8, r4
 800a47e:	461c      	movlt	r4, r3
 800a480:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a484:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a488:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a48c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a490:	eb07 0609 	add.w	r6, r7, r9
 800a494:	42b3      	cmp	r3, r6
 800a496:	bfb8      	it	lt
 800a498:	3101      	addlt	r1, #1
 800a49a:	f7ff ff08 	bl	800a2ae <_Balloc>
 800a49e:	f100 0514 	add.w	r5, r0, #20
 800a4a2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a4a6:	462b      	mov	r3, r5
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4573      	cmp	r3, lr
 800a4ac:	d316      	bcc.n	800a4dc <__multiply+0x74>
 800a4ae:	f104 0214 	add.w	r2, r4, #20
 800a4b2:	f108 0114 	add.w	r1, r8, #20
 800a4b6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a4ba:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	9b00      	ldr	r3, [sp, #0]
 800a4c2:	9201      	str	r2, [sp, #4]
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d80c      	bhi.n	800a4e2 <__multiply+0x7a>
 800a4c8:	2e00      	cmp	r6, #0
 800a4ca:	dd03      	ble.n	800a4d4 <__multiply+0x6c>
 800a4cc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d05d      	beq.n	800a590 <__multiply+0x128>
 800a4d4:	6106      	str	r6, [r0, #16]
 800a4d6:	b003      	add	sp, #12
 800a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4dc:	f843 2b04 	str.w	r2, [r3], #4
 800a4e0:	e7e3      	b.n	800a4aa <__multiply+0x42>
 800a4e2:	f8b2 b000 	ldrh.w	fp, [r2]
 800a4e6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ea:	d023      	beq.n	800a534 <__multiply+0xcc>
 800a4ec:	4689      	mov	r9, r1
 800a4ee:	46ac      	mov	ip, r5
 800a4f0:	f04f 0800 	mov.w	r8, #0
 800a4f4:	f859 4b04 	ldr.w	r4, [r9], #4
 800a4f8:	f8dc a000 	ldr.w	sl, [ip]
 800a4fc:	b2a3      	uxth	r3, r4
 800a4fe:	fa1f fa8a 	uxth.w	sl, sl
 800a502:	fb0b a303 	mla	r3, fp, r3, sl
 800a506:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a50a:	f8dc 4000 	ldr.w	r4, [ip]
 800a50e:	4443      	add	r3, r8
 800a510:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a514:	fb0b 840a 	mla	r4, fp, sl, r8
 800a518:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a51c:	46e2      	mov	sl, ip
 800a51e:	b29b      	uxth	r3, r3
 800a520:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a524:	454f      	cmp	r7, r9
 800a526:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a52a:	f84a 3b04 	str.w	r3, [sl], #4
 800a52e:	d82b      	bhi.n	800a588 <__multiply+0x120>
 800a530:	f8cc 8004 	str.w	r8, [ip, #4]
 800a534:	9b01      	ldr	r3, [sp, #4]
 800a536:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a53a:	3204      	adds	r2, #4
 800a53c:	f1ba 0f00 	cmp.w	sl, #0
 800a540:	d020      	beq.n	800a584 <__multiply+0x11c>
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	4689      	mov	r9, r1
 800a546:	46a8      	mov	r8, r5
 800a548:	f04f 0b00 	mov.w	fp, #0
 800a54c:	f8b9 c000 	ldrh.w	ip, [r9]
 800a550:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a554:	fb0a 440c 	mla	r4, sl, ip, r4
 800a558:	445c      	add	r4, fp
 800a55a:	46c4      	mov	ip, r8
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a562:	f84c 3b04 	str.w	r3, [ip], #4
 800a566:	f859 3b04 	ldr.w	r3, [r9], #4
 800a56a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a56e:	0c1b      	lsrs	r3, r3, #16
 800a570:	fb0a b303 	mla	r3, sl, r3, fp
 800a574:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a578:	454f      	cmp	r7, r9
 800a57a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a57e:	d805      	bhi.n	800a58c <__multiply+0x124>
 800a580:	f8c8 3004 	str.w	r3, [r8, #4]
 800a584:	3504      	adds	r5, #4
 800a586:	e79b      	b.n	800a4c0 <__multiply+0x58>
 800a588:	46d4      	mov	ip, sl
 800a58a:	e7b3      	b.n	800a4f4 <__multiply+0x8c>
 800a58c:	46e0      	mov	r8, ip
 800a58e:	e7dd      	b.n	800a54c <__multiply+0xe4>
 800a590:	3e01      	subs	r6, #1
 800a592:	e799      	b.n	800a4c8 <__multiply+0x60>

0800a594 <__pow5mult>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	4615      	mov	r5, r2
 800a59a:	f012 0203 	ands.w	r2, r2, #3
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	d007      	beq.n	800a5b4 <__pow5mult+0x20>
 800a5a4:	3a01      	subs	r2, #1
 800a5a6:	4c21      	ldr	r4, [pc, #132]	; (800a62c <__pow5mult+0x98>)
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5ae:	f7ff fec9 	bl	800a344 <__multadd>
 800a5b2:	4607      	mov	r7, r0
 800a5b4:	10ad      	asrs	r5, r5, #2
 800a5b6:	d035      	beq.n	800a624 <__pow5mult+0x90>
 800a5b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5ba:	b93c      	cbnz	r4, 800a5cc <__pow5mult+0x38>
 800a5bc:	2010      	movs	r0, #16
 800a5be:	f7ff fe63 	bl	800a288 <malloc>
 800a5c2:	6270      	str	r0, [r6, #36]	; 0x24
 800a5c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5c8:	6004      	str	r4, [r0, #0]
 800a5ca:	60c4      	str	r4, [r0, #12]
 800a5cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5d4:	b94c      	cbnz	r4, 800a5ea <__pow5mult+0x56>
 800a5d6:	f240 2171 	movw	r1, #625	; 0x271
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7ff ff3b 	bl	800a456 <__i2b>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	f04f 0800 	mov.w	r8, #0
 800a5ee:	07eb      	lsls	r3, r5, #31
 800a5f0:	d50a      	bpl.n	800a608 <__pow5mult+0x74>
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff ff36 	bl	800a468 <__multiply>
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	4681      	mov	r9, r0
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff fe88 	bl	800a316 <_Bfree>
 800a606:	464f      	mov	r7, r9
 800a608:	106d      	asrs	r5, r5, #1
 800a60a:	d00b      	beq.n	800a624 <__pow5mult+0x90>
 800a60c:	6820      	ldr	r0, [r4, #0]
 800a60e:	b938      	cbnz	r0, 800a620 <__pow5mult+0x8c>
 800a610:	4622      	mov	r2, r4
 800a612:	4621      	mov	r1, r4
 800a614:	4630      	mov	r0, r6
 800a616:	f7ff ff27 	bl	800a468 <__multiply>
 800a61a:	6020      	str	r0, [r4, #0]
 800a61c:	f8c0 8000 	str.w	r8, [r0]
 800a620:	4604      	mov	r4, r0
 800a622:	e7e4      	b.n	800a5ee <__pow5mult+0x5a>
 800a624:	4638      	mov	r0, r7
 800a626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a62a:	bf00      	nop
 800a62c:	0800b340 	.word	0x0800b340

0800a630 <__lshift>:
 800a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	6849      	ldr	r1, [r1, #4]
 800a63e:	eb0a 0903 	add.w	r9, sl, r3
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	4607      	mov	r7, r0
 800a646:	4616      	mov	r6, r2
 800a648:	f109 0501 	add.w	r5, r9, #1
 800a64c:	42ab      	cmp	r3, r5
 800a64e:	db32      	blt.n	800a6b6 <__lshift+0x86>
 800a650:	4638      	mov	r0, r7
 800a652:	f7ff fe2c 	bl	800a2ae <_Balloc>
 800a656:	2300      	movs	r3, #0
 800a658:	4680      	mov	r8, r0
 800a65a:	f100 0114 	add.w	r1, r0, #20
 800a65e:	461a      	mov	r2, r3
 800a660:	4553      	cmp	r3, sl
 800a662:	db2b      	blt.n	800a6bc <__lshift+0x8c>
 800a664:	6920      	ldr	r0, [r4, #16]
 800a666:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a66a:	f104 0314 	add.w	r3, r4, #20
 800a66e:	f016 021f 	ands.w	r2, r6, #31
 800a672:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a676:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a67a:	d025      	beq.n	800a6c8 <__lshift+0x98>
 800a67c:	f1c2 0e20 	rsb	lr, r2, #32
 800a680:	2000      	movs	r0, #0
 800a682:	681e      	ldr	r6, [r3, #0]
 800a684:	468a      	mov	sl, r1
 800a686:	4096      	lsls	r6, r2
 800a688:	4330      	orrs	r0, r6
 800a68a:	f84a 0b04 	str.w	r0, [sl], #4
 800a68e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a692:	459c      	cmp	ip, r3
 800a694:	fa20 f00e 	lsr.w	r0, r0, lr
 800a698:	d814      	bhi.n	800a6c4 <__lshift+0x94>
 800a69a:	6048      	str	r0, [r1, #4]
 800a69c:	b108      	cbz	r0, 800a6a2 <__lshift+0x72>
 800a69e:	f109 0502 	add.w	r5, r9, #2
 800a6a2:	3d01      	subs	r5, #1
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f8c8 5010 	str.w	r5, [r8, #16]
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	f7ff fe33 	bl	800a316 <_Bfree>
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b6:	3101      	adds	r1, #1
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	e7c7      	b.n	800a64c <__lshift+0x1c>
 800a6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	e7cd      	b.n	800a660 <__lshift+0x30>
 800a6c4:	4651      	mov	r1, sl
 800a6c6:	e7dc      	b.n	800a682 <__lshift+0x52>
 800a6c8:	3904      	subs	r1, #4
 800a6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d2:	459c      	cmp	ip, r3
 800a6d4:	d8f9      	bhi.n	800a6ca <__lshift+0x9a>
 800a6d6:	e7e4      	b.n	800a6a2 <__lshift+0x72>

0800a6d8 <__mcmp>:
 800a6d8:	6903      	ldr	r3, [r0, #16]
 800a6da:	690a      	ldr	r2, [r1, #16]
 800a6dc:	1a9b      	subs	r3, r3, r2
 800a6de:	b530      	push	{r4, r5, lr}
 800a6e0:	d10c      	bne.n	800a6fc <__mcmp+0x24>
 800a6e2:	0092      	lsls	r2, r2, #2
 800a6e4:	3014      	adds	r0, #20
 800a6e6:	3114      	adds	r1, #20
 800a6e8:	1884      	adds	r4, r0, r2
 800a6ea:	4411      	add	r1, r2
 800a6ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6f4:	4295      	cmp	r5, r2
 800a6f6:	d003      	beq.n	800a700 <__mcmp+0x28>
 800a6f8:	d305      	bcc.n	800a706 <__mcmp+0x2e>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	bd30      	pop	{r4, r5, pc}
 800a700:	42a0      	cmp	r0, r4
 800a702:	d3f3      	bcc.n	800a6ec <__mcmp+0x14>
 800a704:	e7fa      	b.n	800a6fc <__mcmp+0x24>
 800a706:	f04f 33ff 	mov.w	r3, #4294967295
 800a70a:	e7f7      	b.n	800a6fc <__mcmp+0x24>

0800a70c <__mdiff>:
 800a70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a710:	460d      	mov	r5, r1
 800a712:	4607      	mov	r7, r0
 800a714:	4611      	mov	r1, r2
 800a716:	4628      	mov	r0, r5
 800a718:	4614      	mov	r4, r2
 800a71a:	f7ff ffdd 	bl	800a6d8 <__mcmp>
 800a71e:	1e06      	subs	r6, r0, #0
 800a720:	d108      	bne.n	800a734 <__mdiff+0x28>
 800a722:	4631      	mov	r1, r6
 800a724:	4638      	mov	r0, r7
 800a726:	f7ff fdc2 	bl	800a2ae <_Balloc>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	bfa4      	itt	ge
 800a736:	4623      	movge	r3, r4
 800a738:	462c      	movge	r4, r5
 800a73a:	4638      	mov	r0, r7
 800a73c:	6861      	ldr	r1, [r4, #4]
 800a73e:	bfa6      	itte	ge
 800a740:	461d      	movge	r5, r3
 800a742:	2600      	movge	r6, #0
 800a744:	2601      	movlt	r6, #1
 800a746:	f7ff fdb2 	bl	800a2ae <_Balloc>
 800a74a:	692b      	ldr	r3, [r5, #16]
 800a74c:	60c6      	str	r6, [r0, #12]
 800a74e:	6926      	ldr	r6, [r4, #16]
 800a750:	f105 0914 	add.w	r9, r5, #20
 800a754:	f104 0214 	add.w	r2, r4, #20
 800a758:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a75c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a760:	f100 0514 	add.w	r5, r0, #20
 800a764:	f04f 0e00 	mov.w	lr, #0
 800a768:	f852 ab04 	ldr.w	sl, [r2], #4
 800a76c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a770:	fa1e f18a 	uxtah	r1, lr, sl
 800a774:	b2a3      	uxth	r3, r4
 800a776:	1ac9      	subs	r1, r1, r3
 800a778:	0c23      	lsrs	r3, r4, #16
 800a77a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a77e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a782:	b289      	uxth	r1, r1
 800a784:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a788:	45c8      	cmp	r8, r9
 800a78a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a78e:	4694      	mov	ip, r2
 800a790:	f845 3b04 	str.w	r3, [r5], #4
 800a794:	d8e8      	bhi.n	800a768 <__mdiff+0x5c>
 800a796:	45bc      	cmp	ip, r7
 800a798:	d304      	bcc.n	800a7a4 <__mdiff+0x98>
 800a79a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a79e:	b183      	cbz	r3, 800a7c2 <__mdiff+0xb6>
 800a7a0:	6106      	str	r6, [r0, #16]
 800a7a2:	e7c5      	b.n	800a730 <__mdiff+0x24>
 800a7a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a7a8:	fa1e f381 	uxtah	r3, lr, r1
 800a7ac:	141a      	asrs	r2, r3, #16
 800a7ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a7bc:	f845 3b04 	str.w	r3, [r5], #4
 800a7c0:	e7e9      	b.n	800a796 <__mdiff+0x8a>
 800a7c2:	3e01      	subs	r6, #1
 800a7c4:	e7e9      	b.n	800a79a <__mdiff+0x8e>

0800a7c6 <__d2b>:
 800a7c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7ca:	460e      	mov	r6, r1
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	ec59 8b10 	vmov	r8, r9, d0
 800a7d2:	4615      	mov	r5, r2
 800a7d4:	f7ff fd6b 	bl	800a2ae <_Balloc>
 800a7d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a7dc:	4607      	mov	r7, r0
 800a7de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7e2:	bb34      	cbnz	r4, 800a832 <__d2b+0x6c>
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	f1b8 0300 	subs.w	r3, r8, #0
 800a7ea:	d027      	beq.n	800a83c <__d2b+0x76>
 800a7ec:	a802      	add	r0, sp, #8
 800a7ee:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a7f2:	f7ff fe01 	bl	800a3f8 <__lo0bits>
 800a7f6:	9900      	ldr	r1, [sp, #0]
 800a7f8:	b1f0      	cbz	r0, 800a838 <__d2b+0x72>
 800a7fa:	9a01      	ldr	r2, [sp, #4]
 800a7fc:	f1c0 0320 	rsb	r3, r0, #32
 800a800:	fa02 f303 	lsl.w	r3, r2, r3
 800a804:	430b      	orrs	r3, r1
 800a806:	40c2      	lsrs	r2, r0
 800a808:	617b      	str	r3, [r7, #20]
 800a80a:	9201      	str	r2, [sp, #4]
 800a80c:	9b01      	ldr	r3, [sp, #4]
 800a80e:	61bb      	str	r3, [r7, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	bf14      	ite	ne
 800a814:	2102      	movne	r1, #2
 800a816:	2101      	moveq	r1, #1
 800a818:	6139      	str	r1, [r7, #16]
 800a81a:	b1c4      	cbz	r4, 800a84e <__d2b+0x88>
 800a81c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a820:	4404      	add	r4, r0
 800a822:	6034      	str	r4, [r6, #0]
 800a824:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a828:	6028      	str	r0, [r5, #0]
 800a82a:	4638      	mov	r0, r7
 800a82c:	b003      	add	sp, #12
 800a82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a836:	e7d5      	b.n	800a7e4 <__d2b+0x1e>
 800a838:	6179      	str	r1, [r7, #20]
 800a83a:	e7e7      	b.n	800a80c <__d2b+0x46>
 800a83c:	a801      	add	r0, sp, #4
 800a83e:	f7ff fddb 	bl	800a3f8 <__lo0bits>
 800a842:	9b01      	ldr	r3, [sp, #4]
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	2101      	movs	r1, #1
 800a848:	6139      	str	r1, [r7, #16]
 800a84a:	3020      	adds	r0, #32
 800a84c:	e7e5      	b.n	800a81a <__d2b+0x54>
 800a84e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a852:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a856:	6030      	str	r0, [r6, #0]
 800a858:	6918      	ldr	r0, [r3, #16]
 800a85a:	f7ff fdae 	bl	800a3ba <__hi0bits>
 800a85e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a862:	e7e1      	b.n	800a828 <__d2b+0x62>

0800a864 <_calloc_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	fb02 f401 	mul.w	r4, r2, r1
 800a86a:	4621      	mov	r1, r4
 800a86c:	f000 f856 	bl	800a91c <_malloc_r>
 800a870:	4605      	mov	r5, r0
 800a872:	b118      	cbz	r0, 800a87c <_calloc_r+0x18>
 800a874:	4622      	mov	r2, r4
 800a876:	2100      	movs	r1, #0
 800a878:	f7fd fe87 	bl	800858a <memset>
 800a87c:	4628      	mov	r0, r5
 800a87e:	bd38      	pop	{r3, r4, r5, pc}

0800a880 <_free_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4605      	mov	r5, r0
 800a884:	2900      	cmp	r1, #0
 800a886:	d045      	beq.n	800a914 <_free_r+0x94>
 800a888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a88c:	1f0c      	subs	r4, r1, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfb8      	it	lt
 800a892:	18e4      	addlt	r4, r4, r3
 800a894:	f000 fa98 	bl	800adc8 <__malloc_lock>
 800a898:	4a1f      	ldr	r2, [pc, #124]	; (800a918 <_free_r+0x98>)
 800a89a:	6813      	ldr	r3, [r2, #0]
 800a89c:	4610      	mov	r0, r2
 800a89e:	b933      	cbnz	r3, 800a8ae <_free_r+0x2e>
 800a8a0:	6063      	str	r3, [r4, #4]
 800a8a2:	6014      	str	r4, [r2, #0]
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8aa:	f000 ba8e 	b.w	800adca <__malloc_unlock>
 800a8ae:	42a3      	cmp	r3, r4
 800a8b0:	d90c      	bls.n	800a8cc <_free_r+0x4c>
 800a8b2:	6821      	ldr	r1, [r4, #0]
 800a8b4:	1862      	adds	r2, r4, r1
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	bf04      	itt	eq
 800a8ba:	681a      	ldreq	r2, [r3, #0]
 800a8bc:	685b      	ldreq	r3, [r3, #4]
 800a8be:	6063      	str	r3, [r4, #4]
 800a8c0:	bf04      	itt	eq
 800a8c2:	1852      	addeq	r2, r2, r1
 800a8c4:	6022      	streq	r2, [r4, #0]
 800a8c6:	6004      	str	r4, [r0, #0]
 800a8c8:	e7ec      	b.n	800a8a4 <_free_r+0x24>
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	685a      	ldr	r2, [r3, #4]
 800a8ce:	b10a      	cbz	r2, 800a8d4 <_free_r+0x54>
 800a8d0:	42a2      	cmp	r2, r4
 800a8d2:	d9fa      	bls.n	800a8ca <_free_r+0x4a>
 800a8d4:	6819      	ldr	r1, [r3, #0]
 800a8d6:	1858      	adds	r0, r3, r1
 800a8d8:	42a0      	cmp	r0, r4
 800a8da:	d10b      	bne.n	800a8f4 <_free_r+0x74>
 800a8dc:	6820      	ldr	r0, [r4, #0]
 800a8de:	4401      	add	r1, r0
 800a8e0:	1858      	adds	r0, r3, r1
 800a8e2:	4282      	cmp	r2, r0
 800a8e4:	6019      	str	r1, [r3, #0]
 800a8e6:	d1dd      	bne.n	800a8a4 <_free_r+0x24>
 800a8e8:	6810      	ldr	r0, [r2, #0]
 800a8ea:	6852      	ldr	r2, [r2, #4]
 800a8ec:	605a      	str	r2, [r3, #4]
 800a8ee:	4401      	add	r1, r0
 800a8f0:	6019      	str	r1, [r3, #0]
 800a8f2:	e7d7      	b.n	800a8a4 <_free_r+0x24>
 800a8f4:	d902      	bls.n	800a8fc <_free_r+0x7c>
 800a8f6:	230c      	movs	r3, #12
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	e7d3      	b.n	800a8a4 <_free_r+0x24>
 800a8fc:	6820      	ldr	r0, [r4, #0]
 800a8fe:	1821      	adds	r1, r4, r0
 800a900:	428a      	cmp	r2, r1
 800a902:	bf04      	itt	eq
 800a904:	6811      	ldreq	r1, [r2, #0]
 800a906:	6852      	ldreq	r2, [r2, #4]
 800a908:	6062      	str	r2, [r4, #4]
 800a90a:	bf04      	itt	eq
 800a90c:	1809      	addeq	r1, r1, r0
 800a90e:	6021      	streq	r1, [r4, #0]
 800a910:	605c      	str	r4, [r3, #4]
 800a912:	e7c7      	b.n	800a8a4 <_free_r+0x24>
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	20000d88 	.word	0x20000d88

0800a91c <_malloc_r>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	1ccd      	adds	r5, r1, #3
 800a920:	f025 0503 	bic.w	r5, r5, #3
 800a924:	3508      	adds	r5, #8
 800a926:	2d0c      	cmp	r5, #12
 800a928:	bf38      	it	cc
 800a92a:	250c      	movcc	r5, #12
 800a92c:	2d00      	cmp	r5, #0
 800a92e:	4606      	mov	r6, r0
 800a930:	db01      	blt.n	800a936 <_malloc_r+0x1a>
 800a932:	42a9      	cmp	r1, r5
 800a934:	d903      	bls.n	800a93e <_malloc_r+0x22>
 800a936:	230c      	movs	r3, #12
 800a938:	6033      	str	r3, [r6, #0]
 800a93a:	2000      	movs	r0, #0
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
 800a93e:	f000 fa43 	bl	800adc8 <__malloc_lock>
 800a942:	4a21      	ldr	r2, [pc, #132]	; (800a9c8 <_malloc_r+0xac>)
 800a944:	6814      	ldr	r4, [r2, #0]
 800a946:	4621      	mov	r1, r4
 800a948:	b991      	cbnz	r1, 800a970 <_malloc_r+0x54>
 800a94a:	4c20      	ldr	r4, [pc, #128]	; (800a9cc <_malloc_r+0xb0>)
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	b91b      	cbnz	r3, 800a958 <_malloc_r+0x3c>
 800a950:	4630      	mov	r0, r6
 800a952:	f000 f97d 	bl	800ac50 <_sbrk_r>
 800a956:	6020      	str	r0, [r4, #0]
 800a958:	4629      	mov	r1, r5
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 f978 	bl	800ac50 <_sbrk_r>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d124      	bne.n	800a9ae <_malloc_r+0x92>
 800a964:	230c      	movs	r3, #12
 800a966:	6033      	str	r3, [r6, #0]
 800a968:	4630      	mov	r0, r6
 800a96a:	f000 fa2e 	bl	800adca <__malloc_unlock>
 800a96e:	e7e4      	b.n	800a93a <_malloc_r+0x1e>
 800a970:	680b      	ldr	r3, [r1, #0]
 800a972:	1b5b      	subs	r3, r3, r5
 800a974:	d418      	bmi.n	800a9a8 <_malloc_r+0x8c>
 800a976:	2b0b      	cmp	r3, #11
 800a978:	d90f      	bls.n	800a99a <_malloc_r+0x7e>
 800a97a:	600b      	str	r3, [r1, #0]
 800a97c:	50cd      	str	r5, [r1, r3]
 800a97e:	18cc      	adds	r4, r1, r3
 800a980:	4630      	mov	r0, r6
 800a982:	f000 fa22 	bl	800adca <__malloc_unlock>
 800a986:	f104 000b 	add.w	r0, r4, #11
 800a98a:	1d23      	adds	r3, r4, #4
 800a98c:	f020 0007 	bic.w	r0, r0, #7
 800a990:	1ac3      	subs	r3, r0, r3
 800a992:	d0d3      	beq.n	800a93c <_malloc_r+0x20>
 800a994:	425a      	negs	r2, r3
 800a996:	50e2      	str	r2, [r4, r3]
 800a998:	e7d0      	b.n	800a93c <_malloc_r+0x20>
 800a99a:	428c      	cmp	r4, r1
 800a99c:	684b      	ldr	r3, [r1, #4]
 800a99e:	bf16      	itet	ne
 800a9a0:	6063      	strne	r3, [r4, #4]
 800a9a2:	6013      	streq	r3, [r2, #0]
 800a9a4:	460c      	movne	r4, r1
 800a9a6:	e7eb      	b.n	800a980 <_malloc_r+0x64>
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	6849      	ldr	r1, [r1, #4]
 800a9ac:	e7cc      	b.n	800a948 <_malloc_r+0x2c>
 800a9ae:	1cc4      	adds	r4, r0, #3
 800a9b0:	f024 0403 	bic.w	r4, r4, #3
 800a9b4:	42a0      	cmp	r0, r4
 800a9b6:	d005      	beq.n	800a9c4 <_malloc_r+0xa8>
 800a9b8:	1a21      	subs	r1, r4, r0
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 f948 	bl	800ac50 <_sbrk_r>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d0cf      	beq.n	800a964 <_malloc_r+0x48>
 800a9c4:	6025      	str	r5, [r4, #0]
 800a9c6:	e7db      	b.n	800a980 <_malloc_r+0x64>
 800a9c8:	20000d88 	.word	0x20000d88
 800a9cc:	20000d8c 	.word	0x20000d8c

0800a9d0 <__sfputc_r>:
 800a9d0:	6893      	ldr	r3, [r2, #8]
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	b410      	push	{r4}
 800a9d8:	6093      	str	r3, [r2, #8]
 800a9da:	da08      	bge.n	800a9ee <__sfputc_r+0x1e>
 800a9dc:	6994      	ldr	r4, [r2, #24]
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	db01      	blt.n	800a9e6 <__sfputc_r+0x16>
 800a9e2:	290a      	cmp	r1, #10
 800a9e4:	d103      	bne.n	800a9ee <__sfputc_r+0x1e>
 800a9e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9ea:	f7fe bb5d 	b.w	80090a8 <__swbuf_r>
 800a9ee:	6813      	ldr	r3, [r2, #0]
 800a9f0:	1c58      	adds	r0, r3, #1
 800a9f2:	6010      	str	r0, [r2, #0]
 800a9f4:	7019      	strb	r1, [r3, #0]
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <__sfputs_r>:
 800a9fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa00:	4606      	mov	r6, r0
 800aa02:	460f      	mov	r7, r1
 800aa04:	4614      	mov	r4, r2
 800aa06:	18d5      	adds	r5, r2, r3
 800aa08:	42ac      	cmp	r4, r5
 800aa0a:	d101      	bne.n	800aa10 <__sfputs_r+0x12>
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e007      	b.n	800aa20 <__sfputs_r+0x22>
 800aa10:	463a      	mov	r2, r7
 800aa12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff ffda 	bl	800a9d0 <__sfputc_r>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d1f3      	bne.n	800aa08 <__sfputs_r+0xa>
 800aa20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa24 <_vfiprintf_r>:
 800aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	460c      	mov	r4, r1
 800aa2a:	b09d      	sub	sp, #116	; 0x74
 800aa2c:	4617      	mov	r7, r2
 800aa2e:	461d      	mov	r5, r3
 800aa30:	4606      	mov	r6, r0
 800aa32:	b118      	cbz	r0, 800aa3c <_vfiprintf_r+0x18>
 800aa34:	6983      	ldr	r3, [r0, #24]
 800aa36:	b90b      	cbnz	r3, 800aa3c <_vfiprintf_r+0x18>
 800aa38:	f7ff fb2a 	bl	800a090 <__sinit>
 800aa3c:	4b7c      	ldr	r3, [pc, #496]	; (800ac30 <_vfiprintf_r+0x20c>)
 800aa3e:	429c      	cmp	r4, r3
 800aa40:	d158      	bne.n	800aaf4 <_vfiprintf_r+0xd0>
 800aa42:	6874      	ldr	r4, [r6, #4]
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	0718      	lsls	r0, r3, #28
 800aa48:	d55e      	bpl.n	800ab08 <_vfiprintf_r+0xe4>
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d05b      	beq.n	800ab08 <_vfiprintf_r+0xe4>
 800aa50:	2300      	movs	r3, #0
 800aa52:	9309      	str	r3, [sp, #36]	; 0x24
 800aa54:	2320      	movs	r3, #32
 800aa56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa5a:	2330      	movs	r3, #48	; 0x30
 800aa5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa60:	9503      	str	r5, [sp, #12]
 800aa62:	f04f 0b01 	mov.w	fp, #1
 800aa66:	46b8      	mov	r8, r7
 800aa68:	4645      	mov	r5, r8
 800aa6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa6e:	b10b      	cbz	r3, 800aa74 <_vfiprintf_r+0x50>
 800aa70:	2b25      	cmp	r3, #37	; 0x25
 800aa72:	d154      	bne.n	800ab1e <_vfiprintf_r+0xfa>
 800aa74:	ebb8 0a07 	subs.w	sl, r8, r7
 800aa78:	d00b      	beq.n	800aa92 <_vfiprintf_r+0x6e>
 800aa7a:	4653      	mov	r3, sl
 800aa7c:	463a      	mov	r2, r7
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4630      	mov	r0, r6
 800aa82:	f7ff ffbc 	bl	800a9fe <__sfputs_r>
 800aa86:	3001      	adds	r0, #1
 800aa88:	f000 80c2 	beq.w	800ac10 <_vfiprintf_r+0x1ec>
 800aa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8e:	4453      	add	r3, sl
 800aa90:	9309      	str	r3, [sp, #36]	; 0x24
 800aa92:	f898 3000 	ldrb.w	r3, [r8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f000 80ba 	beq.w	800ac10 <_vfiprintf_r+0x1ec>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaa6:	9304      	str	r3, [sp, #16]
 800aaa8:	9307      	str	r3, [sp, #28]
 800aaaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaae:	931a      	str	r3, [sp, #104]	; 0x68
 800aab0:	46a8      	mov	r8, r5
 800aab2:	2205      	movs	r2, #5
 800aab4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800aab8:	485e      	ldr	r0, [pc, #376]	; (800ac34 <_vfiprintf_r+0x210>)
 800aaba:	f7f5 fb91 	bl	80001e0 <memchr>
 800aabe:	9b04      	ldr	r3, [sp, #16]
 800aac0:	bb78      	cbnz	r0, 800ab22 <_vfiprintf_r+0xfe>
 800aac2:	06d9      	lsls	r1, r3, #27
 800aac4:	bf44      	itt	mi
 800aac6:	2220      	movmi	r2, #32
 800aac8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aacc:	071a      	lsls	r2, r3, #28
 800aace:	bf44      	itt	mi
 800aad0:	222b      	movmi	r2, #43	; 0x2b
 800aad2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aad6:	782a      	ldrb	r2, [r5, #0]
 800aad8:	2a2a      	cmp	r2, #42	; 0x2a
 800aada:	d02a      	beq.n	800ab32 <_vfiprintf_r+0x10e>
 800aadc:	9a07      	ldr	r2, [sp, #28]
 800aade:	46a8      	mov	r8, r5
 800aae0:	2000      	movs	r0, #0
 800aae2:	250a      	movs	r5, #10
 800aae4:	4641      	mov	r1, r8
 800aae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaea:	3b30      	subs	r3, #48	; 0x30
 800aaec:	2b09      	cmp	r3, #9
 800aaee:	d969      	bls.n	800abc4 <_vfiprintf_r+0x1a0>
 800aaf0:	b360      	cbz	r0, 800ab4c <_vfiprintf_r+0x128>
 800aaf2:	e024      	b.n	800ab3e <_vfiprintf_r+0x11a>
 800aaf4:	4b50      	ldr	r3, [pc, #320]	; (800ac38 <_vfiprintf_r+0x214>)
 800aaf6:	429c      	cmp	r4, r3
 800aaf8:	d101      	bne.n	800aafe <_vfiprintf_r+0xda>
 800aafa:	68b4      	ldr	r4, [r6, #8]
 800aafc:	e7a2      	b.n	800aa44 <_vfiprintf_r+0x20>
 800aafe:	4b4f      	ldr	r3, [pc, #316]	; (800ac3c <_vfiprintf_r+0x218>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	bf08      	it	eq
 800ab04:	68f4      	ldreq	r4, [r6, #12]
 800ab06:	e79d      	b.n	800aa44 <_vfiprintf_r+0x20>
 800ab08:	4621      	mov	r1, r4
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7fe fb1e 	bl	800914c <__swsetup_r>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d09d      	beq.n	800aa50 <_vfiprintf_r+0x2c>
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	b01d      	add	sp, #116	; 0x74
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	46a8      	mov	r8, r5
 800ab20:	e7a2      	b.n	800aa68 <_vfiprintf_r+0x44>
 800ab22:	4a44      	ldr	r2, [pc, #272]	; (800ac34 <_vfiprintf_r+0x210>)
 800ab24:	1a80      	subs	r0, r0, r2
 800ab26:	fa0b f000 	lsl.w	r0, fp, r0
 800ab2a:	4318      	orrs	r0, r3
 800ab2c:	9004      	str	r0, [sp, #16]
 800ab2e:	4645      	mov	r5, r8
 800ab30:	e7be      	b.n	800aab0 <_vfiprintf_r+0x8c>
 800ab32:	9a03      	ldr	r2, [sp, #12]
 800ab34:	1d11      	adds	r1, r2, #4
 800ab36:	6812      	ldr	r2, [r2, #0]
 800ab38:	9103      	str	r1, [sp, #12]
 800ab3a:	2a00      	cmp	r2, #0
 800ab3c:	db01      	blt.n	800ab42 <_vfiprintf_r+0x11e>
 800ab3e:	9207      	str	r2, [sp, #28]
 800ab40:	e004      	b.n	800ab4c <_vfiprintf_r+0x128>
 800ab42:	4252      	negs	r2, r2
 800ab44:	f043 0302 	orr.w	r3, r3, #2
 800ab48:	9207      	str	r2, [sp, #28]
 800ab4a:	9304      	str	r3, [sp, #16]
 800ab4c:	f898 3000 	ldrb.w	r3, [r8]
 800ab50:	2b2e      	cmp	r3, #46	; 0x2e
 800ab52:	d10e      	bne.n	800ab72 <_vfiprintf_r+0x14e>
 800ab54:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ab58:	2b2a      	cmp	r3, #42	; 0x2a
 800ab5a:	d138      	bne.n	800abce <_vfiprintf_r+0x1aa>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	1d1a      	adds	r2, r3, #4
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	9203      	str	r2, [sp, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	bfb8      	it	lt
 800ab68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab6c:	f108 0802 	add.w	r8, r8, #2
 800ab70:	9305      	str	r3, [sp, #20]
 800ab72:	4d33      	ldr	r5, [pc, #204]	; (800ac40 <_vfiprintf_r+0x21c>)
 800ab74:	f898 1000 	ldrb.w	r1, [r8]
 800ab78:	2203      	movs	r2, #3
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	f7f5 fb30 	bl	80001e0 <memchr>
 800ab80:	b140      	cbz	r0, 800ab94 <_vfiprintf_r+0x170>
 800ab82:	2340      	movs	r3, #64	; 0x40
 800ab84:	1b40      	subs	r0, r0, r5
 800ab86:	fa03 f000 	lsl.w	r0, r3, r0
 800ab8a:	9b04      	ldr	r3, [sp, #16]
 800ab8c:	4303      	orrs	r3, r0
 800ab8e:	f108 0801 	add.w	r8, r8, #1
 800ab92:	9304      	str	r3, [sp, #16]
 800ab94:	f898 1000 	ldrb.w	r1, [r8]
 800ab98:	482a      	ldr	r0, [pc, #168]	; (800ac44 <_vfiprintf_r+0x220>)
 800ab9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab9e:	2206      	movs	r2, #6
 800aba0:	f108 0701 	add.w	r7, r8, #1
 800aba4:	f7f5 fb1c 	bl	80001e0 <memchr>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d037      	beq.n	800ac1c <_vfiprintf_r+0x1f8>
 800abac:	4b26      	ldr	r3, [pc, #152]	; (800ac48 <_vfiprintf_r+0x224>)
 800abae:	bb1b      	cbnz	r3, 800abf8 <_vfiprintf_r+0x1d4>
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	3307      	adds	r3, #7
 800abb4:	f023 0307 	bic.w	r3, r3, #7
 800abb8:	3308      	adds	r3, #8
 800abba:	9303      	str	r3, [sp, #12]
 800abbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abbe:	444b      	add	r3, r9
 800abc0:	9309      	str	r3, [sp, #36]	; 0x24
 800abc2:	e750      	b.n	800aa66 <_vfiprintf_r+0x42>
 800abc4:	fb05 3202 	mla	r2, r5, r2, r3
 800abc8:	2001      	movs	r0, #1
 800abca:	4688      	mov	r8, r1
 800abcc:	e78a      	b.n	800aae4 <_vfiprintf_r+0xc0>
 800abce:	2300      	movs	r3, #0
 800abd0:	f108 0801 	add.w	r8, r8, #1
 800abd4:	9305      	str	r3, [sp, #20]
 800abd6:	4619      	mov	r1, r3
 800abd8:	250a      	movs	r5, #10
 800abda:	4640      	mov	r0, r8
 800abdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe0:	3a30      	subs	r2, #48	; 0x30
 800abe2:	2a09      	cmp	r2, #9
 800abe4:	d903      	bls.n	800abee <_vfiprintf_r+0x1ca>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0c3      	beq.n	800ab72 <_vfiprintf_r+0x14e>
 800abea:	9105      	str	r1, [sp, #20]
 800abec:	e7c1      	b.n	800ab72 <_vfiprintf_r+0x14e>
 800abee:	fb05 2101 	mla	r1, r5, r1, r2
 800abf2:	2301      	movs	r3, #1
 800abf4:	4680      	mov	r8, r0
 800abf6:	e7f0      	b.n	800abda <_vfiprintf_r+0x1b6>
 800abf8:	ab03      	add	r3, sp, #12
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	4622      	mov	r2, r4
 800abfe:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <_vfiprintf_r+0x228>)
 800ac00:	a904      	add	r1, sp, #16
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7fd fd5e 	bl	80086c4 <_printf_float>
 800ac08:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac0c:	4681      	mov	r9, r0
 800ac0e:	d1d5      	bne.n	800abbc <_vfiprintf_r+0x198>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	065b      	lsls	r3, r3, #25
 800ac14:	f53f af7e 	bmi.w	800ab14 <_vfiprintf_r+0xf0>
 800ac18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac1a:	e77d      	b.n	800ab18 <_vfiprintf_r+0xf4>
 800ac1c:	ab03      	add	r3, sp, #12
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	4622      	mov	r2, r4
 800ac22:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <_vfiprintf_r+0x228>)
 800ac24:	a904      	add	r1, sp, #16
 800ac26:	4630      	mov	r0, r6
 800ac28:	f7fe f802 	bl	8008c30 <_printf_i>
 800ac2c:	e7ec      	b.n	800ac08 <_vfiprintf_r+0x1e4>
 800ac2e:	bf00      	nop
 800ac30:	0800b210 	.word	0x0800b210
 800ac34:	0800b34c 	.word	0x0800b34c
 800ac38:	0800b230 	.word	0x0800b230
 800ac3c:	0800b1f0 	.word	0x0800b1f0
 800ac40:	0800b352 	.word	0x0800b352
 800ac44:	0800b356 	.word	0x0800b356
 800ac48:	080086c5 	.word	0x080086c5
 800ac4c:	0800a9ff 	.word	0x0800a9ff

0800ac50 <_sbrk_r>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4c06      	ldr	r4, [pc, #24]	; (800ac6c <_sbrk_r+0x1c>)
 800ac54:	2300      	movs	r3, #0
 800ac56:	4605      	mov	r5, r0
 800ac58:	4608      	mov	r0, r1
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	f7f8 fe80 	bl	8003960 <_sbrk>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <_sbrk_r+0x1a>
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	b103      	cbz	r3, 800ac6a <_sbrk_r+0x1a>
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	2000162c 	.word	0x2000162c

0800ac70 <__sread>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	460c      	mov	r4, r1
 800ac74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac78:	f000 f8a8 	bl	800adcc <_read_r>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	bfab      	itete	ge
 800ac80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac82:	89a3      	ldrhlt	r3, [r4, #12]
 800ac84:	181b      	addge	r3, r3, r0
 800ac86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac8a:	bfac      	ite	ge
 800ac8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac8e:	81a3      	strhlt	r3, [r4, #12]
 800ac90:	bd10      	pop	{r4, pc}

0800ac92 <__swrite>:
 800ac92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac96:	461f      	mov	r7, r3
 800ac98:	898b      	ldrh	r3, [r1, #12]
 800ac9a:	05db      	lsls	r3, r3, #23
 800ac9c:	4605      	mov	r5, r0
 800ac9e:	460c      	mov	r4, r1
 800aca0:	4616      	mov	r6, r2
 800aca2:	d505      	bpl.n	800acb0 <__swrite+0x1e>
 800aca4:	2302      	movs	r3, #2
 800aca6:	2200      	movs	r2, #0
 800aca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acac:	f000 f868 	bl	800ad80 <_lseek_r>
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	4628      	mov	r0, r5
 800acc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acc6:	f000 b817 	b.w	800acf8 <_write_r>

0800acca <__sseek>:
 800acca:	b510      	push	{r4, lr}
 800accc:	460c      	mov	r4, r1
 800acce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd2:	f000 f855 	bl	800ad80 <_lseek_r>
 800acd6:	1c43      	adds	r3, r0, #1
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	bf15      	itete	ne
 800acdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800acde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ace2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ace6:	81a3      	strheq	r3, [r4, #12]
 800ace8:	bf18      	it	ne
 800acea:	81a3      	strhne	r3, [r4, #12]
 800acec:	bd10      	pop	{r4, pc}

0800acee <__sclose>:
 800acee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf2:	f000 b813 	b.w	800ad1c <_close_r>
	...

0800acf8 <_write_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4c07      	ldr	r4, [pc, #28]	; (800ad18 <_write_r+0x20>)
 800acfc:	4605      	mov	r5, r0
 800acfe:	4608      	mov	r0, r1
 800ad00:	4611      	mov	r1, r2
 800ad02:	2200      	movs	r2, #0
 800ad04:	6022      	str	r2, [r4, #0]
 800ad06:	461a      	mov	r2, r3
 800ad08:	f7f6 fb64 	bl	80013d4 <_write>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d102      	bne.n	800ad16 <_write_r+0x1e>
 800ad10:	6823      	ldr	r3, [r4, #0]
 800ad12:	b103      	cbz	r3, 800ad16 <_write_r+0x1e>
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	2000162c 	.word	0x2000162c

0800ad1c <_close_r>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	4c06      	ldr	r4, [pc, #24]	; (800ad38 <_close_r+0x1c>)
 800ad20:	2300      	movs	r3, #0
 800ad22:	4605      	mov	r5, r0
 800ad24:	4608      	mov	r0, r1
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	f7f6 fb7e 	bl	8001428 <_close>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_close_r+0x1a>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_close_r+0x1a>
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	2000162c 	.word	0x2000162c

0800ad3c <_fstat_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4c07      	ldr	r4, [pc, #28]	; (800ad5c <_fstat_r+0x20>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4605      	mov	r5, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	4611      	mov	r1, r2
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	f7f6 fbbd 	bl	80014c8 <_fstat>
 800ad4e:	1c43      	adds	r3, r0, #1
 800ad50:	d102      	bne.n	800ad58 <_fstat_r+0x1c>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	b103      	cbz	r3, 800ad58 <_fstat_r+0x1c>
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
 800ad5a:	bf00      	nop
 800ad5c:	2000162c 	.word	0x2000162c

0800ad60 <_isatty_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4c06      	ldr	r4, [pc, #24]	; (800ad7c <_isatty_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4605      	mov	r5, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	f7f6 fb1c 	bl	80013a8 <_isatty>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_isatty_r+0x1a>
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_isatty_r+0x1a>
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	2000162c 	.word	0x2000162c

0800ad80 <_lseek_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4c07      	ldr	r4, [pc, #28]	; (800ada0 <_lseek_r+0x20>)
 800ad84:	4605      	mov	r5, r0
 800ad86:	4608      	mov	r0, r1
 800ad88:	4611      	mov	r1, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	6022      	str	r2, [r4, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f7f6 fb61 	bl	8001456 <_lseek>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_lseek_r+0x1e>
 800ad98:	6823      	ldr	r3, [r4, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_lseek_r+0x1e>
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	2000162c 	.word	0x2000162c

0800ada4 <__ascii_mbtowc>:
 800ada4:	b082      	sub	sp, #8
 800ada6:	b901      	cbnz	r1, 800adaa <__ascii_mbtowc+0x6>
 800ada8:	a901      	add	r1, sp, #4
 800adaa:	b142      	cbz	r2, 800adbe <__ascii_mbtowc+0x1a>
 800adac:	b14b      	cbz	r3, 800adc2 <__ascii_mbtowc+0x1e>
 800adae:	7813      	ldrb	r3, [r2, #0]
 800adb0:	600b      	str	r3, [r1, #0]
 800adb2:	7812      	ldrb	r2, [r2, #0]
 800adb4:	1c10      	adds	r0, r2, #0
 800adb6:	bf18      	it	ne
 800adb8:	2001      	movne	r0, #1
 800adba:	b002      	add	sp, #8
 800adbc:	4770      	bx	lr
 800adbe:	4610      	mov	r0, r2
 800adc0:	e7fb      	b.n	800adba <__ascii_mbtowc+0x16>
 800adc2:	f06f 0001 	mvn.w	r0, #1
 800adc6:	e7f8      	b.n	800adba <__ascii_mbtowc+0x16>

0800adc8 <__malloc_lock>:
 800adc8:	4770      	bx	lr

0800adca <__malloc_unlock>:
 800adca:	4770      	bx	lr

0800adcc <_read_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4c07      	ldr	r4, [pc, #28]	; (800adec <_read_r+0x20>)
 800add0:	4605      	mov	r5, r0
 800add2:	4608      	mov	r0, r1
 800add4:	4611      	mov	r1, r2
 800add6:	2200      	movs	r2, #0
 800add8:	6022      	str	r2, [r4, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f6 fb4c 	bl	8001478 <_read>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_read_r+0x1e>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	b103      	cbz	r3, 800adea <_read_r+0x1e>
 800ade8:	602b      	str	r3, [r5, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	2000162c 	.word	0x2000162c

0800adf0 <__ascii_wctomb>:
 800adf0:	b149      	cbz	r1, 800ae06 <__ascii_wctomb+0x16>
 800adf2:	2aff      	cmp	r2, #255	; 0xff
 800adf4:	bf85      	ittet	hi
 800adf6:	238a      	movhi	r3, #138	; 0x8a
 800adf8:	6003      	strhi	r3, [r0, #0]
 800adfa:	700a      	strbls	r2, [r1, #0]
 800adfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae00:	bf98      	it	ls
 800ae02:	2001      	movls	r0, #1
 800ae04:	4770      	bx	lr
 800ae06:	4608      	mov	r0, r1
 800ae08:	4770      	bx	lr
	...

0800ae0c <asinf>:
 800ae0c:	b510      	push	{r4, lr}
 800ae0e:	ed2d 8b02 	vpush	{d8}
 800ae12:	4c27      	ldr	r4, [pc, #156]	; (800aeb0 <asinf+0xa4>)
 800ae14:	b08a      	sub	sp, #40	; 0x28
 800ae16:	eeb0 8a40 	vmov.f32	s16, s0
 800ae1a:	f000 f89f 	bl	800af5c <__ieee754_asinf>
 800ae1e:	f994 3000 	ldrsb.w	r3, [r4]
 800ae22:	3301      	adds	r3, #1
 800ae24:	eef0 8a40 	vmov.f32	s17, s0
 800ae28:	d03c      	beq.n	800aea4 <asinf+0x98>
 800ae2a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ae2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae32:	d637      	bvs.n	800aea4 <asinf+0x98>
 800ae34:	eeb0 0a48 	vmov.f32	s0, s16
 800ae38:	f000 f986 	bl	800b148 <fabsf>
 800ae3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ae44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae48:	dd2c      	ble.n	800aea4 <asinf+0x98>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <asinf+0xa8>)
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	ee18 0a10 	vmov	r0, s16
 800ae56:	2300      	movs	r3, #0
 800ae58:	9308      	str	r3, [sp, #32]
 800ae5a:	f7f5 fb75 	bl	8000548 <__aeabi_f2d>
 800ae5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae66:	4814      	ldr	r0, [pc, #80]	; (800aeb8 <asinf+0xac>)
 800ae68:	f000 f966 	bl	800b138 <nan>
 800ae6c:	f994 3000 	ldrsb.w	r3, [r4]
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ae76:	d104      	bne.n	800ae82 <asinf+0x76>
 800ae78:	f7fd fb44 	bl	8008504 <__errno>
 800ae7c:	2321      	movs	r3, #33	; 0x21
 800ae7e:	6003      	str	r3, [r0, #0]
 800ae80:	e004      	b.n	800ae8c <asinf+0x80>
 800ae82:	4668      	mov	r0, sp
 800ae84:	f000 f955 	bl	800b132 <matherr>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d0f5      	beq.n	800ae78 <asinf+0x6c>
 800ae8c:	9b08      	ldr	r3, [sp, #32]
 800ae8e:	b11b      	cbz	r3, 800ae98 <asinf+0x8c>
 800ae90:	f7fd fb38 	bl	8008504 <__errno>
 800ae94:	9b08      	ldr	r3, [sp, #32]
 800ae96:	6003      	str	r3, [r0, #0]
 800ae98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae9c:	f7f5 fe84 	bl	8000ba8 <__aeabi_d2f>
 800aea0:	ee08 0a90 	vmov	s17, r0
 800aea4:	eeb0 0a68 	vmov.f32	s0, s17
 800aea8:	b00a      	add	sp, #40	; 0x28
 800aeaa:	ecbd 8b02 	vpop	{d8}
 800aeae:	bd10      	pop	{r4, pc}
 800aeb0:	20000ccc 	.word	0x20000ccc
 800aeb4:	0800b468 	.word	0x0800b468
 800aeb8:	0800b351 	.word	0x0800b351

0800aebc <sqrtf>:
 800aebc:	b510      	push	{r4, lr}
 800aebe:	ed2d 8b02 	vpush	{d8}
 800aec2:	b08a      	sub	sp, #40	; 0x28
 800aec4:	eeb0 8a40 	vmov.f32	s16, s0
 800aec8:	f000 f930 	bl	800b12c <__ieee754_sqrtf>
 800aecc:	4b21      	ldr	r3, [pc, #132]	; (800af54 <sqrtf+0x98>)
 800aece:	f993 4000 	ldrsb.w	r4, [r3]
 800aed2:	1c63      	adds	r3, r4, #1
 800aed4:	d02c      	beq.n	800af30 <sqrtf+0x74>
 800aed6:	eeb4 8a48 	vcmp.f32	s16, s16
 800aeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aede:	d627      	bvs.n	800af30 <sqrtf+0x74>
 800aee0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee8:	d522      	bpl.n	800af30 <sqrtf+0x74>
 800aeea:	2301      	movs	r3, #1
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	4b1a      	ldr	r3, [pc, #104]	; (800af58 <sqrtf+0x9c>)
 800aef0:	9301      	str	r3, [sp, #4]
 800aef2:	ee18 0a10 	vmov	r0, s16
 800aef6:	2300      	movs	r3, #0
 800aef8:	9308      	str	r3, [sp, #32]
 800aefa:	f7f5 fb25 	bl	8000548 <__aeabi_f2d>
 800aefe:	2200      	movs	r2, #0
 800af00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af08:	2300      	movs	r3, #0
 800af0a:	b9ac      	cbnz	r4, 800af38 <sqrtf+0x7c>
 800af0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af10:	4668      	mov	r0, sp
 800af12:	f000 f90e 	bl	800b132 <matherr>
 800af16:	b1b8      	cbz	r0, 800af48 <sqrtf+0x8c>
 800af18:	9b08      	ldr	r3, [sp, #32]
 800af1a:	b11b      	cbz	r3, 800af24 <sqrtf+0x68>
 800af1c:	f7fd faf2 	bl	8008504 <__errno>
 800af20:	9b08      	ldr	r3, [sp, #32]
 800af22:	6003      	str	r3, [r0, #0]
 800af24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af28:	f7f5 fe3e 	bl	8000ba8 <__aeabi_d2f>
 800af2c:	ee00 0a10 	vmov	s0, r0
 800af30:	b00a      	add	sp, #40	; 0x28
 800af32:	ecbd 8b02 	vpop	{d8}
 800af36:	bd10      	pop	{r4, pc}
 800af38:	4610      	mov	r0, r2
 800af3a:	4619      	mov	r1, r3
 800af3c:	f7f5 fc86 	bl	800084c <__aeabi_ddiv>
 800af40:	2c02      	cmp	r4, #2
 800af42:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af46:	d1e3      	bne.n	800af10 <sqrtf+0x54>
 800af48:	f7fd fadc 	bl	8008504 <__errno>
 800af4c:	2321      	movs	r3, #33	; 0x21
 800af4e:	6003      	str	r3, [r0, #0]
 800af50:	e7e2      	b.n	800af18 <sqrtf+0x5c>
 800af52:	bf00      	nop
 800af54:	20000ccc 	.word	0x20000ccc
 800af58:	0800b46e 	.word	0x0800b46e

0800af5c <__ieee754_asinf>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	ee10 5a10 	vmov	r5, s0
 800af62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af66:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800af6a:	ed2d 8b04 	vpush	{d8-d9}
 800af6e:	d10c      	bne.n	800af8a <__ieee754_asinf+0x2e>
 800af70:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800b0ec <__ieee754_asinf+0x190>
 800af74:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800b0f0 <__ieee754_asinf+0x194>
 800af78:	ee60 7a27 	vmul.f32	s15, s0, s15
 800af7c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800af80:	eeb0 0a67 	vmov.f32	s0, s15
 800af84:	ecbd 8b04 	vpop	{d8-d9}
 800af88:	bd38      	pop	{r3, r4, r5, pc}
 800af8a:	dd04      	ble.n	800af96 <__ieee754_asinf+0x3a>
 800af8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800af90:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800af94:	e7f6      	b.n	800af84 <__ieee754_asinf+0x28>
 800af96:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800af9a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800af9e:	da0b      	bge.n	800afb8 <__ieee754_asinf+0x5c>
 800afa0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800afa4:	da52      	bge.n	800b04c <__ieee754_asinf+0xf0>
 800afa6:	eddf 7a53 	vldr	s15, [pc, #332]	; 800b0f4 <__ieee754_asinf+0x198>
 800afaa:	ee70 7a27 	vadd.f32	s15, s0, s15
 800afae:	eef4 7ae8 	vcmpe.f32	s15, s17
 800afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb6:	dce5      	bgt.n	800af84 <__ieee754_asinf+0x28>
 800afb8:	f000 f8c6 	bl	800b148 <fabsf>
 800afbc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800afc0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800afc4:	ee20 8a08 	vmul.f32	s16, s0, s16
 800afc8:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800b0f8 <__ieee754_asinf+0x19c>
 800afcc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800b0fc <__ieee754_asinf+0x1a0>
 800afd0:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800b100 <__ieee754_asinf+0x1a4>
 800afd4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800afd8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800b104 <__ieee754_asinf+0x1a8>
 800afdc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800afe0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b108 <__ieee754_asinf+0x1ac>
 800afe4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800afe8:	eddf 7a48 	vldr	s15, [pc, #288]	; 800b10c <__ieee754_asinf+0x1b0>
 800afec:	eee7 7a08 	vfma.f32	s15, s14, s16
 800aff0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800b110 <__ieee754_asinf+0x1b4>
 800aff4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800aff8:	eddf 7a46 	vldr	s15, [pc, #280]	; 800b114 <__ieee754_asinf+0x1b8>
 800affc:	eee8 7a07 	vfma.f32	s15, s16, s14
 800b000:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800b118 <__ieee754_asinf+0x1bc>
 800b004:	eea7 7a88 	vfma.f32	s14, s15, s16
 800b008:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b11c <__ieee754_asinf+0x1c0>
 800b00c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800b010:	eeb0 0a48 	vmov.f32	s0, s16
 800b014:	eee7 8a88 	vfma.f32	s17, s15, s16
 800b018:	f000 f888 	bl	800b12c <__ieee754_sqrtf>
 800b01c:	4b40      	ldr	r3, [pc, #256]	; (800b120 <__ieee754_asinf+0x1c4>)
 800b01e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800b022:	429c      	cmp	r4, r3
 800b024:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800b028:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b02c:	dd3d      	ble.n	800b0aa <__ieee754_asinf+0x14e>
 800b02e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800b032:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800b124 <__ieee754_asinf+0x1c8>
 800b036:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b03a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800b0f0 <__ieee754_asinf+0x194>
 800b03e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b042:	2d00      	cmp	r5, #0
 800b044:	bfd8      	it	le
 800b046:	eeb1 0a40 	vnegle.f32	s0, s0
 800b04a:	e79b      	b.n	800af84 <__ieee754_asinf+0x28>
 800b04c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b050:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b0f8 <__ieee754_asinf+0x19c>
 800b054:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800b0fc <__ieee754_asinf+0x1a0>
 800b058:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800b110 <__ieee754_asinf+0x1b4>
 800b05c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b060:	eddf 6a28 	vldr	s13, [pc, #160]	; 800b104 <__ieee754_asinf+0x1a8>
 800b064:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b068:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b108 <__ieee754_asinf+0x1ac>
 800b06c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b070:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b10c <__ieee754_asinf+0x1b0>
 800b074:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b078:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b100 <__ieee754_asinf+0x1a4>
 800b07c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b080:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b114 <__ieee754_asinf+0x1b8>
 800b084:	eee7 6a86 	vfma.f32	s13, s15, s12
 800b088:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800b118 <__ieee754_asinf+0x1bc>
 800b08c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800b090:	eddf 6a22 	vldr	s13, [pc, #136]	; 800b11c <__ieee754_asinf+0x1c0>
 800b094:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b09c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800b0a0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800b0a4:	eea0 0a27 	vfma.f32	s0, s0, s15
 800b0a8:	e76c      	b.n	800af84 <__ieee754_asinf+0x28>
 800b0aa:	ee10 3a10 	vmov	r3, s0
 800b0ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b0b2:	f023 030f 	bic.w	r3, r3, #15
 800b0b6:	ee07 3a90 	vmov	s15, r3
 800b0ba:	eef1 6a67 	vneg.f32	s13, s15
 800b0be:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800b0c2:	ee70 5a00 	vadd.f32	s11, s0, s0
 800b0c6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b0ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b0ec <__ieee754_asinf+0x190>
 800b0ce:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800b0d2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800b128 <__ieee754_asinf+0x1cc>
 800b0d6:	eee5 7a47 	vfms.f32	s15, s10, s14
 800b0da:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800b0de:	eeb0 6a40 	vmov.f32	s12, s0
 800b0e2:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b0e6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b0ea:	e7a8      	b.n	800b03e <__ieee754_asinf+0xe2>
 800b0ec:	b33bbd2e 	.word	0xb33bbd2e
 800b0f0:	3fc90fdb 	.word	0x3fc90fdb
 800b0f4:	7149f2ca 	.word	0x7149f2ca
 800b0f8:	3811ef08 	.word	0x3811ef08
 800b0fc:	3a4f7f04 	.word	0x3a4f7f04
 800b100:	3e2aaaab 	.word	0x3e2aaaab
 800b104:	bd241146 	.word	0xbd241146
 800b108:	3e4e0aa8 	.word	0x3e4e0aa8
 800b10c:	bea6b090 	.word	0xbea6b090
 800b110:	3d9dc62e 	.word	0x3d9dc62e
 800b114:	bf303361 	.word	0xbf303361
 800b118:	4001572d 	.word	0x4001572d
 800b11c:	c019d139 	.word	0xc019d139
 800b120:	3f799999 	.word	0x3f799999
 800b124:	333bbd2e 	.word	0x333bbd2e
 800b128:	3f490fdb 	.word	0x3f490fdb

0800b12c <__ieee754_sqrtf>:
 800b12c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b130:	4770      	bx	lr

0800b132 <matherr>:
 800b132:	2000      	movs	r0, #0
 800b134:	4770      	bx	lr
	...

0800b138 <nan>:
 800b138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b140 <nan+0x8>
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	00000000 	.word	0x00000000
 800b144:	7ff80000 	.word	0x7ff80000

0800b148 <fabsf>:
 800b148:	ee10 3a10 	vmov	r3, s0
 800b14c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b150:	ee00 3a10 	vmov	s0, r3
 800b154:	4770      	bx	lr
	...

0800b158 <_init>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	bf00      	nop
 800b15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15e:	bc08      	pop	{r3}
 800b160:	469e      	mov	lr, r3
 800b162:	4770      	bx	lr

0800b164 <_fini>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	bf00      	nop
 800b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16a:	bc08      	pop	{r3}
 800b16c:	469e      	mov	lr, r3
 800b16e:	4770      	bx	lr
