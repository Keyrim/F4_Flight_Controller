
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08008e88  08008e88  00018e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009188  08009188  00020674  2**0
                  CONTENTS
  4 .ARM          00000008  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009190  08009190  00020674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009190  08009190  00019190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009194  08009194  00019194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000674  20000000  08009198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000674  0800980c  00020674  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d44  0800980c  00020d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c323  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039f0  00000000  00000000  0003c9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001468  00000000  00000000  000403b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  00041820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002410e  00000000  00000000  00042ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014f19  00000000  00000000  00066bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca7e9  00000000  00000000  0007badf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001462c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000615c  00000000  00000000  00146344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e6c 	.word	0x08008e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	08008e6c 	.word	0x08008e6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <DEBUG_init+0x14>)
 8000eae:	f000 f809 	bl	8000ec4 <RetargetInit>
	printf("Debuger is init\n");
 8000eb2:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <DEBUG_init+0x18>)
 8000eb4:	f006 f870 	bl	8006f98 <puts>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000cbc 	.word	0x20000cbc
 8000ec0:	08008e88 	.word	0x08008e88

08000ec4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <RetargetInit+0x28>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <RetargetInit+0x2c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6898      	ldr	r0, [r3, #8]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	2202      	movs	r2, #2
 8000edc:	2100      	movs	r1, #0
 8000ede:	f006 f863 	bl	8006fa8 <setvbuf>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200006c0 	.word	0x200006c0
 8000ef0:	200004a4 	.word	0x200004a4

08000ef4 <_isatty>:

int _isatty(int fd) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db04      	blt.n	8000f0c <_isatty+0x18>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	dc01      	bgt.n	8000f0c <_isatty+0x18>
    return 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e005      	b.n	8000f18 <_isatty+0x24>

  errno = EBADF;
 8000f0c:	f005 fb28 	bl	8006560 <__errno>
 8000f10:	4602      	mov	r2, r0
 8000f12:	2309      	movs	r3, #9
 8000f14:	6013      	str	r3, [r2, #0]
  return 0;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_write>:

int _write(int fd, char* ptr, int len) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d002      	beq.n	8000f38 <_write+0x18>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d110      	bne.n	8000f5a <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <_write+0x50>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	2364      	movs	r3, #100	; 0x64
 8000f42:	68b9      	ldr	r1, [r7, #8]
 8000f44:	f004 fd85 	bl	8005a52 <HAL_UART_Transmit>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <_write+0x36>
      return len;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	e008      	b.n	8000f68 <_write+0x48>
    else
      return EIO;
 8000f56:	2305      	movs	r3, #5
 8000f58:	e006      	b.n	8000f68 <_write+0x48>
  }
  errno = EBADF;
 8000f5a:	f005 fb01 	bl	8006560 <__errno>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	2309      	movs	r3, #9
 8000f62:	6013      	str	r3, [r2, #0]
  return -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200006c0 	.word	0x200006c0

08000f74 <_close>:

int _close(int fd) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db04      	blt.n	8000f8c <_close+0x18>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	dc01      	bgt.n	8000f8c <_close+0x18>
    return 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e006      	b.n	8000f9a <_close+0x26>

  errno = EBADF;
 8000f8c:	f005 fae8 	bl	8006560 <__errno>
 8000f90:	4602      	mov	r2, r0
 8000f92:	2309      	movs	r3, #9
 8000f94:	6013      	str	r3, [r2, #0]
  return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000fae:	f005 fad7 	bl	8006560 <__errno>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	6013      	str	r3, [r2, #0]
  return -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_read>:

int _read(int fd, char* ptr, int len) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d110      	bne.n	8000ff8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <_read+0x4c>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	2201      	movs	r2, #1
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	f004 fdcf 	bl	8005b84 <HAL_UART_Receive>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fea:	7dfb      	ldrb	r3, [r7, #23]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <_read+0x30>
      return 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e008      	b.n	8001006 <_read+0x42>
    else
      return EIO;
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e006      	b.n	8001006 <_read+0x42>
  }
  errno = EBADF;
 8000ff8:	f005 fab2 	bl	8006560 <__errno>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	2309      	movs	r3, #9
 8001000:	6013      	str	r3, [r2, #0]
  return -1;
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200006c0 	.word	0x200006c0

08001014 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db08      	blt.n	8001036 <_fstat+0x22>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b02      	cmp	r3, #2
 8001028:	dc05      	bgt.n	8001036 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001030:	605a      	str	r2, [r3, #4]
    return 0;
 8001032:	2300      	movs	r3, #0
 8001034:	e005      	b.n	8001042 <_fstat+0x2e>
  }

  errno = EBADF;
 8001036:	f005 fa93 	bl	8006560 <__errno>
 800103a:	4602      	mov	r2, r0
 800103c:	2309      	movs	r3, #9
 800103e:	6013      	str	r3, [r2, #0]
  return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8001054:	4a05      	ldr	r2, [pc, #20]	; (800106c <SCHEDULER_init+0x20>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 800105a:	f7ff ff25 	bl	8000ea8 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f000 f9f6 	bl	8001450 <tasks_init>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200006a8 	.word	0x200006a8

08001070 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8001076:	f000 fa87 	bl	8001588 <TIME_us>
 800107a:	6078      	str	r0, [r7, #4]
	task_t * task = get_first_task();
 800107c:	f000 f82a 	bl	80010d4 <get_first_task>
 8001080:	6038      	str	r0, [r7, #0]

	while(task_queu_position < task_queu_size && task != NULL){
 8001082:	e015      	b.n	80010b0 <SCHEDULER_run+0x40>

		//TODO : Tâches par évennement
		if(task->static_priority != PRIORITY_REAL_TIME)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f993 3000 	ldrsb.w	r3, [r3]
 800108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108e:	d00c      	beq.n	80010aa <SCHEDULER_run+0x3a>
			if(current_time_us >= task->it_last_execution_us + task->it_desired_period_us)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	69da      	ldr	r2, [r3, #28]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	4413      	add	r3, r2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	d304      	bcc.n	80010aa <SCHEDULER_run+0x3a>
					current_time_us = task_process_it(task, current_time_us);
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f000 f83c 	bl	8001120 <task_process_it>
 80010a8:	6078      	str	r0, [r7, #4]

		task = get_next_task();
 80010aa:	f000 f823 	bl	80010f4 <get_next_task>
 80010ae:	6038      	str	r0, [r7, #0]
	while(task_queu_position < task_queu_size && task != NULL){
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SCHEDULER_run+0x5c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <SCHEDULER_run+0x60>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d202      	bcs.n	80010c2 <SCHEDULER_run+0x52>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1e0      	bne.n	8001084 <SCHEDULER_run+0x14>
	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200006a4 	.word	0x200006a4
 80010d0:	200006a0 	.word	0x200006a0

080010d4 <get_first_task>:
	for(uint32_t t = 0; t < task_queu_size; t++)
		load_pourcentage += task_queu[t]->it_duration_us * 100 / task_queu[t]->it_desired_period_us ;
	return load_pourcentage ;
}

static task_t * get_first_task(void){
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <get_first_task+0x18>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <get_first_task+0x1c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	200006a4 	.word	0x200006a4
 80010f0:	20000690 	.word	0x20000690

080010f4 <get_next_task>:

static task_t * get_next_task(void){
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <get_next_task+0x24>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3301      	adds	r3, #1
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <get_next_task+0x24>)
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <get_next_task+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <get_next_task+0x28>)
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200006a4 	.word	0x200006a4
 800111c:	20000690 	.word	0x20000690

08001120 <task_process_it>:

static uint32_t task_process_it(task_t * task, uint32_t current_time_us){
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->it == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <task_process_it+0x16>
		return current_time_us ;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	e0a7      	b.n	8001286 <task_process_it+0x166>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->it_real_period_us_average_sum -= task->it_real_period_us_average_array[task->it_average_index];
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	310c      	adds	r1, #12
 8001146:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800114a:	1ad2      	subs	r2, r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	1ac9      	subs	r1, r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	320c      	adds	r2, #12
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->it_real_period_us_average_sum += task->it_real_period_us_average_array[task->it_average_index] ;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	310c      	adds	r1, #12
 8001178:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800117c:	441a      	add	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us = task->it_real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800118a:	4a41      	ldr	r2, [pc, #260]	; (8001290 <task_process_it+0x170>)
 800118c:	fba2 2303 	umull	r2, r3, r2, r3
 8001190:	091a      	lsrs	r2, r3, #4
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	619a      	str	r2, [r3, #24]

	task->it_last_execution_us = current_time_us ;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	61da      	str	r2, [r3, #28]
	task->it(current_time_us);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	4798      	blx	r3
	current_time_us = TIME_us();
 80011a4:	f000 f9f0 	bl	8001588 <TIME_us>
 80011a8:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->it_duration_us_average_sum -= task->it_duration_us_average_array[task->it_average_index];
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	3320      	adds	r3, #32
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d2:	6839      	ldr	r1, [r7, #0]
 80011d4:	1a8a      	subs	r2, r1, r2
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	3320      	adds	r3, #32
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	605a      	str	r2, [r3, #4]
	task->it_duration_us_worst = MAX(task->it_duration_us_average_array[task->it_average_index] , task->it_duration_us_worst);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	3320      	adds	r3, #32
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	bf38      	it	cc
 80011f8:	461a      	movcc	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	611a      	str	r2, [r3, #16]
	task->it_duration_us_average_sum += task->it_duration_us_average_array[task->it_average_index];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	3320      	adds	r3, #32
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	441a      	add	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us = task->it_duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001222:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <task_process_it+0x170>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	091a      	lsrs	r2, r3, #4
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	60da      	str	r2, [r3, #12]

	if(task->it_duration_us_average_array[task->it_average_index] > 1000)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	3320      	adds	r3, #32
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001242:	d90f      	bls.n	8001264 <task_process_it+0x144>
		task->it_duration_us_average_array[task->it_average_index] ++ ;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f102 0320 	add.w	r3, r2, #32
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	1c59      	adds	r1, r3, #1
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f102 0320 	add.w	r3, r2, #32
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4403      	add	r3, r0
 8001262:	6059      	str	r1, [r3, #4]

	if(++task->it_average_index == TASK_STAT_AVERAGE_OVER)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001278:	2b14      	cmp	r3, #20
 800127a:	d103      	bne.n	8001284 <task_process_it+0x164>
		task->it_average_index = 0 ;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	return current_time_us ;
 8001284:	683b      	ldr	r3, [r7, #0]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	cccccccd 	.word	0xcccccccd

08001294 <SCHEDULER_enable_task>:
	return current_time_us ;
}


//Activation ou d�sactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
	if(enable && id < TASK_COUNT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <SCHEDULER_enable_task+0x2a>
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d808      	bhi.n	80012be <SCHEDULER_enable_task+0x2a>
		queu_add(TASK_get_task(id));
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f956 	bl	8001560 <TASK_get_task>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f832 	bl	8001320 <queu_add>
 80012bc:	e007      	b.n	80012ce <SCHEDULER_enable_task+0x3a>
	else
		queu_remove(TASK_get_task(id));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f94d 	bl	8001560 <TASK_get_task>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f881 	bl	80013d0 <queu_remove>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	e00b      	b.n	80012fe <queu_contains+0x26>
		if(task_queu[t] == task)
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <queu_contains+0x40>)
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d101      	bne.n	80012f8 <queu_contains+0x20>
			return TRUE ;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e008      	b.n	800130a <queu_contains+0x32>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <queu_contains+0x44>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d3ee      	bcc.n	80012e6 <queu_contains+0xe>
	return FALSE ;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000690 	.word	0x20000690
 800131c:	200006a0 	.word	0x200006a0

08001320 <queu_add>:

static bool_e queu_add(task_t * task){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if(queu_contains(task) || task_queu_size >= TASK_COUNT)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ffd5 	bl	80012d8 <queu_contains>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d103      	bne.n	800133c <queu_add+0x1c>
 8001334:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <queu_add+0xa8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <queu_add+0x20>
		return FALSE ;
 800133c:	2300      	movs	r3, #0
 800133e:	e03e      	b.n	80013be <queu_add+0x9e>


	uint32_t t = 0 ;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8001344:	e037      	b.n	80013b6 <queu_add+0x96>
	{
		if(task_queu[t] == NULL || task->static_priority > task_queu[t]->static_priority){
 8001346:	4a21      	ldr	r2, [pc, #132]	; (80013cc <queu_add+0xac>)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00a      	beq.n	8001368 <queu_add+0x48>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f993 2000 	ldrsb.w	r2, [r3]
 8001358:	491c      	ldr	r1, [pc, #112]	; (80013cc <queu_add+0xac>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001360:	f993 3000 	ldrsb.w	r3, [r3]
 8001364:	429a      	cmp	r2, r3
 8001366:	dd23      	ble.n	80013b0 <queu_add+0x90>
			if(task_queu[t] != NULL)
 8001368:	4a18      	ldr	r2, [pc, #96]	; (80013cc <queu_add+0xac>)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d011      	beq.n	8001398 <queu_add+0x78>
				memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size +1 - t));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	3301      	adds	r3, #1
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4a14      	ldr	r2, [pc, #80]	; (80013cc <queu_add+0xac>)
 800137c:	1898      	adds	r0, r3, r2
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <queu_add+0xac>)
 8001384:	1899      	adds	r1, r3, r2
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <queu_add+0xa8>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	3301      	adds	r3, #1
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	461a      	mov	r2, r3
 8001394:	f005 f90e 	bl	80065b4 <memmove>
			task_queu[t] = task ;
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <queu_add+0xac>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <queu_add+0xa8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <queu_add+0xa8>)
 80013aa:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e006      	b.n	80013be <queu_add+0x9e>
		}
		t++;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	3301      	adds	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d9c4      	bls.n	8001346 <queu_add+0x26>
	}
	return FALSE ;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200006a0 	.word	0x200006a0
 80013cc:	20000690 	.word	0x20000690

080013d0 <queu_remove>:

static bool_e queu_remove(task_t * task){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task))
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff7d 	bl	80012d8 <queu_contains>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <queu_remove+0x18>
		return FALSE ;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e02a      	b.n	800143e <queu_remove+0x6e>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e021      	b.n	8001432 <queu_remove+0x62>
		if(task == task_queu[t]){
 80013ee:	4a16      	ldr	r2, [pc, #88]	; (8001448 <queu_remove+0x78>)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d117      	bne.n	800142c <queu_remove+0x5c>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <queu_remove+0x78>)
 8001402:	1898      	adds	r0, r3, r2
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <queu_remove+0x78>)
 800140c:	1899      	adds	r1, r3, r2
 800140e:	4b0f      	ldr	r3, [pc, #60]	; (800144c <queu_remove+0x7c>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	461a      	mov	r2, r3
 800141a:	f005 f8cb 	bl	80065b4 <memmove>
			task_queu_size -- ;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <queu_remove+0x7c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <queu_remove+0x7c>)
 8001426:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8001428:	2301      	movs	r3, #1
 800142a:	e008      	b.n	800143e <queu_remove+0x6e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <queu_remove+0x7c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3d8      	bcc.n	80013ee <queu_remove+0x1e>
		}
	}
	return FALSE ;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000690 	.word	0x20000690
 800144c:	200006a0 	.word	0x200006a0

08001450 <tasks_init>:
#include "task.h"
#include "../scheduler/scheduler.h"

static system_t * sys;

void tasks_init(system_t * sys_){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8001458:	4a09      	ldr	r2, [pc, #36]	; (8001480 <tasks_init+0x30>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_LED, TRUE);
 800145e:	2101      	movs	r1, #1
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff ff17 	bl	8001294 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_PRINTF, TRUE);
 8001466:	2101      	movs	r1, #1
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ff13 	bl	8001294 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO, TRUE);
 800146e:	2101      	movs	r1, #1
 8001470:	2002      	movs	r0, #2
 8001472:	f7ff ff0f 	bl	8001294 <SCHEDULER_enable_task>

}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200006ac 	.word	0x200006ac

08001484 <task_main_print_f>:

void task_main_print_f(uint32_t current_time_us){
 8001484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001488:	b08a      	sub	sp, #40	; 0x28
 800148a:	af06      	add	r7, sp, #24
 800148c:	6078      	str	r0, [r7, #4]
	uint8_t * data = sys->sensors.gyro.mpu->gyro_data;
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <task_main_print_f+0x78>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001494:	3312      	adds	r3, #18
 8001496:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);

	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	printf("%f\t%f\t%f\t%lu\n",sys->sensors.gyro.raw[0], sys->sensors.gyro.raw[1], sys->sensors.gyro.raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <task_main_print_f+0x78>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f851 	bl	8000548 <__aeabi_f2d>
 80014a6:	4682      	mov	sl, r0
 80014a8:	468b      	mov	fp, r1
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <task_main_print_f+0x78>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	3304      	adds	r3, #4
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	4604      	mov	r4, r0
 80014bc:	460d      	mov	r5, r1
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <task_main_print_f+0x78>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c4:	3308      	adds	r3, #8
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f83d 	bl	8000548 <__aeabi_f2d>
 80014ce:	4680      	mov	r8, r0
 80014d0:	4689      	mov	r9, r1
 80014d2:	2002      	movs	r0, #2
 80014d4:	f000 f844 	bl	8001560 <TASK_get_task>
 80014d8:	4603      	mov	r3, r0
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	9304      	str	r3, [sp, #16]
 80014de:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014e2:	e9cd 4500 	strd	r4, r5, [sp]
 80014e6:	4652      	mov	r2, sl
 80014e8:	465b      	mov	r3, fp
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <task_main_print_f+0x7c>)
 80014ec:	f005 fce0 	bl	8006eb0 <iprintf>
	//printf("%d\n", sys->sensors.gyro.mpu->gyro_raw[0]);
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014fa:	bf00      	nop
 80014fc:	200006ac 	.word	0x200006ac
 8001500:	08008e98 	.word	0x08008e98

08001504 <task_main_led>:


void task_main_led(uint32_t current_time_us){
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	LED_SEQUENCE_play(&sys->ihm.led_blue, current_time_us);
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <task_main_led+0x38>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	3338      	adds	r3, #56	; 0x38
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	f004 ffcf 	bl	80064b8 <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_red, current_time_us);
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <task_main_led+0x38>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f004 ffc9 	bl	80064b8 <LED_SEQUENCE_play>
	LED_SEQUENCE_play(&sys->ihm.led_green, current_time_us);
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <task_main_led+0x38>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	331c      	adds	r3, #28
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f004 ffc2 	bl	80064b8 <LED_SEQUENCE_play>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200006ac 	.word	0x200006ac

08001540 <task_it_gyro>:

void task_it_gyro(uint32_t current_time_us){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	GYRO_update(&sys->sensors.gyro);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <task_it_gyro+0x1c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3354      	adds	r3, #84	; 0x54
 800154e:	4618      	mov	r0, r3
 8001550:	f000 f865 	bl	800161e <GYRO_update>
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200006ac 	.word	0x200006ac

08001560 <TASK_get_task>:
		[TASK_PRINTF] = 		DEFINE_TASK(TASK_PRINTF, 			PRIORITY_HIGH, 			task_main_print_f, 			PERIOD_US_FROM_HERTZ(20)),
		[TASK_LED] = 			DEFINE_TASK(TASK_LED, 				PRIORITY_LOW,	 		task_main_led, 				PERIOD_US_FROM_HERTZ(10)),
		[TASK_GYRO] = 			DEFINE_TASK(TASK_GYRO, 				PRIORITY_HIGH,	 		task_it_gyro, 				PERIOD_US_FROM_HERTZ(20))
};

task_t * TASK_get_task(task_ids_t id){
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <TASK_get_task+0x24>)
 8001576:	4413      	add	r3, r2
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	20000000 	.word	0x20000000

08001588 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158e:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8001590:	f001 fb6c 	bl	8002c6c <HAL_GetTick>
 8001594:	4603      	mov	r3, r0
 8001596:	3301      	adds	r3, #1
 8001598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800159c:	fb02 f203 	mul.w	r2, r2, r3
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <TIME_us+0x50>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <TIME_us+0x54>)
 80015a8:	fba1 1303 	umull	r1, r3, r1, r3
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80015b2:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <TIME_us+0x58>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d803      	bhi.n	80015c6 <TIME_us+0x3e>
		t_us += 1000;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80015c4:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80015c6:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <TIME_us+0x58>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6013      	str	r3, [r2, #0]

	return t_us;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010
 80015dc:	18618619 	.word	0x18618619
 80015e0:	200006b0 	.word	0x200006b0

080015e4 <GYRO_init>:


#include "gyro.h"


sensor_state_e GYRO_init(gyro_t * gyro, mpu_t *mpu){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]

#ifdef USE_GYRO_MPU
	gyro->mpu = mpu ;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	605a      	str	r2, [r3, #4]
	gyro->raw = mpu->gyro ;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f103 0220 	add.w	r2, r3, #32
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	609a      	str	r2, [r3, #8]
	gyro->state = MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2103      	movs	r1, #3
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f8e1 	bl	80017cc <MPU_init_gyro>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	705a      	strb	r2, [r3, #1]
#else
	gyro->state = SENSOR_ERROR ;
#endif
	return gyro->state ;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	785b      	ldrb	r3, [r3, #1]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <GYRO_update>:

sensor_state_e GYRO_update(gyro_t * gyro){
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]

#ifdef USE_GYRO_MPU
	gyro->state = MPU_update_gyro(gyro->mpu);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f94a 	bl	80018c4 <MPU_update_gyro>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	705a      	strb	r2, [r3, #1]
#else
#warning gyro not defined
	gyro->state = SENSOR_ERROR ;
#endif

	return gyro->state ;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	785b      	ldrb	r3, [r3, #1]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <convert_gyro>:

#include "mpu.h"
#include "../OS/time.h"

//Private functions
void convert_gyro(mpu_t * mpu){
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[2] << 8 | mpu->gyro_data[3]);
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[4] << 8 | mpu->gyro_data[5]);

#else
	#ifdef MPU_USE_SPI
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7cdb      	ldrb	r3, [r3, #19]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7c9b      	ldrb	r3, [r3, #18]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21a      	sxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	831a      	strh	r2, [r3, #24]
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7d5b      	ldrb	r3, [r3, #21]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7d1b      	ldrb	r3, [r3, #20]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21a      	sxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	835a      	strh	r2, [r3, #26]
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7ddb      	ldrb	r3, [r3, #23]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7d9b      	ldrb	r3, [r3, #22]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21a      	sxth	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	839a      	strh	r2, [r3, #28]
	#endif
#endif
	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edc3 7a08 	vstr	s15, [r3, #32]
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80016de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <MPU_cs_lock>:

void convert_acc(mpu_t * mpu){

}

void MPU_cs_lock(mpu_t * mpu){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6898      	ldr	r0, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	899b      	ldrh	r3, [r3, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	4619      	mov	r1, r3
 8001708:	f002 fab2 	bl	8003c70 <HAL_GPIO_WritePin>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <MPU_cs_unlock>:

void MPU_cs_unlock(mpu_t * mpu){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6898      	ldr	r0, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	899b      	ldrh	r3, [r3, #12]
 8001724:	2201      	movs	r2, #1
 8001726:	4619      	mov	r1, r3
 8001728:	f002 faa2 	bl	8003c70 <HAL_GPIO_WritePin>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <MPU_init>:

/*
 *
 */
sensor_state_e MPU_init(mpu_t * mpu, I2C_HandleTypeDef * hi2c, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2201      	movs	r2, #1
 8001746:	73da      	strb	r2, [r3, #15]



	//Requiert un I2C ou SPI pour fonctionner
	if(hi2c == NULL && hspi == NULL)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d105      	bne.n	800175a <MPU_init+0x26>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <MPU_init+0x26>
		return mpu->state ;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	7bdb      	ldrb	r3, [r3, #15]
 8001758:	e033      	b.n	80017c2 <MPU_init+0x8e>

	//Application des paramètres de connexion
	mpu->hi2c = hi2c ;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	601a      	str	r2, [r3, #0]
	mpu->hspi = hspi ;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8c3a      	ldrh	r2, [r7, #32]
 800176a:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	22d0      	movs	r2, #208	; 0xd0
 8001776:	745a      	strb	r2, [r3, #17]
#ifdef MPU_USE_I2C
	uint8_t wakeup_data = 0x00 ;
	mpu->hal_state  = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
#endif
#ifdef	MPU_USE_SPI
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x00} ;
 8001778:	236b      	movs	r3, #107	; 0x6b
 800177a:	753b      	strb	r3, [r7, #20]
 800177c:	2300      	movs	r3, #0
 800177e:	757b      	strb	r3, [r7, #21]

	MPU_cs_lock(mpu);
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff ffb7 	bl	80016f4 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6858      	ldr	r0, [r3, #4]
 800178a:	f107 0114 	add.w	r1, r7, #20
 800178e:	2302      	movs	r3, #2
 8001790:	2202      	movs	r2, #2
 8001792:	f003 f85f 	bl	8004854 <HAL_SPI_Transmit>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff ffb8 	bl	8001714 <MPU_cs_unlock>
#endif

	if(mpu->hal_state != HAL_OK){
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	7b9b      	ldrb	r3, [r3, #14]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <MPU_init+0x84>
		mpu->state = SENSOR_ERROR ;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2205      	movs	r2, #5
 80017b0:	73da      	strb	r2, [r3, #15]
		return mpu->state ;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	7bdb      	ldrb	r3, [r3, #15]
 80017b6:	e004      	b.n	80017c2 <MPU_init+0x8e>
	}


	//Si on réussi tous les test, on dit qu'on est bueno
	mpu->state = SENSOR_IDDLE ;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	73da      	strb	r2, [r3, #15]
	return mpu->state ;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	7bdb      	ldrb	r3, [r3, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <MPU_init_gyro>:

/*
 *
 */
sensor_state_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	70fb      	strb	r3, [r7, #3]
	mpu->gyro_range = gyro_range ;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	78fa      	ldrb	r2, [r7, #3]
 80017dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7bdb      	ldrb	r3, [r3, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MPU_init_gyro+0x20>
		return SENSOR_ERROR ;
 80017e8:	2305      	movs	r3, #5
 80017ea:	e05f      	b.n	80018ac <MPU_init_gyro+0xe0>
		mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);

#else
	#ifdef MPU_USE_SPI
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 80017ec:	239b      	movs	r3, #155	; 0x9b
 80017ee:	733b      	strb	r3, [r7, #12]
	MPU_cs_lock(mpu);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff7f 	bl	80016f4 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, &temp[1], 1, 2);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6858      	ldr	r0, [r3, #4]
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	f107 010c 	add.w	r1, r7, #12
 8001804:	2302      	movs	r3, #2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2301      	movs	r3, #1
 800180a:	f003 f957 	bl	8004abc <HAL_SPI_TransmitReceive>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7b9b      	ldrb	r3, [r3, #14]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <MPU_init_gyro+0x86>
		temp[0] = MPU6050_GYRO_CONFIG ;
 800181e:	231b      	movs	r3, #27
 8001820:	733b      	strb	r3, [r7, #12]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8001822:	7b7b      	ldrb	r3, [r7, #13]
 8001824:	b25b      	sxtb	r3, r3
 8001826:	f023 0318 	bic.w	r3, r3, #24
 800182a:	b25a      	sxtb	r2, r3
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	b25b      	sxtb	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b25b      	sxtb	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	737b      	strb	r3, [r7, #13]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  1, 2);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6858      	ldr	r0, [r3, #4]
 800183e:	f107 010c 	add.w	r1, r7, #12
 8001842:	2302      	movs	r3, #2
 8001844:	2201      	movs	r2, #1
 8001846:	f003 f805 	bl	8004854 <HAL_SPI_Transmit>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	739a      	strb	r2, [r3, #14]
	}
	MPU_cs_unlock(mpu);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ff5e 	bl	8001714 <MPU_cs_unlock>

	#endif
#endif

	if(mpu->hal_state != HAL_OK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7b9b      	ldrb	r3, [r3, #14]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <MPU_init_gyro+0x9e>
	{
		mpu->state = SENSOR_ERROR ;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2205      	movs	r2, #5
 8001864:	73da      	strb	r2, [r3, #15]
		return SENSOR_ERROR ;
 8001866:	2305      	movs	r3, #5
 8001868:	e020      	b.n	80018ac <MPU_init_gyro+0xe0>
	}

	switch(gyro_range){
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d81b      	bhi.n	80018a8 <MPU_init_gyro+0xdc>
 8001870:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <MPU_init_gyro+0xac>)
 8001872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001876:	bf00      	nop
 8001878:	08001889 	.word	0x08001889
 800187c:	08001891 	.word	0x08001891
 8001880:	08001899 	.word	0x08001899
 8001884:	080018a1 	.word	0x080018a1
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <MPU_init_gyro+0xe8>)
 800188c:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800188e:	e00b      	b.n	80018a8 <MPU_init_gyro+0xdc>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <MPU_init_gyro+0xec>)
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8001896:	e007      	b.n	80018a8 <MPU_init_gyro+0xdc>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <MPU_init_gyro+0xf0>)
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 800189e:	e003      	b.n	80018a8 <MPU_init_gyro+0xdc>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <MPU_init_gyro+0xf4>)
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 80018a6:	bf00      	nop
	}
	return mpu->state ;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7bdb      	ldrb	r3, [r3, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	3bfa232d 	.word	0x3bfa232d
 80018b8:	3c7a232d 	.word	0x3c7a232d
 80018bc:	3cf9c190 	.word	0x3cf9c190
 80018c0:	3d79c190 	.word	0x3d79c190

080018c4 <MPU_update_gyro>:
}

/*
 *
 */
sensor_state_e MPU_update_gyro(mpu_t * mpu){
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]

	//On réserve le mpu
	if(mpu->state != SENSOR_IDDLE){
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7bdb      	ldrb	r3, [r3, #15]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MPU_update_gyro+0x14>
		return SENSOR_ERROR ;
 80018d4:	2305      	movs	r3, #5
 80018d6:	e02b      	b.n	8001930 <MPU_update_gyro+0x6c>
	//Update des valeurs
#ifdef MPU_USE_I2C	//Lecture en i2C
	mpu->hal_state = HAL_I2C_Mem_Read(mpu->hi2c, mpu->adresse, MPU6050_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, mpu->gyro_data, 6, 5);
#else
	#ifdef MPU_USE_SPI
		uint8_t registers [] = {MPU6050_GYRO_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 80018d8:	23c3      	movs	r3, #195	; 0xc3
 80018da:	723b      	strb	r3, [r7, #8]
 80018dc:	2300      	movs	r3, #0
 80018de:	727b      	strb	r3, [r7, #9]
 80018e0:	2300      	movs	r3, #0
 80018e2:	72bb      	strb	r3, [r7, #10]
 80018e4:	2300      	movs	r3, #0
 80018e6:	72fb      	strb	r3, [r7, #11]
 80018e8:	2300      	movs	r3, #0
 80018ea:	733b      	strb	r3, [r7, #12]
 80018ec:	2300      	movs	r3, #0
 80018ee:	737b      	strb	r3, [r7, #13]
		MPU_cs_lock(mpu);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff feff 	bl	80016f4 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->gyro_data, 6, 10);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6858      	ldr	r0, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f103 0212 	add.w	r2, r3, #18
 8001900:	f107 0108 	add.w	r1, r7, #8
 8001904:	230a      	movs	r3, #10
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2306      	movs	r3, #6
 800190a:	f003 f8d7 	bl	8004abc <HAL_SPI_TransmitReceive>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fefc 	bl	8001714 <MPU_cs_unlock>
		return SENSOR_ERROR ;
	#endif
#endif


	if(mpu->hal_state != HAL_OK){
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7b9b      	ldrb	r3, [r3, #14]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MPU_update_gyro+0x64>
		return SENSOR_ERROR ;
 8001924:	2305      	movs	r3, #5
 8001926:	e003      	b.n	8001930 <MPU_update_gyro+0x6c>
	}

	//Convertion des valeurs
	convert_gyro(mpu);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fe8b 	bl	8001644 <convert_gyro>
	return SENSOR_IDDLE ;
 800192e:	2300      	movs	r3, #0

}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <MX_ADC2_Init+0x98>)
 800194c:	4a21      	ldr	r2, [pc, #132]	; (80019d4 <MX_ADC2_Init+0x9c>)
 800194e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <MX_ADC2_Init+0x98>)
 8001952:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001956:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <MX_ADC2_Init+0x98>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <MX_ADC2_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_ADC2_Init+0x98>)
 8001966:	2200      	movs	r2, #0
 8001968:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800196a:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <MX_ADC2_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_ADC2_Init+0x98>)
 8001974:	2200      	movs	r2, #0
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_ADC2_Init+0x98>)
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <MX_ADC2_Init+0xa0>)
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_ADC2_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_ADC2_Init+0x98>)
 8001986:	2201      	movs	r2, #1
 8001988:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_ADC2_Init+0x98>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001992:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_ADC2_Init+0x98>)
 8001994:	2201      	movs	r2, #1
 8001996:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <MX_ADC2_Init+0x98>)
 800199a:	f001 f973 	bl	8002c84 <HAL_ADC_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80019a4:	f000 fb66 	bl	8002074 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80019a8:	230b      	movs	r3, #11
 80019aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019b4:	463b      	mov	r3, r7
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_ADC2_Init+0x98>)
 80019ba:	f001 f9a7 	bl	8002d0c <HAL_ADC_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80019c4:	f000 fb56 	bl	8002074 <Error_Handler>
  }

}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200006c4 	.word	0x200006c4
 80019d4:	40012100 	.word	0x40012100
 80019d8:	0f000001 	.word	0x0f000001

080019dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a3c      	ldr	r2, [pc, #240]	; (8001aec <HAL_ADC_MspInit+0x110>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d171      	bne.n	8001ae2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a3a      	ldr	r2, [pc, #232]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a33      	ldr	r2, [pc, #204]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a2c      	ldr	r2, [pc, #176]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <HAL_ADC_MspInit+0x114>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8001a52:	2302      	movs	r3, #2
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	2303      	movs	r3, #3
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4823      	ldr	r0, [pc, #140]	; (8001af4 <HAL_ADC_MspInit+0x118>)
 8001a66:	f001 ff69 	bl	800393c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481e      	ldr	r0, [pc, #120]	; (8001af8 <HAL_ADC_MspInit+0x11c>)
 8001a7e:	f001 ff5d 	bl	800393c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_ADC_MspInit+0x124>)
 8001a86:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a8e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001aa4:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aaa:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ac8:	f001 fc50 	bl	800336c <HAL_DMA_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001ad2:	f000 facf 	bl	8002074 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ada:	639a      	str	r2, [r3, #56]	; 0x38
 8001adc:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_ADC_MspInit+0x120>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40012100 	.word	0x40012100
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020400 	.word	0x40020400
 8001afc:	2000070c 	.word	0x2000070c
 8001b00:	40026440 	.word	0x40026440

08001b04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <MX_DMA_Init+0xd8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <MX_DMA_Init+0xd8>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <MX_DMA_Init+0xd8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <MX_DMA_Init+0xd8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a2b      	ldr	r2, [pc, #172]	; (8001bdc <MX_DMA_Init+0xd8>)
 8001b30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <MX_DMA_Init+0xd8>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	200b      	movs	r0, #11
 8001b48:	f001 fbd9 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b4c:	200b      	movs	r0, #11
 8001b4e:	f001 fbf2 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	200e      	movs	r0, #14
 8001b58:	f001 fbd1 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b5c:	200e      	movs	r0, #14
 8001b5e:	f001 fbea 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	200f      	movs	r0, #15
 8001b68:	f001 fbc9 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001b6c:	200f      	movs	r0, #15
 8001b6e:	f001 fbe2 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2011      	movs	r0, #17
 8001b78:	f001 fbc1 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b7c:	2011      	movs	r0, #17
 8001b7e:	f001 fbda 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	202f      	movs	r0, #47	; 0x2f
 8001b88:	f001 fbb9 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001b8c:	202f      	movs	r0, #47	; 0x2f
 8001b8e:	f001 fbd2 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2038      	movs	r0, #56	; 0x38
 8001b98:	f001 fbb1 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b9c:	2038      	movs	r0, #56	; 0x38
 8001b9e:	f001 fbca 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	203a      	movs	r0, #58	; 0x3a
 8001ba8:	f001 fba9 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001bac:	203a      	movs	r0, #58	; 0x3a
 8001bae:	f001 fbc2 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	203b      	movs	r0, #59	; 0x3b
 8001bb8:	f001 fba1 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001bbc:	203b      	movs	r0, #59	; 0x3b
 8001bbe:	f001 fbba 	bl	8003336 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2045      	movs	r0, #69	; 0x45
 8001bc8:	f001 fb99 	bl	80032fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001bcc:	2045      	movs	r0, #69	; 0x45
 8001bce:	f001 fbb2 	bl	8003336 <HAL_NVIC_EnableIRQ>

}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	; 0x28
 8001be4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
 8001bf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a3c      	ldr	r2, [pc, #240]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a35      	ldr	r2, [pc, #212]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a2e      	ldr	r2, [pc, #184]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <MX_GPIO_Init+0x12c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8001c66:	2200      	movs	r2, #0
 8001c68:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8001c6c:	4828      	ldr	r0, [pc, #160]	; (8001d10 <MX_GPIO_Init+0x130>)
 8001c6e:	f001 ffff 	bl	8003c70 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8001c72:	2201      	movs	r2, #1
 8001c74:	2101      	movs	r1, #1
 8001c76:	4826      	ldr	r0, [pc, #152]	; (8001d10 <MX_GPIO_Init+0x130>)
 8001c78:	f001 fffa 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4824      	ldr	r0, [pc, #144]	; (8001d14 <MX_GPIO_Init+0x134>)
 8001c82:	f001 fff5 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8c:	4822      	ldr	r0, [pc, #136]	; (8001d18 <MX_GPIO_Init+0x138>)
 8001c8e:	f001 ffef 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8001c92:	f24e 231d 	movw	r3, #57885	; 0xe21d
 8001c96:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4819      	ldr	r0, [pc, #100]	; (8001d10 <MX_GPIO_Init+0x130>)
 8001cac:	f001 fe46 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4813      	ldr	r0, [pc, #76]	; (8001d14 <MX_GPIO_Init+0x134>)
 8001cc8:	f001 fe38 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_GPIO_Init+0x134>)
 8001ce0:	f001 fe2c 	bl	800393c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8001ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_GPIO_Init+0x138>)
 8001cfe:	f001 fe1d 	bl	800393c <HAL_GPIO_Init>

}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	; 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020800 	.word	0x40020800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400

08001d1c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <MX_I2C1_Init+0x54>)
 8001d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_I2C1_Init+0x58>)
 8001d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d5a:	f001 ffa3 	bl	8003ca4 <HAL_I2C_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d64:	f000 f986 	bl	8002074 <Error_Handler>
  }

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200007cc 	.word	0x200007cc
 8001d70:	40005400 	.word	0x40005400
 8001d74:	00061a80 	.word	0x00061a80

08001d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a47      	ldr	r2, [pc, #284]	; (8001eb4 <HAL_I2C_MspInit+0x13c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	f040 8088 	bne.w	8001eac <HAL_I2C_MspInit+0x134>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <HAL_I2C_MspInit+0x140>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a44      	ldr	r2, [pc, #272]	; (8001eb8 <HAL_I2C_MspInit+0x140>)
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b42      	ldr	r3, [pc, #264]	; (8001eb8 <HAL_I2C_MspInit+0x140>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	483a      	ldr	r0, [pc, #232]	; (8001ebc <HAL_I2C_MspInit+0x144>)
 8001dd4:	f001 fdb2 	bl	800393c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_I2C_MspInit+0x140>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a35      	ldr	r2, [pc, #212]	; (8001eb8 <HAL_I2C_MspInit+0x140>)
 8001de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_I2C_MspInit+0x140>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001df4:	4b32      	ldr	r3, [pc, #200]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001df6:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <HAL_I2C_MspInit+0x14c>)
 8001df8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001dfa:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e00:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e02:	4b2f      	ldr	r3, [pc, #188]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e14:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e1c:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001e22:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001e34:	4822      	ldr	r0, [pc, #136]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e36:	f001 fa99 	bl	800336c <HAL_DMA_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001e40:	f000 f918 	bl	8002074 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_I2C_MspInit+0x148>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e52:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_I2C_MspInit+0x154>)
 8001e54:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e5c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e70:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001e92:	f001 fa6b 	bl	800336c <HAL_DMA_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001e9c:	f000 f8ea 	bl	8002074 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <HAL_I2C_MspInit+0x150>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020400 	.word	0x40020400
 8001ec0:	20000820 	.word	0x20000820
 8001ec4:	40026010 	.word	0x40026010
 8001ec8:	2000076c 	.word	0x2000076c
 8001ecc:	400260b8 	.word	0x400260b8

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed6:	f000 fe63 	bl	8002ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eda:	f000 f861 	bl	8001fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ede:	f7ff fe7f 	bl	8001be0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee2:	f7ff fe0f 	bl	8001b04 <MX_DMA_Init>
  MX_I2C1_Init();
 8001ee6:	f7ff ff19 	bl	8001d1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001eea:	f000 f8cb 	bl	8002084 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001eee:	f000 f8ff 	bl	80020f0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001ef2:	f000 fb75 	bl	80025e0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001ef6:	f000 fc93 	bl	8002820 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001efa:	f000 fcbb 	bl	8002874 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001efe:	f000 fce3 	bl	80028c8 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8001f02:	f7ff fd19 	bl	8001938 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  MPU_init(&sys.sensors.mpu, NULL, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8001f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <main+0xb0>)
 8001f0e:	4a1d      	ldr	r2, [pc, #116]	; (8001f84 <main+0xb4>)
 8001f10:	2100      	movs	r1, #0
 8001f12:	481d      	ldr	r0, [pc, #116]	; (8001f88 <main+0xb8>)
 8001f14:	f7ff fc0e 	bl	8001734 <MPU_init>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 8001f18:	491b      	ldr	r1, [pc, #108]	; (8001f88 <main+0xb8>)
 8001f1a:	481c      	ldr	r0, [pc, #112]	; (8001f8c <main+0xbc>)
 8001f1c:	f7ff fb62 	bl	80015e4 <GYRO_init>

  LED_SEQUENCE_init(&sys.ihm.led_blue, PIN_LED_BLUE_GPIO_Port, PIN_LED_BLUE_Pin, SEQUENCE_LED_1, 200, 12, 1);
 8001f20:	2301      	movs	r3, #1
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	230c      	movs	r3, #12
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	23c8      	movs	r3, #200	; 0xc8
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	f640 2328 	movw	r3, #2600	; 0xa28
 8001f30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f34:	4916      	ldr	r1, [pc, #88]	; (8001f90 <main+0xc0>)
 8001f36:	4817      	ldr	r0, [pc, #92]	; (8001f94 <main+0xc4>)
 8001f38:	f004 fa90 	bl	800645c <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_red, PIN_LED_RED_GPIO_Port, PIN_LED_RED_Pin, SEQUENCE_LED_2, 200, 12, 1);
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	230c      	movs	r3, #12
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	23c8      	movs	r3, #200	; 0xc8
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f640 23bc 	movw	r3, #2748	; 0xabc
 8001f4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f50:	490f      	ldr	r1, [pc, #60]	; (8001f90 <main+0xc0>)
 8001f52:	4811      	ldr	r0, [pc, #68]	; (8001f98 <main+0xc8>)
 8001f54:	f004 fa82 	bl	800645c <LED_SEQUENCE_init>
  LED_SEQUENCE_init(&sys.ihm.led_green, PIN_LED_GREEN_GPIO_Port, PIN_LED_GREEN_Pin, SEQUENCE_LED_3, 200, 12, 1);
 8001f58:	2301      	movs	r3, #1
 8001f5a:	9302      	str	r3, [sp, #8]
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	23c8      	movs	r3, #200	; 0xc8
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8001f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6c:	4908      	ldr	r1, [pc, #32]	; (8001f90 <main+0xc0>)
 8001f6e:	480b      	ldr	r0, [pc, #44]	; (8001f9c <main+0xcc>)
 8001f70:	f004 fa74 	bl	800645c <LED_SEQUENCE_init>

  SCHEDULER_init(&sys);
 8001f74:	4808      	ldr	r0, [pc, #32]	; (8001f98 <main+0xc8>)
 8001f76:	f7ff f869 	bl	800104c <SCHEDULER_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 8001f7a:	f7ff f879 	bl	8001070 <SCHEDULER_run>
 8001f7e:	e7fc      	b.n	8001f7a <main+0xaa>
 8001f80:	40020400 	.word	0x40020400
 8001f84:	2000094c 	.word	0x2000094c
 8001f88:	200008ec 	.word	0x200008ec
 8001f8c:	200008d4 	.word	0x200008d4
 8001f90:	40020800 	.word	0x40020800
 8001f94:	200008b8 	.word	0x200008b8
 8001f98:	20000880 	.word	0x20000880
 8001f9c:	2000089c 	.word	0x2000089c

08001fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b094      	sub	sp, #80	; 0x50
 8001fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	2230      	movs	r2, #48	; 0x30
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f004 fb19 	bl	80065e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <SystemClock_Config+0xcc>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <SystemClock_Config+0xcc>)
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <SystemClock_Config+0xcc>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <SystemClock_Config+0xd0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <SystemClock_Config+0xd0>)
 8001fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <SystemClock_Config+0xd0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002004:	2310      	movs	r3, #16
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002008:	2302      	movs	r3, #2
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800200c:	2300      	movs	r3, #0
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002010:	2308      	movs	r3, #8
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002014:	23a8      	movs	r3, #168	; 0xa8
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002018:	2302      	movs	r3, #2
 800201a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800201c:	2304      	movs	r3, #4
 800201e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	4618      	mov	r0, r3
 8002026:	f001 ff75 	bl	8003f14 <HAL_RCC_OscConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002030:	f000 f820 	bl	8002074 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002034:	230f      	movs	r3, #15
 8002036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002038:	2302      	movs	r3, #2
 800203a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002040:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2105      	movs	r1, #5
 8002052:	4618      	mov	r0, r3
 8002054:	f002 f9ce 	bl	80043f4 <HAL_RCC_ClockConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800205e:	f000 f809 	bl	8002074 <Error_Handler>
  }
}
 8002062:	bf00      	nop
 8002064:	3750      	adds	r7, #80	; 0x50
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40007000 	.word	0x40007000

08002074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_SPI1_Init+0x64>)
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <MX_SPI1_Init+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_SPI1_Init+0x64>)
 8002090:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002094:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_SPI1_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <MX_SPI1_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80020b6:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020b8:	2220      	movs	r2, #32
 80020ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020be:	2200      	movs	r2, #0
 80020c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020d0:	220a      	movs	r2, #10
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_SPI1_Init+0x64>)
 80020d6:	f002 fb59 	bl	800478c <HAL_SPI_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020e0:	f7ff ffc8 	bl	8002074 <Error_Handler>
  }

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000a04 	.word	0x20000a04
 80020ec:	40013000 	.word	0x40013000

080020f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <MX_SPI2_Init+0x64>)
 80020f6:	4a18      	ldr	r2, [pc, #96]	; (8002158 <MX_SPI2_Init+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020fa:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_SPI2_Init+0x64>)
 80020fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002100:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <MX_SPI2_Init+0x64>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002108:	4b12      	ldr	r3, [pc, #72]	; (8002154 <MX_SPI2_Init+0x64>)
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210e:	4b11      	ldr	r3, [pc, #68]	; (8002154 <MX_SPI2_Init+0x64>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <MX_SPI2_Init+0x64>)
 8002116:	2200      	movs	r2, #0
 8002118:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <MX_SPI2_Init+0x64>)
 800211c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002120:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <MX_SPI2_Init+0x64>)
 8002124:	2208      	movs	r2, #8
 8002126:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <MX_SPI2_Init+0x64>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <MX_SPI2_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <MX_SPI2_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MX_SPI2_Init+0x64>)
 800213c:	220a      	movs	r2, #10
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	; (8002154 <MX_SPI2_Init+0x64>)
 8002142:	f002 fb23 	bl	800478c <HAL_SPI_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800214c:	f7ff ff92 	bl	8002074 <Error_Handler>
  }

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000094c 	.word	0x2000094c
 8002158:	40003800 	.word	0x40003800

0800215c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a8e      	ldr	r2, [pc, #568]	; (80023b4 <HAL_SPI_MspInit+0x258>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f040 8089 	bne.w	8002292 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	4b8c      	ldr	r3, [pc, #560]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	4a8b      	ldr	r2, [pc, #556]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 800218a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800218e:	6453      	str	r3, [r2, #68]	; 0x44
 8002190:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	61bb      	str	r3, [r7, #24]
 800219a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	4b85      	ldr	r3, [pc, #532]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a84      	ldr	r2, [pc, #528]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6313      	str	r3, [r2, #48]	; 0x30
 80021ac:	4b82      	ldr	r3, [pc, #520]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021b8:	23e0      	movs	r3, #224	; 0xe0
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c8:	2305      	movs	r3, #5
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	487a      	ldr	r0, [pc, #488]	; (80023bc <HAL_SPI_MspInit+0x260>)
 80021d4:	f001 fbb2 	bl	800393c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80021d8:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 80021da:	4a7a      	ldr	r2, [pc, #488]	; (80023c4 <HAL_SPI_MspInit+0x268>)
 80021dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 80021e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80021e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ec:	4b74      	ldr	r3, [pc, #464]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 80021f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002206:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 800220e:	2200      	movs	r2, #0
 8002210:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002212:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002218:	4869      	ldr	r0, [pc, #420]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 800221a:	f001 f8a7 	bl	800336c <HAL_DMA_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8002224:	f7ff ff26 	bl	8002074 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a65      	ldr	r2, [pc, #404]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 800222c:	64da      	str	r2, [r3, #76]	; 0x4c
 800222e:	4a64      	ldr	r2, [pc, #400]	; (80023c0 <HAL_SPI_MspInit+0x264>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002234:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002236:	4a65      	ldr	r2, [pc, #404]	; (80023cc <HAL_SPI_MspInit+0x270>)
 8002238:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800223a:	4b63      	ldr	r3, [pc, #396]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 800223c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002240:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002242:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800224e:	4b5e      	ldr	r3, [pc, #376]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002254:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002256:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800225c:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 800225e:	2200      	movs	r2, #0
 8002260:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002262:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002264:	2200      	movs	r2, #0
 8002266:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002268:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 800226a:	2200      	movs	r2, #0
 800226c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002274:	4854      	ldr	r0, [pc, #336]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002276:	f001 f879 	bl	800336c <HAL_DMA_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002280:	f7ff fef8 	bl	8002074 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a50      	ldr	r2, [pc, #320]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 8002288:	649a      	str	r2, [r3, #72]	; 0x48
 800228a:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_SPI_MspInit+0x26c>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002290:	e08c      	b.n	80023ac <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a4e      	ldr	r2, [pc, #312]	; (80023d0 <HAL_SPI_MspInit+0x274>)
 8002298:	4293      	cmp	r3, r2
 800229a:	f040 8087 	bne.w	80023ac <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	4a44      	ldr	r2, [pc, #272]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6413      	str	r3, [r2, #64]	; 0x40
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b3e      	ldr	r3, [pc, #248]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a3d      	ldr	r2, [pc, #244]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <HAL_SPI_MspInit+0x25c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80022da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022e8:	2305      	movs	r3, #5
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4838      	ldr	r0, [pc, #224]	; (80023d4 <HAL_SPI_MspInit+0x278>)
 80022f4:	f001 fb22 	bl	800393c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80022f8:	4b37      	ldr	r3, [pc, #220]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 80022fa:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_SPI_MspInit+0x280>)
 80022fc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 8002312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002316:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800232a:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002330:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002336:	4828      	ldr	r0, [pc, #160]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 8002338:	f001 f818 	bl	800336c <HAL_DMA_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 8002342:	f7ff fe97 	bl	8002074 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 800234a:	64da      	str	r2, [r3, #76]	; 0x4c
 800234c:	4a22      	ldr	r2, [pc, #136]	; (80023d8 <HAL_SPI_MspInit+0x27c>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 8002354:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <HAL_SPI_MspInit+0x288>)
 8002356:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 800235a:	2200      	movs	r2, #0
 800235c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 800236c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002370:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 8002380:	2200      	movs	r2, #0
 8002382:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 8002386:	2200      	movs	r2, #0
 8002388:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002390:	4813      	ldr	r0, [pc, #76]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 8002392:	f000 ffeb 	bl	800336c <HAL_DMA_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 800239c:	f7ff fe6a 	bl	8002074 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 80023a4:	649a      	str	r2, [r3, #72]	; 0x48
 80023a6:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <HAL_SPI_MspInit+0x284>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023ac:	bf00      	nop
 80023ae:	3730      	adds	r7, #48	; 0x30
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40013000 	.word	0x40013000
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020000 	.word	0x40020000
 80023c0:	20000a5c 	.word	0x20000a5c
 80023c4:	40026410 	.word	0x40026410
 80023c8:	20000b1c 	.word	0x20000b1c
 80023cc:	40026458 	.word	0x40026458
 80023d0:	40003800 	.word	0x40003800
 80023d4:	40020400 	.word	0x40020400
 80023d8:	200009a4 	.word	0x200009a4
 80023dc:	40026058 	.word	0x40026058
 80023e0:	20000abc 	.word	0x20000abc
 80023e4:	40026070 	.word	0x40026070

080023e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <HAL_MspInit+0x4c>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <HAL_MspInit+0x4c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	; 0x40
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <HardFault_Handler+0x4>

0800244c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <MemManage_Handler+0x4>

08002452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <BusFault_Handler+0x4>

08002458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <UsageFault_Handler+0x4>

0800245e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800248c:	f000 fbda 	bl	8002c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA1_Stream0_IRQHandler+0x10>)
 800249a:	f001 f815 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000820 	.word	0x20000820

080024a8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <DMA1_Stream3_IRQHandler+0x10>)
 80024ae:	f001 f80b 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200009a4 	.word	0x200009a4

080024bc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <DMA1_Stream4_IRQHandler+0x10>)
 80024c2:	f001 f801 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000abc 	.word	0x20000abc

080024d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA1_Stream6_IRQHandler+0x10>)
 80024d6:	f000 fff7 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20000c5c 	.word	0x20000c5c

080024e4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <DMA1_Stream7_IRQHandler+0x10>)
 80024ea:	f000 ffed 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000076c 	.word	0x2000076c

080024f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80024fc:	4802      	ldr	r0, [pc, #8]	; (8002508 <DMA2_Stream0_IRQHandler+0x10>)
 80024fe:	f000 ffe3 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000a5c 	.word	0x20000a5c

0800250c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <DMA2_Stream2_IRQHandler+0x10>)
 8002512:	f000 ffd9 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000070c 	.word	0x2000070c

08002520 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <DMA2_Stream3_IRQHandler+0x10>)
 8002526:	f000 ffcf 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000b1c 	.word	0x20000b1c

08002534 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <DMA2_Stream6_IRQHandler+0x10>)
 800253a:	f000 ffc5 	bl	80034c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000bfc 	.word	0x20000bfc

08002548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <_sbrk+0x5c>)
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <_sbrk+0x60>)
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_sbrk+0x64>)
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <_sbrk+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002578:	f003 fff2 	bl	8006560 <__errno>
 800257c:	4602      	mov	r2, r0
 800257e:	230c      	movs	r3, #12
 8002580:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e009      	b.n	800259c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_sbrk+0x64>)
 8002598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20020000 	.word	0x20020000
 80025a8:	00000400 	.word	0x00000400
 80025ac:	200006b4 	.word	0x200006b4
 80025b0:	20000d48 	.word	0x20000d48

080025b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <SystemInit+0x28>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <SystemInit+0x28>)
 80025c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025c8:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SystemInit+0x28>)
 80025ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ce:	609a      	str	r2, [r3, #8]
#endif
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b096      	sub	sp, #88	; 0x58
 80025e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	609a      	str	r2, [r3, #8]
 800260a:	60da      	str	r2, [r3, #12]
 800260c:	611a      	str	r2, [r3, #16]
 800260e:	615a      	str	r2, [r3, #20]
 8002610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2220      	movs	r2, #32
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f003 ffe4 	bl	80065e6 <memset>

  htim1.Instance = TIM1;
 800261e:	4b50      	ldr	r3, [pc, #320]	; (8002760 <MX_TIM1_Init+0x180>)
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <MX_TIM1_Init+0x184>)
 8002622:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <MX_TIM1_Init+0x180>)
 8002626:	2200      	movs	r2, #0
 8002628:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262a:	4b4d      	ldr	r3, [pc, #308]	; (8002760 <MX_TIM1_Init+0x180>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <MX_TIM1_Init+0x180>)
 8002632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002636:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002638:	4b49      	ldr	r3, [pc, #292]	; (8002760 <MX_TIM1_Init+0x180>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800263e:	4b48      	ldr	r3, [pc, #288]	; (8002760 <MX_TIM1_Init+0x180>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002644:	4b46      	ldr	r3, [pc, #280]	; (8002760 <MX_TIM1_Init+0x180>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800264a:	4845      	ldr	r0, [pc, #276]	; (8002760 <MX_TIM1_Init+0x180>)
 800264c:	f002 fc84 	bl	8004f58 <HAL_TIM_Base_Init>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002656:	f7ff fd0d 	bl	8002074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800265e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002660:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002664:	4619      	mov	r1, r3
 8002666:	483e      	ldr	r0, [pc, #248]	; (8002760 <MX_TIM1_Init+0x180>)
 8002668:	f002 fd36 	bl	80050d8 <HAL_TIM_ConfigClockSource>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002672:	f7ff fcff 	bl	8002074 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002676:	483a      	ldr	r0, [pc, #232]	; (8002760 <MX_TIM1_Init+0x180>)
 8002678:	f002 fc99 	bl	8004fae <HAL_TIM_OC_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002682:	f7ff fcf7 	bl	8002074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002692:	4619      	mov	r1, r3
 8002694:	4832      	ldr	r0, [pc, #200]	; (8002760 <MX_TIM1_Init+0x180>)
 8002696:	f003 f8c1 	bl	800581c <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80026a0:	f7ff fce8 	bl	8002074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c4:	2200      	movs	r2, #0
 80026c6:	4619      	mov	r1, r3
 80026c8:	4825      	ldr	r0, [pc, #148]	; (8002760 <MX_TIM1_Init+0x180>)
 80026ca:	f002 fca5 	bl	8005018 <HAL_TIM_OC_ConfigChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80026d4:	f7ff fcce 	bl	8002074 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026dc:	2204      	movs	r2, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	481f      	ldr	r0, [pc, #124]	; (8002760 <MX_TIM1_Init+0x180>)
 80026e2:	f002 fc99 	bl	8005018 <HAL_TIM_OC_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80026ec:	f7ff fcc2 	bl	8002074 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f4:	2208      	movs	r2, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	4819      	ldr	r0, [pc, #100]	; (8002760 <MX_TIM1_Init+0x180>)
 80026fa:	f002 fc8d 	bl	8005018 <HAL_TIM_OC_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002704:	f7ff fcb6 	bl	8002074 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270c:	220c      	movs	r2, #12
 800270e:	4619      	mov	r1, r3
 8002710:	4813      	ldr	r0, [pc, #76]	; (8002760 <MX_TIM1_Init+0x180>)
 8002712:	f002 fc81 	bl	8005018 <HAL_TIM_OC_ConfigChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800271c:	f7ff fcaa 	bl	8002074 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002738:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800273e:	1d3b      	adds	r3, r7, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <MX_TIM1_Init+0x180>)
 8002744:	f003 f8e6 	bl	8005914 <HAL_TIMEx_ConfigBreakDeadTime>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800274e:	f7ff fc91 	bl	8002074 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002752:	4803      	ldr	r0, [pc, #12]	; (8002760 <MX_TIM1_Init+0x180>)
 8002754:	f000 f82a 	bl	80027ac <HAL_TIM_MspPostInit>

}
 8002758:	bf00      	nop
 800275a:	3758      	adds	r7, #88	; 0x58
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000b7c 	.word	0x20000b7c
 8002764:	40010000 	.word	0x40010000

08002768 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_TIM_Base_MspInit+0x3c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10d      	bne.n	8002796 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_TIM_Base_MspInit+0x40>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a09      	ldr	r2, [pc, #36]	; (80027a8 <HAL_TIM_Base_MspInit+0x40>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_TIM_Base_MspInit+0x40>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40010000 	.word	0x40010000
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a12      	ldr	r2, [pc, #72]	; (8002814 <HAL_TIM_MspPostInit+0x68>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d11e      	bne.n	800280c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_TIM_MspPostInit+0x6c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_TIM_MspPostInit+0x6c>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_TIM_MspPostInit+0x6c>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80027ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80027ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	4619      	mov	r1, r3
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <HAL_TIM_MspPostInit+0x70>)
 8002808:	f001 f898 	bl	800393c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3720      	adds	r7, #32
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40010000 	.word	0x40010000
 8002818:	40023800 	.word	0x40023800
 800281c:	40020000 	.word	0x40020000

08002820 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_USART2_UART_Init+0x4c>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <MX_USART2_UART_Init+0x50>)
 8002828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <MX_USART2_UART_Init+0x4c>)
 800282c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_USART2_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_USART2_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_USART2_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_USART2_UART_Init+0x4c>)
 8002846:	220c      	movs	r2, #12
 8002848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_USART2_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_USART2_UART_Init+0x4c>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_USART2_UART_Init+0x4c>)
 8002858:	f003 f8ae 	bl	80059b8 <HAL_UART_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002862:	f7ff fc07 	bl	8002074 <Error_Handler>
  }

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000cfc 	.word	0x20000cfc
 8002870:	40004400 	.word	0x40004400

08002874 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <MX_USART3_UART_Init+0x50>)
 800287c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 8002880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_USART3_UART_Init+0x4c>)
 80028ac:	f003 f884 	bl	80059b8 <HAL_UART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028b6:	f7ff fbdd 	bl	8002074 <Error_Handler>
  }

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000bbc 	.word	0x20000bbc
 80028c4:	40004800 	.word	0x40004800

080028c8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_USART6_UART_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028d4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80028d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_USART6_UART_Init+0x4c>)
 8002900:	f003 f85a 	bl	80059b8 <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800290a:	f7ff fbb3 	bl	8002074 <Error_Handler>
  }

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000cbc 	.word	0x20000cbc
 8002918:	40011400 	.word	0x40011400

0800291c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_UART_MspInit+0x204>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d15a      	bne.n	80029f4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	623b      	str	r3, [r7, #32]
 8002942:	4b78      	ldr	r3, [pc, #480]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a77      	ldr	r2, [pc, #476]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b75      	ldr	r3, [pc, #468]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	623b      	str	r3, [r7, #32]
 8002958:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	4b71      	ldr	r3, [pc, #452]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a70      	ldr	r2, [pc, #448]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b6e      	ldr	r3, [pc, #440]	; (8002b24 <HAL_UART_MspInit+0x208>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002976:	230c      	movs	r3, #12
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002986:	2307      	movs	r3, #7
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800298e:	4619      	mov	r1, r3
 8002990:	4865      	ldr	r0, [pc, #404]	; (8002b28 <HAL_UART_MspInit+0x20c>)
 8002992:	f000 ffd3 	bl	800393c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_UART_MspInit+0x210>)
 8002998:	4a65      	ldr	r2, [pc, #404]	; (8002b30 <HAL_UART_MspInit+0x214>)
 800299a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800299c:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_UART_MspInit+0x210>)
 800299e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a4:	4b61      	ldr	r3, [pc, #388]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029aa:	4b60      	ldr	r3, [pc, #384]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b8:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029be:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029ca:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d0:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80029d6:	4855      	ldr	r0, [pc, #340]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029d8:	f000 fcc8 	bl	800336c <HAL_DMA_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80029e2:	f7ff fb47 	bl	8002074 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a50      	ldr	r2, [pc, #320]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
 80029ec:	4a4f      	ldr	r2, [pc, #316]	; (8002b2c <HAL_UART_MspInit+0x210>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80029f2:	e091      	b.n	8002b18 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4e      	ldr	r2, [pc, #312]	; (8002b34 <HAL_UART_MspInit+0x218>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d12d      	bne.n	8002a5a <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	4a47      	ldr	r2, [pc, #284]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0e:	4b45      	ldr	r3, [pc, #276]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a48:	2307      	movs	r3, #7
 8002a4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a50:	4619      	mov	r1, r3
 8002a52:	4839      	ldr	r0, [pc, #228]	; (8002b38 <HAL_UART_MspInit+0x21c>)
 8002a54:	f000 ff72 	bl	800393c <HAL_GPIO_Init>
}
 8002a58:	e05e      	b.n	8002b18 <HAL_UART_MspInit+0x1fc>
  else if(uartHandle->Instance==USART6)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a37      	ldr	r2, [pc, #220]	; (8002b3c <HAL_UART_MspInit+0x220>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d159      	bne.n	8002b18 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6c:	4a2d      	ldr	r2, [pc, #180]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a6e:	f043 0320 	orr.w	r3, r3, #32
 8002a72:	6453      	str	r3, [r2, #68]	; 0x44
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_UART_MspInit+0x208>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a9c:	23c0      	movs	r3, #192	; 0xc0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002aac:	2308      	movs	r3, #8
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4822      	ldr	r0, [pc, #136]	; (8002b40 <HAL_UART_MspInit+0x224>)
 8002ab8:	f000 ff40 	bl	800393c <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002abc:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_UART_MspInit+0x22c>)
 8002ac0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002ac4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ac8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002adc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002afe:	f000 fc35 	bl	800336c <HAL_DMA_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 8002b08:	f7ff fab4 	bl	8002074 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a0d      	ldr	r2, [pc, #52]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <HAL_UART_MspInit+0x228>)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b18:	bf00      	nop
 8002b1a:	3738      	adds	r7, #56	; 0x38
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40004400 	.word	0x40004400
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	20000c5c 	.word	0x20000c5c
 8002b30:	400260a0 	.word	0x400260a0
 8002b34:	40004800 	.word	0x40004800
 8002b38:	40020400 	.word	0x40020400
 8002b3c:	40011400 	.word	0x40011400
 8002b40:	40020800 	.word	0x40020800
 8002b44:	20000bfc 	.word	0x20000bfc
 8002b48:	400264a0 	.word	0x400264a0

08002b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b52:	e003      	b.n	8002b5c <LoopCopyDataInit>

08002b54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b5a:	3104      	adds	r1, #4

08002b5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b5c:	480b      	ldr	r0, [pc, #44]	; (8002b8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b64:	d3f6      	bcc.n	8002b54 <CopyDataInit>
  ldr  r2, =_sbss
 8002b66:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b68:	e002      	b.n	8002b70 <LoopFillZerobss>

08002b6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b6c:	f842 3b04 	str.w	r3, [r2], #4

08002b70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b74:	d3f9      	bcc.n	8002b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b76:	f7ff fd1d 	bl	80025b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b7a:	f003 fcf7 	bl	800656c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b7e:	f7ff f9a7 	bl	8001ed0 <main>
  bx  lr    
 8002b82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b88:	08009198 	.word	0x08009198
  ldr  r0, =_sdata
 8002b8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b90:	20000674 	.word	0x20000674
  ldr  r2, =_sbss
 8002b94:	20000674 	.word	0x20000674
  ldr  r3, = _ebss
 8002b98:	20000d44 	.word	0x20000d44

08002b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b9c:	e7fe      	b.n	8002b9c <ADC_IRQHandler>
	...

08002ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0d      	ldr	r2, [pc, #52]	; (8002be0 <HAL_Init+0x40>)
 8002baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <HAL_Init+0x40>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <HAL_Init+0x40>)
 8002bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_Init+0x40>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <HAL_Init+0x40>)
 8002bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc8:	2003      	movs	r0, #3
 8002bca:	f000 fb8d 	bl	80032e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f000 f808 	bl	8002be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bd4:	f7ff fc08 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023c00 	.word	0x40023c00

08002be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_InitTick+0x54>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_InitTick+0x58>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fba5 	bl	8003352 <HAL_SYSTICK_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00e      	b.n	8002c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b0f      	cmp	r3, #15
 8002c16:	d80a      	bhi.n	8002c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f000 fb6d 	bl	80032fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <HAL_InitTick+0x5c>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e000      	b.n	8002c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000498 	.word	0x20000498
 8002c3c:	200004a0 	.word	0x200004a0
 8002c40:	2000049c 	.word	0x2000049c

08002c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_IncTick+0x20>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_IncTick+0x24>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <HAL_IncTick+0x24>)
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	200004a0 	.word	0x200004a0
 8002c68:	20000d3c 	.word	0x20000d3c

08002c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_GetTick+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000d3c 	.word	0x20000d3c

08002c84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e033      	b.n	8002d02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fe fe9a 	bl	80019dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cca:	f023 0302 	bic.w	r3, r3, #2
 8002cce:	f043 0202 	orr.w	r2, r3, #2
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f93a 	bl	8002f50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f023 0303 	bic.w	r3, r3, #3
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf2:	e001      	b.n	8002cf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x1c>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e105      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x228>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b09      	cmp	r3, #9
 8002d36:	d925      	bls.n	8002d84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68d9      	ldr	r1, [r3, #12]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b1e      	subs	r3, #30
 8002d4e:	2207      	movs	r2, #7
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43da      	mvns	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4618      	mov	r0, r3
 8002d70:	4603      	mov	r3, r0
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4403      	add	r3, r0
 8002d76:	3b1e      	subs	r3, #30
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	e022      	b.n	8002dca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6919      	ldr	r1, [r3, #16]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	2207      	movs	r2, #7
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6919      	ldr	r1, [r3, #16]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4618      	mov	r0, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4403      	add	r3, r0
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d824      	bhi.n	8002e1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	3b05      	subs	r3, #5
 8002de4:	221f      	movs	r2, #31
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	400a      	ands	r2, r1
 8002df2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4618      	mov	r0, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b05      	subs	r3, #5
 8002e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1a:	e04c      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d824      	bhi.n	8002e6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	3b23      	subs	r3, #35	; 0x23
 8002e36:	221f      	movs	r2, #31
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	400a      	ands	r2, r1
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3b23      	subs	r3, #35	; 0x23
 8002e60:	fa00 f203 	lsl.w	r2, r0, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e6c:	e023      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b41      	subs	r3, #65	; 0x41
 8002e80:	221f      	movs	r2, #31
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3b41      	subs	r3, #65	; 0x41
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_ADC_ConfigChannel+0x234>)
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <HAL_ADC_ConfigChannel+0x238>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d109      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b12      	cmp	r3, #18
 8002eca:	d105      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_ADC_ConfigChannel+0x238>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d123      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x21e>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d003      	beq.n	8002ef2 <HAL_ADC_ConfigChannel+0x1e6>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b11      	cmp	r3, #17
 8002ef0:	d11b      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b10      	cmp	r3, #16
 8002f04:	d111      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <HAL_ADC_ConfigChannel+0x23c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a10      	ldr	r2, [pc, #64]	; (8002f4c <HAL_ADC_ConfigChannel+0x240>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	0c9a      	lsrs	r2, r3, #18
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40012300 	.word	0x40012300
 8002f44:	40012000 	.word	0x40012000
 8002f48:	20000498 	.word	0x20000498
 8002f4c:	431bde83 	.word	0x431bde83

08002f50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f58:	4b79      	ldr	r3, [pc, #484]	; (8003140 <ADC_Init+0x1f0>)
 8002f5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	021a      	lsls	r2, r3, #8
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6899      	ldr	r1, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	4a58      	ldr	r2, [pc, #352]	; (8003144 <ADC_Init+0x1f4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003018:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6899      	ldr	r1, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	e00f      	b.n	800304e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800303c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800304c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0202 	bic.w	r2, r2, #2
 800305c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7e1b      	ldrb	r3, [r3, #24]
 8003068:	005a      	lsls	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01b      	beq.n	80030b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800308a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800309a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	3b01      	subs	r3, #1
 80030a8:	035a      	lsls	r2, r3, #13
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e007      	b.n	80030c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	3b01      	subs	r3, #1
 80030e0:	051a      	lsls	r2, r3, #20
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003106:	025a      	lsls	r2, r3, #9
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	029a      	lsls	r2, r3, #10
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40012300 	.word	0x40012300
 8003144:	0f000001 	.word	0x0f000001

08003148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003164:	4013      	ands	r3, r2
 8003166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317a:	4a04      	ldr	r2, [pc, #16]	; (800318c <__NVIC_SetPriorityGrouping+0x44>)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	60d3      	str	r3, [r2, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003194:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	0a1b      	lsrs	r3, r3, #8
 800319a:	f003 0307 	and.w	r3, r3, #7
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	db0b      	blt.n	80031d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 021f 	and.w	r2, r3, #31
 80031c4:	4907      	ldr	r1, [pc, #28]	; (80031e4 <__NVIC_EnableIRQ+0x38>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2001      	movs	r0, #1
 80031ce:	fa00 f202 	lsl.w	r2, r0, r2
 80031d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000e100 	.word	0xe000e100

080031e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	db0a      	blt.n	8003212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	490c      	ldr	r1, [pc, #48]	; (8003234 <__NVIC_SetPriority+0x4c>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	0112      	lsls	r2, r2, #4
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	440b      	add	r3, r1
 800320c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003210:	e00a      	b.n	8003228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	4908      	ldr	r1, [pc, #32]	; (8003238 <__NVIC_SetPriority+0x50>)
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	3b04      	subs	r3, #4
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	440b      	add	r3, r1
 8003226:	761a      	strb	r2, [r3, #24]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000e100 	.word	0xe000e100
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800323c:	b480      	push	{r7}
 800323e:	b089      	sub	sp, #36	; 0x24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f1c3 0307 	rsb	r3, r3, #7
 8003256:	2b04      	cmp	r3, #4
 8003258:	bf28      	it	cs
 800325a:	2304      	movcs	r3, #4
 800325c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3304      	adds	r3, #4
 8003262:	2b06      	cmp	r3, #6
 8003264:	d902      	bls.n	800326c <NVIC_EncodePriority+0x30>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3b03      	subs	r3, #3
 800326a:	e000      	b.n	800326e <NVIC_EncodePriority+0x32>
 800326c:	2300      	movs	r3, #0
 800326e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	f04f 32ff 	mov.w	r2, #4294967295
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43da      	mvns	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	401a      	ands	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003284:	f04f 31ff 	mov.w	r1, #4294967295
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	43d9      	mvns	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003294:	4313      	orrs	r3, r2
         );
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	; 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b4:	d301      	bcc.n	80032ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b6:	2301      	movs	r3, #1
 80032b8:	e00f      	b.n	80032da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ba:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <SysTick_Config+0x40>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3b01      	subs	r3, #1
 80032c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c2:	210f      	movs	r1, #15
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295
 80032c8:	f7ff ff8e 	bl	80031e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <SysTick_Config+0x40>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <SysTick_Config+0x40>)
 80032d4:	2207      	movs	r2, #7
 80032d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	e000e010 	.word	0xe000e010

080032e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff29 	bl	8003148 <__NVIC_SetPriorityGrouping>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003310:	f7ff ff3e 	bl	8003190 <__NVIC_GetPriorityGrouping>
 8003314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	f7ff ff8e 	bl	800323c <NVIC_EncodePriority>
 8003320:	4602      	mov	r2, r0
 8003322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003326:	4611      	mov	r1, r2
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff ff5d 	bl	80031e8 <__NVIC_SetPriority>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ff31 	bl	80031ac <__NVIC_EnableIRQ>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ffa2 	bl	80032a4 <SysTick_Config>
 8003360:	4603      	mov	r3, r0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003378:	f7ff fc78 	bl	8002c6c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e099      	b.n	80034bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a8:	e00f      	b.n	80033ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033aa:	f7ff fc5f 	bl	8002c6c <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	d908      	bls.n	80033ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2203      	movs	r2, #3
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e078      	b.n	80034bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e8      	bne.n	80033aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <HAL_DMA_Init+0x158>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b04      	cmp	r3, #4
 8003422:	d107      	bne.n	8003434 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	4313      	orrs	r3, r2
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0307 	bic.w	r3, r3, #7
 800344a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	2b04      	cmp	r3, #4
 800345c:	d117      	bne.n	800348e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00e      	beq.n	800348e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f9e9 	bl	8003848 <DMA_CheckFifoParam>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800348a:	2301      	movs	r3, #1
 800348c:	e016      	b.n	80034bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9a0 	bl	80037dc <DMA_CalcBaseAndBitshift>
 800349c:	4603      	mov	r3, r0
 800349e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	223f      	movs	r2, #63	; 0x3f
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	f010803f 	.word	0xf010803f

080034c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_DMA_IRQHandler+0x258>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a92      	ldr	r2, [pc, #584]	; (8003724 <HAL_DMA_IRQHandler+0x25c>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	0a9b      	lsrs	r3, r3, #10
 80034e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f2:	2208      	movs	r2, #8
 80034f4:	409a      	lsls	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d01a      	beq.n	8003534 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0204 	bic.w	r2, r2, #4
 800351a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	2208      	movs	r2, #8
 8003522:	409a      	lsls	r2, r3
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	2201      	movs	r2, #1
 800353a:	409a      	lsls	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003556:	2201      	movs	r2, #1
 8003558:	409a      	lsls	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	f043 0202 	orr.w	r2, r3, #2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356e:	2204      	movs	r2, #4
 8003570:	409a      	lsls	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2204      	movs	r2, #4
 800358e:	409a      	lsls	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	2210      	movs	r2, #16
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d043      	beq.n	8003638 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d03c      	beq.n	8003638 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2210      	movs	r2, #16
 80035c4:	409a      	lsls	r2, r3
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d018      	beq.n	800360a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d108      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d024      	beq.n	8003638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
 80035f6:	e01f      	b.n	8003638 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01b      	beq.n	8003638 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4798      	blx	r3
 8003608:	e016      	b.n	8003638 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0208 	bic.w	r2, r2, #8
 8003626:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	2220      	movs	r2, #32
 800363e:	409a      	lsls	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 808e 	beq.w	8003766 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8086 	beq.w	8003766 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365e:	2220      	movs	r2, #32
 8003660:	409a      	lsls	r2, r3
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b05      	cmp	r3, #5
 8003670:	d136      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0216 	bic.w	r2, r2, #22
 8003680:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003690:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x1da>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0208 	bic.w	r2, r2, #8
 80036b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	223f      	movs	r2, #63	; 0x3f
 80036b8:	409a      	lsls	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d07d      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
        }
        return;
 80036de:	e078      	b.n	80037d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01c      	beq.n	8003728 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d108      	bne.n	800370e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	2b00      	cmp	r3, #0
 8003702:	d030      	beq.n	8003766 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
 800370c:	e02b      	b.n	8003766 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d027      	beq.n	8003766 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
 800371e:	e022      	b.n	8003766 <HAL_DMA_IRQHandler+0x29e>
 8003720:	20000498 	.word	0x20000498
 8003724:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0210 	bic.w	r2, r2, #16
 8003744:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	2b00      	cmp	r3, #0
 800376c:	d032      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d022      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2205      	movs	r2, #5
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3301      	adds	r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	429a      	cmp	r2, r3
 800379c:	d307      	bcc.n	80037ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f2      	bne.n	8003792 <HAL_DMA_IRQHandler+0x2ca>
 80037ac:	e000      	b.n	80037b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80037ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
 80037d0:	e000      	b.n	80037d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80037d2:	bf00      	nop
    }
  }
}
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop

080037dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	3b10      	subs	r3, #16
 80037ec:	4a14      	ldr	r2, [pc, #80]	; (8003840 <DMA_CalcBaseAndBitshift+0x64>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <DMA_CalcBaseAndBitshift+0x68>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d909      	bls.n	800381e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	659a      	str	r2, [r3, #88]	; 0x58
 800381c:	e007      	b.n	800382e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	aaaaaaab 	.word	0xaaaaaaab
 8003844:	08008ec0 	.word	0x08008ec0

08003848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11f      	bne.n	80038a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d855      	bhi.n	8003914 <DMA_CheckFifoParam+0xcc>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <DMA_CheckFifoParam+0x28>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003881 	.word	0x08003881
 8003874:	08003893 	.word	0x08003893
 8003878:	08003881 	.word	0x08003881
 800387c:	08003915 	.word	0x08003915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d045      	beq.n	8003918 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e042      	b.n	8003918 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800389a:	d13f      	bne.n	800391c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e03c      	b.n	800391c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	d121      	bne.n	80038f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d836      	bhi.n	8003920 <DMA_CheckFifoParam+0xd8>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <DMA_CheckFifoParam+0x70>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038cf 	.word	0x080038cf
 80038c0:	080038c9 	.word	0x080038c9
 80038c4:	080038e1 	.word	0x080038e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      break;
 80038cc:	e02f      	b.n	800392e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d024      	beq.n	8003924 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038de:	e021      	b.n	8003924 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e8:	d11e      	bne.n	8003928 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ee:	e01b      	b.n	8003928 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d902      	bls.n	80038fc <DMA_CheckFifoParam+0xb4>
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d003      	beq.n	8003902 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038fa:	e018      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e015      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
      break;
 8003912:	e00b      	b.n	800392c <DMA_CheckFifoParam+0xe4>
      break;
 8003914:	bf00      	nop
 8003916:	e00a      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      break;
 8003918:	bf00      	nop
 800391a:	e008      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      break;
 800391c:	bf00      	nop
 800391e:	e006      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      break;
 8003920:	bf00      	nop
 8003922:	e004      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      break;
 8003924:	bf00      	nop
 8003926:	e002      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      break;   
 8003928:	bf00      	nop
 800392a:	e000      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      break;
 800392c:	bf00      	nop
    }
  } 
  
  return status; 
 800392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
 8003956:	e16b      	b.n	8003c30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003958:	2201      	movs	r2, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	429a      	cmp	r2, r3
 8003972:	f040 815a 	bne.w	8003c2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d00b      	beq.n	8003996 <HAL_GPIO_Init+0x5a>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d007      	beq.n	8003996 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800398a:	2b11      	cmp	r3, #17
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b12      	cmp	r3, #18
 8003994:	d130      	bne.n	80039f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2203      	movs	r2, #3
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039cc:	2201      	movs	r2, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 0201 	and.w	r2, r3, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	2203      	movs	r2, #3
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0xfc>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b12      	cmp	r3, #18
 8003a36:	d123      	bne.n	8003a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	220f      	movs	r2, #15
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	691a      	ldr	r2, [r3, #16]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	08da      	lsrs	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	69b9      	ldr	r1, [r7, #24]
 8003a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80b4 	beq.w	8003c2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_GPIO_Init+0x308>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	4a5e      	ldr	r2, [pc, #376]	; (8003c44 <HAL_GPIO_Init+0x308>)
 8003acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad2:	4b5c      	ldr	r3, [pc, #368]	; (8003c44 <HAL_GPIO_Init+0x308>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ade:	4a5a      	ldr	r2, [pc, #360]	; (8003c48 <HAL_GPIO_Init+0x30c>)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a51      	ldr	r2, [pc, #324]	; (8003c4c <HAL_GPIO_Init+0x310>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d02b      	beq.n	8003b62 <HAL_GPIO_Init+0x226>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a50      	ldr	r2, [pc, #320]	; (8003c50 <HAL_GPIO_Init+0x314>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d025      	beq.n	8003b5e <HAL_GPIO_Init+0x222>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4f      	ldr	r2, [pc, #316]	; (8003c54 <HAL_GPIO_Init+0x318>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01f      	beq.n	8003b5a <HAL_GPIO_Init+0x21e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4e      	ldr	r2, [pc, #312]	; (8003c58 <HAL_GPIO_Init+0x31c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d019      	beq.n	8003b56 <HAL_GPIO_Init+0x21a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4d      	ldr	r2, [pc, #308]	; (8003c5c <HAL_GPIO_Init+0x320>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_GPIO_Init+0x216>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4c      	ldr	r2, [pc, #304]	; (8003c60 <HAL_GPIO_Init+0x324>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00d      	beq.n	8003b4e <HAL_GPIO_Init+0x212>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <HAL_GPIO_Init+0x328>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <HAL_GPIO_Init+0x20e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4a      	ldr	r2, [pc, #296]	; (8003c68 <HAL_GPIO_Init+0x32c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_GPIO_Init+0x20a>
 8003b42:	2307      	movs	r3, #7
 8003b44:	e00e      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b46:	2308      	movs	r3, #8
 8003b48:	e00c      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	e00a      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b4e:	2305      	movs	r3, #5
 8003b50:	e008      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b52:	2304      	movs	r3, #4
 8003b54:	e006      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b56:	2303      	movs	r3, #3
 8003b58:	e004      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e002      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <HAL_GPIO_Init+0x228>
 8003b62:	2300      	movs	r3, #0
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	f002 0203 	and.w	r2, r2, #3
 8003b6a:	0092      	lsls	r2, r2, #2
 8003b6c:	4093      	lsls	r3, r2
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b74:	4934      	ldr	r1, [pc, #208]	; (8003c48 <HAL_GPIO_Init+0x30c>)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b82:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba6:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c24:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <HAL_GPIO_Init+0x330>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	2b0f      	cmp	r3, #15
 8003c34:	f67f ae90 	bls.w	8003958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c38:	bf00      	nop
 8003c3a:	3724      	adds	r7, #36	; 0x24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	40020400 	.word	0x40020400
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020c00 	.word	0x40020c00
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40021400 	.word	0x40021400
 8003c64:	40021800 	.word	0x40021800
 8003c68:	40021c00 	.word	0x40021c00
 8003c6c:	40013c00 	.word	0x40013c00

08003c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c80:	787b      	ldrb	r3, [r7, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c8c:	e003      	b.n	8003c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e11f      	b.n	8003ef6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fe f854 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d08:	f000 fd18 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4a7b      	ldr	r2, [pc, #492]	; (8003f00 <HAL_I2C_Init+0x25c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d807      	bhi.n	8003d28 <HAL_I2C_Init+0x84>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a7a      	ldr	r2, [pc, #488]	; (8003f04 <HAL_I2C_Init+0x260>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	bf94      	ite	ls
 8003d20:	2301      	movls	r3, #1
 8003d22:	2300      	movhi	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e006      	b.n	8003d36 <HAL_I2C_Init+0x92>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a77      	ldr	r2, [pc, #476]	; (8003f08 <HAL_I2C_Init+0x264>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	bf94      	ite	ls
 8003d30:	2301      	movls	r3, #1
 8003d32:	2300      	movhi	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0db      	b.n	8003ef6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a72      	ldr	r2, [pc, #456]	; (8003f0c <HAL_I2C_Init+0x268>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a64      	ldr	r2, [pc, #400]	; (8003f00 <HAL_I2C_Init+0x25c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d802      	bhi.n	8003d78 <HAL_I2C_Init+0xd4>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	e009      	b.n	8003d8c <HAL_I2C_Init+0xe8>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	4a63      	ldr	r2, [pc, #396]	; (8003f10 <HAL_I2C_Init+0x26c>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4956      	ldr	r1, [pc, #344]	; (8003f00 <HAL_I2C_Init+0x25c>)
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d80d      	bhi.n	8003dc8 <HAL_I2C_Init+0x124>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e59      	subs	r1, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	bf38      	it	cc
 8003dc4:	2304      	movcc	r3, #4
 8003dc6:	e04f      	b.n	8003e68 <HAL_I2C_Init+0x1c4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <HAL_I2C_Init+0x150>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1e58      	subs	r0, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	440b      	add	r3, r1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e012      	b.n	8003e1a <HAL_I2C_Init+0x176>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e58      	subs	r0, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	0099      	lsls	r1, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Init+0x17e>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e022      	b.n	8003e68 <HAL_I2C_Init+0x1c4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10e      	bne.n	8003e48 <HAL_I2C_Init+0x1a4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1e58      	subs	r0, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	440b      	add	r3, r1
 8003e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	e00f      	b.n	8003e68 <HAL_I2C_Init+0x1c4>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	6809      	ldr	r1, [r1, #0]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6911      	ldr	r1, [r2, #16]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	4311      	orrs	r1, r2
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	000186a0 	.word	0x000186a0
 8003f04:	001e847f 	.word	0x001e847f
 8003f08:	003d08ff 	.word	0x003d08ff
 8003f0c:	431bde83 	.word	0x431bde83
 8003f10:	10624dd3 	.word	0x10624dd3

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e25b      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d075      	beq.n	800401e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f32:	4ba3      	ldr	r3, [pc, #652]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d00c      	beq.n	8003f58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f3e:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d112      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4a:	4b9d      	ldr	r3, [pc, #628]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f56:	d10b      	bne.n	8003f70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	4b99      	ldr	r3, [pc, #612]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05b      	beq.n	800401c <HAL_RCC_OscConfig+0x108>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d157      	bne.n	800401c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e236      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f78:	d106      	bne.n	8003f88 <HAL_RCC_OscConfig+0x74>
 8003f7a:	4b91      	ldr	r3, [pc, #580]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a90      	ldr	r2, [pc, #576]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e01d      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x98>
 8003f92:	4b8b      	ldr	r3, [pc, #556]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a8a      	ldr	r2, [pc, #552]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a87      	ldr	r2, [pc, #540]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e00b      	b.n	8003fc4 <HAL_RCC_OscConfig+0xb0>
 8003fac:	4b84      	ldr	r3, [pc, #528]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a83      	ldr	r2, [pc, #524]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a80      	ldr	r2, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d013      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fe4e 	bl	8002c6c <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fe fe4a 	bl	8002c6c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e1fb      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xc0>
 8003ff2:	e014      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fe fe3a 	bl	8002c6c <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ffc:	f7fe fe36 	bl	8002c6c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e1e7      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800400e:	4b6c      	ldr	r3, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0xe8>
 800401a:	e000      	b.n	800401e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d063      	beq.n	80040f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402a:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00b      	beq.n	800404e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004036:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800403e:	2b08      	cmp	r3, #8
 8004040:	d11c      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004042:	4b5f      	ldr	r3, [pc, #380]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d116      	bne.n	800407c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1bb      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b56      	ldr	r3, [pc, #344]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4952      	ldr	r1, [pc, #328]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	e03a      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d020      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004084:	4b4f      	ldr	r3, [pc, #316]	; (80041c4 <HAL_RCC_OscConfig+0x2b0>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fe fdef 	bl	8002c6c <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004092:	f7fe fdeb 	bl	8002c6c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e19c      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a4:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4940      	ldr	r1, [pc, #256]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	600b      	str	r3, [r1, #0]
 80040c4:	e015      	b.n	80040f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_OscConfig+0x2b0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe fdce 	bl	8002c6c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fe fdca 	bl	8002c6c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e17b      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d030      	beq.n	8004160 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCC_OscConfig+0x2b4>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fe fdae 	bl	8002c6c <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004114:	f7fe fdaa 	bl	8002c6c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e15b      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x200>
 8004132:	e015      	b.n	8004160 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_OscConfig+0x2b4>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413a:	f7fe fd97 	bl	8002c6c <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004142:	f7fe fd93 	bl	8002c6c <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e144      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80a0 	beq.w	80042ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCC_OscConfig+0x2ac>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_OscConfig+0x2b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d121      	bne.n	80041ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_RCC_OscConfig+0x2b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a07      	ldr	r2, [pc, #28]	; (80041cc <HAL_RCC_OscConfig+0x2b8>)
 80041b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b6:	f7fe fd59 	bl	8002c6c <HAL_GetTick>
 80041ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041bc:	e011      	b.n	80041e2 <HAL_RCC_OscConfig+0x2ce>
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470000 	.word	0x42470000
 80041c8:	42470e80 	.word	0x42470e80
 80041cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d0:	f7fe fd4c 	bl	8002c6c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0fd      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b81      	ldr	r3, [pc, #516]	; (80043e8 <HAL_RCC_OscConfig+0x4d4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x2f0>
 80041f6:	4b7d      	ldr	r3, [pc, #500]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80041f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fa:	4a7c      	ldr	r2, [pc, #496]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6713      	str	r3, [r2, #112]	; 0x70
 8004202:	e01c      	b.n	800423e <HAL_RCC_OscConfig+0x32a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b05      	cmp	r3, #5
 800420a:	d10c      	bne.n	8004226 <HAL_RCC_OscConfig+0x312>
 800420c:	4b77      	ldr	r3, [pc, #476]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	4a76      	ldr	r2, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	6713      	str	r3, [r2, #112]	; 0x70
 8004218:	4b74      	ldr	r3, [pc, #464]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a73      	ldr	r2, [pc, #460]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	e00b      	b.n	800423e <HAL_RCC_OscConfig+0x32a>
 8004226:	4b71      	ldr	r3, [pc, #452]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a70      	ldr	r2, [pc, #448]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
 8004232:	4b6e      	ldr	r3, [pc, #440]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a6d      	ldr	r2, [pc, #436]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d015      	beq.n	8004272 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004246:	f7fe fd11 	bl	8002c6c <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424e:	f7fe fd0d 	bl	8002c6c <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	; 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0bc      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0ee      	beq.n	800424e <HAL_RCC_OscConfig+0x33a>
 8004270:	e014      	b.n	800429c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004272:	f7fe fcfb 	bl	8002c6c <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fe fcf7 	bl	8002c6c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e0a6      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	4b56      	ldr	r3, [pc, #344]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ee      	bne.n	800427a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a2:	4b52      	ldr	r3, [pc, #328]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	4a51      	ldr	r2, [pc, #324]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8092 	beq.w	80043dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b8:	4b4c      	ldr	r3, [pc, #304]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d05c      	beq.n	800437e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d141      	bne.n	8004350 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042cc:	4b48      	ldr	r3, [pc, #288]	; (80043f0 <HAL_RCC_OscConfig+0x4dc>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d2:	f7fe fccb 	bl	8002c6c <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042da:	f7fe fcc7 	bl	8002c6c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e078      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ec:	4b3f      	ldr	r3, [pc, #252]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	019b      	lsls	r3, r3, #6
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	3b01      	subs	r3, #1
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	4933      	ldr	r1, [pc, #204]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004322:	4b33      	ldr	r3, [pc, #204]	; (80043f0 <HAL_RCC_OscConfig+0x4dc>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fe fca0 	bl	8002c6c <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe fc9c 	bl	8002c6c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e04d      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x41c>
 800434e:	e045      	b.n	80043dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x4dc>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe fc89 	bl	8002c6c <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435e:	f7fe fc85 	bl	8002c6c <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e036      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004370:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCC_OscConfig+0x44a>
 800437c:	e02e      	b.n	80043dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e029      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <HAL_RCC_OscConfig+0x4d8>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	429a      	cmp	r2, r3
 800439c:	d11c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d115      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d106      	bne.n	80043d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40007000 	.word	0x40007000
 80043ec:	40023800 	.word	0x40023800
 80043f0:	42470060 	.word	0x42470060

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0cc      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d90c      	bls.n	8004430 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b65      	ldr	r3, [pc, #404]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b63      	ldr	r3, [pc, #396]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d001      	beq.n	8004430 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0b8      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d020      	beq.n	800447e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004448:	4b59      	ldr	r3, [pc, #356]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a58      	ldr	r2, [pc, #352]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004452:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a52      	ldr	r2, [pc, #328]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800446a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800446c:	4b50      	ldr	r3, [pc, #320]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	494d      	ldr	r1, [pc, #308]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d044      	beq.n	8004514 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	4b47      	ldr	r3, [pc, #284]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d119      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e07f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b2:	4b3f      	ldr	r3, [pc, #252]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c2:	4b3b      	ldr	r3, [pc, #236]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e067      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044d2:	4b37      	ldr	r3, [pc, #220]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 0203 	bic.w	r2, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4934      	ldr	r1, [pc, #208]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e4:	f7fe fbc2 	bl	8002c6c <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	e00a      	b.n	8004502 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ec:	f7fe fbbe 	bl	8002c6c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e04f      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	4b2b      	ldr	r3, [pc, #172]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 020c 	and.w	r2, r3, #12
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	429a      	cmp	r2, r3
 8004512:	d1eb      	bne.n	80044ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d20c      	bcs.n	800453c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e032      	b.n	80045a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4916      	ldr	r1, [pc, #88]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	490e      	ldr	r1, [pc, #56]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800457a:	f000 f821 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	5cd3      	ldrb	r3, [r2, r3]
 800458e:	fa21 f303 	lsr.w	r3, r1, r3
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1c8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fb22 	bl	8002be4 <HAL_InitTick>

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023c00 	.word	0x40023c00
 80045b0:	40023800 	.word	0x40023800
 80045b4:	08008ea8 	.word	0x08008ea8
 80045b8:	20000498 	.word	0x20000498
 80045bc:	2000049c 	.word	0x2000049c

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	2300      	movs	r3, #0
 80045d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045d6:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d007      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x32>
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d008      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x38>
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 808d 	bne.w	8004706 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_RCC_GetSysClockFreq+0x15c>)
 80045ee:	60bb      	str	r3, [r7, #8]
       break;
 80045f0:	e08c      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045f2:	4b4b      	ldr	r3, [pc, #300]	; (8004720 <HAL_RCC_GetSysClockFreq+0x160>)
 80045f4:	60bb      	str	r3, [r7, #8]
      break;
 80045f6:	e089      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045f8:	4b47      	ldr	r3, [pc, #284]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004600:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004602:	4b45      	ldr	r3, [pc, #276]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d023      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800460e:	4b42      	ldr	r3, [pc, #264]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	099b      	lsrs	r3, r3, #6
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	ea03 0501 	and.w	r5, r3, r1
 8004624:	ea04 0602 	and.w	r6, r4, r2
 8004628:	4a3d      	ldr	r2, [pc, #244]	; (8004720 <HAL_RCC_GetSysClockFreq+0x160>)
 800462a:	fb02 f106 	mul.w	r1, r2, r6
 800462e:	2200      	movs	r2, #0
 8004630:	fb02 f205 	mul.w	r2, r2, r5
 8004634:	440a      	add	r2, r1
 8004636:	493a      	ldr	r1, [pc, #232]	; (8004720 <HAL_RCC_GetSysClockFreq+0x160>)
 8004638:	fba5 0101 	umull	r0, r1, r5, r1
 800463c:	1853      	adds	r3, r2, r1
 800463e:	4619      	mov	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f04f 0400 	mov.w	r4, #0
 8004646:	461a      	mov	r2, r3
 8004648:	4623      	mov	r3, r4
 800464a:	f7fc faad 	bl	8000ba8 <__aeabi_uldivmod>
 800464e:	4603      	mov	r3, r0
 8004650:	460c      	mov	r4, r1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e049      	b.n	80046ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	f04f 0400 	mov.w	r4, #0
 8004660:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	ea03 0501 	and.w	r5, r3, r1
 800466c:	ea04 0602 	and.w	r6, r4, r2
 8004670:	4629      	mov	r1, r5
 8004672:	4632      	mov	r2, r6
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	f04f 0400 	mov.w	r4, #0
 800467c:	0154      	lsls	r4, r2, #5
 800467e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004682:	014b      	lsls	r3, r1, #5
 8004684:	4619      	mov	r1, r3
 8004686:	4622      	mov	r2, r4
 8004688:	1b49      	subs	r1, r1, r5
 800468a:	eb62 0206 	sbc.w	r2, r2, r6
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	f04f 0400 	mov.w	r4, #0
 8004696:	0194      	lsls	r4, r2, #6
 8004698:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800469c:	018b      	lsls	r3, r1, #6
 800469e:	1a5b      	subs	r3, r3, r1
 80046a0:	eb64 0402 	sbc.w	r4, r4, r2
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	00e2      	lsls	r2, r4, #3
 80046ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046b2:	00d9      	lsls	r1, r3, #3
 80046b4:	460b      	mov	r3, r1
 80046b6:	4614      	mov	r4, r2
 80046b8:	195b      	adds	r3, r3, r5
 80046ba:	eb44 0406 	adc.w	r4, r4, r6
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	02a2      	lsls	r2, r4, #10
 80046c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046cc:	0299      	lsls	r1, r3, #10
 80046ce:	460b      	mov	r3, r1
 80046d0:	4614      	mov	r4, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	4621      	mov	r1, r4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	461a      	mov	r2, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	f7fc fa62 	bl	8000ba8 <__aeabi_uldivmod>
 80046e4:	4603      	mov	r3, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046ea:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCC_GetSysClockFreq+0x158>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	0c1b      	lsrs	r3, r3, #16
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	3301      	adds	r3, #1
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	60bb      	str	r3, [r7, #8]
      break;
 8004704:	e002      	b.n	800470c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004706:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004708:	60bb      	str	r3, [r7, #8]
      break;
 800470a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800470c:	68bb      	ldr	r3, [r7, #8]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	00f42400 	.word	0x00f42400
 8004720:	017d7840 	.word	0x017d7840

08004724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <HAL_RCC_GetHCLKFreq+0x14>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20000498 	.word	0x20000498

0800473c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004740:	f7ff fff0 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 8004744:	4601      	mov	r1, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	0a9b      	lsrs	r3, r3, #10
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40023800 	.word	0x40023800
 8004760:	08008eb8 	.word	0x08008eb8

08004764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004768:	f7ff ffdc 	bl	8004724 <HAL_RCC_GetHCLKFreq>
 800476c:	4601      	mov	r1, r0
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	0b5b      	lsrs	r3, r3, #13
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4a03      	ldr	r2, [pc, #12]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800
 8004788:	08008eb8 	.word	0x08008eb8

0800478c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e056      	b.n	800484c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d106      	bne.n	80047be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fd fccf 	bl	800215c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	ea42 0103 	orr.w	r1, r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	f003 0104 	and.w	r1, r3, #4
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69da      	ldr	r2, [r3, #28]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800483a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_SPI_Transmit+0x22>
 8004872:	2302      	movs	r3, #2
 8004874:	e11e      	b.n	8004ab4 <HAL_SPI_Transmit+0x260>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800487e:	f7fe f9f5 	bl	8002c6c <HAL_GetTick>
 8004882:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d002      	beq.n	800489a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004898:	e103      	b.n	8004aa2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_SPI_Transmit+0x52>
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048aa:	e0fa      	b.n	8004aa2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2203      	movs	r2, #3
 80048b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	88fa      	ldrh	r2, [r7, #6]
 80048ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f2:	d107      	bne.n	8004904 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004902:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d007      	beq.n	8004922 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d14b      	bne.n	80049c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_SPI_Transmit+0xe6>
 8004934:	8afb      	ldrh	r3, [r7, #22]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d13e      	bne.n	80049b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800495e:	e02b      	b.n	80049b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b02      	cmp	r3, #2
 800496c:	d112      	bne.n	8004994 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	86da      	strh	r2, [r3, #54]	; 0x36
 8004992:	e011      	b.n	80049b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004994:	f7fe f96a 	bl	8002c6c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d803      	bhi.n	80049ac <HAL_SPI_Transmit+0x158>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d102      	bne.n	80049b2 <HAL_SPI_Transmit+0x15e>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049b6:	e074      	b.n	8004aa2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1ce      	bne.n	8004960 <HAL_SPI_Transmit+0x10c>
 80049c2:	e04c      	b.n	8004a5e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_SPI_Transmit+0x17e>
 80049cc:	8afb      	ldrh	r3, [r7, #22]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d140      	bne.n	8004a54 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049f8:	e02c      	b.n	8004a54 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d113      	bne.n	8004a30 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	330c      	adds	r3, #12
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a2e:	e011      	b.n	8004a54 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a30:	f7fe f91c 	bl	8002c6c <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d803      	bhi.n	8004a48 <HAL_SPI_Transmit+0x1f4>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a46:	d102      	bne.n	8004a4e <HAL_SPI_Transmit+0x1fa>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a52:	e026      	b.n	8004aa2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1cd      	bne.n	80049fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fa36 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e000      	b.n	8004aa2 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004aa0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08c      	sub	sp, #48	; 0x30
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004aca:	2301      	movs	r3, #1
 8004acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x26>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e18a      	b.n	8004df8 <HAL_SPI_TransmitReceive+0x33c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aea:	f7fe f8bf 	bl	8002c6c <HAL_GetTick>
 8004aee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b00:	887b      	ldrh	r3, [r7, #2]
 8004b02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d00f      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x70>
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d107      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <HAL_SPI_TransmitReceive+0x68>
 8004b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d003      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b2a:	e15b      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0x82>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0x82>
 8004b38:	887b      	ldrh	r3, [r7, #2]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004b44:	e14e      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d003      	beq.n	8004b5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2205      	movs	r2, #5
 8004b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	887a      	ldrh	r2, [r7, #2]
 8004b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	887a      	ldrh	r2, [r7, #2]
 8004b70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	887a      	ldrh	r2, [r7, #2]
 8004b7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	887a      	ldrh	r2, [r7, #2]
 8004b82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9a:	2b40      	cmp	r3, #64	; 0x40
 8004b9c:	d007      	beq.n	8004bae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb6:	d178      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_TransmitReceive+0x10a>
 8004bc0:	8b7b      	ldrh	r3, [r7, #26]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d166      	bne.n	8004c94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	1c9a      	adds	r2, r3, #2
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bea:	e053      	b.n	8004c94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d11b      	bne.n	8004c32 <HAL_SPI_TransmitReceive+0x176>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d016      	beq.n	8004c32 <HAL_SPI_TransmitReceive+0x176>
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d113      	bne.n	8004c32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d119      	bne.n	8004c74 <HAL_SPI_TransmitReceive+0x1b8>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d014      	beq.n	8004c74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	b292      	uxth	r2, r2
 8004c56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c70:	2301      	movs	r3, #1
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c74:	f7fd fffa 	bl	8002c6c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d807      	bhi.n	8004c94 <HAL_SPI_TransmitReceive+0x1d8>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8a:	d003      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c92:	e0a7      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1a6      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x130>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1a1      	bne.n	8004bec <HAL_SPI_TransmitReceive+0x130>
 8004ca8:	e07c      	b.n	8004da4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_TransmitReceive+0x1fc>
 8004cb2:	8b7b      	ldrh	r3, [r7, #26]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d16b      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	7812      	ldrb	r2, [r2, #0]
 8004cc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cde:	e057      	b.n	8004d90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d11c      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x26c>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d017      	beq.n	8004d28 <HAL_SPI_TransmitReceive+0x26c>
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d114      	bne.n	8004d28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	7812      	ldrb	r2, [r2, #0]
 8004d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d119      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x2ae>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d014      	beq.n	8004d6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d66:	2301      	movs	r3, #1
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d6a:	f7fd ff7f 	bl	8002c6c <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d803      	bhi.n	8004d82 <HAL_SPI_TransmitReceive+0x2c6>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d102      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x2cc>
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d8e:	e029      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1a2      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x224>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d19d      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f893 	bl	8004ed4 <SPI_EndRxTxTransaction>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d006      	beq.n	8004dc2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004dc0:	e010      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dca:	2300      	movs	r3, #0
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	e000      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004de2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3730      	adds	r7, #48	; 0x30
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e10:	e04c      	b.n	8004eac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d048      	beq.n	8004eac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e1a:	f7fd ff27 	bl	8002c6c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d902      	bls.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d13d      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e48:	d111      	bne.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	d004      	beq.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e5c:	d107      	bne.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d10f      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e00f      	b.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d1a3      	bne.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <SPI_EndRxTxTransaction+0x7c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	; (8004f54 <SPI_EndRxTxTransaction+0x80>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0d5b      	lsrs	r3, r3, #21
 8004eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efe:	d112      	bne.n	8004f26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2180      	movs	r1, #128	; 0x80
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff ff78 	bl	8004e00 <SPI_WaitFlagStateUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d016      	beq.n	8004f44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f043 0220 	orr.w	r2, r3, #32
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e00f      	b.n	8004f46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3c:	2b80      	cmp	r3, #128	; 0x80
 8004f3e:	d0f2      	beq.n	8004f26 <SPI_EndRxTxTransaction+0x52>
 8004f40:	e000      	b.n	8004f44 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f42:	bf00      	nop
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000498 	.word	0x20000498
 8004f54:	165e9f81 	.word	0x165e9f81

08004f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e01d      	b.n	8004fa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd fbf2 	bl	8002768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 f956 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e01d      	b.n	8004ffc <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f815 	bl	8005004 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f000 f92b 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_TIM_OC_ConfigChannel+0x1a>
 800502e:	2302      	movs	r3, #2
 8005030:	e04e      	b.n	80050d0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b0c      	cmp	r3, #12
 8005046:	d839      	bhi.n	80050bc <HAL_TIM_OC_ConfigChannel+0xa4>
 8005048:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <HAL_TIM_OC_ConfigChannel+0x38>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	08005085 	.word	0x08005085
 8005054:	080050bd 	.word	0x080050bd
 8005058:	080050bd 	.word	0x080050bd
 800505c:	080050bd 	.word	0x080050bd
 8005060:	08005093 	.word	0x08005093
 8005064:	080050bd 	.word	0x080050bd
 8005068:	080050bd 	.word	0x080050bd
 800506c:	080050bd 	.word	0x080050bd
 8005070:	080050a1 	.word	0x080050a1
 8005074:	080050bd 	.word	0x080050bd
 8005078:	080050bd 	.word	0x080050bd
 800507c:	080050bd 	.word	0x080050bd
 8005080:	080050af 	.word	0x080050af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f97c 	bl	8005388 <TIM_OC1_SetConfig>
      break;
 8005090:	e015      	b.n	80050be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 f9e5 	bl	8005468 <TIM_OC2_SetConfig>
      break;
 800509e:	e00e      	b.n	80050be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fa54 	bl	8005554 <TIM_OC3_SetConfig>
      break;
 80050ac:	e007      	b.n	80050be <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fac1 	bl	800563c <TIM_OC4_SetConfig>
      break;
 80050ba:	e000      	b.n	80050be <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80050bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIM_ConfigClockSource+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0a6      	b.n	800523e <HAL_TIM_ConfigClockSource+0x166>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800510e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005116:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d067      	beq.n	80051f8 <HAL_TIM_ConfigClockSource+0x120>
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d80b      	bhi.n	8005144 <HAL_TIM_ConfigClockSource+0x6c>
 800512c:	2b10      	cmp	r3, #16
 800512e:	d073      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x140>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d802      	bhi.n	800513a <HAL_TIM_ConfigClockSource+0x62>
 8005134:	2b00      	cmp	r3, #0
 8005136:	d06f      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005138:	e078      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800513a:	2b20      	cmp	r3, #32
 800513c:	d06c      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x140>
 800513e:	2b30      	cmp	r3, #48	; 0x30
 8005140:	d06a      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005142:	e073      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005144:	2b70      	cmp	r3, #112	; 0x70
 8005146:	d00d      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0x8c>
 8005148:	2b70      	cmp	r3, #112	; 0x70
 800514a:	d804      	bhi.n	8005156 <HAL_TIM_ConfigClockSource+0x7e>
 800514c:	2b50      	cmp	r3, #80	; 0x50
 800514e:	d033      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xe0>
 8005150:	2b60      	cmp	r3, #96	; 0x60
 8005152:	d041      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005154:	e06a      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515a:	d066      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x152>
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005160:	d017      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005162:	e063      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 fb32 	bl	80057dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005186:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	609a      	str	r2, [r3, #8]
      break;
 8005190:	e04c      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6899      	ldr	r1, [r3, #8]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f000 fb1b 	bl	80057dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b4:	609a      	str	r2, [r3, #8]
      break;
 80051b6:	e039      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	461a      	mov	r2, r3
 80051c6:	f000 fa8f 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2150      	movs	r1, #80	; 0x50
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fae8 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 80051d6:	e029      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f000 faae 	bl	8005746 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2160      	movs	r1, #96	; 0x60
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fad8 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 80051f6:	e019      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	f000 fa6f 	bl	80056e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fac8 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005216:	e009      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 fabf 	bl	80057a6 <TIM_ITRx_SetConfig>
      break;
 8005228:	e000      	b.n	800522c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800522a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a40      	ldr	r2, [pc, #256]	; (800535c <TIM_Base_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d00f      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <TIM_Base_SetConfig+0x118>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3b      	ldr	r2, [pc, #236]	; (8005368 <TIM_Base_SetConfig+0x120>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3a      	ldr	r2, [pc, #232]	; (800536c <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2f      	ldr	r2, [pc, #188]	; (800535c <TIM_Base_SetConfig+0x114>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d027      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <TIM_Base_SetConfig+0x118>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d023      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <TIM_Base_SetConfig+0x120>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a29      	ldr	r2, [pc, #164]	; (800536c <TIM_Base_SetConfig+0x124>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d017      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a28      	ldr	r2, [pc, #160]	; (8005370 <TIM_Base_SetConfig+0x128>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <TIM_Base_SetConfig+0x12c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a26      	ldr	r2, [pc, #152]	; (8005378 <TIM_Base_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a25      	ldr	r2, [pc, #148]	; (800537c <TIM_Base_SetConfig+0x134>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a24      	ldr	r2, [pc, #144]	; (8005380 <TIM_Base_SetConfig+0x138>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a23      	ldr	r2, [pc, #140]	; (8005384 <TIM_Base_SetConfig+0x13c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <TIM_Base_SetConfig+0x114>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0xf8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0c      	ldr	r2, [pc, #48]	; (800536c <TIM_Base_SetConfig+0x124>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	615a      	str	r2, [r3, #20]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40010400 	.word	0x40010400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
 800537c:	40001800 	.word	0x40001800
 8005380:	40001c00 	.word	0x40001c00
 8005384:	40002000 	.word	0x40002000

08005388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f023 0302 	bic.w	r3, r3, #2
 80053d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a20      	ldr	r2, [pc, #128]	; (8005460 <TIM_OC1_SetConfig+0xd8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d003      	beq.n	80053ec <TIM_OC1_SetConfig+0x64>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <TIM_OC1_SetConfig+0xdc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d10c      	bne.n	8005406 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0308 	bic.w	r3, r3, #8
 80053f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a15      	ldr	r2, [pc, #84]	; (8005460 <TIM_OC1_SetConfig+0xd8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC1_SetConfig+0x8e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a14      	ldr	r2, [pc, #80]	; (8005464 <TIM_OC1_SetConfig+0xdc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d111      	bne.n	800543a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800541c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400

08005468 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f023 0210 	bic.w	r2, r3, #16
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	021b      	lsls	r3, r3, #8
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0320 	bic.w	r3, r3, #32
 80054b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a22      	ldr	r2, [pc, #136]	; (800554c <TIM_OC2_SetConfig+0xe4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC2_SetConfig+0x68>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a21      	ldr	r2, [pc, #132]	; (8005550 <TIM_OC2_SetConfig+0xe8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d10d      	bne.n	80054ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a17      	ldr	r2, [pc, #92]	; (800554c <TIM_OC2_SetConfig+0xe4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d003      	beq.n	80054fc <TIM_OC2_SetConfig+0x94>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a16      	ldr	r2, [pc, #88]	; (8005550 <TIM_OC2_SetConfig+0xe8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d113      	bne.n	8005524 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800550a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40010400 	.word	0x40010400

08005554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800559c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a21      	ldr	r2, [pc, #132]	; (8005634 <TIM_OC3_SetConfig+0xe0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d003      	beq.n	80055ba <TIM_OC3_SetConfig+0x66>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a20      	ldr	r2, [pc, #128]	; (8005638 <TIM_OC3_SetConfig+0xe4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d10d      	bne.n	80055d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a16      	ldr	r2, [pc, #88]	; (8005634 <TIM_OC3_SetConfig+0xe0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d003      	beq.n	80055e6 <TIM_OC3_SetConfig+0x92>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <TIM_OC3_SetConfig+0xe4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d113      	bne.n	800560e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40010000 	.word	0x40010000
 8005638:	40010400 	.word	0x40010400

0800563c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005686:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	031b      	lsls	r3, r3, #12
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a12      	ldr	r2, [pc, #72]	; (80056e0 <TIM_OC4_SetConfig+0xa4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_OC4_SetConfig+0x68>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a11      	ldr	r2, [pc, #68]	; (80056e4 <TIM_OC4_SetConfig+0xa8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d109      	bne.n	80056b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40010400 	.word	0x40010400

080056e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	f023 030a 	bic.w	r3, r3, #10
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005746:	b480      	push	{r7}
 8005748:	b087      	sub	sp, #28
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f023 0210 	bic.w	r2, r3, #16
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	031b      	lsls	r3, r3, #12
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005782:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	621a      	str	r2, [r3, #32]
}
 800579a:	bf00      	nop
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f043 0307 	orr.w	r3, r3, #7
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	431a      	orrs	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005830:	2302      	movs	r3, #2
 8005832:	e05a      	b.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d022      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d01d      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d018      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a15      	ldr	r2, [pc, #84]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d10c      	bne.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800
 8005904:	40000c00 	.word	0x40000c00
 8005908:	40010400 	.word	0x40010400
 800590c:	40014000 	.word	0x40014000
 8005910:	40001800 	.word	0x40001800

08005914 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800592c:	2302      	movs	r3, #2
 800592e:	e03d      	b.n	80059ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e03f      	b.n	8005a4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d106      	bne.n	80059e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fc ff9c 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2224      	movs	r2, #36	; 0x24
 80059e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f9b1 	bl	8005d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691a      	ldr	r2, [r3, #16]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	695a      	ldr	r2, [r3, #20]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b088      	sub	sp, #32
 8005a56:	af02      	add	r7, sp, #8
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	f040 8083 	bne.w	8005b7a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <HAL_UART_Transmit+0x2e>
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e07b      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Transmit+0x40>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e074      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2221      	movs	r2, #33	; 0x21
 8005aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005aa8:	f7fd f8e0 	bl	8002c6c <HAL_GetTick>
 8005aac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005ac2:	e042      	b.n	8005b4a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ada:	d122      	bne.n	8005b22 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 f8f2 	bl	8005cd0 <UART_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e042      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	3302      	adds	r3, #2
 8005b16:	60bb      	str	r3, [r7, #8]
 8005b18:	e017      	b.n	8005b4a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	e013      	b.n	8005b4a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f8cf 	bl	8005cd0 <UART_WaitOnFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e01f      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	60ba      	str	r2, [r7, #8]
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1b7      	bne.n	8005ac4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2140      	movs	r1, #64	; 0x40
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f8b6 	bl	8005cd0 <UART_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	f040 8090 	bne.w	8005cc6 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_UART_Receive+0x2e>
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e088      	b.n	8005cc8 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_UART_Receive+0x40>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e081      	b.n	8005cc8 <HAL_UART_Receive+0x144>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2222      	movs	r2, #34	; 0x22
 8005bd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005bda:	f7fd f847 	bl	8002c6c <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	88fa      	ldrh	r2, [r7, #6]
 8005be4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	88fa      	ldrh	r2, [r7, #6]
 8005bea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005bf4:	e05c      	b.n	8005cb0 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0c:	d12b      	bne.n	8005c66 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	2120      	movs	r1, #32
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f859 	bl	8005cd0 <UART_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e04f      	b.n	8005cc8 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10c      	bne.n	8005c4e <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	3302      	adds	r3, #2
 8005c4a:	60bb      	str	r3, [r7, #8]
 8005c4c:	e030      	b.n	8005cb0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	e024      	b.n	8005cb0 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2120      	movs	r1, #32
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f82d 	bl	8005cd0 <UART_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e023      	b.n	8005cc8 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d108      	bne.n	8005c9a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6859      	ldr	r1, [r3, #4]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	60ba      	str	r2, [r7, #8]
 8005c94:	b2ca      	uxtb	r2, r1
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	e00a      	b.n	8005cb0 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	1c59      	adds	r1, r3, #1
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d19d      	bne.n	8005bf6 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce0:	e02c      	b.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce8:	d028      	beq.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf0:	f7fc ffbc 	bl	8002c6c <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	69ba      	ldr	r2, [r7, #24]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d21d      	bcs.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d0e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e00f      	b.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	bf0c      	ite	eq
 8005d4c:	2301      	moveq	r3, #1
 8005d4e:	2300      	movne	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d0c3      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005da6:	f023 030c 	bic.w	r3, r3, #12
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd2:	f040 818b 	bne.w	80060ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4ac1      	ldr	r2, [pc, #772]	; (80060e0 <UART_SetConfig+0x37c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d005      	beq.n	8005dec <UART_SetConfig+0x88>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4abf      	ldr	r2, [pc, #764]	; (80060e4 <UART_SetConfig+0x380>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	f040 80bd 	bne.w	8005f66 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dec:	f7fe fcba 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8005df0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	461d      	mov	r5, r3
 8005df6:	f04f 0600 	mov.w	r6, #0
 8005dfa:	46a8      	mov	r8, r5
 8005dfc:	46b1      	mov	r9, r6
 8005dfe:	eb18 0308 	adds.w	r3, r8, r8
 8005e02:	eb49 0409 	adc.w	r4, r9, r9
 8005e06:	4698      	mov	r8, r3
 8005e08:	46a1      	mov	r9, r4
 8005e0a:	eb18 0805 	adds.w	r8, r8, r5
 8005e0e:	eb49 0906 	adc.w	r9, r9, r6
 8005e12:	f04f 0100 	mov.w	r1, #0
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e26:	4688      	mov	r8, r1
 8005e28:	4691      	mov	r9, r2
 8005e2a:	eb18 0005 	adds.w	r0, r8, r5
 8005e2e:	eb49 0106 	adc.w	r1, r9, r6
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	461d      	mov	r5, r3
 8005e38:	f04f 0600 	mov.w	r6, #0
 8005e3c:	196b      	adds	r3, r5, r5
 8005e3e:	eb46 0406 	adc.w	r4, r6, r6
 8005e42:	461a      	mov	r2, r3
 8005e44:	4623      	mov	r3, r4
 8005e46:	f7fa feaf 	bl	8000ba8 <__aeabi_uldivmod>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4ba5      	ldr	r3, [pc, #660]	; (80060e8 <UART_SetConfig+0x384>)
 8005e52:	fba3 2302 	umull	r2, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	461d      	mov	r5, r3
 8005e60:	f04f 0600 	mov.w	r6, #0
 8005e64:	46a9      	mov	r9, r5
 8005e66:	46b2      	mov	sl, r6
 8005e68:	eb19 0309 	adds.w	r3, r9, r9
 8005e6c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e70:	4699      	mov	r9, r3
 8005e72:	46a2      	mov	sl, r4
 8005e74:	eb19 0905 	adds.w	r9, r9, r5
 8005e78:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e7c:	f04f 0100 	mov.w	r1, #0
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e90:	4689      	mov	r9, r1
 8005e92:	4692      	mov	sl, r2
 8005e94:	eb19 0005 	adds.w	r0, r9, r5
 8005e98:	eb4a 0106 	adc.w	r1, sl, r6
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	f04f 0600 	mov.w	r6, #0
 8005ea6:	196b      	adds	r3, r5, r5
 8005ea8:	eb46 0406 	adc.w	r4, r6, r6
 8005eac:	461a      	mov	r2, r3
 8005eae:	4623      	mov	r3, r4
 8005eb0:	f7fa fe7a 	bl	8000ba8 <__aeabi_uldivmod>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b8b      	ldr	r3, [pc, #556]	; (80060e8 <UART_SetConfig+0x384>)
 8005ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	2164      	movs	r1, #100	; 0x64
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	3332      	adds	r3, #50	; 0x32
 8005ece:	4a86      	ldr	r2, [pc, #536]	; (80060e8 <UART_SetConfig+0x384>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005edc:	4498      	add	r8, r3
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	f04f 0600 	mov.w	r6, #0
 8005ee6:	46a9      	mov	r9, r5
 8005ee8:	46b2      	mov	sl, r6
 8005eea:	eb19 0309 	adds.w	r3, r9, r9
 8005eee:	eb4a 040a 	adc.w	r4, sl, sl
 8005ef2:	4699      	mov	r9, r3
 8005ef4:	46a2      	mov	sl, r4
 8005ef6:	eb19 0905 	adds.w	r9, r9, r5
 8005efa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f12:	4689      	mov	r9, r1
 8005f14:	4692      	mov	sl, r2
 8005f16:	eb19 0005 	adds.w	r0, r9, r5
 8005f1a:	eb4a 0106 	adc.w	r1, sl, r6
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	461d      	mov	r5, r3
 8005f24:	f04f 0600 	mov.w	r6, #0
 8005f28:	196b      	adds	r3, r5, r5
 8005f2a:	eb46 0406 	adc.w	r4, r6, r6
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4623      	mov	r3, r4
 8005f32:	f7fa fe39 	bl	8000ba8 <__aeabi_uldivmod>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <UART_SetConfig+0x384>)
 8005f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2164      	movs	r1, #100	; 0x64
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	3332      	adds	r3, #50	; 0x32
 8005f50:	4a65      	ldr	r2, [pc, #404]	; (80060e8 <UART_SetConfig+0x384>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	f003 0207 	and.w	r2, r3, #7
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4442      	add	r2, r8
 8005f62:	609a      	str	r2, [r3, #8]
 8005f64:	e26f      	b.n	8006446 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f66:	f7fe fbe9 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8005f6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	461d      	mov	r5, r3
 8005f70:	f04f 0600 	mov.w	r6, #0
 8005f74:	46a8      	mov	r8, r5
 8005f76:	46b1      	mov	r9, r6
 8005f78:	eb18 0308 	adds.w	r3, r8, r8
 8005f7c:	eb49 0409 	adc.w	r4, r9, r9
 8005f80:	4698      	mov	r8, r3
 8005f82:	46a1      	mov	r9, r4
 8005f84:	eb18 0805 	adds.w	r8, r8, r5
 8005f88:	eb49 0906 	adc.w	r9, r9, r6
 8005f8c:	f04f 0100 	mov.w	r1, #0
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fa0:	4688      	mov	r8, r1
 8005fa2:	4691      	mov	r9, r2
 8005fa4:	eb18 0005 	adds.w	r0, r8, r5
 8005fa8:	eb49 0106 	adc.w	r1, r9, r6
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	f04f 0600 	mov.w	r6, #0
 8005fb6:	196b      	adds	r3, r5, r5
 8005fb8:	eb46 0406 	adc.w	r4, r6, r6
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	f7fa fdf2 	bl	8000ba8 <__aeabi_uldivmod>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b47      	ldr	r3, [pc, #284]	; (80060e8 <UART_SetConfig+0x384>)
 8005fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	461d      	mov	r5, r3
 8005fda:	f04f 0600 	mov.w	r6, #0
 8005fde:	46a9      	mov	r9, r5
 8005fe0:	46b2      	mov	sl, r6
 8005fe2:	eb19 0309 	adds.w	r3, r9, r9
 8005fe6:	eb4a 040a 	adc.w	r4, sl, sl
 8005fea:	4699      	mov	r9, r3
 8005fec:	46a2      	mov	sl, r4
 8005fee:	eb19 0905 	adds.w	r9, r9, r5
 8005ff2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006002:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006006:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800600a:	4689      	mov	r9, r1
 800600c:	4692      	mov	sl, r2
 800600e:	eb19 0005 	adds.w	r0, r9, r5
 8006012:	eb4a 0106 	adc.w	r1, sl, r6
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	461d      	mov	r5, r3
 800601c:	f04f 0600 	mov.w	r6, #0
 8006020:	196b      	adds	r3, r5, r5
 8006022:	eb46 0406 	adc.w	r4, r6, r6
 8006026:	461a      	mov	r2, r3
 8006028:	4623      	mov	r3, r4
 800602a:	f7fa fdbd 	bl	8000ba8 <__aeabi_uldivmod>
 800602e:	4603      	mov	r3, r0
 8006030:	460c      	mov	r4, r1
 8006032:	461a      	mov	r2, r3
 8006034:	4b2c      	ldr	r3, [pc, #176]	; (80060e8 <UART_SetConfig+0x384>)
 8006036:	fba3 1302 	umull	r1, r3, r3, r2
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	2164      	movs	r1, #100	; 0x64
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	3332      	adds	r3, #50	; 0x32
 8006048:	4a27      	ldr	r2, [pc, #156]	; (80060e8 <UART_SetConfig+0x384>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006056:	4498      	add	r8, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	461d      	mov	r5, r3
 800605c:	f04f 0600 	mov.w	r6, #0
 8006060:	46a9      	mov	r9, r5
 8006062:	46b2      	mov	sl, r6
 8006064:	eb19 0309 	adds.w	r3, r9, r9
 8006068:	eb4a 040a 	adc.w	r4, sl, sl
 800606c:	4699      	mov	r9, r3
 800606e:	46a2      	mov	sl, r4
 8006070:	eb19 0905 	adds.w	r9, r9, r5
 8006074:	eb4a 0a06 	adc.w	sl, sl, r6
 8006078:	f04f 0100 	mov.w	r1, #0
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006084:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006088:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800608c:	4689      	mov	r9, r1
 800608e:	4692      	mov	sl, r2
 8006090:	eb19 0005 	adds.w	r0, r9, r5
 8006094:	eb4a 0106 	adc.w	r1, sl, r6
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	461d      	mov	r5, r3
 800609e:	f04f 0600 	mov.w	r6, #0
 80060a2:	196b      	adds	r3, r5, r5
 80060a4:	eb46 0406 	adc.w	r4, r6, r6
 80060a8:	461a      	mov	r2, r3
 80060aa:	4623      	mov	r3, r4
 80060ac:	f7fa fd7c 	bl	8000ba8 <__aeabi_uldivmod>
 80060b0:	4603      	mov	r3, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	461a      	mov	r2, r3
 80060b6:	4b0c      	ldr	r3, [pc, #48]	; (80060e8 <UART_SetConfig+0x384>)
 80060b8:	fba3 1302 	umull	r1, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	2164      	movs	r1, #100	; 0x64
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	3332      	adds	r3, #50	; 0x32
 80060ca:	4a07      	ldr	r2, [pc, #28]	; (80060e8 <UART_SetConfig+0x384>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 0207 	and.w	r2, r3, #7
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4442      	add	r2, r8
 80060dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80060de:	e1b2      	b.n	8006446 <UART_SetConfig+0x6e2>
 80060e0:	40011000 	.word	0x40011000
 80060e4:	40011400 	.word	0x40011400
 80060e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4ad7      	ldr	r2, [pc, #860]	; (8006450 <UART_SetConfig+0x6ec>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d005      	beq.n	8006102 <UART_SetConfig+0x39e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4ad6      	ldr	r2, [pc, #856]	; (8006454 <UART_SetConfig+0x6f0>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f040 80d1 	bne.w	80062a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006102:	f7fe fb2f 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8006106:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	469a      	mov	sl, r3
 800610c:	f04f 0b00 	mov.w	fp, #0
 8006110:	46d0      	mov	r8, sl
 8006112:	46d9      	mov	r9, fp
 8006114:	eb18 0308 	adds.w	r3, r8, r8
 8006118:	eb49 0409 	adc.w	r4, r9, r9
 800611c:	4698      	mov	r8, r3
 800611e:	46a1      	mov	r9, r4
 8006120:	eb18 080a 	adds.w	r8, r8, sl
 8006124:	eb49 090b 	adc.w	r9, r9, fp
 8006128:	f04f 0100 	mov.w	r1, #0
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006134:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006138:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800613c:	4688      	mov	r8, r1
 800613e:	4691      	mov	r9, r2
 8006140:	eb1a 0508 	adds.w	r5, sl, r8
 8006144:	eb4b 0609 	adc.w	r6, fp, r9
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	4619      	mov	r1, r3
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	f04f 0400 	mov.w	r4, #0
 800615a:	0094      	lsls	r4, r2, #2
 800615c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006160:	008b      	lsls	r3, r1, #2
 8006162:	461a      	mov	r2, r3
 8006164:	4623      	mov	r3, r4
 8006166:	4628      	mov	r0, r5
 8006168:	4631      	mov	r1, r6
 800616a:	f7fa fd1d 	bl	8000ba8 <__aeabi_uldivmod>
 800616e:	4603      	mov	r3, r0
 8006170:	460c      	mov	r4, r1
 8006172:	461a      	mov	r2, r3
 8006174:	4bb8      	ldr	r3, [pc, #736]	; (8006458 <UART_SetConfig+0x6f4>)
 8006176:	fba3 2302 	umull	r2, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	469b      	mov	fp, r3
 8006184:	f04f 0c00 	mov.w	ip, #0
 8006188:	46d9      	mov	r9, fp
 800618a:	46e2      	mov	sl, ip
 800618c:	eb19 0309 	adds.w	r3, r9, r9
 8006190:	eb4a 040a 	adc.w	r4, sl, sl
 8006194:	4699      	mov	r9, r3
 8006196:	46a2      	mov	sl, r4
 8006198:	eb19 090b 	adds.w	r9, r9, fp
 800619c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061a0:	f04f 0100 	mov.w	r1, #0
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061b4:	4689      	mov	r9, r1
 80061b6:	4692      	mov	sl, r2
 80061b8:	eb1b 0509 	adds.w	r5, fp, r9
 80061bc:	eb4c 060a 	adc.w	r6, ip, sl
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4619      	mov	r1, r3
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	f04f 0400 	mov.w	r4, #0
 80061d2:	0094      	lsls	r4, r2, #2
 80061d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061d8:	008b      	lsls	r3, r1, #2
 80061da:	461a      	mov	r2, r3
 80061dc:	4623      	mov	r3, r4
 80061de:	4628      	mov	r0, r5
 80061e0:	4631      	mov	r1, r6
 80061e2:	f7fa fce1 	bl	8000ba8 <__aeabi_uldivmod>
 80061e6:	4603      	mov	r3, r0
 80061e8:	460c      	mov	r4, r1
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b9a      	ldr	r3, [pc, #616]	; (8006458 <UART_SetConfig+0x6f4>)
 80061ee:	fba3 1302 	umull	r1, r3, r3, r2
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	2164      	movs	r1, #100	; 0x64
 80061f6:	fb01 f303 	mul.w	r3, r1, r3
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	3332      	adds	r3, #50	; 0x32
 8006200:	4a95      	ldr	r2, [pc, #596]	; (8006458 <UART_SetConfig+0x6f4>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800620c:	4498      	add	r8, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	469b      	mov	fp, r3
 8006212:	f04f 0c00 	mov.w	ip, #0
 8006216:	46d9      	mov	r9, fp
 8006218:	46e2      	mov	sl, ip
 800621a:	eb19 0309 	adds.w	r3, r9, r9
 800621e:	eb4a 040a 	adc.w	r4, sl, sl
 8006222:	4699      	mov	r9, r3
 8006224:	46a2      	mov	sl, r4
 8006226:	eb19 090b 	adds.w	r9, r9, fp
 800622a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800622e:	f04f 0100 	mov.w	r1, #0
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800623a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800623e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006242:	4689      	mov	r9, r1
 8006244:	4692      	mov	sl, r2
 8006246:	eb1b 0509 	adds.w	r5, fp, r9
 800624a:	eb4c 060a 	adc.w	r6, ip, sl
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	4619      	mov	r1, r3
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	f04f 0400 	mov.w	r4, #0
 8006260:	0094      	lsls	r4, r2, #2
 8006262:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006266:	008b      	lsls	r3, r1, #2
 8006268:	461a      	mov	r2, r3
 800626a:	4623      	mov	r3, r4
 800626c:	4628      	mov	r0, r5
 800626e:	4631      	mov	r1, r6
 8006270:	f7fa fc9a 	bl	8000ba8 <__aeabi_uldivmod>
 8006274:	4603      	mov	r3, r0
 8006276:	460c      	mov	r4, r1
 8006278:	461a      	mov	r2, r3
 800627a:	4b77      	ldr	r3, [pc, #476]	; (8006458 <UART_SetConfig+0x6f4>)
 800627c:	fba3 1302 	umull	r1, r3, r3, r2
 8006280:	095b      	lsrs	r3, r3, #5
 8006282:	2164      	movs	r1, #100	; 0x64
 8006284:	fb01 f303 	mul.w	r3, r1, r3
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	011b      	lsls	r3, r3, #4
 800628c:	3332      	adds	r3, #50	; 0x32
 800628e:	4a72      	ldr	r2, [pc, #456]	; (8006458 <UART_SetConfig+0x6f4>)
 8006290:	fba2 2303 	umull	r2, r3, r2, r3
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	f003 020f 	and.w	r2, r3, #15
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4442      	add	r2, r8
 80062a0:	609a      	str	r2, [r3, #8]
 80062a2:	e0d0      	b.n	8006446 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80062a4:	f7fe fa4a 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 80062a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	469a      	mov	sl, r3
 80062ae:	f04f 0b00 	mov.w	fp, #0
 80062b2:	46d0      	mov	r8, sl
 80062b4:	46d9      	mov	r9, fp
 80062b6:	eb18 0308 	adds.w	r3, r8, r8
 80062ba:	eb49 0409 	adc.w	r4, r9, r9
 80062be:	4698      	mov	r8, r3
 80062c0:	46a1      	mov	r9, r4
 80062c2:	eb18 080a 	adds.w	r8, r8, sl
 80062c6:	eb49 090b 	adc.w	r9, r9, fp
 80062ca:	f04f 0100 	mov.w	r1, #0
 80062ce:	f04f 0200 	mov.w	r2, #0
 80062d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80062d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80062da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80062de:	4688      	mov	r8, r1
 80062e0:	4691      	mov	r9, r2
 80062e2:	eb1a 0508 	adds.w	r5, sl, r8
 80062e6:	eb4b 0609 	adc.w	r6, fp, r9
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4619      	mov	r1, r3
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	f04f 0400 	mov.w	r4, #0
 80062fc:	0094      	lsls	r4, r2, #2
 80062fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006302:	008b      	lsls	r3, r1, #2
 8006304:	461a      	mov	r2, r3
 8006306:	4623      	mov	r3, r4
 8006308:	4628      	mov	r0, r5
 800630a:	4631      	mov	r1, r6
 800630c:	f7fa fc4c 	bl	8000ba8 <__aeabi_uldivmod>
 8006310:	4603      	mov	r3, r0
 8006312:	460c      	mov	r4, r1
 8006314:	461a      	mov	r2, r3
 8006316:	4b50      	ldr	r3, [pc, #320]	; (8006458 <UART_SetConfig+0x6f4>)
 8006318:	fba3 2302 	umull	r2, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	469b      	mov	fp, r3
 8006326:	f04f 0c00 	mov.w	ip, #0
 800632a:	46d9      	mov	r9, fp
 800632c:	46e2      	mov	sl, ip
 800632e:	eb19 0309 	adds.w	r3, r9, r9
 8006332:	eb4a 040a 	adc.w	r4, sl, sl
 8006336:	4699      	mov	r9, r3
 8006338:	46a2      	mov	sl, r4
 800633a:	eb19 090b 	adds.w	r9, r9, fp
 800633e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006342:	f04f 0100 	mov.w	r1, #0
 8006346:	f04f 0200 	mov.w	r2, #0
 800634a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800634e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006352:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006356:	4689      	mov	r9, r1
 8006358:	4692      	mov	sl, r2
 800635a:	eb1b 0509 	adds.w	r5, fp, r9
 800635e:	eb4c 060a 	adc.w	r6, ip, sl
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	4619      	mov	r1, r3
 8006368:	f04f 0200 	mov.w	r2, #0
 800636c:	f04f 0300 	mov.w	r3, #0
 8006370:	f04f 0400 	mov.w	r4, #0
 8006374:	0094      	lsls	r4, r2, #2
 8006376:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800637a:	008b      	lsls	r3, r1, #2
 800637c:	461a      	mov	r2, r3
 800637e:	4623      	mov	r3, r4
 8006380:	4628      	mov	r0, r5
 8006382:	4631      	mov	r1, r6
 8006384:	f7fa fc10 	bl	8000ba8 <__aeabi_uldivmod>
 8006388:	4603      	mov	r3, r0
 800638a:	460c      	mov	r4, r1
 800638c:	461a      	mov	r2, r3
 800638e:	4b32      	ldr	r3, [pc, #200]	; (8006458 <UART_SetConfig+0x6f4>)
 8006390:	fba3 1302 	umull	r1, r3, r3, r2
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	2164      	movs	r1, #100	; 0x64
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	011b      	lsls	r3, r3, #4
 80063a0:	3332      	adds	r3, #50	; 0x32
 80063a2:	4a2d      	ldr	r2, [pc, #180]	; (8006458 <UART_SetConfig+0x6f4>)
 80063a4:	fba2 2303 	umull	r2, r3, r2, r3
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ae:	4498      	add	r8, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	469b      	mov	fp, r3
 80063b4:	f04f 0c00 	mov.w	ip, #0
 80063b8:	46d9      	mov	r9, fp
 80063ba:	46e2      	mov	sl, ip
 80063bc:	eb19 0309 	adds.w	r3, r9, r9
 80063c0:	eb4a 040a 	adc.w	r4, sl, sl
 80063c4:	4699      	mov	r9, r3
 80063c6:	46a2      	mov	sl, r4
 80063c8:	eb19 090b 	adds.w	r9, r9, fp
 80063cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063e4:	4689      	mov	r9, r1
 80063e6:	4692      	mov	sl, r2
 80063e8:	eb1b 0509 	adds.w	r5, fp, r9
 80063ec:	eb4c 060a 	adc.w	r6, ip, sl
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4619      	mov	r1, r3
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	f04f 0400 	mov.w	r4, #0
 8006402:	0094      	lsls	r4, r2, #2
 8006404:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006408:	008b      	lsls	r3, r1, #2
 800640a:	461a      	mov	r2, r3
 800640c:	4623      	mov	r3, r4
 800640e:	4628      	mov	r0, r5
 8006410:	4631      	mov	r1, r6
 8006412:	f7fa fbc9 	bl	8000ba8 <__aeabi_uldivmod>
 8006416:	4603      	mov	r3, r0
 8006418:	460c      	mov	r4, r1
 800641a:	461a      	mov	r2, r3
 800641c:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <UART_SetConfig+0x6f4>)
 800641e:	fba3 1302 	umull	r1, r3, r3, r2
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	2164      	movs	r1, #100	; 0x64
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	3332      	adds	r3, #50	; 0x32
 8006430:	4a09      	ldr	r2, [pc, #36]	; (8006458 <UART_SetConfig+0x6f4>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	f003 020f 	and.w	r2, r3, #15
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4442      	add	r2, r8
 8006442:	609a      	str	r2, [r3, #8]
}
 8006444:	e7ff      	b.n	8006446 <UART_SetConfig+0x6e2>
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006450:	40011000 	.word	0x40011000
 8006454:	40011400 	.word	0x40011400
 8006458:	51eb851f 	.word	0x51eb851f

0800645c <LED_SEQUENCE_init>:

#include "../Inc/Sequence_led.h"


//On initialise les paramètres
void LED_SEQUENCE_init(sequence_led_t * seq_led, GPIO_TypeDef* gpio, uint16_t gpio_pin, int32_t init_seq, uint32_t periode, int8_t length_sequence, bool_e output_logic){
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	80fb      	strh	r3, [r7, #6]
	//Init des varaibles
	seq_led->compteur = 0;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	741a      	strb	r2, [r3, #16]
	seq_led->gpio = gpio ;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	601a      	str	r2, [r3, #0]
	seq_led->gpio_pin = gpio_pin ;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	809a      	strh	r2, [r3, #4]
	seq_led->length_sequence = length_sequence ;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	7f3a      	ldrb	r2, [r7, #28]
 8006482:	745a      	strb	r2, [r3, #17]
	seq_led->periode = periode ;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	69ba      	ldr	r2, [r7, #24]
 8006488:	609a      	str	r2, [r3, #8]
	seq_led->output_logic = output_logic ;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	619a      	str	r2, [r3, #24]
	if(seq_led->output_logic == 1)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d102      	bne.n	800649e <LED_SEQUENCE_init+0x42>
		//Si logique négative on inverse la séquence
		init_seq = ~init_seq ;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	43db      	mvns	r3, r3
 800649c:	603b      	str	r3, [r7, #0]
	seq_led->sequence = init_seq ;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	60da      	str	r2, [r3, #12]
	seq_led->previous_time = 0 ;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	615a      	str	r2, [r3, #20]



}
 80064aa:	bf00      	nop
 80064ac:	3714      	adds	r7, #20
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
	...

080064b8 <LED_SEQUENCE_play>:
	seq_led->compteur = 0 ;
	seq_led->sequence = seq ;
}

//On change la sortie de la led en fonction de la séquence active
void LED_SEQUENCE_play(sequence_led_t * seq_led, uint32_t current_time_us){
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	if(current_time_us / 1000 > seq_led->previous_time + seq_led->periode){
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	4a25      	ldr	r2, [pc, #148]	; (800655c <LED_SEQUENCE_play+0xa4>)
 80064c6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ca:	099a      	lsrs	r2, r3, #6
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6959      	ldr	r1, [r3, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	440b      	add	r3, r1
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d93a      	bls.n	8006550 <LED_SEQUENCE_play+0x98>
		seq_led->previous_time += seq_led->periode ;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	441a      	add	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	615a      	str	r2, [r3, #20]
		//on récupère le niveau logique de la sortie
		bool_e output = ((seq_led->sequence) >> ((seq_led->length_sequence - seq_led->compteur) - 1)) & 1 ;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80064f2:	4619      	mov	r1, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80064fa:	1acb      	subs	r3, r1, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	fa42 f303 	asr.w	r3, r2, r3
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	60fb      	str	r3, [r7, #12]
		//On update la sortie
		if(output)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d005      	beq.n	800651a <LED_SEQUENCE_play+0x62>
			seq_led->gpio->BSRR = seq_led->gpio_pin ;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	889a      	ldrh	r2, [r3, #4]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	619a      	str	r2, [r3, #24]
 8006518:	e006      	b.n	8006528 <LED_SEQUENCE_play+0x70>
		else
			seq_led->gpio->BSRR = (uint32_t)(seq_led->gpio_pin) << 16U ;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	889b      	ldrh	r3, [r3, #4]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	0412      	lsls	r2, r2, #16
 8006526:	619a      	str	r2, [r3, #24]
		//on update le compteur
		seq_led->compteur ++ ;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	3301      	adds	r3, #1
 8006532:	b2db      	uxtb	r3, r3
 8006534:	b25a      	sxtb	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	741a      	strb	r2, [r3, #16]
		//TODO : verif l'init si length > 0
		if(seq_led->compteur == seq_led->length_sequence)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8006546:	429a      	cmp	r2, r3
 8006548:	d102      	bne.n	8006550 <LED_SEQUENCE_play+0x98>
			seq_led->compteur = 0 ;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	741a      	strb	r2, [r3, #16]
	}
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	10624dd3 	.word	0x10624dd3

08006560 <__errno>:
 8006560:	4b01      	ldr	r3, [pc, #4]	; (8006568 <__errno+0x8>)
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	200004a4 	.word	0x200004a4

0800656c <__libc_init_array>:
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	4e0d      	ldr	r6, [pc, #52]	; (80065a4 <__libc_init_array+0x38>)
 8006570:	4c0d      	ldr	r4, [pc, #52]	; (80065a8 <__libc_init_array+0x3c>)
 8006572:	1ba4      	subs	r4, r4, r6
 8006574:	10a4      	asrs	r4, r4, #2
 8006576:	2500      	movs	r5, #0
 8006578:	42a5      	cmp	r5, r4
 800657a:	d109      	bne.n	8006590 <__libc_init_array+0x24>
 800657c:	4e0b      	ldr	r6, [pc, #44]	; (80065ac <__libc_init_array+0x40>)
 800657e:	4c0c      	ldr	r4, [pc, #48]	; (80065b0 <__libc_init_array+0x44>)
 8006580:	f002 fc74 	bl	8008e6c <_init>
 8006584:	1ba4      	subs	r4, r4, r6
 8006586:	10a4      	asrs	r4, r4, #2
 8006588:	2500      	movs	r5, #0
 800658a:	42a5      	cmp	r5, r4
 800658c:	d105      	bne.n	800659a <__libc_init_array+0x2e>
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006594:	4798      	blx	r3
 8006596:	3501      	adds	r5, #1
 8006598:	e7ee      	b.n	8006578 <__libc_init_array+0xc>
 800659a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800659e:	4798      	blx	r3
 80065a0:	3501      	adds	r5, #1
 80065a2:	e7f2      	b.n	800658a <__libc_init_array+0x1e>
 80065a4:	08009190 	.word	0x08009190
 80065a8:	08009190 	.word	0x08009190
 80065ac:	08009190 	.word	0x08009190
 80065b0:	08009194 	.word	0x08009194

080065b4 <memmove>:
 80065b4:	4288      	cmp	r0, r1
 80065b6:	b510      	push	{r4, lr}
 80065b8:	eb01 0302 	add.w	r3, r1, r2
 80065bc:	d807      	bhi.n	80065ce <memmove+0x1a>
 80065be:	1e42      	subs	r2, r0, #1
 80065c0:	4299      	cmp	r1, r3
 80065c2:	d00a      	beq.n	80065da <memmove+0x26>
 80065c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065cc:	e7f8      	b.n	80065c0 <memmove+0xc>
 80065ce:	4283      	cmp	r3, r0
 80065d0:	d9f5      	bls.n	80065be <memmove+0xa>
 80065d2:	1881      	adds	r1, r0, r2
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	42d3      	cmn	r3, r2
 80065d8:	d100      	bne.n	80065dc <memmove+0x28>
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065e4:	e7f7      	b.n	80065d6 <memmove+0x22>

080065e6 <memset>:
 80065e6:	4402      	add	r2, r0
 80065e8:	4603      	mov	r3, r0
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d100      	bne.n	80065f0 <memset+0xa>
 80065ee:	4770      	bx	lr
 80065f0:	f803 1b01 	strb.w	r1, [r3], #1
 80065f4:	e7f9      	b.n	80065ea <memset+0x4>

080065f6 <__cvt>:
 80065f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065fa:	ec55 4b10 	vmov	r4, r5, d0
 80065fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006600:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006604:	2d00      	cmp	r5, #0
 8006606:	460e      	mov	r6, r1
 8006608:	4691      	mov	r9, r2
 800660a:	4619      	mov	r1, r3
 800660c:	bfb8      	it	lt
 800660e:	4622      	movlt	r2, r4
 8006610:	462b      	mov	r3, r5
 8006612:	f027 0720 	bic.w	r7, r7, #32
 8006616:	bfbb      	ittet	lt
 8006618:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800661c:	461d      	movlt	r5, r3
 800661e:	2300      	movge	r3, #0
 8006620:	232d      	movlt	r3, #45	; 0x2d
 8006622:	bfb8      	it	lt
 8006624:	4614      	movlt	r4, r2
 8006626:	2f46      	cmp	r7, #70	; 0x46
 8006628:	700b      	strb	r3, [r1, #0]
 800662a:	d004      	beq.n	8006636 <__cvt+0x40>
 800662c:	2f45      	cmp	r7, #69	; 0x45
 800662e:	d100      	bne.n	8006632 <__cvt+0x3c>
 8006630:	3601      	adds	r6, #1
 8006632:	2102      	movs	r1, #2
 8006634:	e000      	b.n	8006638 <__cvt+0x42>
 8006636:	2103      	movs	r1, #3
 8006638:	ab03      	add	r3, sp, #12
 800663a:	9301      	str	r3, [sp, #4]
 800663c:	ab02      	add	r3, sp, #8
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4632      	mov	r2, r6
 8006642:	4653      	mov	r3, sl
 8006644:	ec45 4b10 	vmov	d0, r4, r5
 8006648:	f000 feaa 	bl	80073a0 <_dtoa_r>
 800664c:	2f47      	cmp	r7, #71	; 0x47
 800664e:	4680      	mov	r8, r0
 8006650:	d102      	bne.n	8006658 <__cvt+0x62>
 8006652:	f019 0f01 	tst.w	r9, #1
 8006656:	d026      	beq.n	80066a6 <__cvt+0xb0>
 8006658:	2f46      	cmp	r7, #70	; 0x46
 800665a:	eb08 0906 	add.w	r9, r8, r6
 800665e:	d111      	bne.n	8006684 <__cvt+0x8e>
 8006660:	f898 3000 	ldrb.w	r3, [r8]
 8006664:	2b30      	cmp	r3, #48	; 0x30
 8006666:	d10a      	bne.n	800667e <__cvt+0x88>
 8006668:	2200      	movs	r2, #0
 800666a:	2300      	movs	r3, #0
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7fa fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006674:	b918      	cbnz	r0, 800667e <__cvt+0x88>
 8006676:	f1c6 0601 	rsb	r6, r6, #1
 800667a:	f8ca 6000 	str.w	r6, [sl]
 800667e:	f8da 3000 	ldr.w	r3, [sl]
 8006682:	4499      	add	r9, r3
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	4620      	mov	r0, r4
 800668a:	4629      	mov	r1, r5
 800668c:	f7fa fa1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006690:	b938      	cbnz	r0, 80066a2 <__cvt+0xac>
 8006692:	2230      	movs	r2, #48	; 0x30
 8006694:	9b03      	ldr	r3, [sp, #12]
 8006696:	454b      	cmp	r3, r9
 8006698:	d205      	bcs.n	80066a6 <__cvt+0xb0>
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	9103      	str	r1, [sp, #12]
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e7f8      	b.n	8006694 <__cvt+0x9e>
 80066a2:	f8cd 900c 	str.w	r9, [sp, #12]
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066aa:	eba3 0308 	sub.w	r3, r3, r8
 80066ae:	4640      	mov	r0, r8
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	b004      	add	sp, #16
 80066b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080066b8 <__exponent>:
 80066b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ba:	2900      	cmp	r1, #0
 80066bc:	4604      	mov	r4, r0
 80066be:	bfba      	itte	lt
 80066c0:	4249      	neglt	r1, r1
 80066c2:	232d      	movlt	r3, #45	; 0x2d
 80066c4:	232b      	movge	r3, #43	; 0x2b
 80066c6:	2909      	cmp	r1, #9
 80066c8:	f804 2b02 	strb.w	r2, [r4], #2
 80066cc:	7043      	strb	r3, [r0, #1]
 80066ce:	dd20      	ble.n	8006712 <__exponent+0x5a>
 80066d0:	f10d 0307 	add.w	r3, sp, #7
 80066d4:	461f      	mov	r7, r3
 80066d6:	260a      	movs	r6, #10
 80066d8:	fb91 f5f6 	sdiv	r5, r1, r6
 80066dc:	fb06 1115 	mls	r1, r6, r5, r1
 80066e0:	3130      	adds	r1, #48	; 0x30
 80066e2:	2d09      	cmp	r5, #9
 80066e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80066e8:	f103 32ff 	add.w	r2, r3, #4294967295
 80066ec:	4629      	mov	r1, r5
 80066ee:	dc09      	bgt.n	8006704 <__exponent+0x4c>
 80066f0:	3130      	adds	r1, #48	; 0x30
 80066f2:	3b02      	subs	r3, #2
 80066f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80066f8:	42bb      	cmp	r3, r7
 80066fa:	4622      	mov	r2, r4
 80066fc:	d304      	bcc.n	8006708 <__exponent+0x50>
 80066fe:	1a10      	subs	r0, r2, r0
 8006700:	b003      	add	sp, #12
 8006702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006704:	4613      	mov	r3, r2
 8006706:	e7e7      	b.n	80066d8 <__exponent+0x20>
 8006708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800670c:	f804 2b01 	strb.w	r2, [r4], #1
 8006710:	e7f2      	b.n	80066f8 <__exponent+0x40>
 8006712:	2330      	movs	r3, #48	; 0x30
 8006714:	4419      	add	r1, r3
 8006716:	7083      	strb	r3, [r0, #2]
 8006718:	1d02      	adds	r2, r0, #4
 800671a:	70c1      	strb	r1, [r0, #3]
 800671c:	e7ef      	b.n	80066fe <__exponent+0x46>
	...

08006720 <_printf_float>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	b08d      	sub	sp, #52	; 0x34
 8006726:	460c      	mov	r4, r1
 8006728:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800672c:	4616      	mov	r6, r2
 800672e:	461f      	mov	r7, r3
 8006730:	4605      	mov	r5, r0
 8006732:	f001 fd67 	bl	8008204 <_localeconv_r>
 8006736:	6803      	ldr	r3, [r0, #0]
 8006738:	9304      	str	r3, [sp, #16]
 800673a:	4618      	mov	r0, r3
 800673c:	f7f9 fd48 	bl	80001d0 <strlen>
 8006740:	2300      	movs	r3, #0
 8006742:	930a      	str	r3, [sp, #40]	; 0x28
 8006744:	f8d8 3000 	ldr.w	r3, [r8]
 8006748:	9005      	str	r0, [sp, #20]
 800674a:	3307      	adds	r3, #7
 800674c:	f023 0307 	bic.w	r3, r3, #7
 8006750:	f103 0208 	add.w	r2, r3, #8
 8006754:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006758:	f8d4 b000 	ldr.w	fp, [r4]
 800675c:	f8c8 2000 	str.w	r2, [r8]
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006768:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800676c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006770:	9307      	str	r3, [sp, #28]
 8006772:	f8cd 8018 	str.w	r8, [sp, #24]
 8006776:	f04f 32ff 	mov.w	r2, #4294967295
 800677a:	4ba7      	ldr	r3, [pc, #668]	; (8006a18 <_printf_float+0x2f8>)
 800677c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006780:	f7fa f9d4 	bl	8000b2c <__aeabi_dcmpun>
 8006784:	bb70      	cbnz	r0, 80067e4 <_printf_float+0xc4>
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	4ba3      	ldr	r3, [pc, #652]	; (8006a18 <_printf_float+0x2f8>)
 800678c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006790:	f7fa f9ae 	bl	8000af0 <__aeabi_dcmple>
 8006794:	bb30      	cbnz	r0, 80067e4 <_printf_float+0xc4>
 8006796:	2200      	movs	r2, #0
 8006798:	2300      	movs	r3, #0
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	f7fa f99d 	bl	8000adc <__aeabi_dcmplt>
 80067a2:	b110      	cbz	r0, 80067aa <_printf_float+0x8a>
 80067a4:	232d      	movs	r3, #45	; 0x2d
 80067a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067aa:	4a9c      	ldr	r2, [pc, #624]	; (8006a1c <_printf_float+0x2fc>)
 80067ac:	4b9c      	ldr	r3, [pc, #624]	; (8006a20 <_printf_float+0x300>)
 80067ae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067b2:	bf8c      	ite	hi
 80067b4:	4690      	movhi	r8, r2
 80067b6:	4698      	movls	r8, r3
 80067b8:	2303      	movs	r3, #3
 80067ba:	f02b 0204 	bic.w	r2, fp, #4
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	6022      	str	r2, [r4, #0]
 80067c2:	f04f 0900 	mov.w	r9, #0
 80067c6:	9700      	str	r7, [sp, #0]
 80067c8:	4633      	mov	r3, r6
 80067ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f9e6 	bl	8006ba0 <_printf_common>
 80067d4:	3001      	adds	r0, #1
 80067d6:	f040 808d 	bne.w	80068f4 <_printf_float+0x1d4>
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	b00d      	add	sp, #52	; 0x34
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e4:	4642      	mov	r2, r8
 80067e6:	464b      	mov	r3, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	4649      	mov	r1, r9
 80067ec:	f7fa f99e 	bl	8000b2c <__aeabi_dcmpun>
 80067f0:	b110      	cbz	r0, 80067f8 <_printf_float+0xd8>
 80067f2:	4a8c      	ldr	r2, [pc, #560]	; (8006a24 <_printf_float+0x304>)
 80067f4:	4b8c      	ldr	r3, [pc, #560]	; (8006a28 <_printf_float+0x308>)
 80067f6:	e7da      	b.n	80067ae <_printf_float+0x8e>
 80067f8:	6861      	ldr	r1, [r4, #4]
 80067fa:	1c4b      	adds	r3, r1, #1
 80067fc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006800:	a80a      	add	r0, sp, #40	; 0x28
 8006802:	d13e      	bne.n	8006882 <_printf_float+0x162>
 8006804:	2306      	movs	r3, #6
 8006806:	6063      	str	r3, [r4, #4]
 8006808:	2300      	movs	r3, #0
 800680a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800680e:	ab09      	add	r3, sp, #36	; 0x24
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	ec49 8b10 	vmov	d0, r8, r9
 8006816:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800681a:	6022      	str	r2, [r4, #0]
 800681c:	f8cd a004 	str.w	sl, [sp, #4]
 8006820:	6861      	ldr	r1, [r4, #4]
 8006822:	4628      	mov	r0, r5
 8006824:	f7ff fee7 	bl	80065f6 <__cvt>
 8006828:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800682c:	2b47      	cmp	r3, #71	; 0x47
 800682e:	4680      	mov	r8, r0
 8006830:	d109      	bne.n	8006846 <_printf_float+0x126>
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	1cd8      	adds	r0, r3, #3
 8006836:	db02      	blt.n	800683e <_printf_float+0x11e>
 8006838:	6862      	ldr	r2, [r4, #4]
 800683a:	4293      	cmp	r3, r2
 800683c:	dd47      	ble.n	80068ce <_printf_float+0x1ae>
 800683e:	f1aa 0a02 	sub.w	sl, sl, #2
 8006842:	fa5f fa8a 	uxtb.w	sl, sl
 8006846:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800684a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800684c:	d824      	bhi.n	8006898 <_printf_float+0x178>
 800684e:	3901      	subs	r1, #1
 8006850:	4652      	mov	r2, sl
 8006852:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006856:	9109      	str	r1, [sp, #36]	; 0x24
 8006858:	f7ff ff2e 	bl	80066b8 <__exponent>
 800685c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800685e:	1813      	adds	r3, r2, r0
 8006860:	2a01      	cmp	r2, #1
 8006862:	4681      	mov	r9, r0
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	dc02      	bgt.n	800686e <_printf_float+0x14e>
 8006868:	6822      	ldr	r2, [r4, #0]
 800686a:	07d1      	lsls	r1, r2, #31
 800686c:	d501      	bpl.n	8006872 <_printf_float+0x152>
 800686e:	3301      	adds	r3, #1
 8006870:	6123      	str	r3, [r4, #16]
 8006872:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006876:	2b00      	cmp	r3, #0
 8006878:	d0a5      	beq.n	80067c6 <_printf_float+0xa6>
 800687a:	232d      	movs	r3, #45	; 0x2d
 800687c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006880:	e7a1      	b.n	80067c6 <_printf_float+0xa6>
 8006882:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006886:	f000 8177 	beq.w	8006b78 <_printf_float+0x458>
 800688a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800688e:	d1bb      	bne.n	8006808 <_printf_float+0xe8>
 8006890:	2900      	cmp	r1, #0
 8006892:	d1b9      	bne.n	8006808 <_printf_float+0xe8>
 8006894:	2301      	movs	r3, #1
 8006896:	e7b6      	b.n	8006806 <_printf_float+0xe6>
 8006898:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800689c:	d119      	bne.n	80068d2 <_printf_float+0x1b2>
 800689e:	2900      	cmp	r1, #0
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	dd0c      	ble.n	80068be <_printf_float+0x19e>
 80068a4:	6121      	str	r1, [r4, #16]
 80068a6:	b913      	cbnz	r3, 80068ae <_printf_float+0x18e>
 80068a8:	6822      	ldr	r2, [r4, #0]
 80068aa:	07d2      	lsls	r2, r2, #31
 80068ac:	d502      	bpl.n	80068b4 <_printf_float+0x194>
 80068ae:	3301      	adds	r3, #1
 80068b0:	440b      	add	r3, r1
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80068b8:	f04f 0900 	mov.w	r9, #0
 80068bc:	e7d9      	b.n	8006872 <_printf_float+0x152>
 80068be:	b913      	cbnz	r3, 80068c6 <_printf_float+0x1a6>
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	07d0      	lsls	r0, r2, #31
 80068c4:	d501      	bpl.n	80068ca <_printf_float+0x1aa>
 80068c6:	3302      	adds	r3, #2
 80068c8:	e7f3      	b.n	80068b2 <_printf_float+0x192>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e7f1      	b.n	80068b2 <_printf_float+0x192>
 80068ce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80068d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068d6:	4293      	cmp	r3, r2
 80068d8:	db05      	blt.n	80068e6 <_printf_float+0x1c6>
 80068da:	6822      	ldr	r2, [r4, #0]
 80068dc:	6123      	str	r3, [r4, #16]
 80068de:	07d1      	lsls	r1, r2, #31
 80068e0:	d5e8      	bpl.n	80068b4 <_printf_float+0x194>
 80068e2:	3301      	adds	r3, #1
 80068e4:	e7e5      	b.n	80068b2 <_printf_float+0x192>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	bfd4      	ite	le
 80068ea:	f1c3 0302 	rsble	r3, r3, #2
 80068ee:	2301      	movgt	r3, #1
 80068f0:	4413      	add	r3, r2
 80068f2:	e7de      	b.n	80068b2 <_printf_float+0x192>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	055a      	lsls	r2, r3, #21
 80068f8:	d407      	bmi.n	800690a <_printf_float+0x1ea>
 80068fa:	6923      	ldr	r3, [r4, #16]
 80068fc:	4642      	mov	r2, r8
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	d12b      	bne.n	8006960 <_printf_float+0x240>
 8006908:	e767      	b.n	80067da <_printf_float+0xba>
 800690a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800690e:	f240 80dc 	bls.w	8006aca <_printf_float+0x3aa>
 8006912:	2200      	movs	r2, #0
 8006914:	2300      	movs	r3, #0
 8006916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800691a:	f7fa f8d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800691e:	2800      	cmp	r0, #0
 8006920:	d033      	beq.n	800698a <_printf_float+0x26a>
 8006922:	2301      	movs	r3, #1
 8006924:	4a41      	ldr	r2, [pc, #260]	; (8006a2c <_printf_float+0x30c>)
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f af54 	beq.w	80067da <_printf_float+0xba>
 8006932:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006936:	429a      	cmp	r2, r3
 8006938:	db02      	blt.n	8006940 <_printf_float+0x220>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	07d8      	lsls	r0, r3, #31
 800693e:	d50f      	bpl.n	8006960 <_printf_float+0x240>
 8006940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af45 	beq.w	80067da <_printf_float+0xba>
 8006950:	f04f 0800 	mov.w	r8, #0
 8006954:	f104 091a 	add.w	r9, r4, #26
 8006958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695a:	3b01      	subs	r3, #1
 800695c:	4543      	cmp	r3, r8
 800695e:	dc09      	bgt.n	8006974 <_printf_float+0x254>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	079b      	lsls	r3, r3, #30
 8006964:	f100 8103 	bmi.w	8006b6e <_printf_float+0x44e>
 8006968:	68e0      	ldr	r0, [r4, #12]
 800696a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696c:	4298      	cmp	r0, r3
 800696e:	bfb8      	it	lt
 8006970:	4618      	movlt	r0, r3
 8006972:	e734      	b.n	80067de <_printf_float+0xbe>
 8006974:	2301      	movs	r3, #1
 8006976:	464a      	mov	r2, r9
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f af2b 	beq.w	80067da <_printf_float+0xba>
 8006984:	f108 0801 	add.w	r8, r8, #1
 8006988:	e7e6      	b.n	8006958 <_printf_float+0x238>
 800698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	dc2b      	bgt.n	80069e8 <_printf_float+0x2c8>
 8006990:	2301      	movs	r3, #1
 8006992:	4a26      	ldr	r2, [pc, #152]	; (8006a2c <_printf_float+0x30c>)
 8006994:	4631      	mov	r1, r6
 8006996:	4628      	mov	r0, r5
 8006998:	47b8      	blx	r7
 800699a:	3001      	adds	r0, #1
 800699c:	f43f af1d 	beq.w	80067da <_printf_float+0xba>
 80069a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a2:	b923      	cbnz	r3, 80069ae <_printf_float+0x28e>
 80069a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a6:	b913      	cbnz	r3, 80069ae <_printf_float+0x28e>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	d5d8      	bpl.n	8006960 <_printf_float+0x240>
 80069ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069b2:	4631      	mov	r1, r6
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b8      	blx	r7
 80069b8:	3001      	adds	r0, #1
 80069ba:	f43f af0e 	beq.w	80067da <_printf_float+0xba>
 80069be:	f04f 0900 	mov.w	r9, #0
 80069c2:	f104 0a1a 	add.w	sl, r4, #26
 80069c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c8:	425b      	negs	r3, r3
 80069ca:	454b      	cmp	r3, r9
 80069cc:	dc01      	bgt.n	80069d2 <_printf_float+0x2b2>
 80069ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d0:	e794      	b.n	80068fc <_printf_float+0x1dc>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4652      	mov	r2, sl
 80069d6:	4631      	mov	r1, r6
 80069d8:	4628      	mov	r0, r5
 80069da:	47b8      	blx	r7
 80069dc:	3001      	adds	r0, #1
 80069de:	f43f aefc 	beq.w	80067da <_printf_float+0xba>
 80069e2:	f109 0901 	add.w	r9, r9, #1
 80069e6:	e7ee      	b.n	80069c6 <_printf_float+0x2a6>
 80069e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ec:	429a      	cmp	r2, r3
 80069ee:	bfa8      	it	ge
 80069f0:	461a      	movge	r2, r3
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	4691      	mov	r9, r2
 80069f6:	dd07      	ble.n	8006a08 <_printf_float+0x2e8>
 80069f8:	4613      	mov	r3, r2
 80069fa:	4631      	mov	r1, r6
 80069fc:	4642      	mov	r2, r8
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	f43f aee9 	beq.w	80067da <_printf_float+0xba>
 8006a08:	f104 031a 	add.w	r3, r4, #26
 8006a0c:	f04f 0b00 	mov.w	fp, #0
 8006a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a14:	9306      	str	r3, [sp, #24]
 8006a16:	e015      	b.n	8006a44 <_printf_float+0x324>
 8006a18:	7fefffff 	.word	0x7fefffff
 8006a1c:	08008ed0 	.word	0x08008ed0
 8006a20:	08008ecc 	.word	0x08008ecc
 8006a24:	08008ed8 	.word	0x08008ed8
 8006a28:	08008ed4 	.word	0x08008ed4
 8006a2c:	08008edc 	.word	0x08008edc
 8006a30:	2301      	movs	r3, #1
 8006a32:	9a06      	ldr	r2, [sp, #24]
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f aecd 	beq.w	80067da <_printf_float+0xba>
 8006a40:	f10b 0b01 	add.w	fp, fp, #1
 8006a44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006a48:	ebaa 0309 	sub.w	r3, sl, r9
 8006a4c:	455b      	cmp	r3, fp
 8006a4e:	dcef      	bgt.n	8006a30 <_printf_float+0x310>
 8006a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a54:	429a      	cmp	r2, r3
 8006a56:	44d0      	add	r8, sl
 8006a58:	db15      	blt.n	8006a86 <_printf_float+0x366>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	07da      	lsls	r2, r3, #31
 8006a5e:	d412      	bmi.n	8006a86 <_printf_float+0x366>
 8006a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a64:	eba3 020a 	sub.w	r2, r3, sl
 8006a68:	eba3 0a01 	sub.w	sl, r3, r1
 8006a6c:	4592      	cmp	sl, r2
 8006a6e:	bfa8      	it	ge
 8006a70:	4692      	movge	sl, r2
 8006a72:	f1ba 0f00 	cmp.w	sl, #0
 8006a76:	dc0e      	bgt.n	8006a96 <_printf_float+0x376>
 8006a78:	f04f 0800 	mov.w	r8, #0
 8006a7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a80:	f104 091a 	add.w	r9, r4, #26
 8006a84:	e019      	b.n	8006aba <_printf_float+0x39a>
 8006a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	d1e5      	bne.n	8006a60 <_printf_float+0x340>
 8006a94:	e6a1      	b.n	80067da <_printf_float+0xba>
 8006a96:	4653      	mov	r3, sl
 8006a98:	4642      	mov	r2, r8
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d1e9      	bne.n	8006a78 <_printf_float+0x358>
 8006aa4:	e699      	b.n	80067da <_printf_float+0xba>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f ae92 	beq.w	80067da <_printf_float+0xba>
 8006ab6:	f108 0801 	add.w	r8, r8, #1
 8006aba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	eba3 030a 	sub.w	r3, r3, sl
 8006ac4:	4543      	cmp	r3, r8
 8006ac6:	dcee      	bgt.n	8006aa6 <_printf_float+0x386>
 8006ac8:	e74a      	b.n	8006960 <_printf_float+0x240>
 8006aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006acc:	2a01      	cmp	r2, #1
 8006ace:	dc01      	bgt.n	8006ad4 <_printf_float+0x3b4>
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d53a      	bpl.n	8006b4a <_printf_float+0x42a>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f43f ae7b 	beq.w	80067da <_printf_float+0xba>
 8006ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	f108 0801 	add.w	r8, r8, #1
 8006af4:	f43f ae71 	beq.w	80067da <_printf_float+0xba>
 8006af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006afa:	2200      	movs	r2, #0
 8006afc:	f103 3aff 	add.w	sl, r3, #4294967295
 8006b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b04:	2300      	movs	r3, #0
 8006b06:	f7f9 ffdf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b0a:	b9c8      	cbnz	r0, 8006b40 <_printf_float+0x420>
 8006b0c:	4653      	mov	r3, sl
 8006b0e:	4642      	mov	r2, r8
 8006b10:	4631      	mov	r1, r6
 8006b12:	4628      	mov	r0, r5
 8006b14:	47b8      	blx	r7
 8006b16:	3001      	adds	r0, #1
 8006b18:	d10e      	bne.n	8006b38 <_printf_float+0x418>
 8006b1a:	e65e      	b.n	80067da <_printf_float+0xba>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	4652      	mov	r2, sl
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f ae57 	beq.w	80067da <_printf_float+0xba>
 8006b2c:	f108 0801 	add.w	r8, r8, #1
 8006b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	4543      	cmp	r3, r8
 8006b36:	dcf1      	bgt.n	8006b1c <_printf_float+0x3fc>
 8006b38:	464b      	mov	r3, r9
 8006b3a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b3e:	e6de      	b.n	80068fe <_printf_float+0x1de>
 8006b40:	f04f 0800 	mov.w	r8, #0
 8006b44:	f104 0a1a 	add.w	sl, r4, #26
 8006b48:	e7f2      	b.n	8006b30 <_printf_float+0x410>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e7df      	b.n	8006b0e <_printf_float+0x3ee>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	464a      	mov	r2, r9
 8006b52:	4631      	mov	r1, r6
 8006b54:	4628      	mov	r0, r5
 8006b56:	47b8      	blx	r7
 8006b58:	3001      	adds	r0, #1
 8006b5a:	f43f ae3e 	beq.w	80067da <_printf_float+0xba>
 8006b5e:	f108 0801 	add.w	r8, r8, #1
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	4543      	cmp	r3, r8
 8006b6a:	dcf0      	bgt.n	8006b4e <_printf_float+0x42e>
 8006b6c:	e6fc      	b.n	8006968 <_printf_float+0x248>
 8006b6e:	f04f 0800 	mov.w	r8, #0
 8006b72:	f104 0919 	add.w	r9, r4, #25
 8006b76:	e7f4      	b.n	8006b62 <_printf_float+0x442>
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	f43f ae8b 	beq.w	8006894 <_printf_float+0x174>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006b84:	ab09      	add	r3, sp, #36	; 0x24
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	ec49 8b10 	vmov	d0, r8, r9
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	f8cd a004 	str.w	sl, [sp, #4]
 8006b92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7ff fd2d 	bl	80065f6 <__cvt>
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	e648      	b.n	8006832 <_printf_float+0x112>

08006ba0 <_printf_common>:
 8006ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	4691      	mov	r9, r2
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	688a      	ldr	r2, [r1, #8]
 8006baa:	690b      	ldr	r3, [r1, #16]
 8006bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	bfb8      	it	lt
 8006bb4:	4613      	movlt	r3, r2
 8006bb6:	f8c9 3000 	str.w	r3, [r9]
 8006bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	b112      	cbz	r2, 8006bca <_printf_common+0x2a>
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	f8c9 3000 	str.w	r3, [r9]
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	0699      	lsls	r1, r3, #26
 8006bce:	bf42      	ittt	mi
 8006bd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006bd4:	3302      	addmi	r3, #2
 8006bd6:	f8c9 3000 	strmi.w	r3, [r9]
 8006bda:	6825      	ldr	r5, [r4, #0]
 8006bdc:	f015 0506 	ands.w	r5, r5, #6
 8006be0:	d107      	bne.n	8006bf2 <_printf_common+0x52>
 8006be2:	f104 0a19 	add.w	sl, r4, #25
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	f8d9 2000 	ldr.w	r2, [r9]
 8006bec:	1a9b      	subs	r3, r3, r2
 8006bee:	42ab      	cmp	r3, r5
 8006bf0:	dc28      	bgt.n	8006c44 <_printf_common+0xa4>
 8006bf2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006bf6:	6822      	ldr	r2, [r4, #0]
 8006bf8:	3300      	adds	r3, #0
 8006bfa:	bf18      	it	ne
 8006bfc:	2301      	movne	r3, #1
 8006bfe:	0692      	lsls	r2, r2, #26
 8006c00:	d42d      	bmi.n	8006c5e <_printf_common+0xbe>
 8006c02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c06:	4639      	mov	r1, r7
 8006c08:	4630      	mov	r0, r6
 8006c0a:	47c0      	blx	r8
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d020      	beq.n	8006c52 <_printf_common+0xb2>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	68e5      	ldr	r5, [r4, #12]
 8006c14:	f8d9 2000 	ldr.w	r2, [r9]
 8006c18:	f003 0306 	and.w	r3, r3, #6
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	bf08      	it	eq
 8006c20:	1aad      	subeq	r5, r5, r2
 8006c22:	68a3      	ldr	r3, [r4, #8]
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	bf0c      	ite	eq
 8006c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c2c:	2500      	movne	r5, #0
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	bfc4      	itt	gt
 8006c32:	1a9b      	subgt	r3, r3, r2
 8006c34:	18ed      	addgt	r5, r5, r3
 8006c36:	f04f 0900 	mov.w	r9, #0
 8006c3a:	341a      	adds	r4, #26
 8006c3c:	454d      	cmp	r5, r9
 8006c3e:	d11a      	bne.n	8006c76 <_printf_common+0xd6>
 8006c40:	2000      	movs	r0, #0
 8006c42:	e008      	b.n	8006c56 <_printf_common+0xb6>
 8006c44:	2301      	movs	r3, #1
 8006c46:	4652      	mov	r2, sl
 8006c48:	4639      	mov	r1, r7
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	47c0      	blx	r8
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d103      	bne.n	8006c5a <_printf_common+0xba>
 8006c52:	f04f 30ff 	mov.w	r0, #4294967295
 8006c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c5a:	3501      	adds	r5, #1
 8006c5c:	e7c3      	b.n	8006be6 <_printf_common+0x46>
 8006c5e:	18e1      	adds	r1, r4, r3
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	2030      	movs	r0, #48	; 0x30
 8006c64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c68:	4422      	add	r2, r4
 8006c6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c72:	3302      	adds	r3, #2
 8006c74:	e7c5      	b.n	8006c02 <_printf_common+0x62>
 8006c76:	2301      	movs	r3, #1
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4639      	mov	r1, r7
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	47c0      	blx	r8
 8006c80:	3001      	adds	r0, #1
 8006c82:	d0e6      	beq.n	8006c52 <_printf_common+0xb2>
 8006c84:	f109 0901 	add.w	r9, r9, #1
 8006c88:	e7d8      	b.n	8006c3c <_printf_common+0x9c>
	...

08006c8c <_printf_i>:
 8006c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006c94:	460c      	mov	r4, r1
 8006c96:	7e09      	ldrb	r1, [r1, #24]
 8006c98:	b085      	sub	sp, #20
 8006c9a:	296e      	cmp	r1, #110	; 0x6e
 8006c9c:	4617      	mov	r7, r2
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	4698      	mov	r8, r3
 8006ca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ca4:	f000 80b3 	beq.w	8006e0e <_printf_i+0x182>
 8006ca8:	d822      	bhi.n	8006cf0 <_printf_i+0x64>
 8006caa:	2963      	cmp	r1, #99	; 0x63
 8006cac:	d036      	beq.n	8006d1c <_printf_i+0x90>
 8006cae:	d80a      	bhi.n	8006cc6 <_printf_i+0x3a>
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	f000 80b9 	beq.w	8006e28 <_printf_i+0x19c>
 8006cb6:	2958      	cmp	r1, #88	; 0x58
 8006cb8:	f000 8083 	beq.w	8006dc2 <_printf_i+0x136>
 8006cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006cc4:	e032      	b.n	8006d2c <_printf_i+0xa0>
 8006cc6:	2964      	cmp	r1, #100	; 0x64
 8006cc8:	d001      	beq.n	8006cce <_printf_i+0x42>
 8006cca:	2969      	cmp	r1, #105	; 0x69
 8006ccc:	d1f6      	bne.n	8006cbc <_printf_i+0x30>
 8006cce:	6820      	ldr	r0, [r4, #0]
 8006cd0:	6813      	ldr	r3, [r2, #0]
 8006cd2:	0605      	lsls	r5, r0, #24
 8006cd4:	f103 0104 	add.w	r1, r3, #4
 8006cd8:	d52a      	bpl.n	8006d30 <_printf_i+0xa4>
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	da03      	bge.n	8006cea <_printf_i+0x5e>
 8006ce2:	222d      	movs	r2, #45	; 0x2d
 8006ce4:	425b      	negs	r3, r3
 8006ce6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006cea:	486f      	ldr	r0, [pc, #444]	; (8006ea8 <_printf_i+0x21c>)
 8006cec:	220a      	movs	r2, #10
 8006cee:	e039      	b.n	8006d64 <_printf_i+0xd8>
 8006cf0:	2973      	cmp	r1, #115	; 0x73
 8006cf2:	f000 809d 	beq.w	8006e30 <_printf_i+0x1a4>
 8006cf6:	d808      	bhi.n	8006d0a <_printf_i+0x7e>
 8006cf8:	296f      	cmp	r1, #111	; 0x6f
 8006cfa:	d020      	beq.n	8006d3e <_printf_i+0xb2>
 8006cfc:	2970      	cmp	r1, #112	; 0x70
 8006cfe:	d1dd      	bne.n	8006cbc <_printf_i+0x30>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	f043 0320 	orr.w	r3, r3, #32
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	e003      	b.n	8006d12 <_printf_i+0x86>
 8006d0a:	2975      	cmp	r1, #117	; 0x75
 8006d0c:	d017      	beq.n	8006d3e <_printf_i+0xb2>
 8006d0e:	2978      	cmp	r1, #120	; 0x78
 8006d10:	d1d4      	bne.n	8006cbc <_printf_i+0x30>
 8006d12:	2378      	movs	r3, #120	; 0x78
 8006d14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d18:	4864      	ldr	r0, [pc, #400]	; (8006eac <_printf_i+0x220>)
 8006d1a:	e055      	b.n	8006dc8 <_printf_i+0x13c>
 8006d1c:	6813      	ldr	r3, [r2, #0]
 8006d1e:	1d19      	adds	r1, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6011      	str	r1, [r2, #0]
 8006d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e08c      	b.n	8006e4a <_printf_i+0x1be>
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6011      	str	r1, [r2, #0]
 8006d34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d38:	bf18      	it	ne
 8006d3a:	b21b      	sxthne	r3, r3
 8006d3c:	e7cf      	b.n	8006cde <_printf_i+0x52>
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	6825      	ldr	r5, [r4, #0]
 8006d42:	1d18      	adds	r0, r3, #4
 8006d44:	6010      	str	r0, [r2, #0]
 8006d46:	0628      	lsls	r0, r5, #24
 8006d48:	d501      	bpl.n	8006d4e <_printf_i+0xc2>
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	e002      	b.n	8006d54 <_printf_i+0xc8>
 8006d4e:	0668      	lsls	r0, r5, #25
 8006d50:	d5fb      	bpl.n	8006d4a <_printf_i+0xbe>
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	4854      	ldr	r0, [pc, #336]	; (8006ea8 <_printf_i+0x21c>)
 8006d56:	296f      	cmp	r1, #111	; 0x6f
 8006d58:	bf14      	ite	ne
 8006d5a:	220a      	movne	r2, #10
 8006d5c:	2208      	moveq	r2, #8
 8006d5e:	2100      	movs	r1, #0
 8006d60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d64:	6865      	ldr	r5, [r4, #4]
 8006d66:	60a5      	str	r5, [r4, #8]
 8006d68:	2d00      	cmp	r5, #0
 8006d6a:	f2c0 8095 	blt.w	8006e98 <_printf_i+0x20c>
 8006d6e:	6821      	ldr	r1, [r4, #0]
 8006d70:	f021 0104 	bic.w	r1, r1, #4
 8006d74:	6021      	str	r1, [r4, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d13d      	bne.n	8006df6 <_printf_i+0x16a>
 8006d7a:	2d00      	cmp	r5, #0
 8006d7c:	f040 808e 	bne.w	8006e9c <_printf_i+0x210>
 8006d80:	4665      	mov	r5, ip
 8006d82:	2a08      	cmp	r2, #8
 8006d84:	d10b      	bne.n	8006d9e <_printf_i+0x112>
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	07db      	lsls	r3, r3, #31
 8006d8a:	d508      	bpl.n	8006d9e <_printf_i+0x112>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	6862      	ldr	r2, [r4, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	bfde      	ittt	le
 8006d94:	2330      	movle	r3, #48	; 0x30
 8006d96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d9e:	ebac 0305 	sub.w	r3, ip, r5
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	f8cd 8000 	str.w	r8, [sp]
 8006da8:	463b      	mov	r3, r7
 8006daa:	aa03      	add	r2, sp, #12
 8006dac:	4621      	mov	r1, r4
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7ff fef6 	bl	8006ba0 <_printf_common>
 8006db4:	3001      	adds	r0, #1
 8006db6:	d14d      	bne.n	8006e54 <_printf_i+0x1c8>
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	b005      	add	sp, #20
 8006dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dc2:	4839      	ldr	r0, [pc, #228]	; (8006ea8 <_printf_i+0x21c>)
 8006dc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006dc8:	6813      	ldr	r3, [r2, #0]
 8006dca:	6821      	ldr	r1, [r4, #0]
 8006dcc:	1d1d      	adds	r5, r3, #4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6015      	str	r5, [r2, #0]
 8006dd2:	060a      	lsls	r2, r1, #24
 8006dd4:	d50b      	bpl.n	8006dee <_printf_i+0x162>
 8006dd6:	07ca      	lsls	r2, r1, #31
 8006dd8:	bf44      	itt	mi
 8006dda:	f041 0120 	orrmi.w	r1, r1, #32
 8006dde:	6021      	strmi	r1, [r4, #0]
 8006de0:	b91b      	cbnz	r3, 8006dea <_printf_i+0x15e>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	f022 0220 	bic.w	r2, r2, #32
 8006de8:	6022      	str	r2, [r4, #0]
 8006dea:	2210      	movs	r2, #16
 8006dec:	e7b7      	b.n	8006d5e <_printf_i+0xd2>
 8006dee:	064d      	lsls	r5, r1, #25
 8006df0:	bf48      	it	mi
 8006df2:	b29b      	uxthmi	r3, r3
 8006df4:	e7ef      	b.n	8006dd6 <_printf_i+0x14a>
 8006df6:	4665      	mov	r5, ip
 8006df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dfc:	fb02 3311 	mls	r3, r2, r1, r3
 8006e00:	5cc3      	ldrb	r3, [r0, r3]
 8006e02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006e06:	460b      	mov	r3, r1
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d1f5      	bne.n	8006df8 <_printf_i+0x16c>
 8006e0c:	e7b9      	b.n	8006d82 <_printf_i+0xf6>
 8006e0e:	6813      	ldr	r3, [r2, #0]
 8006e10:	6825      	ldr	r5, [r4, #0]
 8006e12:	6961      	ldr	r1, [r4, #20]
 8006e14:	1d18      	adds	r0, r3, #4
 8006e16:	6010      	str	r0, [r2, #0]
 8006e18:	0628      	lsls	r0, r5, #24
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	d501      	bpl.n	8006e22 <_printf_i+0x196>
 8006e1e:	6019      	str	r1, [r3, #0]
 8006e20:	e002      	b.n	8006e28 <_printf_i+0x19c>
 8006e22:	066a      	lsls	r2, r5, #25
 8006e24:	d5fb      	bpl.n	8006e1e <_printf_i+0x192>
 8006e26:	8019      	strh	r1, [r3, #0]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	4665      	mov	r5, ip
 8006e2e:	e7b9      	b.n	8006da4 <_printf_i+0x118>
 8006e30:	6813      	ldr	r3, [r2, #0]
 8006e32:	1d19      	adds	r1, r3, #4
 8006e34:	6011      	str	r1, [r2, #0]
 8006e36:	681d      	ldr	r5, [r3, #0]
 8006e38:	6862      	ldr	r2, [r4, #4]
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f7f9 f9cf 	bl	80001e0 <memchr>
 8006e42:	b108      	cbz	r0, 8006e48 <_printf_i+0x1bc>
 8006e44:	1b40      	subs	r0, r0, r5
 8006e46:	6060      	str	r0, [r4, #4]
 8006e48:	6863      	ldr	r3, [r4, #4]
 8006e4a:	6123      	str	r3, [r4, #16]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e52:	e7a7      	b.n	8006da4 <_printf_i+0x118>
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	462a      	mov	r2, r5
 8006e58:	4639      	mov	r1, r7
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	47c0      	blx	r8
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d0aa      	beq.n	8006db8 <_printf_i+0x12c>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	079b      	lsls	r3, r3, #30
 8006e66:	d413      	bmi.n	8006e90 <_printf_i+0x204>
 8006e68:	68e0      	ldr	r0, [r4, #12]
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	4298      	cmp	r0, r3
 8006e6e:	bfb8      	it	lt
 8006e70:	4618      	movlt	r0, r3
 8006e72:	e7a3      	b.n	8006dbc <_printf_i+0x130>
 8006e74:	2301      	movs	r3, #1
 8006e76:	464a      	mov	r2, r9
 8006e78:	4639      	mov	r1, r7
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	47c0      	blx	r8
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d09a      	beq.n	8006db8 <_printf_i+0x12c>
 8006e82:	3501      	adds	r5, #1
 8006e84:	68e3      	ldr	r3, [r4, #12]
 8006e86:	9a03      	ldr	r2, [sp, #12]
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	42ab      	cmp	r3, r5
 8006e8c:	dcf2      	bgt.n	8006e74 <_printf_i+0x1e8>
 8006e8e:	e7eb      	b.n	8006e68 <_printf_i+0x1dc>
 8006e90:	2500      	movs	r5, #0
 8006e92:	f104 0919 	add.w	r9, r4, #25
 8006e96:	e7f5      	b.n	8006e84 <_printf_i+0x1f8>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ac      	bne.n	8006df6 <_printf_i+0x16a>
 8006e9c:	7803      	ldrb	r3, [r0, #0]
 8006e9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ea2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea6:	e76c      	b.n	8006d82 <_printf_i+0xf6>
 8006ea8:	08008ede 	.word	0x08008ede
 8006eac:	08008eef 	.word	0x08008eef

08006eb0 <iprintf>:
 8006eb0:	b40f      	push	{r0, r1, r2, r3}
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	; (8006edc <iprintf+0x2c>)
 8006eb4:	b513      	push	{r0, r1, r4, lr}
 8006eb6:	681c      	ldr	r4, [r3, #0]
 8006eb8:	b124      	cbz	r4, 8006ec4 <iprintf+0x14>
 8006eba:	69a3      	ldr	r3, [r4, #24]
 8006ebc:	b913      	cbnz	r3, 8006ec4 <iprintf+0x14>
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f001 f916 	bl	80080f0 <__sinit>
 8006ec4:	ab05      	add	r3, sp, #20
 8006ec6:	9a04      	ldr	r2, [sp, #16]
 8006ec8:	68a1      	ldr	r1, [r4, #8]
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f001 fdd9 	bl	8008a84 <_vfiprintf_r>
 8006ed2:	b002      	add	sp, #8
 8006ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed8:	b004      	add	sp, #16
 8006eda:	4770      	bx	lr
 8006edc:	200004a4 	.word	0x200004a4

08006ee0 <_puts_r>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	460e      	mov	r6, r1
 8006ee4:	4605      	mov	r5, r0
 8006ee6:	b118      	cbz	r0, 8006ef0 <_puts_r+0x10>
 8006ee8:	6983      	ldr	r3, [r0, #24]
 8006eea:	b90b      	cbnz	r3, 8006ef0 <_puts_r+0x10>
 8006eec:	f001 f900 	bl	80080f0 <__sinit>
 8006ef0:	69ab      	ldr	r3, [r5, #24]
 8006ef2:	68ac      	ldr	r4, [r5, #8]
 8006ef4:	b913      	cbnz	r3, 8006efc <_puts_r+0x1c>
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f001 f8fa 	bl	80080f0 <__sinit>
 8006efc:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <_puts_r+0xac>)
 8006efe:	429c      	cmp	r4, r3
 8006f00:	d117      	bne.n	8006f32 <_puts_r+0x52>
 8006f02:	686c      	ldr	r4, [r5, #4]
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	071b      	lsls	r3, r3, #28
 8006f08:	d51d      	bpl.n	8006f46 <_puts_r+0x66>
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	b1db      	cbz	r3, 8006f46 <_puts_r+0x66>
 8006f0e:	3e01      	subs	r6, #1
 8006f10:	68a3      	ldr	r3, [r4, #8]
 8006f12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f16:	3b01      	subs	r3, #1
 8006f18:	60a3      	str	r3, [r4, #8]
 8006f1a:	b9e9      	cbnz	r1, 8006f58 <_puts_r+0x78>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	da2e      	bge.n	8006f7e <_puts_r+0x9e>
 8006f20:	4622      	mov	r2, r4
 8006f22:	210a      	movs	r1, #10
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 f8ed 	bl	8007104 <__swbuf_r>
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d011      	beq.n	8006f52 <_puts_r+0x72>
 8006f2e:	200a      	movs	r0, #10
 8006f30:	e011      	b.n	8006f56 <_puts_r+0x76>
 8006f32:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <_puts_r+0xb0>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	d101      	bne.n	8006f3c <_puts_r+0x5c>
 8006f38:	68ac      	ldr	r4, [r5, #8]
 8006f3a:	e7e3      	b.n	8006f04 <_puts_r+0x24>
 8006f3c:	4b15      	ldr	r3, [pc, #84]	; (8006f94 <_puts_r+0xb4>)
 8006f3e:	429c      	cmp	r4, r3
 8006f40:	bf08      	it	eq
 8006f42:	68ec      	ldreq	r4, [r5, #12]
 8006f44:	e7de      	b.n	8006f04 <_puts_r+0x24>
 8006f46:	4621      	mov	r1, r4
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f000 f92d 	bl	80071a8 <__swsetup_r>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0dd      	beq.n	8006f0e <_puts_r+0x2e>
 8006f52:	f04f 30ff 	mov.w	r0, #4294967295
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	da04      	bge.n	8006f66 <_puts_r+0x86>
 8006f5c:	69a2      	ldr	r2, [r4, #24]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	dc06      	bgt.n	8006f70 <_puts_r+0x90>
 8006f62:	290a      	cmp	r1, #10
 8006f64:	d004      	beq.n	8006f70 <_puts_r+0x90>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	6022      	str	r2, [r4, #0]
 8006f6c:	7019      	strb	r1, [r3, #0]
 8006f6e:	e7cf      	b.n	8006f10 <_puts_r+0x30>
 8006f70:	4622      	mov	r2, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f8c6 	bl	8007104 <__swbuf_r>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d1c9      	bne.n	8006f10 <_puts_r+0x30>
 8006f7c:	e7e9      	b.n	8006f52 <_puts_r+0x72>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	200a      	movs	r0, #10
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	7018      	strb	r0, [r3, #0]
 8006f88:	e7e5      	b.n	8006f56 <_puts_r+0x76>
 8006f8a:	bf00      	nop
 8006f8c:	08008f30 	.word	0x08008f30
 8006f90:	08008f50 	.word	0x08008f50
 8006f94:	08008f10 	.word	0x08008f10

08006f98 <puts>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <puts+0xc>)
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f7ff bf9f 	b.w	8006ee0 <_puts_r>
 8006fa2:	bf00      	nop
 8006fa4:	200004a4 	.word	0x200004a4

08006fa8 <setvbuf>:
 8006fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	461d      	mov	r5, r3
 8006fae:	4b51      	ldr	r3, [pc, #324]	; (80070f4 <setvbuf+0x14c>)
 8006fb0:	681e      	ldr	r6, [r3, #0]
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	4690      	mov	r8, r2
 8006fb8:	b126      	cbz	r6, 8006fc4 <setvbuf+0x1c>
 8006fba:	69b3      	ldr	r3, [r6, #24]
 8006fbc:	b913      	cbnz	r3, 8006fc4 <setvbuf+0x1c>
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f001 f896 	bl	80080f0 <__sinit>
 8006fc4:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <setvbuf+0x150>)
 8006fc6:	429c      	cmp	r4, r3
 8006fc8:	d152      	bne.n	8007070 <setvbuf+0xc8>
 8006fca:	6874      	ldr	r4, [r6, #4]
 8006fcc:	f1b8 0f02 	cmp.w	r8, #2
 8006fd0:	d006      	beq.n	8006fe0 <setvbuf+0x38>
 8006fd2:	f1b8 0f01 	cmp.w	r8, #1
 8006fd6:	f200 8089 	bhi.w	80070ec <setvbuf+0x144>
 8006fda:	2d00      	cmp	r5, #0
 8006fdc:	f2c0 8086 	blt.w	80070ec <setvbuf+0x144>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f001 f81a 	bl	800801c <_fflush_r>
 8006fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fea:	b141      	cbz	r1, 8006ffe <setvbuf+0x56>
 8006fec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	d002      	beq.n	8006ffa <setvbuf+0x52>
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	f001 fc73 	bl	80088e0 <_free_r>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	6363      	str	r3, [r4, #52]	; 0x34
 8006ffe:	2300      	movs	r3, #0
 8007000:	61a3      	str	r3, [r4, #24]
 8007002:	6063      	str	r3, [r4, #4]
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	061b      	lsls	r3, r3, #24
 8007008:	d503      	bpl.n	8007012 <setvbuf+0x6a>
 800700a:	6921      	ldr	r1, [r4, #16]
 800700c:	4630      	mov	r0, r6
 800700e:	f001 fc67 	bl	80088e0 <_free_r>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007018:	f023 0303 	bic.w	r3, r3, #3
 800701c:	f1b8 0f02 	cmp.w	r8, #2
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	d05d      	beq.n	80070e0 <setvbuf+0x138>
 8007024:	ab01      	add	r3, sp, #4
 8007026:	466a      	mov	r2, sp
 8007028:	4621      	mov	r1, r4
 800702a:	4630      	mov	r0, r6
 800702c:	f001 f8f8 	bl	8008220 <__swhatbuf_r>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	4318      	orrs	r0, r3
 8007034:	81a0      	strh	r0, [r4, #12]
 8007036:	bb2d      	cbnz	r5, 8007084 <setvbuf+0xdc>
 8007038:	9d00      	ldr	r5, [sp, #0]
 800703a:	4628      	mov	r0, r5
 800703c:	f001 f954 	bl	80082e8 <malloc>
 8007040:	4607      	mov	r7, r0
 8007042:	2800      	cmp	r0, #0
 8007044:	d14e      	bne.n	80070e4 <setvbuf+0x13c>
 8007046:	f8dd 9000 	ldr.w	r9, [sp]
 800704a:	45a9      	cmp	r9, r5
 800704c:	d13c      	bne.n	80070c8 <setvbuf+0x120>
 800704e:	f04f 30ff 	mov.w	r0, #4294967295
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	f043 0302 	orr.w	r3, r3, #2
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	2300      	movs	r3, #0
 800705c:	60a3      	str	r3, [r4, #8]
 800705e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007062:	6023      	str	r3, [r4, #0]
 8007064:	6123      	str	r3, [r4, #16]
 8007066:	2301      	movs	r3, #1
 8007068:	6163      	str	r3, [r4, #20]
 800706a:	b003      	add	sp, #12
 800706c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007070:	4b22      	ldr	r3, [pc, #136]	; (80070fc <setvbuf+0x154>)
 8007072:	429c      	cmp	r4, r3
 8007074:	d101      	bne.n	800707a <setvbuf+0xd2>
 8007076:	68b4      	ldr	r4, [r6, #8]
 8007078:	e7a8      	b.n	8006fcc <setvbuf+0x24>
 800707a:	4b21      	ldr	r3, [pc, #132]	; (8007100 <setvbuf+0x158>)
 800707c:	429c      	cmp	r4, r3
 800707e:	bf08      	it	eq
 8007080:	68f4      	ldreq	r4, [r6, #12]
 8007082:	e7a3      	b.n	8006fcc <setvbuf+0x24>
 8007084:	2f00      	cmp	r7, #0
 8007086:	d0d8      	beq.n	800703a <setvbuf+0x92>
 8007088:	69b3      	ldr	r3, [r6, #24]
 800708a:	b913      	cbnz	r3, 8007092 <setvbuf+0xea>
 800708c:	4630      	mov	r0, r6
 800708e:	f001 f82f 	bl	80080f0 <__sinit>
 8007092:	f1b8 0f01 	cmp.w	r8, #1
 8007096:	bf08      	it	eq
 8007098:	89a3      	ldrheq	r3, [r4, #12]
 800709a:	6027      	str	r7, [r4, #0]
 800709c:	bf04      	itt	eq
 800709e:	f043 0301 	orreq.w	r3, r3, #1
 80070a2:	81a3      	strheq	r3, [r4, #12]
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f013 0008 	ands.w	r0, r3, #8
 80070aa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80070ae:	d01b      	beq.n	80070e8 <setvbuf+0x140>
 80070b0:	f013 0001 	ands.w	r0, r3, #1
 80070b4:	bf18      	it	ne
 80070b6:	426d      	negne	r5, r5
 80070b8:	f04f 0300 	mov.w	r3, #0
 80070bc:	bf1d      	ittte	ne
 80070be:	60a3      	strne	r3, [r4, #8]
 80070c0:	61a5      	strne	r5, [r4, #24]
 80070c2:	4618      	movne	r0, r3
 80070c4:	60a5      	streq	r5, [r4, #8]
 80070c6:	e7d0      	b.n	800706a <setvbuf+0xc2>
 80070c8:	4648      	mov	r0, r9
 80070ca:	f001 f90d 	bl	80082e8 <malloc>
 80070ce:	4607      	mov	r7, r0
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d0bc      	beq.n	800704e <setvbuf+0xa6>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	464d      	mov	r5, r9
 80070de:	e7d3      	b.n	8007088 <setvbuf+0xe0>
 80070e0:	2000      	movs	r0, #0
 80070e2:	e7b6      	b.n	8007052 <setvbuf+0xaa>
 80070e4:	46a9      	mov	r9, r5
 80070e6:	e7f5      	b.n	80070d4 <setvbuf+0x12c>
 80070e8:	60a0      	str	r0, [r4, #8]
 80070ea:	e7be      	b.n	800706a <setvbuf+0xc2>
 80070ec:	f04f 30ff 	mov.w	r0, #4294967295
 80070f0:	e7bb      	b.n	800706a <setvbuf+0xc2>
 80070f2:	bf00      	nop
 80070f4:	200004a4 	.word	0x200004a4
 80070f8:	08008f30 	.word	0x08008f30
 80070fc:	08008f50 	.word	0x08008f50
 8007100:	08008f10 	.word	0x08008f10

08007104 <__swbuf_r>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	460e      	mov	r6, r1
 8007108:	4614      	mov	r4, r2
 800710a:	4605      	mov	r5, r0
 800710c:	b118      	cbz	r0, 8007116 <__swbuf_r+0x12>
 800710e:	6983      	ldr	r3, [r0, #24]
 8007110:	b90b      	cbnz	r3, 8007116 <__swbuf_r+0x12>
 8007112:	f000 ffed 	bl	80080f0 <__sinit>
 8007116:	4b21      	ldr	r3, [pc, #132]	; (800719c <__swbuf_r+0x98>)
 8007118:	429c      	cmp	r4, r3
 800711a:	d12a      	bne.n	8007172 <__swbuf_r+0x6e>
 800711c:	686c      	ldr	r4, [r5, #4]
 800711e:	69a3      	ldr	r3, [r4, #24]
 8007120:	60a3      	str	r3, [r4, #8]
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	071a      	lsls	r2, r3, #28
 8007126:	d52e      	bpl.n	8007186 <__swbuf_r+0x82>
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	b363      	cbz	r3, 8007186 <__swbuf_r+0x82>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	6820      	ldr	r0, [r4, #0]
 8007130:	1ac0      	subs	r0, r0, r3
 8007132:	6963      	ldr	r3, [r4, #20]
 8007134:	b2f6      	uxtb	r6, r6
 8007136:	4283      	cmp	r3, r0
 8007138:	4637      	mov	r7, r6
 800713a:	dc04      	bgt.n	8007146 <__swbuf_r+0x42>
 800713c:	4621      	mov	r1, r4
 800713e:	4628      	mov	r0, r5
 8007140:	f000 ff6c 	bl	800801c <_fflush_r>
 8007144:	bb28      	cbnz	r0, 8007192 <__swbuf_r+0x8e>
 8007146:	68a3      	ldr	r3, [r4, #8]
 8007148:	3b01      	subs	r3, #1
 800714a:	60a3      	str	r3, [r4, #8]
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	6022      	str	r2, [r4, #0]
 8007152:	701e      	strb	r6, [r3, #0]
 8007154:	6963      	ldr	r3, [r4, #20]
 8007156:	3001      	adds	r0, #1
 8007158:	4283      	cmp	r3, r0
 800715a:	d004      	beq.n	8007166 <__swbuf_r+0x62>
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	07db      	lsls	r3, r3, #31
 8007160:	d519      	bpl.n	8007196 <__swbuf_r+0x92>
 8007162:	2e0a      	cmp	r6, #10
 8007164:	d117      	bne.n	8007196 <__swbuf_r+0x92>
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	f000 ff57 	bl	800801c <_fflush_r>
 800716e:	b190      	cbz	r0, 8007196 <__swbuf_r+0x92>
 8007170:	e00f      	b.n	8007192 <__swbuf_r+0x8e>
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <__swbuf_r+0x9c>)
 8007174:	429c      	cmp	r4, r3
 8007176:	d101      	bne.n	800717c <__swbuf_r+0x78>
 8007178:	68ac      	ldr	r4, [r5, #8]
 800717a:	e7d0      	b.n	800711e <__swbuf_r+0x1a>
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <__swbuf_r+0xa0>)
 800717e:	429c      	cmp	r4, r3
 8007180:	bf08      	it	eq
 8007182:	68ec      	ldreq	r4, [r5, #12]
 8007184:	e7cb      	b.n	800711e <__swbuf_r+0x1a>
 8007186:	4621      	mov	r1, r4
 8007188:	4628      	mov	r0, r5
 800718a:	f000 f80d 	bl	80071a8 <__swsetup_r>
 800718e:	2800      	cmp	r0, #0
 8007190:	d0cc      	beq.n	800712c <__swbuf_r+0x28>
 8007192:	f04f 37ff 	mov.w	r7, #4294967295
 8007196:	4638      	mov	r0, r7
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800719a:	bf00      	nop
 800719c:	08008f30 	.word	0x08008f30
 80071a0:	08008f50 	.word	0x08008f50
 80071a4:	08008f10 	.word	0x08008f10

080071a8 <__swsetup_r>:
 80071a8:	4b32      	ldr	r3, [pc, #200]	; (8007274 <__swsetup_r+0xcc>)
 80071aa:	b570      	push	{r4, r5, r6, lr}
 80071ac:	681d      	ldr	r5, [r3, #0]
 80071ae:	4606      	mov	r6, r0
 80071b0:	460c      	mov	r4, r1
 80071b2:	b125      	cbz	r5, 80071be <__swsetup_r+0x16>
 80071b4:	69ab      	ldr	r3, [r5, #24]
 80071b6:	b913      	cbnz	r3, 80071be <__swsetup_r+0x16>
 80071b8:	4628      	mov	r0, r5
 80071ba:	f000 ff99 	bl	80080f0 <__sinit>
 80071be:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <__swsetup_r+0xd0>)
 80071c0:	429c      	cmp	r4, r3
 80071c2:	d10f      	bne.n	80071e4 <__swsetup_r+0x3c>
 80071c4:	686c      	ldr	r4, [r5, #4]
 80071c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	0715      	lsls	r5, r2, #28
 80071ce:	d42c      	bmi.n	800722a <__swsetup_r+0x82>
 80071d0:	06d0      	lsls	r0, r2, #27
 80071d2:	d411      	bmi.n	80071f8 <__swsetup_r+0x50>
 80071d4:	2209      	movs	r2, #9
 80071d6:	6032      	str	r2, [r6, #0]
 80071d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	e03e      	b.n	8007262 <__swsetup_r+0xba>
 80071e4:	4b25      	ldr	r3, [pc, #148]	; (800727c <__swsetup_r+0xd4>)
 80071e6:	429c      	cmp	r4, r3
 80071e8:	d101      	bne.n	80071ee <__swsetup_r+0x46>
 80071ea:	68ac      	ldr	r4, [r5, #8]
 80071ec:	e7eb      	b.n	80071c6 <__swsetup_r+0x1e>
 80071ee:	4b24      	ldr	r3, [pc, #144]	; (8007280 <__swsetup_r+0xd8>)
 80071f0:	429c      	cmp	r4, r3
 80071f2:	bf08      	it	eq
 80071f4:	68ec      	ldreq	r4, [r5, #12]
 80071f6:	e7e6      	b.n	80071c6 <__swsetup_r+0x1e>
 80071f8:	0751      	lsls	r1, r2, #29
 80071fa:	d512      	bpl.n	8007222 <__swsetup_r+0x7a>
 80071fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071fe:	b141      	cbz	r1, 8007212 <__swsetup_r+0x6a>
 8007200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007204:	4299      	cmp	r1, r3
 8007206:	d002      	beq.n	800720e <__swsetup_r+0x66>
 8007208:	4630      	mov	r0, r6
 800720a:	f001 fb69 	bl	80088e0 <_free_r>
 800720e:	2300      	movs	r3, #0
 8007210:	6363      	str	r3, [r4, #52]	; 0x34
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007218:	81a3      	strh	r3, [r4, #12]
 800721a:	2300      	movs	r3, #0
 800721c:	6063      	str	r3, [r4, #4]
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	f043 0308 	orr.w	r3, r3, #8
 8007228:	81a3      	strh	r3, [r4, #12]
 800722a:	6923      	ldr	r3, [r4, #16]
 800722c:	b94b      	cbnz	r3, 8007242 <__swsetup_r+0x9a>
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007238:	d003      	beq.n	8007242 <__swsetup_r+0x9a>
 800723a:	4621      	mov	r1, r4
 800723c:	4630      	mov	r0, r6
 800723e:	f001 f813 	bl	8008268 <__smakebuf_r>
 8007242:	89a2      	ldrh	r2, [r4, #12]
 8007244:	f012 0301 	ands.w	r3, r2, #1
 8007248:	d00c      	beq.n	8007264 <__swsetup_r+0xbc>
 800724a:	2300      	movs	r3, #0
 800724c:	60a3      	str	r3, [r4, #8]
 800724e:	6963      	ldr	r3, [r4, #20]
 8007250:	425b      	negs	r3, r3
 8007252:	61a3      	str	r3, [r4, #24]
 8007254:	6923      	ldr	r3, [r4, #16]
 8007256:	b953      	cbnz	r3, 800726e <__swsetup_r+0xc6>
 8007258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007260:	d1ba      	bne.n	80071d8 <__swsetup_r+0x30>
 8007262:	bd70      	pop	{r4, r5, r6, pc}
 8007264:	0792      	lsls	r2, r2, #30
 8007266:	bf58      	it	pl
 8007268:	6963      	ldrpl	r3, [r4, #20]
 800726a:	60a3      	str	r3, [r4, #8]
 800726c:	e7f2      	b.n	8007254 <__swsetup_r+0xac>
 800726e:	2000      	movs	r0, #0
 8007270:	e7f7      	b.n	8007262 <__swsetup_r+0xba>
 8007272:	bf00      	nop
 8007274:	200004a4 	.word	0x200004a4
 8007278:	08008f30 	.word	0x08008f30
 800727c:	08008f50 	.word	0x08008f50
 8007280:	08008f10 	.word	0x08008f10

08007284 <quorem>:
 8007284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007288:	6903      	ldr	r3, [r0, #16]
 800728a:	690c      	ldr	r4, [r1, #16]
 800728c:	42a3      	cmp	r3, r4
 800728e:	4680      	mov	r8, r0
 8007290:	f2c0 8082 	blt.w	8007398 <quorem+0x114>
 8007294:	3c01      	subs	r4, #1
 8007296:	f101 0714 	add.w	r7, r1, #20
 800729a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800729e:	f100 0614 	add.w	r6, r0, #20
 80072a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80072a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80072aa:	eb06 030c 	add.w	r3, r6, ip
 80072ae:	3501      	adds	r5, #1
 80072b0:	eb07 090c 	add.w	r9, r7, ip
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80072ba:	b395      	cbz	r5, 8007322 <quorem+0x9e>
 80072bc:	f04f 0a00 	mov.w	sl, #0
 80072c0:	4638      	mov	r0, r7
 80072c2:	46b6      	mov	lr, r6
 80072c4:	46d3      	mov	fp, sl
 80072c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80072ca:	b293      	uxth	r3, r2
 80072cc:	fb05 a303 	mla	r3, r5, r3, sl
 80072d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ebab 0303 	sub.w	r3, fp, r3
 80072da:	0c12      	lsrs	r2, r2, #16
 80072dc:	f8de b000 	ldr.w	fp, [lr]
 80072e0:	fb05 a202 	mla	r2, r5, r2, sl
 80072e4:	fa13 f38b 	uxtah	r3, r3, fp
 80072e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80072ec:	fa1f fb82 	uxth.w	fp, r2
 80072f0:	f8de 2000 	ldr.w	r2, [lr]
 80072f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80072f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007302:	4581      	cmp	r9, r0
 8007304:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007308:	f84e 3b04 	str.w	r3, [lr], #4
 800730c:	d2db      	bcs.n	80072c6 <quorem+0x42>
 800730e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007312:	b933      	cbnz	r3, 8007322 <quorem+0x9e>
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	3b04      	subs	r3, #4
 8007318:	429e      	cmp	r6, r3
 800731a:	461a      	mov	r2, r3
 800731c:	d330      	bcc.n	8007380 <quorem+0xfc>
 800731e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007322:	4640      	mov	r0, r8
 8007324:	f001 fa08 	bl	8008738 <__mcmp>
 8007328:	2800      	cmp	r0, #0
 800732a:	db25      	blt.n	8007378 <quorem+0xf4>
 800732c:	3501      	adds	r5, #1
 800732e:	4630      	mov	r0, r6
 8007330:	f04f 0c00 	mov.w	ip, #0
 8007334:	f857 2b04 	ldr.w	r2, [r7], #4
 8007338:	f8d0 e000 	ldr.w	lr, [r0]
 800733c:	b293      	uxth	r3, r2
 800733e:	ebac 0303 	sub.w	r3, ip, r3
 8007342:	0c12      	lsrs	r2, r2, #16
 8007344:	fa13 f38e 	uxtah	r3, r3, lr
 8007348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800734c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007350:	b29b      	uxth	r3, r3
 8007352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007356:	45b9      	cmp	r9, r7
 8007358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800735c:	f840 3b04 	str.w	r3, [r0], #4
 8007360:	d2e8      	bcs.n	8007334 <quorem+0xb0>
 8007362:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007366:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800736a:	b92a      	cbnz	r2, 8007378 <quorem+0xf4>
 800736c:	3b04      	subs	r3, #4
 800736e:	429e      	cmp	r6, r3
 8007370:	461a      	mov	r2, r3
 8007372:	d30b      	bcc.n	800738c <quorem+0x108>
 8007374:	f8c8 4010 	str.w	r4, [r8, #16]
 8007378:	4628      	mov	r0, r5
 800737a:	b003      	add	sp, #12
 800737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	3b04      	subs	r3, #4
 8007384:	2a00      	cmp	r2, #0
 8007386:	d1ca      	bne.n	800731e <quorem+0x9a>
 8007388:	3c01      	subs	r4, #1
 800738a:	e7c5      	b.n	8007318 <quorem+0x94>
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	3b04      	subs	r3, #4
 8007390:	2a00      	cmp	r2, #0
 8007392:	d1ef      	bne.n	8007374 <quorem+0xf0>
 8007394:	3c01      	subs	r4, #1
 8007396:	e7ea      	b.n	800736e <quorem+0xea>
 8007398:	2000      	movs	r0, #0
 800739a:	e7ee      	b.n	800737a <quorem+0xf6>
 800739c:	0000      	movs	r0, r0
	...

080073a0 <_dtoa_r>:
 80073a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a4:	ec57 6b10 	vmov	r6, r7, d0
 80073a8:	b097      	sub	sp, #92	; 0x5c
 80073aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073ac:	9106      	str	r1, [sp, #24]
 80073ae:	4604      	mov	r4, r0
 80073b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80073b2:	9312      	str	r3, [sp, #72]	; 0x48
 80073b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80073b8:	e9cd 6700 	strd	r6, r7, [sp]
 80073bc:	b93d      	cbnz	r5, 80073ce <_dtoa_r+0x2e>
 80073be:	2010      	movs	r0, #16
 80073c0:	f000 ff92 	bl	80082e8 <malloc>
 80073c4:	6260      	str	r0, [r4, #36]	; 0x24
 80073c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80073ca:	6005      	str	r5, [r0, #0]
 80073cc:	60c5      	str	r5, [r0, #12]
 80073ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	b151      	cbz	r1, 80073ea <_dtoa_r+0x4a>
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	604a      	str	r2, [r1, #4]
 80073d8:	2301      	movs	r3, #1
 80073da:	4093      	lsls	r3, r2
 80073dc:	608b      	str	r3, [r1, #8]
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 ffc9 	bl	8008376 <_Bfree>
 80073e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
 80073ea:	1e3b      	subs	r3, r7, #0
 80073ec:	bfbb      	ittet	lt
 80073ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073f2:	9301      	strlt	r3, [sp, #4]
 80073f4:	2300      	movge	r3, #0
 80073f6:	2201      	movlt	r2, #1
 80073f8:	bfac      	ite	ge
 80073fa:	f8c8 3000 	strge.w	r3, [r8]
 80073fe:	f8c8 2000 	strlt.w	r2, [r8]
 8007402:	4baf      	ldr	r3, [pc, #700]	; (80076c0 <_dtoa_r+0x320>)
 8007404:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007408:	ea33 0308 	bics.w	r3, r3, r8
 800740c:	d114      	bne.n	8007438 <_dtoa_r+0x98>
 800740e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007410:	f242 730f 	movw	r3, #9999	; 0x270f
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	b923      	cbnz	r3, 8007424 <_dtoa_r+0x84>
 800741a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800741e:	2800      	cmp	r0, #0
 8007420:	f000 8542 	beq.w	8007ea8 <_dtoa_r+0xb08>
 8007424:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007426:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80076d4 <_dtoa_r+0x334>
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8544 	beq.w	8007eb8 <_dtoa_r+0xb18>
 8007430:	f10b 0303 	add.w	r3, fp, #3
 8007434:	f000 bd3e 	b.w	8007eb4 <_dtoa_r+0xb14>
 8007438:	e9dd 6700 	ldrd	r6, r7, [sp]
 800743c:	2200      	movs	r2, #0
 800743e:	2300      	movs	r3, #0
 8007440:	4630      	mov	r0, r6
 8007442:	4639      	mov	r1, r7
 8007444:	f7f9 fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007448:	4681      	mov	r9, r0
 800744a:	b168      	cbz	r0, 8007468 <_dtoa_r+0xc8>
 800744c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800744e:	2301      	movs	r3, #1
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8524 	beq.w	8007ea2 <_dtoa_r+0xb02>
 800745a:	4b9a      	ldr	r3, [pc, #616]	; (80076c4 <_dtoa_r+0x324>)
 800745c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800745e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	f000 bd28 	b.w	8007eb8 <_dtoa_r+0xb18>
 8007468:	aa14      	add	r2, sp, #80	; 0x50
 800746a:	a915      	add	r1, sp, #84	; 0x54
 800746c:	ec47 6b10 	vmov	d0, r6, r7
 8007470:	4620      	mov	r0, r4
 8007472:	f001 f9d8 	bl	8008826 <__d2b>
 8007476:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800747a:	9004      	str	r0, [sp, #16]
 800747c:	2d00      	cmp	r5, #0
 800747e:	d07c      	beq.n	800757a <_dtoa_r+0x1da>
 8007480:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007484:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007488:	46b2      	mov	sl, r6
 800748a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800748e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007492:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007496:	2200      	movs	r2, #0
 8007498:	4b8b      	ldr	r3, [pc, #556]	; (80076c8 <_dtoa_r+0x328>)
 800749a:	4650      	mov	r0, sl
 800749c:	4659      	mov	r1, fp
 800749e:	f7f8 fef3 	bl	8000288 <__aeabi_dsub>
 80074a2:	a381      	add	r3, pc, #516	; (adr r3, 80076a8 <_dtoa_r+0x308>)
 80074a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a8:	f7f9 f8a6 	bl	80005f8 <__aeabi_dmul>
 80074ac:	a380      	add	r3, pc, #512	; (adr r3, 80076b0 <_dtoa_r+0x310>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f8 feeb 	bl	800028c <__adddf3>
 80074b6:	4606      	mov	r6, r0
 80074b8:	4628      	mov	r0, r5
 80074ba:	460f      	mov	r7, r1
 80074bc:	f7f9 f832 	bl	8000524 <__aeabi_i2d>
 80074c0:	a37d      	add	r3, pc, #500	; (adr r3, 80076b8 <_dtoa_r+0x318>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f9 f897 	bl	80005f8 <__aeabi_dmul>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4630      	mov	r0, r6
 80074d0:	4639      	mov	r1, r7
 80074d2:	f7f8 fedb 	bl	800028c <__adddf3>
 80074d6:	4606      	mov	r6, r0
 80074d8:	460f      	mov	r7, r1
 80074da:	f7f9 fb3d 	bl	8000b58 <__aeabi_d2iz>
 80074de:	2200      	movs	r2, #0
 80074e0:	4682      	mov	sl, r0
 80074e2:	2300      	movs	r3, #0
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f9 faf8 	bl	8000adc <__aeabi_dcmplt>
 80074ec:	b148      	cbz	r0, 8007502 <_dtoa_r+0x162>
 80074ee:	4650      	mov	r0, sl
 80074f0:	f7f9 f818 	bl	8000524 <__aeabi_i2d>
 80074f4:	4632      	mov	r2, r6
 80074f6:	463b      	mov	r3, r7
 80074f8:	f7f9 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80074fc:	b908      	cbnz	r0, 8007502 <_dtoa_r+0x162>
 80074fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007502:	f1ba 0f16 	cmp.w	sl, #22
 8007506:	d859      	bhi.n	80075bc <_dtoa_r+0x21c>
 8007508:	4970      	ldr	r1, [pc, #448]	; (80076cc <_dtoa_r+0x32c>)
 800750a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800750e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007512:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007516:	f7f9 faff 	bl	8000b18 <__aeabi_dcmpgt>
 800751a:	2800      	cmp	r0, #0
 800751c:	d050      	beq.n	80075c0 <_dtoa_r+0x220>
 800751e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007522:	2300      	movs	r3, #0
 8007524:	930f      	str	r3, [sp, #60]	; 0x3c
 8007526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007528:	1b5d      	subs	r5, r3, r5
 800752a:	f1b5 0801 	subs.w	r8, r5, #1
 800752e:	bf49      	itett	mi
 8007530:	f1c5 0301 	rsbmi	r3, r5, #1
 8007534:	2300      	movpl	r3, #0
 8007536:	9305      	strmi	r3, [sp, #20]
 8007538:	f04f 0800 	movmi.w	r8, #0
 800753c:	bf58      	it	pl
 800753e:	9305      	strpl	r3, [sp, #20]
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	db3e      	blt.n	80075c4 <_dtoa_r+0x224>
 8007546:	2300      	movs	r3, #0
 8007548:	44d0      	add	r8, sl
 800754a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	9b06      	ldr	r3, [sp, #24]
 8007552:	2b09      	cmp	r3, #9
 8007554:	f200 8090 	bhi.w	8007678 <_dtoa_r+0x2d8>
 8007558:	2b05      	cmp	r3, #5
 800755a:	bfc4      	itt	gt
 800755c:	3b04      	subgt	r3, #4
 800755e:	9306      	strgt	r3, [sp, #24]
 8007560:	9b06      	ldr	r3, [sp, #24]
 8007562:	f1a3 0302 	sub.w	r3, r3, #2
 8007566:	bfcc      	ite	gt
 8007568:	2500      	movgt	r5, #0
 800756a:	2501      	movle	r5, #1
 800756c:	2b03      	cmp	r3, #3
 800756e:	f200 808f 	bhi.w	8007690 <_dtoa_r+0x2f0>
 8007572:	e8df f003 	tbb	[pc, r3]
 8007576:	7f7d      	.short	0x7f7d
 8007578:	7131      	.short	0x7131
 800757a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800757e:	441d      	add	r5, r3
 8007580:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007584:	2820      	cmp	r0, #32
 8007586:	dd13      	ble.n	80075b0 <_dtoa_r+0x210>
 8007588:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800758c:	9b00      	ldr	r3, [sp, #0]
 800758e:	fa08 f800 	lsl.w	r8, r8, r0
 8007592:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007596:	fa23 f000 	lsr.w	r0, r3, r0
 800759a:	ea48 0000 	orr.w	r0, r8, r0
 800759e:	f7f8 ffb1 	bl	8000504 <__aeabi_ui2d>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4682      	mov	sl, r0
 80075a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80075aa:	3d01      	subs	r5, #1
 80075ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80075ae:	e772      	b.n	8007496 <_dtoa_r+0xf6>
 80075b0:	9b00      	ldr	r3, [sp, #0]
 80075b2:	f1c0 0020 	rsb	r0, r0, #32
 80075b6:	fa03 f000 	lsl.w	r0, r3, r0
 80075ba:	e7f0      	b.n	800759e <_dtoa_r+0x1fe>
 80075bc:	2301      	movs	r3, #1
 80075be:	e7b1      	b.n	8007524 <_dtoa_r+0x184>
 80075c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80075c2:	e7b0      	b.n	8007526 <_dtoa_r+0x186>
 80075c4:	9b05      	ldr	r3, [sp, #20]
 80075c6:	eba3 030a 	sub.w	r3, r3, sl
 80075ca:	9305      	str	r3, [sp, #20]
 80075cc:	f1ca 0300 	rsb	r3, sl, #0
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	2300      	movs	r3, #0
 80075d4:	930e      	str	r3, [sp, #56]	; 0x38
 80075d6:	e7bb      	b.n	8007550 <_dtoa_r+0x1b0>
 80075d8:	2301      	movs	r3, #1
 80075da:	930a      	str	r3, [sp, #40]	; 0x28
 80075dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd59      	ble.n	8007696 <_dtoa_r+0x2f6>
 80075e2:	9302      	str	r3, [sp, #8]
 80075e4:	4699      	mov	r9, r3
 80075e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80075e8:	2200      	movs	r2, #0
 80075ea:	6072      	str	r2, [r6, #4]
 80075ec:	2204      	movs	r2, #4
 80075ee:	f102 0014 	add.w	r0, r2, #20
 80075f2:	4298      	cmp	r0, r3
 80075f4:	6871      	ldr	r1, [r6, #4]
 80075f6:	d953      	bls.n	80076a0 <_dtoa_r+0x300>
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 fe88 	bl	800830e <_Balloc>
 80075fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007600:	6030      	str	r0, [r6, #0]
 8007602:	f1b9 0f0e 	cmp.w	r9, #14
 8007606:	f8d3 b000 	ldr.w	fp, [r3]
 800760a:	f200 80e6 	bhi.w	80077da <_dtoa_r+0x43a>
 800760e:	2d00      	cmp	r5, #0
 8007610:	f000 80e3 	beq.w	80077da <_dtoa_r+0x43a>
 8007614:	ed9d 7b00 	vldr	d7, [sp]
 8007618:	f1ba 0f00 	cmp.w	sl, #0
 800761c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007620:	dd74      	ble.n	800770c <_dtoa_r+0x36c>
 8007622:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <_dtoa_r+0x32c>)
 8007624:	f00a 030f 	and.w	r3, sl, #15
 8007628:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800762c:	ed93 7b00 	vldr	d7, [r3]
 8007630:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007634:	06f0      	lsls	r0, r6, #27
 8007636:	ed8d 7b08 	vstr	d7, [sp, #32]
 800763a:	d565      	bpl.n	8007708 <_dtoa_r+0x368>
 800763c:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <_dtoa_r+0x330>)
 800763e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007642:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007646:	f7f9 f901 	bl	800084c <__aeabi_ddiv>
 800764a:	e9cd 0100 	strd	r0, r1, [sp]
 800764e:	f006 060f 	and.w	r6, r6, #15
 8007652:	2503      	movs	r5, #3
 8007654:	4f1e      	ldr	r7, [pc, #120]	; (80076d0 <_dtoa_r+0x330>)
 8007656:	e04c      	b.n	80076f2 <_dtoa_r+0x352>
 8007658:	2301      	movs	r3, #1
 800765a:	930a      	str	r3, [sp, #40]	; 0x28
 800765c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800765e:	4453      	add	r3, sl
 8007660:	f103 0901 	add.w	r9, r3, #1
 8007664:	9302      	str	r3, [sp, #8]
 8007666:	464b      	mov	r3, r9
 8007668:	2b01      	cmp	r3, #1
 800766a:	bfb8      	it	lt
 800766c:	2301      	movlt	r3, #1
 800766e:	e7ba      	b.n	80075e6 <_dtoa_r+0x246>
 8007670:	2300      	movs	r3, #0
 8007672:	e7b2      	b.n	80075da <_dtoa_r+0x23a>
 8007674:	2300      	movs	r3, #0
 8007676:	e7f0      	b.n	800765a <_dtoa_r+0x2ba>
 8007678:	2501      	movs	r5, #1
 800767a:	2300      	movs	r3, #0
 800767c:	9306      	str	r3, [sp, #24]
 800767e:	950a      	str	r5, [sp, #40]	; 0x28
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	9302      	str	r3, [sp, #8]
 8007686:	4699      	mov	r9, r3
 8007688:	2200      	movs	r2, #0
 800768a:	2312      	movs	r3, #18
 800768c:	920b      	str	r2, [sp, #44]	; 0x2c
 800768e:	e7aa      	b.n	80075e6 <_dtoa_r+0x246>
 8007690:	2301      	movs	r3, #1
 8007692:	930a      	str	r3, [sp, #40]	; 0x28
 8007694:	e7f4      	b.n	8007680 <_dtoa_r+0x2e0>
 8007696:	2301      	movs	r3, #1
 8007698:	9302      	str	r3, [sp, #8]
 800769a:	4699      	mov	r9, r3
 800769c:	461a      	mov	r2, r3
 800769e:	e7f5      	b.n	800768c <_dtoa_r+0x2ec>
 80076a0:	3101      	adds	r1, #1
 80076a2:	6071      	str	r1, [r6, #4]
 80076a4:	0052      	lsls	r2, r2, #1
 80076a6:	e7a2      	b.n	80075ee <_dtoa_r+0x24e>
 80076a8:	636f4361 	.word	0x636f4361
 80076ac:	3fd287a7 	.word	0x3fd287a7
 80076b0:	8b60c8b3 	.word	0x8b60c8b3
 80076b4:	3fc68a28 	.word	0x3fc68a28
 80076b8:	509f79fb 	.word	0x509f79fb
 80076bc:	3fd34413 	.word	0x3fd34413
 80076c0:	7ff00000 	.word	0x7ff00000
 80076c4:	08008edd 	.word	0x08008edd
 80076c8:	3ff80000 	.word	0x3ff80000
 80076cc:	08008f98 	.word	0x08008f98
 80076d0:	08008f70 	.word	0x08008f70
 80076d4:	08008f09 	.word	0x08008f09
 80076d8:	07f1      	lsls	r1, r6, #31
 80076da:	d508      	bpl.n	80076ee <_dtoa_r+0x34e>
 80076dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e4:	f7f8 ff88 	bl	80005f8 <__aeabi_dmul>
 80076e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076ec:	3501      	adds	r5, #1
 80076ee:	1076      	asrs	r6, r6, #1
 80076f0:	3708      	adds	r7, #8
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d1f0      	bne.n	80076d8 <_dtoa_r+0x338>
 80076f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076fe:	f7f9 f8a5 	bl	800084c <__aeabi_ddiv>
 8007702:	e9cd 0100 	strd	r0, r1, [sp]
 8007706:	e01a      	b.n	800773e <_dtoa_r+0x39e>
 8007708:	2502      	movs	r5, #2
 800770a:	e7a3      	b.n	8007654 <_dtoa_r+0x2b4>
 800770c:	f000 80a0 	beq.w	8007850 <_dtoa_r+0x4b0>
 8007710:	f1ca 0600 	rsb	r6, sl, #0
 8007714:	4b9f      	ldr	r3, [pc, #636]	; (8007994 <_dtoa_r+0x5f4>)
 8007716:	4fa0      	ldr	r7, [pc, #640]	; (8007998 <_dtoa_r+0x5f8>)
 8007718:	f006 020f 	and.w	r2, r6, #15
 800771c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007728:	f7f8 ff66 	bl	80005f8 <__aeabi_dmul>
 800772c:	e9cd 0100 	strd	r0, r1, [sp]
 8007730:	1136      	asrs	r6, r6, #4
 8007732:	2300      	movs	r3, #0
 8007734:	2502      	movs	r5, #2
 8007736:	2e00      	cmp	r6, #0
 8007738:	d17f      	bne.n	800783a <_dtoa_r+0x49a>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e1      	bne.n	8007702 <_dtoa_r+0x362>
 800773e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8087 	beq.w	8007854 <_dtoa_r+0x4b4>
 8007746:	e9dd 6700 	ldrd	r6, r7, [sp]
 800774a:	2200      	movs	r2, #0
 800774c:	4b93      	ldr	r3, [pc, #588]	; (800799c <_dtoa_r+0x5fc>)
 800774e:	4630      	mov	r0, r6
 8007750:	4639      	mov	r1, r7
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	2800      	cmp	r0, #0
 8007758:	d07c      	beq.n	8007854 <_dtoa_r+0x4b4>
 800775a:	f1b9 0f00 	cmp.w	r9, #0
 800775e:	d079      	beq.n	8007854 <_dtoa_r+0x4b4>
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	dd35      	ble.n	80077d2 <_dtoa_r+0x432>
 8007766:	f10a 33ff 	add.w	r3, sl, #4294967295
 800776a:	9308      	str	r3, [sp, #32]
 800776c:	4639      	mov	r1, r7
 800776e:	2200      	movs	r2, #0
 8007770:	4b8b      	ldr	r3, [pc, #556]	; (80079a0 <_dtoa_r+0x600>)
 8007772:	4630      	mov	r0, r6
 8007774:	f7f8 ff40 	bl	80005f8 <__aeabi_dmul>
 8007778:	e9cd 0100 	strd	r0, r1, [sp]
 800777c:	9f02      	ldr	r7, [sp, #8]
 800777e:	3501      	adds	r5, #1
 8007780:	4628      	mov	r0, r5
 8007782:	f7f8 fecf 	bl	8000524 <__aeabi_i2d>
 8007786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800778a:	f7f8 ff35 	bl	80005f8 <__aeabi_dmul>
 800778e:	2200      	movs	r2, #0
 8007790:	4b84      	ldr	r3, [pc, #528]	; (80079a4 <_dtoa_r+0x604>)
 8007792:	f7f8 fd7b 	bl	800028c <__adddf3>
 8007796:	4605      	mov	r5, r0
 8007798:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800779c:	2f00      	cmp	r7, #0
 800779e:	d15d      	bne.n	800785c <_dtoa_r+0x4bc>
 80077a0:	2200      	movs	r2, #0
 80077a2:	4b81      	ldr	r3, [pc, #516]	; (80079a8 <_dtoa_r+0x608>)
 80077a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077a8:	f7f8 fd6e 	bl	8000288 <__aeabi_dsub>
 80077ac:	462a      	mov	r2, r5
 80077ae:	4633      	mov	r3, r6
 80077b0:	e9cd 0100 	strd	r0, r1, [sp]
 80077b4:	f7f9 f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	f040 8288 	bne.w	8007cce <_dtoa_r+0x92e>
 80077be:	462a      	mov	r2, r5
 80077c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80077c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077c8:	f7f9 f988 	bl	8000adc <__aeabi_dcmplt>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	f040 827c 	bne.w	8007cca <_dtoa_r+0x92a>
 80077d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80077d6:	e9cd 2300 	strd	r2, r3, [sp]
 80077da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f2c0 8150 	blt.w	8007a82 <_dtoa_r+0x6e2>
 80077e2:	f1ba 0f0e 	cmp.w	sl, #14
 80077e6:	f300 814c 	bgt.w	8007a82 <_dtoa_r+0x6e2>
 80077ea:	4b6a      	ldr	r3, [pc, #424]	; (8007994 <_dtoa_r+0x5f4>)
 80077ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80077f0:	ed93 7b00 	vldr	d7, [r3]
 80077f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80077fc:	f280 80d8 	bge.w	80079b0 <_dtoa_r+0x610>
 8007800:	f1b9 0f00 	cmp.w	r9, #0
 8007804:	f300 80d4 	bgt.w	80079b0 <_dtoa_r+0x610>
 8007808:	f040 825e 	bne.w	8007cc8 <_dtoa_r+0x928>
 800780c:	2200      	movs	r2, #0
 800780e:	4b66      	ldr	r3, [pc, #408]	; (80079a8 <_dtoa_r+0x608>)
 8007810:	ec51 0b17 	vmov	r0, r1, d7
 8007814:	f7f8 fef0 	bl	80005f8 <__aeabi_dmul>
 8007818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781c:	f7f9 f972 	bl	8000b04 <__aeabi_dcmpge>
 8007820:	464f      	mov	r7, r9
 8007822:	464e      	mov	r6, r9
 8007824:	2800      	cmp	r0, #0
 8007826:	f040 8234 	bne.w	8007c92 <_dtoa_r+0x8f2>
 800782a:	2331      	movs	r3, #49	; 0x31
 800782c:	f10b 0501 	add.w	r5, fp, #1
 8007830:	f88b 3000 	strb.w	r3, [fp]
 8007834:	f10a 0a01 	add.w	sl, sl, #1
 8007838:	e22f      	b.n	8007c9a <_dtoa_r+0x8fa>
 800783a:	07f2      	lsls	r2, r6, #31
 800783c:	d505      	bpl.n	800784a <_dtoa_r+0x4aa>
 800783e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007842:	f7f8 fed9 	bl	80005f8 <__aeabi_dmul>
 8007846:	3501      	adds	r5, #1
 8007848:	2301      	movs	r3, #1
 800784a:	1076      	asrs	r6, r6, #1
 800784c:	3708      	adds	r7, #8
 800784e:	e772      	b.n	8007736 <_dtoa_r+0x396>
 8007850:	2502      	movs	r5, #2
 8007852:	e774      	b.n	800773e <_dtoa_r+0x39e>
 8007854:	f8cd a020 	str.w	sl, [sp, #32]
 8007858:	464f      	mov	r7, r9
 800785a:	e791      	b.n	8007780 <_dtoa_r+0x3e0>
 800785c:	4b4d      	ldr	r3, [pc, #308]	; (8007994 <_dtoa_r+0x5f4>)
 800785e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007862:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	d047      	beq.n	80078fc <_dtoa_r+0x55c>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	2000      	movs	r0, #0
 8007872:	494e      	ldr	r1, [pc, #312]	; (80079ac <_dtoa_r+0x60c>)
 8007874:	f7f8 ffea 	bl	800084c <__aeabi_ddiv>
 8007878:	462a      	mov	r2, r5
 800787a:	4633      	mov	r3, r6
 800787c:	f7f8 fd04 	bl	8000288 <__aeabi_dsub>
 8007880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007884:	465d      	mov	r5, fp
 8007886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800788a:	f7f9 f965 	bl	8000b58 <__aeabi_d2iz>
 800788e:	4606      	mov	r6, r0
 8007890:	f7f8 fe48 	bl	8000524 <__aeabi_i2d>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	e9dd 0100 	ldrd	r0, r1, [sp]
 800789c:	f7f8 fcf4 	bl	8000288 <__aeabi_dsub>
 80078a0:	3630      	adds	r6, #48	; 0x30
 80078a2:	f805 6b01 	strb.w	r6, [r5], #1
 80078a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078aa:	e9cd 0100 	strd	r0, r1, [sp]
 80078ae:	f7f9 f915 	bl	8000adc <__aeabi_dcmplt>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d163      	bne.n	800797e <_dtoa_r+0x5de>
 80078b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ba:	2000      	movs	r0, #0
 80078bc:	4937      	ldr	r1, [pc, #220]	; (800799c <_dtoa_r+0x5fc>)
 80078be:	f7f8 fce3 	bl	8000288 <__aeabi_dsub>
 80078c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078c6:	f7f9 f909 	bl	8000adc <__aeabi_dcmplt>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f040 80b7 	bne.w	8007a3e <_dtoa_r+0x69e>
 80078d0:	eba5 030b 	sub.w	r3, r5, fp
 80078d4:	429f      	cmp	r7, r3
 80078d6:	f77f af7c 	ble.w	80077d2 <_dtoa_r+0x432>
 80078da:	2200      	movs	r2, #0
 80078dc:	4b30      	ldr	r3, [pc, #192]	; (80079a0 <_dtoa_r+0x600>)
 80078de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078e2:	f7f8 fe89 	bl	80005f8 <__aeabi_dmul>
 80078e6:	2200      	movs	r2, #0
 80078e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078ec:	4b2c      	ldr	r3, [pc, #176]	; (80079a0 <_dtoa_r+0x600>)
 80078ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078f2:	f7f8 fe81 	bl	80005f8 <__aeabi_dmul>
 80078f6:	e9cd 0100 	strd	r0, r1, [sp]
 80078fa:	e7c4      	b.n	8007886 <_dtoa_r+0x4e6>
 80078fc:	462a      	mov	r2, r5
 80078fe:	4633      	mov	r3, r6
 8007900:	f7f8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8007904:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007908:	eb0b 0507 	add.w	r5, fp, r7
 800790c:	465e      	mov	r6, fp
 800790e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007912:	f7f9 f921 	bl	8000b58 <__aeabi_d2iz>
 8007916:	4607      	mov	r7, r0
 8007918:	f7f8 fe04 	bl	8000524 <__aeabi_i2d>
 800791c:	3730      	adds	r7, #48	; 0x30
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007926:	f7f8 fcaf 	bl	8000288 <__aeabi_dsub>
 800792a:	f806 7b01 	strb.w	r7, [r6], #1
 800792e:	42ae      	cmp	r6, r5
 8007930:	e9cd 0100 	strd	r0, r1, [sp]
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	d126      	bne.n	8007988 <_dtoa_r+0x5e8>
 800793a:	4b1c      	ldr	r3, [pc, #112]	; (80079ac <_dtoa_r+0x60c>)
 800793c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007940:	f7f8 fca4 	bl	800028c <__adddf3>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800794c:	f7f9 f8e4 	bl	8000b18 <__aeabi_dcmpgt>
 8007950:	2800      	cmp	r0, #0
 8007952:	d174      	bne.n	8007a3e <_dtoa_r+0x69e>
 8007954:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007958:	2000      	movs	r0, #0
 800795a:	4914      	ldr	r1, [pc, #80]	; (80079ac <_dtoa_r+0x60c>)
 800795c:	f7f8 fc94 	bl	8000288 <__aeabi_dsub>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007968:	f7f9 f8b8 	bl	8000adc <__aeabi_dcmplt>
 800796c:	2800      	cmp	r0, #0
 800796e:	f43f af30 	beq.w	80077d2 <_dtoa_r+0x432>
 8007972:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007976:	2b30      	cmp	r3, #48	; 0x30
 8007978:	f105 32ff 	add.w	r2, r5, #4294967295
 800797c:	d002      	beq.n	8007984 <_dtoa_r+0x5e4>
 800797e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007982:	e04a      	b.n	8007a1a <_dtoa_r+0x67a>
 8007984:	4615      	mov	r5, r2
 8007986:	e7f4      	b.n	8007972 <_dtoa_r+0x5d2>
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <_dtoa_r+0x600>)
 800798a:	f7f8 fe35 	bl	80005f8 <__aeabi_dmul>
 800798e:	e9cd 0100 	strd	r0, r1, [sp]
 8007992:	e7bc      	b.n	800790e <_dtoa_r+0x56e>
 8007994:	08008f98 	.word	0x08008f98
 8007998:	08008f70 	.word	0x08008f70
 800799c:	3ff00000 	.word	0x3ff00000
 80079a0:	40240000 	.word	0x40240000
 80079a4:	401c0000 	.word	0x401c0000
 80079a8:	40140000 	.word	0x40140000
 80079ac:	3fe00000 	.word	0x3fe00000
 80079b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079b4:	465d      	mov	r5, fp
 80079b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ba:	4630      	mov	r0, r6
 80079bc:	4639      	mov	r1, r7
 80079be:	f7f8 ff45 	bl	800084c <__aeabi_ddiv>
 80079c2:	f7f9 f8c9 	bl	8000b58 <__aeabi_d2iz>
 80079c6:	4680      	mov	r8, r0
 80079c8:	f7f8 fdac 	bl	8000524 <__aeabi_i2d>
 80079cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079d0:	f7f8 fe12 	bl	80005f8 <__aeabi_dmul>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80079e0:	f7f8 fc52 	bl	8000288 <__aeabi_dsub>
 80079e4:	f805 6b01 	strb.w	r6, [r5], #1
 80079e8:	eba5 060b 	sub.w	r6, r5, fp
 80079ec:	45b1      	cmp	r9, r6
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	d139      	bne.n	8007a68 <_dtoa_r+0x6c8>
 80079f4:	f7f8 fc4a 	bl	800028c <__adddf3>
 80079f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079fc:	4606      	mov	r6, r0
 80079fe:	460f      	mov	r7, r1
 8007a00:	f7f9 f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8007a04:	b9c8      	cbnz	r0, 8007a3a <_dtoa_r+0x69a>
 8007a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f9 f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a12:	b110      	cbz	r0, 8007a1a <_dtoa_r+0x67a>
 8007a14:	f018 0f01 	tst.w	r8, #1
 8007a18:	d10f      	bne.n	8007a3a <_dtoa_r+0x69a>
 8007a1a:	9904      	ldr	r1, [sp, #16]
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fcaa 	bl	8008376 <_Bfree>
 8007a22:	2300      	movs	r3, #0
 8007a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a26:	702b      	strb	r3, [r5, #0]
 8007a28:	f10a 0301 	add.w	r3, sl, #1
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8241 	beq.w	8007eb8 <_dtoa_r+0xb18>
 8007a36:	601d      	str	r5, [r3, #0]
 8007a38:	e23e      	b.n	8007eb8 <_dtoa_r+0xb18>
 8007a3a:	f8cd a020 	str.w	sl, [sp, #32]
 8007a3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a42:	2a39      	cmp	r2, #57	; 0x39
 8007a44:	f105 33ff 	add.w	r3, r5, #4294967295
 8007a48:	d108      	bne.n	8007a5c <_dtoa_r+0x6bc>
 8007a4a:	459b      	cmp	fp, r3
 8007a4c:	d10a      	bne.n	8007a64 <_dtoa_r+0x6c4>
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	3301      	adds	r3, #1
 8007a52:	9308      	str	r3, [sp, #32]
 8007a54:	2330      	movs	r3, #48	; 0x30
 8007a56:	f88b 3000 	strb.w	r3, [fp]
 8007a5a:	465b      	mov	r3, fp
 8007a5c:	781a      	ldrb	r2, [r3, #0]
 8007a5e:	3201      	adds	r2, #1
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	e78c      	b.n	800797e <_dtoa_r+0x5de>
 8007a64:	461d      	mov	r5, r3
 8007a66:	e7ea      	b.n	8007a3e <_dtoa_r+0x69e>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4b9b      	ldr	r3, [pc, #620]	; (8007cd8 <_dtoa_r+0x938>)
 8007a6c:	f7f8 fdc4 	bl	80005f8 <__aeabi_dmul>
 8007a70:	2200      	movs	r2, #0
 8007a72:	2300      	movs	r3, #0
 8007a74:	4606      	mov	r6, r0
 8007a76:	460f      	mov	r7, r1
 8007a78:	f7f9 f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	d09a      	beq.n	80079b6 <_dtoa_r+0x616>
 8007a80:	e7cb      	b.n	8007a1a <_dtoa_r+0x67a>
 8007a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	f000 808b 	beq.w	8007ba0 <_dtoa_r+0x800>
 8007a8a:	9a06      	ldr	r2, [sp, #24]
 8007a8c:	2a01      	cmp	r2, #1
 8007a8e:	dc6e      	bgt.n	8007b6e <_dtoa_r+0x7ce>
 8007a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	d067      	beq.n	8007b66 <_dtoa_r+0x7c6>
 8007a96:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a9a:	9f07      	ldr	r7, [sp, #28]
 8007a9c:	9d05      	ldr	r5, [sp, #20]
 8007a9e:	9a05      	ldr	r2, [sp, #20]
 8007aa0:	2101      	movs	r1, #1
 8007aa2:	441a      	add	r2, r3
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	9205      	str	r2, [sp, #20]
 8007aa8:	4498      	add	r8, r3
 8007aaa:	f000 fd04 	bl	80084b6 <__i2b>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	dd0c      	ble.n	8007ace <_dtoa_r+0x72e>
 8007ab4:	f1b8 0f00 	cmp.w	r8, #0
 8007ab8:	dd09      	ble.n	8007ace <_dtoa_r+0x72e>
 8007aba:	4545      	cmp	r5, r8
 8007abc:	9a05      	ldr	r2, [sp, #20]
 8007abe:	462b      	mov	r3, r5
 8007ac0:	bfa8      	it	ge
 8007ac2:	4643      	movge	r3, r8
 8007ac4:	1ad2      	subs	r2, r2, r3
 8007ac6:	9205      	str	r2, [sp, #20]
 8007ac8:	1aed      	subs	r5, r5, r3
 8007aca:	eba8 0803 	sub.w	r8, r8, r3
 8007ace:	9b07      	ldr	r3, [sp, #28]
 8007ad0:	b1eb      	cbz	r3, 8007b0e <_dtoa_r+0x76e>
 8007ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d067      	beq.n	8007ba8 <_dtoa_r+0x808>
 8007ad8:	b18f      	cbz	r7, 8007afe <_dtoa_r+0x75e>
 8007ada:	4631      	mov	r1, r6
 8007adc:	463a      	mov	r2, r7
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 fd88 	bl	80085f4 <__pow5mult>
 8007ae4:	9a04      	ldr	r2, [sp, #16]
 8007ae6:	4601      	mov	r1, r0
 8007ae8:	4606      	mov	r6, r0
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 fcec 	bl	80084c8 <__multiply>
 8007af0:	9904      	ldr	r1, [sp, #16]
 8007af2:	9008      	str	r0, [sp, #32]
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fc3e 	bl	8008376 <_Bfree>
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	9b07      	ldr	r3, [sp, #28]
 8007b00:	1bda      	subs	r2, r3, r7
 8007b02:	d004      	beq.n	8007b0e <_dtoa_r+0x76e>
 8007b04:	9904      	ldr	r1, [sp, #16]
 8007b06:	4620      	mov	r0, r4
 8007b08:	f000 fd74 	bl	80085f4 <__pow5mult>
 8007b0c:	9004      	str	r0, [sp, #16]
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 fcd0 	bl	80084b6 <__i2b>
 8007b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b18:	4607      	mov	r7, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 81d0 	beq.w	8007ec0 <_dtoa_r+0xb20>
 8007b20:	461a      	mov	r2, r3
 8007b22:	4601      	mov	r1, r0
 8007b24:	4620      	mov	r0, r4
 8007b26:	f000 fd65 	bl	80085f4 <__pow5mult>
 8007b2a:	9b06      	ldr	r3, [sp, #24]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	4607      	mov	r7, r0
 8007b30:	dc40      	bgt.n	8007bb4 <_dtoa_r+0x814>
 8007b32:	9b00      	ldr	r3, [sp, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d139      	bne.n	8007bac <_dtoa_r+0x80c>
 8007b38:	9b01      	ldr	r3, [sp, #4]
 8007b3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d136      	bne.n	8007bb0 <_dtoa_r+0x810>
 8007b42:	9b01      	ldr	r3, [sp, #4]
 8007b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b48:	0d1b      	lsrs	r3, r3, #20
 8007b4a:	051b      	lsls	r3, r3, #20
 8007b4c:	b12b      	cbz	r3, 8007b5a <_dtoa_r+0x7ba>
 8007b4e:	9b05      	ldr	r3, [sp, #20]
 8007b50:	3301      	adds	r3, #1
 8007b52:	9305      	str	r3, [sp, #20]
 8007b54:	f108 0801 	add.w	r8, r8, #1
 8007b58:	2301      	movs	r3, #1
 8007b5a:	9307      	str	r3, [sp, #28]
 8007b5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d12a      	bne.n	8007bb8 <_dtoa_r+0x818>
 8007b62:	2001      	movs	r0, #1
 8007b64:	e030      	b.n	8007bc8 <_dtoa_r+0x828>
 8007b66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007b6c:	e795      	b.n	8007a9a <_dtoa_r+0x6fa>
 8007b6e:	9b07      	ldr	r3, [sp, #28]
 8007b70:	f109 37ff 	add.w	r7, r9, #4294967295
 8007b74:	42bb      	cmp	r3, r7
 8007b76:	bfbf      	itttt	lt
 8007b78:	9b07      	ldrlt	r3, [sp, #28]
 8007b7a:	9707      	strlt	r7, [sp, #28]
 8007b7c:	1afa      	sublt	r2, r7, r3
 8007b7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007b80:	bfbb      	ittet	lt
 8007b82:	189b      	addlt	r3, r3, r2
 8007b84:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007b86:	1bdf      	subge	r7, r3, r7
 8007b88:	2700      	movlt	r7, #0
 8007b8a:	f1b9 0f00 	cmp.w	r9, #0
 8007b8e:	bfb5      	itete	lt
 8007b90:	9b05      	ldrlt	r3, [sp, #20]
 8007b92:	9d05      	ldrge	r5, [sp, #20]
 8007b94:	eba3 0509 	sublt.w	r5, r3, r9
 8007b98:	464b      	movge	r3, r9
 8007b9a:	bfb8      	it	lt
 8007b9c:	2300      	movlt	r3, #0
 8007b9e:	e77e      	b.n	8007a9e <_dtoa_r+0x6fe>
 8007ba0:	9f07      	ldr	r7, [sp, #28]
 8007ba2:	9d05      	ldr	r5, [sp, #20]
 8007ba4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007ba6:	e783      	b.n	8007ab0 <_dtoa_r+0x710>
 8007ba8:	9a07      	ldr	r2, [sp, #28]
 8007baa:	e7ab      	b.n	8007b04 <_dtoa_r+0x764>
 8007bac:	2300      	movs	r3, #0
 8007bae:	e7d4      	b.n	8007b5a <_dtoa_r+0x7ba>
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	e7d2      	b.n	8007b5a <_dtoa_r+0x7ba>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9307      	str	r3, [sp, #28]
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007bbe:	6918      	ldr	r0, [r3, #16]
 8007bc0:	f000 fc2b 	bl	800841a <__hi0bits>
 8007bc4:	f1c0 0020 	rsb	r0, r0, #32
 8007bc8:	4440      	add	r0, r8
 8007bca:	f010 001f 	ands.w	r0, r0, #31
 8007bce:	d047      	beq.n	8007c60 <_dtoa_r+0x8c0>
 8007bd0:	f1c0 0320 	rsb	r3, r0, #32
 8007bd4:	2b04      	cmp	r3, #4
 8007bd6:	dd3b      	ble.n	8007c50 <_dtoa_r+0x8b0>
 8007bd8:	9b05      	ldr	r3, [sp, #20]
 8007bda:	f1c0 001c 	rsb	r0, r0, #28
 8007bde:	4403      	add	r3, r0
 8007be0:	9305      	str	r3, [sp, #20]
 8007be2:	4405      	add	r5, r0
 8007be4:	4480      	add	r8, r0
 8007be6:	9b05      	ldr	r3, [sp, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dd05      	ble.n	8007bf8 <_dtoa_r+0x858>
 8007bec:	461a      	mov	r2, r3
 8007bee:	9904      	ldr	r1, [sp, #16]
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 fd4d 	bl	8008690 <__lshift>
 8007bf6:	9004      	str	r0, [sp, #16]
 8007bf8:	f1b8 0f00 	cmp.w	r8, #0
 8007bfc:	dd05      	ble.n	8007c0a <_dtoa_r+0x86a>
 8007bfe:	4639      	mov	r1, r7
 8007c00:	4642      	mov	r2, r8
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 fd44 	bl	8008690 <__lshift>
 8007c08:	4607      	mov	r7, r0
 8007c0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c0c:	b353      	cbz	r3, 8007c64 <_dtoa_r+0x8c4>
 8007c0e:	4639      	mov	r1, r7
 8007c10:	9804      	ldr	r0, [sp, #16]
 8007c12:	f000 fd91 	bl	8008738 <__mcmp>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	da24      	bge.n	8007c64 <_dtoa_r+0x8c4>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	220a      	movs	r2, #10
 8007c1e:	9904      	ldr	r1, [sp, #16]
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 fbbf 	bl	80083a4 <__multadd>
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	9004      	str	r0, [sp, #16]
 8007c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 814d 	beq.w	8007ece <_dtoa_r+0xb2e>
 8007c34:	2300      	movs	r3, #0
 8007c36:	4631      	mov	r1, r6
 8007c38:	220a      	movs	r2, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f000 fbb2 	bl	80083a4 <__multadd>
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	4606      	mov	r6, r0
 8007c46:	dc4f      	bgt.n	8007ce8 <_dtoa_r+0x948>
 8007c48:	9b06      	ldr	r3, [sp, #24]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	dd4c      	ble.n	8007ce8 <_dtoa_r+0x948>
 8007c4e:	e011      	b.n	8007c74 <_dtoa_r+0x8d4>
 8007c50:	d0c9      	beq.n	8007be6 <_dtoa_r+0x846>
 8007c52:	9a05      	ldr	r2, [sp, #20]
 8007c54:	331c      	adds	r3, #28
 8007c56:	441a      	add	r2, r3
 8007c58:	9205      	str	r2, [sp, #20]
 8007c5a:	441d      	add	r5, r3
 8007c5c:	4498      	add	r8, r3
 8007c5e:	e7c2      	b.n	8007be6 <_dtoa_r+0x846>
 8007c60:	4603      	mov	r3, r0
 8007c62:	e7f6      	b.n	8007c52 <_dtoa_r+0x8b2>
 8007c64:	f1b9 0f00 	cmp.w	r9, #0
 8007c68:	dc38      	bgt.n	8007cdc <_dtoa_r+0x93c>
 8007c6a:	9b06      	ldr	r3, [sp, #24]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	dd35      	ble.n	8007cdc <_dtoa_r+0x93c>
 8007c70:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c74:	9b02      	ldr	r3, [sp, #8]
 8007c76:	b963      	cbnz	r3, 8007c92 <_dtoa_r+0x8f2>
 8007c78:	4639      	mov	r1, r7
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f000 fb91 	bl	80083a4 <__multadd>
 8007c82:	4601      	mov	r1, r0
 8007c84:	4607      	mov	r7, r0
 8007c86:	9804      	ldr	r0, [sp, #16]
 8007c88:	f000 fd56 	bl	8008738 <__mcmp>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	f73f adcc 	bgt.w	800782a <_dtoa_r+0x48a>
 8007c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c94:	465d      	mov	r5, fp
 8007c96:	ea6f 0a03 	mvn.w	sl, r3
 8007c9a:	f04f 0900 	mov.w	r9, #0
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fb68 	bl	8008376 <_Bfree>
 8007ca6:	2e00      	cmp	r6, #0
 8007ca8:	f43f aeb7 	beq.w	8007a1a <_dtoa_r+0x67a>
 8007cac:	f1b9 0f00 	cmp.w	r9, #0
 8007cb0:	d005      	beq.n	8007cbe <_dtoa_r+0x91e>
 8007cb2:	45b1      	cmp	r9, r6
 8007cb4:	d003      	beq.n	8007cbe <_dtoa_r+0x91e>
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 fb5c 	bl	8008376 <_Bfree>
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	f000 fb58 	bl	8008376 <_Bfree>
 8007cc6:	e6a8      	b.n	8007a1a <_dtoa_r+0x67a>
 8007cc8:	2700      	movs	r7, #0
 8007cca:	463e      	mov	r6, r7
 8007ccc:	e7e1      	b.n	8007c92 <_dtoa_r+0x8f2>
 8007cce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007cd2:	463e      	mov	r6, r7
 8007cd4:	e5a9      	b.n	800782a <_dtoa_r+0x48a>
 8007cd6:	bf00      	nop
 8007cd8:	40240000 	.word	0x40240000
 8007cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cde:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80fa 	beq.w	8007edc <_dtoa_r+0xb3c>
 8007ce8:	2d00      	cmp	r5, #0
 8007cea:	dd05      	ble.n	8007cf8 <_dtoa_r+0x958>
 8007cec:	4631      	mov	r1, r6
 8007cee:	462a      	mov	r2, r5
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fccd 	bl	8008690 <__lshift>
 8007cf6:	4606      	mov	r6, r0
 8007cf8:	9b07      	ldr	r3, [sp, #28]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d04c      	beq.n	8007d98 <_dtoa_r+0x9f8>
 8007cfe:	6871      	ldr	r1, [r6, #4]
 8007d00:	4620      	mov	r0, r4
 8007d02:	f000 fb04 	bl	800830e <_Balloc>
 8007d06:	6932      	ldr	r2, [r6, #16]
 8007d08:	3202      	adds	r2, #2
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	0092      	lsls	r2, r2, #2
 8007d0e:	f106 010c 	add.w	r1, r6, #12
 8007d12:	300c      	adds	r0, #12
 8007d14:	f000 faf0 	bl	80082f8 <memcpy>
 8007d18:	2201      	movs	r2, #1
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fcb7 	bl	8008690 <__lshift>
 8007d22:	9b00      	ldr	r3, [sp, #0]
 8007d24:	f8cd b014 	str.w	fp, [sp, #20]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	46b1      	mov	r9, r6
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	4606      	mov	r6, r0
 8007d32:	4639      	mov	r1, r7
 8007d34:	9804      	ldr	r0, [sp, #16]
 8007d36:	f7ff faa5 	bl	8007284 <quorem>
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	4605      	mov	r5, r0
 8007d3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d42:	9804      	ldr	r0, [sp, #16]
 8007d44:	f000 fcf8 	bl	8008738 <__mcmp>
 8007d48:	4632      	mov	r2, r6
 8007d4a:	9000      	str	r0, [sp, #0]
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	4620      	mov	r0, r4
 8007d50:	f000 fd0c 	bl	800876c <__mdiff>
 8007d54:	68c3      	ldr	r3, [r0, #12]
 8007d56:	4602      	mov	r2, r0
 8007d58:	bb03      	cbnz	r3, 8007d9c <_dtoa_r+0x9fc>
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	9008      	str	r0, [sp, #32]
 8007d5e:	9804      	ldr	r0, [sp, #16]
 8007d60:	f000 fcea 	bl	8008738 <__mcmp>
 8007d64:	9a08      	ldr	r2, [sp, #32]
 8007d66:	4603      	mov	r3, r0
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	9308      	str	r3, [sp, #32]
 8007d6e:	f000 fb02 	bl	8008376 <_Bfree>
 8007d72:	9b08      	ldr	r3, [sp, #32]
 8007d74:	b9a3      	cbnz	r3, 8007da0 <_dtoa_r+0xa00>
 8007d76:	9a06      	ldr	r2, [sp, #24]
 8007d78:	b992      	cbnz	r2, 8007da0 <_dtoa_r+0xa00>
 8007d7a:	9a07      	ldr	r2, [sp, #28]
 8007d7c:	b982      	cbnz	r2, 8007da0 <_dtoa_r+0xa00>
 8007d7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d82:	d029      	beq.n	8007dd8 <_dtoa_r+0xa38>
 8007d84:	9b00      	ldr	r3, [sp, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	dd01      	ble.n	8007d8e <_dtoa_r+0x9ee>
 8007d8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007d8e:	9b05      	ldr	r3, [sp, #20]
 8007d90:	1c5d      	adds	r5, r3, #1
 8007d92:	f883 8000 	strb.w	r8, [r3]
 8007d96:	e782      	b.n	8007c9e <_dtoa_r+0x8fe>
 8007d98:	4630      	mov	r0, r6
 8007d9a:	e7c2      	b.n	8007d22 <_dtoa_r+0x982>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e7e3      	b.n	8007d68 <_dtoa_r+0x9c8>
 8007da0:	9a00      	ldr	r2, [sp, #0]
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	db04      	blt.n	8007db0 <_dtoa_r+0xa10>
 8007da6:	d125      	bne.n	8007df4 <_dtoa_r+0xa54>
 8007da8:	9a06      	ldr	r2, [sp, #24]
 8007daa:	bb1a      	cbnz	r2, 8007df4 <_dtoa_r+0xa54>
 8007dac:	9a07      	ldr	r2, [sp, #28]
 8007dae:	bb0a      	cbnz	r2, 8007df4 <_dtoa_r+0xa54>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	ddec      	ble.n	8007d8e <_dtoa_r+0x9ee>
 8007db4:	2201      	movs	r2, #1
 8007db6:	9904      	ldr	r1, [sp, #16]
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fc69 	bl	8008690 <__lshift>
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	9004      	str	r0, [sp, #16]
 8007dc2:	f000 fcb9 	bl	8008738 <__mcmp>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	dc03      	bgt.n	8007dd2 <_dtoa_r+0xa32>
 8007dca:	d1e0      	bne.n	8007d8e <_dtoa_r+0x9ee>
 8007dcc:	f018 0f01 	tst.w	r8, #1
 8007dd0:	d0dd      	beq.n	8007d8e <_dtoa_r+0x9ee>
 8007dd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dd6:	d1d8      	bne.n	8007d8a <_dtoa_r+0x9ea>
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	9a05      	ldr	r2, [sp, #20]
 8007ddc:	1c5d      	adds	r5, r3, #1
 8007dde:	2339      	movs	r3, #57	; 0x39
 8007de0:	7013      	strb	r3, [r2, #0]
 8007de2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007de6:	2b39      	cmp	r3, #57	; 0x39
 8007de8:	f105 32ff 	add.w	r2, r5, #4294967295
 8007dec:	d04f      	beq.n	8007e8e <_dtoa_r+0xaee>
 8007dee:	3301      	adds	r3, #1
 8007df0:	7013      	strb	r3, [r2, #0]
 8007df2:	e754      	b.n	8007c9e <_dtoa_r+0x8fe>
 8007df4:	9a05      	ldr	r2, [sp, #20]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f102 0501 	add.w	r5, r2, #1
 8007dfc:	dd06      	ble.n	8007e0c <_dtoa_r+0xa6c>
 8007dfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e02:	d0e9      	beq.n	8007dd8 <_dtoa_r+0xa38>
 8007e04:	f108 0801 	add.w	r8, r8, #1
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	e7c2      	b.n	8007d92 <_dtoa_r+0x9f2>
 8007e0c:	9a02      	ldr	r2, [sp, #8]
 8007e0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007e12:	eba5 030b 	sub.w	r3, r5, fp
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d021      	beq.n	8007e5e <_dtoa_r+0xabe>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	9904      	ldr	r1, [sp, #16]
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fabf 	bl	80083a4 <__multadd>
 8007e26:	45b1      	cmp	r9, r6
 8007e28:	9004      	str	r0, [sp, #16]
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	f04f 020a 	mov.w	r2, #10
 8007e32:	4649      	mov	r1, r9
 8007e34:	4620      	mov	r0, r4
 8007e36:	d105      	bne.n	8007e44 <_dtoa_r+0xaa4>
 8007e38:	f000 fab4 	bl	80083a4 <__multadd>
 8007e3c:	4681      	mov	r9, r0
 8007e3e:	4606      	mov	r6, r0
 8007e40:	9505      	str	r5, [sp, #20]
 8007e42:	e776      	b.n	8007d32 <_dtoa_r+0x992>
 8007e44:	f000 faae 	bl	80083a4 <__multadd>
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4681      	mov	r9, r0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	220a      	movs	r2, #10
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 faa7 	bl	80083a4 <__multadd>
 8007e56:	4606      	mov	r6, r0
 8007e58:	e7f2      	b.n	8007e40 <_dtoa_r+0xaa0>
 8007e5a:	f04f 0900 	mov.w	r9, #0
 8007e5e:	2201      	movs	r2, #1
 8007e60:	9904      	ldr	r1, [sp, #16]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 fc14 	bl	8008690 <__lshift>
 8007e68:	4639      	mov	r1, r7
 8007e6a:	9004      	str	r0, [sp, #16]
 8007e6c:	f000 fc64 	bl	8008738 <__mcmp>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	dcb6      	bgt.n	8007de2 <_dtoa_r+0xa42>
 8007e74:	d102      	bne.n	8007e7c <_dtoa_r+0xadc>
 8007e76:	f018 0f01 	tst.w	r8, #1
 8007e7a:	d1b2      	bne.n	8007de2 <_dtoa_r+0xa42>
 8007e7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e80:	2b30      	cmp	r3, #48	; 0x30
 8007e82:	f105 32ff 	add.w	r2, r5, #4294967295
 8007e86:	f47f af0a 	bne.w	8007c9e <_dtoa_r+0x8fe>
 8007e8a:	4615      	mov	r5, r2
 8007e8c:	e7f6      	b.n	8007e7c <_dtoa_r+0xadc>
 8007e8e:	4593      	cmp	fp, r2
 8007e90:	d105      	bne.n	8007e9e <_dtoa_r+0xafe>
 8007e92:	2331      	movs	r3, #49	; 0x31
 8007e94:	f10a 0a01 	add.w	sl, sl, #1
 8007e98:	f88b 3000 	strb.w	r3, [fp]
 8007e9c:	e6ff      	b.n	8007c9e <_dtoa_r+0x8fe>
 8007e9e:	4615      	mov	r5, r2
 8007ea0:	e79f      	b.n	8007de2 <_dtoa_r+0xa42>
 8007ea2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007f08 <_dtoa_r+0xb68>
 8007ea6:	e007      	b.n	8007eb8 <_dtoa_r+0xb18>
 8007ea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007f0c <_dtoa_r+0xb6c>
 8007eae:	b11b      	cbz	r3, 8007eb8 <_dtoa_r+0xb18>
 8007eb0:	f10b 0308 	add.w	r3, fp, #8
 8007eb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	4658      	mov	r0, fp
 8007eba:	b017      	add	sp, #92	; 0x5c
 8007ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec0:	9b06      	ldr	r3, [sp, #24]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	f77f ae35 	ble.w	8007b32 <_dtoa_r+0x792>
 8007ec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eca:	9307      	str	r3, [sp, #28]
 8007ecc:	e649      	b.n	8007b62 <_dtoa_r+0x7c2>
 8007ece:	9b02      	ldr	r3, [sp, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dc03      	bgt.n	8007edc <_dtoa_r+0xb3c>
 8007ed4:	9b06      	ldr	r3, [sp, #24]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	f73f aecc 	bgt.w	8007c74 <_dtoa_r+0x8d4>
 8007edc:	465d      	mov	r5, fp
 8007ede:	4639      	mov	r1, r7
 8007ee0:	9804      	ldr	r0, [sp, #16]
 8007ee2:	f7ff f9cf 	bl	8007284 <quorem>
 8007ee6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007eea:	f805 8b01 	strb.w	r8, [r5], #1
 8007eee:	9a02      	ldr	r2, [sp, #8]
 8007ef0:	eba5 030b 	sub.w	r3, r5, fp
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	ddb0      	ble.n	8007e5a <_dtoa_r+0xaba>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	220a      	movs	r2, #10
 8007efc:	9904      	ldr	r1, [sp, #16]
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fa50 	bl	80083a4 <__multadd>
 8007f04:	9004      	str	r0, [sp, #16]
 8007f06:	e7ea      	b.n	8007ede <_dtoa_r+0xb3e>
 8007f08:	08008edc 	.word	0x08008edc
 8007f0c:	08008f00 	.word	0x08008f00

08007f10 <__sflush_r>:
 8007f10:	898a      	ldrh	r2, [r1, #12]
 8007f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f16:	4605      	mov	r5, r0
 8007f18:	0710      	lsls	r0, r2, #28
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	d458      	bmi.n	8007fd0 <__sflush_r+0xc0>
 8007f1e:	684b      	ldr	r3, [r1, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dc05      	bgt.n	8007f30 <__sflush_r+0x20>
 8007f24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dc02      	bgt.n	8007f30 <__sflush_r+0x20>
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	d0f9      	beq.n	8007f2a <__sflush_r+0x1a>
 8007f36:	2300      	movs	r3, #0
 8007f38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f3c:	682f      	ldr	r7, [r5, #0]
 8007f3e:	6a21      	ldr	r1, [r4, #32]
 8007f40:	602b      	str	r3, [r5, #0]
 8007f42:	d032      	beq.n	8007faa <__sflush_r+0x9a>
 8007f44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	075a      	lsls	r2, r3, #29
 8007f4a:	d505      	bpl.n	8007f58 <__sflush_r+0x48>
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	1ac0      	subs	r0, r0, r3
 8007f50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f52:	b10b      	cbz	r3, 8007f58 <__sflush_r+0x48>
 8007f54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f56:	1ac0      	subs	r0, r0, r3
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5e:	6a21      	ldr	r1, [r4, #32]
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b0      	blx	r6
 8007f64:	1c43      	adds	r3, r0, #1
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	d106      	bne.n	8007f78 <__sflush_r+0x68>
 8007f6a:	6829      	ldr	r1, [r5, #0]
 8007f6c:	291d      	cmp	r1, #29
 8007f6e:	d848      	bhi.n	8008002 <__sflush_r+0xf2>
 8007f70:	4a29      	ldr	r2, [pc, #164]	; (8008018 <__sflush_r+0x108>)
 8007f72:	40ca      	lsrs	r2, r1
 8007f74:	07d6      	lsls	r6, r2, #31
 8007f76:	d544      	bpl.n	8008002 <__sflush_r+0xf2>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	6062      	str	r2, [r4, #4]
 8007f7c:	04d9      	lsls	r1, r3, #19
 8007f7e:	6922      	ldr	r2, [r4, #16]
 8007f80:	6022      	str	r2, [r4, #0]
 8007f82:	d504      	bpl.n	8007f8e <__sflush_r+0x7e>
 8007f84:	1c42      	adds	r2, r0, #1
 8007f86:	d101      	bne.n	8007f8c <__sflush_r+0x7c>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b903      	cbnz	r3, 8007f8e <__sflush_r+0x7e>
 8007f8c:	6560      	str	r0, [r4, #84]	; 0x54
 8007f8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f90:	602f      	str	r7, [r5, #0]
 8007f92:	2900      	cmp	r1, #0
 8007f94:	d0c9      	beq.n	8007f2a <__sflush_r+0x1a>
 8007f96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f9a:	4299      	cmp	r1, r3
 8007f9c:	d002      	beq.n	8007fa4 <__sflush_r+0x94>
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 fc9e 	bl	80088e0 <_free_r>
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	6360      	str	r0, [r4, #52]	; 0x34
 8007fa8:	e7c0      	b.n	8007f2c <__sflush_r+0x1c>
 8007faa:	2301      	movs	r3, #1
 8007fac:	4628      	mov	r0, r5
 8007fae:	47b0      	blx	r6
 8007fb0:	1c41      	adds	r1, r0, #1
 8007fb2:	d1c8      	bne.n	8007f46 <__sflush_r+0x36>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0c5      	beq.n	8007f46 <__sflush_r+0x36>
 8007fba:	2b1d      	cmp	r3, #29
 8007fbc:	d001      	beq.n	8007fc2 <__sflush_r+0xb2>
 8007fbe:	2b16      	cmp	r3, #22
 8007fc0:	d101      	bne.n	8007fc6 <__sflush_r+0xb6>
 8007fc2:	602f      	str	r7, [r5, #0]
 8007fc4:	e7b1      	b.n	8007f2a <__sflush_r+0x1a>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fcc:	81a3      	strh	r3, [r4, #12]
 8007fce:	e7ad      	b.n	8007f2c <__sflush_r+0x1c>
 8007fd0:	690f      	ldr	r7, [r1, #16]
 8007fd2:	2f00      	cmp	r7, #0
 8007fd4:	d0a9      	beq.n	8007f2a <__sflush_r+0x1a>
 8007fd6:	0793      	lsls	r3, r2, #30
 8007fd8:	680e      	ldr	r6, [r1, #0]
 8007fda:	bf08      	it	eq
 8007fdc:	694b      	ldreq	r3, [r1, #20]
 8007fde:	600f      	str	r7, [r1, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	2300      	movne	r3, #0
 8007fe4:	eba6 0807 	sub.w	r8, r6, r7
 8007fe8:	608b      	str	r3, [r1, #8]
 8007fea:	f1b8 0f00 	cmp.w	r8, #0
 8007fee:	dd9c      	ble.n	8007f2a <__sflush_r+0x1a>
 8007ff0:	4643      	mov	r3, r8
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	6a21      	ldr	r1, [r4, #32]
 8007ff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	47b0      	blx	r6
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dc06      	bgt.n	800800e <__sflush_r+0xfe>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	f04f 30ff 	mov.w	r0, #4294967295
 800800c:	e78e      	b.n	8007f2c <__sflush_r+0x1c>
 800800e:	4407      	add	r7, r0
 8008010:	eba8 0800 	sub.w	r8, r8, r0
 8008014:	e7e9      	b.n	8007fea <__sflush_r+0xda>
 8008016:	bf00      	nop
 8008018:	20400001 	.word	0x20400001

0800801c <_fflush_r>:
 800801c:	b538      	push	{r3, r4, r5, lr}
 800801e:	690b      	ldr	r3, [r1, #16]
 8008020:	4605      	mov	r5, r0
 8008022:	460c      	mov	r4, r1
 8008024:	b1db      	cbz	r3, 800805e <_fflush_r+0x42>
 8008026:	b118      	cbz	r0, 8008030 <_fflush_r+0x14>
 8008028:	6983      	ldr	r3, [r0, #24]
 800802a:	b90b      	cbnz	r3, 8008030 <_fflush_r+0x14>
 800802c:	f000 f860 	bl	80080f0 <__sinit>
 8008030:	4b0c      	ldr	r3, [pc, #48]	; (8008064 <_fflush_r+0x48>)
 8008032:	429c      	cmp	r4, r3
 8008034:	d109      	bne.n	800804a <_fflush_r+0x2e>
 8008036:	686c      	ldr	r4, [r5, #4]
 8008038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803c:	b17b      	cbz	r3, 800805e <_fflush_r+0x42>
 800803e:	4621      	mov	r1, r4
 8008040:	4628      	mov	r0, r5
 8008042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008046:	f7ff bf63 	b.w	8007f10 <__sflush_r>
 800804a:	4b07      	ldr	r3, [pc, #28]	; (8008068 <_fflush_r+0x4c>)
 800804c:	429c      	cmp	r4, r3
 800804e:	d101      	bne.n	8008054 <_fflush_r+0x38>
 8008050:	68ac      	ldr	r4, [r5, #8]
 8008052:	e7f1      	b.n	8008038 <_fflush_r+0x1c>
 8008054:	4b05      	ldr	r3, [pc, #20]	; (800806c <_fflush_r+0x50>)
 8008056:	429c      	cmp	r4, r3
 8008058:	bf08      	it	eq
 800805a:	68ec      	ldreq	r4, [r5, #12]
 800805c:	e7ec      	b.n	8008038 <_fflush_r+0x1c>
 800805e:	2000      	movs	r0, #0
 8008060:	bd38      	pop	{r3, r4, r5, pc}
 8008062:	bf00      	nop
 8008064:	08008f30 	.word	0x08008f30
 8008068:	08008f50 	.word	0x08008f50
 800806c:	08008f10 	.word	0x08008f10

08008070 <std>:
 8008070:	2300      	movs	r3, #0
 8008072:	b510      	push	{r4, lr}
 8008074:	4604      	mov	r4, r0
 8008076:	e9c0 3300 	strd	r3, r3, [r0]
 800807a:	6083      	str	r3, [r0, #8]
 800807c:	8181      	strh	r1, [r0, #12]
 800807e:	6643      	str	r3, [r0, #100]	; 0x64
 8008080:	81c2      	strh	r2, [r0, #14]
 8008082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008086:	6183      	str	r3, [r0, #24]
 8008088:	4619      	mov	r1, r3
 800808a:	2208      	movs	r2, #8
 800808c:	305c      	adds	r0, #92	; 0x5c
 800808e:	f7fe faaa 	bl	80065e6 <memset>
 8008092:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <std+0x38>)
 8008094:	6263      	str	r3, [r4, #36]	; 0x24
 8008096:	4b05      	ldr	r3, [pc, #20]	; (80080ac <std+0x3c>)
 8008098:	62a3      	str	r3, [r4, #40]	; 0x28
 800809a:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <std+0x40>)
 800809c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800809e:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <std+0x44>)
 80080a0:	6224      	str	r4, [r4, #32]
 80080a2:	6323      	str	r3, [r4, #48]	; 0x30
 80080a4:	bd10      	pop	{r4, pc}
 80080a6:	bf00      	nop
 80080a8:	08008cd1 	.word	0x08008cd1
 80080ac:	08008cf3 	.word	0x08008cf3
 80080b0:	08008d2b 	.word	0x08008d2b
 80080b4:	08008d4f 	.word	0x08008d4f

080080b8 <_cleanup_r>:
 80080b8:	4901      	ldr	r1, [pc, #4]	; (80080c0 <_cleanup_r+0x8>)
 80080ba:	f000 b885 	b.w	80081c8 <_fwalk_reent>
 80080be:	bf00      	nop
 80080c0:	0800801d 	.word	0x0800801d

080080c4 <__sfmoreglue>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	1e4a      	subs	r2, r1, #1
 80080c8:	2568      	movs	r5, #104	; 0x68
 80080ca:	4355      	muls	r5, r2
 80080cc:	460e      	mov	r6, r1
 80080ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080d2:	f000 fc53 	bl	800897c <_malloc_r>
 80080d6:	4604      	mov	r4, r0
 80080d8:	b140      	cbz	r0, 80080ec <__sfmoreglue+0x28>
 80080da:	2100      	movs	r1, #0
 80080dc:	e9c0 1600 	strd	r1, r6, [r0]
 80080e0:	300c      	adds	r0, #12
 80080e2:	60a0      	str	r0, [r4, #8]
 80080e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080e8:	f7fe fa7d 	bl	80065e6 <memset>
 80080ec:	4620      	mov	r0, r4
 80080ee:	bd70      	pop	{r4, r5, r6, pc}

080080f0 <__sinit>:
 80080f0:	6983      	ldr	r3, [r0, #24]
 80080f2:	b510      	push	{r4, lr}
 80080f4:	4604      	mov	r4, r0
 80080f6:	bb33      	cbnz	r3, 8008146 <__sinit+0x56>
 80080f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80080fc:	6503      	str	r3, [r0, #80]	; 0x50
 80080fe:	4b12      	ldr	r3, [pc, #72]	; (8008148 <__sinit+0x58>)
 8008100:	4a12      	ldr	r2, [pc, #72]	; (800814c <__sinit+0x5c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6282      	str	r2, [r0, #40]	; 0x28
 8008106:	4298      	cmp	r0, r3
 8008108:	bf04      	itt	eq
 800810a:	2301      	moveq	r3, #1
 800810c:	6183      	streq	r3, [r0, #24]
 800810e:	f000 f81f 	bl	8008150 <__sfp>
 8008112:	6060      	str	r0, [r4, #4]
 8008114:	4620      	mov	r0, r4
 8008116:	f000 f81b 	bl	8008150 <__sfp>
 800811a:	60a0      	str	r0, [r4, #8]
 800811c:	4620      	mov	r0, r4
 800811e:	f000 f817 	bl	8008150 <__sfp>
 8008122:	2200      	movs	r2, #0
 8008124:	60e0      	str	r0, [r4, #12]
 8008126:	2104      	movs	r1, #4
 8008128:	6860      	ldr	r0, [r4, #4]
 800812a:	f7ff ffa1 	bl	8008070 <std>
 800812e:	2201      	movs	r2, #1
 8008130:	2109      	movs	r1, #9
 8008132:	68a0      	ldr	r0, [r4, #8]
 8008134:	f7ff ff9c 	bl	8008070 <std>
 8008138:	2202      	movs	r2, #2
 800813a:	2112      	movs	r1, #18
 800813c:	68e0      	ldr	r0, [r4, #12]
 800813e:	f7ff ff97 	bl	8008070 <std>
 8008142:	2301      	movs	r3, #1
 8008144:	61a3      	str	r3, [r4, #24]
 8008146:	bd10      	pop	{r4, pc}
 8008148:	08008ec8 	.word	0x08008ec8
 800814c:	080080b9 	.word	0x080080b9

08008150 <__sfp>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	4b1b      	ldr	r3, [pc, #108]	; (80081c0 <__sfp+0x70>)
 8008154:	681e      	ldr	r6, [r3, #0]
 8008156:	69b3      	ldr	r3, [r6, #24]
 8008158:	4607      	mov	r7, r0
 800815a:	b913      	cbnz	r3, 8008162 <__sfp+0x12>
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff ffc7 	bl	80080f0 <__sinit>
 8008162:	3648      	adds	r6, #72	; 0x48
 8008164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008168:	3b01      	subs	r3, #1
 800816a:	d503      	bpl.n	8008174 <__sfp+0x24>
 800816c:	6833      	ldr	r3, [r6, #0]
 800816e:	b133      	cbz	r3, 800817e <__sfp+0x2e>
 8008170:	6836      	ldr	r6, [r6, #0]
 8008172:	e7f7      	b.n	8008164 <__sfp+0x14>
 8008174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008178:	b16d      	cbz	r5, 8008196 <__sfp+0x46>
 800817a:	3468      	adds	r4, #104	; 0x68
 800817c:	e7f4      	b.n	8008168 <__sfp+0x18>
 800817e:	2104      	movs	r1, #4
 8008180:	4638      	mov	r0, r7
 8008182:	f7ff ff9f 	bl	80080c4 <__sfmoreglue>
 8008186:	6030      	str	r0, [r6, #0]
 8008188:	2800      	cmp	r0, #0
 800818a:	d1f1      	bne.n	8008170 <__sfp+0x20>
 800818c:	230c      	movs	r3, #12
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4604      	mov	r4, r0
 8008192:	4620      	mov	r0, r4
 8008194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008196:	4b0b      	ldr	r3, [pc, #44]	; (80081c4 <__sfp+0x74>)
 8008198:	6665      	str	r5, [r4, #100]	; 0x64
 800819a:	e9c4 5500 	strd	r5, r5, [r4]
 800819e:	60a5      	str	r5, [r4, #8]
 80081a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80081a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80081a8:	2208      	movs	r2, #8
 80081aa:	4629      	mov	r1, r5
 80081ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081b0:	f7fe fa19 	bl	80065e6 <memset>
 80081b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081bc:	e7e9      	b.n	8008192 <__sfp+0x42>
 80081be:	bf00      	nop
 80081c0:	08008ec8 	.word	0x08008ec8
 80081c4:	ffff0001 	.word	0xffff0001

080081c8 <_fwalk_reent>:
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	4680      	mov	r8, r0
 80081ce:	4689      	mov	r9, r1
 80081d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081d4:	2600      	movs	r6, #0
 80081d6:	b914      	cbnz	r4, 80081de <_fwalk_reent+0x16>
 80081d8:	4630      	mov	r0, r6
 80081da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80081e2:	3f01      	subs	r7, #1
 80081e4:	d501      	bpl.n	80081ea <_fwalk_reent+0x22>
 80081e6:	6824      	ldr	r4, [r4, #0]
 80081e8:	e7f5      	b.n	80081d6 <_fwalk_reent+0xe>
 80081ea:	89ab      	ldrh	r3, [r5, #12]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d907      	bls.n	8008200 <_fwalk_reent+0x38>
 80081f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081f4:	3301      	adds	r3, #1
 80081f6:	d003      	beq.n	8008200 <_fwalk_reent+0x38>
 80081f8:	4629      	mov	r1, r5
 80081fa:	4640      	mov	r0, r8
 80081fc:	47c8      	blx	r9
 80081fe:	4306      	orrs	r6, r0
 8008200:	3568      	adds	r5, #104	; 0x68
 8008202:	e7ee      	b.n	80081e2 <_fwalk_reent+0x1a>

08008204 <_localeconv_r>:
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <_localeconv_r+0x14>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6a18      	ldr	r0, [r3, #32]
 800820a:	4b04      	ldr	r3, [pc, #16]	; (800821c <_localeconv_r+0x18>)
 800820c:	2800      	cmp	r0, #0
 800820e:	bf08      	it	eq
 8008210:	4618      	moveq	r0, r3
 8008212:	30f0      	adds	r0, #240	; 0xf0
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	200004a4 	.word	0x200004a4
 800821c:	20000508 	.word	0x20000508

08008220 <__swhatbuf_r>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	460e      	mov	r6, r1
 8008224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008228:	2900      	cmp	r1, #0
 800822a:	b096      	sub	sp, #88	; 0x58
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	da07      	bge.n	8008242 <__swhatbuf_r+0x22>
 8008232:	2300      	movs	r3, #0
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	89b3      	ldrh	r3, [r6, #12]
 8008238:	061a      	lsls	r2, r3, #24
 800823a:	d410      	bmi.n	800825e <__swhatbuf_r+0x3e>
 800823c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008240:	e00e      	b.n	8008260 <__swhatbuf_r+0x40>
 8008242:	466a      	mov	r2, sp
 8008244:	f000 fdaa 	bl	8008d9c <_fstat_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	dbf2      	blt.n	8008232 <__swhatbuf_r+0x12>
 800824c:	9a01      	ldr	r2, [sp, #4]
 800824e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008252:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008256:	425a      	negs	r2, r3
 8008258:	415a      	adcs	r2, r3
 800825a:	602a      	str	r2, [r5, #0]
 800825c:	e7ee      	b.n	800823c <__swhatbuf_r+0x1c>
 800825e:	2340      	movs	r3, #64	; 0x40
 8008260:	2000      	movs	r0, #0
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	b016      	add	sp, #88	; 0x58
 8008266:	bd70      	pop	{r4, r5, r6, pc}

08008268 <__smakebuf_r>:
 8008268:	898b      	ldrh	r3, [r1, #12]
 800826a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800826c:	079d      	lsls	r5, r3, #30
 800826e:	4606      	mov	r6, r0
 8008270:	460c      	mov	r4, r1
 8008272:	d507      	bpl.n	8008284 <__smakebuf_r+0x1c>
 8008274:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	6123      	str	r3, [r4, #16]
 800827c:	2301      	movs	r3, #1
 800827e:	6163      	str	r3, [r4, #20]
 8008280:	b002      	add	sp, #8
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	ab01      	add	r3, sp, #4
 8008286:	466a      	mov	r2, sp
 8008288:	f7ff ffca 	bl	8008220 <__swhatbuf_r>
 800828c:	9900      	ldr	r1, [sp, #0]
 800828e:	4605      	mov	r5, r0
 8008290:	4630      	mov	r0, r6
 8008292:	f000 fb73 	bl	800897c <_malloc_r>
 8008296:	b948      	cbnz	r0, 80082ac <__smakebuf_r+0x44>
 8008298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800829c:	059a      	lsls	r2, r3, #22
 800829e:	d4ef      	bmi.n	8008280 <__smakebuf_r+0x18>
 80082a0:	f023 0303 	bic.w	r3, r3, #3
 80082a4:	f043 0302 	orr.w	r3, r3, #2
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	e7e3      	b.n	8008274 <__smakebuf_r+0xc>
 80082ac:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <__smakebuf_r+0x7c>)
 80082ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	6020      	str	r0, [r4, #0]
 80082b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b8:	81a3      	strh	r3, [r4, #12]
 80082ba:	9b00      	ldr	r3, [sp, #0]
 80082bc:	6163      	str	r3, [r4, #20]
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	6120      	str	r0, [r4, #16]
 80082c2:	b15b      	cbz	r3, 80082dc <__smakebuf_r+0x74>
 80082c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c8:	4630      	mov	r0, r6
 80082ca:	f000 fd79 	bl	8008dc0 <_isatty_r>
 80082ce:	b128      	cbz	r0, 80082dc <__smakebuf_r+0x74>
 80082d0:	89a3      	ldrh	r3, [r4, #12]
 80082d2:	f023 0303 	bic.w	r3, r3, #3
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	431d      	orrs	r5, r3
 80082e0:	81a5      	strh	r5, [r4, #12]
 80082e2:	e7cd      	b.n	8008280 <__smakebuf_r+0x18>
 80082e4:	080080b9 	.word	0x080080b9

080082e8 <malloc>:
 80082e8:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <malloc+0xc>)
 80082ea:	4601      	mov	r1, r0
 80082ec:	6818      	ldr	r0, [r3, #0]
 80082ee:	f000 bb45 	b.w	800897c <_malloc_r>
 80082f2:	bf00      	nop
 80082f4:	200004a4 	.word	0x200004a4

080082f8 <memcpy>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	1e43      	subs	r3, r0, #1
 80082fc:	440a      	add	r2, r1
 80082fe:	4291      	cmp	r1, r2
 8008300:	d100      	bne.n	8008304 <memcpy+0xc>
 8008302:	bd10      	pop	{r4, pc}
 8008304:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800830c:	e7f7      	b.n	80082fe <memcpy+0x6>

0800830e <_Balloc>:
 800830e:	b570      	push	{r4, r5, r6, lr}
 8008310:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008312:	4604      	mov	r4, r0
 8008314:	460e      	mov	r6, r1
 8008316:	b93d      	cbnz	r5, 8008328 <_Balloc+0x1a>
 8008318:	2010      	movs	r0, #16
 800831a:	f7ff ffe5 	bl	80082e8 <malloc>
 800831e:	6260      	str	r0, [r4, #36]	; 0x24
 8008320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008324:	6005      	str	r5, [r0, #0]
 8008326:	60c5      	str	r5, [r0, #12]
 8008328:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800832a:	68eb      	ldr	r3, [r5, #12]
 800832c:	b183      	cbz	r3, 8008350 <_Balloc+0x42>
 800832e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008336:	b9b8      	cbnz	r0, 8008368 <_Balloc+0x5a>
 8008338:	2101      	movs	r1, #1
 800833a:	fa01 f506 	lsl.w	r5, r1, r6
 800833e:	1d6a      	adds	r2, r5, #5
 8008340:	0092      	lsls	r2, r2, #2
 8008342:	4620      	mov	r0, r4
 8008344:	f000 fabe 	bl	80088c4 <_calloc_r>
 8008348:	b160      	cbz	r0, 8008364 <_Balloc+0x56>
 800834a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800834e:	e00e      	b.n	800836e <_Balloc+0x60>
 8008350:	2221      	movs	r2, #33	; 0x21
 8008352:	2104      	movs	r1, #4
 8008354:	4620      	mov	r0, r4
 8008356:	f000 fab5 	bl	80088c4 <_calloc_r>
 800835a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800835c:	60e8      	str	r0, [r5, #12]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e4      	bne.n	800832e <_Balloc+0x20>
 8008364:	2000      	movs	r0, #0
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	6802      	ldr	r2, [r0, #0]
 800836a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800836e:	2300      	movs	r3, #0
 8008370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008374:	e7f7      	b.n	8008366 <_Balloc+0x58>

08008376 <_Bfree>:
 8008376:	b570      	push	{r4, r5, r6, lr}
 8008378:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800837a:	4606      	mov	r6, r0
 800837c:	460d      	mov	r5, r1
 800837e:	b93c      	cbnz	r4, 8008390 <_Bfree+0x1a>
 8008380:	2010      	movs	r0, #16
 8008382:	f7ff ffb1 	bl	80082e8 <malloc>
 8008386:	6270      	str	r0, [r6, #36]	; 0x24
 8008388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800838c:	6004      	str	r4, [r0, #0]
 800838e:	60c4      	str	r4, [r0, #12]
 8008390:	b13d      	cbz	r5, 80083a2 <_Bfree+0x2c>
 8008392:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008394:	686a      	ldr	r2, [r5, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800839c:	6029      	str	r1, [r5, #0]
 800839e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80083a2:	bd70      	pop	{r4, r5, r6, pc}

080083a4 <__multadd>:
 80083a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a8:	690d      	ldr	r5, [r1, #16]
 80083aa:	461f      	mov	r7, r3
 80083ac:	4606      	mov	r6, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	f101 0c14 	add.w	ip, r1, #20
 80083b4:	2300      	movs	r3, #0
 80083b6:	f8dc 0000 	ldr.w	r0, [ip]
 80083ba:	b281      	uxth	r1, r0
 80083bc:	fb02 7101 	mla	r1, r2, r1, r7
 80083c0:	0c0f      	lsrs	r7, r1, #16
 80083c2:	0c00      	lsrs	r0, r0, #16
 80083c4:	fb02 7000 	mla	r0, r2, r0, r7
 80083c8:	b289      	uxth	r1, r1
 80083ca:	3301      	adds	r3, #1
 80083cc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80083d0:	429d      	cmp	r5, r3
 80083d2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80083d6:	f84c 1b04 	str.w	r1, [ip], #4
 80083da:	dcec      	bgt.n	80083b6 <__multadd+0x12>
 80083dc:	b1d7      	cbz	r7, 8008414 <__multadd+0x70>
 80083de:	68a3      	ldr	r3, [r4, #8]
 80083e0:	42ab      	cmp	r3, r5
 80083e2:	dc12      	bgt.n	800840a <__multadd+0x66>
 80083e4:	6861      	ldr	r1, [r4, #4]
 80083e6:	4630      	mov	r0, r6
 80083e8:	3101      	adds	r1, #1
 80083ea:	f7ff ff90 	bl	800830e <_Balloc>
 80083ee:	6922      	ldr	r2, [r4, #16]
 80083f0:	3202      	adds	r2, #2
 80083f2:	f104 010c 	add.w	r1, r4, #12
 80083f6:	4680      	mov	r8, r0
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	300c      	adds	r0, #12
 80083fc:	f7ff ff7c 	bl	80082f8 <memcpy>
 8008400:	4621      	mov	r1, r4
 8008402:	4630      	mov	r0, r6
 8008404:	f7ff ffb7 	bl	8008376 <_Bfree>
 8008408:	4644      	mov	r4, r8
 800840a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800840e:	3501      	adds	r5, #1
 8008410:	615f      	str	r7, [r3, #20]
 8008412:	6125      	str	r5, [r4, #16]
 8008414:	4620      	mov	r0, r4
 8008416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800841a <__hi0bits>:
 800841a:	0c02      	lsrs	r2, r0, #16
 800841c:	0412      	lsls	r2, r2, #16
 800841e:	4603      	mov	r3, r0
 8008420:	b9b2      	cbnz	r2, 8008450 <__hi0bits+0x36>
 8008422:	0403      	lsls	r3, r0, #16
 8008424:	2010      	movs	r0, #16
 8008426:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800842a:	bf04      	itt	eq
 800842c:	021b      	lsleq	r3, r3, #8
 800842e:	3008      	addeq	r0, #8
 8008430:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008434:	bf04      	itt	eq
 8008436:	011b      	lsleq	r3, r3, #4
 8008438:	3004      	addeq	r0, #4
 800843a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800843e:	bf04      	itt	eq
 8008440:	009b      	lsleq	r3, r3, #2
 8008442:	3002      	addeq	r0, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	db06      	blt.n	8008456 <__hi0bits+0x3c>
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	d503      	bpl.n	8008454 <__hi0bits+0x3a>
 800844c:	3001      	adds	r0, #1
 800844e:	4770      	bx	lr
 8008450:	2000      	movs	r0, #0
 8008452:	e7e8      	b.n	8008426 <__hi0bits+0xc>
 8008454:	2020      	movs	r0, #32
 8008456:	4770      	bx	lr

08008458 <__lo0bits>:
 8008458:	6803      	ldr	r3, [r0, #0]
 800845a:	f013 0207 	ands.w	r2, r3, #7
 800845e:	4601      	mov	r1, r0
 8008460:	d00b      	beq.n	800847a <__lo0bits+0x22>
 8008462:	07da      	lsls	r2, r3, #31
 8008464:	d423      	bmi.n	80084ae <__lo0bits+0x56>
 8008466:	0798      	lsls	r0, r3, #30
 8008468:	bf49      	itett	mi
 800846a:	085b      	lsrmi	r3, r3, #1
 800846c:	089b      	lsrpl	r3, r3, #2
 800846e:	2001      	movmi	r0, #1
 8008470:	600b      	strmi	r3, [r1, #0]
 8008472:	bf5c      	itt	pl
 8008474:	600b      	strpl	r3, [r1, #0]
 8008476:	2002      	movpl	r0, #2
 8008478:	4770      	bx	lr
 800847a:	b298      	uxth	r0, r3
 800847c:	b9a8      	cbnz	r0, 80084aa <__lo0bits+0x52>
 800847e:	0c1b      	lsrs	r3, r3, #16
 8008480:	2010      	movs	r0, #16
 8008482:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008486:	bf04      	itt	eq
 8008488:	0a1b      	lsreq	r3, r3, #8
 800848a:	3008      	addeq	r0, #8
 800848c:	071a      	lsls	r2, r3, #28
 800848e:	bf04      	itt	eq
 8008490:	091b      	lsreq	r3, r3, #4
 8008492:	3004      	addeq	r0, #4
 8008494:	079a      	lsls	r2, r3, #30
 8008496:	bf04      	itt	eq
 8008498:	089b      	lsreq	r3, r3, #2
 800849a:	3002      	addeq	r0, #2
 800849c:	07da      	lsls	r2, r3, #31
 800849e:	d402      	bmi.n	80084a6 <__lo0bits+0x4e>
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	d006      	beq.n	80084b2 <__lo0bits+0x5a>
 80084a4:	3001      	adds	r0, #1
 80084a6:	600b      	str	r3, [r1, #0]
 80084a8:	4770      	bx	lr
 80084aa:	4610      	mov	r0, r2
 80084ac:	e7e9      	b.n	8008482 <__lo0bits+0x2a>
 80084ae:	2000      	movs	r0, #0
 80084b0:	4770      	bx	lr
 80084b2:	2020      	movs	r0, #32
 80084b4:	4770      	bx	lr

080084b6 <__i2b>:
 80084b6:	b510      	push	{r4, lr}
 80084b8:	460c      	mov	r4, r1
 80084ba:	2101      	movs	r1, #1
 80084bc:	f7ff ff27 	bl	800830e <_Balloc>
 80084c0:	2201      	movs	r2, #1
 80084c2:	6144      	str	r4, [r0, #20]
 80084c4:	6102      	str	r2, [r0, #16]
 80084c6:	bd10      	pop	{r4, pc}

080084c8 <__multiply>:
 80084c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4614      	mov	r4, r2
 80084ce:	690a      	ldr	r2, [r1, #16]
 80084d0:	6923      	ldr	r3, [r4, #16]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	bfb8      	it	lt
 80084d6:	460b      	movlt	r3, r1
 80084d8:	4688      	mov	r8, r1
 80084da:	bfbc      	itt	lt
 80084dc:	46a0      	movlt	r8, r4
 80084de:	461c      	movlt	r4, r3
 80084e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80084e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80084e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80084f0:	eb07 0609 	add.w	r6, r7, r9
 80084f4:	42b3      	cmp	r3, r6
 80084f6:	bfb8      	it	lt
 80084f8:	3101      	addlt	r1, #1
 80084fa:	f7ff ff08 	bl	800830e <_Balloc>
 80084fe:	f100 0514 	add.w	r5, r0, #20
 8008502:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008506:	462b      	mov	r3, r5
 8008508:	2200      	movs	r2, #0
 800850a:	4573      	cmp	r3, lr
 800850c:	d316      	bcc.n	800853c <__multiply+0x74>
 800850e:	f104 0214 	add.w	r2, r4, #20
 8008512:	f108 0114 	add.w	r1, r8, #20
 8008516:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800851a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	9b00      	ldr	r3, [sp, #0]
 8008522:	9201      	str	r2, [sp, #4]
 8008524:	4293      	cmp	r3, r2
 8008526:	d80c      	bhi.n	8008542 <__multiply+0x7a>
 8008528:	2e00      	cmp	r6, #0
 800852a:	dd03      	ble.n	8008534 <__multiply+0x6c>
 800852c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008530:	2b00      	cmp	r3, #0
 8008532:	d05d      	beq.n	80085f0 <__multiply+0x128>
 8008534:	6106      	str	r6, [r0, #16]
 8008536:	b003      	add	sp, #12
 8008538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853c:	f843 2b04 	str.w	r2, [r3], #4
 8008540:	e7e3      	b.n	800850a <__multiply+0x42>
 8008542:	f8b2 b000 	ldrh.w	fp, [r2]
 8008546:	f1bb 0f00 	cmp.w	fp, #0
 800854a:	d023      	beq.n	8008594 <__multiply+0xcc>
 800854c:	4689      	mov	r9, r1
 800854e:	46ac      	mov	ip, r5
 8008550:	f04f 0800 	mov.w	r8, #0
 8008554:	f859 4b04 	ldr.w	r4, [r9], #4
 8008558:	f8dc a000 	ldr.w	sl, [ip]
 800855c:	b2a3      	uxth	r3, r4
 800855e:	fa1f fa8a 	uxth.w	sl, sl
 8008562:	fb0b a303 	mla	r3, fp, r3, sl
 8008566:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800856a:	f8dc 4000 	ldr.w	r4, [ip]
 800856e:	4443      	add	r3, r8
 8008570:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008574:	fb0b 840a 	mla	r4, fp, sl, r8
 8008578:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800857c:	46e2      	mov	sl, ip
 800857e:	b29b      	uxth	r3, r3
 8008580:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008584:	454f      	cmp	r7, r9
 8008586:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800858a:	f84a 3b04 	str.w	r3, [sl], #4
 800858e:	d82b      	bhi.n	80085e8 <__multiply+0x120>
 8008590:	f8cc 8004 	str.w	r8, [ip, #4]
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800859a:	3204      	adds	r2, #4
 800859c:	f1ba 0f00 	cmp.w	sl, #0
 80085a0:	d020      	beq.n	80085e4 <__multiply+0x11c>
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	4689      	mov	r9, r1
 80085a6:	46a8      	mov	r8, r5
 80085a8:	f04f 0b00 	mov.w	fp, #0
 80085ac:	f8b9 c000 	ldrh.w	ip, [r9]
 80085b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80085b4:	fb0a 440c 	mla	r4, sl, ip, r4
 80085b8:	445c      	add	r4, fp
 80085ba:	46c4      	mov	ip, r8
 80085bc:	b29b      	uxth	r3, r3
 80085be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80085c2:	f84c 3b04 	str.w	r3, [ip], #4
 80085c6:	f859 3b04 	ldr.w	r3, [r9], #4
 80085ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80085ce:	0c1b      	lsrs	r3, r3, #16
 80085d0:	fb0a b303 	mla	r3, sl, r3, fp
 80085d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80085d8:	454f      	cmp	r7, r9
 80085da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80085de:	d805      	bhi.n	80085ec <__multiply+0x124>
 80085e0:	f8c8 3004 	str.w	r3, [r8, #4]
 80085e4:	3504      	adds	r5, #4
 80085e6:	e79b      	b.n	8008520 <__multiply+0x58>
 80085e8:	46d4      	mov	ip, sl
 80085ea:	e7b3      	b.n	8008554 <__multiply+0x8c>
 80085ec:	46e0      	mov	r8, ip
 80085ee:	e7dd      	b.n	80085ac <__multiply+0xe4>
 80085f0:	3e01      	subs	r6, #1
 80085f2:	e799      	b.n	8008528 <__multiply+0x60>

080085f4 <__pow5mult>:
 80085f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	4615      	mov	r5, r2
 80085fa:	f012 0203 	ands.w	r2, r2, #3
 80085fe:	4606      	mov	r6, r0
 8008600:	460f      	mov	r7, r1
 8008602:	d007      	beq.n	8008614 <__pow5mult+0x20>
 8008604:	3a01      	subs	r2, #1
 8008606:	4c21      	ldr	r4, [pc, #132]	; (800868c <__pow5mult+0x98>)
 8008608:	2300      	movs	r3, #0
 800860a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800860e:	f7ff fec9 	bl	80083a4 <__multadd>
 8008612:	4607      	mov	r7, r0
 8008614:	10ad      	asrs	r5, r5, #2
 8008616:	d035      	beq.n	8008684 <__pow5mult+0x90>
 8008618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800861a:	b93c      	cbnz	r4, 800862c <__pow5mult+0x38>
 800861c:	2010      	movs	r0, #16
 800861e:	f7ff fe63 	bl	80082e8 <malloc>
 8008622:	6270      	str	r0, [r6, #36]	; 0x24
 8008624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008628:	6004      	str	r4, [r0, #0]
 800862a:	60c4      	str	r4, [r0, #12]
 800862c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008634:	b94c      	cbnz	r4, 800864a <__pow5mult+0x56>
 8008636:	f240 2171 	movw	r1, #625	; 0x271
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ff3b 	bl	80084b6 <__i2b>
 8008640:	2300      	movs	r3, #0
 8008642:	f8c8 0008 	str.w	r0, [r8, #8]
 8008646:	4604      	mov	r4, r0
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	f04f 0800 	mov.w	r8, #0
 800864e:	07eb      	lsls	r3, r5, #31
 8008650:	d50a      	bpl.n	8008668 <__pow5mult+0x74>
 8008652:	4639      	mov	r1, r7
 8008654:	4622      	mov	r2, r4
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ff36 	bl	80084c8 <__multiply>
 800865c:	4639      	mov	r1, r7
 800865e:	4681      	mov	r9, r0
 8008660:	4630      	mov	r0, r6
 8008662:	f7ff fe88 	bl	8008376 <_Bfree>
 8008666:	464f      	mov	r7, r9
 8008668:	106d      	asrs	r5, r5, #1
 800866a:	d00b      	beq.n	8008684 <__pow5mult+0x90>
 800866c:	6820      	ldr	r0, [r4, #0]
 800866e:	b938      	cbnz	r0, 8008680 <__pow5mult+0x8c>
 8008670:	4622      	mov	r2, r4
 8008672:	4621      	mov	r1, r4
 8008674:	4630      	mov	r0, r6
 8008676:	f7ff ff27 	bl	80084c8 <__multiply>
 800867a:	6020      	str	r0, [r4, #0]
 800867c:	f8c0 8000 	str.w	r8, [r0]
 8008680:	4604      	mov	r4, r0
 8008682:	e7e4      	b.n	800864e <__pow5mult+0x5a>
 8008684:	4638      	mov	r0, r7
 8008686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800868a:	bf00      	nop
 800868c:	08009060 	.word	0x08009060

08008690 <__lshift>:
 8008690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008694:	460c      	mov	r4, r1
 8008696:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	6849      	ldr	r1, [r1, #4]
 800869e:	eb0a 0903 	add.w	r9, sl, r3
 80086a2:	68a3      	ldr	r3, [r4, #8]
 80086a4:	4607      	mov	r7, r0
 80086a6:	4616      	mov	r6, r2
 80086a8:	f109 0501 	add.w	r5, r9, #1
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	db32      	blt.n	8008716 <__lshift+0x86>
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff fe2c 	bl	800830e <_Balloc>
 80086b6:	2300      	movs	r3, #0
 80086b8:	4680      	mov	r8, r0
 80086ba:	f100 0114 	add.w	r1, r0, #20
 80086be:	461a      	mov	r2, r3
 80086c0:	4553      	cmp	r3, sl
 80086c2:	db2b      	blt.n	800871c <__lshift+0x8c>
 80086c4:	6920      	ldr	r0, [r4, #16]
 80086c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086ca:	f104 0314 	add.w	r3, r4, #20
 80086ce:	f016 021f 	ands.w	r2, r6, #31
 80086d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086da:	d025      	beq.n	8008728 <__lshift+0x98>
 80086dc:	f1c2 0e20 	rsb	lr, r2, #32
 80086e0:	2000      	movs	r0, #0
 80086e2:	681e      	ldr	r6, [r3, #0]
 80086e4:	468a      	mov	sl, r1
 80086e6:	4096      	lsls	r6, r2
 80086e8:	4330      	orrs	r0, r6
 80086ea:	f84a 0b04 	str.w	r0, [sl], #4
 80086ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80086f2:	459c      	cmp	ip, r3
 80086f4:	fa20 f00e 	lsr.w	r0, r0, lr
 80086f8:	d814      	bhi.n	8008724 <__lshift+0x94>
 80086fa:	6048      	str	r0, [r1, #4]
 80086fc:	b108      	cbz	r0, 8008702 <__lshift+0x72>
 80086fe:	f109 0502 	add.w	r5, r9, #2
 8008702:	3d01      	subs	r5, #1
 8008704:	4638      	mov	r0, r7
 8008706:	f8c8 5010 	str.w	r5, [r8, #16]
 800870a:	4621      	mov	r1, r4
 800870c:	f7ff fe33 	bl	8008376 <_Bfree>
 8008710:	4640      	mov	r0, r8
 8008712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008716:	3101      	adds	r1, #1
 8008718:	005b      	lsls	r3, r3, #1
 800871a:	e7c7      	b.n	80086ac <__lshift+0x1c>
 800871c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008720:	3301      	adds	r3, #1
 8008722:	e7cd      	b.n	80086c0 <__lshift+0x30>
 8008724:	4651      	mov	r1, sl
 8008726:	e7dc      	b.n	80086e2 <__lshift+0x52>
 8008728:	3904      	subs	r1, #4
 800872a:	f853 2b04 	ldr.w	r2, [r3], #4
 800872e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008732:	459c      	cmp	ip, r3
 8008734:	d8f9      	bhi.n	800872a <__lshift+0x9a>
 8008736:	e7e4      	b.n	8008702 <__lshift+0x72>

08008738 <__mcmp>:
 8008738:	6903      	ldr	r3, [r0, #16]
 800873a:	690a      	ldr	r2, [r1, #16]
 800873c:	1a9b      	subs	r3, r3, r2
 800873e:	b530      	push	{r4, r5, lr}
 8008740:	d10c      	bne.n	800875c <__mcmp+0x24>
 8008742:	0092      	lsls	r2, r2, #2
 8008744:	3014      	adds	r0, #20
 8008746:	3114      	adds	r1, #20
 8008748:	1884      	adds	r4, r0, r2
 800874a:	4411      	add	r1, r2
 800874c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008754:	4295      	cmp	r5, r2
 8008756:	d003      	beq.n	8008760 <__mcmp+0x28>
 8008758:	d305      	bcc.n	8008766 <__mcmp+0x2e>
 800875a:	2301      	movs	r3, #1
 800875c:	4618      	mov	r0, r3
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	42a0      	cmp	r0, r4
 8008762:	d3f3      	bcc.n	800874c <__mcmp+0x14>
 8008764:	e7fa      	b.n	800875c <__mcmp+0x24>
 8008766:	f04f 33ff 	mov.w	r3, #4294967295
 800876a:	e7f7      	b.n	800875c <__mcmp+0x24>

0800876c <__mdiff>:
 800876c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	460d      	mov	r5, r1
 8008772:	4607      	mov	r7, r0
 8008774:	4611      	mov	r1, r2
 8008776:	4628      	mov	r0, r5
 8008778:	4614      	mov	r4, r2
 800877a:	f7ff ffdd 	bl	8008738 <__mcmp>
 800877e:	1e06      	subs	r6, r0, #0
 8008780:	d108      	bne.n	8008794 <__mdiff+0x28>
 8008782:	4631      	mov	r1, r6
 8008784:	4638      	mov	r0, r7
 8008786:	f7ff fdc2 	bl	800830e <_Balloc>
 800878a:	2301      	movs	r3, #1
 800878c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008794:	bfa4      	itt	ge
 8008796:	4623      	movge	r3, r4
 8008798:	462c      	movge	r4, r5
 800879a:	4638      	mov	r0, r7
 800879c:	6861      	ldr	r1, [r4, #4]
 800879e:	bfa6      	itte	ge
 80087a0:	461d      	movge	r5, r3
 80087a2:	2600      	movge	r6, #0
 80087a4:	2601      	movlt	r6, #1
 80087a6:	f7ff fdb2 	bl	800830e <_Balloc>
 80087aa:	692b      	ldr	r3, [r5, #16]
 80087ac:	60c6      	str	r6, [r0, #12]
 80087ae:	6926      	ldr	r6, [r4, #16]
 80087b0:	f105 0914 	add.w	r9, r5, #20
 80087b4:	f104 0214 	add.w	r2, r4, #20
 80087b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80087bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80087c0:	f100 0514 	add.w	r5, r0, #20
 80087c4:	f04f 0e00 	mov.w	lr, #0
 80087c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80087cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80087d0:	fa1e f18a 	uxtah	r1, lr, sl
 80087d4:	b2a3      	uxth	r3, r4
 80087d6:	1ac9      	subs	r1, r1, r3
 80087d8:	0c23      	lsrs	r3, r4, #16
 80087da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80087de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087e2:	b289      	uxth	r1, r1
 80087e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80087e8:	45c8      	cmp	r8, r9
 80087ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80087ee:	4694      	mov	ip, r2
 80087f0:	f845 3b04 	str.w	r3, [r5], #4
 80087f4:	d8e8      	bhi.n	80087c8 <__mdiff+0x5c>
 80087f6:	45bc      	cmp	ip, r7
 80087f8:	d304      	bcc.n	8008804 <__mdiff+0x98>
 80087fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80087fe:	b183      	cbz	r3, 8008822 <__mdiff+0xb6>
 8008800:	6106      	str	r6, [r0, #16]
 8008802:	e7c5      	b.n	8008790 <__mdiff+0x24>
 8008804:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008808:	fa1e f381 	uxtah	r3, lr, r1
 800880c:	141a      	asrs	r2, r3, #16
 800880e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008812:	b29b      	uxth	r3, r3
 8008814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008818:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800881c:	f845 3b04 	str.w	r3, [r5], #4
 8008820:	e7e9      	b.n	80087f6 <__mdiff+0x8a>
 8008822:	3e01      	subs	r6, #1
 8008824:	e7e9      	b.n	80087fa <__mdiff+0x8e>

08008826 <__d2b>:
 8008826:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800882a:	460e      	mov	r6, r1
 800882c:	2101      	movs	r1, #1
 800882e:	ec59 8b10 	vmov	r8, r9, d0
 8008832:	4615      	mov	r5, r2
 8008834:	f7ff fd6b 	bl	800830e <_Balloc>
 8008838:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800883c:	4607      	mov	r7, r0
 800883e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008842:	bb34      	cbnz	r4, 8008892 <__d2b+0x6c>
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	f1b8 0300 	subs.w	r3, r8, #0
 800884a:	d027      	beq.n	800889c <__d2b+0x76>
 800884c:	a802      	add	r0, sp, #8
 800884e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008852:	f7ff fe01 	bl	8008458 <__lo0bits>
 8008856:	9900      	ldr	r1, [sp, #0]
 8008858:	b1f0      	cbz	r0, 8008898 <__d2b+0x72>
 800885a:	9a01      	ldr	r2, [sp, #4]
 800885c:	f1c0 0320 	rsb	r3, r0, #32
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	430b      	orrs	r3, r1
 8008866:	40c2      	lsrs	r2, r0
 8008868:	617b      	str	r3, [r7, #20]
 800886a:	9201      	str	r2, [sp, #4]
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	bf14      	ite	ne
 8008874:	2102      	movne	r1, #2
 8008876:	2101      	moveq	r1, #1
 8008878:	6139      	str	r1, [r7, #16]
 800887a:	b1c4      	cbz	r4, 80088ae <__d2b+0x88>
 800887c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008880:	4404      	add	r4, r0
 8008882:	6034      	str	r4, [r6, #0]
 8008884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008888:	6028      	str	r0, [r5, #0]
 800888a:	4638      	mov	r0, r7
 800888c:	b003      	add	sp, #12
 800888e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008896:	e7d5      	b.n	8008844 <__d2b+0x1e>
 8008898:	6179      	str	r1, [r7, #20]
 800889a:	e7e7      	b.n	800886c <__d2b+0x46>
 800889c:	a801      	add	r0, sp, #4
 800889e:	f7ff fddb 	bl	8008458 <__lo0bits>
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	617b      	str	r3, [r7, #20]
 80088a6:	2101      	movs	r1, #1
 80088a8:	6139      	str	r1, [r7, #16]
 80088aa:	3020      	adds	r0, #32
 80088ac:	e7e5      	b.n	800887a <__d2b+0x54>
 80088ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80088b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088b6:	6030      	str	r0, [r6, #0]
 80088b8:	6918      	ldr	r0, [r3, #16]
 80088ba:	f7ff fdae 	bl	800841a <__hi0bits>
 80088be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80088c2:	e7e1      	b.n	8008888 <__d2b+0x62>

080088c4 <_calloc_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	fb02 f401 	mul.w	r4, r2, r1
 80088ca:	4621      	mov	r1, r4
 80088cc:	f000 f856 	bl	800897c <_malloc_r>
 80088d0:	4605      	mov	r5, r0
 80088d2:	b118      	cbz	r0, 80088dc <_calloc_r+0x18>
 80088d4:	4622      	mov	r2, r4
 80088d6:	2100      	movs	r1, #0
 80088d8:	f7fd fe85 	bl	80065e6 <memset>
 80088dc:	4628      	mov	r0, r5
 80088de:	bd38      	pop	{r3, r4, r5, pc}

080088e0 <_free_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4605      	mov	r5, r0
 80088e4:	2900      	cmp	r1, #0
 80088e6:	d045      	beq.n	8008974 <_free_r+0x94>
 80088e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ec:	1f0c      	subs	r4, r1, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bfb8      	it	lt
 80088f2:	18e4      	addlt	r4, r4, r3
 80088f4:	f000 fa98 	bl	8008e28 <__malloc_lock>
 80088f8:	4a1f      	ldr	r2, [pc, #124]	; (8008978 <_free_r+0x98>)
 80088fa:	6813      	ldr	r3, [r2, #0]
 80088fc:	4610      	mov	r0, r2
 80088fe:	b933      	cbnz	r3, 800890e <_free_r+0x2e>
 8008900:	6063      	str	r3, [r4, #4]
 8008902:	6014      	str	r4, [r2, #0]
 8008904:	4628      	mov	r0, r5
 8008906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800890a:	f000 ba8e 	b.w	8008e2a <__malloc_unlock>
 800890e:	42a3      	cmp	r3, r4
 8008910:	d90c      	bls.n	800892c <_free_r+0x4c>
 8008912:	6821      	ldr	r1, [r4, #0]
 8008914:	1862      	adds	r2, r4, r1
 8008916:	4293      	cmp	r3, r2
 8008918:	bf04      	itt	eq
 800891a:	681a      	ldreq	r2, [r3, #0]
 800891c:	685b      	ldreq	r3, [r3, #4]
 800891e:	6063      	str	r3, [r4, #4]
 8008920:	bf04      	itt	eq
 8008922:	1852      	addeq	r2, r2, r1
 8008924:	6022      	streq	r2, [r4, #0]
 8008926:	6004      	str	r4, [r0, #0]
 8008928:	e7ec      	b.n	8008904 <_free_r+0x24>
 800892a:	4613      	mov	r3, r2
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	b10a      	cbz	r2, 8008934 <_free_r+0x54>
 8008930:	42a2      	cmp	r2, r4
 8008932:	d9fa      	bls.n	800892a <_free_r+0x4a>
 8008934:	6819      	ldr	r1, [r3, #0]
 8008936:	1858      	adds	r0, r3, r1
 8008938:	42a0      	cmp	r0, r4
 800893a:	d10b      	bne.n	8008954 <_free_r+0x74>
 800893c:	6820      	ldr	r0, [r4, #0]
 800893e:	4401      	add	r1, r0
 8008940:	1858      	adds	r0, r3, r1
 8008942:	4282      	cmp	r2, r0
 8008944:	6019      	str	r1, [r3, #0]
 8008946:	d1dd      	bne.n	8008904 <_free_r+0x24>
 8008948:	6810      	ldr	r0, [r2, #0]
 800894a:	6852      	ldr	r2, [r2, #4]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	4401      	add	r1, r0
 8008950:	6019      	str	r1, [r3, #0]
 8008952:	e7d7      	b.n	8008904 <_free_r+0x24>
 8008954:	d902      	bls.n	800895c <_free_r+0x7c>
 8008956:	230c      	movs	r3, #12
 8008958:	602b      	str	r3, [r5, #0]
 800895a:	e7d3      	b.n	8008904 <_free_r+0x24>
 800895c:	6820      	ldr	r0, [r4, #0]
 800895e:	1821      	adds	r1, r4, r0
 8008960:	428a      	cmp	r2, r1
 8008962:	bf04      	itt	eq
 8008964:	6811      	ldreq	r1, [r2, #0]
 8008966:	6852      	ldreq	r2, [r2, #4]
 8008968:	6062      	str	r2, [r4, #4]
 800896a:	bf04      	itt	eq
 800896c:	1809      	addeq	r1, r1, r0
 800896e:	6021      	streq	r1, [r4, #0]
 8008970:	605c      	str	r4, [r3, #4]
 8008972:	e7c7      	b.n	8008904 <_free_r+0x24>
 8008974:	bd38      	pop	{r3, r4, r5, pc}
 8008976:	bf00      	nop
 8008978:	200006b8 	.word	0x200006b8

0800897c <_malloc_r>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	1ccd      	adds	r5, r1, #3
 8008980:	f025 0503 	bic.w	r5, r5, #3
 8008984:	3508      	adds	r5, #8
 8008986:	2d0c      	cmp	r5, #12
 8008988:	bf38      	it	cc
 800898a:	250c      	movcc	r5, #12
 800898c:	2d00      	cmp	r5, #0
 800898e:	4606      	mov	r6, r0
 8008990:	db01      	blt.n	8008996 <_malloc_r+0x1a>
 8008992:	42a9      	cmp	r1, r5
 8008994:	d903      	bls.n	800899e <_malloc_r+0x22>
 8008996:	230c      	movs	r3, #12
 8008998:	6033      	str	r3, [r6, #0]
 800899a:	2000      	movs	r0, #0
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	f000 fa43 	bl	8008e28 <__malloc_lock>
 80089a2:	4a21      	ldr	r2, [pc, #132]	; (8008a28 <_malloc_r+0xac>)
 80089a4:	6814      	ldr	r4, [r2, #0]
 80089a6:	4621      	mov	r1, r4
 80089a8:	b991      	cbnz	r1, 80089d0 <_malloc_r+0x54>
 80089aa:	4c20      	ldr	r4, [pc, #128]	; (8008a2c <_malloc_r+0xb0>)
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	b91b      	cbnz	r3, 80089b8 <_malloc_r+0x3c>
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 f97d 	bl	8008cb0 <_sbrk_r>
 80089b6:	6020      	str	r0, [r4, #0]
 80089b8:	4629      	mov	r1, r5
 80089ba:	4630      	mov	r0, r6
 80089bc:	f000 f978 	bl	8008cb0 <_sbrk_r>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d124      	bne.n	8008a0e <_malloc_r+0x92>
 80089c4:	230c      	movs	r3, #12
 80089c6:	6033      	str	r3, [r6, #0]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 fa2e 	bl	8008e2a <__malloc_unlock>
 80089ce:	e7e4      	b.n	800899a <_malloc_r+0x1e>
 80089d0:	680b      	ldr	r3, [r1, #0]
 80089d2:	1b5b      	subs	r3, r3, r5
 80089d4:	d418      	bmi.n	8008a08 <_malloc_r+0x8c>
 80089d6:	2b0b      	cmp	r3, #11
 80089d8:	d90f      	bls.n	80089fa <_malloc_r+0x7e>
 80089da:	600b      	str	r3, [r1, #0]
 80089dc:	50cd      	str	r5, [r1, r3]
 80089de:	18cc      	adds	r4, r1, r3
 80089e0:	4630      	mov	r0, r6
 80089e2:	f000 fa22 	bl	8008e2a <__malloc_unlock>
 80089e6:	f104 000b 	add.w	r0, r4, #11
 80089ea:	1d23      	adds	r3, r4, #4
 80089ec:	f020 0007 	bic.w	r0, r0, #7
 80089f0:	1ac3      	subs	r3, r0, r3
 80089f2:	d0d3      	beq.n	800899c <_malloc_r+0x20>
 80089f4:	425a      	negs	r2, r3
 80089f6:	50e2      	str	r2, [r4, r3]
 80089f8:	e7d0      	b.n	800899c <_malloc_r+0x20>
 80089fa:	428c      	cmp	r4, r1
 80089fc:	684b      	ldr	r3, [r1, #4]
 80089fe:	bf16      	itet	ne
 8008a00:	6063      	strne	r3, [r4, #4]
 8008a02:	6013      	streq	r3, [r2, #0]
 8008a04:	460c      	movne	r4, r1
 8008a06:	e7eb      	b.n	80089e0 <_malloc_r+0x64>
 8008a08:	460c      	mov	r4, r1
 8008a0a:	6849      	ldr	r1, [r1, #4]
 8008a0c:	e7cc      	b.n	80089a8 <_malloc_r+0x2c>
 8008a0e:	1cc4      	adds	r4, r0, #3
 8008a10:	f024 0403 	bic.w	r4, r4, #3
 8008a14:	42a0      	cmp	r0, r4
 8008a16:	d005      	beq.n	8008a24 <_malloc_r+0xa8>
 8008a18:	1a21      	subs	r1, r4, r0
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f000 f948 	bl	8008cb0 <_sbrk_r>
 8008a20:	3001      	adds	r0, #1
 8008a22:	d0cf      	beq.n	80089c4 <_malloc_r+0x48>
 8008a24:	6025      	str	r5, [r4, #0]
 8008a26:	e7db      	b.n	80089e0 <_malloc_r+0x64>
 8008a28:	200006b8 	.word	0x200006b8
 8008a2c:	200006bc 	.word	0x200006bc

08008a30 <__sfputc_r>:
 8008a30:	6893      	ldr	r3, [r2, #8]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	b410      	push	{r4}
 8008a38:	6093      	str	r3, [r2, #8]
 8008a3a:	da08      	bge.n	8008a4e <__sfputc_r+0x1e>
 8008a3c:	6994      	ldr	r4, [r2, #24]
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	db01      	blt.n	8008a46 <__sfputc_r+0x16>
 8008a42:	290a      	cmp	r1, #10
 8008a44:	d103      	bne.n	8008a4e <__sfputc_r+0x1e>
 8008a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a4a:	f7fe bb5b 	b.w	8007104 <__swbuf_r>
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	1c58      	adds	r0, r3, #1
 8008a52:	6010      	str	r0, [r2, #0]
 8008a54:	7019      	strb	r1, [r3, #0]
 8008a56:	4608      	mov	r0, r1
 8008a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <__sfputs_r>:
 8008a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	18d5      	adds	r5, r2, r3
 8008a68:	42ac      	cmp	r4, r5
 8008a6a:	d101      	bne.n	8008a70 <__sfputs_r+0x12>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e007      	b.n	8008a80 <__sfputs_r+0x22>
 8008a70:	463a      	mov	r2, r7
 8008a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7ff ffda 	bl	8008a30 <__sfputc_r>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d1f3      	bne.n	8008a68 <__sfputs_r+0xa>
 8008a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a84 <_vfiprintf_r>:
 8008a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a88:	460c      	mov	r4, r1
 8008a8a:	b09d      	sub	sp, #116	; 0x74
 8008a8c:	4617      	mov	r7, r2
 8008a8e:	461d      	mov	r5, r3
 8008a90:	4606      	mov	r6, r0
 8008a92:	b118      	cbz	r0, 8008a9c <_vfiprintf_r+0x18>
 8008a94:	6983      	ldr	r3, [r0, #24]
 8008a96:	b90b      	cbnz	r3, 8008a9c <_vfiprintf_r+0x18>
 8008a98:	f7ff fb2a 	bl	80080f0 <__sinit>
 8008a9c:	4b7c      	ldr	r3, [pc, #496]	; (8008c90 <_vfiprintf_r+0x20c>)
 8008a9e:	429c      	cmp	r4, r3
 8008aa0:	d158      	bne.n	8008b54 <_vfiprintf_r+0xd0>
 8008aa2:	6874      	ldr	r4, [r6, #4]
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	0718      	lsls	r0, r3, #28
 8008aa8:	d55e      	bpl.n	8008b68 <_vfiprintf_r+0xe4>
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d05b      	beq.n	8008b68 <_vfiprintf_r+0xe4>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab4:	2320      	movs	r3, #32
 8008ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aba:	2330      	movs	r3, #48	; 0x30
 8008abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ac0:	9503      	str	r5, [sp, #12]
 8008ac2:	f04f 0b01 	mov.w	fp, #1
 8008ac6:	46b8      	mov	r8, r7
 8008ac8:	4645      	mov	r5, r8
 8008aca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008ace:	b10b      	cbz	r3, 8008ad4 <_vfiprintf_r+0x50>
 8008ad0:	2b25      	cmp	r3, #37	; 0x25
 8008ad2:	d154      	bne.n	8008b7e <_vfiprintf_r+0xfa>
 8008ad4:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ad8:	d00b      	beq.n	8008af2 <_vfiprintf_r+0x6e>
 8008ada:	4653      	mov	r3, sl
 8008adc:	463a      	mov	r2, r7
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7ff ffbc 	bl	8008a5e <__sfputs_r>
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	f000 80c2 	beq.w	8008c70 <_vfiprintf_r+0x1ec>
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	4453      	add	r3, sl
 8008af0:	9309      	str	r3, [sp, #36]	; 0x24
 8008af2:	f898 3000 	ldrb.w	r3, [r8]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80ba 	beq.w	8008c70 <_vfiprintf_r+0x1ec>
 8008afc:	2300      	movs	r3, #0
 8008afe:	f04f 32ff 	mov.w	r2, #4294967295
 8008b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	9307      	str	r3, [sp, #28]
 8008b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b10:	46a8      	mov	r8, r5
 8008b12:	2205      	movs	r2, #5
 8008b14:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008b18:	485e      	ldr	r0, [pc, #376]	; (8008c94 <_vfiprintf_r+0x210>)
 8008b1a:	f7f7 fb61 	bl	80001e0 <memchr>
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	bb78      	cbnz	r0, 8008b82 <_vfiprintf_r+0xfe>
 8008b22:	06d9      	lsls	r1, r3, #27
 8008b24:	bf44      	itt	mi
 8008b26:	2220      	movmi	r2, #32
 8008b28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b2c:	071a      	lsls	r2, r3, #28
 8008b2e:	bf44      	itt	mi
 8008b30:	222b      	movmi	r2, #43	; 0x2b
 8008b32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b36:	782a      	ldrb	r2, [r5, #0]
 8008b38:	2a2a      	cmp	r2, #42	; 0x2a
 8008b3a:	d02a      	beq.n	8008b92 <_vfiprintf_r+0x10e>
 8008b3c:	9a07      	ldr	r2, [sp, #28]
 8008b3e:	46a8      	mov	r8, r5
 8008b40:	2000      	movs	r0, #0
 8008b42:	250a      	movs	r5, #10
 8008b44:	4641      	mov	r1, r8
 8008b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b4a:	3b30      	subs	r3, #48	; 0x30
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d969      	bls.n	8008c24 <_vfiprintf_r+0x1a0>
 8008b50:	b360      	cbz	r0, 8008bac <_vfiprintf_r+0x128>
 8008b52:	e024      	b.n	8008b9e <_vfiprintf_r+0x11a>
 8008b54:	4b50      	ldr	r3, [pc, #320]	; (8008c98 <_vfiprintf_r+0x214>)
 8008b56:	429c      	cmp	r4, r3
 8008b58:	d101      	bne.n	8008b5e <_vfiprintf_r+0xda>
 8008b5a:	68b4      	ldr	r4, [r6, #8]
 8008b5c:	e7a2      	b.n	8008aa4 <_vfiprintf_r+0x20>
 8008b5e:	4b4f      	ldr	r3, [pc, #316]	; (8008c9c <_vfiprintf_r+0x218>)
 8008b60:	429c      	cmp	r4, r3
 8008b62:	bf08      	it	eq
 8008b64:	68f4      	ldreq	r4, [r6, #12]
 8008b66:	e79d      	b.n	8008aa4 <_vfiprintf_r+0x20>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	f7fe fb1c 	bl	80071a8 <__swsetup_r>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d09d      	beq.n	8008ab0 <_vfiprintf_r+0x2c>
 8008b74:	f04f 30ff 	mov.w	r0, #4294967295
 8008b78:	b01d      	add	sp, #116	; 0x74
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	46a8      	mov	r8, r5
 8008b80:	e7a2      	b.n	8008ac8 <_vfiprintf_r+0x44>
 8008b82:	4a44      	ldr	r2, [pc, #272]	; (8008c94 <_vfiprintf_r+0x210>)
 8008b84:	1a80      	subs	r0, r0, r2
 8008b86:	fa0b f000 	lsl.w	r0, fp, r0
 8008b8a:	4318      	orrs	r0, r3
 8008b8c:	9004      	str	r0, [sp, #16]
 8008b8e:	4645      	mov	r5, r8
 8008b90:	e7be      	b.n	8008b10 <_vfiprintf_r+0x8c>
 8008b92:	9a03      	ldr	r2, [sp, #12]
 8008b94:	1d11      	adds	r1, r2, #4
 8008b96:	6812      	ldr	r2, [r2, #0]
 8008b98:	9103      	str	r1, [sp, #12]
 8008b9a:	2a00      	cmp	r2, #0
 8008b9c:	db01      	blt.n	8008ba2 <_vfiprintf_r+0x11e>
 8008b9e:	9207      	str	r2, [sp, #28]
 8008ba0:	e004      	b.n	8008bac <_vfiprintf_r+0x128>
 8008ba2:	4252      	negs	r2, r2
 8008ba4:	f043 0302 	orr.w	r3, r3, #2
 8008ba8:	9207      	str	r2, [sp, #28]
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	f898 3000 	ldrb.w	r3, [r8]
 8008bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb2:	d10e      	bne.n	8008bd2 <_vfiprintf_r+0x14e>
 8008bb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bba:	d138      	bne.n	8008c2e <_vfiprintf_r+0x1aa>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	1d1a      	adds	r2, r3, #4
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	9203      	str	r2, [sp, #12]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	bfb8      	it	lt
 8008bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bcc:	f108 0802 	add.w	r8, r8, #2
 8008bd0:	9305      	str	r3, [sp, #20]
 8008bd2:	4d33      	ldr	r5, [pc, #204]	; (8008ca0 <_vfiprintf_r+0x21c>)
 8008bd4:	f898 1000 	ldrb.w	r1, [r8]
 8008bd8:	2203      	movs	r2, #3
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f7f7 fb00 	bl	80001e0 <memchr>
 8008be0:	b140      	cbz	r0, 8008bf4 <_vfiprintf_r+0x170>
 8008be2:	2340      	movs	r3, #64	; 0x40
 8008be4:	1b40      	subs	r0, r0, r5
 8008be6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	4303      	orrs	r3, r0
 8008bee:	f108 0801 	add.w	r8, r8, #1
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	f898 1000 	ldrb.w	r1, [r8]
 8008bf8:	482a      	ldr	r0, [pc, #168]	; (8008ca4 <_vfiprintf_r+0x220>)
 8008bfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bfe:	2206      	movs	r2, #6
 8008c00:	f108 0701 	add.w	r7, r8, #1
 8008c04:	f7f7 faec 	bl	80001e0 <memchr>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d037      	beq.n	8008c7c <_vfiprintf_r+0x1f8>
 8008c0c:	4b26      	ldr	r3, [pc, #152]	; (8008ca8 <_vfiprintf_r+0x224>)
 8008c0e:	bb1b      	cbnz	r3, 8008c58 <_vfiprintf_r+0x1d4>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	3307      	adds	r3, #7
 8008c14:	f023 0307 	bic.w	r3, r3, #7
 8008c18:	3308      	adds	r3, #8
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	444b      	add	r3, r9
 8008c20:	9309      	str	r3, [sp, #36]	; 0x24
 8008c22:	e750      	b.n	8008ac6 <_vfiprintf_r+0x42>
 8008c24:	fb05 3202 	mla	r2, r5, r2, r3
 8008c28:	2001      	movs	r0, #1
 8008c2a:	4688      	mov	r8, r1
 8008c2c:	e78a      	b.n	8008b44 <_vfiprintf_r+0xc0>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f108 0801 	add.w	r8, r8, #1
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	4619      	mov	r1, r3
 8008c38:	250a      	movs	r5, #10
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c40:	3a30      	subs	r2, #48	; 0x30
 8008c42:	2a09      	cmp	r2, #9
 8008c44:	d903      	bls.n	8008c4e <_vfiprintf_r+0x1ca>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0c3      	beq.n	8008bd2 <_vfiprintf_r+0x14e>
 8008c4a:	9105      	str	r1, [sp, #20]
 8008c4c:	e7c1      	b.n	8008bd2 <_vfiprintf_r+0x14e>
 8008c4e:	fb05 2101 	mla	r1, r5, r1, r2
 8008c52:	2301      	movs	r3, #1
 8008c54:	4680      	mov	r8, r0
 8008c56:	e7f0      	b.n	8008c3a <_vfiprintf_r+0x1b6>
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4b13      	ldr	r3, [pc, #76]	; (8008cac <_vfiprintf_r+0x228>)
 8008c60:	a904      	add	r1, sp, #16
 8008c62:	4630      	mov	r0, r6
 8008c64:	f7fd fd5c 	bl	8006720 <_printf_float>
 8008c68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c6c:	4681      	mov	r9, r0
 8008c6e:	d1d5      	bne.n	8008c1c <_vfiprintf_r+0x198>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	065b      	lsls	r3, r3, #25
 8008c74:	f53f af7e 	bmi.w	8008b74 <_vfiprintf_r+0xf0>
 8008c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c7a:	e77d      	b.n	8008b78 <_vfiprintf_r+0xf4>
 8008c7c:	ab03      	add	r3, sp, #12
 8008c7e:	9300      	str	r3, [sp, #0]
 8008c80:	4622      	mov	r2, r4
 8008c82:	4b0a      	ldr	r3, [pc, #40]	; (8008cac <_vfiprintf_r+0x228>)
 8008c84:	a904      	add	r1, sp, #16
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7fe f800 	bl	8006c8c <_printf_i>
 8008c8c:	e7ec      	b.n	8008c68 <_vfiprintf_r+0x1e4>
 8008c8e:	bf00      	nop
 8008c90:	08008f30 	.word	0x08008f30
 8008c94:	0800906c 	.word	0x0800906c
 8008c98:	08008f50 	.word	0x08008f50
 8008c9c:	08008f10 	.word	0x08008f10
 8008ca0:	08009072 	.word	0x08009072
 8008ca4:	08009076 	.word	0x08009076
 8008ca8:	08006721 	.word	0x08006721
 8008cac:	08008a5f 	.word	0x08008a5f

08008cb0 <_sbrk_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4c06      	ldr	r4, [pc, #24]	; (8008ccc <_sbrk_r+0x1c>)
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	4605      	mov	r5, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	f7f9 fc44 	bl	8002548 <_sbrk>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_sbrk_r+0x1a>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_sbrk_r+0x1a>
 8008cc8:	602b      	str	r3, [r5, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20000d40 	.word	0x20000d40

08008cd0 <__sread>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	f000 f8a8 	bl	8008e2c <_read_r>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	bfab      	itete	ge
 8008ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ce4:	181b      	addge	r3, r3, r0
 8008ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cea:	bfac      	ite	ge
 8008cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cee:	81a3      	strhlt	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__swrite>:
 8008cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	898b      	ldrh	r3, [r1, #12]
 8008cfa:	05db      	lsls	r3, r3, #23
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	460c      	mov	r4, r1
 8008d00:	4616      	mov	r6, r2
 8008d02:	d505      	bpl.n	8008d10 <__swrite+0x1e>
 8008d04:	2302      	movs	r3, #2
 8008d06:	2200      	movs	r2, #0
 8008d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0c:	f000 f868 	bl	8008de0 <_lseek_r>
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d1a:	81a3      	strh	r3, [r4, #12]
 8008d1c:	4632      	mov	r2, r6
 8008d1e:	463b      	mov	r3, r7
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	f000 b817 	b.w	8008d58 <_write_r>

08008d2a <__sseek>:
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	460c      	mov	r4, r1
 8008d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d32:	f000 f855 	bl	8008de0 <_lseek_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	bf15      	itete	ne
 8008d3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d46:	81a3      	strheq	r3, [r4, #12]
 8008d48:	bf18      	it	ne
 8008d4a:	81a3      	strhne	r3, [r4, #12]
 8008d4c:	bd10      	pop	{r4, pc}

08008d4e <__sclose>:
 8008d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d52:	f000 b813 	b.w	8008d7c <_close_r>
	...

08008d58 <_write_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4c07      	ldr	r4, [pc, #28]	; (8008d78 <_write_r+0x20>)
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	6022      	str	r2, [r4, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7f8 f8da 	bl	8000f20 <_write>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_write_r+0x1e>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_write_r+0x1e>
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	20000d40 	.word	0x20000d40

08008d7c <_close_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4c06      	ldr	r4, [pc, #24]	; (8008d98 <_close_r+0x1c>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4605      	mov	r5, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	6023      	str	r3, [r4, #0]
 8008d88:	f7f8 f8f4 	bl	8000f74 <_close>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_close_r+0x1a>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_close_r+0x1a>
 8008d94:	602b      	str	r3, [r5, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20000d40 	.word	0x20000d40

08008d9c <_fstat_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4c07      	ldr	r4, [pc, #28]	; (8008dbc <_fstat_r+0x20>)
 8008da0:	2300      	movs	r3, #0
 8008da2:	4605      	mov	r5, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	4611      	mov	r1, r2
 8008da8:	6023      	str	r3, [r4, #0]
 8008daa:	f7f8 f933 	bl	8001014 <_fstat>
 8008dae:	1c43      	adds	r3, r0, #1
 8008db0:	d102      	bne.n	8008db8 <_fstat_r+0x1c>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	b103      	cbz	r3, 8008db8 <_fstat_r+0x1c>
 8008db6:	602b      	str	r3, [r5, #0]
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000d40 	.word	0x20000d40

08008dc0 <_isatty_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4c06      	ldr	r4, [pc, #24]	; (8008ddc <_isatty_r+0x1c>)
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	4608      	mov	r0, r1
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	f7f8 f892 	bl	8000ef4 <_isatty>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d102      	bne.n	8008dda <_isatty_r+0x1a>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	b103      	cbz	r3, 8008dda <_isatty_r+0x1a>
 8008dd8:	602b      	str	r3, [r5, #0]
 8008dda:	bd38      	pop	{r3, r4, r5, pc}
 8008ddc:	20000d40 	.word	0x20000d40

08008de0 <_lseek_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4c07      	ldr	r4, [pc, #28]	; (8008e00 <_lseek_r+0x20>)
 8008de4:	4605      	mov	r5, r0
 8008de6:	4608      	mov	r0, r1
 8008de8:	4611      	mov	r1, r2
 8008dea:	2200      	movs	r2, #0
 8008dec:	6022      	str	r2, [r4, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	f7f8 f8d7 	bl	8000fa2 <_lseek>
 8008df4:	1c43      	adds	r3, r0, #1
 8008df6:	d102      	bne.n	8008dfe <_lseek_r+0x1e>
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	b103      	cbz	r3, 8008dfe <_lseek_r+0x1e>
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	bd38      	pop	{r3, r4, r5, pc}
 8008e00:	20000d40 	.word	0x20000d40

08008e04 <__ascii_mbtowc>:
 8008e04:	b082      	sub	sp, #8
 8008e06:	b901      	cbnz	r1, 8008e0a <__ascii_mbtowc+0x6>
 8008e08:	a901      	add	r1, sp, #4
 8008e0a:	b142      	cbz	r2, 8008e1e <__ascii_mbtowc+0x1a>
 8008e0c:	b14b      	cbz	r3, 8008e22 <__ascii_mbtowc+0x1e>
 8008e0e:	7813      	ldrb	r3, [r2, #0]
 8008e10:	600b      	str	r3, [r1, #0]
 8008e12:	7812      	ldrb	r2, [r2, #0]
 8008e14:	1c10      	adds	r0, r2, #0
 8008e16:	bf18      	it	ne
 8008e18:	2001      	movne	r0, #1
 8008e1a:	b002      	add	sp, #8
 8008e1c:	4770      	bx	lr
 8008e1e:	4610      	mov	r0, r2
 8008e20:	e7fb      	b.n	8008e1a <__ascii_mbtowc+0x16>
 8008e22:	f06f 0001 	mvn.w	r0, #1
 8008e26:	e7f8      	b.n	8008e1a <__ascii_mbtowc+0x16>

08008e28 <__malloc_lock>:
 8008e28:	4770      	bx	lr

08008e2a <__malloc_unlock>:
 8008e2a:	4770      	bx	lr

08008e2c <_read_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4c07      	ldr	r4, [pc, #28]	; (8008e4c <_read_r+0x20>)
 8008e30:	4605      	mov	r5, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7f8 f8c2 	bl	8000fc4 <_read>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_read_r+0x1e>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_read_r+0x1e>
 8008e48:	602b      	str	r3, [r5, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000d40 	.word	0x20000d40

08008e50 <__ascii_wctomb>:
 8008e50:	b149      	cbz	r1, 8008e66 <__ascii_wctomb+0x16>
 8008e52:	2aff      	cmp	r2, #255	; 0xff
 8008e54:	bf85      	ittet	hi
 8008e56:	238a      	movhi	r3, #138	; 0x8a
 8008e58:	6003      	strhi	r3, [r0, #0]
 8008e5a:	700a      	strbls	r2, [r1, #0]
 8008e5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e60:	bf98      	it	ls
 8008e62:	2001      	movls	r0, #1
 8008e64:	4770      	bx	lr
 8008e66:	4608      	mov	r0, r1
 8008e68:	4770      	bx	lr
	...

08008e6c <_init>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr

08008e78 <_fini>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	bf00      	nop
 8008e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7e:	bc08      	pop	{r3}
 8008e80:	469e      	mov	lr, r3
 8008e82:	4770      	bx	lr
