
F4_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08014630  08014630  00024630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d3c  08014d3c  00031e88  2**0
                  CONTENTS
  4 .ARM          00000008  08014d3c  08014d3c  00024d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d44  08014d44  00031e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d44  08014d44  00024d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d48  08014d48  00024d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e88  20000000  08014d4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af4  20001e88  08016bd4  00031e88  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000397c  08016bd4  0003397c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e88  2**0
                  CONTENTS, READONLY
 12 .debug_info   00051e95  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b8f  00000000  00000000  00083d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c38  00000000  00000000  0008b8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e0  00000000  00000000  0008d518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d37b  00000000  00000000  0008edf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003036d  00000000  00000000  000bc173  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cec1c  00000000  00000000  000ec4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bb0fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc8  00000000  00000000  001bb178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001e88 	.word	0x20001e88
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014618 	.word	0x08014618

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001e8c 	.word	0x20001e8c
 80001cc:	08014618 	.word	0x08014618

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <DATA_LOGGER_Init>:



static uint8_t name_flight_mode[] = "Flight Mode";

void DATA_LOGGER_Init(system_t * sys_){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	sys = sys_;
 8000f50:	4ab4      	ldr	r2, [pc, #720]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							FALSE);
 8000f56:	4bb4      	ldr	r3, [pc, #720]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	721a      	strb	r2, [r3, #8]
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8000f64:	4ab0      	ldr	r2, [pc, #704]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f66:	6053      	str	r3, [r2, #4]
 8000f68:	4baf      	ldr	r3, [pc, #700]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f6a:	2229      	movs	r2, #41	; 0x29
 8000f6c:	725a      	strb	r2, [r3, #9]
 8000f6e:	4bae      	ldr	r3, [pc, #696]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f70:	4aae      	ldr	r2, [pc, #696]	; (800122c <DATA_LOGGER_Init+0x2e4>)
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4bac      	ldr	r3, [pc, #688]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f76:	220a      	movs	r2, #10
 8000f78:	741a      	strb	r2, [r3, #16]
 8000f7a:	4bab      	ldr	r3, [pc, #684]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							FALSE);
 8000f80:	4ba9      	ldr	r3, [pc, #676]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2020 	strb.w	r2, [r3, #32]
 8000f88:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8000f90:	4aa5      	ldr	r2, [pc, #660]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4ba4      	ldr	r3, [pc, #656]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f96:	2229      	movs	r2, #41	; 0x29
 8000f98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8000f9c:	4ba2      	ldr	r3, [pc, #648]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000f9e:	4aa4      	ldr	r2, [pc, #656]	; (8001230 <DATA_LOGGER_Init+0x2e8>)
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa2:	4ba1      	ldr	r3, [pc, #644]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000faa:	4b9f      	ldr	r3, [pc, #636]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c

	//Consignes angles
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_roll,					FALSE);
 8000fb0:	4b9d      	ldr	r3, [pc, #628]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fb2:	221c      	movs	r2, #28
 8000fb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8000fb8:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8000fc0:	4a99      	ldr	r2, [pc, #612]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc2:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
 8000fc6:	4b98      	ldr	r3, [pc, #608]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fc8:	2229      	movs	r2, #41	; 0x29
 8000fca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8000fce:	4b96      	ldr	r3, [pc, #600]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd0:	4a98      	ldr	r2, [pc, #608]	; (8001234 <DATA_LOGGER_Init+0x2ec>)
 8000fd2:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
 8000fd6:	4b94      	ldr	r3, [pc, #592]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fd8:	220b      	movs	r2, #11
 8000fda:	f883 22b0 	strb.w	r2, [r3, #688]	; 0x2b0
 8000fde:	4b92      	ldr	r3, [pc, #584]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	DEFINE_DATA(DATA_ID_CONSIGNE_ANGLE_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_angle_pitch,					FALSE);
 8000fe6:	4b90      	ldr	r3, [pc, #576]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000fe8:	221d      	movs	r2, #29
 8000fea:	f883 22c0 	strb.w	r2, [r3, #704]	; 0x2c0
 8000fee:	4b8d      	ldr	r3, [pc, #564]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8000ff6:	4a8c      	ldr	r2, [pc, #560]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ff8:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
 8000ffc:	4b8a      	ldr	r3, [pc, #552]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8000ffe:	2229      	movs	r2, #41	; 0x29
 8001000:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
 8001004:	4b88      	ldr	r3, [pc, #544]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001006:	4a8c      	ldr	r2, [pc, #560]	; (8001238 <DATA_LOGGER_Init+0x2f0>)
 8001008:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 800100c:	4b86      	ldr	r3, [pc, #536]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800100e:	220c      	movs	r2, #12
 8001010:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
 8001014:	4b84      	ldr	r3, [pc, #528]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

	//Pid gyro roll
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].output, 		DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll, 						FALSE);
 800101c:	4b82      	ldr	r3, [pc, #520]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800101e:	2219      	movs	r2, #25
 8001020:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
 8001024:	4b7f      	ldr	r3, [pc, #508]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f603 13cc 	addw	r3, r3, #2508	; 0x9cc
 800102c:	4a7e      	ldr	r2, [pc, #504]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800102e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
 8001032:	4b7d      	ldr	r3, [pc, #500]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001034:	2229      	movs	r2, #41	; 0x29
 8001036:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800103c:	4a7f      	ldr	r2, [pc, #508]	; (800123c <DATA_LOGGER_Init+0x2f4>)
 800103e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
 8001042:	4b79      	ldr	r3, [pc, #484]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001044:	220d      	movs	r2, #13
 8001046:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 800104a:	4b77      	ldr	r3, [pc, #476]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_P, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].P, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_p, 						FALSE);
 8001052:	4b75      	ldr	r3, [pc, #468]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001054:	221a      	movs	r2, #26
 8001056:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800105a:	4b72      	ldr	r3, [pc, #456]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f503 631d 	add.w	r3, r3, #2512	; 0x9d0
 8001062:	4a71      	ldr	r2, [pc, #452]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001064:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 8001068:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800106a:	2229      	movs	r2, #41	; 0x29
 800106c:	f883 2279 	strb.w	r2, [r3, #633]	; 0x279
 8001070:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001072:	4a73      	ldr	r2, [pc, #460]	; (8001240 <DATA_LOGGER_Init+0x2f8>)
 8001074:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8001078:	4b6b      	ldr	r3, [pc, #428]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800107a:	220d      	movs	r2, #13
 800107c:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
 8001080:	4b69      	ldr	r3, [pc, #420]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001082:	2200      	movs	r2, #0
 8001084:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	DEFINE_DATA(DATA_ID_PID_GYRO_ROLL_D, (uint8_t*)&sys->regulation.orientation.pid_angular_speed[ORIENTATION_ROLL].D, 			DATA_FORMAT_16B_FLOAT_1D, 	name_pid_gyro_roll_d, 						FALSE);
 8001088:	4b67      	ldr	r3, [pc, #412]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800108a:	221b      	movs	r2, #27
 800108c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
 8001090:	4b64      	ldr	r3, [pc, #400]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f603 13d8 	addw	r3, r3, #2520	; 0x9d8
 8001098:	4a63      	ldr	r2, [pc, #396]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800109a:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a0:	2229      	movs	r2, #41	; 0x29
 80010a2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
 80010a6:	4b60      	ldr	r3, [pc, #384]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010a8:	4a66      	ldr	r2, [pc, #408]	; (8001244 <DATA_LOGGER_Init+0x2fc>)
 80010aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010b0:	220d      	movs	r2, #13
 80010b2:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
 80010b6:	4b5c      	ldr	r3, [pc, #368]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							FALSE);
 80010be:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80010c6:	4b57      	ldr	r3, [pc, #348]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3338      	adds	r3, #56	; 0x38
 80010cc:	4a56      	ldr	r2, [pc, #344]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ce:	6353      	str	r3, [r2, #52]	; 0x34
 80010d0:	4b55      	ldr	r3, [pc, #340]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010d2:	2229      	movs	r2, #41	; 0x29
 80010d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80010d8:	4b53      	ldr	r3, [pc, #332]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010da:	4a5b      	ldr	r2, [pc, #364]	; (8001248 <DATA_LOGGER_Init+0x300>)
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010de:	4b52      	ldr	r3, [pc, #328]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010e0:	2209      	movs	r2, #9
 80010e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80010e6:	4b50      	ldr	r3, [pc, #320]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							FALSE);
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	333c      	adds	r3, #60	; 0x3c
 80010fa:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80010fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001100:	2229      	movs	r2, #41	; 0x29
 8001102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <DATA_LOGGER_Init+0x304>)
 800110a:	655a      	str	r2, [r3, #84]	; 0x54
 800110c:	4b46      	ldr	r3, [pc, #280]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800110e:	220a      	movs	r2, #10
 8001110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001116:	2200      	movs	r2, #0
 8001118:	65da      	str	r2, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					FALSE);
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800111c:	2204      	movs	r2, #4
 800111e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8001122:	4b40      	ldr	r3, [pc, #256]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3340      	adds	r3, #64	; 0x40
 8001128:	4a3f      	ldr	r2, [pc, #252]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800112a:	6653      	str	r3, [r2, #100]	; 0x64
 800112c:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800112e:	2229      	movs	r2, #41	; 0x29
 8001130:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001136:	4a46      	ldr	r2, [pc, #280]	; (8001250 <DATA_LOGGER_Init+0x308>)
 8001138:	66da      	str	r2, [r3, #108]	; 0x6c
 800113a:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800113c:	2208      	movs	r2, #8
 800113e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001144:	2200      	movs	r2, #0
 8001146:	675a      	str	r2, [r3, #116]	; 0x74

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								FALSE);
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800114a:	2208      	movs	r2, #8
 800114c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	33ac      	adds	r3, #172	; 0xac
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001158:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800115e:	222b      	movs	r2, #43	; 0x2b
 8001160:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8001164:	4b30      	ldr	r3, [pc, #192]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001166:	4a3b      	ldr	r2, [pc, #236]	; (8001254 <DATA_LOGGER_Init+0x30c>)
 8001168:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800116e:	2208      	movs	r2, #8
 8001170:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001176:	2200      	movs	r2, #0
 8001178:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							FALSE);
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800117e:	2209      	movs	r2, #9
 8001180:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	33b0      	adds	r3, #176	; 0xb0
 800118a:	4a27      	ldr	r2, [pc, #156]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800118c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001192:	222b      	movs	r2, #43	; 0x2b
 8001194:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <DATA_LOGGER_Init+0x310>)
 800119c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011a2:	2209      	movs	r2, #9
 80011a4:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								FALSE);
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011b2:	220a      	movs	r2, #10
 80011b4:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	33b4      	adds	r3, #180	; 0xb4
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011c6:	222b      	movs	r2, #43	; 0x2b
 80011c8:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011ce:	4a23      	ldr	r2, [pc, #140]	; (800125c <DATA_LOGGER_Init+0x314>)
 80011d0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011d6:	2207      	movs	r2, #7
 80011d8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	//Acceleration dans le ref de la terre
	DEFINE_DATA(DATA_ID_ACC_X, (uint8_t*)&sys->position.acceleration[POSITION_AXE_X], 											DATA_FORMAT_16B_FLOAT_3D, 	name_x_acc, 								FALSE);
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011e6:	220b      	movs	r2, #11
 80011e8:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <DATA_LOGGER_Init+0x2dc>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011f6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 80011fc:	222b      	movs	r2, #43	; 0x2b
 80011fe:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001204:	4a16      	ldr	r2, [pc, #88]	; (8001260 <DATA_LOGGER_Init+0x318>)
 8001206:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800120c:	2205      	movs	r2, #5
 800120e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 8001214:	2200      	movs	r2, #0
 8001216:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	DEFINE_DATA(DATA_ID_ACC_Y, (uint8_t*)&sys->position.acceleration[POSITION_AXE_Y], 											DATA_FORMAT_16B_FLOAT_3D, 	name_y_acc, 								FALSE);
 800121a:	4b03      	ldr	r3, [pc, #12]	; (8001228 <DATA_LOGGER_Init+0x2e0>)
 800121c:	220c      	movs	r2, #12
 800121e:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
 8001222:	e01f      	b.n	8001264 <DATA_LOGGER_Init+0x31c>
 8001224:	20001ea4 	.word	0x20001ea4
 8001228:	20001ea8 	.word	0x20001ea8
 800122c:	20000004 	.word	0x20000004
 8001230:	20000010 	.word	0x20000010
 8001234:	2000001c 	.word	0x2000001c
 8001238:	20000028 	.word	0x20000028
 800123c:	20000198 	.word	0x20000198
 8001240:	200001a8 	.word	0x200001a8
 8001244:	200001b8 	.word	0x200001b8
 8001248:	20000038 	.word	0x20000038
 800124c:	20000044 	.word	0x20000044
 8001250:	20000050 	.word	0x20000050
 8001254:	2000005c 	.word	0x2000005c
 8001258:	20000068 	.word	0x20000068
 800125c:	20000074 	.word	0x20000074
 8001260:	2000007c 	.word	0x2000007c
 8001264:	4bbe      	ldr	r3, [pc, #760]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800126c:	4abd      	ldr	r2, [pc, #756]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800126e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 8001272:	4bbc      	ldr	r3, [pc, #752]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001274:	222b      	movs	r2, #43	; 0x2b
 8001276:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 800127a:	4bba      	ldr	r3, [pc, #744]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800127c:	4aba      	ldr	r2, [pc, #744]	; (8001568 <DATA_LOGGER_Init+0x620>)
 800127e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 8001282:	4bb8      	ldr	r3, [pc, #736]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001284:	2205      	movs	r2, #5
 8001286:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800128a:	4bb6      	ldr	r3, [pc, #728]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800128c:	2200      	movs	r2, #0
 800128e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	DEFINE_DATA(DATA_ID_ACC_Z, (uint8_t*)&sys->position.acceleration[POSITION_AXE_Z], 											DATA_FORMAT_16B_FLOAT_3D, 	name_z_acc, 								TRUE);
 8001292:	4bb4      	ldr	r3, [pc, #720]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001294:	220d      	movs	r2, #13
 8001296:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
 800129a:	4bb1      	ldr	r3, [pc, #708]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012a2:	4ab0      	ldr	r2, [pc, #704]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012a4:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80012a8:	4bae      	ldr	r3, [pc, #696]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012aa:	222b      	movs	r2, #43	; 0x2b
 80012ac:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
 80012b0:	4bac      	ldr	r3, [pc, #688]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012b2:	4aae      	ldr	r2, [pc, #696]	; (800156c <DATA_LOGGER_Init+0x624>)
 80012b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80012b8:	4baa      	ldr	r3, [pc, #680]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012ba:	2205      	movs	r2, #5
 80012bc:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 80012c0:	4ba8      	ldr	r3, [pc, #672]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

	//Vitesse dans le ref de la terre
	DEFINE_DATA(DATA_ID_SPEED_X, (uint8_t*)&sys->position.velocity[POSITION_AXE_X], 											DATA_FORMAT_16B_FLOAT_3D, 	name_x_speed, 								FALSE);
 80012c8:	4ba6      	ldr	r3, [pc, #664]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012ca:	220e      	movs	r2, #14
 80012cc:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
 80012d0:	4ba3      	ldr	r3, [pc, #652]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80012d8:	4aa2      	ldr	r2, [pc, #648]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012da:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80012de:	4ba1      	ldr	r3, [pc, #644]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012e0:	222b      	movs	r2, #43	; 0x2b
 80012e2:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80012e6:	4b9f      	ldr	r3, [pc, #636]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012e8:	4aa1      	ldr	r2, [pc, #644]	; (8001570 <DATA_LOGGER_Init+0x628>)
 80012ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 80012ee:	4b9d      	ldr	r3, [pc, #628]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
 80012f6:	4b9b      	ldr	r3, [pc, #620]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
	DEFINE_DATA(DATA_ID_SPEED_Y, (uint8_t*)&sys->position.velocity[POSITION_AXE_Y], 											DATA_FORMAT_16B_FLOAT_3D, 	name_y_speed, 								FALSE);
 80012fe:	4b99      	ldr	r3, [pc, #612]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001300:	220f      	movs	r2, #15
 8001302:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
 8001306:	4b96      	ldr	r3, [pc, #600]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800130e:	4a95      	ldr	r2, [pc, #596]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001310:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
 8001314:	4b93      	ldr	r3, [pc, #588]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001316:	222b      	movs	r2, #43	; 0x2b
 8001318:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
 800131c:	4b91      	ldr	r3, [pc, #580]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800131e:	4a95      	ldr	r2, [pc, #596]	; (8001574 <DATA_LOGGER_Init+0x62c>)
 8001320:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 8001324:	4b8f      	ldr	r3, [pc, #572]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001326:	2207      	movs	r2, #7
 8001328:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
 800132c:	4b8d      	ldr	r3, [pc, #564]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800132e:	2200      	movs	r2, #0
 8001330:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	DEFINE_DATA(DATA_ID_SPEED_Z, (uint8_t*)&sys->position.velocity[POSITION_AXE_Z], 											DATA_FORMAT_16B_FLOAT_3D, 	name_z_speed, 								TRUE);
 8001334:	4b8b      	ldr	r3, [pc, #556]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001336:	2210      	movs	r2, #16
 8001338:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f503 731b 	add.w	r3, r3, #620	; 0x26c
 8001344:	4a87      	ldr	r2, [pc, #540]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001346:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 800134a:	4b86      	ldr	r3, [pc, #536]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800134c:	222b      	movs	r2, #43	; 0x2b
 800134e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
 8001352:	4b84      	ldr	r3, [pc, #528]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001354:	4a88      	ldr	r2, [pc, #544]	; (8001578 <DATA_LOGGER_Init+0x630>)
 8001356:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 800135a:	4b82      	ldr	r3, [pc, #520]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800135c:	2207      	movs	r2, #7
 800135e:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8001362:	4b80      	ldr	r3, [pc, #512]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001364:	2201      	movs	r2, #1
 8001366:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	//Position dans le ref de la terre
	DEFINE_DATA(DATA_ID_POS_X, (uint8_t*)&sys->position.position[POSITION_AXE_X], 												DATA_FORMAT_16B_FLOAT_3D, 	name_x_pos, 								FALSE);
 800136a:	4b7e      	ldr	r3, [pc, #504]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800136c:	2211      	movs	r2, #17
 800136e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
 8001372:	4b7b      	ldr	r3, [pc, #492]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800137a:	4a7a      	ldr	r2, [pc, #488]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800137c:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
 8001380:	4b78      	ldr	r3, [pc, #480]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001382:	222b      	movs	r2, #43	; 0x2b
 8001384:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
 8001388:	4b76      	ldr	r3, [pc, #472]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800138a:	4a7c      	ldr	r2, [pc, #496]	; (800157c <DATA_LOGGER_Init+0x634>)
 800138c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001390:	4b74      	ldr	r3, [pc, #464]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001392:	2205      	movs	r2, #5
 8001394:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8001398:	4b72      	ldr	r3, [pc, #456]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800139a:	2200      	movs	r2, #0
 800139c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	DEFINE_DATA(DATA_ID_POS_Y, (uint8_t*)&sys->position.position[POSITION_AXE_Y], 												DATA_FORMAT_16B_FLOAT_3D, 	name_y_pos, 								FALSE);
 80013a0:	4b70      	ldr	r3, [pc, #448]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013a2:	2212      	movs	r2, #18
 80013a4:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
 80013a8:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80013b0:	4a6c      	ldr	r2, [pc, #432]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013b2:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
 80013b6:	4b6b      	ldr	r3, [pc, #428]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013b8:	222b      	movs	r2, #43	; 0x2b
 80013ba:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
 80013be:	4b69      	ldr	r3, [pc, #420]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013c0:	4a6f      	ldr	r2, [pc, #444]	; (8001580 <DATA_LOGGER_Init+0x638>)
 80013c2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80013c6:	4b67      	ldr	r3, [pc, #412]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013c8:	2205      	movs	r2, #5
 80013ca:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
 80013ce:	4b65      	ldr	r3, [pc, #404]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
	DEFINE_DATA(DATA_ID_POS_Z, (uint8_t*)&sys->position.position[POSITION_AXE_Z], 												DATA_FORMAT_16B_FLOAT_3D, 	name_z_pos, 								TRUE);
 80013d6:	4b63      	ldr	r3, [pc, #396]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013d8:	2213      	movs	r2, #19
 80013da:	f883 21d0 	strb.w	r2, [r3, #464]	; 0x1d0
 80013de:	4b60      	ldr	r3, [pc, #384]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80013e6:	4a5f      	ldr	r2, [pc, #380]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013e8:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
 80013ec:	4b5d      	ldr	r3, [pc, #372]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013ee:	222b      	movs	r2, #43	; 0x2b
 80013f0:	f883 21d1 	strb.w	r2, [r3, #465]	; 0x1d1
 80013f4:	4b5b      	ldr	r3, [pc, #364]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013f6:	4a63      	ldr	r2, [pc, #396]	; (8001584 <DATA_LOGGER_Init+0x63c>)
 80013f8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 80013fc:	4b59      	ldr	r3, [pc, #356]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80013fe:	2205      	movs	r2, #5
 8001400:	f883 21d8 	strb.w	r2, [r3, #472]	; 0x1d8
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001406:	2201      	movs	r2, #1
 8001408:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc

	//Consigne position
	DEFINE_DATA(DATA_ID_CONSIGNE_POS_Z, (uint8_t*)&sys->regulation.position.consigne_position[POSITION_AXE_Z], 					DATA_FORMAT_16B_FLOAT_3D, 	name_consigne_pos_z, 						FALSE);
 800140c:	4b55      	ldr	r3, [pc, #340]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800140e:	221e      	movs	r2, #30
 8001410:	f883 22d8 	strb.w	r2, [r3, #728]	; 0x2d8
 8001414:	4b52      	ldr	r3, [pc, #328]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f603 33bc 	addw	r3, r3, #3004	; 0xbbc
 800141c:	4a51      	ldr	r2, [pc, #324]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800141e:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
 8001422:	4b50      	ldr	r3, [pc, #320]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001424:	222b      	movs	r2, #43	; 0x2b
 8001426:	f883 22d9 	strb.w	r2, [r3, #729]	; 0x2d9
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800142c:	4a56      	ldr	r2, [pc, #344]	; (8001588 <DATA_LOGGER_Init+0x640>)
 800142e:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
 8001432:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001434:	220c      	movs	r2, #12
 8001436:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 800143a:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800143c:	2200      	movs	r2, #0
 800143e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4


	//Pid position
	DEFINE_DATA(DATA_ID_PID_POS_Z, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].output, 					DATA_FORMAT_16B_FLOAT_1D, 	name_pid_pos_z, 							FALSE);
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001444:	2220      	movs	r2, #32
 8001446:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
 800144a:	4b45      	ldr	r3, [pc, #276]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f603 5348 	addw	r3, r3, #3400	; 0xd48
 8001452:	4a44      	ldr	r2, [pc, #272]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001454:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8001458:	4b42      	ldr	r3, [pc, #264]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800145a:	2229      	movs	r2, #41	; 0x29
 800145c:	f883 2309 	strb.w	r2, [r3, #777]	; 0x309
 8001460:	4b40      	ldr	r3, [pc, #256]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <DATA_LOGGER_Init+0x644>)
 8001464:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
 8001468:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800146a:	2209      	movs	r2, #9
 800146c:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
 8001470:	4b3c      	ldr	r3, [pc, #240]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001472:	2200      	movs	r2, #0
 8001474:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
	DEFINE_DATA(DATA_ID_PID_POS_Z_P, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].P, 						DATA_FORMAT_16B_FLOAT_1D, 	name_p_pos_z, 								FALSE);
 8001478:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800147a:	2221      	movs	r2, #33	; 0x21
 800147c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8001480:	4b37      	ldr	r3, [pc, #220]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f603 534c 	addw	r3, r3, #3404	; 0xd4c
 8001488:	4a36      	ldr	r2, [pc, #216]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800148a:	f8c2 331c 	str.w	r3, [r2, #796]	; 0x31c
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001490:	2229      	movs	r2, #41	; 0x29
 8001492:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001498:	4a3d      	ldr	r2, [pc, #244]	; (8001590 <DATA_LOGGER_Init+0x648>)
 800149a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014a0:	2207      	movs	r2, #7
 80014a2:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328
 80014a6:	4b2f      	ldr	r3, [pc, #188]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	DEFINE_DATA(DATA_ID_PID_POS_Z_I, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].I, 						DATA_FORMAT_16B_FLOAT_1D, 	name_i_pos_z, 								FALSE);
 80014ae:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014b0:	2222      	movs	r2, #34	; 0x22
 80014b2:	f883 2338 	strb.w	r2, [r3, #824]	; 0x338
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f503 6355 	add.w	r3, r3, #3408	; 0xd50
 80014be:	4a29      	ldr	r2, [pc, #164]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014c0:	f8c2 3334 	str.w	r3, [r2, #820]	; 0x334
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014c6:	2229      	movs	r2, #41	; 0x29
 80014c8:	f883 2339 	strb.w	r2, [r3, #825]	; 0x339
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014ce:	4a31      	ldr	r2, [pc, #196]	; (8001594 <DATA_LOGGER_Init+0x64c>)
 80014d0:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014d6:	2207      	movs	r2, #7
 80014d8:	f883 2340 	strb.w	r2, [r3, #832]	; 0x340
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
	DEFINE_DATA(DATA_ID_PID_POS_Z_D, (uint8_t*)&sys->regulation.position.pid_position[POSITION_AXE_Z].D, 						DATA_FORMAT_16B_FLOAT_1D, 	name_d_pos_z, 								FALSE);
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014e6:	2223      	movs	r2, #35	; 0x23
 80014e8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
 80014ec:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <DATA_LOGGER_Init+0x618>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f603 5354 	addw	r3, r3, #3412	; 0xd54
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014f6:	f8c2 334c 	str.w	r3, [r2, #844]	; 0x34c
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 80014fc:	2229      	movs	r2, #41	; 0x29
 80014fe:	f883 2351 	strb.w	r2, [r3, #849]	; 0x351
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001504:	4a24      	ldr	r2, [pc, #144]	; (8001598 <DATA_LOGGER_Init+0x650>)
 8001506:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800150c:	2207      	movs	r2, #7
 800150e:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001514:	2200      	movs	r2, #0
 8001516:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c

	//Consigne velocity
	DEFINE_DATA(DATA_ID_CONSIGNE_VELOCITY_Z, (uint8_t*)&sys->regulation.position.consigne_velocity[POSITION_AXE_Z], 			DATA_FORMAT_16B_FLOAT_1D, 	name_consigne_velocity_z, 					FALSE);
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800151c:	221f      	movs	r2, #31
 800151e:	f883 22f0 	strb.w	r2, [r3, #752]	; 0x2f0
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <DATA_LOGGER_Init+0x618>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f603 33c8 	addw	r3, r3, #3016	; 0xbc8
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800152c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001532:	2229      	movs	r2, #41	; 0x29
 8001534:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <DATA_LOGGER_Init+0x654>)
 800153c:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001542:	220c      	movs	r2, #12
 8001544:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 800154a:	2200      	movs	r2, #0
 800154c:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc

	//Pid velocity
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].output, 				DATA_FORMAT_16B_FLOAT_1D, 	name_pid_velocity_z, 					FALSE);
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <DATA_LOGGER_Init+0x61c>)
 8001552:	2224      	movs	r2, #36	; 0x24
 8001554:	f883 2368 	strb.w	r2, [r3, #872]	; 0x368
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <DATA_LOGGER_Init+0x618>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	e020      	b.n	80015a0 <DATA_LOGGER_Init+0x658>
 800155e:	bf00      	nop
 8001560:	20001ea4 	.word	0x20001ea4
 8001564:	20001ea8 	.word	0x20001ea8
 8001568:	20000084 	.word	0x20000084
 800156c:	2000008c 	.word	0x2000008c
 8001570:	20000094 	.word	0x20000094
 8001574:	2000009c 	.word	0x2000009c
 8001578:	200000a4 	.word	0x200000a4
 800157c:	200000ac 	.word	0x200000ac
 8001580:	200000b4 	.word	0x200000b4
 8001584:	200000bc 	.word	0x200000bc
 8001588:	200000c4 	.word	0x200000c4
 800158c:	200000e4 	.word	0x200000e4
 8001590:	200000f0 	.word	0x200000f0
 8001594:	200000f8 	.word	0x200000f8
 8001598:	20000100 	.word	0x20000100
 800159c:	200000d4 	.word	0x200000d4
 80015a0:	f603 4364 	addw	r3, r3, #3172	; 0xc64
 80015a4:	4abc      	ldr	r2, [pc, #752]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015a6:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
 80015aa:	4bbb      	ldr	r3, [pc, #748]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015ac:	2229      	movs	r2, #41	; 0x29
 80015ae:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 80015b2:	4bb9      	ldr	r3, [pc, #740]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015b4:	4ab9      	ldr	r2, [pc, #740]	; (800189c <DATA_LOGGER_Init+0x954>)
 80015b6:	f8c3 236c 	str.w	r2, [r3, #876]	; 0x36c
 80015ba:	4bb7      	ldr	r3, [pc, #732]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015bc:	220a      	movs	r2, #10
 80015be:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
 80015c2:	4bb5      	ldr	r3, [pc, #724]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z_P, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].P, 					DATA_FORMAT_16B_FLOAT_1D, 	name_p_velocity_z, 						FALSE);
 80015ca:	4bb3      	ldr	r3, [pc, #716]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015cc:	2225      	movs	r2, #37	; 0x25
 80015ce:	f883 2380 	strb.w	r2, [r3, #896]	; 0x380
 80015d2:	4bb3      	ldr	r3, [pc, #716]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f603 4368 	addw	r3, r3, #3176	; 0xc68
 80015da:	4aaf      	ldr	r2, [pc, #700]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015dc:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
 80015e0:	4bad      	ldr	r3, [pc, #692]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015e2:	2229      	movs	r2, #41	; 0x29
 80015e4:	f883 2381 	strb.w	r2, [r3, #897]	; 0x381
 80015e8:	4bab      	ldr	r3, [pc, #684]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015ea:	4aae      	ldr	r2, [pc, #696]	; (80018a4 <DATA_LOGGER_Init+0x95c>)
 80015ec:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 80015f0:	4ba9      	ldr	r3, [pc, #676]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015f2:	2208      	movs	r2, #8
 80015f4:	f883 2388 	strb.w	r2, [r3, #904]	; 0x388
 80015f8:	4ba7      	ldr	r3, [pc, #668]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z_I, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].I, 					DATA_FORMAT_16B_FLOAT_1D, 	name_i_velocity_z, 						FALSE);
 8001600:	4ba5      	ldr	r3, [pc, #660]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001602:	2226      	movs	r2, #38	; 0x26
 8001604:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
 8001608:	4ba5      	ldr	r3, [pc, #660]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f603 436c 	addw	r3, r3, #3180	; 0xc6c
 8001610:	4aa1      	ldr	r2, [pc, #644]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001612:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
 8001616:	4ba0      	ldr	r3, [pc, #640]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001618:	2229      	movs	r2, #41	; 0x29
 800161a:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
 800161e:	4b9e      	ldr	r3, [pc, #632]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001620:	4aa1      	ldr	r2, [pc, #644]	; (80018a8 <DATA_LOGGER_Init+0x960>)
 8001622:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
 8001626:	4b9c      	ldr	r3, [pc, #624]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001628:	2208      	movs	r2, #8
 800162a:	f883 23a0 	strb.w	r2, [r3, #928]	; 0x3a0
 800162e:	4b9a      	ldr	r3, [pc, #616]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001630:	2200      	movs	r2, #0
 8001632:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
	DEFINE_DATA(DATA_ID_PID_VELOCITY_Z_D, (uint8_t*)&sys->regulation.position.pid_velocity[POSITION_AXE_Z].D, 					DATA_FORMAT_16B_FLOAT_1D, 	name_d_velocity_z, 						FALSE);
 8001636:	4b98      	ldr	r3, [pc, #608]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001638:	2227      	movs	r2, #39	; 0x27
 800163a:	f883 23b0 	strb.w	r2, [r3, #944]	; 0x3b0
 800163e:	4b98      	ldr	r3, [pc, #608]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8001646:	4a94      	ldr	r2, [pc, #592]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001648:	f8c2 33ac 	str.w	r3, [r2, #940]	; 0x3ac
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800164e:	2229      	movs	r2, #41	; 0x29
 8001650:	f883 23b1 	strb.w	r2, [r3, #945]	; 0x3b1
 8001654:	4b90      	ldr	r3, [pc, #576]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001656:	4a95      	ldr	r2, [pc, #596]	; (80018ac <DATA_LOGGER_Init+0x964>)
 8001658:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
 800165c:	4b8e      	ldr	r3, [pc, #568]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800165e:	2208      	movs	r2, #8
 8001660:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
 8001664:	4b8c      	ldr	r3, [pc, #560]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001666:	2200      	movs	r2, #0
 8001668:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

	//Consignes angles rates
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_ROLL, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_roll_gyro, 							FALSE);
 800166c:	4b8a      	ldr	r3, [pc, #552]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800166e:	2216      	movs	r2, #22
 8001670:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 8001674:	4b8a      	ldr	r3, [pc, #552]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 800167c:	4a86      	ldr	r2, [pc, #536]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800167e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001682:	4b85      	ldr	r3, [pc, #532]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001684:	2229      	movs	r2, #41	; 0x29
 8001686:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 800168a:	4b83      	ldr	r3, [pc, #524]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800168c:	4a88      	ldr	r2, [pc, #544]	; (80018b0 <DATA_LOGGER_Init+0x968>)
 800168e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8001692:	4b81      	ldr	r3, [pc, #516]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001694:	220d      	movs	r2, #13
 8001696:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 800169a:	4b7f      	ldr	r3, [pc, #508]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800169c:	2200      	movs	r2, #0
 800169e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_PITCH, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH], 	DATA_FORMAT_16B_FLOAT_1D, 	name_target_pitch_gyro, 						FALSE);
 80016a2:	4b7d      	ldr	r3, [pc, #500]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016a4:	2217      	movs	r2, #23
 80016a6:	f883 2230 	strb.w	r2, [r3, #560]	; 0x230
 80016aa:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 80016b2:	4a79      	ldr	r2, [pc, #484]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016b4:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
 80016b8:	4b77      	ldr	r3, [pc, #476]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016ba:	2229      	movs	r2, #41	; 0x29
 80016bc:	f883 2231 	strb.w	r2, [r3, #561]	; 0x231
 80016c0:	4b75      	ldr	r3, [pc, #468]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016c2:	4a7c      	ldr	r2, [pc, #496]	; (80018b4 <DATA_LOGGER_Init+0x96c>)
 80016c4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 80016c8:	4b73      	ldr	r3, [pc, #460]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016ca:	220e      	movs	r2, #14
 80016cc:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
 80016d0:	4b71      	ldr	r3, [pc, #452]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	DEFINE_DATA(DATA_ID_CONSIGNE_GYRO_YAW, (uint8_t*)&sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW], 		DATA_FORMAT_16B_FLOAT_1D, 	name_target_yaw_gyro, 		 					FALSE);
 80016d8:	4b6f      	ldr	r3, [pc, #444]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016da:	2218      	movs	r2, #24
 80016dc:	f883 2248 	strb.w	r2, [r3, #584]	; 0x248
 80016e0:	4b6f      	ldr	r3, [pc, #444]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 80016e8:	4a6b      	ldr	r2, [pc, #428]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016ea:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 80016ee:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016f0:	2229      	movs	r2, #41	; 0x29
 80016f2:	f883 2249 	strb.w	r2, [r3, #585]	; 0x249
 80016f6:	4b68      	ldr	r3, [pc, #416]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80016f8:	4a6f      	ldr	r2, [pc, #444]	; (80018b8 <DATA_LOGGER_Init+0x970>)
 80016fa:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 80016fe:	4b66      	ldr	r3, [pc, #408]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001700:	220c      	movs	r2, #12
 8001702:	f883 2250 	strb.w	r2, [r3, #592]	; 0x250
 8001706:	4b64      	ldr	r3, [pc, #400]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001708:	2200      	movs	r2, #0
 800170a:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 							FALSE);
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001710:	2205      	movs	r2, #5
 8001712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8001716:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	4a5e      	ldr	r2, [pc, #376]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800171e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001720:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001722:	2229      	movs	r2, #41	; 0x29
 8001724:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8001728:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800172a:	4a64      	ldr	r2, [pc, #400]	; (80018bc <DATA_LOGGER_Init+0x974>)
 800172c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001730:	4b59      	ldr	r3, [pc, #356]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001732:	220d      	movs	r2, #13
 8001734:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001738:	4b57      	ldr	r3, [pc, #348]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800173a:	2200      	movs	r2, #0
 800173c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,							FALSE);
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001742:	2206      	movs	r2, #6
 8001744:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8001748:	4b55      	ldr	r3, [pc, #340]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174e:	4a52      	ldr	r2, [pc, #328]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001754:	4b50      	ldr	r3, [pc, #320]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001756:	2229      	movs	r2, #41	; 0x29
 8001758:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800175e:	4a58      	ldr	r2, [pc, #352]	; (80018c0 <DATA_LOGGER_Init+0x978>)
 8001760:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001764:	4b4c      	ldr	r3, [pc, #304]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001766:	220e      	movs	r2, #14
 8001768:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 800176c:	4b4a      	ldr	r3, [pc, #296]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800176e:	2200      	movs	r2, #0
 8001770:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 								FALSE);
 8001774:	4b48      	ldr	r3, [pc, #288]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001776:	2207      	movs	r2, #7
 8001778:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800177c:	4b48      	ldr	r3, [pc, #288]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001782:	3308      	adds	r3, #8
 8001784:	4a44      	ldr	r2, [pc, #272]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001786:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 800178a:	4b43      	ldr	r3, [pc, #268]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800178c:	2229      	movs	r2, #41	; 0x29
 800178e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8001792:	4b41      	ldr	r3, [pc, #260]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001794:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <DATA_LOGGER_Init+0x97c>)
 8001796:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800179a:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800179c:	220c      	movs	r2, #12
 800179e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 80017a2:	4b3d      	ldr	r3, [pc, #244]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

	//Barometer
	DEFINE_DATA(DATA_ID_PRESSURE, 		(uint8_t*)&sys->sensors.ms5611.pressure, 												DATA_FORMAT_16B_FLOAT_1D, 	name_pressure, 									FALSE);
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017ac:	2229      	movs	r2, #41	; 0x29
 80017ae:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80017ba:	4a37      	ldr	r2, [pc, #220]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017bc:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017c2:	2229      	movs	r2, #41	; 0x29
 80017c4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017ca:	4a3f      	ldr	r2, [pc, #252]	; (80018c8 <DATA_LOGGER_Init+0x980>)
 80017cc:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017d2:	2208      	movs	r2, #8
 80017d4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017da:	2200      	movs	r2, #0
 80017dc:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
	DEFINE_DATA(DATA_ID_TEMPERATURE, 	(uint8_t*)&sys->sensors.ms5611.temperature, 											DATA_FORMAT_16B_FLOAT_1D, 	name_temperature, 								FALSE);
 80017e0:	4b2d      	ldr	r3, [pc, #180]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017e2:	222a      	movs	r2, #42	; 0x2a
 80017e4:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017f0:	4a29      	ldr	r2, [pc, #164]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017f2:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
 80017f6:	4b28      	ldr	r3, [pc, #160]	; (8001898 <DATA_LOGGER_Init+0x950>)
 80017f8:	2229      	movs	r2, #41	; 0x29
 80017fa:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001800:	4a32      	ldr	r2, [pc, #200]	; (80018cc <DATA_LOGGER_Init+0x984>)
 8001802:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001808:	220b      	movs	r2, #11
 800180a:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001810:	2200      	movs	r2, #0
 8001812:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
	DEFINE_DATA(DATA_ID_ALTITUDE, 		(uint8_t*)&sys->sensors.ms5611.altitude, 												DATA_FORMAT_16B_FLOAT_3D, 	name_altitude, 									TRUE);
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001818:	222b      	movs	r2, #43	; 0x2b
 800181a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <DATA_LOGGER_Init+0x958>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001826:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001828:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800182e:	222b      	movs	r2, #43	; 0x2b
 8001830:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <DATA_LOGGER_Init+0x988>)
 8001838:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800183e:	2208      	movs	r2, #8
 8001840:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001846:	2201      	movs	r2, #1
 8001848:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_config_request, 							FALSE);
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800184e:	222c      	movs	r2, #44	; 0x2c
 8001850:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001856:	2200      	movs	r2, #0
 8001858:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001866:	4a1b      	ldr	r2, [pc, #108]	; (80018d4 <DATA_LOGGER_Init+0x98c>)
 8001868:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800186e:	220b      	movs	r2, #11
 8001870:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	DEFINE_DATA(DATA_ID_DISABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_disable_asser_orientation,  				TRUE);
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800187e:	222d      	movs	r2, #45	; 0x2d
 8001880:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001886:	2200      	movs	r2, #0
 8001888:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 800188c:	4b02      	ldr	r3, [pc, #8]	; (8001898 <DATA_LOGGER_Init+0x950>)
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
 8001894:	4b00      	ldr	r3, [pc, #0]	; (8001898 <DATA_LOGGER_Init+0x950>)
 8001896:	e01f      	b.n	80018d8 <DATA_LOGGER_Init+0x990>
 8001898:	20001ea8 	.word	0x20001ea8
 800189c:	20000108 	.word	0x20000108
 80018a0:	20001ea4 	.word	0x20001ea4
 80018a4:	20000114 	.word	0x20000114
 80018a8:	20000120 	.word	0x20000120
 80018ac:	2000012c 	.word	0x2000012c
 80018b0:	20000138 	.word	0x20000138
 80018b4:	20000148 	.word	0x20000148
 80018b8:	20000158 	.word	0x20000158
 80018bc:	20000168 	.word	0x20000168
 80018c0:	20000178 	.word	0x20000178
 80018c4:	20000188 	.word	0x20000188
 80018c8:	200001e0 	.word	0x200001e0
 80018cc:	200001d4 	.word	0x200001d4
 80018d0:	200001ec 	.word	0x200001ec
 80018d4:	200001f8 	.word	0x200001f8
 80018d8:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <DATA_LOGGER_Init+0xab0>)
 80018da:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80018e0:	220d      	movs	r2, #13
 80018e2:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
 80018e6:	4b45      	ldr	r3, [pc, #276]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
	DEFINE_DATA(DATA_ID_ENABLE_ASSER_ORIENTATION, NULL, 																		DATA_FORMAT_0B_BUTTON, 		name_enable_asser_orientation, 					TRUE);
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80018f0:	222e      	movs	r2, #46	; 0x2e
 80018f2:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
 80018f6:	4b41      	ldr	r3, [pc, #260]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 80018fe:	4b3f      	ldr	r3, [pc, #252]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001908:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <DATA_LOGGER_Init+0xab8>)
 800190a:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001910:	220c      	movs	r2, #12
 8001912:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
 8001916:	4b39      	ldr	r3, [pc, #228]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001918:	2201      	movs	r2, #1
 800191a:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
	DEFINE_DATA(DATA_ID_START_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 					TRUE);
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001920:	222f      	movs	r2, #47	; 0x2f
 8001922:	f883 2470 	strb.w	r2, [r3, #1136]	; 0x470
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001928:	2200      	movs	r2, #0
 800192a:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2471 	strb.w	r2, [r3, #1137]	; 0x471
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <DATA_LOGGER_Init+0xabc>)
 800193a:	f8c3 2474 	str.w	r2, [r3, #1140]	; 0x474
 800193e:	4b2f      	ldr	r3, [pc, #188]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001940:	220e      	movs	r2, #14
 8001942:	f883 2478 	strb.w	r2, [r3, #1144]	; 0x478
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001948:	2201      	movs	r2, #1
 800194a:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, NULL, 																					DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 							TRUE);
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001950:	2230      	movs	r2, #48	; 0x30
 8001952:	f883 2488 	strb.w	r2, [r3, #1160]	; 0x488
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001958:	2200      	movs	r2, #0
 800195a:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2489 	strb.w	r2, [r3, #1161]	; 0x489
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <DATA_LOGGER_Init+0xac0>)
 800196a:	f8c3 248c 	str.w	r2, [r3, #1164]	; 0x48c
 800196e:	4b23      	ldr	r3, [pc, #140]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001970:	220d      	movs	r2, #13
 8001972:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001978:	2201      	movs	r2, #1
 800197a:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

	//Propulsion
	DEFINE_DATA(DATA_ID_PROP_THRUST, (uint8_t*)&sys->propulsion.consigne[PROP_CONSIGNE_THRUST], 								DATA_FORMAT_16B_UINT16,  	name_prop_thrust, 								FALSE);
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001980:	2228      	movs	r2, #40	; 0x28
 8001982:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <DATA_LOGGER_Init+0xac4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f603 13ba 	addw	r3, r3, #2490	; 0x9ba
 800198e:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001990:	f8c2 33c4 	str.w	r3, [r2, #964]	; 0x3c4
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 8001996:	222c      	movs	r2, #44	; 0x2c
 8001998:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 800199e:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <DATA_LOGGER_Init+0xac8>)
 80019a0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019a6:	220b      	movs	r2, #11
 80019a8:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4


	//Others
	DEFINE_DATA(DATA_ID_FLIGHT_MODE, sys->soft.flight_mode, 																	DATA_FORMAT_8B, 			name_flight_mode, 								FALSE);
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019b6:	2215      	movs	r2, #21
 80019b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <DATA_LOGGER_Init+0xac4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8d3 3da0 	ldr.w	r3, [r3, #3488]	; 0xda0
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019c6:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019cc:	2214      	movs	r2, #20
 80019ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <DATA_LOGGER_Init+0xacc>)
 80019d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019dc:	220b      	movs	r2, #11
 80019de:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <DATA_LOGGER_Init+0xab4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c


}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000214 	.word	0x20000214
 80019fc:	20001ea8 	.word	0x20001ea8
 8001a00:	20000204 	.word	0x20000204
 8001a04:	20000224 	.word	0x20000224
 8001a08:	20000234 	.word	0x20000234
 8001a0c:	20001ea4 	.word	0x20001ea4
 8001a10:	200001c8 	.word	0x200001c8
 8001a14:	20000244 	.word	0x20000244

08001a18 <DATA_LOGGER_Start>:

void DATA_LOGGER_Start(){
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	start_flag = TRUE;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <DATA_LOGGER_Start+0x14>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	601a      	str	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20002344 	.word	0x20002344

08001a30 <DATA_LOGGER_Stop>:

void DATA_LOGGER_Stop(){
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	stop_flag = TRUE;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <DATA_LOGGER_Stop+0x14>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	2000234c 	.word	0x2000234c

08001a48 <DATA_LOGGER_Main>:

void DATA_LOGGER_Main(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8001a4e:	4b74      	ldr	r3, [pc, #464]	; (8001c20 <DATA_LOGGER_Main+0x1d8>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	4b74      	ldr	r3, [pc, #464]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	603b      	str	r3, [r7, #0]
	previous_state = state ;
 8001a62:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	4b6e      	ldr	r3, [pc, #440]	; (8001c20 <DATA_LOGGER_Main+0x1d8>)
 8001a68:	701a      	strb	r2, [r3, #0]

	switch(state){
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d048      	beq.n	8001b04 <DATA_LOGGER_Main+0xbc>
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	f000 8090 	beq.w	8001b98 <DATA_LOGGER_Main+0x150>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d000      	beq.n	8001a7e <DATA_LOGGER_Main+0x36>
				}
			}
			break;
	}

}
 8001a7c:	e0cb      	b.n	8001c16 <DATA_LOGGER_Main+0x1ce>
			if(entrance){
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <DATA_LOGGER_Main+0x44>
				SCHEDULER_reschedule_task(TASK_LOGGER, 2000000);
 8001a84:	4968      	ldr	r1, [pc, #416]	; (8001c28 <DATA_LOGGER_Main+0x1e0>)
 8001a86:	200d      	movs	r0, #13
 8001a88:	f002 fc4c 	bl	8004324 <SCHEDULER_reschedule_task>
			tmp_len = DATA_LOGGER_Get_Data_Config(DATA_ID_CONFIG_REQUEST, tmp);
 8001a8c:	4967      	ldr	r1, [pc, #412]	; (8001c2c <DATA_LOGGER_Main+0x1e4>)
 8001a8e:	202c      	movs	r0, #44	; 0x2c
 8001a90:	f000 fab0 	bl	8001ff4 <DATA_LOGGER_Get_Data_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <DATA_LOGGER_Main+0x1e8>)
 8001a9a:	701a      	strb	r2, [r3, #0]
			TELEMETRY_Send_Data(tmp, tmp_len);
 8001a9c:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <DATA_LOGGER_Main+0x1e8>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4862      	ldr	r0, [pc, #392]	; (8001c2c <DATA_LOGGER_Main+0x1e4>)
 8001aa4:	f006 fb64 	bl	8008170 <TELEMETRY_Send_Data>
			if(send_config_flag){
 8001aa8:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <DATA_LOGGER_Main+0x1ec>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01a      	beq.n	8001ae6 <DATA_LOGGER_Main+0x9e>
				start_flag = FALSE;
 8001ab0:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <DATA_LOGGER_Main+0x1f0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 8001ab6:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <DATA_LOGGER_Main+0x1f4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
				send_config_flag = FALSE;
 8001abc:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <DATA_LOGGER_Main+0x1ec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
				if(config_not_sent){
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	; (8001c40 <DATA_LOGGER_Main+0x1f8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d009      	beq.n	8001ade <DATA_LOGGER_Main+0x96>
					id_init_counter = 0;
 8001aca:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
					is_any_data_used = FALSE;
 8001ad0:	4b5d      	ldr	r3, [pc, #372]	; (8001c48 <DATA_LOGGER_Main+0x200>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 8001ad6:	4b53      	ldr	r3, [pc, #332]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
			break;
 8001adc:	e09a      	b.n	8001c14 <DATA_LOGGER_Main+0x1cc>
					state = LOGGER_LOG;
 8001ade:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	701a      	strb	r2, [r3, #0]
			break;
 8001ae4:	e096      	b.n	8001c14 <DATA_LOGGER_Main+0x1cc>
			else if(start_flag)
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <DATA_LOGGER_Main+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8092 	beq.w	8001c14 <DATA_LOGGER_Main+0x1cc>
				start_flag = FALSE;
 8001af0:	4b51      	ldr	r3, [pc, #324]	; (8001c38 <DATA_LOGGER_Main+0x1f0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
				stop_flag = FALSE;
 8001af6:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <DATA_LOGGER_Main+0x1f4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
				state = LOGGER_LOG;
 8001afc:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	701a      	strb	r2, [r3, #0]
			break;
 8001b02:	e087      	b.n	8001c14 <DATA_LOGGER_Main+0x1cc>
			if(entrance)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <DATA_LOGGER_Main+0xd8>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);	//On abaisse la fréquence de la tâche pendant l'init
 8001b0a:	4950      	ldr	r1, [pc, #320]	; (8001c4c <DATA_LOGGER_Main+0x204>)
 8001b0c:	200d      	movs	r0, #13
 8001b0e:	f002 fc09 	bl	8004324 <SCHEDULER_reschedule_task>
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001b12:	e005      	b.n	8001b20 <DATA_LOGGER_Main+0xd8>
				id_init_counter ++ ;
 8001b14:	4b4b      	ldr	r3, [pc, #300]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001b1e:	701a      	strb	r2, [r3, #0]
			while(!data_list[id_init_counter].used && id_init_counter < DATA_ID_COUNT){
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <DATA_LOGGER_Main+0x208>)
 8001b28:	460b      	mov	r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	440b      	add	r3, r1
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	3314      	adds	r3, #20
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d103      	bne.n	8001b42 <DATA_LOGGER_Main+0xfa>
 8001b3a:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b30      	cmp	r3, #48	; 0x30
 8001b40:	d9e8      	bls.n	8001b14 <DATA_LOGGER_Main+0xcc>
			if(id_init_counter < DATA_ID_COUNT){
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b30      	cmp	r3, #48	; 0x30
 8001b48:	d817      	bhi.n	8001b7a <DATA_LOGGER_Main+0x132>
				is_any_data_used = TRUE;
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <DATA_LOGGER_Main+0x200>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001b50:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	b2d1      	uxtb	r1, r2
 8001b58:	4a3a      	ldr	r2, [pc, #232]	; (8001c44 <DATA_LOGGER_Main+0x1fc>)
 8001b5a:	7011      	strb	r1, [r2, #0]
 8001b5c:	4933      	ldr	r1, [pc, #204]	; (8001c2c <DATA_LOGGER_Main+0x1e4>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fa48 	bl	8001ff4 <DATA_LOGGER_Get_Data_Config>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <DATA_LOGGER_Main+0x1e8>)
 8001b6a:	701a      	strb	r2, [r3, #0]
				TELEMETRY_Send_Data(tmp, tmp_len);
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <DATA_LOGGER_Main+0x1e8>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	482e      	ldr	r0, [pc, #184]	; (8001c2c <DATA_LOGGER_Main+0x1e4>)
 8001b74:	f006 fafc 	bl	8008170 <TELEMETRY_Send_Data>
			break;
 8001b78:	e04d      	b.n	8001c16 <DATA_LOGGER_Main+0x1ce>
				if(is_any_data_used)
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <DATA_LOGGER_Main+0x200>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <DATA_LOGGER_Main+0x148>
					config_not_sent = FALSE ;
 8001b82:	4b2f      	ldr	r3, [pc, #188]	; (8001c40 <DATA_LOGGER_Main+0x1f8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
					state = LOGGER_LOG ;
 8001b88:	4b26      	ldr	r3, [pc, #152]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
			break;
 8001b8e:	e042      	b.n	8001c16 <DATA_LOGGER_Main+0x1ce>
					state = LOGGER_IDDLE ;
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
			break;
 8001b96:	e03e      	b.n	8001c16 <DATA_LOGGER_Main+0x1ce>
			if(entrance)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <DATA_LOGGER_Main+0x160>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//On reprend une fréquence plus importante pour l'envoit en flux continu
 8001b9e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001ba2:	200d      	movs	r0, #13
 8001ba4:	f002 fbbe 	bl	8004324 <SCHEDULER_reschedule_task>
			if(stop_flag)
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <DATA_LOGGER_Main+0x1f4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <DATA_LOGGER_Main+0x16e>
				state = LOGGER_IDDLE;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <DATA_LOGGER_Main+0x1dc>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	e027      	b.n	8001c0c <DATA_LOGGER_Main+0x1c4>
				if(data_list[d].used && (data_list[d].format != DATA_FORMAT_0B_BUTTON))
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	4924      	ldr	r1, [pc, #144]	; (8001c50 <DATA_LOGGER_Main+0x208>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3314      	adds	r3, #20
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <DATA_LOGGER_Main+0x1be>
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	491e      	ldr	r1, [pc, #120]	; (8001c50 <DATA_LOGGER_Main+0x208>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	440b      	add	r3, r1
 8001be0:	3309      	adds	r3, #9
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00e      	beq.n	8001c06 <DATA_LOGGER_Main+0x1be>
					tmp_len = DATA_LOGGER_Get_Data_Value(d, tmp);
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	4910      	ldr	r1, [pc, #64]	; (8001c2c <DATA_LOGGER_Main+0x1e4>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 f8cb 	bl	8001d88 <DATA_LOGGER_Get_Data_Value>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <DATA_LOGGER_Main+0x1e8>)
 8001bf8:	701a      	strb	r2, [r3, #0]
					TELEMETRY_Send_Data(tmp, tmp_len);
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <DATA_LOGGER_Main+0x1e8>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480a      	ldr	r0, [pc, #40]	; (8001c2c <DATA_LOGGER_Main+0x1e4>)
 8001c02:	f006 fab5 	bl	8008170 <TELEMETRY_Send_Data>
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b30      	cmp	r3, #48	; 0x30
 8001c10:	d9d4      	bls.n	8001bbc <DATA_LOGGER_Main+0x174>
			break;
 8001c12:	e000      	b.n	8001c16 <DATA_LOGGER_Main+0x1ce>
			break;
 8001c14:	bf00      	nop
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000250 	.word	0x20000250
 8001c24:	20002340 	.word	0x20002340
 8001c28:	001e8480 	.word	0x001e8480
 8001c2c:	20002350 	.word	0x20002350
 8001c30:	20002364 	.word	0x20002364
 8001c34:	20002348 	.word	0x20002348
 8001c38:	20002344 	.word	0x20002344
 8001c3c:	2000234c 	.word	0x2000234c
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20002365 	.word	0x20002365
 8001c48:	20002368 	.word	0x20002368
 8001c4c:	0007a120 	.word	0x0007a120
 8001c50:	20001ea8 	.word	0x20001ea8

08001c54 <DATA_LOGGER_Reception>:

void DATA_LOGGER_Reception(uint8_t * input_buffer){
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	uint8_t id = input_buffer[0];
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	73fb      	strb	r3, [r7, #15]

	switch(data_list[id].format){
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	4946      	ldr	r1, [pc, #280]	; (8001d80 <DATA_LOGGER_Reception+0x12c>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3309      	adds	r3, #9
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b29      	cmp	r3, #41	; 0x29
 8001c76:	d87d      	bhi.n	8001d74 <DATA_LOGGER_Reception+0x120>
 8001c78:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <DATA_LOGGER_Reception+0x2c>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001d29 	.word	0x08001d29
 8001c84:	08001d75 	.word	0x08001d75
 8001c88:	08001d75 	.word	0x08001d75
 8001c8c:	08001d75 	.word	0x08001d75
 8001c90:	08001d75 	.word	0x08001d75
 8001c94:	08001d75 	.word	0x08001d75
 8001c98:	08001d75 	.word	0x08001d75
 8001c9c:	08001d75 	.word	0x08001d75
 8001ca0:	08001d75 	.word	0x08001d75
 8001ca4:	08001d75 	.word	0x08001d75
 8001ca8:	08001d75 	.word	0x08001d75
 8001cac:	08001d75 	.word	0x08001d75
 8001cb0:	08001d75 	.word	0x08001d75
 8001cb4:	08001d75 	.word	0x08001d75
 8001cb8:	08001d75 	.word	0x08001d75
 8001cbc:	08001d75 	.word	0x08001d75
 8001cc0:	08001d75 	.word	0x08001d75
 8001cc4:	08001d75 	.word	0x08001d75
 8001cc8:	08001d75 	.word	0x08001d75
 8001ccc:	08001d75 	.word	0x08001d75
 8001cd0:	08001d75 	.word	0x08001d75
 8001cd4:	08001d75 	.word	0x08001d75
 8001cd8:	08001d75 	.word	0x08001d75
 8001cdc:	08001d75 	.word	0x08001d75
 8001ce0:	08001d75 	.word	0x08001d75
 8001ce4:	08001d75 	.word	0x08001d75
 8001ce8:	08001d75 	.word	0x08001d75
 8001cec:	08001d75 	.word	0x08001d75
 8001cf0:	08001d75 	.word	0x08001d75
 8001cf4:	08001d75 	.word	0x08001d75
 8001cf8:	08001d75 	.word	0x08001d75
 8001cfc:	08001d75 	.word	0x08001d75
 8001d00:	08001d75 	.word	0x08001d75
 8001d04:	08001d75 	.word	0x08001d75
 8001d08:	08001d75 	.word	0x08001d75
 8001d0c:	08001d75 	.word	0x08001d75
 8001d10:	08001d75 	.word	0x08001d75
 8001d14:	08001d75 	.word	0x08001d75
 8001d18:	08001d75 	.word	0x08001d75
 8001d1c:	08001d75 	.word	0x08001d75
 8001d20:	08001d75 	.word	0x08001d75
 8001d24:	08001d75 	.word	0x08001d75
		case DATA_FORMAT_0B_BUTTON:
			//We can create an action for each id
			switch(id)
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	3b2c      	subs	r3, #44	; 0x2c
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d81f      	bhi.n	8001d70 <DATA_LOGGER_Reception+0x11c>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <DATA_LOGGER_Reception+0xe4>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d4d 	.word	0x08001d4d
 8001d3c:	08001d5d 	.word	0x08001d5d
 8001d40:	08001d55 	.word	0x08001d55
 8001d44:	08001d65 	.word	0x08001d65
 8001d48:	08001d6b 	.word	0x08001d6b
			{
				default:
					break;
				case DATA_ID_CONFIG_REQUEST:
					send_config_flag = TRUE;
 8001d4c:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <DATA_LOGGER_Reception+0x130>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]
					break;
 8001d52:	e00e      	b.n	8001d72 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_ENABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8001d54:	2001      	movs	r0, #1
 8001d56:	f003 f9a3 	bl	80050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 8001d5a:	e00a      	b.n	8001d72 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_DISABLE_ASSER_ORIENTATION:
					REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f003 f99f 	bl	80050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
					break;
 8001d62:	e006      	b.n	8001d72 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_START_TRANSFER:
					DATA_LOGGER_Start();
 8001d64:	f7ff fe58 	bl	8001a18 <DATA_LOGGER_Start>
					break;
 8001d68:	e003      	b.n	8001d72 <DATA_LOGGER_Reception+0x11e>
				case DATA_ID_STOP_TRANSFER:
					DATA_LOGGER_Stop();
 8001d6a:	f7ff fe61 	bl	8001a30 <DATA_LOGGER_Stop>
					break;
 8001d6e:	e000      	b.n	8001d72 <DATA_LOGGER_Reception+0x11e>
					break;
 8001d70:	bf00      	nop
			}
			break;
 8001d72:	e000      	b.n	8001d76 <DATA_LOGGER_Reception+0x122>
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			break;
		default:
			break;
 8001d74:	bf00      	nop

	}
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20001ea8 	.word	0x20001ea8
 8001d84:	20002348 	.word	0x20002348

08001d88 <DATA_LOGGER_Get_Data_Value>:

uint8_t DATA_LOGGER_Get_Data_Value(data_id_e id, uint8_t * buffer){
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	73fb      	strb	r3, [r7, #15]

//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	82fb      	strh	r3, [r7, #22]
	float tmp_float = 0;
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]

	//Premier octet contient l'id
	buffer[0] = id ;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	701a      	strb	r2, [r3, #0]

	//Formatage de la donnée en fonction du type et du format
	switch(data_list[id].format){
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	498f      	ldr	r1, [pc, #572]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	440b      	add	r3, r1
 8001db2:	3309      	adds	r3, #9
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3b14      	subs	r3, #20
 8001db8:	2b19      	cmp	r3, #25
 8001dba:	f200 80fb 	bhi.w	8001fb4 <DATA_LOGGER_Get_Data_Value+0x22c>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <DATA_LOGGER_Get_Data_Value+0x3c>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e2d 	.word	0x08001e2d
 8001dc8:	08001fb5 	.word	0x08001fb5
 8001dcc:	08001fb5 	.word	0x08001fb5
 8001dd0:	08001e49 	.word	0x08001e49
 8001dd4:	08001fb5 	.word	0x08001fb5
 8001dd8:	08001fb5 	.word	0x08001fb5
 8001ddc:	08001fb5 	.word	0x08001fb5
 8001de0:	08001fb5 	.word	0x08001fb5
 8001de4:	08001fb5 	.word	0x08001fb5
 8001de8:	08001fb5 	.word	0x08001fb5
 8001dec:	08001fb5 	.word	0x08001fb5
 8001df0:	08001fb5 	.word	0x08001fb5
 8001df4:	08001fb5 	.word	0x08001fb5
 8001df8:	08001fb5 	.word	0x08001fb5
 8001dfc:	08001fb5 	.word	0x08001fb5
 8001e00:	08001fb5 	.word	0x08001fb5
 8001e04:	08001fb5 	.word	0x08001fb5
 8001e08:	08001fb5 	.word	0x08001fb5
 8001e0c:	08001fb5 	.word	0x08001fb5
 8001e10:	08001fb5 	.word	0x08001fb5
 8001e14:	08001fb5 	.word	0x08001fb5
 8001e18:	08001e79 	.word	0x08001e79
 8001e1c:	08001ec1 	.word	0x08001ec1
 8001e20:	08001f09 	.word	0x08001f09
 8001e24:	08001f51 	.word	0x08001f51
 8001e28:	08001f83 	.word	0x08001f83
		case DATA_FORMAT_8B:
			buffer[1] = *data_list[id].data ;
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	496d      	ldr	r1, [pc, #436]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3301      	adds	r3, #1
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	701a      	strb	r2, [r3, #0]
			break;
 8001e46:	e0b6      	b.n	8001fb6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_8B_PWM:
			break;
		case DATA_FORMAT_8B_FLOAT_0D:
			tmp_float = *(float*)data_list[id].data ;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	4966      	ldr	r1, [pc, #408]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3304      	adds	r3, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	613b      	str	r3, [r7, #16]
			buffer[1] = (int8_t)tmp_float;
 8001e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e66:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e6a:	793b      	ldrb	r3, [r7, #4]
 8001e6c:	b25a      	sxtb	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	701a      	strb	r2, [r3, #0]
			break;
 8001e76:	e09e      	b.n	8001fb6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_8B_FLOAT_1D:
			break;
		case DATA_FORMAT_16B:
			break;
		case DATA_FORMAT_16B_FLOAT_1D:
			tmp_float = *(float*)data_list[id].data;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	495a      	ldr	r1, [pc, #360]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	440b      	add	r3, r1
 8001e86:	3304      	adds	r3, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 10;
 8001e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e9e:	ee17 3a90 	vmov	r3, s15
 8001ea2:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001ea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ea8:	121b      	asrs	r3, r3, #8
 8001eaa:	b21a      	sxth	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	8afa      	ldrh	r2, [r7, #22]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]
			break;
 8001ebe:	e07a      	b.n	8001fb6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_FLOAT_2D:
			tmp_float = *(float*)data_list[id].data;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	4948      	ldr	r1, [pc, #288]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	3304      	adds	r3, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 100;
 8001ed6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eda:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001fe8 <DATA_LOGGER_Get_Data_Value+0x260>
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee6:	ee17 3a90 	vmov	r3, s15
 8001eea:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001eec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ef0:	121b      	asrs	r3, r3, #8
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3302      	adds	r3, #2
 8001f00:	8afa      	ldrh	r2, [r7, #22]
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	701a      	strb	r2, [r3, #0]
			break;
 8001f06:	e056      	b.n	8001fb6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	4936      	ldr	r1, [pc, #216]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3304      	adds	r3, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	613b      	str	r3, [r7, #16]
			tmp_16 = tmp_float * 1000;
 8001f1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f22:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001fec <DATA_LOGGER_Get_Data_Value+0x264>
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
 8001f32:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001f34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f38:	121b      	asrs	r3, r3, #8
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3302      	adds	r3, #2
 8001f48:	8afa      	ldrh	r2, [r7, #22]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]
			break;
 8001f4e:	e032      	b.n	8001fb6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_UINT16:
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	4924      	ldr	r1, [pc, #144]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3304      	adds	r3, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001f66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f6a:	121b      	asrs	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3302      	adds	r3, #2
 8001f7a:	8afa      	ldrh	r2, [r7, #22]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	701a      	strb	r2, [r3, #0]
			break;
 8001f80:	e019      	b.n	8001fb6 <DATA_LOGGER_Get_Data_Value+0x22e>
		case DATA_FORMAT_16B_INT16:
			tmp_16 = *(int16_t*)data_list[id].data ;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	4917      	ldr	r1, [pc, #92]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	3304      	adds	r3, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	82fb      	strh	r3, [r7, #22]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001f98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f9c:	121b      	asrs	r3, r3, #8
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	701a      	strb	r2, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3302      	adds	r3, #2
 8001fac:	8afa      	ldrh	r2, [r7, #22]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]
			break;
 8001fb2:	e000      	b.n	8001fb6 <DATA_LOGGER_Get_Data_Value+0x22e>
		default:
			break;
 8001fb4:	bf00      	nop
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <DATA_LOGGER_Get_Data_Value+0x25c>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3309      	adds	r3, #9
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <DATA_LOGGER_Get_Data_Value+0x268>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2db      	uxtb	r3, r3

}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20001ea8 	.word	0x20001ea8
 8001fe8:	42c80000 	.word	0x42c80000
 8001fec:	447a0000 	.word	0x447a0000
 8001ff0:	cccccccd 	.word	0xcccccccd

08001ff4 <DATA_LOGGER_Get_Data_Config>:

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
	//New data so we start with 255
	buffer[0] = 255;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	22ff      	movs	r2, #255	; 0xff
 8002004:	701a      	strb	r2, [r3, #0]
	//Then name len
	buffer[1] = data_list[id].len_name;
 8002006:	79fa      	ldrb	r2, [r7, #7]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	1c59      	adds	r1, r3, #1
 800200c:	481f      	ldr	r0, [pc, #124]	; (800208c <DATA_LOGGER_Get_Data_Config+0x98>)
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4403      	add	r3, r0
 8002018:	3310      	adds	r3, #16
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	700b      	strb	r3, [r1, #0]
	//Then format
	buffer[2] = data_list[id].format ;
 800201e:	79fa      	ldrb	r2, [r7, #7]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	1c99      	adds	r1, r3, #2
 8002024:	4819      	ldr	r0, [pc, #100]	; (800208c <DATA_LOGGER_Get_Data_Config+0x98>)
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4403      	add	r3, r0
 8002030:	3309      	adds	r3, #9
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	700b      	strb	r3, [r1, #0]
	//Taille du nom
	buffer[3] = id	 ;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3303      	adds	r3, #3
 800203a:	79fa      	ldrb	r2, [r7, #7]
 800203c:	701a      	strb	r2, [r3, #0]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	1d18      	adds	r0, r3, #4
 8002042:	79fa      	ldrb	r2, [r7, #7]
 8002044:	4911      	ldr	r1, [pc, #68]	; (800208c <DATA_LOGGER_Get_Data_Config+0x98>)
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	330c      	adds	r3, #12
 8002052:	681c      	ldr	r4, [r3, #0]
 8002054:	79fa      	ldrb	r2, [r7, #7]
 8002056:	490d      	ldr	r1, [pc, #52]	; (800208c <DATA_LOGGER_Get_Data_Config+0x98>)
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	3310      	adds	r3, #16
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	4621      	mov	r1, r4
 800206a:	f00e fac1 	bl	80105f0 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	4906      	ldr	r1, [pc, #24]	; (800208c <DATA_LOGGER_Get_Data_Config+0x98>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	3310      	adds	r3, #16
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	3304      	adds	r3, #4
 8002082:	b2db      	uxtb	r3, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	20001ea8 	.word	0x20001ea8

08002090 <DATA_LOGGER_Get_Data>:

data_t * DATA_LOGGER_Get_Data(data_id_e id){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
	return &data_list[id];
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4a03      	ldr	r2, [pc, #12]	; (80020b4 <DATA_LOGGER_Get_Data+0x24>)
 80020a6:	4413      	add	r3, r2
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	20001ea8 	.word	0x20001ea8

080020b8 <angle_180>:
static float absolu(float x);
//static float acc_correction(float x);
static float angle_180(float x);


static float angle_180(float x){
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x > 180)
 80020c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020c6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800211c <angle_180+0x64>
 80020ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	dd08      	ble.n	80020e6 <angle_180+0x2e>
		x -= 360;
 80020d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002120 <angle_180+0x68>
 80020dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020e0:	edc7 7a01 	vstr	s15, [r7, #4]
 80020e4:	e010      	b.n	8002108 <angle_180+0x50>
	else if( x < -180)
 80020e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002124 <angle_180+0x6c>
 80020ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	d507      	bpl.n	8002108 <angle_180+0x50>
		x += 360 ;
 80020f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020fc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002120 <angle_180+0x68>
 8002100:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002104:	edc7 7a01 	vstr	s15, [r7, #4]
	return x ;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	ee07 3a90 	vmov	s15, r3
}
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	43340000 	.word	0x43340000
 8002120:	43b40000 	.word	0x43b40000
 8002124:	c3340000 	.word	0xc3340000

08002128 <absolu>:

static float absolu(float x){
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( x > 0)
 8002132:	edd7 7a01 	vldr	s15, [r7, #4]
 8002136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213e:	dd02      	ble.n	8002146 <absolu+0x1e>
		return x ;
 8002140:	edd7 7a01 	vldr	s15, [r7, #4]
 8002144:	e003      	b.n	800214e <absolu+0x26>
	else
		return -x ;
 8002146:	edd7 7a01 	vldr	s15, [r7, #4]
 800214a:	eef1 7a67 	vneg.f32	s15, s15
}
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <ORIENTATION_Init>:
//static float acc_correction(float x){
//	x = ( x > 0) ? 180 - x : -180 -x ;
//	return x ;
//}

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
	//Link data structures
	orientation->acc = acc ;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
	orientation->gyro = gyro ;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	621a      	str	r2, [r3, #32]
	orientation->angular_velocity = gyro->filtered ;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f103 0208 	add.w	r2, r3, #8
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	60da      	str	r2, [r3, #12]

	//Configure our frequency
	orientation->frequency = frequency ;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	629a      	str	r2, [r3, #40]	; 0x28
	orientation->periode = (float)1 / (float)frequency ;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	orientation->alpha = ORIENTATION_ALPHA ;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <ORIENTATION_Init+0x84>)
 80021a2:	631a      	str	r2, [r3, #48]	; 0x30

	//Init our values to zero
	for(int x = 0; x < 3; x++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e011      	b.n	80021ce <ORIENTATION_Init+0x72>
	{
		orientation->angular_position[x] = 0 ;
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
		orientation->angular_velocity[x] = 0 ;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < 3; x++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	ddea      	ble.n	80021aa <ORIENTATION_Init+0x4e>
	}

}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	3f7f7cee 	.word	0x3f7f7cee

080021e4 <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	//Just to make the code shorter
	acc_t * acc = orientation->acc ;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
	gyro_t * gyro = orientation->gyro ;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	623b      	str	r3, [r7, #32]

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ORIENTATION_ROLL] * acc->filtered[ORIENTATION_ROLL] ;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	edd3 7a02 	vldr	s15, [r3, #8]
 8002204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002208:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ORIENTATION_PITCH] * acc->filtered[ORIENTATION_PITCH] ;
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	edd3 7a03 	vldr	s15, [r3, #12]
 8002218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002224:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total += acc->filtered[ORIENTATION_YAW] * acc->filtered[ORIENTATION_YAW] ;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	ed93 7a04 	vldr	s14, [r3, #16]
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	edd3 7a04 	vldr	s15, [r3, #16]
 8002234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002238:	ed97 7a07 	vldr	s14, [r7, #28]
 800223c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002240:	edc7 7a07 	vstr	s15, [r7, #28]
	acc_total = sqrtf(acc_total);
 8002244:	ed97 0a07 	vldr	s0, [r7, #28]
 8002248:	f011 f86c 	bl	8013324 <sqrtf>
 800224c:	ed87 0a07 	vstr	s0, [r7, #28]

	if(acc_total)	//To avoid /0
 8002250:	edd7 7a07 	vldr	s15, [r7, #28]
 8002254:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225c:	d049      	beq.n	80022f2 <ORIENTATION_Update+0x10e>
	{
		if(absolu(acc->filtered[ORIENTATION_ROLL]) < acc_total)	//To avoid asin x with x greater than 1
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	edd3 7a02 	vldr	s15, [r3, #8]
 8002264:	eeb0 0a67 	vmov.f32	s0, s15
 8002268:	f7ff ff5e 	bl	8002128 <absolu>
 800226c:	eeb0 7a40 	vmov.f32	s14, s0
 8002270:	edd7 7a07 	vldr	s15, [r7, #28]
 8002274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227c:	dd15      	ble.n	80022aa <ORIENTATION_Update+0xc6>
			orientation->acc_angles[ORIENTATION_PITCH] = -asinf(acc->filtered[ORIENTATION_ROLL] / acc_total) * 57.32f;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	ed93 7a02 	vldr	s14, [r3, #8]
 8002284:	edd7 7a07 	vldr	s15, [r7, #28]
 8002288:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800228c:	eeb0 0a66 	vmov.f32	s0, s13
 8002290:	f010 fe8c 	bl	8012fac <asinf>
 8002294:	eef0 7a40 	vmov.f32	s15, s0
 8002298:	eef1 7a67 	vneg.f32	s15, s15
 800229c:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002484 <ORIENTATION_Update+0x2a0>
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a05 	vstr	s15, [r3, #20]
		if(absolu(acc->filtered[ORIENTATION_PITCH]) < acc_total) 	//To avoid asin x with x greater than 1
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80022b0:	eeb0 0a67 	vmov.f32	s0, s15
 80022b4:	f7ff ff38 	bl	8002128 <absolu>
 80022b8:	eeb0 7a40 	vmov.f32	s14, s0
 80022bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c8:	dd13      	ble.n	80022f2 <ORIENTATION_Update+0x10e>
			orientation->acc_angles[ORIENTATION_ROLL] = asinf(acc->filtered[ORIENTATION_PITCH] / acc_total) * 57.32f;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80022d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80022d4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022d8:	eeb0 0a66 	vmov.f32	s0, s13
 80022dc:	f010 fe66 	bl	8012fac <asinf>
 80022e0:	eeb0 7a40 	vmov.f32	s14, s0
 80022e4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8002484 <ORIENTATION_Update+0x2a0>
 80022e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	edc3 7a04 	vstr	s15, [r3, #16]
//			orientation->acc_angles[ACC_AXE_Y] = acc_correction(orientation->acc_angles[ACC_AXE_Y]);
//		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <ORIENTATION_Update+0x2a4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00f      	beq.n	800231a <ORIENTATION_Update+0x136>
	{
		orientation->angular_position[ORIENTATION_ROLL] = orientation->acc_angles[ORIENTATION_ROLL] ;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->acc_angles[ORIENTATION_PITCH] ;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	605a      	str	r2, [r3, #4]
		orientation->angular_position[ORIENTATION_YAW] = 0 ;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
		first_use = FALSE ;
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <ORIENTATION_Update+0x2a4>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_PITCH];



	}
}
 8002318:	e0af      	b.n	800247a <ORIENTATION_Update+0x296>
		float dx = gyro->filtered[ORIENTATION_ROLL] * orientation->periode ;
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	edc7 7a06 	vstr	s15, [r7, #24]
		float dy = gyro->filtered[ORIENTATION_PITCH] * orientation->periode ;
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	ed93 7a03 	vldr	s14, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a05 	vstr	s15, [r7, #20]
		float dz = gyro->filtered[ORIENTATION_YAW] * orientation->periode ;
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	ed93 7a04 	vldr	s14, [r3, #16]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002352:	edc7 7a04 	vstr	s15, [r7, #16]
		orientation->angular_position[ORIENTATION_ROLL] += dx ;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	ed93 7a00 	vldr	s14, [r3]
 800235c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] += dy ;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002370:	edd7 7a05 	vldr	s15, [r7, #20]
 8002374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_YAW] += dz ;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	ed93 7a02 	vldr	s14, [r3, #8]
 8002384:	edd7 7a04 	vldr	s15, [r7, #16]
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	edc3 7a02 	vstr	s15, [r3, #8]
		float sin_dz = sinf(0.01745329251f * dz);
 8002392:	edd7 7a04 	vldr	s15, [r7, #16]
 8002396:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800248c <ORIENTATION_Update+0x2a8>
 800239a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239e:	eeb0 0a67 	vmov.f32	s0, s15
 80023a2:	f010 fdc1 	bl	8012f28 <sinf>
 80023a6:	ed87 0a03 	vstr	s0, [r7, #12]
		orientation->angular_position[ORIENTATION_ROLL] += sin_dz * orientation->angular_position[ORIENTATION_PITCH] ;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	ed93 7a00 	vldr	s14, [r3]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80023b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] -= sin_dz * orientation->angular_position[ORIENTATION_ROLL] ;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	edd3 6a00 	vldr	s13, [r3]
 80023d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80023d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_ROLL] = angle_180(orientation->angular_position[ORIENTATION_ROLL]);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	eeb0 0a67 	vmov.f32	s0, s15
 80023f0:	f7ff fe62 	bl	80020b8 <angle_180>
 80023f4:	eef0 7a40 	vmov.f32	s15, s0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] = angle_180(orientation->angular_position[ORIENTATION_PITCH]);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	edd3 7a01 	vldr	s15, [r3, #4]
 8002404:	eeb0 0a67 	vmov.f32	s0, s15
 8002408:	f7ff fe56 	bl	80020b8 <angle_180>
 800240c:	eef0 7a40 	vmov.f32	s15, s0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a01 	vstr	s15, [r3, #4]
		orientation->angular_position[ORIENTATION_ROLL] = orientation->alpha * orientation->angular_position[ORIENTATION_ROLL] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_ROLL];
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800242c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002430:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	edd3 7a04 	vldr	s15, [r3, #16]
 800243a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	edc3 7a00 	vstr	s15, [r3]
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_PITCH];
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	edd3 7a01 	vldr	s15, [r3, #4]
 8002454:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800245e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002462:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	edd3 7a05 	vldr	s15, [r3, #20]
 800246c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	; 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	426547ae 	.word	0x426547ae
 8002488:	20000254 	.word	0x20000254
 800248c:	3c8efa35 	.word	0x3c8efa35

08002490 <POSITION_Init>:

#define ALPHA 0.08f
#define BETA 0.001f
#define GAMMA 0.5f

void POSITION_Init(position_t * position, orientation_t * orientation, acc_t * acc, baro_t * baro, int32_t frequency){
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]

	//Links to recquired data structures
	position->orientation = orientation ;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
	position->acc = acc ;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28
	position->baro = baro;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
	position->acceleration_drone = acc->filtered ;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f103 0208 	add.w	r2, r3, #8
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

	//Configure our frequency
	position->frequency = frequency ;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a3a      	ldr	r2, [r7, #32]
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
	position->periode = (float)1 / (float)frequency ;
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	position->periode_squared = position->periode * position->periode ;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c



	//Init our values to zero
	for(int axe = 0; axe < 3; axe++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e01a      	b.n	800252a <POSITION_Init+0x9a>
	{
		position->position[axe] = 0 ;
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
		position->velocity[axe] = 0 ;
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3302      	adds	r3, #2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3304      	adds	r3, #4
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
		position->acceleration[axe] = 0;
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3306      	adds	r3, #6
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
	for(int axe = 0; axe < 3; axe++)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b02      	cmp	r3, #2
 800252e:	dde1      	ble.n	80024f4 <POSITION_Init+0x64>
	}
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	0000      	movs	r0, r0
	...

08002540 <POSITION_Update>:

void POSITION_Update(position_t * position){
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b08b      	sub	sp, #44	; 0x2c
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	//Projette l'accélération du drone dans le "repère de la terre"
	float sin_alpha = sinf(position->orientation->angular_position[ORIENTATION_ROLL] * 0.01745329251f);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002830 <POSITION_Update+0x2f0>
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002558:	eeb0 0a67 	vmov.f32	s0, s15
 800255c:	f010 fce4 	bl	8012f28 <sinf>
 8002560:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float cos_alpha = cosf(position->orientation->angular_position[ORIENTATION_ROLL] * 0.01745329251f);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002830 <POSITION_Update+0x2f0>
 8002570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002574:	eeb0 0a67 	vmov.f32	s0, s15
 8002578:	f010 fc96 	bl	8012ea8 <cosf>
 800257c:	ed87 0a08 	vstr	s0, [r7, #32]
	float sin_beta = sinf(position->orientation->angular_position[ORIENTATION_PITCH] * 0.01745329251f);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	edd3 7a01 	vldr	s15, [r3, #4]
 8002588:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002830 <POSITION_Update+0x2f0>
 800258c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002590:	eeb0 0a67 	vmov.f32	s0, s15
 8002594:	f010 fcc8 	bl	8012f28 <sinf>
 8002598:	ed87 0a07 	vstr	s0, [r7, #28]
	float cos_beta = cosf(position->orientation->angular_position[ORIENTATION_PITCH] * 0.01745329251f);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80025a4:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8002830 <POSITION_Update+0x2f0>
 80025a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	f010 fc7a 	bl	8012ea8 <cosf>
 80025b4:	ed87 0a06 	vstr	s0, [r7, #24]

	float acc_x = position->acc->filtered[ORIENTATION_ROLL];
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	617b      	str	r3, [r7, #20]
	float acc_y = position->acc->filtered[ORIENTATION_PITCH];
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	613b      	str	r3, [r7, #16]
	float acc_z = position->acc->filtered[ORIENTATION_YAW];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	60fb      	str	r3, [r7, #12]

	//Equations :
	// https://fr.wikipedia.org/wiki/Matrice_de_rotation
	// https://photos.google.com/photo/AF1QipPC2YkgS1dSJ5Y0lUlfNZ84SxoZOmHYG-Z7rT-n

	position->acceleration[POSITION_AXE_X] = acc_x * cos_beta + sin_beta * (sin_alpha * acc_y + cos_alpha * acc_z) ;
 80025d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80025d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80025d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025dc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80025e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025e8:	ed97 6a08 	vldr	s12, [r7, #32]
 80025ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80025fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	edc3 7a06 	vstr	s15, [r3, #24]
	position->acceleration[POSITION_AXE_Y] = acc_y * sin_beta - acc_z * sin_alpha ;
 800260a:	ed97 7a04 	vldr	s14, [r7, #16]
 800260e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002616:	edd7 6a03 	vldr	s13, [r7, #12]
 800261a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800261e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	edc3 7a07 	vstr	s15, [r3, #28]
	position->acceleration[POSITION_AXE_Z] = ( cos_beta * (sin_alpha * acc_y + cos_alpha * acc_z) - acc_x * sin_beta ) - 1 ; //Minus to compensate the gravity
 800262c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002630:	edd7 7a04 	vldr	s15, [r7, #16]
 8002634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002638:	edd7 6a08 	vldr	s13, [r7, #32]
 800263c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 7a06 	vldr	s15, [r7, #24]
 800264c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002650:	edd7 6a05 	vldr	s13, [r7, #20]
 8002654:	edd7 7a07 	vldr	s15, [r7, #28]
 8002658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	edc3 7a08 	vstr	s15, [r3, #32]

	//From acceleration in g to m/s²
	position->acceleration[POSITION_AXE_X] *= 9.81 ;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff68 	bl	8000548 <__aeabi_f2d>
 8002678:	a36b      	add	r3, pc, #428	; (adr r3, 8002828 <POSITION_Update+0x2e8>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fd ffbb 	bl	80005f8 <__aeabi_dmul>
 8002682:	4603      	mov	r3, r0
 8002684:	460c      	mov	r4, r1
 8002686:	4618      	mov	r0, r3
 8002688:	4621      	mov	r1, r4
 800268a:	f7fe fa8d 	bl	8000ba8 <__aeabi_d2f>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	619a      	str	r2, [r3, #24]
	position->acceleration[POSITION_AXE_Y] *= 9.81 ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd ff55 	bl	8000548 <__aeabi_f2d>
 800269e:	a362      	add	r3, pc, #392	; (adr r3, 8002828 <POSITION_Update+0x2e8>)
 80026a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a4:	f7fd ffa8 	bl	80005f8 <__aeabi_dmul>
 80026a8:	4603      	mov	r3, r0
 80026aa:	460c      	mov	r4, r1
 80026ac:	4618      	mov	r0, r3
 80026ae:	4621      	mov	r1, r4
 80026b0:	f7fe fa7a 	bl	8000ba8 <__aeabi_d2f>
 80026b4:	4602      	mov	r2, r0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	61da      	str	r2, [r3, #28]
	position->acceleration[POSITION_AXE_Z] *= 9.81 ;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd ff42 	bl	8000548 <__aeabi_f2d>
 80026c4:	a358      	add	r3, pc, #352	; (adr r3, 8002828 <POSITION_Update+0x2e8>)
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	f7fd ff95 	bl	80005f8 <__aeabi_dmul>
 80026ce:	4603      	mov	r3, r0
 80026d0:	460c      	mov	r4, r1
 80026d2:	4618      	mov	r0, r3
 80026d4:	4621      	mov	r1, r4
 80026d6:	f7fe fa67 	bl	8000ba8 <__aeabi_d2f>
 80026da:	4602      	mov	r2, r0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	621a      	str	r2, [r3, #32]


	//Alpha beta gamma filter to estimate the altitude

	//We need our first measurement to init the filter
	if(!position->alti_is_init)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d113      	bne.n	8002710 <POSITION_Update+0x1d0>
	{
		if(EVENT_Check_flag(FLAG_BARO_ALTITUDE_RDY)){
 80026e8:	200c      	movs	r0, #12
 80026ea:	f001 f8d3 	bl	8003894 <EVENT_Check_flag>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8094 	beq.w	800281e <POSITION_Update+0x2de>
			position->position[POSITION_AXE_Z] = *position->baro->altitude;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
			position->alti_is_init = TRUE ;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
			EVENT_Clean_flag(FLAG_BARO_ALTITUDE_RDY);
 8002708:	200c      	movs	r0, #12
 800270a:	f001 f8f5 	bl	80038f8 <EVENT_Clean_flag>





}
 800270e:	e086      	b.n	800281e <POSITION_Update+0x2de>
		if(EVENT_Check_flag(FLAG_BARO_ALTITUDE_RDY)){
 8002710:	200c      	movs	r0, #12
 8002712:	f001 f8bf 	bl	8003894 <EVENT_Check_flag>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d032      	beq.n	8002782 <POSITION_Update+0x242>
			float measurement = *position->baro->altitude;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60bb      	str	r3, [r7, #8]
			EVENT_Clean_flag(FLAG_BARO_ALTITUDE_RDY);
 8002726:	200c      	movs	r0, #12
 8002728:	f001 f8e6 	bl	80038f8 <EVENT_Clean_flag>
			position->position[POSITION_AXE_Z] = position->position_guess[POSITION_AXE_Z] + ALPHA * (measurement - position->position_guess[POSITION_AXE_Z]);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002738:	edd7 6a02 	vldr	s13, [r7, #8]
 800273c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002740:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8002834 <POSITION_Update+0x2f4>
 8002744:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	edc3 7a02 	vstr	s15, [r3, #8]
			position->velocity[POSITION_AXE_Z] = position->velocity_guess[POSITION_AXE_Z] + BETA * ((measurement - position->position_guess[POSITION_AXE_Z])/0.01f);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800275e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002762:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002766:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8002838 <POSITION_Update+0x2f8>
 800276a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800276e:	eddf 6a33 	vldr	s13, [pc, #204]	; 800283c <POSITION_Update+0x2fc>
 8002772:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	edc3 7a05 	vstr	s15, [r3, #20]
 8002780:	e007      	b.n	8002792 <POSITION_Update+0x252>
			position->position[POSITION_AXE_Z] = position->position_guess[POSITION_AXE_Z] ;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	609a      	str	r2, [r3, #8]
			position->velocity[POSITION_AXE_Z] = position->velocity_guess[POSITION_AXE_Z] ;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	615a      	str	r2, [r3, #20]
		position->acceleration[POSITION_AXE_Z] = position->acceleration_guess[POSITION_AXE_Z] + GAMMA * (position->acceleration[POSITION_AXE_Z] - position->acceleration_guess[POSITION_AXE_Z]);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	edd3 6a08 	vldr	s13, [r3, #32]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80027a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027a8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80027ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edc3 7a08 	vstr	s15, [r3, #32]
		position->position_guess[POSITION_AXE_Z] = position->position[POSITION_AXE_Z] + (position->velocity[POSITION_AXE_Z]  + position->acceleration[POSITION_AXE_Z] * 0.5f * position->periode) * position->periode ;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 6a05 	vldr	s13, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80027cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80027d0:	ee27 6a86 	vmul.f32	s12, s15, s12
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80027da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80027e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		position->velocity_guess[POSITION_AXE_Z] = position->velocity[POSITION_AXE_Z] + position->acceleration[POSITION_AXE_Z] * position->periode ;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7a05 	vldr	s14, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 6a08 	vldr	s13, [r3, #32]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		position->acceleration_guess[POSITION_AXE_Z] = position->acceleration[POSITION_AXE_Z];
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800281e:	bf00      	nop
 8002820:	372c      	adds	r7, #44	; 0x2c
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
 8002826:	bf00      	nop
 8002828:	51eb851f 	.word	0x51eb851f
 800282c:	40239eb8 	.word	0x40239eb8
 8002830:	3c8efa35 	.word	0x3c8efa35
 8002834:	3da3d70a 	.word	0x3da3d70a
 8002838:	3c23d70a 	.word	0x3c23d70a
 800283c:	3a83126f 	.word	0x3a83126f

08002840 <arming_entrance>:
static state_arming_e state = 0;
static uint8_t state_vroum_vroum = 0;
static uint32_t next_change = 0 ;
static float elapsed = 0 ;

void arming_entrance(system_t * sys){
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8002848:	2000      	movs	r0, #0
 800284a:	f002 fc29 	bl	80050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 800284e:	2001      	movs	r0, #1
 8002850:	f002 fd98 	bl	8005384 <REGULATION_POSITION_Set_Regulation_Mode>
	sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2228      	movs	r2, #40	; 0x28
 8002858:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_10, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 800285c:	2300      	movs	r3, #0
 800285e:	2200      	movs	r2, #0
 8002860:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002864:	2000      	movs	r0, #0
 8002866:	f000 fbd9 	bl	800301c <IHM_Set_Sequences>
	state = ARMING_THROTTLE_LOW ;
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <arming_entrance+0x40>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
	state_vroum_vroum= 0 ;
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <arming_entrance+0x44>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000236c 	.word	0x2000236c
 8002884:	2000236d 	.word	0x2000236d

08002888 <arming_main>:

void arming_main(system_t * sys, uint32_t time_us){
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]



	switch(state){
 8002892:	4b7b      	ldr	r3, [pc, #492]	; (8002a80 <arming_main+0x1f8>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d019      	beq.n	80028ce <arming_main+0x46>
 800289a:	2b02      	cmp	r3, #2
 800289c:	d036      	beq.n	800290c <arming_main+0x84>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d000      	beq.n	80028a4 <arming_main+0x1c>
				default:
					break;
			}
			break;
	}
}
 80028a2:	e0e8      	b.n	8002a76 <arming_main+0x1ee>
			if(sys->radio.controller.channels[2]<1100){
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 80028aa:	3304      	adds	r3, #4
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	f240 424b 	movw	r2, #1099	; 0x44b
 80028b2:	4293      	cmp	r3, r2
 80028b4:	f200 80dc 	bhi.w	8002a70 <arming_main+0x1e8>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_11, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 80028b8:	2300      	movs	r3, #0
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 80028c0:	2000      	movs	r0, #0
 80028c2:	f000 fbab 	bl	800301c <IHM_Set_Sequences>
				state = ARMING_STICK_ON_THE_RIGHT;
 80028c6:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <arming_main+0x1f8>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
			break;
 80028cc:	e0d0      	b.n	8002a70 <arming_main+0x1e8>
			if(sys->radio.controller.channels[3]>1950 && sys->radio.controller.channels[2]<1100){
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 80028d4:	3306      	adds	r3, #6
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	f240 729e 	movw	r2, #1950	; 0x79e
 80028dc:	4293      	cmp	r3, r2
 80028de:	f240 80c9 	bls.w	8002a74 <arming_main+0x1ec>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 80028e8:	3304      	adds	r3, #4
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	f240 424b 	movw	r2, #1099	; 0x44b
 80028f0:	4293      	cmp	r3, r2
 80028f2:	f200 80bf 	bhi.w	8002a74 <arming_main+0x1ec>
				IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_ON, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF);
 80028f6:	2300      	movs	r3, #0
 80028f8:	2200      	movs	r2, #0
 80028fa:	f640 71ff 	movw	r1, #4095	; 0xfff
 80028fe:	2000      	movs	r0, #0
 8002900:	f000 fb8c 	bl	800301c <IHM_Set_Sequences>
				state = ARMING_VROUM_VOUM;
 8002904:	4b5e      	ldr	r3, [pc, #376]	; (8002a80 <arming_main+0x1f8>)
 8002906:	2202      	movs	r2, #2
 8002908:	701a      	strb	r2, [r3, #0]
			break;
 800290a:	e0b3      	b.n	8002a74 <arming_main+0x1ec>
			switch(state_vroum_vroum){
 800290c:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <arming_main+0x1fc>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b04      	cmp	r3, #4
 8002912:	f200 80a3 	bhi.w	8002a5c <arming_main+0x1d4>
 8002916:	a201      	add	r2, pc, #4	; (adr r2, 800291c <arming_main+0x94>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	08002931 	.word	0x08002931
 8002920:	08002955 	.word	0x08002955
 8002924:	080029e3 	.word	0x080029e3
 8002928:	08002a11 	.word	0x08002a11
 800292c:	08002a3f 	.word	0x08002a3f
					next_change = time_us + PERIODE_1;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f503 23c3 	add.w	r3, r3, #399360	; 0x61800
 8002936:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800293a:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <arming_main+0x200>)
 800293c:	6013      	str	r3, [r2, #0]
					sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	22c8      	movs	r2, #200	; 0xc8
 8002942:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
					state_vroum_vroum++;
 8002946:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <arming_main+0x1fc>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <arming_main+0x1fc>)
 8002950:	701a      	strb	r2, [r3, #0]
					break;
 8002952:	e08c      	b.n	8002a6e <arming_main+0x1e6>
					elapsed = (float)time_us - (float)(next_change-PERIODE_1);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <arming_main+0x200>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f5a3 23c3 	sub.w	r3, r3, #399360	; 0x61800
 8002966:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002976:	4b45      	ldr	r3, [pc, #276]	; (8002a8c <arming_main+0x204>)
 8002978:	edc3 7a00 	vstr	s15, [r3]
					elapsed /= (float)PERIODE_1;
 800297c:	4b43      	ldr	r3, [pc, #268]	; (8002a8c <arming_main+0x204>)
 800297e:	ed93 7a00 	vldr	s14, [r3]
 8002982:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002a90 <arming_main+0x208>
 8002986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298a:	4b40      	ldr	r3, [pc, #256]	; (8002a8c <arming_main+0x204>)
 800298c:	edc3 7a00 	vstr	s15, [r3]
					sys->regulation.position.consigne = MOTORS_LOW_POWER + (uint32_t)((float)(MOTORS_HIGH_POWER - MOTORS_LOW_POWER) * elapsed);
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <arming_main+0x204>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002a94 <arming_main+0x20c>
 800299a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a2:	ee17 3a90 	vmov	r3, s15
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3328      	adds	r3, #40	; 0x28
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
					if(time_us > next_change){
 80029b4:	4b34      	ldr	r3, [pc, #208]	; (8002a88 <arming_main+0x200>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d950      	bls.n	8002a60 <arming_main+0x1d8>
						next_change = time_us + PERIODE_2;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
 80029c4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80029c8:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <arming_main+0x200>)
 80029ca:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2228      	movs	r2, #40	; 0x28
 80029d0:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
						state_vroum_vroum++;
 80029d4:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <arming_main+0x1fc>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <arming_main+0x1fc>)
 80029de:	701a      	strb	r2, [r3, #0]
					break;
 80029e0:	e03e      	b.n	8002a60 <arming_main+0x1d8>
					if(time_us > next_change){
 80029e2:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <arming_main+0x200>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d93b      	bls.n	8002a64 <arming_main+0x1dc>
						next_change = time_us + PERIODE_3;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80029f2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <arming_main+0x200>)
 80029f8:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_HIGH_POWER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	22c8      	movs	r2, #200	; 0xc8
 80029fe:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
						state_vroum_vroum++;
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <arming_main+0x1fc>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <arming_main+0x1fc>)
 8002a0c:	701a      	strb	r2, [r3, #0]
					break;
 8002a0e:	e029      	b.n	8002a64 <arming_main+0x1dc>
					if(time_us > next_change){
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <arming_main+0x200>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d926      	bls.n	8002a68 <arming_main+0x1e0>
						next_change = time_us + PERIODE_4;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 8002a20:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002a24:	4a18      	ldr	r2, [pc, #96]	; (8002a88 <arming_main+0x200>)
 8002a26:	6013      	str	r3, [r2, #0]
						sys->regulation.position.consigne = MOTORS_LOW_POWER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2228      	movs	r2, #40	; 0x28
 8002a2c:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
						state_vroum_vroum++;
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <arming_main+0x1fc>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <arming_main+0x1fc>)
 8002a3a:	701a      	strb	r2, [r3, #0]
					break;
 8002a3c:	e014      	b.n	8002a68 <arming_main+0x1e0>
					if(time_us > next_change){
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <arming_main+0x200>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d911      	bls.n	8002a6c <arming_main+0x1e4>
						EVENT_Set_flag(FLAG_ARMED);
 8002a48:	201e      	movs	r0, #30
 8002a4a:	f000 ff3d 	bl	80038c8 <EVENT_Set_flag>
						state_vroum_vroum++;
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <arming_main+0x1fc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <arming_main+0x1fc>)
 8002a58:	701a      	strb	r2, [r3, #0]
					break;
 8002a5a:	e007      	b.n	8002a6c <arming_main+0x1e4>
					break;
 8002a5c:	bf00      	nop
 8002a5e:	e00a      	b.n	8002a76 <arming_main+0x1ee>
					break;
 8002a60:	bf00      	nop
 8002a62:	e008      	b.n	8002a76 <arming_main+0x1ee>
					break;
 8002a64:	bf00      	nop
 8002a66:	e006      	b.n	8002a76 <arming_main+0x1ee>
					break;
 8002a68:	bf00      	nop
 8002a6a:	e004      	b.n	8002a76 <arming_main+0x1ee>
					break;
 8002a6c:	bf00      	nop
			break;
 8002a6e:	e002      	b.n	8002a76 <arming_main+0x1ee>
			break;
 8002a70:	bf00      	nop
 8002a72:	e000      	b.n	8002a76 <arming_main+0x1ee>
			break;
 8002a74:	bf00      	nop
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	2000236c 	.word	0x2000236c
 8002a84:	2000236d 	.word	0x2000236d
 8002a88:	20002370 	.word	0x20002370
 8002a8c:	20002374 	.word	0x20002374
 8002a90:	48c35000 	.word	0x48c35000
 8002a94:	43200000 	.word	0x43200000

08002a98 <FLIGHT_MODE_Init>:
		[FLIGHT_MODE_GYRO_ACC_CALIBRATION] = 	DEF_FLIGHT_MODE(FLIGHT_MODE_GYRO_ACC_CALIBRATION, 		gyro_acc_calibration_entrance, 	gyro_acc_calibration_main),

};

//	-------------------------	Public functions	-------------------------
void FLIGHT_MODE_Init(system_t * sys_){
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	sys = sys_;
 8002aa0:	4a06      	ldr	r2, [pc, #24]	; (8002abc <FLIGHT_MODE_Init+0x24>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]
	sys->soft.flight_mode = &current_flight_mode;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <FLIGHT_MODE_Init+0x24>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <FLIGHT_MODE_Init+0x28>)
 8002aac:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	20002378 	.word	0x20002378
 8002ac0:	2000237c 	.word	0x2000237c

08002ac4 <FLIGHT_MODE_Set_Flight_Mode>:

//Dont call it from an it plz for now ..
void FLIGHT_MODE_Set_Flight_Mode(flight_modes_names_e new){
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
	next_flight_mode = new ;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <FLIGHT_MODE_Set_Flight_Mode+0x1c>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	7013      	strb	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	2000237d 	.word	0x2000237d

08002ae4 <FLIGHT_MODE_Main>:

void FLIGHT_MODE_Main(uint32_t time_us){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	//Check if we have to change the current flight mode
	if(next_flight_mode != current_flight_mode){
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <FLIGHT_MODE_Main+0xa0>)
 8002aee:	781a      	ldrb	r2, [r3, #0]
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <FLIGHT_MODE_Main+0xa4>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d02b      	beq.n	8002b50 <FLIGHT_MODE_Main+0x6c>

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(flights_modes[current_flight_mode].function_leave != NULL)
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <FLIGHT_MODE_Main+0xa4>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <FLIGHT_MODE_Main+0xa8>)
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	4413      	add	r3, r2
 8002b02:	330c      	adds	r3, #12
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <FLIGHT_MODE_Main+0x3c>
			flights_modes[current_flight_mode].function_leave(sys);
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <FLIGHT_MODE_Main+0xa4>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <FLIGHT_MODE_Main+0xa8>)
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4413      	add	r3, r2
 8002b14:	330c      	adds	r3, #12
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <FLIGHT_MODE_Main+0xac>)
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4798      	blx	r3

		//Call the entrance function associated to the next flight mode if it exists
		if(flights_modes[next_flight_mode].function_entrance != NULL)
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <FLIGHT_MODE_Main+0xa0>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <FLIGHT_MODE_Main+0xa8>)
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <FLIGHT_MODE_Main+0x64>
			flights_modes[next_flight_mode].function_entrance(sys);
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <FLIGHT_MODE_Main+0xa0>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <FLIGHT_MODE_Main+0xa8>)
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <FLIGHT_MODE_Main+0xac>)
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	4610      	mov	r0, r2
 8002b46:	4798      	blx	r3

		//Change the current flight mode
		current_flight_mode = next_flight_mode ;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <FLIGHT_MODE_Main+0xa0>)
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <FLIGHT_MODE_Main+0xa4>)
 8002b4e:	701a      	strb	r2, [r3, #0]
	}
	//Call the function associated to the current flight mode
	if(flights_modes[current_flight_mode].function_main != NULL)
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <FLIGHT_MODE_Main+0xa4>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <FLIGHT_MODE_Main+0xa8>)
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	4413      	add	r3, r2
 8002b5a:	3308      	adds	r3, #8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <FLIGHT_MODE_Main+0x96>
		flights_modes[current_flight_mode].function_main(sys, time_us);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <FLIGHT_MODE_Main+0xa4>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <FLIGHT_MODE_Main+0xa8>)
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <FLIGHT_MODE_Main+0xac>)
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4610      	mov	r0, r2
 8002b78:	4798      	blx	r3

}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000237d 	.word	0x2000237d
 8002b88:	2000237c 	.word	0x2000237c
 8002b8c:	20000258 	.word	0x20000258
 8002b90:	20002378 	.word	0x20002378

08002b94 <gyro_acc_calibration_entrance>:

#include "Flight_mode.h"
#include "../OS/events/events.h"
#include "../OS/events/flags.h"

void gyro_acc_calibration_entrance(system_t * sys){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
	IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_3);
 8002b9c:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	f000 fa39 	bl	800301c <IHM_Set_Sequences>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <gyro_acc_calibration_main>:
void gyro_acc_calibration_main(system_t * sys, uint32_t time_us){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
	static bool_e calibration_gyro_is_over = FALSE ;
	static bool_e calibration_acc_is_over = FALSE ;

	if(!calibration_gyro_is_over)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <gyro_acc_calibration_main+0x60>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <gyro_acc_calibration_main+0x18>
		calibration_gyro_is_over = 1;//GYRO_calibrate(&sys->sensors.gyro, 1500);
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <gyro_acc_calibration_main+0x60>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
	if(!calibration_acc_is_over)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <gyro_acc_calibration_main+0x64>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <gyro_acc_calibration_main+0x34>
		calibration_acc_is_over = ACC_calibrate(&sys->sensors.acc, 1500);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	33a4      	adds	r3, #164	; 0xa4
 8002bd8:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f002 fcab 	bl	8005538 <ACC_calibrate>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <gyro_acc_calibration_main+0x64>)
 8002be6:	601a      	str	r2, [r3, #0]

	if(calibration_gyro_is_over && calibration_acc_is_over){	//The high lvl runs at 500 HZ so 1500 by 500 => 3 secs of calibration
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <gyro_acc_calibration_main+0x60>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00d      	beq.n	8002c0c <gyro_acc_calibration_main+0x58>
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <gyro_acc_calibration_main+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d009      	beq.n	8002c0c <gyro_acc_calibration_main+0x58>
		EVENT_Set_flag(FLAG_GYRO_CALI_DONE);
 8002bf8:	2021      	movs	r0, #33	; 0x21
 8002bfa:	f000 fe65 	bl	80038c8 <EVENT_Set_flag>
		IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002c04:	2100      	movs	r1, #0
 8002c06:	2001      	movs	r0, #1
 8002c08:	f000 fa08 	bl	800301c <IHM_Set_Sequences>
	}

}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20002380 	.word	0x20002380
 8002c18:	20002384 	.word	0x20002384

08002c1c <manual_accro_entrance>:
 */


#include "Flight_mode.h"

void manual_accro_entrance(system_t * sys){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ACCRO);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f002 fa3b 	bl	80050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	f002 fbaa 	bl	8005384 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_1);
 8002c30:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f000 f9ef 	bl	800301c <IHM_Set_Sequences>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <manual_accro_main>:

void manual_accro_main(system_t * sys, uint32_t time_us){
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*1.5f;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c62:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002cfc <manual_accro_main+0xb4>
 8002c66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c6a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 8002c78:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*1.5f;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002c82:	3302      	adds	r3, #2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002cfc <manual_accro_main+0xb4>
 8002c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c96:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8002ca4:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002cae:	3306      	adds	r3, #6
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	ee07 3a90 	vmov	s15, r3
 8002cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002cfc <manual_accro_main+0xb4>
 8002cbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002cc2:	eef1 7a67 	vneg.f32	s15, s15
 8002cc6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002d00 <manual_accro_main+0xb8>
 8002cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8002cd4:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002cde:	3304      	adds	r3, #4
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	44bb8000 	.word	0x44bb8000
 8002d00:	3f99999a 	.word	0x3f99999a

08002d04 <manual_alti_auto_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_alti_auto_entrance(system_t * sys){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f002 f9c7 	bl	80050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_STABILIZED);
 8002d12:	2002      	movs	r0, #2
 8002d14:	f002 fb36 	bl	8005384 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_7, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 8002d18:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8002d22:	2000      	movs	r0, #0
 8002d24:	f000 f97a 	bl	800301c <IHM_Set_Sequences>
	sys->regulation.position.consigne_position[POSITION_AXE_Z] = sys->position.position[POSITION_AXE_Z];
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f603 33bc 	addw	r3, r3, #3004	; 0xbbc
 8002d34:	601a      	str	r2, [r3, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <manual_alti_auto_main>:
void manual_alti_auto_main(system_t * sys, uint32_t time_us){
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002d50:	3304      	adds	r3, #4
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b21a      	sxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*0.14f;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d72:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002dec <manual_alti_auto_main+0xac>
 8002d76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d7a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002df0 <manual_alti_auto_main+0xb0>
 8002d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8002d88:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*0.14f;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002d92:	3302      	adds	r3, #2
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002dec <manual_alti_auto_main+0xac>
 8002da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002da6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002df0 <manual_alti_auto_main+0xb0>
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8002db4:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.0f;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002dbe:	3306      	adds	r3, #6
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002dec <manual_alti_auto_main+0xac>
 8002dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dd2:	eef1 7a67 	vneg.f32	s15, s15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8002ddc:	edc3 7a00 	vstr	s15, [r3]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	44bb8000 	.word	0x44bb8000
 8002df0:	3e0f5c29 	.word	0x3e0f5c29

08002df4 <manual_angle_entrance>:
 *      Author: Théo
 */

#include "Flight_mode.h"

void manual_angle_entrance(system_t * sys){
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_ANGLE);
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f002 f94f 	bl	80050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_ON);
 8002e02:	2001      	movs	r0, #1
 8002e04:	f002 fabe 	bl	8005384 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_OFF, SEQUENCE_LED_7);
 8002e08:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2000      	movs	r0, #0
 8002e12:	f000 f903 	bl	800301c <IHM_Set_Sequences>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <manual_angle_main>:
void manual_angle_main(system_t * sys, uint32_t time_us){
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_ROLL] = ((float)sys->radio.controller.channels[0]-1500)*0.14f;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ed4 <manual_angle_main+0xb4>
 8002e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e42:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002ed8 <manual_angle_main+0xb8>
 8002e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8002e50:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_pos[ORIENTATION_PITCH] = ((float)sys->radio.controller.channels[1]-1500)*0.14f;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002e5a:	3302      	adds	r3, #2
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002ed4 <manual_angle_main+0xb4>
 8002e6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e6e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002ed8 <manual_angle_main+0xb8>
 8002e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 8002e7c:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.orientation.consigne_angular_speed[ORIENTATION_YAW] = -((float)sys->radio.controller.channels[3]-1500)*1.2f;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002e86:	3306      	adds	r3, #6
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002ed4 <manual_angle_main+0xb4>
 8002e96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e9a:	eef1 7a67 	vneg.f32	s15, s15
 8002e9e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002edc <manual_angle_main+0xbc>
 8002ea2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f603 33a8 	addw	r3, r3, #2984	; 0xba8
 8002eac:	edc3 7a00 	vstr	s15, [r3]
	sys->regulation.position.consigne = sys->radio.controller.channels[2]-1000;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8a3 2d94 	strh.w	r2, [r3, #3476]	; 0xd94
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	44bb8000 	.word	0x44bb8000
 8002ed8:	3e0f5c29 	.word	0x3e0f5c29
 8002edc:	3f99999a 	.word	0x3f99999a

08002ee0 <on_the_ground_entrance>:
 *  Created on: 19 déc. 2020
 *      Author: theom
 */
#include "Flight_mode.h"

void on_the_ground_entrance(system_t * sys){
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_ORIENTATION_MODE_OFF);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f002 f8d9 	bl	80050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>
	REGULATION_POSITION_Set_Regulation_Mode(REGULATION_POSITION_MODE_OFF);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f002 fa48 	bl	8005384 <REGULATION_POSITION_Set_Regulation_Mode>
	IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002efa:	2100      	movs	r1, #0
 8002efc:	2000      	movs	r0, #0
 8002efe:	f000 f88d 	bl	800301c <IHM_Set_Sequences>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <on_the_ground_main>:
void on_the_ground_main(system_t * sys, uint32_t time_us){
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <IHM_Init>:





void IHM_Init(Ihm_t * ihm_){
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	ihm = ihm_;
 8002f28:	4a04      	ldr	r2, [pc, #16]	; (8002f3c <IHM_Init+0x1c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20002388 	.word	0x20002388

08002f40 <IHM_Led_Init>:

void IHM_Led_Init(led_name_e name, uint32_t periode, uint16_t pin, led_output_logic_e output_logic){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	71fb      	strb	r3, [r7, #7]
 8002f50:	460b      	mov	r3, r1
 8002f52:	80bb      	strh	r3, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71bb      	strb	r3, [r7, #6]
	ihm->leds[name].periode = periode ;
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <IHM_Led_Init+0x80>)
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	79fa      	ldrb	r2, [r7, #7]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	330c      	adds	r3, #12
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	601a      	str	r2, [r3, #0]
	ihm->leds[name].pin = pin ;
 8002f6e:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <IHM_Led_Init+0x80>)
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	79fa      	ldrb	r2, [r7, #7]
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3310      	adds	r3, #16
 8002f80:	88ba      	ldrh	r2, [r7, #4]
 8002f82:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].output_logic = output_logic ;
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <IHM_Led_Init+0x80>)
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	79fa      	ldrb	r2, [r7, #7]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	3314      	adds	r3, #20
 8002f96:	79ba      	ldrb	r2, [r7, #6]
 8002f98:	701a      	strb	r2, [r3, #0]

	//Set the outputs low
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
 8002f9e:	e008      	b.n	8002fb2 <IHM_Led_Init+0x72>
		IHM_Set_Sequence(name, c, SEQUENCE_LED_OFF);
 8002fa0:	7bf9      	ldrb	r1, [r7, #15]
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f80c 	bl	8002fc4 <IHM_Set_Sequence>
	for(uint8_t c = 0 ; c < LED_COLOR_COUNT; c++)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d9f3      	bls.n	8002fa0 <IHM_Led_Init+0x60>
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20002388 	.word	0x20002388

08002fc4 <IHM_Set_Sequence>:

void IHM_Set_Sequence(led_name_e name, led_color_e color, uint16_t sequence){
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	71bb      	strb	r3, [r7, #6]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80bb      	strh	r3, [r7, #4]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE)
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <IHM_Set_Sequence+0x54>)
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	79fa      	ldrb	r2, [r7, #7]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d102      	bne.n	8002ff4 <IHM_Set_Sequence+0x30>
		sequence = ~sequence ;
 8002fee:	88bb      	ldrh	r3, [r7, #4]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	80bb      	strh	r3, [r7, #4]
	ihm->leds[name].seqs[color] = sequence ;
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <IHM_Set_Sequence+0x54>)
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	79fa      	ldrb	r2, [r7, #7]
 8002ffa:	79b8      	ldrb	r0, [r7, #6]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4403      	add	r3, r0
 8003006:	88ba      	ldrh	r2, [r7, #4]
 8003008:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	20002388 	.word	0x20002388

0800301c <IHM_Set_Sequences>:

void IHM_Set_Sequences(led_name_e name, uint16_t sequence_red, uint16_t sequence_green, uint16_t sequence_blue){
 800301c:	b490      	push	{r4, r7}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4604      	mov	r4, r0
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4623      	mov	r3, r4
 800302c:	71fb      	strb	r3, [r7, #7]
 800302e:	4603      	mov	r3, r0
 8003030:	80bb      	strh	r3, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	807b      	strh	r3, [r7, #2]
 8003036:	4613      	mov	r3, r2
 8003038:	803b      	strh	r3, [r7, #0]
	if(ihm->leds[name].output_logic == LED_OUTPUT_NEGATIVE){
 800303a:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <IHM_Set_Sequences+0x94>)
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	79fa      	ldrb	r2, [r7, #7]
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	3314      	adds	r3, #20
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <IHM_Set_Sequences+0x48>
		sequence_red = ~sequence_red ;
 8003052:	88bb      	ldrh	r3, [r7, #4]
 8003054:	43db      	mvns	r3, r3
 8003056:	80bb      	strh	r3, [r7, #4]
		sequence_green = ~sequence_green ;
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	43db      	mvns	r3, r3
 800305c:	807b      	strh	r3, [r7, #2]
		sequence_blue = ~sequence_blue ;
 800305e:	883b      	ldrh	r3, [r7, #0]
 8003060:	43db      	mvns	r3, r3
 8003062:	803b      	strh	r3, [r7, #0]
	}
	ihm->leds[name].seqs[LED_COLOR_RED] = sequence_red ;
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <IHM_Set_Sequences+0x94>)
 8003066:	6819      	ldr	r1, [r3, #0]
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	88ba      	ldrh	r2, [r7, #4]
 8003076:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_GREEN] = sequence_green ;
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <IHM_Set_Sequences+0x94>)
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	79fa      	ldrb	r2, [r7, #7]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3302      	adds	r3, #2
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	801a      	strh	r2, [r3, #0]
	ihm->leds[name].seqs[LED_COLOR_BLUE] = sequence_blue ;
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <IHM_Set_Sequences+0x94>)
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	79fa      	ldrb	r2, [r7, #7]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	3304      	adds	r3, #4
 80030a0:	883a      	ldrh	r2, [r7, #0]
 80030a2:	801a      	strh	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc90      	pop	{r4, r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20002388 	.word	0x20002388

080030b4 <IHM_Update>:

void IHM_Update(void){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0

	//Increment the counter each time (since we re called at 1kHz
	compteur ++ ;
 80030ba:	4b8a      	ldr	r3, [pc, #552]	; (80032e4 <IHM_Update+0x230>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a88      	ldr	r2, [pc, #544]	; (80032e4 <IHM_Update+0x230>)
 80030c2:	6013      	str	r3, [r2, #0]
	//Update the current color and the current led
	current_led = compteur % LED_COUNT ;
 80030c4:	4b87      	ldr	r3, [pc, #540]	; (80032e4 <IHM_Update+0x230>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b85      	ldr	r3, [pc, #532]	; (80032e8 <IHM_Update+0x234>)
 80030d2:	701a      	strb	r2, [r3, #0]

	//Check if we have to change the current bit
	if(compteur > ihm->leds[current_led].next_time)
 80030d4:	4b85      	ldr	r3, [pc, #532]	; (80032ec <IHM_Update+0x238>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b83      	ldr	r3, [pc, #524]	; (80032e8 <IHM_Update+0x234>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	460b      	mov	r3, r1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	440b      	add	r3, r1
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	3308      	adds	r3, #8
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b7d      	ldr	r3, [pc, #500]	; (80032e4 <IHM_Update+0x230>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d259      	bcs.n	80031a8 <IHM_Update+0xf4>
	{
		ihm->leds[current_led].current_bit >>= 1;
 80030f4:	4b7d      	ldr	r3, [pc, #500]	; (80032ec <IHM_Update+0x238>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b7b      	ldr	r3, [pc, #492]	; (80032e8 <IHM_Update+0x234>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	460b      	mov	r3, r1
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	440b      	add	r3, r1
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	3312      	adds	r3, #18
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	4a77      	ldr	r2, [pc, #476]	; (80032ec <IHM_Update+0x238>)
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	4975      	ldr	r1, [pc, #468]	; (80032e8 <IHM_Update+0x234>)
 8003112:	7809      	ldrb	r1, [r1, #0]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	b298      	uxth	r0, r3
 8003118:	460b      	mov	r3, r1
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	440b      	add	r3, r1
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	3312      	adds	r3, #18
 8003124:	4602      	mov	r2, r0
 8003126:	801a      	strh	r2, [r3, #0]
		ihm->leds[current_led].next_time += ihm->leds[current_led].periode ;
 8003128:	4b70      	ldr	r3, [pc, #448]	; (80032ec <IHM_Update+0x238>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b6e      	ldr	r3, [pc, #440]	; (80032e8 <IHM_Update+0x234>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4619      	mov	r1, r3
 8003132:	460b      	mov	r3, r1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	440b      	add	r3, r1
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	3308      	adds	r3, #8
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b6a      	ldr	r3, [pc, #424]	; (80032ec <IHM_Update+0x238>)
 8003142:	6819      	ldr	r1, [r3, #0]
 8003144:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <IHM_Update+0x234>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	4603      	mov	r3, r0
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4403      	add	r3, r0
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	330c      	adds	r3, #12
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4964      	ldr	r1, [pc, #400]	; (80032ec <IHM_Update+0x238>)
 800315a:	6809      	ldr	r1, [r1, #0]
 800315c:	4862      	ldr	r0, [pc, #392]	; (80032e8 <IHM_Update+0x234>)
 800315e:	7800      	ldrb	r0, [r0, #0]
 8003160:	441a      	add	r2, r3
 8003162:	4603      	mov	r3, r0
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4403      	add	r3, r0
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	440b      	add	r3, r1
 800316c:	3308      	adds	r3, #8
 800316e:	601a      	str	r2, [r3, #0]

		if(ihm->leds[current_led].current_bit == 0)
 8003170:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <IHM_Update+0x238>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b5c      	ldr	r3, [pc, #368]	; (80032e8 <IHM_Update+0x234>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	460b      	mov	r3, r1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	440b      	add	r3, r1
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	3312      	adds	r3, #18
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <IHM_Update+0xf4>
			ihm->leds[current_led].current_bit = 1 << (SEQUENCE_LEN-1);
 800318c:	4b57      	ldr	r3, [pc, #348]	; (80032ec <IHM_Update+0x238>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b55      	ldr	r3, [pc, #340]	; (80032e8 <IHM_Update+0x234>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	460b      	mov	r3, r1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	440b      	add	r3, r1
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	3312      	adds	r3, #18
 80031a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a6:	801a      	strh	r2, [r3, #0]
	}

	uint16_t pins_high = 0 ;
 80031a8:	2300      	movs	r3, #0
 80031aa:	80fb      	strh	r3, [r7, #6]
	uint16_t pins_low = 0 ;
 80031ac:	2300      	movs	r3, #0
 80031ae:	80bb      	strh	r3, [r7, #4]
	uint16_t current_bit =  ihm->leds[current_led].current_bit ;
 80031b0:	4b4e      	ldr	r3, [pc, #312]	; (80032ec <IHM_Update+0x238>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b4c      	ldr	r3, [pc, #304]	; (80032e8 <IHM_Update+0x234>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	460b      	mov	r3, r1
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	440b      	add	r3, r1
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	3312      	adds	r3, #18
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	803b      	strh	r3, [r7, #0]

	//For each color, check if we have to set outputs high or low
	if(ihm->leds[current_led].seqs[LED_COLOR_RED] & current_bit)		//Red pin high ?
 80031ca:	4b48      	ldr	r3, [pc, #288]	; (80032ec <IHM_Update+0x238>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <IHM_Update+0x234>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	4619      	mov	r1, r3
 80031d4:	460b      	mov	r3, r1
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	440b      	add	r3, r1
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	881a      	ldrh	r2, [r3, #0]
 80031e0:	883b      	ldrh	r3, [r7, #0]
 80031e2:	4013      	ands	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <IHM_Update+0x142>
		pins_high += pin_color[LED_COLOR_RED];
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <IHM_Update+0x23c>)
 80031ec:	881a      	ldrh	r2, [r3, #0]
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	4413      	add	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
 80031f4:	e004      	b.n	8003200 <IHM_Update+0x14c>
	else
		pins_low += pin_color[LED_COLOR_RED];
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <IHM_Update+0x23c>)
 80031f8:	881a      	ldrh	r2, [r3, #0]
 80031fa:	88bb      	ldrh	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_GREEN] & current_bit)		//Green pin High ?
 8003200:	4b3a      	ldr	r3, [pc, #232]	; (80032ec <IHM_Update+0x238>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	4b38      	ldr	r3, [pc, #224]	; (80032e8 <IHM_Update+0x234>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	460b      	mov	r3, r1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	440b      	add	r3, r1
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	3302      	adds	r3, #2
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	883b      	ldrh	r3, [r7, #0]
 800321a:	4013      	ands	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <IHM_Update+0x17a>
		pins_high += pin_color[LED_COLOR_GREEN];
 8003222:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <IHM_Update+0x23c>)
 8003224:	885a      	ldrh	r2, [r3, #2]
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	4413      	add	r3, r2
 800322a:	80fb      	strh	r3, [r7, #6]
 800322c:	e004      	b.n	8003238 <IHM_Update+0x184>
	else
		pins_low += pin_color[LED_COLOR_GREEN];
 800322e:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <IHM_Update+0x23c>)
 8003230:	885a      	ldrh	r2, [r3, #2]
 8003232:	88bb      	ldrh	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	80bb      	strh	r3, [r7, #4]

	if(ihm->leds[current_led].seqs[LED_COLOR_BLUE] & current_bit)		//Blue pin high ?
 8003238:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <IHM_Update+0x238>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <IHM_Update+0x234>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	460b      	mov	r3, r1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	440b      	add	r3, r1
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	881a      	ldrh	r2, [r3, #0]
 8003250:	883b      	ldrh	r3, [r7, #0]
 8003252:	4013      	ands	r3, r2
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <IHM_Update+0x1b2>
		pins_high |= pin_color[LED_COLOR_BLUE];
 800325a:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <IHM_Update+0x23c>)
 800325c:	889a      	ldrh	r2, [r3, #4]
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	4313      	orrs	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
 8003264:	e004      	b.n	8003270 <IHM_Update+0x1bc>
	else
		pins_low |= pin_color[LED_COLOR_BLUE];
 8003266:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <IHM_Update+0x23c>)
 8003268:	889a      	ldrh	r2, [r3, #4]
 800326a:	88bb      	ldrh	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	80bb      	strh	r3, [r7, #4]

	//Then we activate the current led
	for(uint8_t l = 0; l < LED_COUNT; l++){
 8003270:	2300      	movs	r3, #0
 8003272:	70fb      	strb	r3, [r7, #3]
 8003274:	e022      	b.n	80032bc <IHM_Update+0x208>
		if(l == current_led)
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <IHM_Update+0x234>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	429a      	cmp	r2, r3
 800327e:	d10d      	bne.n	800329c <IHM_Update+0x1e8>
			pins_high |= ihm->leds[l].pin ;
 8003280:	4b1a      	ldr	r3, [pc, #104]	; (80032ec <IHM_Update+0x238>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	440b      	add	r3, r1
 8003290:	3310      	adds	r3, #16
 8003292:	881a      	ldrh	r2, [r3, #0]
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	4313      	orrs	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
 800329a:	e00c      	b.n	80032b6 <IHM_Update+0x202>
		else
			pins_low |= ihm->leds[l].pin ;
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <IHM_Update+0x238>)
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	3310      	adds	r3, #16
 80032ae:	881a      	ldrh	r2, [r3, #0]
 80032b0:	88bb      	ldrh	r3, [r7, #4]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	80bb      	strh	r3, [r7, #4]
	for(uint8_t l = 0; l < LED_COUNT; l++){
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	3301      	adds	r3, #1
 80032ba:	70fb      	strb	r3, [r7, #3]
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d9d9      	bls.n	8003276 <IHM_Update+0x1c2>
	}
	HAL_GPIO_WritePin(GPIOC, pins_high, GPIO_PIN_SET);
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4619      	mov	r1, r3
 80032c8:	480a      	ldr	r0, [pc, #40]	; (80032f4 <IHM_Update+0x240>)
 80032ca:	f006 fae1 	bl	8009890 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, pins_low, GPIO_PIN_RESET);
 80032ce:	88bb      	ldrh	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	4619      	mov	r1, r3
 80032d4:	4807      	ldr	r0, [pc, #28]	; (80032f4 <IHM_Update+0x240>)
 80032d6:	f006 fadb 	bl	8009890 <HAL_GPIO_WritePin>





}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2000238c 	.word	0x2000238c
 80032e8:	20002390 	.word	0x20002390
 80032ec:	20002388 	.word	0x20002388
 80032f0:	200002c8 	.word	0x200002c8
 80032f4:	40020800 	.word	0x40020800

080032f8 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart6 ;

void DEBUG_init(void){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
	RetargetInit(&huart6);
 80032fc:	4803      	ldr	r0, [pc, #12]	; (800330c <DEBUG_init+0x14>)
 80032fe:	f000 f809 	bl	8003314 <RetargetInit>
	printf("Debuger is init\n");
 8003302:	4803      	ldr	r0, [pc, #12]	; (8003310 <DEBUG_init+0x18>)
 8003304:	f00d fe70 	bl	8010fe8 <puts>
}
 8003308:	bf00      	nop
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200038f4 	.word	0x200038f4
 8003310:	08014630 	.word	0x08014630

08003314 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800331c:	4a07      	ldr	r2, [pc, #28]	; (800333c <RetargetInit+0x28>)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003322:	4b07      	ldr	r3, [pc, #28]	; (8003340 <RetargetInit+0x2c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6898      	ldr	r0, [r3, #8]
 8003328:	2300      	movs	r3, #0
 800332a:	2202      	movs	r2, #2
 800332c:	2100      	movs	r1, #0
 800332e:	f00d fe63 	bl	8010ff8 <setvbuf>
}
 8003332:	bf00      	nop
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200024b8 	.word	0x200024b8
 8003340:	20001cb4 	.word	0x20001cb4

08003344 <_isatty>:

int _isatty(int fd) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db04      	blt.n	800335c <_isatty+0x18>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b02      	cmp	r3, #2
 8003356:	dc01      	bgt.n	800335c <_isatty+0x18>
    return 1;
 8003358:	2301      	movs	r3, #1
 800335a:	e005      	b.n	8003368 <_isatty+0x24>

  errno = EBADF;
 800335c:	f00d f91e 	bl	801059c <__errno>
 8003360:	4602      	mov	r2, r0
 8003362:	2309      	movs	r3, #9
 8003364:	6013      	str	r3, [r2, #0]
  return 0;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <_write>:

int _write(int fd, char* ptr, int len) {
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d002      	beq.n	8003388 <_write+0x18>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d110      	bne.n	80033aa <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <_write+0x50>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	b29a      	uxth	r2, r3
 8003390:	2364      	movs	r3, #100	; 0x64
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	f00b fc01 	bl	800eb9a <HAL_UART_Transmit>
 8003398:	4603      	mov	r3, r0
 800339a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <_write+0x36>
      return len;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	e008      	b.n	80033b8 <_write+0x48>
    else
      return EIO;
 80033a6:	2305      	movs	r3, #5
 80033a8:	e006      	b.n	80033b8 <_write+0x48>
  }
  errno = EBADF;
 80033aa:	f00d f8f7 	bl	801059c <__errno>
 80033ae:	4602      	mov	r2, r0
 80033b0:	2309      	movs	r3, #9
 80033b2:	6013      	str	r3, [r2, #0]
  return -1;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	200024b8 	.word	0x200024b8

080033c4 <_close>:

int _close(int fd) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	db04      	blt.n	80033dc <_close+0x18>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	dc01      	bgt.n	80033dc <_close+0x18>
    return 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	e006      	b.n	80033ea <_close+0x26>

  errno = EBADF;
 80033dc:	f00d f8de 	bl	801059c <__errno>
 80033e0:	4602      	mov	r2, r0
 80033e2:	2309      	movs	r3, #9
 80033e4:	6013      	str	r3, [r2, #0]
  return -1;
 80033e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80033fe:	f00d f8cd 	bl	801059c <__errno>
 8003402:	4602      	mov	r2, r0
 8003404:	2309      	movs	r3, #9
 8003406:	6013      	str	r3, [r2, #0]
  return -1;
 8003408:	f04f 33ff 	mov.w	r3, #4294967295
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <_read>:

int _read(int fd, char* ptr, int len) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d110      	bne.n	8003448 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <_read+0x4c>)
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	2201      	movs	r2, #1
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	f00b fc4b 	bl	800eccc <HAL_UART_Receive>
 8003436:	4603      	mov	r3, r0
 8003438:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <_read+0x30>
      return 1;
 8003440:	2301      	movs	r3, #1
 8003442:	e008      	b.n	8003456 <_read+0x42>
    else
      return EIO;
 8003444:	2305      	movs	r3, #5
 8003446:	e006      	b.n	8003456 <_read+0x42>
  }
  errno = EBADF;
 8003448:	f00d f8a8 	bl	801059c <__errno>
 800344c:	4602      	mov	r2, r0
 800344e:	2309      	movs	r3, #9
 8003450:	6013      	str	r3, [r2, #0]
  return -1;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200024b8 	.word	0x200024b8

08003464 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db08      	blt.n	8003486 <_fstat+0x22>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	dc05      	bgt.n	8003486 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003480:	605a      	str	r2, [r3, #4]
    return 0;
 8003482:	2300      	movs	r3, #0
 8003484:	e005      	b.n	8003492 <_fstat+0x2e>
  }

  errno = EBADF;
 8003486:	f00d f889 	bl	801059c <__errno>
 800348a:	4602      	mov	r2, r0
 800348c:	2309      	movs	r3, #9
 800348e:	6013      	str	r3, [r2, #0]
  return 0;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <gyro_init_ok_func>:



};

static void gyro_init_ok_func(mask_def_ids_t mask_id){
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_GYRO_READING);
 80034a6:	2001      	movs	r0, #1
 80034a8:	f000 fa0e 	bl	80038c8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 80034ac:	2101      	movs	r1, #1
 80034ae:	2004      	movs	r0, #4
 80034b0:	f000 ff0c 	bl	80042cc <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <gyro_init_ok_func+0x28>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200002d0 	.word	0x200002d0

080034c8 <acc_init_ok_func>:

static void acc_init_ok_func(mask_def_ids_t mask_id){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	71fb      	strb	r3, [r7, #7]
	//On dit que le gyro est ok et qu'il effectu des mesures
	EVENT_Set_flag(FLAG_ACC_READING);
 80034d2:	2005      	movs	r0, #5
 80034d4:	f000 f9f8 	bl	80038c8 <EVENT_Set_flag>
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 80034d8:	2101      	movs	r1, #1
 80034da:	2006      	movs	r0, #6
 80034dc:	f000 fef6 	bl	80042cc <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <acc_init_ok_func+0x28>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	200002d0 	.word	0x200002d0

080034f4 <ibus_data_rdy>:

static void ibus_data_rdy(mask_def_ids_t mask_id){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034fe:	b672      	cpsid	i
	//On clean le flag ibus_data_rdy
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_IBUS_DATA_RDY);
 8003500:	210d      	movs	r1, #13
 8003502:	4806      	ldr	r0, [pc, #24]	; (800351c <ibus_data_rdy+0x28>)
 8003504:	f000 fac2 	bl	8003a8c <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003508:	b662      	cpsie	i
	__enable_irq();
	//On déclenche la tâche de traitement des octets pour l ibus
	SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_UPDATE, TASK_MODE_EVENT);
 800350a:	2102      	movs	r1, #2
 800350c:	2009      	movs	r0, #9
 800350e:	f000 fedd 	bl	80042cc <SCHEDULER_task_set_mode>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20002394 	.word	0x20002394

08003520 <baro_data_ready_func>:

static void baro_data_ready_func(mask_def_ids_t mask_id){
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
	switch(mask_id){
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d00c      	beq.n	800354a <baro_data_ready_func+0x2a>
 8003530:	2b02      	cmp	r3, #2
 8003532:	d012      	beq.n	800355a <baro_data_ready_func+0x3a>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d000      	beq.n	800353a <baro_data_ready_func+0x1a>
		case MASK_BARO_DATA_READY_PRESSURE:
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
			break;
		default:
			break;
 8003538:	e017      	b.n	800356a <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_TEMP_RAW_RDY);
 800353a:	2009      	movs	r0, #9
 800353c:	f000 f9dc 	bl	80038f8 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_TEMP, TASK_MODE_EVENT);
 8003540:	2102      	movs	r1, #2
 8003542:	2010      	movs	r0, #16
 8003544:	f000 fec2 	bl	80042cc <SCHEDULER_task_set_mode>
			break;
 8003548:	e00f      	b.n	800356a <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 800354a:	200a      	movs	r0, #10
 800354c:	f000 f9d4 	bl	80038f8 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_PRESSURE, TASK_MODE_EVENT);
 8003550:	2102      	movs	r1, #2
 8003552:	2011      	movs	r0, #17
 8003554:	f000 feba 	bl	80042cc <SCHEDULER_task_set_mode>
			break;
 8003558:	e007      	b.n	800356a <baro_data_ready_func+0x4a>
			EVENT_Clean_flag(FLAG_BARO_PRESSURE_RDY);
 800355a:	200b      	movs	r0, #11
 800355c:	f000 f9cc 	bl	80038f8 <EVENT_Clean_flag>
			SCHEDULER_task_set_mode(TASK_BARO_ALTITUDE, TASK_MODE_EVENT);
 8003560:	2102      	movs	r1, #2
 8003562:	2012      	movs	r0, #18
 8003564:	f000 feb2 	bl	80042cc <SCHEDULER_task_set_mode>
			break;
 8003568:	bf00      	nop

	}
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <on_the_ground>:

static void on_the_ground(mask_def_ids_t mask_id){
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 800357e:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_FLYING);
 8003580:	2122      	movs	r1, #34	; 0x22
 8003582:	480d      	ldr	r0, [pc, #52]	; (80035b8 <on_the_ground+0x44>)
 8003584:	f000 fa82 	bl	8003a8c <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMED);
 8003588:	211e      	movs	r1, #30
 800358a:	480b      	ldr	r0, [pc, #44]	; (80035b8 <on_the_ground+0x44>)
 800358c:	f000 fa7e 	bl	8003a8c <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_BUSY);
 8003590:	211f      	movs	r1, #31
 8003592:	4809      	ldr	r0, [pc, #36]	; (80035b8 <on_the_ground+0x44>)
 8003594:	f000 fa7a 	bl	8003a8c <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_ARMING);
 8003598:	211d      	movs	r1, #29
 800359a:	4807      	ldr	r0, [pc, #28]	; (80035b8 <on_the_ground+0x44>)
 800359c:	f000 fa76 	bl	8003a8c <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 80035a0:	2120      	movs	r1, #32
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <on_the_ground+0x44>)
 80035a4:	f000 fa72 	bl	8003a8c <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80035a8:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ON_THE_GROUND);
 80035aa:	2000      	movs	r0, #0
 80035ac:	f7ff fa8a 	bl	8002ac4 <FLIGHT_MODE_Set_Flight_Mode>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20002394 	.word	0x20002394

080035bc <manual_accro>:
static void manual_accro(mask_def_ids_t mask_id){
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80035c6:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 80035c8:	2122      	movs	r1, #34	; 0x22
 80035ca:	4807      	ldr	r0, [pc, #28]	; (80035e8 <manual_accro+0x2c>)
 80035cc:	f000 fa2e 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 80035d0:	2123      	movs	r1, #35	; 0x23
 80035d2:	4805      	ldr	r0, [pc, #20]	; (80035e8 <manual_accro+0x2c>)
 80035d4:	f000 fa2a 	bl	8003a2c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80035d8:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ACCRO);
 80035da:	2001      	movs	r0, #1
 80035dc:	f7ff fa72 	bl	8002ac4 <FLIGHT_MODE_Set_Flight_Mode>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20002394 	.word	0x20002394

080035ec <manual_angle>:

static void manual_angle(mask_def_ids_t mask_id){
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80035f6:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 80035f8:	2122      	movs	r1, #34	; 0x22
 80035fa:	4807      	ldr	r0, [pc, #28]	; (8003618 <manual_angle+0x2c>)
 80035fc:	f000 fa16 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8003600:	2123      	movs	r1, #35	; 0x23
 8003602:	4805      	ldr	r0, [pc, #20]	; (8003618 <manual_angle+0x2c>)
 8003604:	f000 fa12 	bl	8003a2c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003608:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ANGLE);
 800360a:	2002      	movs	r0, #2
 800360c:	f7ff fa5a 	bl	8002ac4 <FLIGHT_MODE_Set_Flight_Mode>
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20002394 	.word	0x20002394

0800361c <manual_angle_altitude_auto>:

static void manual_angle_altitude_auto(mask_def_ids_t mask_id){
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003626:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_FLYING);
 8003628:	2122      	movs	r1, #34	; 0x22
 800362a:	4807      	ldr	r0, [pc, #28]	; (8003648 <manual_angle_altitude_auto+0x2c>)
 800362c:	f000 f9fe 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_MANUAL);
 8003630:	2123      	movs	r1, #35	; 0x23
 8003632:	4805      	ldr	r0, [pc, #20]	; (8003648 <manual_angle_altitude_auto+0x2c>)
 8003634:	f000 f9fa 	bl	8003a2c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003638:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_MANUAL_ALTI_AUTO);
 800363a:	2003      	movs	r0, #3
 800363c:	f7ff fa42 	bl	8002ac4 <FLIGHT_MODE_Set_Flight_Mode>
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20002394 	.word	0x20002394

0800364c <gyro_data_ready_func>:

static void gyro_data_ready_func(mask_def_ids_t mask_id){
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003656:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 8003658:	2102      	movs	r1, #2
 800365a:	4806      	ldr	r0, [pc, #24]	; (8003674 <gyro_data_ready_func+0x28>)
 800365c:	f000 fa16 	bl	8003a8c <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003660:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 8003662:	2102      	movs	r1, #2
 8003664:	2005      	movs	r0, #5
 8003666:	f000 fe31 	bl	80042cc <SCHEDULER_task_set_mode>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20002394 	.word	0x20002394

08003678 <acc_data_ready_func>:

static void acc_data_ready_func(mask_def_ids_t mask_id){
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003682:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 8003684:	2106      	movs	r1, #6
 8003686:	4806      	ldr	r0, [pc, #24]	; (80036a0 <acc_data_ready_func+0x28>)
 8003688:	f000 fa00 	bl	8003a8c <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800368c:	b662      	cpsie	i
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 800368e:	2102      	movs	r1, #2
 8003690:	2007      	movs	r0, #7
 8003692:	f000 fe1b 	bl	80042cc <SCHEDULER_task_set_mode>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20002394 	.word	0x20002394

080036a4 <orientation_update>:

static void orientation_update(mask_def_ids_t mask_id){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80036ae:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 80036b0:	2107      	movs	r1, #7
 80036b2:	4808      	ldr	r0, [pc, #32]	; (80036d4 <orientation_update+0x30>)
 80036b4:	f000 f9ea 	bl	8003a8c <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 80036b8:	2103      	movs	r1, #3
 80036ba:	4806      	ldr	r0, [pc, #24]	; (80036d4 <orientation_update+0x30>)
 80036bc:	f000 f9e6 	bl	8003a8c <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80036c0:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 80036c2:	2102      	movs	r1, #2
 80036c4:	2008      	movs	r0, #8
 80036c6:	f000 fe01 	bl	80042cc <SCHEDULER_task_set_mode>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20002394 	.word	0x20002394

080036d8 <arming>:

static void arming(mask_def_ids_t mask_id){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80036e2:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_ARMING);
 80036e4:	211d      	movs	r1, #29
 80036e6:	4807      	ldr	r0, [pc, #28]	; (8003704 <arming+0x2c>)
 80036e8:	f000 f9a0 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);	//We re now busy => cant go in calibration mode or other "on the ground" modes
 80036ec:	211f      	movs	r1, #31
 80036ee:	4805      	ldr	r0, [pc, #20]	; (8003704 <arming+0x2c>)
 80036f0:	f000 f99c 	bl	8003a2c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80036f4:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_ARMING);
 80036f6:	2004      	movs	r0, #4
 80036f8:	f7ff f9e4 	bl	8002ac4 <FLIGHT_MODE_Set_Flight_Mode>
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20002394 	.word	0x20002394

08003708 <gyro_acc_calibration>:

static void gyro_acc_calibration(mask_def_ids_t mask_id){
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003712:	b672      	cpsid	i
	__disable_irq();
	MASK_set_flag(&flags, FLAG_GYRO_CALI_IN_PROGRESS);
 8003714:	2120      	movs	r1, #32
 8003716:	480b      	ldr	r0, [pc, #44]	; (8003744 <gyro_acc_calibration+0x3c>)
 8003718:	f000 f988 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&flags, FLAG_BUSY);
 800371c:	211f      	movs	r1, #31
 800371e:	4809      	ldr	r0, [pc, #36]	; (8003744 <gyro_acc_calibration+0x3c>)
 8003720:	f000 f984 	bl	8003a2c <MASK_set_flag>
	MASK_clean_flag(&flags, FLAG_CHAN_9_PUSH);
 8003724:	2118      	movs	r1, #24
 8003726:	4807      	ldr	r0, [pc, #28]	; (8003744 <gyro_acc_calibration+0x3c>)
 8003728:	f000 f9b0 	bl	8003a8c <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_CALI_DONE);
 800372c:	2121      	movs	r1, #33	; 0x21
 800372e:	4805      	ldr	r0, [pc, #20]	; (8003744 <gyro_acc_calibration+0x3c>)
 8003730:	f000 f9ac 	bl	8003a8c <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003734:	b662      	cpsie	i
	__enable_irq();
	FLIGHT_MODE_Set_Flight_Mode(FLIGHT_MODE_GYRO_ACC_CALIBRATION);
 8003736:	2005      	movs	r0, #5
 8003738:	f7ff f9c4 	bl	8002ac4 <FLIGHT_MODE_Set_Flight_Mode>
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20002394 	.word	0x20002394

08003748 <EVENT_init>:


void EVENT_init(system_t * sys_){
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	initialized = TRUE ;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <EVENT_init+0x24>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
	sys =sys_;
 8003756:	4a06      	ldr	r2, [pc, #24]	; (8003770 <EVENT_init+0x28>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6013      	str	r3, [r2, #0]

	//Configuration des mask associés aux events
	mask_def_events_init(events_main);
 800375c:	4805      	ldr	r0, [pc, #20]	; (8003774 <EVENT_init+0x2c>)
 800375e:	f000 f9e2 	bl	8003b26 <mask_def_events_init>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200023a4 	.word	0x200023a4
 8003770:	200023a0 	.word	0x200023a0
 8003774:	200002d0 	.word	0x200002d0

08003778 <EVENT_process>:

//Déclenchement des events en main
void EVENT_process(bool_e test_all){
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	if(new_flag)
 8003780:	4b41      	ldr	r3, [pc, #260]	; (8003888 <EVENT_process+0x110>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d07a      	beq.n	800387e <EVENT_process+0x106>
	{
		new_flag = FALSE;
 8003788:	4b3f      	ldr	r3, [pc, #252]	; (8003888 <EVENT_process+0x110>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

		//Nombre d'event à tester
		uint8_t max = EVENT_LOW_LVL_COUNT ;
 800378e:	2307      	movs	r3, #7
 8003790:	75fb      	strb	r3, [r7, #23]
		if(test_all)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <EVENT_process+0x24>
			max = EVENT_COUNT ;
 8003798:	230d      	movs	r3, #13
 800379a:	75fb      	strb	r3, [r7, #23]



		//Pout chaque event
		for(uint32_t e = 0; e < max; e ++)
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	e069      	b.n	8003876 <EVENT_process+0xfe>
		{

			uint32_t m = 0 ;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
			bool_e function_did_run_once = FALSE ;
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]

			//On test chaque paires de masque
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 80037aa:	e049      	b.n	8003840 <EVENT_process+0xc8>
			{
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 80037ac:	4837      	ldr	r0, [pc, #220]	; (800388c <EVENT_process+0x114>)
 80037ae:	4938      	ldr	r1, [pc, #224]	; (8003890 <EVENT_process+0x118>)
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	00d2      	lsls	r2, r2, #3
 80037b6:	24b4      	movs	r4, #180	; 0xb4
 80037b8:	fb04 f303 	mul.w	r3, r4, r3
 80037bc:	4413      	add	r3, r2
 80037be:	4419      	add	r1, r3
 80037c0:	e890 000c 	ldmia.w	r0, {r2, r3}
 80037c4:	c903      	ldmia	r1, {r0, r1}
 80037c6:	f000 f8d2 	bl	800396e <Mask_test_and>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d034      	beq.n	800383a <EVENT_process+0xc2>
				{
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 80037d0:	482e      	ldr	r0, [pc, #184]	; (800388c <EVENT_process+0x114>)
 80037d2:	492f      	ldr	r1, [pc, #188]	; (8003890 <EVENT_process+0x118>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1dda      	adds	r2, r3, #7
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	00d2      	lsls	r2, r2, #3
 80037dc:	24b4      	movs	r4, #180	; 0xb4
 80037de:	fb04 f303 	mul.w	r3, r4, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	4419      	add	r1, r3
 80037e6:	e890 000c 	ldmia.w	r0, {r2, r3}
 80037ea:	c903      	ldmia	r1, {r0, r1}
 80037ec:	f000 f8f2 	bl	80039d4 <Mask_test_or>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d021      	beq.n	800383a <EVENT_process+0xc2>
					{
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 80037f6:	4825      	ldr	r0, [pc, #148]	; (800388c <EVENT_process+0x114>)
 80037f8:	4925      	ldr	r1, [pc, #148]	; (8003890 <EVENT_process+0x118>)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f103 020e 	add.w	r2, r3, #14
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	00d2      	lsls	r2, r2, #3
 8003804:	24b4      	movs	r4, #180	; 0xb4
 8003806:	fb04 f303 	mul.w	r3, r4, r3
 800380a:	4413      	add	r3, r2
 800380c:	4419      	add	r1, r3
 800380e:	e890 000c 	ldmia.w	r0, {r2, r3}
 8003812:	c903      	ldmia	r1, {r0, r1}
 8003814:	f000 f8de 	bl	80039d4 <Mask_test_or>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <EVENT_process+0xc2>
						{
							events_main[e].function(m);
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <EVENT_process+0x118>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	21b4      	movs	r1, #180	; 0xb4
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	33b0      	adds	r3, #176	; 0xb0
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	4610      	mov	r0, r2
 8003834:	4798      	blx	r3
							function_did_run_once = TRUE ;
 8003836:	2301      	movs	r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
						}
					}
				}
				m++ ;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	3301      	adds	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8003840:	4a13      	ldr	r2, [pc, #76]	; (8003890 <EVENT_process+0x118>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	21b4      	movs	r1, #180	; 0xb4
 8003846:	fb01 f303 	mul.w	r3, r1, r3
 800384a:	4413      	add	r3, r2
 800384c:	33a8      	adds	r3, #168	; 0xa8
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	429a      	cmp	r2, r3
 8003854:	d20c      	bcs.n	8003870 <EVENT_process+0xf8>
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <EVENT_process+0xf8>
 800385c:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <EVENT_process+0x118>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	21b4      	movs	r1, #180	; 0xb4
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	33ac      	adds	r3, #172	; 0xac
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d09d      	beq.n	80037ac <EVENT_process+0x34>
		for(uint32_t e = 0; e < max; e ++)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	429a      	cmp	r2, r3
 800387c:	d391      	bcc.n	80037a2 <EVENT_process+0x2a>
			}

		}
	}
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd90      	pop	{r4, r7, pc}
 8003886:	bf00      	nop
 8003888:	2000239c 	.word	0x2000239c
 800388c:	20002394 	.word	0x20002394
 8003890:	200002d0 	.word	0x200002d0

08003894 <EVENT_Check_flag>:

bool_e EVENT_Check_flag(Flags_e flag){
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
	return Mask_test_and(MASK_create_single(flag), flags);
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	79fa      	ldrb	r2, [r7, #7]
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f91f 	bl	8003aea <MASK_create_single>
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <EVENT_Check_flag+0x30>)
 80038ae:	cb0c      	ldmia	r3, {r2, r3}
 80038b0:	f107 0108 	add.w	r1, r7, #8
 80038b4:	c903      	ldmia	r1, {r0, r1}
 80038b6:	f000 f85a 	bl	800396e <Mask_test_and>
 80038ba:	4603      	mov	r3, r0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20002394 	.word	0x20002394

080038c8 <EVENT_Set_flag>:


//Set a flag
void EVENT_Set_flag(Flags_e flag){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 80038d2:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 80038d4:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <EVENT_Set_flag+0x28>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	4619      	mov	r1, r3
 80038de:	4805      	ldr	r0, [pc, #20]	; (80038f4 <EVENT_Set_flag+0x2c>)
 80038e0:	f000 f8a4 	bl	8003a2c <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80038e4:	b662      	cpsie	i
	__enable_irq();
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	2000239c 	.word	0x2000239c
 80038f4:	20002394 	.word	0x20002394

080038f8 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8003902:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <EVENT_Clean_flag+0x28>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	4619      	mov	r1, r3
 800390e:	4805      	ldr	r0, [pc, #20]	; (8003924 <EVENT_Clean_flag+0x2c>)
 8003910:	f000 f8bc 	bl	8003a8c <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8003914:	b662      	cpsie	i
	__enable_irq();
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	2000239c 	.word	0x2000239c
 8003924:	20002394 	.word	0x20002394

08003928 <MASK_get_empty_mask>:
 */

#include "mask.h"

//Renvoit un mask vide
Mask_t MASK_get_empty_mask(){
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	Mask_t mask_return ;
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	e00a      	b.n	800394c <MASK_get_empty_mask+0x24>
		mask_return.array[m] = 0 ;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	f107 0218 	add.w	r2, r7, #24
 800393e:	4413      	add	r3, r2
 8003940:	2200      	movs	r2, #0
 8003942:	f843 2c0c 	str.w	r2, [r3, #-12]
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3301      	adds	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	ddf1      	ble.n	8003936 <MASK_get_empty_mask+0xe>
	return mask_return ;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	461a      	mov	r2, r3
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800395e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 800396e:	b490      	push	{r4, r7}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	f107 0408 	add.w	r4, r7, #8
 8003978:	e884 0003 	stmia.w	r4, {r0, r1}
 800397c:	4639      	mov	r1, r7
 800397e:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e01c      	b.n	80039c2 <Mask_test_and+0x54>
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	f107 0218 	add.w	r2, r7, #24
 8003990:	4413      	add	r3, r2
 8003992:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	f107 0118 	add.w	r1, r7, #24
 800399e:	440b      	add	r3, r1
 80039a0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80039a4:	401a      	ands	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f107 0118 	add.w	r1, r7, #24
 80039ae:	440b      	add	r3, r1
 80039b0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <Mask_test_and+0x4e>
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e006      	b.n	80039ca <Mask_test_and+0x5c>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3301      	adds	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	dddf      	ble.n	8003988 <Mask_test_and+0x1a>
		}
	return TRUE ;
 80039c8:	2301      	movs	r3, #1
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc90      	pop	{r4, r7}
 80039d2:	4770      	bx	lr

080039d4 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 80039d4:	b490      	push	{r4, r7}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	f107 0408 	add.w	r4, r7, #8
 80039de:	e884 0003 	stmia.w	r4, {r0, r1}
 80039e2:	4639      	mov	r1, r7
 80039e4:	e881 000c 	stmia.w	r1, {r2, r3}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e015      	b.n	8003a1a <Mask_test_or+0x46>
		if(mask_test.array[m] & mask_ref.array[m])
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f107 0218 	add.w	r2, r7, #24
 80039f6:	4413      	add	r3, r2
 80039f8:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	f107 0118 	add.w	r1, r7, #24
 8003a04:	440b      	add	r3, r1
 8003a06:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <Mask_test_or+0x40>
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e006      	b.n	8003a22 <Mask_test_or+0x4e>
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3301      	adds	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	dde6      	ble.n	80039ee <Mask_test_or+0x1a>
	return FALSE ;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc90      	pop	{r4, r7}
 8003a2a:	4770      	bx	lr

08003a2c <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	60fb      	str	r3, [r7, #12]
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d101      	bne.n	8003a68 <MASK_set_flag+0x3c>
		return FALSE ;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e00b      	b.n	8003a80 <MASK_set_flag+0x54>
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	ea42 0103 	orr.w	r1, r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return TRUE ;
 8003a7e:	2301      	movs	r3, #1
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
	uint32_t array_nb = flag / 32 ;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	617b      	str	r3, [r7, #20]
	uint32_t flag_pos = flag % 32 ;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	613b      	str	r3, [r7, #16]
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	60fb      	str	r3, [r7, #12]
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d10b      	bne.n	8003adc <MASK_clean_flag+0x50>
		mask->array[array_nb] -= flag_mask ;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1ad1      	subs	r1, r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return TRUE ;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <MASK_clean_flag+0x52>
	}
	return FALSE ;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <MASK_create_single>:
		MASK_set_flag(&mask_return, flag_array[f]);

	return mask_return ;
}

Mask_t MASK_create_single(Flags_e flag){
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	70fb      	strb	r3, [r7, #3]
	Mask_t mask_return = MASK_get_empty_mask() ;
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff14 	bl	8003928 <MASK_get_empty_mask>
	MASK_set_flag(&mask_return, flag);
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff8f 	bl	8003a2c <MASK_set_flag>
	return mask_return ;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	461a      	mov	r2, r3
 8003b12:	f107 0308 	add.w	r3, r7, #8
 8003b16:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b1a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <mask_def_events_init>:
static void mask_def_manual_angle(Event_t * event);
static void mask_def_manual_angle_alti_auto(Event_t * event);



void mask_def_events_init(Event_t * event){
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
	//Gyro mask def
	mask_def_gyro_init_ok(&event[EVENT_GYRO_INIT_OK]);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 f848 	bl	8003bca <mask_def_gyro_init_ok>
	mask_def_gyro_data_ready(&event[EVENT_GYRO_DATA_READY]);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f85e 	bl	8003bfc <mask_def_gyro_data_ready>
	//Acc mask def
	mask_def_acc_init_ok(&event[EVENT_ACC_INIT_OK]);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f86b 	bl	8003c22 <mask_def_acc_init_ok>
	mask_def_acc_data_ready(&event[EVENT_ACC_DATA_READY]);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	33b4      	adds	r3, #180	; 0xb4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f87f 	bl	8003c54 <mask_def_acc_data_ready>
	//Ibus
	mask_def_ibus_data_rdy(&event[EVENT_IBUS_DATA_RDY]);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 f8a9 	bl	8003cb4 <mask_def_ibus_data_rdy>
	//Orientation
	mask_def_baro_data_rdy(&event[EVENT_BARO_DATA_RDY]);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f8b6 	bl	8003cda <mask_def_baro_data_rdy>
	//Baro
	mask_def_orientation_update(&event[EVENT_ORIENTATION_UPDATE]);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 f880 	bl	8003c7a <mask_def_orientation_update>
	//Flight_modes
	mask_def_on_the_ground(&event[EVENT_ON_THE_GROUND]);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f8d5 	bl	8003d30 <mask_def_on_the_ground>
	mask_def_manual_accro(&event[EVENT_MANUAL_ACCRO]);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 f8fa 	bl	8003d86 <mask_def_manual_accro>
	mask_def_arming(&event[EVENT_ARMING]);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f92d 	bl	8003df8 <mask_def_arming>
	mask_def_gyro_acc_calibration(&event[EVENT_GYRO_ACC_CALIBRATION]);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 f946 	bl	8003e36 <mask_def_gyro_acc_calibration>
	mask_def_manual_angle(&event[EVENT_MANUAL_ANGLE]);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f8fb 	bl	8003dac <mask_def_manual_angle>
	mask_def_manual_angle_alti_auto(&event[EVENT_MANUAL_ANGLE_ALTITUDE_AUTO]);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f908 	bl	8003dd2 <mask_def_manual_angle_alti_auto>

}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <mask_def_gyro_init_ok>:

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ff28 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3338      	adds	r3, #56	; 0x38
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff ff22 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3370      	adds	r3, #112	; 0x70
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ff1c 	bl	8003a2c <MASK_set_flag>
}
 8003bf4:	bf00      	nop
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <mask_def_gyro_data_ready>:

static void mask_def_gyro_data_ready(Event_t * event){
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff0f 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3338      	adds	r3, #56	; 0x38
 8003c12:	2102      	movs	r1, #2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff09 	bl	8003a2c <MASK_set_flag>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <mask_def_acc_init_ok>:

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fefc 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3338      	adds	r3, #56	; 0x38
 8003c38:	2104      	movs	r1, #4
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fef6 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3370      	adds	r3, #112	; 0x70
 8003c44:	2105      	movs	r1, #5
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fef0 	bl	8003a2c <MASK_set_flag>
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <mask_def_acc_data_ready>:

static void mask_def_acc_data_ready(Event_t * event){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2104      	movs	r1, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff fee3 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3338      	adds	r3, #56	; 0x38
 8003c6a:	2106      	movs	r1, #6
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fedd 	bl	8003a2c <MASK_set_flag>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <mask_def_orientation_update>:

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2104      	movs	r1, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fed0 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fecb 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2103      	movs	r1, #3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff fec6 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3338      	adds	r3, #56	; 0x38
 8003ca4:	2107      	movs	r1, #7
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7ff fec0 	bl	8003a2c <MASK_set_flag>
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <mask_def_ibus_data_rdy>:

// ----------------	Radio ------------------------
static void mask_def_ibus_data_rdy(Event_t * event){
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	//Si flag data rdy on y go
	MASK_set_flag(&event->mask_and[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	210d      	movs	r1, #13
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff feb3 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_IBUS_DATA_RDY], FLAG_IBUS_DATA_RDY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3338      	adds	r3, #56	; 0x38
 8003cca:	210d      	movs	r1, #13
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fead 	bl	8003a2c <MASK_set_flag>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <mask_def_baro_data_rdy>:

// ----------------	BAaro ------------------------
static void mask_def_baro_data_rdy(Event_t * event){
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_OK);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2108      	movs	r1, #8
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fea0 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_TEMP_RAW], FLAG_BARO_TEMP_RAW_RDY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3338      	adds	r3, #56	; 0x38
 8003cf0:	2109      	movs	r1, #9
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fe9a 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_OK);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	2108      	movs	r1, #8
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fe94 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE_RAW], FLAG_BARO_PRESSURE_RAW_RDY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3340      	adds	r3, #64	; 0x40
 8003d08:	210a      	movs	r1, #10
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fe8e 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_OK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3310      	adds	r3, #16
 8003d14:	2108      	movs	r1, #8
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fe88 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_BARO_DATA_READY_PRESSURE], FLAG_BARO_PRESSURE_RDY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3348      	adds	r3, #72	; 0x48
 8003d20:	210b      	movs	r1, #11
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fe82 	bl	8003a2c <MASK_set_flag>
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <mask_def_on_the_ground>:

// ----------------	Flight Modes ------------------------
static void mask_def_on_the_ground(Event_t * event){
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_FLYING], FLAG_FLYING);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2122      	movs	r1, #34	; 0x22
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fe75 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_FLYING], FLAG_CHAN_5_POS_1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3338      	adds	r3, #56	; 0x38
 8003d46:	210e      	movs	r1, #14
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fe6f 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_ARMING], FLAG_ARMING);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3308      	adds	r3, #8
 8003d52:	211d      	movs	r1, #29
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fe69 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_ARMING], FLAG_CHAN_5_POS_1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3340      	adds	r3, #64	; 0x40
 8003d5e:	210e      	movs	r1, #14
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fe63 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_and[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_IN_PROGRESS);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3310      	adds	r3, #16
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fe5d 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ON_THE_GROUND_CALIBRATION], FLAG_GYRO_CALI_DONE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3348      	adds	r3, #72	; 0x48
 8003d76:	2121      	movs	r1, #33	; 0x21
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fe57 	bl	8003a2c <MASK_set_flag>


}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <mask_def_manual_accro>:

static void mask_def_manual_accro(Event_t * event){
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_CHAN_6_POS_1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2110      	movs	r1, #16
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fe4a 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ACCRO_ON_THE_GROUND], FLAG_ARMED);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3338      	adds	r3, #56	; 0x38
 8003d9c:	211e      	movs	r1, #30
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fe44 	bl	8003a2c <MASK_set_flag>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <mask_def_manual_angle>:

static void mask_def_manual_angle(Event_t * event){
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_CHAN_6_POS_2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2111      	movs	r1, #17
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fe37 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ON_THE_GROUND], FLAG_ARMED);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3338      	adds	r3, #56	; 0x38
 8003dc2:	211e      	movs	r1, #30
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fe31 	bl	8003a2c <MASK_set_flag>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <mask_def_manual_angle_alti_auto>:

static void mask_def_manual_angle_alti_auto(Event_t * event){
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_MANUAL_ANGLE_ALTI_AUTO], FLAG_CHAN_6_POS_3);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2112      	movs	r1, #18
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fe24 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_MANUAL_ANGLE_ALTI_AUTO], FLAG_ARMED);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3338      	adds	r3, #56	; 0x38
 8003de8:	211e      	movs	r1, #30
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fe1e 	bl	8003a2c <MASK_set_flag>
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <mask_def_arming>:

static void mask_def_arming(Event_t * event){
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_ARMING_ON_THE_GROUND], FLAG_GYRO_OK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fe11 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_ARMING_ON_THE_GROUND], FLAG_CHAN_5_POS_3);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3338      	adds	r3, #56	; 0x38
 8003e0e:	210f      	movs	r1, #15
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fe0b 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_FLYING);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3370      	adds	r3, #112	; 0x70
 8003e1a:	2122      	movs	r1, #34	; 0x22
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fe05 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ARMING_ON_THE_GROUND], FLAG_BUSY);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3370      	adds	r3, #112	; 0x70
 8003e26:	211f      	movs	r1, #31
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fdff 	bl	8003a2c <MASK_set_flag>


}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <mask_def_gyro_acc_calibration>:

static void mask_def_gyro_acc_calibration(Event_t * event){
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b082      	sub	sp, #8
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
	MASK_set_flag(&event->mask_and[MASK_GYRO_ACC_CALIBRATION], FLAG_GYRO_OK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fdf2 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_or[MASK_GYRO_ACC_CALIBRATION], FLAG_CHAN_9_PUSH);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3338      	adds	r3, #56	; 0x38
 8003e4c:	2118      	movs	r1, #24
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fdec 	bl	8003a2c <MASK_set_flag>

	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_BUSY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3370      	adds	r3, #112	; 0x70
 8003e58:	211f      	movs	r1, #31
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fde6 	bl	8003a2c <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_ACC_CALIBRATION], FLAG_FLYING);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3370      	adds	r3, #112	; 0x70
 8003e64:	2122      	movs	r1, #34	; 0x22
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fde0 	bl	8003a2c <MASK_set_flag>
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 8003e7c:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <SCHEDULER_init+0x20>)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8003e82:	f7ff fa39 	bl	80032f8 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb26 	bl	80044d8 <tasks_init>
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	200023fc 	.word	0x200023fc

08003e98 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8003e9e:	f000 fcdf 	bl	8004860 <TIME_us>
 8003ea2:	60f8      	str	r0, [r7, #12]
	task_t * task = get_first_task();
 8003ea4:	f000 f8d6 	bl	8004054 <get_first_task>
 8003ea8:	60b8      	str	r0, [r7, #8]
	bool_e task_executed = FALSE ;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	607b      	str	r3, [r7, #4]
	while(task_queu_position < task_queu_size && task != NULL){
 8003eae:	e04d      	b.n	8003f4c <SCHEDULER_run+0xb4>

		switch(task->mode){
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	7a1b      	ldrb	r3, [r3, #8]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d027      	beq.n	8003f08 <SCHEDULER_run+0x70>
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d002      	beq.n	8003ec2 <SCHEDULER_run+0x2a>
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d008      	beq.n	8003ed2 <SCHEDULER_run+0x3a>
				task->mode = TASK_MODE_WAIT ;
				break;
			case TASK_MODE_TIMMER :
			case TASK_MODE_WAIT:
			default:
				break;
 8003ec0:	e02e      	b.n	8003f20 <SCHEDULER_run+0x88>
				current_time_us = task_process(task, current_time_us);
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	68b8      	ldr	r0, [r7, #8]
 8003ec6:	f000 f8eb 	bl	80040a0 <task_process>
 8003eca:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	607b      	str	r3, [r7, #4]
				break;
 8003ed0:	e026      	b.n	8003f20 <SCHEDULER_run+0x88>
				if(current_time_us >= task->desired_next_start_us){
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d320      	bcc.n	8003f1e <SCHEDULER_run+0x86>
					current_time_us = task_process(task, current_time_us);
 8003edc:	68f9      	ldr	r1, [r7, #12]
 8003ede:	68b8      	ldr	r0, [r7, #8]
 8003ee0:	f000 f8de 	bl	80040a0 <task_process>
 8003ee4:	60f8      	str	r0, [r7, #12]
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	edd2 7a03 	vldr	s15, [r2, #12]
 8003ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ef4:	ee17 2a90 	vmov	r2, s15
 8003ef8:	1a9a      	subs	r2, r3, r2
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	441a      	add	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	625a      	str	r2, [r3, #36]	; 0x24
					task_executed = TRUE ;
 8003f02:	2301      	movs	r3, #1
 8003f04:	607b      	str	r3, [r7, #4]
				break;
 8003f06:	e00a      	b.n	8003f1e <SCHEDULER_run+0x86>
				current_time_us = task_process(task, current_time_us);
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	68b8      	ldr	r0, [r7, #8]
 8003f0c:	f000 f8c8 	bl	80040a0 <task_process>
 8003f10:	60f8      	str	r0, [r7, #12]
				task_executed = TRUE ;
 8003f12:	2301      	movs	r3, #1
 8003f14:	607b      	str	r3, [r7, #4]
				task->mode = TASK_MODE_WAIT ;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	721a      	strb	r2, [r3, #8]
				break;
 8003f1c:	e000      	b.n	8003f20 <SCHEDULER_run+0x88>
				break;
 8003f1e:	bf00      	nop
		}
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <SCHEDULER_run+0xaa>
 8003f26:	2000      	movs	r0, #0
 8003f28:	f000 fc86 	bl	8004838 <TASK_get_task>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d006      	beq.n	8003f42 <SCHEDULER_run+0xaa>
 8003f34:	2001      	movs	r0, #1
 8003f36:	f000 fc7f 	bl	8004838 <TASK_get_task>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10e      	bne.n	8003f60 <SCHEDULER_run+0xc8>
			//Stop the while loop if we executed a task
			break;
		task_executed = FALSE ;
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
		task = get_next_task();
 8003f46:	f000 f895 	bl	8004074 <get_next_task>
 8003f4a:	60b8      	str	r0, [r7, #8]
	while(task_queu_position < task_queu_size && task != NULL){
 8003f4c:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <SCHEDULER_run+0xd4>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <SCHEDULER_run+0xd8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d204      	bcs.n	8003f62 <SCHEDULER_run+0xca>
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1a8      	bne.n	8003eb0 <SCHEDULER_run+0x18>
	}
}
 8003f5e:	e000      	b.n	8003f62 <SCHEDULER_run+0xca>
			break;
 8003f60:	bf00      	nop
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200023f8 	.word	0x200023f8
 8003f70:	200023f4 	.word	0x200023f4

08003f74 <SCHEDULER_task>:

void SCHEDULER_task(void){
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
	//Changement de mode pour les tâches
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	71fb      	strb	r3, [r7, #7]
 8003f7e:	e00b      	b.n	8003f98 <SCHEDULER_task+0x24>
	{
		task_to_change[t]->mode = change_mode[t] ;
 8003f80:	79fa      	ldrb	r2, [r7, #7]
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	490c      	ldr	r1, [pc, #48]	; (8003fb8 <SCHEDULER_task+0x44>)
 8003f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f8a:	490c      	ldr	r1, [pc, #48]	; (8003fbc <SCHEDULER_task+0x48>)
 8003f8c:	5c8a      	ldrb	r2, [r1, r2]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	721a      	strb	r2, [r3, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	3301      	adds	r3, #1
 8003f96:	71fb      	strb	r3, [r7, #7]
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <SCHEDULER_task+0x4c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	79fa      	ldrb	r2, [r7, #7]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d3ed      	bcc.n	8003f80 <SCHEDULER_task+0xc>
	}
	task_to_moove_counter = 0 ;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <SCHEDULER_task+0x4c>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20002400 	.word	0x20002400
 8003fbc:	2000244c 	.word	0x2000244c
 8003fc0:	2000245f 	.word	0x2000245f

08003fc4 <SCHEDULER_get_cpu_load>:

float SCHEDULER_get_cpu_load(void){
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
	float load_pourcentage = 0 ;
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	603b      	str	r3, [r7, #0]
 8003fd4:	e023      	b.n	800401e <SCHEDULER_get_cpu_load+0x5a>
		if(task_queu[t]->real_period_us)
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	; (8004048 <SCHEDULER_get_cpu_load+0x84>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d019      	beq.n	8004018 <SCHEDULER_get_cpu_load+0x54>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <SCHEDULER_get_cpu_load+0x84>)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8003ff2:	fb02 f203 	mul.w	r2, r2, r3
 8003ff6:	4914      	ldr	r1, [pc, #80]	; (8004048 <SCHEDULER_get_cpu_load+0x84>)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004014:	edc7 7a01 	vstr	s15, [r7, #4]
	for(uint32_t t = 2; t < task_queu_size; t++)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	603b      	str	r3, [r7, #0]
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <SCHEDULER_get_cpu_load+0x88>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d3d6      	bcc.n	8003fd6 <SCHEDULER_get_cpu_load+0x12>

	return load_pourcentage / 512.0f ;
 8004028:	edd7 7a01 	vldr	s15, [r7, #4]
 800402c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004050 <SCHEDULER_get_cpu_load+0x8c>
 8004030:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004034:	eef0 7a66 	vmov.f32	s15, s13
}
 8004038:	eeb0 0a67 	vmov.f32	s0, s15
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	200023a8 	.word	0x200023a8
 800404c:	200023f4 	.word	0x200023f4
 8004050:	44000000 	.word	0x44000000

08004054 <get_first_task>:

static task_t * get_first_task(void){
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <get_first_task+0x18>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 800405e:	4b04      	ldr	r3, [pc, #16]	; (8004070 <get_first_task+0x1c>)
 8004060:	681b      	ldr	r3, [r3, #0]
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	200023f8 	.word	0x200023f8
 8004070:	200023a8 	.word	0x200023a8

08004074 <get_next_task>:

static task_t * get_next_task(void){
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <get_next_task+0x24>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a06      	ldr	r2, [pc, #24]	; (8004098 <get_next_task+0x24>)
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <get_next_task+0x24>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a05      	ldr	r2, [pc, #20]	; (800409c <get_next_task+0x28>)
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	200023f8 	.word	0x200023f8
 800409c:	200023a8 	.word	0x200023a8

080040a0 <task_process>:

static uint32_t task_process(task_t * task, uint32_t current_time_us){
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->process == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <task_process+0x16>
		return current_time_us ;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	e0e6      	b.n	8004284 <task_process+0x1e4>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	310a      	adds	r1, #10
 80040c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040c8:	1ad2      	subs	r2, r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	679a      	str	r2, [r3, #120]	; 0x78
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 80040d8:	6839      	ldr	r1, [r7, #0]
 80040da:	1ac9      	subs	r1, r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	320a      	adds	r2, #10
 80040e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	310a      	adds	r1, #10
 80040f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040f6:	441a      	add	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	679a      	str	r2, [r3, #120]	; 0x78
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004100:	4a62      	ldr	r2, [pc, #392]	; (800428c <task_process+0x1ec>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	091a      	lsrs	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	61da      	str	r2, [r3, #28]

	//Lag compensation
	if(task->mode == TASK_MODE_TIME){
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7a1b      	ldrb	r3, [r3, #8]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d13f      	bne.n	8004194 <task_process+0xf4>
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	320a      	adds	r2, #10
 800411e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d91a      	bls.n	8004160 <task_process+0xc0>
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	320a      	adds	r2, #10
 800413a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004150:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	edc3 7a03 	vstr	s15, [r3, #12]
 800415e:	e019      	b.n	8004194 <task_process+0xf4>
		else
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	ed93 7a03 	vldr	s14, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	310a      	adds	r1, #10
 8004174:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004186:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800418a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	edc3 7a03 	vstr	s15, [r3, #12]
	}


	task->last_execution_us = current_time_us ;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	621a      	str	r2, [r3, #32]
	task->process(current_time_us);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	6838      	ldr	r0, [r7, #0]
 80041a0:	4798      	blx	r3
	current_time_us = TIME_us();
 80041a2:	f000 fb5d 	bl	8004860 <TIME_us>
 80041a6:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	331e      	adds	r3, #30
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1a      	ldr	r2, [r3, #32]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80041d0:	6839      	ldr	r1, [r7, #0]
 80041d2:	1a8a      	subs	r2, r1, r2
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	331e      	adds	r3, #30
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	605a      	str	r2, [r3, #4]
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	331e      	adds	r3, #30
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	bf38      	it	cc
 80041f6:	461a      	movcc	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	615a      	str	r2, [r3, #20]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	331e      	adds	r3, #30
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	441a      	add	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004220:	4a1a      	ldr	r2, [pc, #104]	; (800428c <task_process+0x1ec>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	091a      	lsrs	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	611a      	str	r2, [r3, #16]

	if(task->duration_us_average_array[task->average_index] > 1000)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	331e      	adds	r3, #30
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004240:	d90f      	bls.n	8004262 <task_process+0x1c2>
		task->duration_us_average_array[task->average_index] ++ ;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	f102 031e 	add.w	r3, r2, #30
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	1c59      	adds	r1, r3, #1
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f102 031e 	add.w	r3, r2, #30
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4403      	add	r3, r0
 8004260:	6059      	str	r1, [r3, #4]

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004276:	2b14      	cmp	r3, #20
 8004278:	d103      	bne.n	8004282 <task_process+0x1e2>
		task->average_index = 0 ;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	return current_time_us ;
 8004282:	683b      	ldr	r3, [r7, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	cccccccd 	.word	0xcccccccd

08004290 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	71fb      	strb	r3, [r7, #7]
	if(enable)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <SCHEDULER_enable_task+0x24>
		queu_add(TASK_get_task(id));
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fac7 	bl	8004838 <TASK_get_task>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f873 	bl	8004398 <queu_add>
	else
		queu_remove(TASK_get_task(id));
}
 80042b2:	e007      	b.n	80042c4 <SCHEDULER_enable_task+0x34>
		queu_remove(TASK_get_task(id));
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fabe 	bl	8004838 <TASK_get_task>
 80042bc:	4603      	mov	r3, r0
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f8c8 	bl	8004454 <queu_remove>
}
 80042c4:	bf00      	nop
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <SCHEDULER_task_set_mode>:

void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	460a      	mov	r2, r1
 80042d6:	71fb      	strb	r3, [r7, #7]
 80042d8:	4613      	mov	r3, r2
 80042da:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80042dc:	b672      	cpsid	i
	__disable_irq();
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <SCHEDULER_task_set_mode+0x4c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461c      	mov	r4, r3
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 faa5 	bl	8004838 <TASK_get_task>
 80042ee:	4602      	mov	r2, r0
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <SCHEDULER_task_set_mode+0x50>)
 80042f2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	change_mode[task_to_moove_counter++] = mode ;
 80042f6:	4b08      	ldr	r3, [pc, #32]	; (8004318 <SCHEDULER_task_set_mode+0x4c>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	b2d1      	uxtb	r1, r2
 8004300:	4a05      	ldr	r2, [pc, #20]	; (8004318 <SCHEDULER_task_set_mode+0x4c>)
 8004302:	7011      	strb	r1, [r2, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <SCHEDULER_task_set_mode+0x54>)
 8004308:	79bb      	ldrb	r3, [r7, #6]
 800430a:	5453      	strb	r3, [r2, r1]
  __ASM volatile ("cpsie i" : : : "memory");
 800430c:	b662      	cpsie	i
	__enable_irq();
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	bf00      	nop
 8004318:	2000245f 	.word	0x2000245f
 800431c:	20002400 	.word	0x20002400
 8004320:	2000244c 	.word	0x2000244c

08004324 <SCHEDULER_reschedule_task>:

void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
	task_t * task = TASK_get_task(id);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fa80 	bl	8004838 <TASK_get_task>
 8004338:	60f8      	str	r0, [r7, #12]
	task->desired_period_us = new_period_us ;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	619a      	str	r2, [r3, #24]
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	if(task == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <queu_contains+0x12>
		return FALSE ;
 8004356:	2300      	movs	r3, #0
 8004358:	e014      	b.n	8004384 <queu_contains+0x3c>

	for(uint32_t t = 0; t < task_queu_size; t++)
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	e00b      	b.n	8004378 <queu_contains+0x30>
		if(task_queu[t] == task)
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <queu_contains+0x48>)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d101      	bne.n	8004372 <queu_contains+0x2a>
			return TRUE ;
 800436e:	2301      	movs	r3, #1
 8004370:	e008      	b.n	8004384 <queu_contains+0x3c>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3301      	adds	r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <queu_contains+0x4c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	429a      	cmp	r2, r3
 8004380:	d3ee      	bcc.n	8004360 <queu_contains+0x18>
	return FALSE ;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	200023a8 	.word	0x200023a8
 8004394:	200023f4 	.word	0x200023f4

08004398 <queu_add>:

static bool_e queu_add(task_t * task){
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff ffd1 	bl	8004348 <queu_contains>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <queu_add+0x22>
 80043ac:	4b27      	ldr	r3, [pc, #156]	; (800444c <queu_add+0xb4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b12      	cmp	r3, #18
 80043b2:	d802      	bhi.n	80043ba <queu_add+0x22>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <queu_add+0x26>
		return FALSE ;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e041      	b.n	8004442 <queu_add+0xaa>


	uint32_t t = 0 ;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80043c2:	e03a      	b.n	800443a <queu_add+0xa2>
	{
		if(task_queu[t] == NULL)
 80043c4:	4a22      	ldr	r2, [pc, #136]	; (8004450 <queu_add+0xb8>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <queu_add+0x50>
		{
			task_queu[t] = task ;
 80043d0:	491f      	ldr	r1, [pc, #124]	; (8004450 <queu_add+0xb8>)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <queu_add+0xb4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	4a1a      	ldr	r2, [pc, #104]	; (800444c <queu_add+0xb4>)
 80043e2:	6013      	str	r3, [r2, #0]
			return TRUE;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e02c      	b.n	8004442 <queu_add+0xaa>
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	781a      	ldrb	r2, [r3, #0]
 80043ec:	4918      	ldr	r1, [pc, #96]	; (8004450 <queu_add+0xb8>)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d91c      	bls.n	8004434 <queu_add+0x9c>
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3301      	adds	r3, #1
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4a13      	ldr	r2, [pc, #76]	; (8004450 <queu_add+0xb8>)
 8004402:	1898      	adds	r0, r3, r2
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a11      	ldr	r2, [pc, #68]	; (8004450 <queu_add+0xb8>)
 800440a:	1899      	adds	r1, r3, r2
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <queu_add+0xb4>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	461a      	mov	r2, r3
 8004418:	f00c f8f5 	bl	8010606 <memmove>
			task_queu[t] = task ;
 800441c:	490c      	ldr	r1, [pc, #48]	; (8004450 <queu_add+0xb8>)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <queu_add+0xb4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <queu_add+0xb4>)
 800442e:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8004430:	2301      	movs	r3, #1
 8004432:	e006      	b.n	8004442 <queu_add+0xaa>
		}
		t++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b12      	cmp	r3, #18
 800443e:	d9c1      	bls.n	80043c4 <queu_add+0x2c>
	}
	return FALSE ;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200023f4 	.word	0x200023f4
 8004450:	200023a8 	.word	0x200023a8

08004454 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task) || task == NULL)
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ff73 	bl	8004348 <queu_contains>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <queu_remove+0x1a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <queu_remove+0x1e>
		return FALSE ;
 800446e:	2300      	movs	r3, #0
 8004470:	e02a      	b.n	80044c8 <queu_remove+0x74>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e021      	b.n	80044bc <queu_remove+0x68>
		if(task == task_queu[t]){
 8004478:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <queu_remove+0x7c>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	d117      	bne.n	80044b6 <queu_remove+0x62>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4a11      	ldr	r2, [pc, #68]	; (80044d0 <queu_remove+0x7c>)
 800448c:	1898      	adds	r0, r3, r2
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3301      	adds	r3, #1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4a0e      	ldr	r2, [pc, #56]	; (80044d0 <queu_remove+0x7c>)
 8004496:	1899      	adds	r1, r3, r2
 8004498:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <queu_remove+0x80>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	461a      	mov	r2, r3
 80044a4:	f00c f8af 	bl	8010606 <memmove>
			task_queu_size -- ;
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <queu_remove+0x80>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	4a09      	ldr	r2, [pc, #36]	; (80044d4 <queu_remove+0x80>)
 80044b0:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e008      	b.n	80044c8 <queu_remove+0x74>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <queu_remove+0x80>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d3d8      	bcc.n	8004478 <queu_remove+0x24>
		}
	}
	return FALSE ;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200023a8 	.word	0x200023a8
 80044d4:	200023f4 	.word	0x200023f4

080044d8 <tasks_init>:

static uint32_t start_time_gyro = 0;
static uint32_t end_time_filtering_gyro= 0;


void tasks_init(system_t * sys_){
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <tasks_init+0xa0>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 80044e6:	2101      	movs	r1, #1
 80044e8:	2000      	movs	r0, #0
 80044ea:	f7ff fed1 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 80044ee:	2101      	movs	r1, #1
 80044f0:	2001      	movs	r0, #1
 80044f2:	f7ff fecd 	bl	8004290 <SCHEDULER_enable_task>

	SCHEDULER_enable_task(TASK_LED, TRUE);
 80044f6:	2101      	movs	r1, #1
 80044f8:	2003      	movs	r0, #3
 80044fa:	f7ff fec9 	bl	8004290 <SCHEDULER_enable_task>
	//SCHEDULER_enable_task(TASK_PRINTF, TRUE);
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 80044fe:	2101      	movs	r1, #1
 8004500:	2008      	movs	r0, #8
 8004502:	f7ff fec5 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 8004506:	2101      	movs	r1, #1
 8004508:	2005      	movs	r0, #5
 800450a:	f7ff fec1 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, TRUE);
 800450e:	2101      	movs	r1, #1
 8004510:	2004      	movs	r0, #4
 8004512:	f7ff febd 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 8004516:	2101      	movs	r1, #1
 8004518:	2007      	movs	r0, #7
 800451a:	f7ff feb9 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_UPDATE, TRUE);
 800451e:	2101      	movs	r1, #1
 8004520:	2009      	movs	r0, #9
 8004522:	f7ff feb5 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_CONTROLLER_CHANNEL_ANALYSIS, TRUE);
 8004526:	2101      	movs	r1, #1
 8004528:	200a      	movs	r0, #10
 800452a:	f7ff feb1 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 800452e:	2101      	movs	r1, #1
 8004530:	200b      	movs	r0, #11
 8004532:	f7ff fead 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 8004536:	2101      	movs	r1, #1
 8004538:	200c      	movs	r0, #12
 800453a:	f7ff fea9 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 800453e:	2101      	movs	r1, #1
 8004540:	200d      	movs	r0, #13
 8004542:	f7ff fea5 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_SELF_TEST, TRUE);
 8004546:	2101      	movs	r1, #1
 8004548:	200e      	movs	r0, #14
 800454a:	f7ff fea1 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_UPDATE, TRUE);
 800454e:	2101      	movs	r1, #1
 8004550:	200f      	movs	r0, #15
 8004552:	f7ff fe9d 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_TEMP, TRUE);
 8004556:	2101      	movs	r1, #1
 8004558:	2010      	movs	r0, #16
 800455a:	f7ff fe99 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_PRESSURE, TRUE);
 800455e:	2101      	movs	r1, #1
 8004560:	2011      	movs	r0, #17
 8004562:	f7ff fe95 	bl	8004290 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_BARO_ALTITUDE, TRUE);
 8004566:	2101      	movs	r1, #1
 8004568:	2012      	movs	r0, #18
 800456a:	f7ff fe91 	bl	8004290 <SCHEDULER_enable_task>

}
 800456e:	bf00      	nop
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20002460 	.word	0x20002460

0800457c <process_print_f>:

void process_print_f(uint32_t current_time_us){
 800457c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004580:	b088      	sub	sp, #32
 8004582:	af04      	add	r7, sp, #16
 8004584:	6078      	str	r0, [r7, #4]
	//printf("%d\t%d\t%d\t%d\t%d\t%d\n", data[0], data[1], data[2], data[3], data[4], data[5]);
//	gyro_t * gyro = &sys->sensors.gyro ;
//	acc_t * acc = &sys->sensors.acc ;
	orientation_t * ori = &sys->orientation ;
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <process_print_f+0x5c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800458e:	60fb      	str	r3, [r7, #12]
	//printf("%d\t%d\t%d\t%lu\n",sys->sensors.gyro.mpu->gyro_raw[0], sys->sensors.gyro.mpu->gyro_raw[1], sys->sensors.gyro.mpu->gyro_raw[2], TASK_get_task(TASK_GYRO)->it_duration_us);
	//printf("%f\t%f\t%f\t%f\t%f\t%f\t%lu\n",acc->raw[0], acc->raw[1], acc->raw[2],gyro->raw[0], gyro->raw[1], gyro->raw[2], TASK_get_task(TASK_GYRO_UPDATE)->duration_us);
	//printf("%f\t%f\t%lu\n", acc->filtered[ACC_AXE_Z], gyro->filtered[ACC_AXE_X], delta_1);
	//printf("%f\n", acc->filtered[GYRO_AXE_X]);
	//printf("%lu\n", delta_1);
	printf("%f\t%f\t%f\n", ori->angular_position[0], ori->angular_velocity[0], ori->acc_angles[0]);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fb ffd7 	bl	8000548 <__aeabi_f2d>
 800459a:	4680      	mov	r8, r0
 800459c:	4689      	mov	r9, r1
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fb ffcf 	bl	8000548 <__aeabi_f2d>
 80045aa:	4604      	mov	r4, r0
 80045ac:	460d      	mov	r5, r1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ffc8 	bl	8000548 <__aeabi_f2d>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045c0:	e9cd 4500 	strd	r4, r5, [sp]
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	4804      	ldr	r0, [pc, #16]	; (80045dc <process_print_f+0x60>)
 80045ca:	f00c fc99 	bl	8010f00 <iprintf>
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045d8:	20002460 	.word	0x20002460
 80045dc:	08014640 	.word	0x08014640

080045e0 <process_led>:


void process_led(uint32_t current_time_us){
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
//	uint8_t data[2];
//	uint8_t len = DATA_LOGGER_Get_Data(DATA_ID_ROLL_GYRO, data);
//	TELEMETRY_Send_Data(&sys->radio.telemetry, data, len);
	IHM_Update();
 80045e8:	f7fe fd64 	bl	80030b4 <IHM_Update>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <process_gyro_update>:

void process_gyro_update(uint32_t current_time_us){
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	start_time_gyro = current_time_us ;
 80045fc:	4a06      	ldr	r2, [pc, #24]	; (8004618 <process_gyro_update+0x24>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6013      	str	r3, [r2, #0]
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 8004602:	4b06      	ldr	r3, [pc, #24]	; (800461c <process_gyro_update+0x28>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3330      	adds	r3, #48	; 0x30
 8004608:	4618      	mov	r0, r3
 800460a:	f001 f9c5 	bl	8005998 <GYRO_ACC_update_dma>

}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20002464 	.word	0x20002464
 800461c:	20002460 	.word	0x20002460

08004620 <process_gyro_filter>:

void process_gyro_filter(uint32_t current_time_us){
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	end_time_filtering_gyro = current_time_us ;
 8004628:	4a06      	ldr	r2, [pc, #24]	; (8004644 <process_gyro_filter+0x24>)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6013      	str	r3, [r2, #0]

	GYRO_process_lpf(&sys->sensors.gyro);
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <process_gyro_filter+0x28>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3330      	adds	r3, #48	; 0x30
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f9cb 	bl	80059d0 <GYRO_process_lpf>

}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20002468 	.word	0x20002468
 8004648:	20002460 	.word	0x20002460

0800464c <process_acc_update>:

void process_acc_update(uint32_t current_time_us){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	ACC_update(&sys->sensors.acc);
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <process_acc_update+0x1c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	33a4      	adds	r3, #164	; 0xa4
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ff4e 	bl	80054fc <ACC_update>
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20002460 	.word	0x20002460

0800466c <process_acc_filter>:

void process_acc_filter(uint32_t current_time_us){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
	ACC_process_lpf(&sys->sensors.acc);
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <process_acc_filter+0x1c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	33a4      	adds	r3, #164	; 0xa4
 800467a:	4618      	mov	r0, r3
 800467c:	f000 ffee 	bl	800565c <ACC_process_lpf>
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	20002460 	.word	0x20002460

0800468c <process_event_main>:

void process_event_main(uint32_t current_time_us){
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 8004694:	2000      	movs	r0, #0
 8004696:	f7ff f86f 	bl	8003778 <EVENT_process>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <process_orientation_update>:

void process_orientation_update(uint32_t current_time_us){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

	//Estimation
	ORIENTATION_Update(&sys->orientation);
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <process_orientation_update+0x38>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fd fd95 	bl	80021e4 <ORIENTATION_Update>
	POSITION_Update(&sys->position);
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <process_orientation_update+0x38>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd ff3c 	bl	8002540 <POSITION_Update>

	//Regulation
	REGULATION_POSITION_Process();
 80046c8:	f000 fe6e 	bl	80053a8 <REGULATION_POSITION_Process>
	REGULATION_ORIENTATION_Process();
 80046cc:	f000 fcfa 	bl	80050c4 <REGULATION_ORIENTATION_Process>
	PROPULSION_Update_Motors();
 80046d0:	f000 f924 	bl	800491c <PROPULSION_Update_Motors>
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20002460 	.word	0x20002460

080046e0 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	SCHEDULER_task();
 80046e8:	f7ff fc44 	bl	8003f74 <SCHEDULER_task>
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <process_controller_channel_update>:

void process_controller_channel_update(uint32_t current_time_us){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
	if(CONTROLLER_Update_Channels_Array())
 80046fc:	f000 fc68 	bl	8004fd0 <CONTROLLER_Update_Channels_Array>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <process_controller_channel_update+0x1a>
		SCHEDULER_task_set_mode(TASK_CONTROLLER_CHANNEL_ANALYSIS, TASK_MODE_EVENT);
 8004706:	2102      	movs	r1, #2
 8004708:	200a      	movs	r0, #10
 800470a:	f7ff fddf 	bl	80042cc <SCHEDULER_task_set_mode>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <process_controller_channel_analysis>:

void process_controller_channel_analysis(uint32_t current_time_us){
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
	CONTROLLER_Update_Channels_Analysis();
 800471e:	f000 f9d9 	bl	8004ad4 <CONTROLLER_Update_Channels_Analysis>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <process_high_lvl>:

void process_high_lvl(uint32_t current_time_us){
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
	EVENT_process(TRUE);
 8004732:	2001      	movs	r0, #1
 8004734:	f7ff f820 	bl	8003778 <EVENT_process>
	FLIGHT_MODE_Main(current_time_us);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fe f9d3 	bl	8002ae4 <FLIGHT_MODE_Main>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <process_telemetry>:

void process_telemetry(uint32_t current_time_us){
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
	TELEMETRY_Process(current_time_us);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f003 fc24 	bl	8007f9c <TELEMETRY_Process>
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <process_logger>:

void process_logger(uint32_t current_time_us){
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	DATA_LOGGER_Main();
 8004764:	f7fd f970 	bl	8001a48 <DATA_LOGGER_Main>
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <process_self_test>:

void process_self_test(uint32_t current_time_us){
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	sys->soft.cpu_load = SCHEDULER_get_cpu_load();
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <process_self_test+0x24>)
 800477a:	681c      	ldr	r4, [r3, #0]
 800477c:	f7ff fc22 	bl	8003fc4 <SCHEDULER_get_cpu_load>
 8004780:	eef0 7a40 	vmov.f32	s15, s0
 8004784:	f604 53a4 	addw	r3, r4, #3492	; 0xda4
 8004788:	edc3 7a00 	vstr	s15, [r3]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}
 8004794:	20002460 	.word	0x20002460

08004798 <process_baro_update>:

void process_baro_update(uint32_t current_time_us){
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	SCHEDULER_reschedule_task(TASK_BARO_UPDATE, BARO_Main(&sys->sensors.baro));
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <process_baro_update+0x28>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80047a8:	4618      	mov	r0, r3
 80047aa:	f001 f803 	bl	80057b4 <BARO_Main>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	200f      	movs	r0, #15
 80047b4:	f7ff fdb6 	bl	8004324 <SCHEDULER_reschedule_task>
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20002460 	.word	0x20002460

080047c4 <process_baro_temp>:

void process_baro_temp(uint32_t current_time_us){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	BARO_compute_temp(&sys->sensors.baro);
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <process_baro_temp+0x20>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f855 	bl	8005884 <BARO_compute_temp>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20002460 	.word	0x20002460

080047e8 <process_baro_pressure>:

void process_baro_pressure(uint32_t current_time_us){
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	BARO_compute_pressure(&sys->sensors.baro);
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <process_baro_pressure+0x24>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f850 	bl	800589e <BARO_compute_pressure>
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RDY);
 80047fe:	200b      	movs	r0, #11
 8004800:	f7ff f862 	bl	80038c8 <EVENT_Set_flag>
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20002460 	.word	0x20002460

08004810 <process_baro_altitude>:

void process_baro_altitude(uint32_t current_time_us){
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
	BARO_compute_altitude(&sys->sensors.baro);
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <process_baro_altitude+0x24>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8004820:	4618      	mov	r0, r3
 8004822:	f001 f849 	bl	80058b8 <BARO_compute_altitude>
	EVENT_Set_flag(FLAG_BARO_ALTITUDE_RDY);
 8004826:	200c      	movs	r0, #12
 8004828:	f7ff f84e 	bl	80038c8 <EVENT_Set_flag>
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20002460 	.word	0x20002460

08004838 <TASK_get_task>:


};


task_t * TASK_get_task(task_ids_t id){
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	22d4      	movs	r2, #212	; 0xd4
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	4a04      	ldr	r2, [pc, #16]	; (800485c <TASK_get_task+0x24>)
 800484c:	4413      	add	r3, r2
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20000bf4 	.word	0x20000bf4

08004860 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004866:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8004868:	f003 fd9a 	bl	80083a0 <HAL_GetTick>
 800486c:	4603      	mov	r3, r0
 800486e:	3301      	adds	r3, #1
 8004870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004874:	fb02 f203 	mul.w	r2, r2, r3
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <TIME_us+0x50>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	490d      	ldr	r1, [pc, #52]	; (80048b4 <TIME_us+0x54>)
 8004880:	fba1 1303 	umull	r1, r3, r1, r3
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800488a:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 800488c:	4b0a      	ldr	r3, [pc, #40]	; (80048b8 <TIME_us+0x58>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d203      	bcs.n	800489e <TIME_us+0x3e>
		t_us += 1000;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800489c:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 800489e:	4a06      	ldr	r2, [pc, #24]	; (80048b8 <TIME_us+0x58>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6013      	str	r3, [r2, #0]

	return t_us;
 80048a4:	687b      	ldr	r3, [r7, #4]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	e000e010 	.word	0xe000e010
 80048b4:	18618619 	.word	0x18618619
 80048b8:	2000246c 	.word	0x2000246c

080048bc <TIME_delay_us_blocking>:

void TIME_delay_us_blocking(uint32_t duration_us){
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	uint32_t end_time = TIME_us() + duration_us;
 80048c4:	f7ff ffcc 	bl	8004860 <TIME_us>
 80048c8:	4602      	mov	r2, r0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]
	while(TIME_us() < end_time);
 80048d0:	bf00      	nop
 80048d2:	f7ff ffc5 	bl	8004860 <TIME_us>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4293      	cmp	r3, r2
 80048dc:	d8f9      	bhi.n	80048d2 <TIME_delay_us_blocking+0x16>
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <PROPULSION_Init>:
#define ROLL prop->consigne[PROP_CONSIGNE_ROLL]
#define PITCH prop->consigne[PROP_CONSIGNE_PITCH]
#define YAW prop->consigne[PROP_CONSIGNE_YAW]
#define THRUST prop->consigne[PROP_CONSIGNE_THRUST]

void PROPULSION_Init(propulsion_t * prop_, TIM_HandleTypeDef * htim){
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
	prop = prop_;
 80048f2:	4a09      	ldr	r2, [pc, #36]	; (8004918 <PROPULSION_Init+0x30>)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6013      	str	r3, [r2, #0]

	MOTORS_Init(&prop->motors, htim, prop->motors_outputs, TRUE);
 80048f8:	4b07      	ldr	r3, [pc, #28]	; (8004918 <PROPULSION_Init+0x30>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <PROPULSION_Init+0x30>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f103 0218 	add.w	r2, r3, #24
 8004906:	2301      	movs	r3, #1
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	f00b fcd9 	bl	80102c0 <MOTORS_Init>
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20002470 	.word	0x20002470

0800491c <PROPULSION_Update_Motors>:

void PROPULSION_Update_Motors(void){
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0

	//Mixage des sorties
	int16_t m1 = THRUST + PITCH - ROLL + YAW;
 8004922:	4b4c      	ldr	r3, [pc, #304]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800492a:	b29a      	uxth	r2, r3
 800492c:	4b49      	ldr	r3, [pc, #292]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004934:	b29b      	uxth	r3, r3
 8004936:	4413      	add	r3, r2
 8004938:	b29a      	uxth	r2, r3
 800493a:	4b46      	ldr	r3, [pc, #280]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004942:	b29b      	uxth	r3, r3
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	b29a      	uxth	r2, r3
 8004948:	4b42      	ldr	r3, [pc, #264]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004950:	b29b      	uxth	r3, r3
 8004952:	4413      	add	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	80fb      	strh	r3, [r7, #6]
	int16_t m2 = THRUST + PITCH + ROLL - YAW ;
 8004958:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004960:	b29a      	uxth	r2, r3
 8004962:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800496a:	b29b      	uxth	r3, r3
 800496c:	4413      	add	r3, r2
 800496e:	b29a      	uxth	r2, r3
 8004970:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004978:	b29b      	uxth	r3, r3
 800497a:	4413      	add	r3, r2
 800497c:	b29a      	uxth	r2, r3
 800497e:	4b35      	ldr	r3, [pc, #212]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004986:	b29b      	uxth	r3, r3
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	b29b      	uxth	r3, r3
 800498c:	80bb      	strh	r3, [r7, #4]
	int16_t m3 = THRUST - PITCH + ROLL + YAW ;
 800498e:	4b31      	ldr	r3, [pc, #196]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004996:	b29a      	uxth	r2, r3
 8004998:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4413      	add	r3, r2
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	807b      	strh	r3, [r7, #2]
	int16_t m4 = THRUST - PITCH - ROLL - YAW ;
 80049c4:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	b29a      	uxth	r2, r3
 80049dc:	4b1d      	ldr	r3, [pc, #116]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	4b1a      	ldr	r3, [pc, #104]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	803b      	strh	r3, [r7, #0]
	prop->motors_outputs[MOTOR_FL] = (uint16_t)((m1 > 0) ? m1 : 0);
 80049fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a02:	b21a      	sxth	r2, r3
 8004a04:	4b13      	ldr	r3, [pc, #76]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	b292      	uxth	r2, r2
 8004a0a:	83da      	strh	r2, [r3, #30]
	prop->motors_outputs[MOTOR_FR] = (uint16_t)((m2 > 0) ? m2 : 0);
 8004a0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004a10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a14:	b21a      	sxth	r2, r3
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b292      	uxth	r2, r2
 8004a1c:	839a      	strh	r2, [r3, #28]
	prop->motors_outputs[MOTOR_BR] = (uint16_t)((m3 > 0) ? m3 : 0);
 8004a1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a26:	b21a      	sxth	r2, r3
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	831a      	strh	r2, [r3, #24]
	prop->motors_outputs[MOTOR_BL] = (uint16_t)((m4 > 0) ? m4 : 0);
 8004a30:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004a38:	b21a      	sxth	r2, r3
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	b292      	uxth	r2, r2
 8004a40:	835a      	strh	r2, [r3, #26]
	MOTORS_Change_output(&prop->motors);
 8004a42:	4b04      	ldr	r3, [pc, #16]	; (8004a54 <PROPULSION_Update_Motors+0x138>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f00b fc71 	bl	801032e <MOTORS_Change_output>

}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20002470 	.word	0x20002470

08004a58 <CONTROLLER_Init>:
//Controller used
static controller_t * controller ;
//Private functions prototypes
static void flag_process();

void CONTROLLER_Init(controller_t * controller_, ibus_t * ibus){
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	//Sauvegarde la structure utilsié
	controller = controller_ ;
 8004a62:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6013      	str	r3, [r2, #0]
	controller->channels = ibus->channels ;
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	321a      	adds	r2, #26
 8004a70:	601a      	str	r2, [r3, #0]

	//Configuration du mode d'analyse pour les channels
	controller->analysis_mode[0] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8004a72:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2201      	movs	r2, #1
 8004a78:	711a      	strb	r2, [r3, #4]
	controller->analysis_mode[1] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	715a      	strb	r2, [r3, #5]
	controller->analysis_mode[2] = ANALYSIS_MODE_STICK_LVL ;
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2202      	movs	r2, #2
 8004a88:	719a      	strb	r2, [r3, #6]
	controller->analysis_mode[3] = ANALYSIS_MODE_STICK_DEAD_BAND ;
 8004a8a:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	71da      	strb	r2, [r3, #7]
	controller->analysis_mode[4] = ANALYSIS_MODE_SWITCH_MODE ;
 8004a92:	4b0f      	ldr	r3, [pc, #60]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2204      	movs	r2, #4
 8004a98:	721a      	strb	r2, [r3, #8]
	controller->analysis_mode[5] = ANALYSIS_MODE_SWITCH_MODE ;
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	725a      	strb	r2, [r3, #9]
	controller->analysis_mode[6] = ANALYSIS_MODE_SWITCH_MODE ;
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	729a      	strb	r2, [r3, #10]
	controller->analysis_mode[7] = ANALYSIS_MODE_SWITCH_MODE ;
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	72da      	strb	r2, [r3, #11]
	controller->analysis_mode[8] = ANALYSIS_MODE_BUTTON_PUSH ;
 8004ab2:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2206      	movs	r2, #6
 8004ab8:	731a      	strb	r2, [r3, #12]
	controller->analysis_mode[9] = ANALYSIS_MODE_BUTTON_ON_OFF ;
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <CONTROLLER_Init+0x78>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2205      	movs	r2, #5
 8004ac0:	735a      	strb	r2, [r3, #13]

}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20002474 	.word	0x20002474

08004ad4 <CONTROLLER_Update_Channels_Analysis>:

void CONTROLLER_Update_Channels_Analysis(void){
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
	//Analyse des channels
		bool_e button_state ;
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8004ada:	2300      	movs	r3, #0
 8004adc:	71fb      	strb	r3, [r7, #7]
 8004ade:	e1a0      	b.n	8004e22 <CONTROLLER_Update_Channels_Analysis+0x34e>
			switch (controller->analysis_mode[ch]) {
 8004ae0:	4bac      	ldr	r3, [pc, #688]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	4413      	add	r3, r2
 8004aea:	791b      	ldrb	r3, [r3, #4]
 8004aec:	2b06      	cmp	r3, #6
 8004aee:	f200 818d 	bhi.w	8004e0c <CONTROLLER_Update_Channels_Analysis+0x338>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <CONTROLLER_Update_Channels_Analysis+0x24>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004e0d 	.word	0x08004e0d
 8004afc:	08004b15 	.word	0x08004b15
 8004b00:	08004b61 	.word	0x08004b61
 8004b04:	08004e0d 	.word	0x08004e0d
 8004b08:	08004d6d 	.word	0x08004d6d
 8004b0c:	08004c29 	.word	0x08004c29
 8004b10:	08004cdd 	.word	0x08004cdd
				case ANALYSIS_MODE_NONE:
					//On fait R
					break;

				case ANALYSIS_MODE_STICK_DEAD_BAND :
					if(abs(controller->channels[ch] - 1500) < JOYCTICK_DEAD_BAND)
 8004b14:	4b9f      	ldr	r3, [pc, #636]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004b28:	f113 0f1d 	cmn.w	r3, #29
 8004b2c:	f2c0 8170 	blt.w	8004e10 <CONTROLLER_Update_Channels_Analysis+0x33c>
 8004b30:	4b98      	ldr	r3, [pc, #608]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8004b44:	2b1d      	cmp	r3, #29
 8004b46:	f300 8163 	bgt.w	8004e10 <CONTROLLER_Update_Channels_Analysis+0x33c>
						controller->channels[ch] = 1500 ;
 8004b4a:	4b92      	ldr	r3, [pc, #584]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b5c:	801a      	strh	r2, [r3, #0]
					break;
 8004b5e:	e157      	b.n	8004e10 <CONTROLLER_Update_Channels_Analysis+0x33c>

				case ANALYSIS_MODE_STICK_LVL :
					if(controller->channels[ch] > 1000 && controller->channels[ch] <= 1050)
 8004b60:	4b8c      	ldr	r3, [pc, #560]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b74:	d914      	bls.n	8004ba0 <CONTROLLER_Update_Channels_Analysis+0xcc>
 8004b76:	4b87      	ldr	r3, [pc, #540]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4413      	add	r3, r2
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	f240 421a 	movw	r2, #1050	; 0x41a
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d808      	bhi.n	8004ba0 <CONTROLLER_Update_Channels_Analysis+0xcc>
						controller->throttle_lvl[ch] = THROTTLE_LVL_NULL ;
 8004b8e:	4b81      	ldr	r3, [pc, #516]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	4413      	add	r3, r2
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2020 	strb.w	r2, [r3, #32]
 8004b9e:	e042      	b.n	8004c26 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1050 && controller->channels[ch] <= 1150)
 8004ba0:	4b7c      	ldr	r3, [pc, #496]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	f240 421a 	movw	r2, #1050	; 0x41a
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d914      	bls.n	8004be2 <CONTROLLER_Update_Channels_Analysis+0x10e>
 8004bb8:	4b76      	ldr	r3, [pc, #472]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	f240 427e 	movw	r2, #1150	; 0x47e
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d808      	bhi.n	8004be2 <CONTROLLER_Update_Channels_Analysis+0x10e>
						controller->throttle_lvl[ch] = THROTTLE_LVL_LOW ;
 8004bd0:	4b70      	ldr	r3, [pc, #448]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	4413      	add	r3, r2
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2020 	strb.w	r2, [r3, #32]
 8004be0:	e021      	b.n	8004c26 <CONTROLLER_Update_Channels_Analysis+0x152>
					else if(controller->channels[ch] > 1150 && controller->channels[ch] < 2000)
 8004be2:	4b6c      	ldr	r3, [pc, #432]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	f240 427e 	movw	r2, #1150	; 0x47e
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	f240 810c 	bls.w	8004e14 <CONTROLLER_Update_Channels_Analysis+0x340>
 8004bfc:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004c10:	f080 8100 	bcs.w	8004e14 <CONTROLLER_Update_Channels_Analysis+0x340>
						controller->throttle_lvl[ch] = THROTTLE_LVL_HIGH ;
 8004c14:	4b5f      	ldr	r3, [pc, #380]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2020 	strb.w	r2, [r3, #32]


					break;
 8004c24:	e0f6      	b.n	8004e14 <CONTROLLER_Update_Channels_Analysis+0x340>
 8004c26:	e0f5      	b.n	8004e14 <CONTROLLER_Update_Channels_Analysis+0x340>

				case ANALYSIS_MODE_BUTTON_ON_OFF :
					//Active le boutton dans le code
					if(!controller->button_on_off[ch])
 8004c28:	4b5a      	ldr	r3, [pc, #360]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c30:	4413      	add	r3, r2
 8004c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <CONTROLLER_Update_Channels_Analysis+0x176>
						controller->button_on_off[ch] = BUTTON_OFF ;
 8004c3a:	4b56      	ldr	r3, [pc, #344]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c42:	4413      	add	r3, r2
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8004c4a:	4b52      	ldr	r3, [pc, #328]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	bf8c      	ite	hi
 8004c62:	2301      	movhi	r3, #1
 8004c64:	2300      	movls	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8004c6a:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	4413      	add	r3, r2
 8004c74:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004c78:	461a      	mov	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d022      	beq.n	8004cc6 <CONTROLLER_Update_Channels_Analysis+0x1f2>
 8004c80:	4b44      	ldr	r3, [pc, #272]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d119      	bne.n	8004cc6 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						if(controller->button_on_off[ch] == BUTTON_ON)
 8004c92:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d108      	bne.n	8004cb6 <CONTROLLER_Update_Channels_Analysis+0x1e2>
							controller->button_on_off[ch] = BUTTON_OFF ;
 8004ca4:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cac:	4413      	add	r3, r2
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cb4:	e007      	b.n	8004cc6 <CONTROLLER_Update_Channels_Analysis+0x1f2>
						else
							controller->button_on_off[ch] = BUTTON_ON ;
 8004cb6:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}

					controller->button_state[ch] = button_state ;
 8004cc6:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	b2c9      	uxtb	r1, r1
 8004cd2:	4413      	add	r3, r2
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8004cda:	e09c      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>

				case ANALYSIS_MODE_BUTTON_PUSH :
					//Active le boutton dans le code
					if(!controller->button_pushed[ch])
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d107      	bne.n	8004cfe <CONTROLLER_Update_Channels_Analysis+0x22a>
						controller->button_pushed[ch] = BUTTON_PUSHED_NO_REQUEST ;
 8004cee:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					//Buton state
					button_state = controller->channels[ch] > 1500 ;
 8004cfe:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004d12:	4293      	cmp	r3, r2
 8004d14:	bf8c      	ite	hi
 8004d16:	2301      	movhi	r3, #1
 8004d18:	2300      	movls	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	603b      	str	r3, [r7, #0]
					//If different from previous state and previous was low
					if(button_state != controller->button_state[ch] && controller->button_state[ch] == 0){
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d26:	4413      	add	r3, r2
 8004d28:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d010      	beq.n	8004d56 <CONTROLLER_Update_Channels_Analysis+0x282>
 8004d34:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <CONTROLLER_Update_Channels_Analysis+0x282>
						controller->button_pushed[ch] = BUTTON_PUSHED_REQUEST ;
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	4413      	add	r3, r2
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
					}

					controller->button_state[ch] = button_state ;
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	b2c9      	uxtb	r1, r1
 8004d62:	4413      	add	r3, r2
 8004d64:	460a      	mov	r2, r1
 8004d66:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					break;
 8004d6a:	e054      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>
				case ANALYSIS_MODE_SEQUENCE:
					//todo analyse de séquences sur les switchs
					break;

				case ANALYSIS_MODE_SWITCH_MODE:
					if(controller->channels[ch] < 1300)
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	f240 5213 	movw	r2, #1299	; 0x513
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d809      	bhi.n	8004d98 <CONTROLLER_Update_Channels_Analysis+0x2c4>
						controller->switch_pos[ch] = SWITCH_POS_1 ;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <CONTROLLER_Update_Channels_Analysis+0x2c0>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	749a      	strb	r2, [r3, #18]
						controller->switch_pos[ch] = SWITCH_POS_2 ;
					else if(controller->channels[ch] > 1600)
						controller->switch_pos[ch] = SWITCH_POS_3 ;
					else
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
					break;
 8004d92:	e040      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>
 8004d94:	20002474 	.word	0x20002474
					else if(controller->channels[ch] > 1300 && controller->channels[ch] < 1600)
 8004d98:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	f240 5214 	movw	r2, #1300	; 0x514
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d912      	bls.n	8004dd6 <CONTROLLER_Update_Channels_Analysis+0x302>
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dc4:	d207      	bcs.n	8004dd6 <CONTROLLER_Update_Channels_Analysis+0x302>
						controller->switch_pos[ch] = SWITCH_POS_2 ;
 8004dc6:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dce:	4413      	add	r3, r2
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	749a      	strb	r2, [r3, #18]
					break;
 8004dd4:	e01f      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>
					else if(controller->channels[ch] > 1600)
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	4413      	add	r3, r2
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dea:	d907      	bls.n	8004dfc <CONTROLLER_Update_Channels_Analysis+0x328>
						controller->switch_pos[ch] = SWITCH_POS_3 ;
 8004dec:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df4:	4413      	add	r3, r2
 8004df6:	2202      	movs	r2, #2
 8004df8:	749a      	strb	r2, [r3, #18]
					break;
 8004dfa:	e00c      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>
						controller->switch_pos[ch] = SWITCH_POS_ERROR ;
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <CONTROLLER_Update_Channels_Analysis+0x364>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e04:	4413      	add	r3, r2
 8004e06:	2203      	movs	r2, #3
 8004e08:	749a      	strb	r2, [r3, #18]
					break;
 8004e0a:	e004      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>
				default:
					break;
 8004e0c:	bf00      	nop
 8004e0e:	e002      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8004e10:	bf00      	nop
 8004e12:	e000      	b.n	8004e16 <CONTROLLER_Update_Channels_Analysis+0x342>
					break;
 8004e14:	bf00      	nop
		for(int8_t ch = 0; ch < NB_CHANNEL; ch++ ){
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	71fb      	strb	r3, [r7, #7]
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	2b09      	cmp	r3, #9
 8004e28:	f77f ae5a 	ble.w	8004ae0 <CONTROLLER_Update_Channels_Analysis+0xc>
			}
		}

		flag_process();
 8004e2c:	f000 f806 	bl	8004e3c <flag_process>
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20002474 	.word	0x20002474

08004e3c <flag_process>:

static void flag_process()
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
	//Throttle lvl
	switch(controller->throttle_lvl[2]){
 8004e40:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <flag_process+0x190>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d00d      	beq.n	8004e68 <flag_process+0x2c>
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d015      	beq.n	8004e7c <flag_process+0x40>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d11d      	bne.n	8004e90 <flag_process+0x54>
		case THROTTLE_LVL_NULL :
			EVENT_Set_flag(FLAG_THROTTLE_NULL);
 8004e54:	201c      	movs	r0, #28
 8004e56:	f7fe fd37 	bl	80038c8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8004e5a:	201b      	movs	r0, #27
 8004e5c:	f7fe fd4c 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8004e60:	201a      	movs	r0, #26
 8004e62:	f7fe fd49 	bl	80038f8 <EVENT_Clean_flag>
			break;
 8004e66:	e013      	b.n	8004e90 <flag_process+0x54>
		case THROTTLE_LVL_LOW :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8004e68:	201c      	movs	r0, #28
 8004e6a:	f7fe fd45 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_LOW);
 8004e6e:	201b      	movs	r0, #27
 8004e70:	f7fe fd2a 	bl	80038c8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_HIGH);
 8004e74:	201a      	movs	r0, #26
 8004e76:	f7fe fd3f 	bl	80038f8 <EVENT_Clean_flag>
			break;
 8004e7a:	e009      	b.n	8004e90 <flag_process+0x54>
		case THROTTLE_LVL_HIGH :
			EVENT_Clean_flag(FLAG_THROTTLE_NULL);
 8004e7c:	201c      	movs	r0, #28
 8004e7e:	f7fe fd3b 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_THROTTLE_LOW);
 8004e82:	201b      	movs	r0, #27
 8004e84:	f7fe fd38 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_THROTTLE_HIGH);
 8004e88:	201a      	movs	r0, #26
 8004e8a:	f7fe fd1d 	bl	80038c8 <EVENT_Set_flag>
			break;
 8004e8e:	bf00      	nop
	}

	//Switch 1 (ch5 soit ch[4])
	if(controller->switch_pos[4] == SWITCH_POS_1){
 8004e90:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <flag_process+0x190>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	7d9b      	ldrb	r3, [r3, #22]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <flag_process+0x6c>
		EVENT_Set_flag(FLAG_CHAN_5_POS_1);
 8004e9a:	200e      	movs	r0, #14
 8004e9c:	f7fe fd14 	bl	80038c8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_5_POS_3);
 8004ea0:	200f      	movs	r0, #15
 8004ea2:	f7fe fd29 	bl	80038f8 <EVENT_Clean_flag>
 8004ea6:	e005      	b.n	8004eb4 <flag_process+0x78>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_5_POS_1);
 8004ea8:	200e      	movs	r0, #14
 8004eaa:	f7fe fd25 	bl	80038f8 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_5_POS_3);
 8004eae:	200f      	movs	r0, #15
 8004eb0:	f7fe fd0a 	bl	80038c8 <EVENT_Set_flag>
	}
	//Switch 2(ch6 soit ch[5])
	switch(controller->switch_pos[5]){
 8004eb4:	4b45      	ldr	r3, [pc, #276]	; (8004fcc <flag_process+0x190>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	7ddb      	ldrb	r3, [r3, #23]
 8004eba:	2b03      	cmp	r3, #3
 8004ebc:	d828      	bhi.n	8004f10 <flag_process+0xd4>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <flag_process+0x88>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004ed5 	.word	0x08004ed5
 8004ec8:	08004ee9 	.word	0x08004ee9
 8004ecc:	08004efd 	.word	0x08004efd
 8004ed0:	08004f11 	.word	0x08004f11
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_6_POS_1);
 8004ed4:	2010      	movs	r0, #16
 8004ed6:	f7fe fcf7 	bl	80038c8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8004eda:	2011      	movs	r0, #17
 8004edc:	f7fe fd0c 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8004ee0:	2012      	movs	r0, #18
 8004ee2:	f7fe fd09 	bl	80038f8 <EVENT_Clean_flag>
			break;
 8004ee6:	e013      	b.n	8004f10 <flag_process+0xd4>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8004ee8:	2010      	movs	r0, #16
 8004eea:	f7fe fd05 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_2);
 8004eee:	2011      	movs	r0, #17
 8004ef0:	f7fe fcea 	bl	80038c8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_3);
 8004ef4:	2012      	movs	r0, #18
 8004ef6:	f7fe fcff 	bl	80038f8 <EVENT_Clean_flag>
			break;
 8004efa:	e009      	b.n	8004f10 <flag_process+0xd4>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_6_POS_1);
 8004efc:	2010      	movs	r0, #16
 8004efe:	f7fe fcfb 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_6_POS_2);
 8004f02:	2011      	movs	r0, #17
 8004f04:	f7fe fcf8 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_6_POS_3);
 8004f08:	2012      	movs	r0, #18
 8004f0a:	f7fe fcdd 	bl	80038c8 <EVENT_Set_flag>
			break;
 8004f0e:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 3(ch7 soit ch[6])
	switch(controller->switch_pos[6]){
 8004f10:	4b2e      	ldr	r3, [pc, #184]	; (8004fcc <flag_process+0x190>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	7e1b      	ldrb	r3, [r3, #24]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d828      	bhi.n	8004f6c <flag_process+0x130>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <flag_process+0xe4>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f31 	.word	0x08004f31
 8004f24:	08004f45 	.word	0x08004f45
 8004f28:	08004f59 	.word	0x08004f59
 8004f2c:	08004f6d 	.word	0x08004f6d
		case SWITCH_POS_1:
			EVENT_Set_flag(FLAG_CHAN_7_POS_1);
 8004f30:	2013      	movs	r0, #19
 8004f32:	f7fe fcc9 	bl	80038c8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8004f36:	2014      	movs	r0, #20
 8004f38:	f7fe fcde 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8004f3c:	2015      	movs	r0, #21
 8004f3e:	f7fe fcdb 	bl	80038f8 <EVENT_Clean_flag>
			break;
 8004f42:	e013      	b.n	8004f6c <flag_process+0x130>
		case SWITCH_POS_2:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8004f44:	2013      	movs	r0, #19
 8004f46:	f7fe fcd7 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_2);
 8004f4a:	2014      	movs	r0, #20
 8004f4c:	f7fe fcbc 	bl	80038c8 <EVENT_Set_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_3);
 8004f50:	2015      	movs	r0, #21
 8004f52:	f7fe fcd1 	bl	80038f8 <EVENT_Clean_flag>
			break;
 8004f56:	e009      	b.n	8004f6c <flag_process+0x130>
		case SWITCH_POS_3:
			EVENT_Clean_flag(FLAG_CHAN_7_POS_1);
 8004f58:	2013      	movs	r0, #19
 8004f5a:	f7fe fccd 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_CHAN_7_POS_2);
 8004f5e:	2014      	movs	r0, #20
 8004f60:	f7fe fcca 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Set_flag(FLAG_CHAN_7_POS_3);
 8004f64:	2015      	movs	r0, #21
 8004f66:	f7fe fcaf 	bl	80038c8 <EVENT_Set_flag>
			break;
 8004f6a:	bf00      	nop
		case SWITCH_POS_ERROR:
			break;
	}
	//Switch 4 (ch8 soit ch[7])
	if(controller->switch_pos[7] == SWITCH_POS_1){
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <flag_process+0x190>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	7e5b      	ldrb	r3, [r3, #25]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <flag_process+0x148>
		EVENT_Set_flag(FLAG_CHAN_8_POS_1);
 8004f76:	2016      	movs	r0, #22
 8004f78:	f7fe fca6 	bl	80038c8 <EVENT_Set_flag>
		EVENT_Clean_flag(FLAG_CHAN_8_POS_3);
 8004f7c:	2017      	movs	r0, #23
 8004f7e:	f7fe fcbb 	bl	80038f8 <EVENT_Clean_flag>
 8004f82:	e005      	b.n	8004f90 <flag_process+0x154>
	}else{
		EVENT_Clean_flag(FLAG_CHAN_8_POS_1);
 8004f84:	2016      	movs	r0, #22
 8004f86:	f7fe fcb7 	bl	80038f8 <EVENT_Clean_flag>
		EVENT_Set_flag(FLAG_CHAN_8_POS_3);
 8004f8a:	2017      	movs	r0, #23
 8004f8c:	f7fe fc9c 	bl	80038c8 <EVENT_Set_flag>
	}

	//Button 1 (ch9 soit ch[8]) en mode push
	if(controller->button_pushed[8] == BUTTON_PUSHED_REQUEST){
 8004f90:	4b0e      	ldr	r3, [pc, #56]	; (8004fcc <flag_process+0x190>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d107      	bne.n	8004fac <flag_process+0x170>
		EVENT_Set_flag(FLAG_CHAN_9_PUSH);
 8004f9c:	2018      	movs	r0, #24
 8004f9e:	f7fe fc93 	bl	80038c8 <EVENT_Set_flag>
		controller->button_pushed[8] = BUTTON_PUSHED_NO_REQUEST ;
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <flag_process+0x190>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	}

	//Button 2 (ch10 soit ch[9]) en mode on/off
	if(controller->button_on_off[9] == BUTTON_ON)
 8004fac:	4b07      	ldr	r3, [pc, #28]	; (8004fcc <flag_process+0x190>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d103      	bne.n	8004fc0 <flag_process+0x184>
		EVENT_Set_flag(FLAG_CHAN_10_ON);
 8004fb8:	2019      	movs	r0, #25
 8004fba:	f7fe fc85 	bl	80038c8 <EVENT_Set_flag>
	else
		EVENT_Clean_flag(FLAG_CHAN_10_ON);



}
 8004fbe:	e002      	b.n	8004fc6 <flag_process+0x18a>
		EVENT_Clean_flag(FLAG_CHAN_10_ON);
 8004fc0:	2019      	movs	r0, #25
 8004fc2:	f7fe fc99 	bl	80038f8 <EVENT_Clean_flag>
}
 8004fc6:	bf00      	nop
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20002474 	.word	0x20002474

08004fd0 <CONTROLLER_Update_Channels_Array>:

bool_e CONTROLLER_Update_Channels_Array(void){
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
	//Utilisation de l'ibus atm
	return IBUS_Channel_Update();
 8004fd4:	f00a ffec 	bl	800ffb0 <IBUS_Channel_Update>
 8004fd8:	4603      	mov	r3, r0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <CONTROLLER_Rx_Data_Rdy>:

void CONTROLLER_Rx_Data_Rdy(void){
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_IBUS_DATA_RDY);
 8004fe2:	200d      	movs	r0, #13
 8004fe4:	f7fe fc70 	bl	80038c8 <EVENT_Set_flag>
}
 8004fe8:	bf00      	nop
 8004fea:	bd80      	pop	{r7, pc}

08004fec <REGULATION_ORIENTATION_Init>:

float pid_angle_settings_roll[PID_NB_SETTINGS] = {6.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};
float pid_angle_settings_pitch[PID_NB_SETTINGS] = {7.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
	orientation = orientation_ ;
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	; (8005078 <REGULATION_ORIENTATION_Init+0x8c>)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6013      	str	r3, [r2, #0]
	regu_orientation = regu_orientation_ ;
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6013      	str	r3, [r2, #0]
	regu_orientation->mode = REGULATION_ORIENTATION_MODE_OFF ;
 8005004:	4b1d      	ldr	r3, [pc, #116]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2200      	movs	r2, #0
 800500a:	711a      	strb	r2, [r3, #4]
	regu_orientation->outputs = output ;
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8


	//Init PIDs angular speed
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], pid_velocity_settings_roll, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 8005016:	4b19      	ldr	r3, [pc, #100]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f103 0008 	add.w	r0, r3, #8
 800501e:	4b18      	ldr	r3, [pc, #96]	; (8005080 <REGULATION_ORIENTATION_Init+0x94>)
 8005020:	2201      	movs	r2, #1
 8005022:	4918      	ldr	r1, [pc, #96]	; (8005084 <REGULATION_ORIENTATION_Init+0x98>)
 8005024:	f00b fa86 	bl	8010534 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], pid_velocity_settings_pitch, FILTER_SECOND_ORDER, filter_pid_velocity_roll_pitch);
 8005028:	4b14      	ldr	r3, [pc, #80]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8005030:	4b13      	ldr	r3, [pc, #76]	; (8005080 <REGULATION_ORIENTATION_Init+0x94>)
 8005032:	2201      	movs	r2, #1
 8005034:	4914      	ldr	r1, [pc, #80]	; (8005088 <REGULATION_ORIENTATION_Init+0x9c>)
 8005036:	f00b fa7d 	bl	8010534 <PID_init>
	PID_init(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], pid_velocity_settings_yaw, FILTER_FIRST_ORDER, filter_pid_velocity_yaw);
 800503a:	4b10      	ldr	r3, [pc, #64]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8005042:	4b12      	ldr	r3, [pc, #72]	; (800508c <REGULATION_ORIENTATION_Init+0xa0>)
 8005044:	2200      	movs	r2, #0
 8005046:	4912      	ldr	r1, [pc, #72]	; (8005090 <REGULATION_ORIENTATION_Init+0xa4>)
 8005048:	f00b fa74 	bl	8010534 <PID_init>


	//Init PIDs angular position
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], pid_angle_settings_roll, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 800504c:	4b0b      	ldr	r3, [pc, #44]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <REGULATION_ORIENTATION_Init+0xa8>)
 8005056:	2200      	movs	r2, #0
 8005058:	490f      	ldr	r1, [pc, #60]	; (8005098 <REGULATION_ORIENTATION_Init+0xac>)
 800505a:	f00b fa6b 	bl	8010534 <PID_init>
	PID_init(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], pid_angle_settings_pitch, FILTER_FIRST_ORDER, filter_pid_angle_roll_pitch);
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <REGULATION_ORIENTATION_Init+0x90>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f503 709c 	add.w	r0, r3, #312	; 0x138
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <REGULATION_ORIENTATION_Init+0xa8>)
 8005068:	2200      	movs	r2, #0
 800506a:	490c      	ldr	r1, [pc, #48]	; (800509c <REGULATION_ORIENTATION_Init+0xb0>)
 800506c:	f00b fa62 	bl	8010534 <PID_init>


}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	2000247c 	.word	0x2000247c
 800507c:	20002478 	.word	0x20002478
 8005080:	20001bb0 	.word	0x20001bb0
 8005084:	20001bc8 	.word	0x20001bc8
 8005088:	20001bdc 	.word	0x20001bdc
 800508c:	20001bbc 	.word	0x20001bbc
 8005090:	20001bf0 	.word	0x20001bf0
 8005094:	20001c04 	.word	0x20001c04
 8005098:	20001c10 	.word	0x20001c10
 800509c:	20001c24 	.word	0x20001c24

080050a0 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_orientation_mode_e regu_mode){
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
	regu_orientation->mode = regu_mode;
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <REGULATION_ORIENTATION_Set_Regulation_Mode+0x20>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	79fa      	ldrb	r2, [r7, #7]
 80050b0:	711a      	strb	r2, [r3, #4]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20002478 	.word	0x20002478

080050c4 <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0

	switch(regu_orientation->mode){
 80050c8:	4b90      	ldr	r3, [pc, #576]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	791b      	ldrb	r3, [r3, #4]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d019      	beq.n	8005106 <REGULATION_ORIENTATION_Process+0x42>
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d07c      	beq.n	80051d0 <REGULATION_ORIENTATION_Process+0x10c>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d000      	beq.n	80050dc <REGULATION_ORIENTATION_Process+0x18>
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
			break;
	}

}
 80050da:	e114      	b.n	8005306 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = 0;
 80050dc:	4b8b      	ldr	r3, [pc, #556]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80050e4:	2200      	movs	r2, #0
 80050e6:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = 0;
 80050e8:	4b88      	ldr	r3, [pc, #544]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80050f0:	3302      	adds	r3, #2
 80050f2:	2200      	movs	r2, #0
 80050f4:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = 0;
 80050f6:	4b85      	ldr	r3, [pc, #532]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80050fe:	3304      	adds	r3, #4
 8005100:	2200      	movs	r2, #0
 8005102:	801a      	strh	r2, [r3, #0]
			break;
 8005104:	e0ff      	b.n	8005306 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 8005106:	4b81      	ldr	r3, [pc, #516]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f103 0208 	add.w	r2, r3, #8
 800510e:	4b7f      	ldr	r3, [pc, #508]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 8005116:	4b7e      	ldr	r3, [pc, #504]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	ed93 7a00 	vldr	s14, [r3]
 8005120:	eef0 0a47 	vmov.f32	s1, s14
 8005124:	eeb0 0a67 	vmov.f32	s0, s15
 8005128:	4610      	mov	r0, r2
 800512a:	f00b f967 	bl	80103fc <PID_compute>
 800512e:	eef0 7a40 	vmov.f32	s15, s0
 8005132:	4b76      	ldr	r3, [pc, #472]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800513a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800513e:	ee17 2a90 	vmov	r2, s15
 8005142:	b212      	sxth	r2, r2
 8005144:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 8005146:	4b71      	ldr	r3, [pc, #452]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800514e:	4b6f      	ldr	r3, [pc, #444]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8005156:	4b6e      	ldr	r3, [pc, #440]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	ed93 7a00 	vldr	s14, [r3]
 8005162:	eef0 0a47 	vmov.f32	s1, s14
 8005166:	eeb0 0a67 	vmov.f32	s0, s15
 800516a:	4610      	mov	r0, r2
 800516c:	f00b f946 	bl	80103fc <PID_compute>
 8005170:	eef0 7a40 	vmov.f32	s15, s0
 8005174:	4b65      	ldr	r3, [pc, #404]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800517c:	3302      	adds	r3, #2
 800517e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005182:	ee17 2a90 	vmov	r2, s15
 8005186:	b212      	sxth	r2, r2
 8005188:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 800518a:	4b60      	ldr	r3, [pc, #384]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8005192:	4b5e      	ldr	r3, [pc, #376]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 800519a:	4b5d      	ldr	r3, [pc, #372]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	3308      	adds	r3, #8
 80051a2:	ed93 7a00 	vldr	s14, [r3]
 80051a6:	eef0 0a47 	vmov.f32	s1, s14
 80051aa:	eeb0 0a67 	vmov.f32	s0, s15
 80051ae:	4610      	mov	r0, r2
 80051b0:	f00b f924 	bl	80103fc <PID_compute>
 80051b4:	eef0 7a40 	vmov.f32	s15, s0
 80051b8:	4b54      	ldr	r3, [pc, #336]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80051c0:	3304      	adds	r3, #4
 80051c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051c6:	ee17 2a90 	vmov	r2, s15
 80051ca:	b212      	sxth	r2, r2
 80051cc:	801a      	strh	r2, [r3, #0]
			break;
 80051ce:	e09a      	b.n	8005306 <REGULATION_ORIENTATION_Process+0x242>
			regu_orientation->consigne_angular_speed[ORIENTATION_ROLL] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_ROLL], regu_orientation->consigne_angular_pos[ORIENTATION_ROLL], orientation->angular_position[ORIENTATION_ROLL]);
 80051d0:	4b4e      	ldr	r3, [pc, #312]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80051d8:	4b4c      	ldr	r3, [pc, #304]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	edd3 7a74 	vldr	s15, [r3, #464]	; 0x1d0
 80051e0:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	ed93 7a00 	vldr	s14, [r3]
 80051e8:	eef0 0a47 	vmov.f32	s1, s14
 80051ec:	eeb0 0a67 	vmov.f32	s0, s15
 80051f0:	4610      	mov	r0, r2
 80051f2:	f00b f903 	bl	80103fc <PID_compute>
 80051f6:	eef0 7a40 	vmov.f32	s15, s0
 80051fa:	4b44      	ldr	r3, [pc, #272]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	eef1 7a67 	vneg.f32	s15, s15
 8005202:	edc3 7a77 	vstr	s15, [r3, #476]	; 0x1dc
			regu_orientation->consigne_angular_speed[ORIENTATION_PITCH] = -PID_compute(&regu_orientation->pid_angular_pos[ORIENTATION_PITCH], regu_orientation->consigne_angular_pos[ORIENTATION_PITCH], orientation->angular_position[ORIENTATION_PITCH]);
 8005206:	4b41      	ldr	r3, [pc, #260]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800520e:	4b3f      	ldr	r3, [pc, #252]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	edd3 7a75 	vldr	s15, [r3, #468]	; 0x1d4
 8005216:	4b3e      	ldr	r3, [pc, #248]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	ed93 7a01 	vldr	s14, [r3, #4]
 800521e:	eef0 0a47 	vmov.f32	s1, s14
 8005222:	eeb0 0a67 	vmov.f32	s0, s15
 8005226:	4610      	mov	r0, r2
 8005228:	f00b f8e8 	bl	80103fc <PID_compute>
 800522c:	eef0 7a40 	vmov.f32	s15, s0
 8005230:	4b36      	ldr	r3, [pc, #216]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	eef1 7a67 	vneg.f32	s15, s15
 8005238:	edc3 7a78 	vstr	s15, [r3, #480]	; 0x1e0
			regu_orientation->outputs[PROP_CONSIGNE_ROLL] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_ROLL], regu_orientation->consigne_angular_speed[ORIENTATION_ROLL], orientation->angular_velocity[ORIENTATION_ROLL]);
 800523c:	4b33      	ldr	r3, [pc, #204]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f103 0208 	add.w	r2, r3, #8
 8005244:	4b31      	ldr	r3, [pc, #196]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	edd3 7a77 	vldr	s15, [r3, #476]	; 0x1dc
 800524c:	4b30      	ldr	r3, [pc, #192]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	ed93 7a00 	vldr	s14, [r3]
 8005256:	eef0 0a47 	vmov.f32	s1, s14
 800525a:	eeb0 0a67 	vmov.f32	s0, s15
 800525e:	4610      	mov	r0, r2
 8005260:	f00b f8cc 	bl	80103fc <PID_compute>
 8005264:	eef0 7a40 	vmov.f32	s15, s0
 8005268:	4b28      	ldr	r3, [pc, #160]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005270:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005274:	ee17 2a90 	vmov	r2, s15
 8005278:	b212      	sxth	r2, r2
 800527a:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_PITCH] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_PITCH], regu_orientation->consigne_angular_speed[ORIENTATION_PITCH], orientation->angular_velocity[ORIENTATION_PITCH]);
 800527c:	4b23      	ldr	r3, [pc, #140]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005284:	4b21      	ldr	r3, [pc, #132]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 800528c:	4b20      	ldr	r3, [pc, #128]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	3304      	adds	r3, #4
 8005294:	ed93 7a00 	vldr	s14, [r3]
 8005298:	eef0 0a47 	vmov.f32	s1, s14
 800529c:	eeb0 0a67 	vmov.f32	s0, s15
 80052a0:	4610      	mov	r0, r2
 80052a2:	f00b f8ab 	bl	80103fc <PID_compute>
 80052a6:	eef0 7a40 	vmov.f32	s15, s0
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80052b2:	3302      	adds	r3, #2
 80052b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052b8:	ee17 2a90 	vmov	r2, s15
 80052bc:	b212      	sxth	r2, r2
 80052be:	801a      	strh	r2, [r3, #0]
			regu_orientation->outputs[PROP_CONSIGNE_YAW] = (int16_t)PID_compute(&regu_orientation->pid_angular_speed[ORIENTATION_YAW], regu_orientation->consigne_angular_speed[ORIENTATION_YAW], orientation->angular_velocity[ORIENTATION_YAW]);
 80052c0:	4b12      	ldr	r3, [pc, #72]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80052c8:	4b10      	ldr	r3, [pc, #64]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	edd3 7a79 	vldr	s15, [r3, #484]	; 0x1e4
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <REGULATION_ORIENTATION_Process+0x24c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	3308      	adds	r3, #8
 80052d8:	ed93 7a00 	vldr	s14, [r3]
 80052dc:	eef0 0a47 	vmov.f32	s1, s14
 80052e0:	eeb0 0a67 	vmov.f32	s0, s15
 80052e4:	4610      	mov	r0, r2
 80052e6:	f00b f889 	bl	80103fc <PID_compute>
 80052ea:	eef0 7a40 	vmov.f32	s15, s0
 80052ee:	4b07      	ldr	r3, [pc, #28]	; (800530c <REGULATION_ORIENTATION_Process+0x248>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80052f6:	3304      	adds	r3, #4
 80052f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052fc:	ee17 2a90 	vmov	r2, s15
 8005300:	b212      	sxth	r2, r2
 8005302:	801a      	strh	r2, [r3, #0]
			break;
 8005304:	bf00      	nop
}
 8005306:	bf00      	nop
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20002478 	.word	0x20002478
 8005310:	2000247c 	.word	0x2000247c

08005314 <REGULATION_POSITION_Init>:
float filter_pid_velocity_z[3] = {0.04f, 1.6f, -0.64f};

float pid_position_z_settings[PID_NB_SETTINGS] = {0.0f, 0.0f, 0.0f, REGU_POSITION_FREQUENCY, 20};
float filter_pid_position_z[3] = {0.04f, 1.6f, -0.64f};

void REGULATION_POSITION_Init(regu_position_t * regu_position_, position_t * position, int16_t * outputs){
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
	regu_position = regu_position_;
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <REGULATION_POSITION_Init+0x5c>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6013      	str	r3, [r2, #0]
	regu_position->mode = REGULATION_POSITION_MODE_OFF ;
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <REGULATION_POSITION_Init+0x5c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
	regu_position->outputs = outputs ;
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <REGULATION_POSITION_Init+0x5c>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	regu_position->position = position ;
 800533a:	4b0d      	ldr	r3, [pc, #52]	; (8005370 <REGULATION_POSITION_Init+0x5c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	601a      	str	r2, [r3, #0]

	//Init pid velocity
	PID_init(&regu_position->pid_velocity[POSITION_AXE_Z], pid_velocity_z_settings, FILTER_NO_FILTERING, filter_pid_velocity_z);
 8005342:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <REGULATION_POSITION_Init+0x5c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 800534a:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <REGULATION_POSITION_Init+0x60>)
 800534c:	2202      	movs	r2, #2
 800534e:	490a      	ldr	r1, [pc, #40]	; (8005378 <REGULATION_POSITION_Init+0x64>)
 8005350:	f00b f8f0 	bl	8010534 <PID_init>

	//Init pid position
	PID_init(&regu_position->pid_position[POSITION_AXE_Z], pid_position_z_settings, FILTER_SECOND_ORDER, filter_pid_position_z);
 8005354:	4b06      	ldr	r3, [pc, #24]	; (8005370 <REGULATION_POSITION_Init+0x5c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800535c:	4b07      	ldr	r3, [pc, #28]	; (800537c <REGULATION_POSITION_Init+0x68>)
 800535e:	2201      	movs	r2, #1
 8005360:	4907      	ldr	r1, [pc, #28]	; (8005380 <REGULATION_POSITION_Init+0x6c>)
 8005362:	f00b f8e7 	bl	8010534 <PID_init>


}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20002480 	.word	0x20002480
 8005374:	20001c4c 	.word	0x20001c4c
 8005378:	20001c38 	.word	0x20001c38
 800537c:	20001c6c 	.word	0x20001c6c
 8005380:	20001c58 	.word	0x20001c58

08005384 <REGULATION_POSITION_Set_Regulation_Mode>:

void REGULATION_POSITION_Set_Regulation_Mode(regu_position_mode_e regu_mode){
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
	regu_position->mode = regu_mode ;
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <REGULATION_POSITION_Set_Regulation_Mode+0x20>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	79fa      	ldrb	r2, [r7, #7]
 8005394:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	20002480 	.word	0x20002480

080053a8 <REGULATION_POSITION_Process>:

void REGULATION_POSITION_Process(void){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	ed2d 8b02 	vpush	{d8}
 80053ae:	af00      	add	r7, sp, #0
	switch(regu_position->mode){
 80053b0:	4b29      	ldr	r3, [pc, #164]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f893 31ec 	ldrb.w	r3, [r3, #492]	; 0x1ec
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d00c      	beq.n	80053d6 <REGULATION_POSITION_Process+0x2e>
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d015      	beq.n	80053ec <REGULATION_POSITION_Process+0x44>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d000      	beq.n	80053c6 <REGULATION_POSITION_Process+0x1e>
		case REGULATION_POSITION_MODE_STABILIZED:
			regu_position->consigne_velocity[POSITION_AXE_Z] = 0; //- PID_compute(&regu_position->pid_position[POSITION_AXE_Z], regu_position->consigne_position[POSITION_AXE_Z],  regu_position->position->position[POSITION_AXE_Z]);
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne - PID_compute(&regu_position->pid_velocity[POSITION_AXE_Z], regu_position->consigne_velocity[POSITION_AXE_Z] , regu_position->position->velocity[POSITION_AXE_Z]);
			break;
	}
}
 80053c4:	e043      	b.n	800544e <REGULATION_POSITION_Process+0xa6>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = 0;
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80053ce:	3306      	adds	r3, #6
 80053d0:	2200      	movs	r2, #0
 80053d2:	801a      	strh	r2, [r3, #0]
			break;
 80053d4:	e03b      	b.n	800544e <REGULATION_POSITION_Process+0xa6>
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne;
 80053d6:	4b20      	ldr	r3, [pc, #128]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80053e2:	3306      	adds	r3, #6
 80053e4:	f9b2 21e4 	ldrsh.w	r2, [r2, #484]	; 0x1e4
 80053e8:	801a      	strh	r2, [r3, #0]
			break;
 80053ea:	e030      	b.n	800544e <REGULATION_POSITION_Process+0xa6>
			regu_position->consigne_velocity[POSITION_AXE_Z] = 0; //- PID_compute(&regu_position->pid_position[POSITION_AXE_Z], regu_position->consigne_position[POSITION_AXE_Z],  regu_position->position->position[POSITION_AXE_Z]);
 80053ec:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	619a      	str	r2, [r3, #24]
			regu_position->outputs[PROP_CONSIGNE_THRUST] = regu_position->consigne - PID_compute(&regu_position->pid_velocity[POSITION_AXE_Z], regu_position->consigne_velocity[POSITION_AXE_Z] , regu_position->position->velocity[POSITION_AXE_Z]);
 80053f6:	4b18      	ldr	r3, [pc, #96]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800540e:	4b12      	ldr	r3, [pc, #72]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	edd3 7a06 	vldr	s15, [r3, #24]
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	ed93 7a05 	vldr	s14, [r3, #20]
 8005420:	eef0 0a47 	vmov.f32	s1, s14
 8005424:	eeb0 0a67 	vmov.f32	s0, s15
 8005428:	4610      	mov	r0, r2
 800542a:	f00a ffe7 	bl	80103fc <PID_compute>
 800542e:	eef0 7a40 	vmov.f32	s15, s0
 8005432:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005436:	4b08      	ldr	r3, [pc, #32]	; (8005458 <REGULATION_POSITION_Process+0xb0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800543e:	3306      	adds	r3, #6
 8005440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005444:	ee17 2a90 	vmov	r2, s15
 8005448:	b212      	sxth	r2, r2
 800544a:	801a      	strh	r2, [r3, #0]
			break;
 800544c:	bf00      	nop
}
 800544e:	bf00      	nop
 8005450:	46bd      	mov	sp, r7
 8005452:	ecbd 8b02 	vpop	{d8}
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20002480 	.word	0x20002480

0800545c <ACC_init>:
static void acc_data_callback(void);

//float filter_config [3] = {0.04f, 1.6f, -0.64f};
float filter_config [3] = {0.1f, 0.9f, 0.0f};

void ACC_init(acc_t * acc, mpu_t * mpu){
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]

	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_SECOND_ORDER);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	333c      	adds	r3, #60	; 0x3c
 800546a:	2201      	movs	r2, #1
 800546c:	491e      	ldr	r1, [pc, #120]	; (80054e8 <ACC_init+0x8c>)
 800546e:	4618      	mov	r0, r3
 8005470:	f00a fc9c 	bl	800fdac <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_SECOND_ORDER);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3320      	adds	r3, #32
 8005478:	2201      	movs	r2, #1
 800547a:	491b      	ldr	r1, [pc, #108]	; (80054e8 <ACC_init+0x8c>)
 800547c:	4618      	mov	r0, r3
 800547e:	f00a fc95 	bl	800fdac <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_SECOND_ORDER);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3358      	adds	r3, #88	; 0x58
 8005486:	2201      	movs	r2, #1
 8005488:	4917      	ldr	r1, [pc, #92]	; (80054e8 <ACC_init+0x8c>)
 800548a:	4618      	mov	r0, r3
 800548c:	f00a fc8e 	bl	800fdac <FILTER_init>


	acc->mpu = mpu ;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	601a      	str	r2, [r3, #0]
	acc->raw = acc->mpu->acc ;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	605a      	str	r2, [r3, #4]

	acc->offsets[0] = 0.0203813482 ;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a11      	ldr	r2, [pc, #68]	; (80054ec <ACC_init+0x90>)
 80054a6:	615a      	str	r2, [r3, #20]
	acc->offsets[1] = -0.0299842935 ;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a11      	ldr	r2, [pc, #68]	; (80054f0 <ACC_init+0x94>)
 80054ac:	619a      	str	r2, [r3, #24]
	acc->offsets[2] = -0.137193844 ;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <ACC_init+0x98>)
 80054b2:	61da      	str	r2, [r3, #28]

	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a0f      	ldr	r2, [pc, #60]	; (80054f8 <ACC_init+0x9c>)
 80054ba:	2101      	movs	r1, #1
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fd89 	bl	8005fd4 <MPU_init_acc>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d008      	beq.n	80054da <ACC_init+0x7e>
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d008      	beq.n	80054de <ACC_init+0x82>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d000      	beq.n	80054d2 <ACC_init+0x76>
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}

}
 80054d0:	e006      	b.n	80054e0 <ACC_init+0x84>
			EVENT_Set_flag(FLAG_ACC_OK);
 80054d2:	2004      	movs	r0, #4
 80054d4:	f7fe f9f8 	bl	80038c8 <EVENT_Set_flag>
			break;
 80054d8:	e002      	b.n	80054e0 <ACC_init+0x84>
			break;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <ACC_init+0x84>
			break;
 80054de:	bf00      	nop
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20001c78 	.word	0x20001c78
 80054ec:	3ca6f6c9 	.word	0x3ca6f6c9
 80054f0:	bcf5a19f 	.word	0xbcf5a19f
 80054f4:	be0c7c8b 	.word	0xbe0c7c8b
 80054f8:	08005733 	.word	0x08005733

080054fc <ACC_update>:

void ACC_update(acc_t * acc){
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	switch(MPU_update_acc(acc->mpu)){
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fe11 	bl	8006130 <MPU_update_acc>
 800550e:	4603      	mov	r3, r0
 8005510:	2b01      	cmp	r3, #1
 8005512:	d00c      	beq.n	800552e <ACC_update+0x32>
 8005514:	2b02      	cmp	r3, #2
 8005516:	d006      	beq.n	8005526 <ACC_update+0x2a>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d000      	beq.n	800551e <ACC_update+0x22>
			EVENT_Clean_flag(FLAG_ACC_OK);
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 800551c:	e008      	b.n	8005530 <ACC_update+0x34>
			EVENT_Set_flag(FLAG_ACC_DATA_READY);
 800551e:	2006      	movs	r0, #6
 8005520:	f7fe f9d2 	bl	80038c8 <EVENT_Set_flag>
			break;
 8005524:	e004      	b.n	8005530 <ACC_update+0x34>
			EVENT_Clean_flag(FLAG_ACC_OK);
 8005526:	2004      	movs	r0, #4
 8005528:	f7fe f9e6 	bl	80038f8 <EVENT_Clean_flag>
			break;
 800552c:	e000      	b.n	8005530 <ACC_update+0x34>
			break;
 800552e:	bf00      	nop
}
 8005530:	bf00      	nop
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <ACC_calibrate>:

bool_e ACC_calibrate(acc_t * acc, uint16_t iteration){
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	807b      	strh	r3, [r7, #2]
	static uint16_t compteur = 0;

	static float sum[3] = {0};

	if(!compteur){
 8005544:	4b43      	ldr	r3, [pc, #268]	; (8005654 <ACC_calibrate+0x11c>)
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10b      	bne.n	8005564 <ACC_calibrate+0x2c>
		sum[0] = 0 ;
 800554c:	4b42      	ldr	r3, [pc, #264]	; (8005658 <ACC_calibrate+0x120>)
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
		sum[1] = 0 ;
 8005554:	4b40      	ldr	r3, [pc, #256]	; (8005658 <ACC_calibrate+0x120>)
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	605a      	str	r2, [r3, #4]
		sum[2] = 0 ;
 800555c:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <ACC_calibrate+0x120>)
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	609a      	str	r2, [r3, #8]
	}

	sum[0] += acc->raw[0] + acc->offsets[0];
 8005564:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <ACC_calibrate+0x120>)
 8005566:	ed93 7a00 	vldr	s14, [r3]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	edd3 6a00 	vldr	s13, [r3]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	edd3 7a05 	vldr	s15, [r3, #20]
 8005578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005580:	4b35      	ldr	r3, [pc, #212]	; (8005658 <ACC_calibrate+0x120>)
 8005582:	edc3 7a00 	vstr	s15, [r3]
	sum[1] += acc->raw[1] + acc->offsets[1];
 8005586:	4b34      	ldr	r3, [pc, #208]	; (8005658 <ACC_calibrate+0x120>)
 8005588:	ed93 7a01 	vldr	s14, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	3304      	adds	r3, #4
 8005592:	edd3 6a00 	vldr	s13, [r3]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	edd3 7a06 	vldr	s15, [r3, #24]
 800559c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055a4:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <ACC_calibrate+0x120>)
 80055a6:	edc3 7a01 	vstr	s15, [r3, #4]
	sum[2] += acc->raw[2] + acc->offsets[2] - 1;	//Pour le YAW on doit avoir 1g quand le drone est à l'horizontale
 80055aa:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <ACC_calibrate+0x120>)
 80055ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	3308      	adds	r3, #8
 80055b6:	edd3 6a00 	vldr	s13, [r3]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80055c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d0:	4b21      	ldr	r3, [pc, #132]	; (8005658 <ACC_calibrate+0x120>)
 80055d2:	edc3 7a02 	vstr	s15, [r3, #8]

	compteur ++;
 80055d6:	4b1f      	ldr	r3, [pc, #124]	; (8005654 <ACC_calibrate+0x11c>)
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <ACC_calibrate+0x11c>)
 80055e0:	801a      	strh	r2, [r3, #0]

	if(compteur == iteration){
 80055e2:	4b1c      	ldr	r3, [pc, #112]	; (8005654 <ACC_calibrate+0x11c>)
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d12b      	bne.n	8005644 <ACC_calibrate+0x10c>
		acc->offsets[0] = sum[0] / (float)iteration;
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <ACC_calibrate+0x120>)
 80055ee:	edd3 6a00 	vldr	s13, [r3]
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	edc3 7a05 	vstr	s15, [r3, #20]
		acc->offsets[1] = sum[1] / (float)iteration;
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <ACC_calibrate+0x120>)
 8005608:	edd3 6a01 	vldr	s13, [r3, #4]
 800560c:	887b      	ldrh	r3, [r7, #2]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	edc3 7a06 	vstr	s15, [r3, #24]
		acc->offsets[2] = sum[2] / (float)iteration;
 8005620:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <ACC_calibrate+0x120>)
 8005622:	edd3 6a02 	vldr	s13, [r3, #8]
 8005626:	887b      	ldrh	r3, [r7, #2]
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	edc3 7a07 	vstr	s15, [r3, #28]
		compteur = 0;
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <ACC_calibrate+0x11c>)
 800563c:	2200      	movs	r2, #0
 800563e:	801a      	strh	r2, [r3, #0]
		return TRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <ACC_calibrate+0x10e>
	}

	return FALSE;
 8005644:	2300      	movs	r3, #0

}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20002484 	.word	0x20002484
 8005658:	20002488 	.word	0x20002488

0800565c <ACC_process_lpf>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void ACC_process_lpf(acc_t * acc){
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	//Offset correction first
	acc->raw[0] -= acc->offsets[0];
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	ed93 7a00 	vldr	s14, [r3]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800567a:	edc3 7a00 	vstr	s15, [r3]
	acc->raw[1] -= acc->offsets[1];
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	ed93 7a00 	vldr	s14, [r3]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	edd3 7a06 	vldr	s15, [r3, #24]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005698:	edc3 7a00 	vstr	s15, [r3]
	acc->raw[2] -= acc->offsets[2];
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	3308      	adds	r3, #8
 80056a2:	ed93 7a00 	vldr	s14, [r3]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	3308      	adds	r3, #8
 80056b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056b6:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	3304      	adds	r3, #4
 80056c6:	edd3 7a00 	vldr	s15, [r3]
 80056ca:	eeb0 0a67 	vmov.f32	s0, s15
 80056ce:	4610      	mov	r0, r2
 80056d0:	f00a fb8f 	bl	800fdf2 <FILTER_process>
 80056d4:	eef0 7a40 	vmov.f32	s15, s0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	edc3 7a03 	vstr	s15, [r3, #12]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f103 0220 	add.w	r2, r3, #32
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	edd3 7a00 	vldr	s15, [r3]
 80056ec:	eeb0 0a67 	vmov.f32	s0, s15
 80056f0:	4610      	mov	r0, r2
 80056f2:	f00a fb7e 	bl	800fdf2 <FILTER_process>
 80056f6:	eef0 7a40 	vmov.f32	s15, s0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	3308      	adds	r3, #8
 800570c:	edd3 7a00 	vldr	s15, [r3]
 8005710:	eeb0 0a67 	vmov.f32	s0, s15
 8005714:	4610      	mov	r0, r2
 8005716:	f00a fb6c 	bl	800fdf2 <FILTER_process>
 800571a:	eef0 7a40 	vmov.f32	s15, s0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that new data are available
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8005724:	2007      	movs	r0, #7
 8005726:	f7fe f8cf 	bl	80038c8 <EVENT_Set_flag>
}
 800572a:	bf00      	nop
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <acc_data_callback>:

static void acc_data_callback(void){
 8005732:	b580      	push	{r7, lr}
 8005734:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8005736:	2006      	movs	r0, #6
 8005738:	f7fe f8c6 	bl	80038c8 <EVENT_Set_flag>
}
 800573c:	bf00      	nop
 800573e:	bd80      	pop	{r7, pc}

08005740 <ms5611_raw_temp_rdy>:
#define RATIO_PRESSURE_TEMP 9

static void ms5611_raw_temp_rdy();
static void ms5611_raw_pressure_rdy();

static void ms5611_raw_temp_rdy(){
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_TEMP_RAW_RDY);
 8005744:	2009      	movs	r0, #9
 8005746:	f7fe f8bf 	bl	80038c8 <EVENT_Set_flag>
}
 800574a:	bf00      	nop
 800574c:	bd80      	pop	{r7, pc}

0800574e <ms5611_raw_pressure_rdy>:
static void ms5611_raw_pressure_rdy(){
 800574e:	b580      	push	{r7, lr}
 8005750:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_BARO_PRESSURE_RAW_RDY);
 8005752:	200a      	movs	r0, #10
 8005754:	f7fe f8b8 	bl	80038c8 <EVENT_Set_flag>
}
 8005758:	bf00      	nop
 800575a:	bd80      	pop	{r7, pc}

0800575c <BARO_init>:

void BARO_init(baro_t * baro, ms5611_t * ms5611, I2C_HandleTypeDef * hi2c){
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
	baro->ms5611 = ms5611 ;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	601a      	str	r2, [r3, #0]
	baro->altitude = &ms5611->altitude;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	605a      	str	r2, [r3, #4]

	switch(MS5611_init(baro->ms5611, hi2c, ms5611_raw_temp_rdy, ms5611_raw_pressure_rdy))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6818      	ldr	r0, [r3, #0]
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <BARO_init+0x50>)
 800577e:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <BARO_init+0x54>)
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	f000 fdb7 	bl	80062f4 <MS5611_init>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d008      	beq.n	800579e <BARO_init+0x42>
 800578c:	2b02      	cmp	r3, #2
 800578e:	d008      	beq.n	80057a2 <BARO_init+0x46>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d000      	beq.n	8005796 <BARO_init+0x3a>
		case SENSOR_REQUEST_FAIL :
			break;
		case SENSOR_REQUEST_BUSY :
			break;
	}
}
 8005794:	e006      	b.n	80057a4 <BARO_init+0x48>
			EVENT_Set_flag(FLAG_BARO_OK);
 8005796:	2008      	movs	r0, #8
 8005798:	f7fe f896 	bl	80038c8 <EVENT_Set_flag>
			break;
 800579c:	e002      	b.n	80057a4 <BARO_init+0x48>
			break;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <BARO_init+0x48>
			break;
 80057a2:	bf00      	nop
}
 80057a4:	bf00      	nop
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	0800574f 	.word	0x0800574f
 80057b0:	08005741 	.word	0x08005741

080057b4 <BARO_Main>:

uint32_t BARO_Main(baro_t * baro){
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	uint32_t to_return = 9600 ;
 80057bc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80057c0:	60fb      	str	r3, [r7, #12]
	switch(baro->state){
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7a5b      	ldrb	r3, [r3, #9]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d855      	bhi.n	8005876 <BARO_Main+0xc2>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <BARO_Main+0x1c>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	080057e5 	.word	0x080057e5
 80057d4:	080057ed 	.word	0x080057ed
 80057d8:	080057ff 	.word	0x080057ff
 80057dc:	08005817 	.word	0x08005817
 80057e0:	08005829 	.word	0x08005829
		case BARO_STATE_IDDLE:
			baro->state = BARO_STATE_ASK_TEMP ;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	725a      	strb	r2, [r3, #9]
			break;
 80057ea:	e044      	b.n	8005876 <BARO_Main+0xc2>
		case BARO_STATE_ASK_TEMP :
			MS5611_request_temp(baro->ms5611);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fdeb 	bl	80063cc <MS5611_request_temp>
			baro->state = BARO_STATE_READ_TEMP ;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2202      	movs	r2, #2
 80057fa:	725a      	strb	r2, [r3, #9]
			break;
 80057fc:	e03b      	b.n	8005876 <BARO_Main+0xc2>
		case BARO_STATE_READ_TEMP :
			MS5611_read_temp(baro->ms5611);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fe3a 	bl	800647c <MS5611_read_temp>
			baro->state = BARO_STATE_ASK_PRESSURE ;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2203      	movs	r2, #3
 800580c:	725a      	strb	r2, [r3, #9]
			to_return = 400 ;
 800580e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005812:	60fb      	str	r3, [r7, #12]
			break;
 8005814:	e02f      	b.n	8005876 <BARO_Main+0xc2>
		case BARO_STATE_ASK_PRESSURE :
			MS5611_request_pressure(baro->ms5611);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fe02 	bl	8006424 <MS5611_request_pressure>
			baro->state = BARO_STATE_READ_PRESSURE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2204      	movs	r2, #4
 8005824:	725a      	strb	r2, [r3, #9]
			break;
 8005826:	e026      	b.n	8005876 <BARO_Main+0xc2>
		case BARO_STATE_READ_PRESSURE :
			MS5611_read_pressure(baro->ms5611);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fe56 	bl	80064de <MS5611_read_pressure>

			baro->counter_pressure_mesure ++ ;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7a1b      	ldrb	r3, [r3, #8]
 8005836:	3301      	adds	r3, #1
 8005838:	b2da      	uxtb	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	721a      	strb	r2, [r3, #8]
			baro->counter_pressure_mesure = baro->counter_pressure_mesure % RATIO_PRESSURE_TEMP ;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	7a1a      	ldrb	r2, [r3, #8]
 8005842:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <BARO_Main+0xcc>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	0859      	lsrs	r1, r3, #1
 800584a:	460b      	mov	r3, r1
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	b2da      	uxtb	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	721a      	strb	r2, [r3, #8]

			if(!baro->counter_pressure_mesure)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	7a1b      	ldrb	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d103      	bne.n	8005868 <BARO_Main+0xb4>
				baro->state = BARO_STATE_ASK_TEMP ;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	725a      	strb	r2, [r3, #9]
 8005866:	e002      	b.n	800586e <BARO_Main+0xba>
			else
				baro->state = BARO_STATE_ASK_PRESSURE ;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2203      	movs	r2, #3
 800586c:	725a      	strb	r2, [r3, #9]

			to_return = 400 ;
 800586e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005872:	60fb      	str	r3, [r7, #12]
			break;
 8005874:	bf00      	nop
	}
	return to_return ;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	38e38e39 	.word	0x38e38e39

08005884 <BARO_compute_temp>:

void BARO_compute_temp(baro_t * baro){
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	MS5611_calculate_temperature(baro->ms5611);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 fe51 	bl	8006538 <MS5611_calculate_temperature>

}
 8005896:	bf00      	nop
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <BARO_compute_pressure>:
void BARO_compute_pressure(baro_t * baro){
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
	MS5611_calculate_pressure(baro->ms5611);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fe84 	bl	80065b8 <MS5611_calculate_pressure>
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <BARO_compute_altitude>:
void BARO_compute_altitude(baro_t * baro){
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	MS5611_calculate_altitude(baro->ms5611);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 ff13 	bl	80066f0 <MS5611_calculate_altitude>
}
 80058ca:	bf00      	nop
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <BATTERIE_Init>:


#include "batterie.h"


void BATTERIE_Init(batterie_t * batterie, ADC_HandleTypeDef * hadc){
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
	batterie->hadc = hadc ;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, batterie->reading, 16);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3304      	adds	r3, #4
 80058e6:	2210      	movs	r2, #16
 80058e8:	4619      	mov	r1, r3
 80058ea:	6838      	ldr	r0, [r7, #0]
 80058ec:	f002 fdca 	bl	8008484 <HAL_ADC_Start_DMA>
}
 80058f0:	bf00      	nop
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <GYRO_init>:

//float filter[3] = {0.01234567901f, 1.777777778f, -0.7901234568f};
float filter[3] = {0.04f, 1.6f, -0.64f};
static void gyro_data_callback(void);

void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]

	//Filters init
	FILTER_init(&gyro->filters[ORIENTATION_ROLL], filter, FILTER_SECOND_ORDER);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3320      	adds	r3, #32
 8005906:	2201      	movs	r2, #1
 8005908:	491e      	ldr	r1, [pc, #120]	; (8005984 <GYRO_init+0x8c>)
 800590a:	4618      	mov	r0, r3
 800590c:	f00a fa4e 	bl	800fdac <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_PITCH], filter, FILTER_SECOND_ORDER);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	333c      	adds	r3, #60	; 0x3c
 8005914:	2201      	movs	r2, #1
 8005916:	491b      	ldr	r1, [pc, #108]	; (8005984 <GYRO_init+0x8c>)
 8005918:	4618      	mov	r0, r3
 800591a:	f00a fa47 	bl	800fdac <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_YAW], filter, FILTER_SECOND_ORDER);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3358      	adds	r3, #88	; 0x58
 8005922:	2201      	movs	r2, #1
 8005924:	4917      	ldr	r1, [pc, #92]	; (8005984 <GYRO_init+0x8c>)
 8005926:	4618      	mov	r0, r3
 8005928:	f00a fa40 	bl	800fdac <FILTER_init>

	gyro->mpu = mpu ;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	601a      	str	r2, [r3, #0]
	gyro->raw = gyro->mpu->gyro ;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	605a      	str	r2, [r3, #4]

	gyro->offsets[ORIENTATION_ROLL] = 7.225059382f ;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a11      	ldr	r2, [pc, #68]	; (8005988 <GYRO_init+0x90>)
 8005942:	615a      	str	r2, [r3, #20]
	gyro->offsets[ORIENTATION_PITCH] = 11.60997625f ;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a11      	ldr	r2, [pc, #68]	; (800598c <GYRO_init+0x94>)
 8005948:	619a      	str	r2, [r3, #24]
	gyro->offsets[ORIENTATION_YAW] = -8.234441805f ;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a10      	ldr	r2, [pc, #64]	; (8005990 <GYRO_init+0x98>)
 800594e:	61da      	str	r2, [r3, #28]

	//Raise the flag "ok" if the gyro get succesfully initiated
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <GYRO_init+0x9c>)
 8005956:	2103      	movs	r1, #3
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fa83 	bl	8005e64 <MPU_init_gyro>
 800595e:	4603      	mov	r3, r0
 8005960:	2b01      	cmp	r3, #1
 8005962:	d008      	beq.n	8005976 <GYRO_init+0x7e>
 8005964:	2b02      	cmp	r3, #2
 8005966:	d008      	beq.n	800597a <GYRO_init+0x82>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d000      	beq.n	800596e <GYRO_init+0x76>
		case SENSOR_REQUEST_FAIL:
			break;
		case SENSOR_REQUEST_BUSY:
			break;
	}
}
 800596c:	e006      	b.n	800597c <GYRO_init+0x84>
			EVENT_Set_flag(FLAG_GYRO_OK);
 800596e:	2000      	movs	r0, #0
 8005970:	f7fd ffaa 	bl	80038c8 <EVENT_Set_flag>
			break;
 8005974:	e002      	b.n	800597c <GYRO_init+0x84>
			break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <GYRO_init+0x84>
			break;
 800597a:	bf00      	nop
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20001c84 	.word	0x20001c84
 8005988:	40e733b0 	.word	0x40e733b0
 800598c:	4139c276 	.word	0x4139c276
 8005990:	c103c046 	.word	0xc103c046
 8005994:	08005aa7 	.word	0x08005aa7

08005998 <GYRO_ACC_update_dma>:
		case SENSOR_REQUEST_BUSY:
			break;
	}
}

void GYRO_ACC_update_dma(gyro_t * gyro){
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	switch(MPU_update_all_dma(gyro->mpu)){
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fc02 	bl	80061ae <MPU_update_all_dma>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d00a      	beq.n	80059c6 <GYRO_ACC_update_dma+0x2e>
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d001      	beq.n	80059b8 <GYRO_ACC_update_dma+0x20>
 80059b4:	2b00      	cmp	r3, #0
		case SENSOR_REQUEST_OK:
			break;
 80059b6:	e007      	b.n	80059c8 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_FAIL:
			EVENT_Clean_flag(FLAG_GYRO_OK);
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7fd ff9d 	bl	80038f8 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80059be:	2004      	movs	r0, #4
 80059c0:	f7fd ff9a 	bl	80038f8 <EVENT_Clean_flag>
			break;
 80059c4:	e000      	b.n	80059c8 <GYRO_ACC_update_dma+0x30>
		case SENSOR_REQUEST_BUSY:
			break;
 80059c6:	bf00      	nop
	}
}
 80059c8:	bf00      	nop
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <GYRO_process_lpf>:

void GYRO_process_lpf(gyro_t * gyro){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	//Offset correction first
	gyro->raw[0] -= gyro->offsets[0];
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	ed93 7a00 	vldr	s14, [r3]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ee:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[1] -= gyro->offsets[1];
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	ed93 7a00 	vldr	s14, [r3]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	3304      	adds	r3, #4
 8005a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a0c:	edc3 7a00 	vstr	s15, [r3]
	gyro->raw[2] -= gyro->offsets[2];
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	3308      	adds	r3, #8
 8005a16:	ed93 7a00 	vldr	s14, [r3]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	3308      	adds	r3, #8
 8005a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a2a:	edc3 7a00 	vstr	s15, [r3]
	//Then the actual low pass filter
	gyro->filtered[0] =  FILTER_process(&gyro->filters[0], gyro->raw[0]);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f103 0220 	add.w	r2, r3, #32
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	edd3 7a00 	vldr	s15, [r3]
 8005a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a40:	4610      	mov	r0, r2
 8005a42:	f00a f9d6 	bl	800fdf2 <FILTER_process>
 8005a46:	eef0 7a40 	vmov.f32	s15, s0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[1] =  FILTER_process(&gyro->filters[1], gyro->raw[1]);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	edd3 7a00 	vldr	s15, [r3]
 8005a60:	eeb0 0a67 	vmov.f32	s0, s15
 8005a64:	4610      	mov	r0, r2
 8005a66:	f00a f9c4 	bl	800fdf2 <FILTER_process>
 8005a6a:	eef0 7a40 	vmov.f32	s15, s0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	edc3 7a03 	vstr	s15, [r3, #12]
	gyro->filtered[2] =  FILTER_process(&gyro->filters[2], gyro->raw[2]);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	edd3 7a00 	vldr	s15, [r3]
 8005a84:	eeb0 0a67 	vmov.f32	s0, s15
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f00a f9b2 	bl	800fdf2 <FILTER_process>
 8005a8e:	eef0 7a40 	vmov.f32	s15, s0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	edc3 7a04 	vstr	s15, [r3, #16]
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8005a98:	2003      	movs	r0, #3
 8005a9a:	f7fd ff15 	bl	80038c8 <EVENT_Set_flag>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <gyro_data_callback>:

static void gyro_data_callback(void){
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	af00      	add	r7, sp, #0
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 8005aaa:	2002      	movs	r0, #2
 8005aac:	f7fd ff0c 	bl	80038c8 <EVENT_Set_flag>
}
 8005ab0:	bf00      	nop
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <convert_gyro>:

static void MPU_spi_slow(mpu_t * mpu);
static void MPU_spi_fast(mpu_t * mpu);

//Private functions def
static void convert_gyro(mpu_t * mpu){
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	mpu->gyro_raw[GYRO_AXE_X] = -(int16_t)(mpu->gyro_data[1] << 8 | mpu->gyro_data[0]);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	b21a      	sxth	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b21b      	sxth	r3, r3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	b21b      	sxth	r3, r3
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	425b      	negs	r3, r3
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	b21a      	sxth	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[3] << 8 | mpu->gyro_data[2]);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	3303      	adds	r3, #3
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	b21a      	sxth	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	3302      	adds	r3, #2
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	4313      	orrs	r3, r2
 8005af8:	b21a      	sxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	849a      	strh	r2, [r3, #36]	; 0x24
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[5] << 8 | mpu->gyro_data[4]);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	3305      	adds	r3, #5
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	021b      	lsls	r3, r3, #8
 8005b08:	b21a      	sxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	4313      	orrs	r3, r2
 8005b16:	b21a      	sxth	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	851a      	strh	r2, [r3, #40]	; 0x28

	//Convertion
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005b40:	ee07 3a90 	vmov	s15, r3
 8005b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <convert_acc>:
static void convert_acc(mpu_t * mpu){
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
	mpu->acc_raw[ACC_AXE_X] = -(int16_t)(mpu->acc_data[1] << 8 | mpu->acc_data[0]);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	3301      	adds	r3, #1
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	b21a      	sxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	425b      	negs	r3, r3
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	b21a      	sxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[3] << 8 | mpu->acc_data[2]);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	3303      	adds	r3, #3
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	b21a      	sxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	3302      	adds	r3, #2
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	b21b      	sxth	r3, r3
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b21a      	sxth	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[5] << 8 | mpu->acc_data[4]);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd4:	3305      	adds	r3, #5
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	b21a      	sxth	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be0:	3304      	adds	r3, #4
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	4313      	orrs	r3, r2
 8005be8:	b21a      	sxth	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//Convertion
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8005c14:	ee07 3a90 	vmov	s15, r3
 8005c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8005c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <MPU_cs_lock>:

static void MPU_cs_lock(mpu_t * mpu){
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b082      	sub	sp, #8
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, RESET);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6898      	ldr	r0, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	899b      	ldrh	r3, [r3, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f003 fe11 	bl	8009890 <HAL_GPIO_WritePin>
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <MPU_cs_unlock>:
static void MPU_cs_unlock(mpu_t * mpu){
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(mpu->pin_cs_gpio, mpu->pin_cs, SET);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6898      	ldr	r0, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	899b      	ldrh	r3, [r3, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f003 fe01 	bl	8009890 <HAL_GPIO_WritePin>
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <MPU_spi_slow>:

static void MPU_spi_slow(mpu_t * mpu){
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_SLOW;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 64 ;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2240      	movs	r2, #64	; 0x40
 8005cac:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f007 f998 	bl	800cfe8 <HAL_SPI_Init>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8005cc0:	200a      	movs	r0, #10
 8005cc2:	f002 fb79 	bl	80083b8 <HAL_Delay>
}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <MPU_spi_fast>:
static void MPU_spi_fast(mpu_t * mpu){
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
	mpu->spi_speed = MPU_SPI_FAST;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	mpu->hspi->Init.BaudRatePrescaler = 4 ;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	61da      	str	r2, [r3, #28]
	mpu->hal_state = HAL_SPI_Init(mpu->hspi);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f007 f97c 	bl	800cfe8 <HAL_SPI_Init>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	739a      	strb	r2, [r3, #14]
	HAL_Delay(10);
 8005cf8:	200a      	movs	r0, #10
 8005cfa:	f002 fb5d 	bl	80083b8 <HAL_Delay>
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <MPU_init>:


/*
 *
 */
sensor_request_e MPU_init(mpu_t * mpu, SPI_HandleTypeDef * hspi, GPIO_TypeDef * pin_cs_gpio, uint16_t pin_cs){
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	807b      	strh	r3, [r7, #2]


	//Requiert un SPI pour fonctionner
	if(hspi == NULL)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <MPU_init+0x18>
		return SENSOR_REQUEST_FAIL ;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e090      	b.n	8005e42 <MPU_init+0x13a>


	//CS pin must be high by default
	MPU_cs_unlock(mpu);
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f7ff ffa8 	bl	8005c76 <MPU_cs_unlock>
	HAL_Delay(1);
 8005d26:	2001      	movs	r0, #1
 8005d28:	f002 fb46 	bl	80083b8 <HAL_Delay>
	TIME_delay_us_blocking(1);
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	f7fe fdc5 	bl	80048bc <TIME_delay_us_blocking>

	//Etat par default
	mpu->state = SENSOR_NOT_INIT ;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	73da      	strb	r2, [r3, #15]

	//SPI slow pdt l'init, max si 1Mhz for the mpu
	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d102      	bne.n	8005d48 <MPU_init+0x40>
		MPU_spi_slow(mpu);
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f7ff ffa7 	bl	8005c96 <MPU_spi_slow>


	//Définit d'après la doc pour les registres du mpu
	mpu->gyro_data = &mpu->data[8] ;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f103 021a 	add.w	r2, r3, #26
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
	mpu->acc_data = &mpu->data[0] ;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f103 0212 	add.w	r2, r3, #18
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	645a      	str	r2, [r3, #68]	; 0x44


	//Application des paramètres de connexion
	mpu->hspi = hspi ;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	605a      	str	r2, [r3, #4]
	mpu->pin_cs = pin_cs ;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	887a      	ldrh	r2, [r7, #2]
 8005d66:	819a      	strh	r2, [r3, #12]
	mpu->pin_cs_gpio = pin_cs_gpio ;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	609a      	str	r2, [r3, #8]

	mpu->adresse = MPU6050_I2C_ADDR ;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	22d0      	movs	r2, #208	; 0xd0
 8005d72:	745a      	strb	r2, [r3, #17]

	mpu_handlers[mpu_init_compteur] = mpu ;
 8005d74:	4b35      	ldr	r3, [pc, #212]	; (8005e4c <MPU_init+0x144>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4a35      	ldr	r2, [pc, #212]	; (8005e50 <MPU_init+0x148>)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	SPI_handlers[mpu_init_compteur++] = hspi ;
 8005d82:	4b32      	ldr	r3, [pc, #200]	; (8005e4c <MPU_init+0x144>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	b2d1      	uxtb	r1, r2
 8005d8a:	4a30      	ldr	r2, [pc, #192]	; (8005e4c <MPU_init+0x144>)
 8005d8c:	7011      	strb	r1, [r2, #0]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4a30      	ldr	r2, [pc, #192]	; (8005e54 <MPU_init+0x14c>)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Wakeup mpu
	uint8_t wakeup_data[] = {MPU6050_PWR_MGMT_1, 0x80} ;
 8005d98:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <MPU_init+0x150>)
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	83bb      	strh	r3, [r7, #28]
	MPU_cs_lock(mpu);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f7ff ff59 	bl	8005c56 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, wakeup_data, 2, 2);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6858      	ldr	r0, [r3, #4]
 8005da8:	f107 011c 	add.w	r1, r7, #28
 8005dac:	2302      	movs	r3, #2
 8005dae:	2202      	movs	r2, #2
 8005db0:	f007 f97e 	bl	800d0b0 <HAL_SPI_Transmit>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff ff5a 	bl	8005c76 <MPU_cs_unlock>

	HAL_Delay(150);
 8005dc2:	2096      	movs	r0, #150	; 0x96
 8005dc4:	f002 faf8 	bl	80083b8 <HAL_Delay>

	//Clock select
	uint8_t mpu_clock_sel_pll_gyroz[] = {MPU6050_PWR_MGMT_1, 0x03};
 8005dc8:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <MPU_init+0x154>)
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	833b      	strh	r3, [r7, #24]
	MPU_cs_lock(mpu);
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff ff41 	bl	8005c56 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_clock_sel_pll_gyroz, 2, 2);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6858      	ldr	r0, [r3, #4]
 8005dd8:	f107 0118 	add.w	r1, r7, #24
 8005ddc:	2302      	movs	r3, #2
 8005dde:	2202      	movs	r2, #2
 8005de0:	f007 f966 	bl	800d0b0 <HAL_SPI_Transmit>
 8005de4:	4603      	mov	r3, r0
 8005de6:	461a      	mov	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff ff42 	bl	8005c76 <MPU_cs_unlock>

	HAL_Delay(15);
 8005df2:	200f      	movs	r0, #15
 8005df4:	f002 fae0 	bl	80083b8 <HAL_Delay>

	//Disable I2C
	uint8_t mpu_disable_i2c[] = {MPU6050_USER_CTRL, 0x10};
 8005df8:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <MPU_init+0x158>)
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	82bb      	strh	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff ff29 	bl	8005c56 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, mpu_disable_i2c, 2, 2);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6858      	ldr	r0, [r3, #4]
 8005e08:	f107 0114 	add.w	r1, r7, #20
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f007 f94e 	bl	800d0b0 <HAL_SPI_Transmit>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff ff2a 	bl	8005c76 <MPU_cs_unlock>

	TIME_delay_us_blocking(2);
 8005e22:	2002      	movs	r0, #2
 8005e24:	f7fe fd4a 	bl	80048bc <TIME_delay_us_blocking>
//	MPU_cs_lock(mpu);
//	mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, set_dlpf, 2, 2);
//	MPU_cs_unlock(mpu);

	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	7b9b      	ldrb	r3, [r3, #14]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <MPU_init+0x132>
		mpu->state = SENSOR_ERROR ;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2204      	movs	r2, #4
 8005e34:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8005e36:	2302      	movs	r3, #2
 8005e38:	e003      	b.n	8005e42 <MPU_init+0x13a>
	}

	mpu->state = SENSOR_IDDLE ;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	73da      	strb	r2, [r3, #15]
	return SENSOR_REQUEST_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	2000249c 	.word	0x2000249c
 8005e50:	20002498 	.word	0x20002498
 8005e54:	20002494 	.word	0x20002494
 8005e58:	0801464c 	.word	0x0801464c
 8005e5c:	08014650 	.word	0x08014650
 8005e60:	08014654 	.word	0x08014654

08005e64 <MPU_init_gyro>:

/*
 *
 */
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	72fb      	strb	r3, [r7, #11]

	mpu->gyro_range = gyro_range ;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	7afa      	ldrb	r2, [r7, #11]
 8005e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	mpu->gyro_data_callback = gyro_data_callback ;
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	7bdb      	ldrb	r3, [r3, #15]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <MPU_init_gyro+0x28>
		return SENSOR_REQUEST_FAIL ;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e096      	b.n	8005fba <MPU_init_gyro+0x156>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d102      	bne.n	8005e9c <MPU_init_gyro+0x38>
		MPU_spi_slow(mpu);
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff fefd 	bl	8005c96 <MPU_spi_slow>

	//Configuration de la sensi du gyro dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8005e9c:	239b      	movs	r3, #155	; 0x9b
 8005e9e:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff fed8 	bl	8005c56 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6858      	ldr	r0, [r3, #4]
 8005eaa:	f107 0214 	add.w	r2, r7, #20
 8005eae:	f107 0114 	add.w	r1, r7, #20
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	f007 fa2e 	bl	800d318 <HAL_SPI_TransmitReceive>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f7ff fed6 	bl	8005c76 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	7b9b      	ldrb	r3, [r3, #14]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d122      	bne.n	8005f18 <MPU_init_gyro+0xb4>
		HAL_Delay(1);
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	f002 fa70 	bl	80083b8 <HAL_Delay>
		MPU_cs_lock(mpu);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff febc 	bl	8005c56 <MPU_cs_lock>
		temp[0] = MPU6050_GYRO_CONFIG ;
 8005ede:	231b      	movs	r3, #27
 8005ee0:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)gyro_range << 3;
 8005ee2:	7d7b      	ldrb	r3, [r7, #21]
 8005ee4:	b25b      	sxtb	r3, r3
 8005ee6:	f023 0318 	bic.w	r3, r3, #24
 8005eea:	b25a      	sxtb	r2, r3
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	b25b      	sxtb	r3, r3
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	b25b      	sxtb	r3, r3
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6858      	ldr	r0, [r3, #4]
 8005efe:	f107 0114 	add.w	r1, r7, #20
 8005f02:	2302      	movs	r3, #2
 8005f04:	2202      	movs	r2, #2
 8005f06:	f007 f8d3 	bl	800d0b0 <HAL_SPI_Transmit>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff feaf 	bl	8005c76 <MPU_cs_unlock>
	}

	//ON vérifi si on a bien écris ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	7b9b      	ldrb	r3, [r3, #14]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d124      	bne.n	8005f6a <MPU_init_gyro+0x106>
		uint8_t temp2 = temp[1];
 8005f20:	7d7b      	ldrb	r3, [r7, #21]
 8005f22:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_GYRO_CONFIG | MPU6050_READ ;
 8005f24:	239b      	movs	r3, #155	; 0x9b
 8005f26:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8005f28:	2001      	movs	r0, #1
 8005f2a:	f002 fa45 	bl	80083b8 <HAL_Delay>
		MPU_cs_lock(mpu);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff fe91 	bl	8005c56 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6858      	ldr	r0, [r3, #4]
 8005f38:	f107 0214 	add.w	r2, r7, #20
 8005f3c:	f107 0114 	add.w	r1, r7, #20
 8005f40:	2302      	movs	r3, #2
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	2302      	movs	r3, #2
 8005f46:	f007 f9e7 	bl	800d318 <HAL_SPI_TransmitReceive>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fe8f 	bl	8005c76 <MPU_cs_unlock>

		if(temp[1] != temp2)
 8005f58:	7d7b      	ldrb	r3, [r7, #21]
 8005f5a:	7dfa      	ldrb	r2, [r7, #23]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d004      	beq.n	8005f6a <MPU_init_gyro+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2204      	movs	r2, #4
 8005f64:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 8005f66:	2302      	movs	r3, #2
 8005f68:	e027      	b.n	8005fba <MPU_init_gyro+0x156>

	}



	if(mpu->hal_state != HAL_OK)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	7b9b      	ldrb	r3, [r3, #14]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d004      	beq.n	8005f7c <MPU_init_gyro+0x118>
	{
		mpu->state = SENSOR_ERROR ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2204      	movs	r2, #4
 8005f76:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e01e      	b.n	8005fba <MPU_init_gyro+0x156>
	}

	switch(gyro_range){
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d81a      	bhi.n	8005fb8 <MPU_init_gyro+0x154>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <MPU_init_gyro+0x124>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005fa1 	.word	0x08005fa1
 8005f90:	08005fa9 	.word	0x08005fa9
 8005f94:	08005fb1 	.word	0x08005fb1
		case MPU_GYRO_250s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <MPU_init_gyro+0x160>)
 8005f9c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005f9e:	e00b      	b.n	8005fb8 <MPU_init_gyro+0x154>
		case MPU_GYRO_500s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <MPU_init_gyro+0x164>)
 8005fa4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005fa6:	e007      	b.n	8005fb8 <MPU_init_gyro+0x154>
		case MPU_GYRO_1000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a08      	ldr	r2, [pc, #32]	; (8005fcc <MPU_init_gyro+0x168>)
 8005fac:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005fae:	e003      	b.n	8005fb8 <MPU_init_gyro+0x154>
		case MPU_GYRO_2000s :
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a07      	ldr	r2, [pc, #28]	; (8005fd0 <MPU_init_gyro+0x16c>)
 8005fb4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005fb6:	bf00      	nop
	}

	return SENSOR_REQUEST_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	3bfa232d 	.word	0x3bfa232d
 8005fc8:	3c7a232d 	.word	0x3c7a232d
 8005fcc:	3cf9c190 	.word	0x3cf9c190
 8005fd0:	3d79c190 	.word	0x3d79c190

08005fd4 <MPU_init_acc>:

/*
 *
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	72fb      	strb	r3, [r7, #11]
	mpu->acc_range = acc_range ;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	7afa      	ldrb	r2, [r7, #11]
 8005fe6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	mpu->acc_data_callback = acc_data_callback ;
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	665a      	str	r2, [r3, #100]	; 0x64
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	7bdb      	ldrb	r3, [r3, #15]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <MPU_init_acc+0x28>
		return SENSOR_REQUEST_FAIL ;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e095      	b.n	8006128 <MPU_init_acc+0x154>

	if(mpu->spi_speed ==  MPU_SPI_FAST)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006002:	2b01      	cmp	r3, #1
 8006004:	d102      	bne.n	800600c <MPU_init_acc+0x38>
			MPU_spi_slow(mpu);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff fe45 	bl	8005c96 <MPU_spi_slow>

	//Configuration de la sensi de l'acc dans le mpu
	//On lit
	uint8_t temp[2] ;
	temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 800600c:	239c      	movs	r3, #156	; 0x9c
 800600e:	753b      	strb	r3, [r7, #20]
	MPU_cs_lock(mpu);
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fe20 	bl	8005c56 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6858      	ldr	r0, [r3, #4]
 800601a:	f107 0214 	add.w	r2, r7, #20
 800601e:	f107 0114 	add.w	r1, r7, #20
 8006022:	2302      	movs	r3, #2
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	2302      	movs	r3, #2
 8006028:	f007 f976 	bl	800d318 <HAL_SPI_TransmitReceive>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f7ff fe1e 	bl	8005c76 <MPU_cs_unlock>

	//On écrit
	if(mpu->hal_state == HAL_OK){	//Si mpu ok on écrit en spi dans le registre de config du mpu dédié au gyro
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	7b9b      	ldrb	r3, [r3, #14]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d122      	bne.n	8006088 <MPU_init_acc+0xb4>
		HAL_Delay(1);
 8006042:	2001      	movs	r0, #1
 8006044:	f002 f9b8 	bl	80083b8 <HAL_Delay>
		MPU_cs_lock(mpu);
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7ff fe04 	bl	8005c56 <MPU_cs_lock>
		temp[0] = MPU6050_ACCEL_CONFIG ;
 800604e:	231c      	movs	r3, #28
 8006050:	753b      	strb	r3, [r7, #20]
		temp[1] = (temp[1] & 0xE7) | (uint8_t)acc_range << 3;
 8006052:	7d7b      	ldrb	r3, [r7, #21]
 8006054:	b25b      	sxtb	r3, r3
 8006056:	f023 0318 	bic.w	r3, r3, #24
 800605a:	b25a      	sxtb	r2, r3
 800605c:	7afb      	ldrb	r3, [r7, #11]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	b25b      	sxtb	r3, r3
 8006062:	4313      	orrs	r3, r2
 8006064:	b25b      	sxtb	r3, r3
 8006066:	b2db      	uxtb	r3, r3
 8006068:	757b      	strb	r3, [r7, #21]
		mpu->hal_state = HAL_SPI_Transmit(mpu->hspi, temp,  2, 2);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6858      	ldr	r0, [r3, #4]
 800606e:	f107 0114 	add.w	r1, r7, #20
 8006072:	2302      	movs	r3, #2
 8006074:	2202      	movs	r2, #2
 8006076:	f007 f81b 	bl	800d0b0 <HAL_SPI_Transmit>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fdf7 	bl	8005c76 <MPU_cs_unlock>
	}

	//On test si on a bien écrit ce que l'on voulait
	if(mpu->hal_state == HAL_OK){ // on vérifi si on a bien configuré le gyro comme on voulait
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	7b9b      	ldrb	r3, [r3, #14]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d124      	bne.n	80060da <MPU_init_acc+0x106>
		uint8_t temp2 = temp[1];
 8006090:	7d7b      	ldrb	r3, [r7, #21]
 8006092:	75fb      	strb	r3, [r7, #23]
		temp[0] = MPU6050_ACCEL_CONFIG | MPU6050_READ ;
 8006094:	239c      	movs	r3, #156	; 0x9c
 8006096:	753b      	strb	r3, [r7, #20]
		HAL_Delay(1);
 8006098:	2001      	movs	r0, #1
 800609a:	f002 f98d 	bl	80083b8 <HAL_Delay>
		MPU_cs_lock(mpu);
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff fdd9 	bl	8005c56 <MPU_cs_lock>
		mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, temp, temp, 2, 2);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6858      	ldr	r0, [r3, #4]
 80060a8:	f107 0214 	add.w	r2, r7, #20
 80060ac:	f107 0114 	add.w	r1, r7, #20
 80060b0:	2302      	movs	r3, #2
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	2302      	movs	r3, #2
 80060b6:	f007 f92f 	bl	800d318 <HAL_SPI_TransmitReceive>
 80060ba:	4603      	mov	r3, r0
 80060bc:	461a      	mov	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	739a      	strb	r2, [r3, #14]
		MPU_cs_unlock(mpu);
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff fdd7 	bl	8005c76 <MPU_cs_unlock>

		if(temp[1] != temp2)
 80060c8:	7d7b      	ldrb	r3, [r7, #21]
 80060ca:	7dfa      	ldrb	r2, [r7, #23]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d004      	beq.n	80060da <MPU_init_acc+0x106>
		{
			mpu->state = SENSOR_ERROR ;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2204      	movs	r2, #4
 80060d4:	73da      	strb	r2, [r3, #15]
			return SENSOR_REQUEST_FAIL ;
 80060d6:	2302      	movs	r3, #2
 80060d8:	e026      	b.n	8006128 <MPU_init_acc+0x154>
		}
	}



	switch(acc_range){
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d81f      	bhi.n	8006120 <MPU_init_acc+0x14c>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <MPU_init_acc+0x114>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	08006103 	.word	0x08006103
 80060f0:	0800610d 	.word	0x0800610d
 80060f4:	08006117 	.word	0x08006117
		case MPU_ACC_2G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80060fe:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8006100:	e00e      	b.n	8006120 <MPU_init_acc+0x14c>
		case MPU_ACC_4G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8006108:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 800610a:	e009      	b.n	8006120 <MPU_init_acc+0x14c>
		case MPU_ACC_8G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8006112:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 8006114:	e004      	b.n	8006120 <MPU_init_acc+0x14c>
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800611c:	661a      	str	r2, [r3, #96]	; 0x60
			break;
 800611e:	bf00      	nop
	}
	MPU_spi_fast(mpu);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff fdd4 	bl	8005cce <MPU_spi_fast>
	return SENSOR_REQUEST_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <MPU_update_acc>:
	convert_gyro(mpu);
	return SENSOR_REQUEST_OK ;

}

sensor_request_e MPU_update_acc(mpu_t * mpu){
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	6078      	str	r0, [r7, #4]

	if(mpu->state != SENSOR_IDDLE){
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	7bdb      	ldrb	r3, [r3, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <MPU_update_acc+0x14>
		return SENSOR_REQUEST_FAIL ;
 8006140:	2302      	movs	r3, #2
 8006142:	e030      	b.n	80061a6 <MPU_update_acc+0x76>
	}

	//Update des valeurs
	uint8_t registers [] = {MPU6050_ACCEL_XOUT_H | MPU6050_READ, 0, 0, 0, 0, 0};
 8006144:	23bb      	movs	r3, #187	; 0xbb
 8006146:	723b      	strb	r3, [r7, #8]
 8006148:	2300      	movs	r3, #0
 800614a:	727b      	strb	r3, [r7, #9]
 800614c:	2300      	movs	r3, #0
 800614e:	72bb      	strb	r3, [r7, #10]
 8006150:	2300      	movs	r3, #0
 8006152:	72fb      	strb	r3, [r7, #11]
 8006154:	2300      	movs	r3, #0
 8006156:	733b      	strb	r3, [r7, #12]
 8006158:	2300      	movs	r3, #0
 800615a:	737b      	strb	r3, [r7, #13]
	MPU_cs_lock(mpu);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fd7a 	bl	8005c56 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive(mpu->hspi, registers, mpu->acc_data, 6, 2);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6858      	ldr	r0, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800616a:	f107 0108 	add.w	r1, r7, #8
 800616e:	2302      	movs	r3, #2
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2306      	movs	r3, #6
 8006174:	f007 f8d0 	bl	800d318 <HAL_SPI_TransmitReceive>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	739a      	strb	r2, [r3, #14]
	MPU_cs_unlock(mpu);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fd78 	bl	8005c76 <MPU_cs_unlock>


	if(mpu->hal_state == HAL_BUSY)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7b9b      	ldrb	r3, [r3, #14]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d101      	bne.n	8006192 <MPU_update_acc+0x62>
		return SENSOR_REQUEST_BUSY ;
 800618e:	2301      	movs	r3, #1
 8006190:	e009      	b.n	80061a6 <MPU_update_acc+0x76>
	if(mpu->hal_state != HAL_OK){
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7b9b      	ldrb	r3, [r3, #14]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <MPU_update_acc+0x6e>
		return SENSOR_REQUEST_FAIL ;
 800619a:	2302      	movs	r3, #2
 800619c:	e003      	b.n	80061a6 <MPU_update_acc+0x76>
	}

	//Convertion des valeurs
	convert_acc(mpu);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fcef 	bl	8005b82 <convert_acc>
	return SENSOR_REQUEST_OK ;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <MPU_update_all_dma>:
	}

	return SENSOR_REQUEST_OK;
}

sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]

	uint8_t registers [14] = {0};
 80061b6:	f107 0308 	add.w	r3, r7, #8
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	605a      	str	r2, [r3, #4]
 80061c0:	609a      	str	r2, [r3, #8]
 80061c2:	819a      	strh	r2, [r3, #12]
	registers[0] = MPU6050_ACCEL_XOUT_H | MPU6050_READ ;
 80061c4:	23bb      	movs	r3, #187	; 0xbb
 80061c6:	723b      	strb	r3, [r7, #8]
	MPU_cs_lock(mpu);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7ff fd44 	bl	8005c56 <MPU_cs_lock>
	mpu->hal_state = HAL_SPI_TransmitReceive_DMA(mpu->hspi, registers, mpu->data, 14);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6858      	ldr	r0, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f103 0212 	add.w	r2, r3, #18
 80061d8:	f107 0108 	add.w	r1, r7, #8
 80061dc:	230e      	movs	r3, #14
 80061de:	f007 fa3d 	bl	800d65c <HAL_SPI_TransmitReceive_DMA>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	739a      	strb	r2, [r3, #14]

	if(mpu->hal_state == HAL_OK)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	7b9b      	ldrb	r3, [r3, #14]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d107      	bne.n	8006202 <MPU_update_all_dma+0x54>
	{
		mpu->state = SENSOR_BUSY ;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2203      	movs	r2, #3
 80061f6:	73da      	strb	r2, [r3, #15]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2203      	movs	r2, #3
 80061fc:	741a      	strb	r2, [r3, #16]
	{
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	return SENSOR_REQUEST_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e009      	b.n	8006216 <MPU_update_all_dma+0x68>
	else if(mpu->hal_state == HAL_BUSY)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7b9b      	ldrb	r3, [r3, #14]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d101      	bne.n	800620e <MPU_update_all_dma+0x60>
		return SENSOR_REQUEST_BUSY;
 800620a:	2301      	movs	r3, #1
 800620c:	e003      	b.n	8006216 <MPU_update_all_dma+0x68>
		mpu->state = SENSOR_ERROR ;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2204      	movs	r2, #4
 8006212:	73da      	strb	r2, [r3, #15]
		return SENSOR_REQUEST_FAIL ;
 8006214:	2302      	movs	r3, #2
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <MPU_dma_transmit_complete>:



static void MPU_dma_transmit_complete(mpu_t * mpu){
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]

	//On relâche le pin CS du mpu
	MPU_cs_unlock(mpu);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff fd25 	bl	8005c76 <MPU_cs_unlock>


	switch(mpu->dma_state){
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7c1b      	ldrb	r3, [r3, #16]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d00b      	beq.n	800624c <MPU_dma_transmit_complete+0x2e>
 8006234:	2b03      	cmp	r3, #3
 8006236:	d010      	beq.n	800625a <MPU_dma_transmit_complete+0x3c>
 8006238:	2b01      	cmp	r3, #1
 800623a:	d000      	beq.n	800623e <MPU_dma_transmit_complete+0x20>
			mpu->gyro_data_callback();

			break;
		case MPU_DMA_IDDLE:
		default:
			break;
 800623c:	e014      	b.n	8006268 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fc38 	bl	8005ab4 <convert_gyro>
			mpu->gyro_data_callback();
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	4798      	blx	r3
			break;
 800624a:	e00d      	b.n	8006268 <MPU_dma_transmit_complete+0x4a>
			convert_acc(mpu);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fc98 	bl	8005b82 <convert_acc>
			mpu->acc_data_callback();
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006256:	4798      	blx	r3
			break;
 8006258:	e006      	b.n	8006268 <MPU_dma_transmit_complete+0x4a>
			convert_gyro(mpu);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fc2a 	bl	8005ab4 <convert_gyro>
			mpu->gyro_data_callback();
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	4798      	blx	r3
			break;
 8006266:	bf00      	nop

	}
	mpu->dma_state = MPU_DMA_IDDLE ;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	741a      	strb	r2, [r3, #16]
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <MPU_dma_transmit_half_complete>:
static void MPU_dma_transmit_half_complete(mpu_t * mpu){
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

	if(mpu->dma_state == MPU_DMA_ACC_AND_GYRO_IN_PROGRESS)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	7c1b      	ldrb	r3, [r3, #16]
 8006282:	2b03      	cmp	r3, #3
 8006284:	d105      	bne.n	8006292 <MPU_dma_transmit_half_complete+0x1c>
	{
		//A la moitié donc les données de l'acc sont arrivées
		convert_acc(mpu);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fc7b 	bl	8005b82 <convert_acc>
		mpu->acc_data_callback();
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006290:	4798      	blx	r3
	}
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
	if(hspi == SPI_handlers[0])
 80062a4:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d104      	bne.n	80062b8 <HAL_SPI_TxRxCpltCallback+0x1c>
		MPU_dma_transmit_complete(mpu_handlers[0]);
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_SPI_TxRxCpltCallback+0x28>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff ffb3 	bl	800621e <MPU_dma_transmit_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20002494 	.word	0x20002494
 80062c4:	20002498 	.word	0x20002498

080062c8 <HAL_SPI_TxRxHalfCpltCallback>:

void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
#if NB_MPU_USED == 1
if(hspi == SPI_handlers[0])
 80062d0:	4b06      	ldr	r3, [pc, #24]	; (80062ec <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d104      	bne.n	80062e4 <HAL_SPI_TxRxHalfCpltCallback+0x1c>
	MPU_dma_transmit_half_complete(mpu_handlers[0]);
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff ffc9 	bl	8006276 <MPU_dma_transmit_half_complete>
#else
#error Code à faire pour gérer plusieurs MPU en même temps
#endif

}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20002494 	.word	0x20002494
 80062f0:	20002498 	.word	0x20002498

080062f4 <MS5611_init>:

#include "ms5611.h"
#include "math.h"
ms5611_t * ms5611_ ;

sensor_request_e MS5611_init(ms5611_t * ms5611, I2C_HandleTypeDef * hi2c, void (*temp_data), void (*pressure_data)){
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af04      	add	r7, sp, #16
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
	ms5611->state = SENSOR_NOT_INIT ;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	715a      	strb	r2, [r3, #5]
	ms5611_ = ms5611 ;
 8006308:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <MS5611_init+0xd4>)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6013      	str	r3, [r2, #0]

	//Callback function
	ms5611->temp_data = temp_data ;
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	635a      	str	r2, [r3, #52]	; 0x34
	ms5611->pressure_data = pressure_data ;
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	639a      	str	r2, [r3, #56]	; 0x38
	if(hi2c == NULL)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <MS5611_init+0x30>
		return SENSOR_REQUEST_FAIL ;
 8006320:	2302      	movs	r3, #2
 8006322:	e04c      	b.n	80063be <MS5611_init+0xca>

	ms5611->hi2c = hi2c ;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	601a      	str	r2, [r3, #0]
	ms5611->hal_state = HAL_I2C_IsDeviceReady(ms5611->hi2c, MS5611_ADRESSE, 5, 2);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	2302      	movs	r3, #2
 8006330:	2205      	movs	r2, #5
 8006332:	21ee      	movs	r1, #238	; 0xee
 8006334:	f004 f8ac 	bl	800a490 <HAL_I2C_IsDeviceReady>
 8006338:	4603      	mov	r3, r0
 800633a:	461a      	mov	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	711a      	strb	r2, [r3, #4]
	if(ms5611->hal_state != HAL_OK)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	791b      	ldrb	r3, [r3, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MS5611_init+0x58>
		return SENSOR_REQUEST_FAIL ;
 8006348:	2302      	movs	r3, #2
 800634a:	e038      	b.n	80063be <MS5611_init+0xca>

	//Get calibrations values from the sensor
	uint8_t data[2];
	for(uint8_t d = 1; d < 7; d++){
 800634c:	2301      	movs	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]
 8006350:	e02e      	b.n	80063b0 <MS5611_init+0xbc>
		if(ms5611->hal_state == HAL_OK){
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	791b      	ldrb	r3, [r3, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d125      	bne.n	80063a6 <MS5611_init+0xb2>
			ms5611->hal_state = HAL_I2C_Mem_Read(ms5611->hi2c, MS5611_ADRESSE, (uint8_t)(MS5611_PROM + (2*d)), I2C_MEMADD_SIZE_8BIT, data, 2, 2);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	3350      	adds	r3, #80	; 0x50
 8006362:	b2db      	uxtb	r3, r3
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	b2db      	uxtb	r3, r3
 8006368:	b29a      	uxth	r2, r3
 800636a:	2302      	movs	r3, #2
 800636c:	9302      	str	r3, [sp, #8]
 800636e:	2302      	movs	r3, #2
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	f107 0314 	add.w	r3, r7, #20
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2301      	movs	r3, #1
 800637a:	21ee      	movs	r1, #238	; 0xee
 800637c:	f003 fcf0 	bl	8009d60 <HAL_I2C_Mem_Read>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	711a      	strb	r2, [r3, #4]
			ms5611->calibration_values[d-1] = (uint16_t)((data[0] << 8) | data[1]);
 8006388:	7d3b      	ldrb	r3, [r7, #20]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	b21a      	sxth	r2, r3
 800638e:	7d7b      	ldrb	r3, [r7, #21]
 8006390:	b21b      	sxth	r3, r3
 8006392:	4313      	orrs	r3, r2
 8006394:	b219      	sxth	r1, r3
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	1e5a      	subs	r2, r3, #1
 800639a:	b289      	uxth	r1, r1
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3204      	adds	r2, #4
 80063a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80063a4:	e001      	b.n	80063aa <MS5611_init+0xb6>
		}
		else
			return SENSOR_REQUEST_FAIL ;
 80063a6:	2302      	movs	r3, #2
 80063a8:	e009      	b.n	80063be <MS5611_init+0xca>
	for(uint8_t d = 1; d < 7; d++){
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	3301      	adds	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	2b06      	cmp	r3, #6
 80063b4:	d9cd      	bls.n	8006352 <MS5611_init+0x5e>
	}
	ms5611->state = SENSOR_IDDLE ;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	715a      	strb	r2, [r3, #5]

	return SENSOR_REQUEST_OK ;
 80063bc:	2300      	movs	r3, #0

}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200024bc 	.word	0x200024bc

080063cc <MS5611_request_temp>:

//Demande pour une mesure de température
sensor_request_e MS5611_request_temp(ms5611_t * ms5611){
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	795b      	ldrb	r3, [r3, #5]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d101      	bne.n	80063e0 <MS5611_request_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 80063dc:	2301      	movs	r3, #1
 80063de:	e01d      	b.n	800641c <MS5611_request_temp+0x50>
	if(ms5611->state)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	795b      	ldrb	r3, [r3, #5]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <MS5611_request_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 80063e8:	2302      	movs	r3, #2
 80063ea:	e017      	b.n	800641c <MS5611_request_temp+0x50>

	uint8_t temp_request = MS5611_TEMP ;
 80063ec:	2358      	movs	r3, #88	; 0x58
 80063ee:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &temp_request, 1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	f107 020f 	add.w	r2, r7, #15
 80063f8:	2301      	movs	r3, #1
 80063fa:	21ee      	movs	r1, #238	; 0xee
 80063fc:	f003 fb9a 	bl	8009b34 <HAL_I2C_Master_Transmit_DMA>
 8006400:	4603      	mov	r3, r0
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	791b      	ldrb	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d004      	beq.n	800641a <MS5611_request_temp+0x4e>
		ms5611->state = SENSOR_ERROR ;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2204      	movs	r2, #4
 8006414:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 8006416:	2302      	movs	r3, #2
 8006418:	e000      	b.n	800641c <MS5611_request_temp+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <MS5611_request_pressure>:

//Demande pour une mesure de pressio
sensor_request_e MS5611_request_pressure(ms5611_t * ms5611){
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	if(ms5611->state == SENSOR_BUSY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	795b      	ldrb	r3, [r3, #5]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d101      	bne.n	8006438 <MS5611_request_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 8006434:	2301      	movs	r3, #1
 8006436:	e01d      	b.n	8006474 <MS5611_request_pressure+0x50>
	if(ms5611->state)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	795b      	ldrb	r3, [r3, #5]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MS5611_request_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 8006440:	2302      	movs	r3, #2
 8006442:	e017      	b.n	8006474 <MS5611_request_pressure+0x50>

	uint8_t pressure_request = MS5611_PRESSURE ;
 8006444:	2348      	movs	r3, #72	; 0x48
 8006446:	73fb      	strb	r3, [r7, #15]
	ms5611->hal_state = HAL_I2C_Master_Transmit_DMA(ms5611->hi2c, MS5611_ADRESSE, &pressure_request, 1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	f107 020f 	add.w	r2, r7, #15
 8006450:	2301      	movs	r3, #1
 8006452:	21ee      	movs	r1, #238	; 0xee
 8006454:	f003 fb6e 	bl	8009b34 <HAL_I2C_Master_Transmit_DMA>
 8006458:	4603      	mov	r3, r0
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	711a      	strb	r2, [r3, #4]

	if(ms5611->hal_state != HAL_OK){
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	791b      	ldrb	r3, [r3, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <MS5611_request_pressure+0x4e>
		ms5611->state = SENSOR_ERROR ;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2204      	movs	r2, #4
 800646c:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 800646e:	2302      	movs	r3, #2
 8006470:	e000      	b.n	8006474 <MS5611_request_pressure+0x50>
	}
	else
		return SENSOR_REQUEST_OK ;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <MS5611_read_temp>:

//Lecture de la température
sensor_request_e MS5611_read_temp(ms5611_t * ms5611){
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af02      	add	r7, sp, #8
 8006482:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	795b      	ldrb	r3, [r3, #5]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d101      	bne.n	8006490 <MS5611_read_temp+0x14>
		return SENSOR_REQUEST_BUSY;
 800648c:	2301      	movs	r3, #1
 800648e:	e022      	b.n	80064d6 <MS5611_read_temp+0x5a>
	if(ms5611->state)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	795b      	ldrb	r3, [r3, #5]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <MS5611_read_temp+0x20>
		return SENSOR_REQUEST_FAIL;
 8006498:	2302      	movs	r3, #2
 800649a:	e01c      	b.n	80064d6 <MS5611_read_temp+0x5a>

	ms5611->hal_state = HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3330      	adds	r3, #48	; 0x30
 80064a4:	2203      	movs	r2, #3
 80064a6:	9201      	str	r2, [sp, #4]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	2301      	movs	r3, #1
 80064ac:	2200      	movs	r2, #0
 80064ae:	21ee      	movs	r1, #238	; 0xee
 80064b0:	f003 fe7c 	bl	800a1ac <HAL_I2C_Mem_Read_DMA>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	711a      	strb	r2, [r3, #4]
	ms5611->read_state = MS5611_READ_TEMPERATURE ;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	791b      	ldrb	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <MS5611_read_temp+0x58>
		ms5611->state = SENSOR_ERROR ;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 80064d0:	2302      	movs	r3, #2
 80064d2:	e000      	b.n	80064d6 <MS5611_read_temp+0x5a>
	}
	else
		return SENSOR_REQUEST_OK ;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <MS5611_read_pressure>:

//Lecture de la pression
sensor_request_e MS5611_read_pressure(ms5611_t * ms5611){
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af02      	add	r7, sp, #8
 80064e4:	6078      	str	r0, [r7, #4]

	if(ms5611->state == SENSOR_BUSY)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	795b      	ldrb	r3, [r3, #5]
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d101      	bne.n	80064f2 <MS5611_read_pressure+0x14>
		return SENSOR_REQUEST_BUSY;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e01e      	b.n	8006530 <MS5611_read_pressure+0x52>
	if(ms5611->state)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	795b      	ldrb	r3, [r3, #5]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <MS5611_read_pressure+0x20>
		return SENSOR_REQUEST_FAIL;
 80064fa:	2302      	movs	r3, #2
 80064fc:	e018      	b.n	8006530 <MS5611_read_pressure+0x52>


	HAL_I2C_Mem_Read_DMA(ms5611->hi2c, MS5611_ADRESSE, MS5611_READ_DATA, I2C_MEMADD_SIZE_8BIT, ms5611->read_tmp, 3);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3330      	adds	r3, #48	; 0x30
 8006506:	2203      	movs	r2, #3
 8006508:	9201      	str	r2, [sp, #4]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2301      	movs	r3, #1
 800650e:	2200      	movs	r2, #0
 8006510:	21ee      	movs	r1, #238	; 0xee
 8006512:	f003 fe4b 	bl	800a1ac <HAL_I2C_Mem_Read_DMA>
	ms5611->read_state = MS5611_READ_PRESSURE ;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	719a      	strb	r2, [r3, #6]

	if(ms5611->hal_state != HAL_OK){
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <MS5611_read_pressure+0x50>
		ms5611->state = SENSOR_ERROR ;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2204      	movs	r2, #4
 8006528:	715a      	strb	r2, [r3, #5]
		return SENSOR_REQUEST_FAIL;
 800652a:	2302      	movs	r3, #2
 800652c:	e000      	b.n	8006530 <MS5611_read_pressure+0x52>
	}
	else
		return SENSOR_REQUEST_OK ;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <MS5611_calculate_temperature>:

//Calcul de la température
void MS5611_calculate_temperature(ms5611_t * ms5611){
 8006538:	b4b0      	push	{r4, r5, r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
	ms5611->dT = ms5611->raw_temperature - (int32_t)ms5611->calibration_values[4] * 256;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	8a12      	ldrh	r2, [r2, #16]
 8006548:	0212      	lsls	r2, r2, #8
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	461a      	mov	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	625a      	str	r2, [r3, #36]	; 0x24
	ms5611->temperature = 2000 +  ((int64_t) ms5611->dT * ms5611->calibration_values[5]) / 8388608 ;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	4619      	mov	r1, r3
 8006558:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8a5b      	ldrh	r3, [r3, #18]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f04f 0400 	mov.w	r4, #0
 8006566:	fb03 f502 	mul.w	r5, r3, r2
 800656a:	fb01 f004 	mul.w	r0, r1, r4
 800656e:	4428      	add	r0, r5
 8006570:	fba1 3403 	umull	r3, r4, r1, r3
 8006574:	1902      	adds	r2, r0, r4
 8006576:	4614      	mov	r4, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	f174 0200 	sbcs.w	r2, r4, #0
 800657e:	da05      	bge.n	800658c <MS5611_calculate_temperature+0x54>
 8006580:	490c      	ldr	r1, [pc, #48]	; (80065b4 <MS5611_calculate_temperature+0x7c>)
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	185b      	adds	r3, r3, r1
 8006588:	eb44 0402 	adc.w	r4, r4, r2
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	0dd9      	lsrs	r1, r3, #23
 8006596:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
 800659a:	15e2      	asrs	r2, r4, #23
 800659c:	460b      	mov	r3, r1
 800659e:	4614      	mov	r4, r2
 80065a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80065a4:	461a      	mov	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bcb0      	pop	{r4, r5, r7}
 80065b2:	4770      	bx	lr
 80065b4:	007fffff 	.word	0x007fffff

080065b8 <MS5611_calculate_pressure>:

//Calcul de la pression
void MS5611_calculate_pressure(ms5611_t * ms5611){
 80065b8:	b4f0      	push	{r4, r5, r6, r7}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	 int64_t OFF = (int64_t)ms5611->calibration_values[1] * 65536 + (int64_t)ms5611->calibration_values[3] * ms5611->dT / 128 ;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	895b      	ldrh	r3, [r3, #10]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f04f 0400 	mov.w	r4, #0
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	0422      	lsls	r2, r4, #16
 80065d4:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
 80065d8:	0419      	lsls	r1, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	89db      	ldrh	r3, [r3, #14]
 80065de:	b29d      	uxth	r5, r3
 80065e0:	f04f 0600 	mov.w	r6, #0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80065ec:	fb03 fc06 	mul.w	ip, r3, r6
 80065f0:	fb05 f004 	mul.w	r0, r5, r4
 80065f4:	4460      	add	r0, ip
 80065f6:	fba5 3403 	umull	r3, r4, r5, r3
 80065fa:	4420      	add	r0, r4
 80065fc:	4604      	mov	r4, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f174 0000 	sbcs.w	r0, r4, #0
 8006604:	da02      	bge.n	800660c <MS5611_calculate_pressure+0x54>
 8006606:	337f      	adds	r3, #127	; 0x7f
 8006608:	f144 0400 	adc.w	r4, r4, #0
 800660c:	f04f 0500 	mov.w	r5, #0
 8006610:	f04f 0600 	mov.w	r6, #0
 8006614:	09dd      	lsrs	r5, r3, #7
 8006616:	ea45 6544 	orr.w	r5, r5, r4, lsl #25
 800661a:	11e6      	asrs	r6, r4, #7
 800661c:	186b      	adds	r3, r5, r1
 800661e:	eb46 0402 	adc.w	r4, r6, r2
 8006622:	e9c7 3404 	strd	r3, r4, [r7, #16]
	 int64_t SENS = (int64_t)ms5611->calibration_values[0] * 32768 + (int64_t)ms5611->calibration_values[2] * ms5611->dT / 256 ;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	891b      	ldrh	r3, [r3, #8]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f04f 0400 	mov.w	r4, #0
 8006630:	f04f 0100 	mov.w	r1, #0
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	03e2      	lsls	r2, r4, #15
 800663a:	ea42 4253 	orr.w	r2, r2, r3, lsr #17
 800663e:	03d9      	lsls	r1, r3, #15
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	899b      	ldrh	r3, [r3, #12]
 8006644:	b29d      	uxth	r5, r3
 8006646:	f04f 0600 	mov.w	r6, #0
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8006652:	fb03 fc06 	mul.w	ip, r3, r6
 8006656:	fb05 f004 	mul.w	r0, r5, r4
 800665a:	4460      	add	r0, ip
 800665c:	fba5 3403 	umull	r3, r4, r5, r3
 8006660:	4420      	add	r0, r4
 8006662:	4604      	mov	r4, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	f174 0000 	sbcs.w	r0, r4, #0
 800666a:	da02      	bge.n	8006672 <MS5611_calculate_pressure+0xba>
 800666c:	33ff      	adds	r3, #255	; 0xff
 800666e:	f144 0400 	adc.w	r4, r4, #0
 8006672:	f04f 0500 	mov.w	r5, #0
 8006676:	f04f 0600 	mov.w	r6, #0
 800667a:	0a1d      	lsrs	r5, r3, #8
 800667c:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
 8006680:	1226      	asrs	r6, r4, #8
 8006682:	186b      	adds	r3, r5, r1
 8006684:	eb46 0402 	adc.w	r4, r6, r2
 8006688:	e9c7 3402 	strd	r3, r4, [r7, #8]
	 ms5611->pressure = (uint32_t)(ms5611->raw_pressure * SENS / 2097152 - OFF) / 32768 ;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f04f 0400 	mov.w	r4, #0
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	fb04 f102 	mul.w	r1, r4, r2
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	fb03 f202 	mul.w	r2, r3, r2
 80066a0:	440a      	add	r2, r1
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	fba1 3403 	umull	r3, r4, r1, r3
 80066a8:	4422      	add	r2, r4
 80066aa:	4614      	mov	r4, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f174 0200 	sbcs.w	r2, r4, #0
 80066b2:	da05      	bge.n	80066c0 <MS5611_calculate_pressure+0x108>
 80066b4:	490d      	ldr	r1, [pc, #52]	; (80066ec <MS5611_calculate_pressure+0x134>)
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	185b      	adds	r3, r3, r1
 80066bc:	eb44 0402 	adc.w	r4, r4, r2
 80066c0:	f04f 0100 	mov.w	r1, #0
 80066c4:	f04f 0200 	mov.w	r2, #0
 80066c8:	0d59      	lsrs	r1, r3, #21
 80066ca:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 80066ce:	1562      	asrs	r2, r4, #21
 80066d0:	460b      	mov	r3, r1
 80066d2:	4614      	mov	r4, r2
 80066d4:	461a      	mov	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	0bda      	lsrs	r2, r3, #15
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	61da      	str	r2, [r3, #28]
}
 80066e0:	bf00      	nop
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bcf0      	pop	{r4, r5, r6, r7}
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	001fffff 	.word	0x001fffff

080066f0 <MS5611_calculate_altitude>:

//Calcul de l'altitude
void MS5611_calculate_altitude(ms5611_t * ms5611){
 80066f0:	b5b0      	push	{r4, r5, r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	ms5611->altitude = 44330.0f * (1.0 - powf((float)ms5611->pressure * 0.00000986923f, 0.190294957f)) - ms5611->altitude_shift ;	// 260 µs lel
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	ee07 3a90 	vmov	s15, r3
 8006700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006704:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80067a8 <MS5611_calculate_altitude+0xb8>
 8006708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800670c:	eddf 0a27 	vldr	s1, [pc, #156]	; 80067ac <MS5611_calculate_altitude+0xbc>
 8006710:	eeb0 0a67 	vmov.f32	s0, s15
 8006714:	f00c fca2 	bl	801305c <powf>
 8006718:	ee10 3a10 	vmov	r3, s0
 800671c:	4618      	mov	r0, r3
 800671e:	f7f9 ff13 	bl	8000548 <__aeabi_f2d>
 8006722:	4603      	mov	r3, r0
 8006724:	460c      	mov	r4, r1
 8006726:	461a      	mov	r2, r3
 8006728:	4623      	mov	r3, r4
 800672a:	f04f 0000 	mov.w	r0, #0
 800672e:	4920      	ldr	r1, [pc, #128]	; (80067b0 <MS5611_calculate_altitude+0xc0>)
 8006730:	f7f9 fdaa 	bl	8000288 <__aeabi_dsub>
 8006734:	4603      	mov	r3, r0
 8006736:	460c      	mov	r4, r1
 8006738:	4618      	mov	r0, r3
 800673a:	4621      	mov	r1, r4
 800673c:	a318      	add	r3, pc, #96	; (adr r3, 80067a0 <MS5611_calculate_altitude+0xb0>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 ff59 	bl	80005f8 <__aeabi_dmul>
 8006746:	4603      	mov	r3, r0
 8006748:	460c      	mov	r4, r1
 800674a:	4625      	mov	r5, r4
 800674c:	461c      	mov	r4, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	4618      	mov	r0, r3
 8006754:	f7f9 fef8 	bl	8000548 <__aeabi_f2d>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4620      	mov	r0, r4
 800675e:	4629      	mov	r1, r5
 8006760:	f7f9 fd92 	bl	8000288 <__aeabi_dsub>
 8006764:	4603      	mov	r3, r0
 8006766:	460c      	mov	r4, r1
 8006768:	4618      	mov	r0, r3
 800676a:	4621      	mov	r1, r4
 800676c:	f7fa fa1c 	bl	8000ba8 <__aeabi_d2f>
 8006770:	4602      	mov	r2, r0
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	629a      	str	r2, [r3, #40]	; 0x28
	//Si on a le shift en altitude qui est nul, on l'init
	if(!ms5611->altitude_shift){
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800677c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006784:	d107      	bne.n	8006796 <MS5611_calculate_altitude+0xa6>
		ms5611->altitude_shift = ms5611->altitude ;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	62da      	str	r2, [r3, #44]	; 0x2c
		ms5611->altitude = 0;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bdb0      	pop	{r4, r5, r7, pc}
 800679e:	bf00      	nop
 80067a0:	00000000 	.word	0x00000000
 80067a4:	40e5a540 	.word	0x40e5a540
 80067a8:	37259405 	.word	0x37259405
 80067ac:	3e42dcae 	.word	0x3e42dcae
 80067b0:	3ff00000 	.word	0x3ff00000

080067b4 <MS5611_i2c_rx_callabck>:


//Callback de l'i2c car dma finit
void MS5611_i2c_rx_callabck(I2C_HandleTypeDef * hi2c){
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	UNUSED(hi2c);
	if(ms5611_->read_state == MS5611_READ_TEMPERATURE){
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	799b      	ldrb	r3, [r3, #6]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d117      	bne.n	80067f6 <MS5611_i2c_rx_callabck+0x42>
		ms5611_->raw_temperature = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 80067c6:	4b1c      	ldr	r3, [pc, #112]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ce:	041a      	lsls	r2, r3, #16
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	4313      	orrs	r3, r2
 80067dc:	4a16      	ldr	r2, [pc, #88]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80067e4:	431a      	orrs	r2, r3
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	619a      	str	r2, [r3, #24]
		ms5611_->temp_data();
 80067ec:	4b12      	ldr	r3, [pc, #72]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f2:	4798      	blx	r3
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
		ms5611_->pressure_data();
	}

}
 80067f4:	e01b      	b.n	800682e <MS5611_i2c_rx_callabck+0x7a>
	else if(ms5611_->read_state == MS5611_READ_PRESSURE){
 80067f6:	4b10      	ldr	r3, [pc, #64]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	799b      	ldrb	r3, [r3, #6]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d116      	bne.n	800682e <MS5611_i2c_rx_callabck+0x7a>
		ms5611_->raw_pressure = (uint32_t)(ms5611_->read_tmp[0]<<16 | ms5611_->read_tmp[1]<<8 | ms5611_->read_tmp[2]);
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006808:	041a      	lsls	r2, r3, #16
 800680a:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	4313      	orrs	r3, r2
 8006816:	4a08      	ldr	r2, [pc, #32]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800681e:	431a      	orrs	r2, r3
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	615a      	str	r2, [r3, #20]
		ms5611_->pressure_data();
 8006826:	4b04      	ldr	r3, [pc, #16]	; (8006838 <MS5611_i2c_rx_callabck+0x84>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	4798      	blx	r3
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200024bc 	.word	0x200024bc

0800683c <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006842:	463b      	mov	r3, r7
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	605a      	str	r2, [r3, #4]
 800684a:	609a      	str	r2, [r3, #8]
 800684c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800684e:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006850:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <MX_ADC2_Init+0x9c>)
 8006852:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006854:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800685a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800685c:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <MX_ADC2_Init+0x98>)
 800685e:	2200      	movs	r2, #0
 8006860:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8006862:	4b1c      	ldr	r3, [pc, #112]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006864:	2200      	movs	r2, #0
 8006866:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006868:	4b1a      	ldr	r3, [pc, #104]	; (80068d4 <MX_ADC2_Init+0x98>)
 800686a:	2201      	movs	r2, #1
 800686c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800686e:	4b19      	ldr	r3, [pc, #100]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006876:	4b17      	ldr	r3, [pc, #92]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006878:	2200      	movs	r2, #0
 800687a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800687c:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <MX_ADC2_Init+0x98>)
 800687e:	4a17      	ldr	r2, [pc, #92]	; (80068dc <MX_ADC2_Init+0xa0>)
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006882:	4b14      	ldr	r3, [pc, #80]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006884:	2200      	movs	r2, #0
 8006886:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <MX_ADC2_Init+0x98>)
 800688a:	2201      	movs	r2, #1
 800688c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800688e:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006896:	4b0f      	ldr	r3, [pc, #60]	; (80068d4 <MX_ADC2_Init+0x98>)
 8006898:	2201      	movs	r2, #1
 800689a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800689c:	480d      	ldr	r0, [pc, #52]	; (80068d4 <MX_ADC2_Init+0x98>)
 800689e:	f001 fdad 	bl	80083fc <HAL_ADC_Init>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80068a8:	f000 fbf0 	bl	800708c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80068ac:	2309      	movs	r3, #9
 80068ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80068b0:	2301      	movs	r3, #1
 80068b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80068b8:	463b      	mov	r3, r7
 80068ba:	4619      	mov	r1, r3
 80068bc:	4805      	ldr	r0, [pc, #20]	; (80068d4 <MX_ADC2_Init+0x98>)
 80068be:	f001 fef1 	bl	80086a4 <HAL_ADC_ConfigChannel>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80068c8:	f000 fbe0 	bl	800708c <Error_Handler>
  }

}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	200024c0 	.word	0x200024c0
 80068d8:	40012100 	.word	0x40012100
 80068dc:	0f000001 	.word	0x0f000001

080068e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068e8:	f107 0314 	add.w	r3, r7, #20
 80068ec:	2200      	movs	r2, #0
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	605a      	str	r2, [r3, #4]
 80068f2:	609a      	str	r2, [r3, #8]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <HAL_ADC_MspInit+0x110>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d172      	bne.n	80069e8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	613b      	str	r3, [r7, #16]
 8006906:	4b3b      	ldr	r3, [pc, #236]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	4a3a      	ldr	r2, [pc, #232]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 800690c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006910:	6453      	str	r3, [r2, #68]	; 0x44
 8006912:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	4b34      	ldr	r3, [pc, #208]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	4a33      	ldr	r2, [pc, #204]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	6313      	str	r3, [r2, #48]	; 0x30
 800692e:	4b31      	ldr	r3, [pc, #196]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800693a:	2300      	movs	r3, #0
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	4b2d      	ldr	r3, [pc, #180]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	4a2c      	ldr	r2, [pc, #176]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	6313      	str	r3, [r2, #48]	; 0x30
 800694a:	4b2a      	ldr	r3, [pc, #168]	; (80069f4 <HAL_ADC_MspInit+0x114>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN11
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = PIN_V_BAT_Pin;
 8006956:	2302      	movs	r3, #2
 8006958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800695a:	2303      	movs	r3, #3
 800695c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695e:	2300      	movs	r3, #0
 8006960:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_V_BAT_GPIO_Port, &GPIO_InitStruct);
 8006962:	f107 0314 	add.w	r3, r7, #20
 8006966:	4619      	mov	r1, r3
 8006968:	4823      	ldr	r0, [pc, #140]	; (80069f8 <HAL_ADC_MspInit+0x118>)
 800696a:	f002 fdf7 	bl	800955c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PIN_CURRENT_Pin;
 800696e:	2302      	movs	r3, #2
 8006970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006972:	2303      	movs	r3, #3
 8006974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006976:	2300      	movs	r3, #0
 8006978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PIN_CURRENT_GPIO_Port, &GPIO_InitStruct);
 800697a:	f107 0314 	add.w	r3, r7, #20
 800697e:	4619      	mov	r1, r3
 8006980:	481e      	ldr	r0, [pc, #120]	; (80069fc <HAL_ADC_MspInit+0x11c>)
 8006982:	f002 fdeb 	bl	800955c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006986:	4b1e      	ldr	r3, [pc, #120]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 8006988:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <HAL_ADC_MspInit+0x124>)
 800698a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800698c:	4b1c      	ldr	r3, [pc, #112]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 800698e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006992:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006994:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 8006996:	2200      	movs	r2, #0
 8006998:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800699a:	4b19      	ldr	r3, [pc, #100]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 800699c:	2200      	movs	r2, #0
 800699e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80069a0:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069a6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80069a8:	4b15      	ldr	r3, [pc, #84]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ae:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80069b0:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069b6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80069b8:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069be:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80069c0:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069c6:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80069cc:	480c      	ldr	r0, [pc, #48]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069ce:	f002 fa1b 	bl	8008e08 <HAL_DMA_Init>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80069d8:	f000 fb58 	bl	800708c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a08      	ldr	r2, [pc, #32]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
 80069e2:	4a07      	ldr	r2, [pc, #28]	; (8006a00 <HAL_ADC_MspInit+0x120>)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80069e8:	bf00      	nop
 80069ea:	3728      	adds	r7, #40	; 0x28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40012100 	.word	0x40012100
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40020800 	.word	0x40020800
 80069fc:	40020400 	.word	0x40020400
 8006a00:	20002508 	.word	0x20002508
 8006a04:	40026440 	.word	0x40026440

08006a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	4b3f      	ldr	r3, [pc, #252]	; (8006b10 <MX_DMA_Init+0x108>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	4a3e      	ldr	r2, [pc, #248]	; (8006b10 <MX_DMA_Init+0x108>)
 8006a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a1e:	4b3c      	ldr	r3, [pc, #240]	; (8006b10 <MX_DMA_Init+0x108>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	603b      	str	r3, [r7, #0]
 8006a2e:	4b38      	ldr	r3, [pc, #224]	; (8006b10 <MX_DMA_Init+0x108>)
 8006a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a32:	4a37      	ldr	r2, [pc, #220]	; (8006b10 <MX_DMA_Init+0x108>)
 8006a34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a38:	6313      	str	r3, [r2, #48]	; 0x30
 8006a3a:	4b35      	ldr	r3, [pc, #212]	; (8006b10 <MX_DMA_Init+0x108>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8006a46:	2200      	movs	r2, #0
 8006a48:	2100      	movs	r1, #0
 8006a4a:	200b      	movs	r0, #11
 8006a4c:	f002 f9a5 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006a50:	200b      	movs	r0, #11
 8006a52:	f002 f9be 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006a56:	2200      	movs	r2, #0
 8006a58:	2100      	movs	r1, #0
 8006a5a:	200c      	movs	r0, #12
 8006a5c:	f002 f99d 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006a60:	200c      	movs	r0, #12
 8006a62:	f002 f9b6 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8006a66:	2200      	movs	r2, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	200e      	movs	r0, #14
 8006a6c:	f002 f995 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006a70:	200e      	movs	r0, #14
 8006a72:	f002 f9ae 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8006a76:	2200      	movs	r2, #0
 8006a78:	2100      	movs	r1, #0
 8006a7a:	200f      	movs	r0, #15
 8006a7c:	f002 f98d 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006a80:	200f      	movs	r0, #15
 8006a82:	f002 f9a6 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	2010      	movs	r0, #16
 8006a8c:	f002 f985 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006a90:	2010      	movs	r0, #16
 8006a92:	f002 f99e 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	2011      	movs	r0, #17
 8006a9c:	f002 f97d 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8006aa0:	2011      	movs	r0, #17
 8006aa2:	f002 f996 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	202f      	movs	r0, #47	; 0x2f
 8006aac:	f002 f975 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8006ab0:	202f      	movs	r0, #47	; 0x2f
 8006ab2:	f002 f98e 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	2100      	movs	r1, #0
 8006aba:	2038      	movs	r0, #56	; 0x38
 8006abc:	f002 f96d 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006ac0:	2038      	movs	r0, #56	; 0x38
 8006ac2:	f002 f986 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	2039      	movs	r0, #57	; 0x39
 8006acc:	f002 f965 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006ad0:	2039      	movs	r0, #57	; 0x39
 8006ad2:	f002 f97e 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2100      	movs	r1, #0
 8006ada:	203a      	movs	r0, #58	; 0x3a
 8006adc:	f002 f95d 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006ae0:	203a      	movs	r0, #58	; 0x3a
 8006ae2:	f002 f976 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2100      	movs	r1, #0
 8006aea:	203b      	movs	r0, #59	; 0x3b
 8006aec:	f002 f955 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006af0:	203b      	movs	r0, #59	; 0x3b
 8006af2:	f002 f96e 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006af6:	2200      	movs	r2, #0
 8006af8:	2100      	movs	r1, #0
 8006afa:	2045      	movs	r0, #69	; 0x45
 8006afc:	f002 f94d 	bl	8008d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006b00:	2045      	movs	r0, #69	; 0x45
 8006b02:	f002 f966 	bl	8008dd2 <HAL_NVIC_EnableIRQ>

}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	40023800 	.word	0x40023800

08006b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08a      	sub	sp, #40	; 0x28
 8006b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b1a:	f107 0314 	add.w	r3, r7, #20
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	605a      	str	r2, [r3, #4]
 8006b24:	609a      	str	r2, [r3, #8]
 8006b26:	60da      	str	r2, [r3, #12]
 8006b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
 8006b2e:	4b44      	ldr	r3, [pc, #272]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	4a43      	ldr	r2, [pc, #268]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b34:	f043 0304 	orr.w	r3, r3, #4
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3a:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	4b3d      	ldr	r3, [pc, #244]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	4a3c      	ldr	r2, [pc, #240]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b54:	6313      	str	r3, [r2, #48]	; 0x30
 8006b56:	4b3a      	ldr	r3, [pc, #232]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b62:	2300      	movs	r3, #0
 8006b64:	60bb      	str	r3, [r7, #8]
 8006b66:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	4a35      	ldr	r2, [pc, #212]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	6313      	str	r3, [r2, #48]	; 0x30
 8006b72:	4b33      	ldr	r3, [pc, #204]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	60bb      	str	r3, [r7, #8]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b7e:	2300      	movs	r3, #0
 8006b80:	607b      	str	r3, [r7, #4]
 8006b82:	4b2f      	ldr	r3, [pc, #188]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	4a2e      	ldr	r2, [pc, #184]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b8e:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <MX_GPIO_Init+0x12c>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_USER_1_Pin
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f24e 211c 	movw	r1, #57884	; 0xe21c
 8006ba0:	4828      	ldr	r0, [pc, #160]	; (8006c44 <MX_GPIO_Init+0x130>)
 8006ba2:	f002 fe75 	bl	8009890 <HAL_GPIO_WritePin>
                          |PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_LED_RGB_1_GPIO_Port, PIN_LED_RGB_1_Pin, GPIO_PIN_SET);
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4826      	ldr	r0, [pc, #152]	; (8006c44 <MX_GPIO_Init+0x130>)
 8006bac:	f002 fe70 	bl	8009890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_USER_3_GPIO_Port, PIN_USER_3_Pin, GPIO_PIN_RESET);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2101      	movs	r1, #1
 8006bb4:	4824      	ldr	r0, [pc, #144]	; (8006c48 <MX_GPIO_Init+0x134>)
 8006bb6:	f002 fe6b 	bl	8009890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin, GPIO_PIN_RESET);
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bc0:	4822      	ldr	r0, [pc, #136]	; (8006c4c <MX_GPIO_Init+0x138>)
 8006bc2:	f002 fe65 	bl	8009890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PIN_LED_RED_Pin|PIN_LED_GREEN_Pin|PIN_LED_BLUE_Pin|PIN_LED_RGB_1_Pin
 8006bc6:	f24e 231d 	movw	r3, #57885	; 0xe21d
 8006bca:	617b      	str	r3, [r7, #20]
                          |PIN_USER_1_Pin|PIN_USER_2_Pin|PIN_CS_MICRO_SD_Pin|PIN_LED_RGB_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bd8:	f107 0314 	add.w	r3, r7, #20
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4819      	ldr	r0, [pc, #100]	; (8006c44 <MX_GPIO_Init+0x130>)
 8006be0:	f002 fcbc 	bl	800955c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_3_Pin;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006be8:	2301      	movs	r3, #1
 8006bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_USER_3_GPIO_Port, &GPIO_InitStruct);
 8006bf4:	f107 0314 	add.w	r3, r7, #20
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4813      	ldr	r0, [pc, #76]	; (8006c48 <MX_GPIO_Init+0x134>)
 8006bfc:	f002 fcae 	bl	800955c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_USER_4_Pin;
 8006c00:	2302      	movs	r3, #2
 8006c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_USER_4_GPIO_Port, &GPIO_InitStruct);
 8006c0c:	f107 0314 	add.w	r3, r7, #20
 8006c10:	4619      	mov	r1, r3
 8006c12:	480d      	ldr	r0, [pc, #52]	; (8006c48 <MX_GPIO_Init+0x134>)
 8006c14:	f002 fca2 	bl	800955c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN_CS_MPU_Pin;
 8006c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c26:	2300      	movs	r3, #0
 8006c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PIN_CS_MPU_GPIO_Port, &GPIO_InitStruct);
 8006c2a:	f107 0314 	add.w	r3, r7, #20
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4806      	ldr	r0, [pc, #24]	; (8006c4c <MX_GPIO_Init+0x138>)
 8006c32:	f002 fc93 	bl	800955c <HAL_GPIO_Init>

}
 8006c36:	bf00      	nop
 8006c38:	3728      	adds	r7, #40	; 0x28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40020800 	.word	0x40020800
 8006c48:	40020000 	.word	0x40020000
 8006c4c:	40020400 	.word	0x40020400

08006c50 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006c54:	4b12      	ldr	r3, [pc, #72]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <MX_I2C1_Init+0x54>)
 8006c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8006c5a:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c5c:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <MX_I2C1_Init+0x58>)
 8006c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006c66:	4b0e      	ldr	r3, [pc, #56]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006c72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c74:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006c7a:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c86:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c8c:	4804      	ldr	r0, [pc, #16]	; (8006ca0 <MX_I2C1_Init+0x50>)
 8006c8e:	f002 fe19 	bl	80098c4 <HAL_I2C_Init>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006c98:	f000 f9f8 	bl	800708c <Error_Handler>
  }

}
 8006c9c:	bf00      	nop
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	200025c8 	.word	0x200025c8
 8006ca4:	40005400 	.word	0x40005400
 8006ca8:	00061a80 	.word	0x00061a80

08006cac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cb4:	f107 0314 	add.w	r3, r7, #20
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	605a      	str	r2, [r3, #4]
 8006cbe:	609a      	str	r2, [r3, #8]
 8006cc0:	60da      	str	r2, [r3, #12]
 8006cc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a4f      	ldr	r2, [pc, #316]	; (8006e08 <HAL_I2C_MspInit+0x15c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	f040 8098 	bne.w	8006e00 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	4b4d      	ldr	r3, [pc, #308]	; (8006e0c <HAL_I2C_MspInit+0x160>)
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	4a4c      	ldr	r2, [pc, #304]	; (8006e0c <HAL_I2C_MspInit+0x160>)
 8006cda:	f043 0302 	orr.w	r3, r3, #2
 8006cde:	6313      	str	r3, [r2, #48]	; 0x30
 8006ce0:	4b4a      	ldr	r3, [pc, #296]	; (8006e0c <HAL_I2C_MspInit+0x160>)
 8006ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006cec:	23c0      	movs	r3, #192	; 0xc0
 8006cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cf0:	2312      	movs	r3, #18
 8006cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d00:	f107 0314 	add.w	r3, r7, #20
 8006d04:	4619      	mov	r1, r3
 8006d06:	4842      	ldr	r0, [pc, #264]	; (8006e10 <HAL_I2C_MspInit+0x164>)
 8006d08:	f002 fc28 	bl	800955c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	4b3e      	ldr	r3, [pc, #248]	; (8006e0c <HAL_I2C_MspInit+0x160>)
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	4a3d      	ldr	r2, [pc, #244]	; (8006e0c <HAL_I2C_MspInit+0x160>)
 8006d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006d1c:	4b3b      	ldr	r3, [pc, #236]	; (8006e0c <HAL_I2C_MspInit+0x160>)
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8006d28:	4b3a      	ldr	r3, [pc, #232]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d2a:	4a3b      	ldr	r2, [pc, #236]	; (8006e18 <HAL_I2C_MspInit+0x16c>)
 8006d2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8006d2e:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d34:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d36:	4b37      	ldr	r3, [pc, #220]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d3c:	4b35      	ldr	r3, [pc, #212]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d42:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d48:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d4a:	4b32      	ldr	r3, [pc, #200]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d50:	4b30      	ldr	r3, [pc, #192]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006d56:	4b2f      	ldr	r3, [pc, #188]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d5c:	4b2d      	ldr	r3, [pc, #180]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d62:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006d68:	482a      	ldr	r0, [pc, #168]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d6a:	f002 f84d 	bl	8008e08 <HAL_DMA_Init>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d001      	beq.n	8006d78 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8006d74:	f000 f98a 	bl	800708c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a26      	ldr	r2, [pc, #152]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d7e:	4a25      	ldr	r2, [pc, #148]	; (8006e14 <HAL_I2C_MspInit+0x168>)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8006d84:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006d86:	4a26      	ldr	r2, [pc, #152]	; (8006e20 <HAL_I2C_MspInit+0x174>)
 8006d88:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8006d8a:	4b24      	ldr	r3, [pc, #144]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006d8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d90:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d92:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006d94:	2240      	movs	r2, #64	; 0x40
 8006d96:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d98:	4b20      	ldr	r3, [pc, #128]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d9e:	4b1f      	ldr	r3, [pc, #124]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006da4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006da6:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dac:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006db2:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006db8:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dbe:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006dc4:	4815      	ldr	r0, [pc, #84]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006dc6:	f002 f81f 	bl	8008e08 <HAL_DMA_Init>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8006dd0:	f000 f95c 	bl	800708c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006dd8:	635a      	str	r2, [r3, #52]	; 0x34
 8006dda:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <HAL_I2C_MspInit+0x170>)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8006de0:	2200      	movs	r2, #0
 8006de2:	2100      	movs	r1, #0
 8006de4:	201f      	movs	r0, #31
 8006de6:	f001 ffd8 	bl	8008d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006dea:	201f      	movs	r0, #31
 8006dec:	f001 fff1 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8006df0:	2200      	movs	r2, #0
 8006df2:	2100      	movs	r1, #0
 8006df4:	2020      	movs	r0, #32
 8006df6:	f001 ffd0 	bl	8008d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006dfa:	2020      	movs	r0, #32
 8006dfc:	f001 ffe9 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006e00:	bf00      	nop
 8006e02:	3728      	adds	r7, #40	; 0x28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40005400 	.word	0x40005400
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	40020400 	.word	0x40020400
 8006e14:	2000261c 	.word	0x2000261c
 8006e18:	40026010 	.word	0x40026010
 8006e1c:	20002568 	.word	0x20002568
 8006e20:	400260b8 	.word	0x400260b8

08006e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006e2a:	f001 fa53 	bl	80082d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006e2e:	f000 f8c3 	bl	8006fb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);	//Let the time to the components to start
 8006e32:	20c8      	movs	r0, #200	; 0xc8
 8006e34:	f001 fac0 	bl	80083b8 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006e38:	f7ff fe6c 	bl	8006b14 <MX_GPIO_Init>
  MX_DMA_Init();
 8006e3c:	f7ff fde4 	bl	8006a08 <MX_DMA_Init>
  MX_I2C1_Init();
 8006e40:	f7ff ff06 	bl	8006c50 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006e44:	f000 f92a 	bl	800709c <MX_SPI1_Init>
  MX_SPI2_Init();
 8006e48:	f000 f95e 	bl	8007108 <MX_SPI2_Init>
  MX_TIM1_Init();
 8006e4c:	f000 fc62 	bl	8007714 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8006e50:	f000 fde8 	bl	8007a24 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8006e54:	f000 fe10 	bl	8007a78 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8006e58:	f000 fe38 	bl	8007acc <MX_USART6_UART_Init>
  MX_ADC2_Init();
 8006e5c:	f7ff fcee 	bl	800683c <MX_ADC2_Init>
  MX_TIM2_Init();
 8006e60:	f000 fd1e 	bl	80078a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);	//Let the time for the components to start
 8006e64:	20c8      	movs	r0, #200	; 0xc8
 8006e66:	f001 faa7 	bl	80083b8 <HAL_Delay>



  //Init du GYRO et de l ACC en utilisant un MPU6000
  MPU_init(&sys.sensors.mpu, &hspi2, PIN_CS_MPU_GPIO_Port, PIN_CS_MPU_Pin);
 8006e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e6e:	4a3a      	ldr	r2, [pc, #232]	; (8006f58 <main+0x134>)
 8006e70:	493a      	ldr	r1, [pc, #232]	; (8006f5c <main+0x138>)
 8006e72:	483b      	ldr	r0, [pc, #236]	; (8006f60 <main+0x13c>)
 8006e74:	f7fe ff48 	bl	8005d08 <MPU_init>
  HAL_Delay(200);	//Let the time for the components to start
 8006e78:	20c8      	movs	r0, #200	; 0xc8
 8006e7a:	f001 fa9d 	bl	80083b8 <HAL_Delay>
  GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 8006e7e:	4938      	ldr	r1, [pc, #224]	; (8006f60 <main+0x13c>)
 8006e80:	4838      	ldr	r0, [pc, #224]	; (8006f64 <main+0x140>)
 8006e82:	f7fe fd39 	bl	80058f8 <GYRO_init>
  HAL_Delay(200);	//Let the time for the components to start
 8006e86:	20c8      	movs	r0, #200	; 0xc8
 8006e88:	f001 fa96 	bl	80083b8 <HAL_Delay>
  ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 8006e8c:	4934      	ldr	r1, [pc, #208]	; (8006f60 <main+0x13c>)
 8006e8e:	4836      	ldr	r0, [pc, #216]	; (8006f68 <main+0x144>)
 8006e90:	f7fe fae4 	bl	800545c <ACC_init>

  //Init du baromètre
  BARO_init(&sys.sensors.baro, &sys.sensors.ms5611, &hi2c1);
 8006e94:	4a35      	ldr	r2, [pc, #212]	; (8006f6c <main+0x148>)
 8006e96:	4936      	ldr	r1, [pc, #216]	; (8006f70 <main+0x14c>)
 8006e98:	4836      	ldr	r0, [pc, #216]	; (8006f74 <main+0x150>)
 8006e9a:	f7fe fc5f 	bl	800575c <BARO_init>

  IHM_Init(&sys.ihm);
 8006e9e:	4836      	ldr	r0, [pc, #216]	; (8006f78 <main+0x154>)
 8006ea0:	f7fc f83e 	bl	8002f20 <IHM_Init>
  IHM_Led_Init(LED_HIGH_LVL, 30, PIN_LED_RGB_1_Pin, LED_OUTPUT_NEGATIVE);
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	211e      	movs	r1, #30
 8006eaa:	2000      	movs	r0, #0
 8006eac:	f7fc f848 	bl	8002f40 <IHM_Led_Init>
  IHM_Led_Init(LED_SENSORS, 30, PIN_LED_RGB_2_Pin, LED_OUTPUT_NEGATIVE);
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eb6:	211e      	movs	r1, #30
 8006eb8:	2001      	movs	r0, #1
 8006eba:	f7fc f841 	bl	8002f40 <IHM_Led_Init>

  IHM_Set_Sequences(LED_HIGH_LVL, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7fc f8a8 	bl	800301c <IHM_Set_Sequences>
  IHM_Set_Sequences(LED_SENSORS, SEQUENCE_LED_OFF, SEQUENCE_LED_1, SEQUENCE_LED_OFF);
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	f7fc f8a1 	bl	800301c <IHM_Set_Sequences>

  BATTERIE_Init(&sys.sensors.batterie, &hadc2);
 8006eda:	4928      	ldr	r1, [pc, #160]	; (8006f7c <main+0x158>)
 8006edc:	4828      	ldr	r0, [pc, #160]	; (8006f80 <main+0x15c>)
 8006ede:	f7fe fcf8 	bl	80058d2 <BATTERIE_Init>

  CONTROLLER_Init(&sys.radio.controller, &sys.radio.ibus);
 8006ee2:	4928      	ldr	r1, [pc, #160]	; (8006f84 <main+0x160>)
 8006ee4:	4828      	ldr	r0, [pc, #160]	; (8006f88 <main+0x164>)
 8006ee6:	f7fd fdb7 	bl	8004a58 <CONTROLLER_Init>
  IBUS_init(&sys.radio.ibus, &huart3, CONTROLLER_Rx_Data_Rdy);
 8006eea:	4a28      	ldr	r2, [pc, #160]	; (8006f8c <main+0x168>)
 8006eec:	4928      	ldr	r1, [pc, #160]	; (8006f90 <main+0x16c>)
 8006eee:	4825      	ldr	r0, [pc, #148]	; (8006f84 <main+0x160>)
 8006ef0:	f009 f804 	bl	800fefc <IBUS_init>

  ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 8006ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ef8:	4a1b      	ldr	r2, [pc, #108]	; (8006f68 <main+0x144>)
 8006efa:	491a      	ldr	r1, [pc, #104]	; (8006f64 <main+0x140>)
 8006efc:	4825      	ldr	r0, [pc, #148]	; (8006f94 <main+0x170>)
 8006efe:	f7fb f92d 	bl	800215c <ORIENTATION_Init>
  POSITION_Init(&sys.position, &sys.orientation, &sys.sensors.acc, &sys.sensors.baro, GYRO_FREQUENCY);
 8006f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <main+0x150>)
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <main+0x144>)
 8006f0c:	4921      	ldr	r1, [pc, #132]	; (8006f94 <main+0x170>)
 8006f0e:	4822      	ldr	r0, [pc, #136]	; (8006f98 <main+0x174>)
 8006f10:	f7fb fabe 	bl	8002490 <POSITION_Init>
  REGULATION_ORIENTATION_Init(&sys.regulation.orientation, &sys.orientation, sys.propulsion.consigne);
 8006f14:	4a21      	ldr	r2, [pc, #132]	; (8006f9c <main+0x178>)
 8006f16:	491f      	ldr	r1, [pc, #124]	; (8006f94 <main+0x170>)
 8006f18:	4821      	ldr	r0, [pc, #132]	; (8006fa0 <main+0x17c>)
 8006f1a:	f7fe f867 	bl	8004fec <REGULATION_ORIENTATION_Init>
  REGULATION_POSITION_Init(&sys.regulation.position, &sys.position, sys.propulsion.consigne);
 8006f1e:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <main+0x178>)
 8006f20:	491d      	ldr	r1, [pc, #116]	; (8006f98 <main+0x174>)
 8006f22:	4820      	ldr	r0, [pc, #128]	; (8006fa4 <main+0x180>)
 8006f24:	f7fe f9f6 	bl	8005314 <REGULATION_POSITION_Init>
  PROPULSION_Init(&sys.propulsion, &htim1);
 8006f28:	491f      	ldr	r1, [pc, #124]	; (8006fa8 <main+0x184>)
 8006f2a:	4820      	ldr	r0, [pc, #128]	; (8006fac <main+0x188>)
 8006f2c:	f7fd fcdc 	bl	80048e8 <PROPULSION_Init>

  TELEMETRY_Init(&sys.radio.telemetry, &huart2);
 8006f30:	491f      	ldr	r1, [pc, #124]	; (8006fb0 <main+0x18c>)
 8006f32:	4820      	ldr	r0, [pc, #128]	; (8006fb4 <main+0x190>)
 8006f34:	f000 fffe 	bl	8007f34 <TELEMETRY_Init>

  FLIGHT_MODE_Init(&sys);
 8006f38:	480f      	ldr	r0, [pc, #60]	; (8006f78 <main+0x154>)
 8006f3a:	f7fb fdad 	bl	8002a98 <FLIGHT_MODE_Init>

  SCHEDULER_init(&sys);
 8006f3e:	480e      	ldr	r0, [pc, #56]	; (8006f78 <main+0x154>)
 8006f40:	f7fc ff98 	bl	8003e74 <SCHEDULER_init>
  EVENT_init(&sys);
 8006f44:	480c      	ldr	r0, [pc, #48]	; (8006f78 <main+0x154>)
 8006f46:	f7fc fbff 	bl	8003748 <EVENT_init>

  DATA_LOGGER_Init(&sys);
 8006f4a:	480b      	ldr	r0, [pc, #44]	; (8006f78 <main+0x154>)
 8006f4c:	f7f9 fffc 	bl	8000f48 <DATA_LOGGER_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	SCHEDULER_run();
 8006f50:	f7fc ffa2 	bl	8003e98 <SCHEDULER_run>
 8006f54:	e7fc      	b.n	8006f50 <main+0x12c>
 8006f56:	bf00      	nop
 8006f58:	40020400 	.word	0x40020400
 8006f5c:	20003424 	.word	0x20003424
 8006f60:	200027e4 	.word	0x200027e4
 8006f64:	200026ac 	.word	0x200026ac
 8006f68:	20002720 	.word	0x20002720
 8006f6c:	200025c8 	.word	0x200025c8
 8006f70:	20002864 	.word	0x20002864
 8006f74:	200027d8 	.word	0x200027d8
 8006f78:	2000267c 	.word	0x2000267c
 8006f7c:	200024c0 	.word	0x200024c0
 8006f80:	20002794 	.word	0x20002794
 8006f84:	2000293c 	.word	0x2000293c
 8006f88:	2000299c 	.word	0x2000299c
 8006f8c:	08004fdf 	.word	0x08004fdf
 8006f90:	200037f4 	.word	0x200037f4
 8006f94:	200028a0 	.word	0x200028a0
 8006f98:	200028d4 	.word	0x200028d4
 8006f9c:	20003030 	.word	0x20003030
 8006fa0:	20003040 	.word	0x20003040
 8006fa4:	2000322c 	.word	0x2000322c
 8006fa8:	20003654 	.word	0x20003654
 8006fac:	20003020 	.word	0x20003020
 8006fb0:	20003934 	.word	0x20003934
 8006fb4:	200029f4 	.word	0x200029f4

08006fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b094      	sub	sp, #80	; 0x50
 8006fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006fbe:	f107 0320 	add.w	r3, r7, #32
 8006fc2:	2230      	movs	r2, #48	; 0x30
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f009 fb36 	bl	8010638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fcc:	f107 030c 	add.w	r3, r7, #12
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	609a      	str	r2, [r3, #8]
 8006fd8:	60da      	str	r2, [r3, #12]
 8006fda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	4b28      	ldr	r3, [pc, #160]	; (8007084 <SystemClock_Config+0xcc>)
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	4a27      	ldr	r2, [pc, #156]	; (8007084 <SystemClock_Config+0xcc>)
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fea:	6413      	str	r3, [r2, #64]	; 0x40
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <SystemClock_Config+0xcc>)
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff4:	60bb      	str	r3, [r7, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	4b22      	ldr	r3, [pc, #136]	; (8007088 <SystemClock_Config+0xd0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a21      	ldr	r2, [pc, #132]	; (8007088 <SystemClock_Config+0xd0>)
 8007002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	4b1f      	ldr	r3, [pc, #124]	; (8007088 <SystemClock_Config+0xd0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007010:	607b      	str	r3, [r7, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007014:	2302      	movs	r3, #2
 8007016:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007018:	2301      	movs	r3, #1
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800701c:	2310      	movs	r3, #16
 800701e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007020:	2302      	movs	r3, #2
 8007022:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007024:	2300      	movs	r3, #0
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007028:	2308      	movs	r3, #8
 800702a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800702c:	23a8      	movs	r3, #168	; 0xa8
 800702e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007030:	2302      	movs	r3, #2
 8007032:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007034:	2304      	movs	r3, #4
 8007036:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007038:	f107 0320 	add.w	r3, r7, #32
 800703c:	4618      	mov	r0, r3
 800703e:	f005 fb97 	bl	800c770 <HAL_RCC_OscConfig>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007048:	f000 f820 	bl	800708c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800704c:	230f      	movs	r3, #15
 800704e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007050:	2302      	movs	r3, #2
 8007052:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007058:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800705c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800705e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007062:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007064:	f107 030c 	add.w	r3, r7, #12
 8007068:	2105      	movs	r1, #5
 800706a:	4618      	mov	r0, r3
 800706c:	f005 fdf0 	bl	800cc50 <HAL_RCC_ClockConfig>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007076:	f000 f809 	bl	800708c <Error_Handler>
  }
}
 800707a:	bf00      	nop
 800707c:	3750      	adds	r7, #80	; 0x50
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	40023800 	.word	0x40023800
 8007088:	40007000 	.word	0x40007000

0800708c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007090:	bf00      	nop
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <MX_SPI1_Init+0x64>)
 80070a2:	4a18      	ldr	r2, [pc, #96]	; (8007104 <MX_SPI1_Init+0x68>)
 80070a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80070a6:	4b16      	ldr	r3, [pc, #88]	; (8007100 <MX_SPI1_Init+0x64>)
 80070a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80070ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80070ae:	4b14      	ldr	r3, [pc, #80]	; (8007100 <MX_SPI1_Init+0x64>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80070b4:	4b12      	ldr	r3, [pc, #72]	; (8007100 <MX_SPI1_Init+0x64>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <MX_SPI1_Init+0x64>)
 80070bc:	2200      	movs	r2, #0
 80070be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80070c0:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <MX_SPI1_Init+0x64>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80070c6:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <MX_SPI1_Init+0x64>)
 80070c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <MX_SPI1_Init+0x64>)
 80070d0:	2238      	movs	r2, #56	; 0x38
 80070d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <MX_SPI1_Init+0x64>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <MX_SPI1_Init+0x64>)
 80070dc:	2200      	movs	r2, #0
 80070de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <MX_SPI1_Init+0x64>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80070e6:	4b06      	ldr	r3, [pc, #24]	; (8007100 <MX_SPI1_Init+0x64>)
 80070e8:	220a      	movs	r2, #10
 80070ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80070ec:	4804      	ldr	r0, [pc, #16]	; (8007100 <MX_SPI1_Init+0x64>)
 80070ee:	f005 ff7b 	bl	800cfe8 <HAL_SPI_Init>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80070f8:	f7ff ffc8 	bl	800708c <Error_Handler>
  }

}
 80070fc:	bf00      	nop
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200034dc 	.word	0x200034dc
 8007104:	40013000 	.word	0x40013000

08007108 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800710c:	4b17      	ldr	r3, [pc, #92]	; (800716c <MX_SPI2_Init+0x64>)
 800710e:	4a18      	ldr	r2, [pc, #96]	; (8007170 <MX_SPI2_Init+0x68>)
 8007110:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007112:	4b16      	ldr	r3, [pc, #88]	; (800716c <MX_SPI2_Init+0x64>)
 8007114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007118:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800711a:	4b14      	ldr	r3, [pc, #80]	; (800716c <MX_SPI2_Init+0x64>)
 800711c:	2200      	movs	r2, #0
 800711e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007120:	4b12      	ldr	r3, [pc, #72]	; (800716c <MX_SPI2_Init+0x64>)
 8007122:	2200      	movs	r2, #0
 8007124:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007126:	4b11      	ldr	r3, [pc, #68]	; (800716c <MX_SPI2_Init+0x64>)
 8007128:	2200      	movs	r2, #0
 800712a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800712c:	4b0f      	ldr	r3, [pc, #60]	; (800716c <MX_SPI2_Init+0x64>)
 800712e:	2200      	movs	r2, #0
 8007130:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007132:	4b0e      	ldr	r3, [pc, #56]	; (800716c <MX_SPI2_Init+0x64>)
 8007134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007138:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800713a:	4b0c      	ldr	r3, [pc, #48]	; (800716c <MX_SPI2_Init+0x64>)
 800713c:	2228      	movs	r2, #40	; 0x28
 800713e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007140:	4b0a      	ldr	r3, [pc, #40]	; (800716c <MX_SPI2_Init+0x64>)
 8007142:	2200      	movs	r2, #0
 8007144:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007146:	4b09      	ldr	r3, [pc, #36]	; (800716c <MX_SPI2_Init+0x64>)
 8007148:	2200      	movs	r2, #0
 800714a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <MX_SPI2_Init+0x64>)
 800714e:	2200      	movs	r2, #0
 8007150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007152:	4b06      	ldr	r3, [pc, #24]	; (800716c <MX_SPI2_Init+0x64>)
 8007154:	220a      	movs	r2, #10
 8007156:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007158:	4804      	ldr	r0, [pc, #16]	; (800716c <MX_SPI2_Init+0x64>)
 800715a:	f005 ff45 	bl	800cfe8 <HAL_SPI_Init>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007164:	f7ff ff92 	bl	800708c <Error_Handler>
  }

}
 8007168:	bf00      	nop
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20003424 	.word	0x20003424
 8007170:	40003800 	.word	0x40003800

08007174 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08c      	sub	sp, #48	; 0x30
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800717c:	f107 031c 	add.w	r3, r7, #28
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	609a      	str	r2, [r3, #8]
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a8e      	ldr	r2, [pc, #568]	; (80073cc <HAL_SPI_MspInit+0x258>)
 8007192:	4293      	cmp	r3, r2
 8007194:	f040 8089 	bne.w	80072aa <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007198:	2300      	movs	r3, #0
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	4b8c      	ldr	r3, [pc, #560]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 800719e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a0:	4a8b      	ldr	r2, [pc, #556]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80071a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071a6:	6453      	str	r3, [r2, #68]	; 0x44
 80071a8:	4b89      	ldr	r3, [pc, #548]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80071aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	4b85      	ldr	r3, [pc, #532]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	4a84      	ldr	r2, [pc, #528]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80071be:	f043 0301 	orr.w	r3, r3, #1
 80071c2:	6313      	str	r3, [r2, #48]	; 0x30
 80071c4:	4b82      	ldr	r3, [pc, #520]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80071d0:	23e0      	movs	r3, #224	; 0xe0
 80071d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d4:	2302      	movs	r3, #2
 80071d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071dc:	2303      	movs	r3, #3
 80071de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80071e0:	2305      	movs	r3, #5
 80071e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071e4:	f107 031c 	add.w	r3, r7, #28
 80071e8:	4619      	mov	r1, r3
 80071ea:	487a      	ldr	r0, [pc, #488]	; (80073d4 <HAL_SPI_MspInit+0x260>)
 80071ec:	f002 f9b6 	bl	800955c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80071f0:	4b79      	ldr	r3, [pc, #484]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 80071f2:	4a7a      	ldr	r2, [pc, #488]	; (80073dc <HAL_SPI_MspInit+0x268>)
 80071f4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80071f6:	4b78      	ldr	r3, [pc, #480]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 80071f8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80071fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071fe:	4b76      	ldr	r3, [pc, #472]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007200:	2200      	movs	r2, #0
 8007202:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007204:	4b74      	ldr	r3, [pc, #464]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007206:	2200      	movs	r2, #0
 8007208:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800720a:	4b73      	ldr	r3, [pc, #460]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 800720c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007210:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007212:	4b71      	ldr	r3, [pc, #452]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007214:	2200      	movs	r2, #0
 8007216:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007218:	4b6f      	ldr	r3, [pc, #444]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 800721a:	2200      	movs	r2, #0
 800721c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800721e:	4b6e      	ldr	r3, [pc, #440]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007220:	2200      	movs	r2, #0
 8007222:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007224:	4b6c      	ldr	r3, [pc, #432]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007226:	2200      	movs	r2, #0
 8007228:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800722a:	4b6b      	ldr	r3, [pc, #428]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 800722c:	2200      	movs	r2, #0
 800722e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007230:	4869      	ldr	r0, [pc, #420]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007232:	f001 fde9 	bl	8008e08 <HAL_DMA_Init>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800723c:	f7ff ff26 	bl	800708c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a65      	ldr	r2, [pc, #404]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007244:	64da      	str	r2, [r3, #76]	; 0x4c
 8007246:	4a64      	ldr	r2, [pc, #400]	; (80073d8 <HAL_SPI_MspInit+0x264>)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800724c:	4b64      	ldr	r3, [pc, #400]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 800724e:	4a65      	ldr	r2, [pc, #404]	; (80073e4 <HAL_SPI_MspInit+0x270>)
 8007250:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8007252:	4b63      	ldr	r3, [pc, #396]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 8007254:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007258:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800725a:	4b61      	ldr	r3, [pc, #388]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 800725c:	2240      	movs	r2, #64	; 0x40
 800725e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007260:	4b5f      	ldr	r3, [pc, #380]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 8007262:	2200      	movs	r2, #0
 8007264:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007266:	4b5e      	ldr	r3, [pc, #376]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 8007268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800726c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800726e:	4b5c      	ldr	r3, [pc, #368]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 8007270:	2200      	movs	r2, #0
 8007272:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007274:	4b5a      	ldr	r3, [pc, #360]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 8007276:	2200      	movs	r2, #0
 8007278:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800727a:	4b59      	ldr	r3, [pc, #356]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 800727c:	2200      	movs	r2, #0
 800727e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007280:	4b57      	ldr	r3, [pc, #348]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 8007282:	2200      	movs	r2, #0
 8007284:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007286:	4b56      	ldr	r3, [pc, #344]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 8007288:	2200      	movs	r2, #0
 800728a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800728c:	4854      	ldr	r0, [pc, #336]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 800728e:	f001 fdbb 	bl	8008e08 <HAL_DMA_Init>
 8007292:	4603      	mov	r3, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8007298:	f7ff fef8 	bl	800708c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a50      	ldr	r2, [pc, #320]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 80072a0:	649a      	str	r2, [r3, #72]	; 0x48
 80072a2:	4a4f      	ldr	r2, [pc, #316]	; (80073e0 <HAL_SPI_MspInit+0x26c>)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80072a8:	e08c      	b.n	80073c4 <HAL_SPI_MspInit+0x250>
  else if(spiHandle->Instance==SPI2)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4e      	ldr	r2, [pc, #312]	; (80073e8 <HAL_SPI_MspInit+0x274>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	f040 8087 	bne.w	80073c4 <HAL_SPI_MspInit+0x250>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80072b6:	2300      	movs	r3, #0
 80072b8:	613b      	str	r3, [r7, #16]
 80072ba:	4b45      	ldr	r3, [pc, #276]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	4a44      	ldr	r2, [pc, #272]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80072c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072c4:	6413      	str	r3, [r2, #64]	; 0x40
 80072c6:	4b42      	ldr	r3, [pc, #264]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	4b3e      	ldr	r3, [pc, #248]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	4a3d      	ldr	r2, [pc, #244]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80072dc:	f043 0302 	orr.w	r3, r3, #2
 80072e0:	6313      	str	r3, [r2, #48]	; 0x30
 80072e2:	4b3b      	ldr	r3, [pc, #236]	; (80073d0 <HAL_SPI_MspInit+0x25c>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80072ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80072f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072f4:	2302      	movs	r3, #2
 80072f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072f8:	2300      	movs	r3, #0
 80072fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072fc:	2303      	movs	r3, #3
 80072fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007300:	2305      	movs	r3, #5
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007304:	f107 031c 	add.w	r3, r7, #28
 8007308:	4619      	mov	r1, r3
 800730a:	4838      	ldr	r0, [pc, #224]	; (80073ec <HAL_SPI_MspInit+0x278>)
 800730c:	f002 f926 	bl	800955c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8007310:	4b37      	ldr	r3, [pc, #220]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007312:	4a38      	ldr	r2, [pc, #224]	; (80073f4 <HAL_SPI_MspInit+0x280>)
 8007314:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8007316:	4b36      	ldr	r3, [pc, #216]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007318:	2200      	movs	r2, #0
 800731a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800731c:	4b34      	ldr	r3, [pc, #208]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 800731e:	2200      	movs	r2, #0
 8007320:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007322:	4b33      	ldr	r3, [pc, #204]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007324:	2200      	movs	r2, #0
 8007326:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007328:	4b31      	ldr	r3, [pc, #196]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 800732a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800732e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007330:	4b2f      	ldr	r3, [pc, #188]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007332:	2200      	movs	r2, #0
 8007334:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007336:	4b2e      	ldr	r3, [pc, #184]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007338:	2200      	movs	r2, #0
 800733a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800733c:	4b2c      	ldr	r3, [pc, #176]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 800733e:	2200      	movs	r2, #0
 8007340:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007342:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007344:	2200      	movs	r2, #0
 8007346:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007348:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 800734a:	2200      	movs	r2, #0
 800734c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800734e:	4828      	ldr	r0, [pc, #160]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007350:	f001 fd5a 	bl	8008e08 <HAL_DMA_Init>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <HAL_SPI_MspInit+0x1ea>
      Error_Handler();
 800735a:	f7ff fe97 	bl	800708c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007362:	64da      	str	r2, [r3, #76]	; 0x4c
 8007364:	4a22      	ldr	r2, [pc, #136]	; (80073f0 <HAL_SPI_MspInit+0x27c>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800736a:	4b23      	ldr	r3, [pc, #140]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 800736c:	4a23      	ldr	r2, [pc, #140]	; (80073fc <HAL_SPI_MspInit+0x288>)
 800736e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8007370:	4b21      	ldr	r3, [pc, #132]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 8007372:	2200      	movs	r2, #0
 8007374:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007376:	4b20      	ldr	r3, [pc, #128]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 8007378:	2240      	movs	r2, #64	; 0x40
 800737a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800737c:	4b1e      	ldr	r3, [pc, #120]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 800737e:	2200      	movs	r2, #0
 8007380:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007382:	4b1d      	ldr	r3, [pc, #116]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 8007384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007388:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 800738c:	2200      	movs	r2, #0
 800738e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007390:	4b19      	ldr	r3, [pc, #100]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 8007392:	2200      	movs	r2, #0
 8007394:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007396:	4b18      	ldr	r3, [pc, #96]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 8007398:	2200      	movs	r2, #0
 800739a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 800739e:	2200      	movs	r2, #0
 80073a0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073a2:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80073a8:	4813      	ldr	r0, [pc, #76]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 80073aa:	f001 fd2d 	bl	8008e08 <HAL_DMA_Init>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 80073b4:	f7ff fe6a 	bl	800708c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a0f      	ldr	r2, [pc, #60]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 80073bc:	649a      	str	r2, [r3, #72]	; 0x48
 80073be:	4a0e      	ldr	r2, [pc, #56]	; (80073f8 <HAL_SPI_MspInit+0x284>)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80073c4:	bf00      	nop
 80073c6:	3730      	adds	r7, #48	; 0x30
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	40013000 	.word	0x40013000
 80073d0:	40023800 	.word	0x40023800
 80073d4:	40020000 	.word	0x40020000
 80073d8:	20003534 	.word	0x20003534
 80073dc:	40026410 	.word	0x40026410
 80073e0:	200035f4 	.word	0x200035f4
 80073e4:	40026458 	.word	0x40026458
 80073e8:	40003800 	.word	0x40003800
 80073ec:	40020400 	.word	0x40020400
 80073f0:	2000347c 	.word	0x2000347c
 80073f4:	40026058 	.word	0x40026058
 80073f8:	20003594 	.word	0x20003594
 80073fc:	40026070 	.word	0x40026070

08007400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007406:	2300      	movs	r3, #0
 8007408:	607b      	str	r3, [r7, #4]
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <HAL_MspInit+0x4c>)
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	4a0f      	ldr	r2, [pc, #60]	; (800744c <HAL_MspInit+0x4c>)
 8007410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007414:	6453      	str	r3, [r2, #68]	; 0x44
 8007416:	4b0d      	ldr	r3, [pc, #52]	; (800744c <HAL_MspInit+0x4c>)
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <HAL_MspInit+0x4c>)
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	4a08      	ldr	r2, [pc, #32]	; (800744c <HAL_MspInit+0x4c>)
 800742c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007430:	6413      	str	r3, [r2, #64]	; 0x40
 8007432:	4b06      	ldr	r3, [pc, #24]	; (800744c <HAL_MspInit+0x4c>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40023800 	.word	0x40023800

08007450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007454:	bf00      	nop
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007462:	e7fe      	b.n	8007462 <HardFault_Handler+0x4>

08007464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007468:	e7fe      	b.n	8007468 <MemManage_Handler+0x4>

0800746a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800746a:	b480      	push	{r7}
 800746c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800746e:	e7fe      	b.n	800746e <BusFault_Handler+0x4>

08007470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007474:	e7fe      	b.n	8007474 <UsageFault_Handler+0x4>

08007476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007488:	bf00      	nop
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007496:	bf00      	nop
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074a4:	f000 ff68 	bl	8008378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074a8:	bf00      	nop
 80074aa:	bd80      	pop	{r7, pc}

080074ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80074b0:	4802      	ldr	r0, [pc, #8]	; (80074bc <DMA1_Stream0_IRQHandler+0x10>)
 80074b2:	f001 fdd1 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2000261c 	.word	0x2000261c

080074c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80074c4:	4802      	ldr	r0, [pc, #8]	; (80074d0 <DMA1_Stream1_IRQHandler+0x10>)
 80074c6:	f001 fdc7 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20003794 	.word	0x20003794

080074d4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <DMA1_Stream3_IRQHandler+0x10>)
 80074da:	f001 fdbd 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	2000347c 	.word	0x2000347c

080074e8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80074ec:	4802      	ldr	r0, [pc, #8]	; (80074f8 <DMA1_Stream4_IRQHandler+0x10>)
 80074ee:	f001 fdb3 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20003594 	.word	0x20003594

080074fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007500:	4802      	ldr	r0, [pc, #8]	; (800750c <DMA1_Stream5_IRQHandler+0x10>)
 8007502:	f001 fda9 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	200036d4 	.word	0x200036d4

08007510 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007514:	4802      	ldr	r0, [pc, #8]	; (8007520 <DMA1_Stream6_IRQHandler+0x10>)
 8007516:	f001 fd9f 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800751a:	bf00      	nop
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20003894 	.word	0x20003894

08007524 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007528:	4802      	ldr	r0, [pc, #8]	; (8007534 <TIM2_IRQHandler+0x10>)
 800752a:	f006 fc3f 	bl	800ddac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800752e:	bf00      	nop
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20003694 	.word	0x20003694

08007538 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800753c:	4802      	ldr	r0, [pc, #8]	; (8007548 <I2C1_EV_IRQHandler+0x10>)
 800753e:	f003 f8d5 	bl	800a6ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007542:	bf00      	nop
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	200025c8 	.word	0x200025c8

0800754c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007550:	4802      	ldr	r0, [pc, #8]	; (800755c <I2C1_ER_IRQHandler+0x10>)
 8007552:	f003 fa38 	bl	800a9c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */


  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007556:	bf00      	nop
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200025c8 	.word	0x200025c8

08007560 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007566:	480d      	ldr	r0, [pc, #52]	; (800759c <USART2_IRQHandler+0x3c>)
 8007568:	f007 fd42 	bl	800eff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE)){
 800756c:	4b0b      	ldr	r3, [pc, #44]	; (800759c <USART2_IRQHandler+0x3c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b10      	cmp	r3, #16
 8007578:	d10c      	bne.n	8007594 <USART2_IRQHandler+0x34>
	  TELEMETRY_Idle_Line_Detection();
 800757a:	f000 fe93 	bl	80082a4 <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	4b06      	ldr	r3, [pc, #24]	; (800759c <USART2_IRQHandler+0x3c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	4b04      	ldr	r3, [pc, #16]	; (800759c <USART2_IRQHandler+0x3c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	607b      	str	r3, [r7, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
	}
  /* USER CODE END USART2_IRQn 1 */
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	20003934 	.word	0x20003934

080075a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80075a4:	4802      	ldr	r0, [pc, #8]	; (80075b0 <USART3_IRQHandler+0x10>)
 80075a6:	f007 fd23 	bl	800eff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80075aa:	bf00      	nop
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200037f4 	.word	0x200037f4

080075b4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80075b8:	4802      	ldr	r0, [pc, #8]	; (80075c4 <DMA1_Stream7_IRQHandler+0x10>)
 80075ba:	f001 fd4d 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80075be:	bf00      	nop
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20002568 	.word	0x20002568

080075c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80075cc:	4802      	ldr	r0, [pc, #8]	; (80075d8 <DMA2_Stream0_IRQHandler+0x10>)
 80075ce:	f001 fd43 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80075d2:	bf00      	nop
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20003534 	.word	0x20003534

080075dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80075e0:	4802      	ldr	r0, [pc, #8]	; (80075ec <DMA2_Stream1_IRQHandler+0x10>)
 80075e2:	f001 fd39 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20003734 	.word	0x20003734

080075f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80075f4:	4802      	ldr	r0, [pc, #8]	; (8007600 <DMA2_Stream2_IRQHandler+0x10>)
 80075f6:	f001 fd2f 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20002508 	.word	0x20002508

08007604 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8007608:	4802      	ldr	r0, [pc, #8]	; (8007614 <DMA2_Stream3_IRQHandler+0x10>)
 800760a:	f001 fd25 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800760e:	bf00      	nop
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200035f4 	.word	0x200035f4

08007618 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800761c:	4802      	ldr	r0, [pc, #8]	; (8007628 <DMA2_Stream6_IRQHandler+0x10>)
 800761e:	f001 fd1b 	bl	8009058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007622:	bf00      	nop
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20003834 	.word	0x20003834

0800762c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	IBUS_RxCplt(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f008 fc87 	bl	800ff48 <IBUS_RxCplt>
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
	IBUS_RxHalfCplt(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f008 fc96 	bl	800ff7c <IBUS_RxHalfCplt>
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  if(hi2c == &hi2c1){
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a05      	ldr	r2, [pc, #20]	; (8007678 <HAL_I2C_MemRxCpltCallback+0x20>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d102      	bne.n	800766e <HAL_I2C_MemRxCpltCallback+0x16>
	  MS5611_i2c_rx_callabck(hi2c);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff f8a3 	bl	80067b4 <MS5611_i2c_rx_callabck>
  }
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	200025c8 	.word	0x200025c8

0800767c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007684:	4a14      	ldr	r2, [pc, #80]	; (80076d8 <_sbrk+0x5c>)
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <_sbrk+0x60>)
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007690:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <_sbrk+0x64>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007698:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <_sbrk+0x64>)
 800769a:	4a12      	ldr	r2, [pc, #72]	; (80076e4 <_sbrk+0x68>)
 800769c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <_sbrk+0x64>)
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4413      	add	r3, r2
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d207      	bcs.n	80076bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076ac:	f008 ff76 	bl	801059c <__errno>
 80076b0:	4602      	mov	r2, r0
 80076b2:	230c      	movs	r3, #12
 80076b4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ba:	e009      	b.n	80076d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076bc:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <_sbrk+0x64>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076c2:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <_sbrk+0x64>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	4a05      	ldr	r2, [pc, #20]	; (80076e0 <_sbrk+0x64>)
 80076cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80076ce:	68fb      	ldr	r3, [r7, #12]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20020000 	.word	0x20020000
 80076dc:	00000400 	.word	0x00000400
 80076e0:	200024a0 	.word	0x200024a0
 80076e4:	20003980 	.word	0x20003980

080076e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80076ec:	4b08      	ldr	r3, [pc, #32]	; (8007710 <SystemInit+0x28>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	4a07      	ldr	r2, [pc, #28]	; (8007710 <SystemInit+0x28>)
 80076f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80076fc:	4b04      	ldr	r3, [pc, #16]	; (8007710 <SystemInit+0x28>)
 80076fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007702:	609a      	str	r2, [r3, #8]
#endif
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	e000ed00 	.word	0xe000ed00

08007714 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b096      	sub	sp, #88	; 0x58
 8007718:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800771a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	605a      	str	r2, [r3, #4]
 8007724:	609a      	str	r2, [r3, #8]
 8007726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007728:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800772c:	2200      	movs	r2, #0
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	605a      	str	r2, [r3, #4]
 800773c:	609a      	str	r2, [r3, #8]
 800773e:	60da      	str	r2, [r3, #12]
 8007740:	611a      	str	r2, [r3, #16]
 8007742:	615a      	str	r2, [r3, #20]
 8007744:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	2220      	movs	r2, #32
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f008 ff73 	bl	8010638 <memset>

  htim1.Instance = TIM1;
 8007752:	4b51      	ldr	r3, [pc, #324]	; (8007898 <MX_TIM1_Init+0x184>)
 8007754:	4a51      	ldr	r2, [pc, #324]	; (800789c <MX_TIM1_Init+0x188>)
 8007756:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8007758:	4b4f      	ldr	r3, [pc, #316]	; (8007898 <MX_TIM1_Init+0x184>)
 800775a:	2214      	movs	r2, #20
 800775c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800775e:	4b4e      	ldr	r3, [pc, #312]	; (8007898 <MX_TIM1_Init+0x184>)
 8007760:	2200      	movs	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8007764:	4b4c      	ldr	r3, [pc, #304]	; (8007898 <MX_TIM1_Init+0x184>)
 8007766:	f640 729f 	movw	r2, #3999	; 0xf9f
 800776a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800776c:	4b4a      	ldr	r3, [pc, #296]	; (8007898 <MX_TIM1_Init+0x184>)
 800776e:	2200      	movs	r2, #0
 8007770:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007772:	4b49      	ldr	r3, [pc, #292]	; (8007898 <MX_TIM1_Init+0x184>)
 8007774:	2200      	movs	r2, #0
 8007776:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007778:	4b47      	ldr	r3, [pc, #284]	; (8007898 <MX_TIM1_Init+0x184>)
 800777a:	2280      	movs	r2, #128	; 0x80
 800777c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800777e:	4846      	ldr	r0, [pc, #280]	; (8007898 <MX_TIM1_Init+0x184>)
 8007780:	f006 fa76 	bl	800dc70 <HAL_TIM_Base_Init>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800778a:	f7ff fc7f 	bl	800708c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800778e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007792:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007798:	4619      	mov	r1, r3
 800779a:	483f      	ldr	r0, [pc, #252]	; (8007898 <MX_TIM1_Init+0x184>)
 800779c:	f006 fcd4 	bl	800e148 <HAL_TIM_ConfigClockSource>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80077a6:	f7ff fc71 	bl	800708c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80077aa:	483b      	ldr	r0, [pc, #236]	; (8007898 <MX_TIM1_Init+0x184>)
 80077ac:	f006 fa8b 	bl	800dcc6 <HAL_TIM_PWM_Init>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80077b6:	f7ff fc69 	bl	800708c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077ba:	2300      	movs	r3, #0
 80077bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077be:	2300      	movs	r3, #0
 80077c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80077c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077c6:	4619      	mov	r1, r3
 80077c8:	4833      	ldr	r0, [pc, #204]	; (8007898 <MX_TIM1_Init+0x184>)
 80077ca:	f007 f8b7 	bl	800e93c <HAL_TIMEx_MasterConfigSynchronization>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80077d4:	f7ff fc5a 	bl	800708c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80077d8:	2360      	movs	r3, #96	; 0x60
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 999;
 80077dc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077e2:	2300      	movs	r3, #0
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80077e6:	2300      	movs	r3, #0
 80077e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80077ee:	2300      	movs	r3, #0
 80077f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80077f2:	2300      	movs	r3, #0
 80077f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80077f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077fa:	2200      	movs	r2, #0
 80077fc:	4619      	mov	r1, r3
 80077fe:	4826      	ldr	r0, [pc, #152]	; (8007898 <MX_TIM1_Init+0x184>)
 8007800:	f006 fbdc 	bl	800dfbc <HAL_TIM_PWM_ConfigChannel>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800780a:	f7ff fc3f 	bl	800708c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800780e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007812:	2204      	movs	r2, #4
 8007814:	4619      	mov	r1, r3
 8007816:	4820      	ldr	r0, [pc, #128]	; (8007898 <MX_TIM1_Init+0x184>)
 8007818:	f006 fbd0 	bl	800dfbc <HAL_TIM_PWM_ConfigChannel>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8007822:	f7ff fc33 	bl	800708c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800782a:	2208      	movs	r2, #8
 800782c:	4619      	mov	r1, r3
 800782e:	481a      	ldr	r0, [pc, #104]	; (8007898 <MX_TIM1_Init+0x184>)
 8007830:	f006 fbc4 	bl	800dfbc <HAL_TIM_PWM_ConfigChannel>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800783a:	f7ff fc27 	bl	800708c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800783e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007842:	220c      	movs	r2, #12
 8007844:	4619      	mov	r1, r3
 8007846:	4814      	ldr	r0, [pc, #80]	; (8007898 <MX_TIM1_Init+0x184>)
 8007848:	f006 fbb8 	bl	800dfbc <HAL_TIM_PWM_ConfigChannel>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8007852:	f7ff fc1b 	bl	800708c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007856:	2300      	movs	r3, #0
 8007858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800786a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800786e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007870:	2300      	movs	r3, #0
 8007872:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4807      	ldr	r0, [pc, #28]	; (8007898 <MX_TIM1_Init+0x184>)
 800787a:	f007 f8db 	bl	800ea34 <HAL_TIMEx_ConfigBreakDeadTime>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8007884:	f7ff fc02 	bl	800708c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007888:	4803      	ldr	r0, [pc, #12]	; (8007898 <MX_TIM1_Init+0x184>)
 800788a:	f000 f891 	bl	80079b0 <HAL_TIM_MspPostInit>

}
 800788e:	bf00      	nop
 8007890:	3758      	adds	r7, #88	; 0x58
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20003654 	.word	0x20003654
 800789c:	40010000 	.word	0x40010000

080078a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078a6:	f107 0308 	add.w	r3, r7, #8
 80078aa:	2200      	movs	r2, #0
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	605a      	str	r2, [r3, #4]
 80078b0:	609a      	str	r2, [r3, #8]
 80078b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078b4:	463b      	mov	r3, r7
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80078bc:	4b1d      	ldr	r3, [pc, #116]	; (8007934 <MX_TIM2_Init+0x94>)
 80078be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80078c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80078c4:	4b1b      	ldr	r3, [pc, #108]	; (8007934 <MX_TIM2_Init+0x94>)
 80078c6:	22a7      	movs	r2, #167	; 0xa7
 80078c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078ca:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <MX_TIM2_Init+0x94>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3;
 80078d0:	4b18      	ldr	r3, [pc, #96]	; (8007934 <MX_TIM2_Init+0x94>)
 80078d2:	2203      	movs	r2, #3
 80078d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078d6:	4b17      	ldr	r3, [pc, #92]	; (8007934 <MX_TIM2_Init+0x94>)
 80078d8:	2200      	movs	r2, #0
 80078da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078dc:	4b15      	ldr	r3, [pc, #84]	; (8007934 <MX_TIM2_Init+0x94>)
 80078de:	2200      	movs	r2, #0
 80078e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80078e2:	4814      	ldr	r0, [pc, #80]	; (8007934 <MX_TIM2_Init+0x94>)
 80078e4:	f006 f9c4 	bl	800dc70 <HAL_TIM_Base_Init>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80078ee:	f7ff fbcd 	bl	800708c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4619      	mov	r1, r3
 80078fe:	480d      	ldr	r0, [pc, #52]	; (8007934 <MX_TIM2_Init+0x94>)
 8007900:	f006 fc22 	bl	800e148 <HAL_TIM_ConfigClockSource>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800790a:	f7ff fbbf 	bl	800708c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800790e:	2300      	movs	r3, #0
 8007910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007912:	2300      	movs	r3, #0
 8007914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007916:	463b      	mov	r3, r7
 8007918:	4619      	mov	r1, r3
 800791a:	4806      	ldr	r0, [pc, #24]	; (8007934 <MX_TIM2_Init+0x94>)
 800791c:	f007 f80e 	bl	800e93c <HAL_TIMEx_MasterConfigSynchronization>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8007926:	f7ff fbb1 	bl	800708c <Error_Handler>
  }

}
 800792a:	bf00      	nop
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20003694 	.word	0x20003694

08007938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <HAL_TIM_Base_MspInit+0x70>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d10e      	bne.n	8007968 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	4b17      	ldr	r3, [pc, #92]	; (80079ac <HAL_TIM_Base_MspInit+0x74>)
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	4a16      	ldr	r2, [pc, #88]	; (80079ac <HAL_TIM_Base_MspInit+0x74>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	6453      	str	r3, [r2, #68]	; 0x44
 800795a:	4b14      	ldr	r3, [pc, #80]	; (80079ac <HAL_TIM_Base_MspInit+0x74>)
 800795c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007966:	e01a      	b.n	800799e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d115      	bne.n	800799e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <HAL_TIM_Base_MspInit+0x74>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	4a0c      	ldr	r2, [pc, #48]	; (80079ac <HAL_TIM_Base_MspInit+0x74>)
 800797c:	f043 0301 	orr.w	r3, r3, #1
 8007980:	6413      	str	r3, [r2, #64]	; 0x40
 8007982:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <HAL_TIM_Base_MspInit+0x74>)
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	60bb      	str	r3, [r7, #8]
 800798c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800798e:	2200      	movs	r2, #0
 8007990:	2100      	movs	r1, #0
 8007992:	201c      	movs	r0, #28
 8007994:	f001 fa01 	bl	8008d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007998:	201c      	movs	r0, #28
 800799a:	f001 fa1a 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
}
 800799e:	bf00      	nop
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40010000 	.word	0x40010000
 80079ac:	40023800 	.word	0x40023800

080079b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079b8:	f107 030c 	add.w	r3, r7, #12
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	605a      	str	r2, [r3, #4]
 80079c2:	609a      	str	r2, [r3, #8]
 80079c4:	60da      	str	r2, [r3, #12]
 80079c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a12      	ldr	r2, [pc, #72]	; (8007a18 <HAL_TIM_MspPostInit+0x68>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d11e      	bne.n	8007a10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079d2:	2300      	movs	r3, #0
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	4b11      	ldr	r3, [pc, #68]	; (8007a1c <HAL_TIM_MspPostInit+0x6c>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <HAL_TIM_MspPostInit+0x6c>)
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	6313      	str	r3, [r2, #48]	; 0x30
 80079e2:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <HAL_TIM_MspPostInit+0x6c>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	60bb      	str	r3, [r7, #8]
 80079ec:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80079ee:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80079f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079f4:	2302      	movs	r3, #2
 80079f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007a00:	2301      	movs	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a04:	f107 030c 	add.w	r3, r7, #12
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4805      	ldr	r0, [pc, #20]	; (8007a20 <HAL_TIM_MspPostInit+0x70>)
 8007a0c:	f001 fda6 	bl	800955c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007a10:	bf00      	nop
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	40010000 	.word	0x40010000
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	40020000 	.word	0x40020000

08007a24 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007a28:	4b11      	ldr	r3, [pc, #68]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a2a:	4a12      	ldr	r2, [pc, #72]	; (8007a74 <MX_USART2_UART_Init+0x50>)
 8007a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a30:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8007a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007a36:	4b0e      	ldr	r3, [pc, #56]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007a3c:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007a42:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007a48:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a4a:	220c      	movs	r2, #12
 8007a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a4e:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007a5a:	4805      	ldr	r0, [pc, #20]	; (8007a70 <MX_USART2_UART_Init+0x4c>)
 8007a5c:	f007 f850 	bl	800eb00 <HAL_UART_Init>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007a66:	f7ff fb11 	bl	800708c <Error_Handler>
  }

}
 8007a6a:	bf00      	nop
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20003934 	.word	0x20003934
 8007a74:	40004400 	.word	0x40004400

08007a78 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007a7c:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007a7e:	4a12      	ldr	r2, [pc, #72]	; (8007ac8 <MX_USART3_UART_Init+0x50>)
 8007a80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007a82:	4b10      	ldr	r3, [pc, #64]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007a8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007a90:	4b0c      	ldr	r3, [pc, #48]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007a96:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007a9c:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007a9e:	220c      	movs	r2, #12
 8007aa0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007aa2:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007aa8:	4b06      	ldr	r3, [pc, #24]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007aae:	4805      	ldr	r0, [pc, #20]	; (8007ac4 <MX_USART3_UART_Init+0x4c>)
 8007ab0:	f007 f826 	bl	800eb00 <HAL_UART_Init>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007aba:	f7ff fae7 	bl	800708c <Error_Handler>
  }

}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	200037f4 	.word	0x200037f4
 8007ac8:	40004800 	.word	0x40004800

08007acc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007ad2:	4a12      	ldr	r2, [pc, #72]	; (8007b1c <MX_USART6_UART_Init+0x50>)
 8007ad4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 230400;
 8007ad6:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007ad8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8007adc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8007ade:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007af0:	4b09      	ldr	r3, [pc, #36]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007af2:	220c      	movs	r2, #12
 8007af4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8007b02:	4805      	ldr	r0, [pc, #20]	; (8007b18 <MX_USART6_UART_Init+0x4c>)
 8007b04:	f006 fffc 	bl	800eb00 <HAL_UART_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8007b0e:	f7ff fabd 	bl	800708c <Error_Handler>
  }

}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200038f4 	.word	0x200038f4
 8007b1c:	40011400 	.word	0x40011400

08007b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08e      	sub	sp, #56	; 0x38
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	609a      	str	r2, [r3, #8]
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a7f      	ldr	r2, [pc, #508]	; (8007d3c <HAL_UART_MspInit+0x21c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	f040 8091 	bne.w	8007c66 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007b44:	2300      	movs	r3, #0
 8007b46:	623b      	str	r3, [r7, #32]
 8007b48:	4b7d      	ldr	r3, [pc, #500]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	4a7c      	ldr	r2, [pc, #496]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b52:	6413      	str	r3, [r2, #64]	; 0x40
 8007b54:	4b7a      	ldr	r3, [pc, #488]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]
 8007b64:	4b76      	ldr	r3, [pc, #472]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	4a75      	ldr	r2, [pc, #468]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8007b70:	4b73      	ldr	r3, [pc, #460]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	61fb      	str	r3, [r7, #28]
 8007b7a:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b80:	2302      	movs	r3, #2
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b84:	2300      	movs	r3, #0
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007b8c:	2307      	movs	r3, #7
 8007b8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b94:	4619      	mov	r1, r3
 8007b96:	486b      	ldr	r0, [pc, #428]	; (8007d44 <HAL_UART_MspInit+0x224>)
 8007b98:	f001 fce0 	bl	800955c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007b9c:	4b6a      	ldr	r3, [pc, #424]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007b9e:	4a6b      	ldr	r2, [pc, #428]	; (8007d4c <HAL_UART_MspInit+0x22c>)
 8007ba0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007ba2:	4b69      	ldr	r3, [pc, #420]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007ba4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ba8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007baa:	4b67      	ldr	r3, [pc, #412]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bb0:	4b65      	ldr	r3, [pc, #404]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007bb6:	4b64      	ldr	r3, [pc, #400]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007bbe:	4b62      	ldr	r3, [pc, #392]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007bc4:	4b60      	ldr	r3, [pc, #384]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007bca:	4b5f      	ldr	r3, [pc, #380]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007bd0:	4b5d      	ldr	r3, [pc, #372]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007bd6:	4b5c      	ldr	r3, [pc, #368]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007bdc:	485a      	ldr	r0, [pc, #360]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bde:	f001 f913 	bl	8008e08 <HAL_DMA_Init>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8007be8:	f7ff fa50 	bl	800708c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a56      	ldr	r2, [pc, #344]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8007bf2:	4a55      	ldr	r2, [pc, #340]	; (8007d48 <HAL_UART_MspInit+0x228>)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007bf8:	4b55      	ldr	r3, [pc, #340]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007bfa:	4a56      	ldr	r2, [pc, #344]	; (8007d54 <HAL_UART_MspInit+0x234>)
 8007bfc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007bfe:	4b54      	ldr	r3, [pc, #336]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007c06:	4b52      	ldr	r3, [pc, #328]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c08:	2240      	movs	r2, #64	; 0x40
 8007c0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c0c:	4b50      	ldr	r3, [pc, #320]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007c12:	4b4f      	ldr	r3, [pc, #316]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c18:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c1a:	4b4d      	ldr	r3, [pc, #308]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c20:	4b4b      	ldr	r3, [pc, #300]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007c26:	4b4a      	ldr	r3, [pc, #296]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007c2c:	4b48      	ldr	r3, [pc, #288]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c2e:	2200      	movs	r2, #0
 8007c30:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007c32:	4b47      	ldr	r3, [pc, #284]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007c38:	4845      	ldr	r0, [pc, #276]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c3a:	f001 f8e5 	bl	8008e08 <HAL_DMA_Init>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8007c44:	f7ff fa22 	bl	800708c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a41      	ldr	r2, [pc, #260]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8007c4e:	4a40      	ldr	r2, [pc, #256]	; (8007d50 <HAL_UART_MspInit+0x230>)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007c54:	2200      	movs	r2, #0
 8007c56:	2100      	movs	r1, #0
 8007c58:	2026      	movs	r0, #38	; 0x26
 8007c5a:	f001 f89e 	bl	8008d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007c5e:	2026      	movs	r0, #38	; 0x26
 8007c60:	f001 f8b7 	bl	8008dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8007c64:	e10e      	b.n	8007e84 <HAL_UART_MspInit+0x364>
  else if(uartHandle->Instance==USART3)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3b      	ldr	r2, [pc, #236]	; (8007d58 <HAL_UART_MspInit+0x238>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d17b      	bne.n	8007d68 <HAL_UART_MspInit+0x248>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007c70:	2300      	movs	r3, #0
 8007c72:	61bb      	str	r3, [r7, #24]
 8007c74:	4b32      	ldr	r3, [pc, #200]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	4a31      	ldr	r2, [pc, #196]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8007c80:	4b2f      	ldr	r3, [pc, #188]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c88:	61bb      	str	r3, [r7, #24]
 8007c8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	4a2a      	ldr	r2, [pc, #168]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007c96:	f043 0302 	orr.w	r3, r3, #2
 8007c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9c:	4b28      	ldr	r3, [pc, #160]	; (8007d40 <HAL_UART_MspInit+0x220>)
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	f003 0302 	and.w	r3, r3, #2
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007ca8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007cba:	2307      	movs	r3, #7
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4825      	ldr	r0, [pc, #148]	; (8007d5c <HAL_UART_MspInit+0x23c>)
 8007cc6:	f001 fc49 	bl	800955c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007cca:	4b25      	ldr	r3, [pc, #148]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007ccc:	4a25      	ldr	r2, [pc, #148]	; (8007d64 <HAL_UART_MspInit+0x244>)
 8007cce:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8007cd0:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007cd6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007cd8:	4b21      	ldr	r3, [pc, #132]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ce4:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cea:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007cec:	4b1c      	ldr	r3, [pc, #112]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8007cf8:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cfe:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007d00:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d06:	4b16      	ldr	r3, [pc, #88]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8007d0c:	4814      	ldr	r0, [pc, #80]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007d0e:	f001 f87b 	bl	8008e08 <HAL_DMA_Init>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 8007d18:	f7ff f9b8 	bl	800708c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34
 8007d22:	4a0f      	ldr	r2, [pc, #60]	; (8007d60 <HAL_UART_MspInit+0x240>)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007d28:	2200      	movs	r2, #0
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	2027      	movs	r0, #39	; 0x27
 8007d2e:	f001 f834 	bl	8008d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007d32:	2027      	movs	r0, #39	; 0x27
 8007d34:	f001 f84d 	bl	8008dd2 <HAL_NVIC_EnableIRQ>
}
 8007d38:	e0a4      	b.n	8007e84 <HAL_UART_MspInit+0x364>
 8007d3a:	bf00      	nop
 8007d3c:	40004400 	.word	0x40004400
 8007d40:	40023800 	.word	0x40023800
 8007d44:	40020000 	.word	0x40020000
 8007d48:	200036d4 	.word	0x200036d4
 8007d4c:	40026088 	.word	0x40026088
 8007d50:	20003894 	.word	0x20003894
 8007d54:	400260a0 	.word	0x400260a0
 8007d58:	40004800 	.word	0x40004800
 8007d5c:	40020400 	.word	0x40020400
 8007d60:	20003794 	.word	0x20003794
 8007d64:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a47      	ldr	r2, [pc, #284]	; (8007e8c <HAL_UART_MspInit+0x36c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	f040 8088 	bne.w	8007e84 <HAL_UART_MspInit+0x364>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007d74:	2300      	movs	r3, #0
 8007d76:	613b      	str	r3, [r7, #16]
 8007d78:	4b45      	ldr	r3, [pc, #276]	; (8007e90 <HAL_UART_MspInit+0x370>)
 8007d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7c:	4a44      	ldr	r2, [pc, #272]	; (8007e90 <HAL_UART_MspInit+0x370>)
 8007d7e:	f043 0320 	orr.w	r3, r3, #32
 8007d82:	6453      	str	r3, [r2, #68]	; 0x44
 8007d84:	4b42      	ldr	r3, [pc, #264]	; (8007e90 <HAL_UART_MspInit+0x370>)
 8007d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	613b      	str	r3, [r7, #16]
 8007d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d90:	2300      	movs	r3, #0
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	4b3e      	ldr	r3, [pc, #248]	; (8007e90 <HAL_UART_MspInit+0x370>)
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	4a3d      	ldr	r2, [pc, #244]	; (8007e90 <HAL_UART_MspInit+0x370>)
 8007d9a:	f043 0304 	orr.w	r3, r3, #4
 8007d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8007da0:	4b3b      	ldr	r3, [pc, #236]	; (8007e90 <HAL_UART_MspInit+0x370>)
 8007da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007dac:	23c0      	movs	r3, #192	; 0xc0
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007db0:	2302      	movs	r3, #2
 8007db2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007db4:	2300      	movs	r3, #0
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007db8:	2303      	movs	r3, #3
 8007dba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4833      	ldr	r0, [pc, #204]	; (8007e94 <HAL_UART_MspInit+0x374>)
 8007dc8:	f001 fbc8 	bl	800955c <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8007dcc:	4b32      	ldr	r3, [pc, #200]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007dce:	4a33      	ldr	r2, [pc, #204]	; (8007e9c <HAL_UART_MspInit+0x37c>)
 8007dd0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8007dd2:	4b31      	ldr	r3, [pc, #196]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007dd4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007dd8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007dda:	4b2f      	ldr	r3, [pc, #188]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007ddc:	2240      	movs	r2, #64	; 0x40
 8007dde:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007de0:	4b2d      	ldr	r3, [pc, #180]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007de6:	4b2c      	ldr	r3, [pc, #176]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007de8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dec:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007dee:	4b2a      	ldr	r3, [pc, #168]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007df4:	4b28      	ldr	r3, [pc, #160]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8007dfa:	4b27      	ldr	r3, [pc, #156]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e06:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8007e0c:	4822      	ldr	r0, [pc, #136]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007e0e:	f000 fffb 	bl	8008e08 <HAL_DMA_Init>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <HAL_UART_MspInit+0x2fc>
      Error_Handler();
 8007e18:	f7ff f938 	bl	800708c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a1e      	ldr	r2, [pc, #120]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007e20:	631a      	str	r2, [r3, #48]	; 0x30
 8007e22:	4a1d      	ldr	r2, [pc, #116]	; (8007e98 <HAL_UART_MspInit+0x378>)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007e28:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <HAL_UART_MspInit+0x384>)
 8007e2c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007e2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e30:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8007e34:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e36:	4b1a      	ldr	r3, [pc, #104]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e3c:	4b18      	ldr	r3, [pc, #96]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e42:	4b17      	ldr	r3, [pc, #92]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e48:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e4a:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e50:	4b13      	ldr	r3, [pc, #76]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8007e56:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007e5c:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e62:	4b0f      	ldr	r3, [pc, #60]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007e68:	480d      	ldr	r0, [pc, #52]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e6a:	f000 ffcd 	bl	8008e08 <HAL_DMA_Init>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <HAL_UART_MspInit+0x358>
      Error_Handler();
 8007e74:	f7ff f90a 	bl	800708c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e7e:	4a08      	ldr	r2, [pc, #32]	; (8007ea0 <HAL_UART_MspInit+0x380>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007e84:	bf00      	nop
 8007e86:	3738      	adds	r7, #56	; 0x38
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	40011400 	.word	0x40011400
 8007e90:	40023800 	.word	0x40023800
 8007e94:	40020800 	.word	0x40020800
 8007e98:	20003834 	.word	0x20003834
 8007e9c:	400264a0 	.word	0x400264a0
 8007ea0:	20003734 	.word	0x20003734
 8007ea4:	40026428 	.word	0x40026428

08007ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ee0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007eac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007eae:	e003      	b.n	8007eb8 <LoopCopyDataInit>

08007eb0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007eb2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007eb4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007eb6:	3104      	adds	r1, #4

08007eb8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007eb8:	480b      	ldr	r0, [pc, #44]	; (8007ee8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007ebc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007ebe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007ec0:	d3f6      	bcc.n	8007eb0 <CopyDataInit>
  ldr  r2, =_sbss
 8007ec2:	4a0b      	ldr	r2, [pc, #44]	; (8007ef0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007ec4:	e002      	b.n	8007ecc <LoopFillZerobss>

08007ec6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007ec6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ec8:	f842 3b04 	str.w	r3, [r2], #4

08007ecc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ecc:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007ece:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ed0:	d3f9      	bcc.n	8007ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007ed2:	f7ff fc09 	bl	80076e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ed6:	f008 fb67 	bl	80105a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007eda:	f7fe ffa3 	bl	8006e24 <main>
  bx  lr    
 8007ede:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007ee0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007ee4:	08014d4c 	.word	0x08014d4c
  ldr  r0, =_sdata
 8007ee8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007eec:	20001e88 	.word	0x20001e88
  ldr  r2, =_sbss
 8007ef0:	20001e88 	.word	0x20001e88
  ldr  r3, = _ebss
 8007ef4:	2000397c 	.word	0x2000397c

08007ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ef8:	e7fe      	b.n	8007ef8 <ADC_IRQHandler>

08007efa <get_nb_bytes_available>:

static telemetry_t * telem ;	//We dont use multiples telemetry anyways

//Private function to know the number of bytes available
uint16_t get_nb_bytes_available(telemetry_t * telem);
uint16_t get_nb_bytes_available(telemetry_t * telem){
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
	uint16_t nb = 0 ;
 8007f02:	2300      	movs	r3, #0
 8007f04:	81fb      	strh	r3, [r7, #14]
	if(telem->index_write_rx > telem->index_read_rx){
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d907      	bls.n	8007f26 <get_nb_bytes_available+0x2c>
		nb = telem->index_write_rx - telem->index_read_rx ;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	81fb      	strh	r3, [r7, #14]
	}
	return nb;
 8007f26:	89fb      	ldrh	r3, [r7, #14]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3714      	adds	r7, #20
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <TELEMETRY_Init>:

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	telem = telem_ ;
 8007f3e:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <TELEMETRY_Init+0x60>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6013      	str	r3, [r2, #0]
	telem->huart = huart ;
 8007f44:	4b13      	ldr	r3, [pc, #76]	; (8007f94 <TELEMETRY_Init+0x60>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	601a      	str	r2, [r3, #0]

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8007f4c:	4b11      	ldr	r3, [pc, #68]	; (8007f94 <TELEMETRY_Init+0x60>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2214      	movs	r2, #20
 8007f54:	4910      	ldr	r1, [pc, #64]	; (8007f98 <TELEMETRY_Init+0x64>)
 8007f56:	4618      	mov	r0, r3
 8007f58:	f006 ff5e 	bl	800ee18 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <TELEMETRY_Init+0x60>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68da      	ldr	r2, [r3, #12]
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <TELEMETRY_Init+0x60>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0210 	orr.w	r2, r2, #16
 8007f72:	60da      	str	r2, [r3, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <TELEMETRY_Init+0x60>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6818      	ldr	r0, [r3, #0]
 8007f7a:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <TELEMETRY_Init+0x60>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8007f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f86:	4619      	mov	r1, r3
 8007f88:	f006 ffb2 	bl	800eef0 <HAL_UART_Receive_DMA>
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	200024a4 	.word	0x200024a4
 8007f98:	20001c94 	.word	0x20001c94

08007f9c <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && time_us > telem->next_send)
 8007fa4:	4b6f      	ldr	r3, [pc, #444]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 8007fac:	4b6d      	ldr	r3, [pc, #436]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d051      	beq.n	800805c <TELEMETRY_Process+0xc0>
 8007fb8:	4b6a      	ldr	r3, [pc, #424]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d94a      	bls.n	800805c <TELEMETRY_Process+0xc0>
	{
		telem->next_send = time_us + telem->len_portion_tx[telem->index_read_tx] * PERIODE_1_OCTET ;
 8007fc6:	4b67      	ldr	r3, [pc, #412]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a66      	ldr	r2, [pc, #408]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f240 134d 	movw	r3, #333	; 0x14d
 8007fde:	fb03 f302 	mul.w	r3, r3, r2
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	4b5f      	ldr	r3, [pc, #380]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	440a      	add	r2, r1
 8007fec:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8007ff0:	4b5c      	ldr	r3, [pc, #368]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6818      	ldr	r0, [r3, #0]
 8007ff6:	4b5b      	ldr	r3, [pc, #364]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b5a      	ldr	r3, [pc, #360]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8008002:	4619      	mov	r1, r3
 8008004:	460b      	mov	r3, r1
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	1d59      	adds	r1, r3, #5
 8008010:	4b54      	ldr	r3, [pc, #336]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a53      	ldr	r2, [pc, #332]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008016:	6812      	ldr	r2, [r2, #0]
 8008018:	f8b2 2426 	ldrh.w	r2, [r2, #1062]	; 0x426
 800801c:	4413      	add	r3, r2
 800801e:	f893 33ed 	ldrb.w	r3, [r3, #1005]	; 0x3ed
 8008022:	b29b      	uxth	r3, r3
 8008024:	461a      	mov	r2, r3
 8008026:	f006 fef7 	bl	800ee18 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 800802a:	4b4e      	ldr	r3, [pc, #312]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f8b3 2426 	ldrh.w	r2, [r3, #1062]	; 0x426
 8008032:	3201      	adds	r2, #1
 8008034:	b292      	uxth	r2, r2
 8008036:	f8a3 2426 	strh.w	r2, [r3, #1062]	; 0x426
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 800803a:	4b4a      	ldr	r3, [pc, #296]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f8b3 3426 	ldrh.w	r3, [r3, #1062]	; 0x426
 8008042:	4a48      	ldr	r2, [pc, #288]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	4948      	ldr	r1, [pc, #288]	; (8008168 <TELEMETRY_Process+0x1cc>)
 8008048:	fba1 0103 	umull	r0, r1, r1, r3
 800804c:	0909      	lsrs	r1, r1, #4
 800804e:	2032      	movs	r0, #50	; 0x32
 8008050:	fb00 f101 	mul.w	r1, r0, r1
 8008054:	1a5b      	subs	r3, r3, r1
 8008056:	b29b      	uxth	r3, r3
 8008058:	f8a2 3426 	strh.w	r3, [r2, #1062]	; 0x426
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
 800805c:	4b41      	ldr	r3, [pc, #260]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f7ff ff4a 	bl	8007efa <get_nb_bytes_available>
 8008066:	4603      	mov	r3, r0
 8008068:	823b      	strh	r3, [r7, #16]
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 800806a:	8a3b      	ldrh	r3, [r7, #16]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d976      	bls.n	800815e <TELEMETRY_Process+0x1c2>
	{
		uint16_t bytes_used = 1 ;
 8008070:	2301      	movs	r3, #1
 8008072:	82fb      	strh	r3, [r7, #22]
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 8008074:	4b3b      	ldr	r3, [pc, #236]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a3a      	ldr	r2, [pc, #232]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800807a:	6812      	ldr	r2, [r2, #0]
 800807c:	f8b2 262a 	ldrh.w	r2, [r2, #1578]	; 0x62a
 8008080:	4413      	add	r3, r2
 8008082:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8008086:	2b24      	cmp	r3, #36	; 0x24
 8008088:	d15c      	bne.n	8008144 <TELEMETRY_Process+0x1a8>
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[telem->index_read_rx+1]);
 800808a:	4b36      	ldr	r3, [pc, #216]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4b35      	ldr	r3, [pc, #212]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8008096:	3301      	adds	r3, #1
 8008098:	4413      	add	r3, r2
 800809a:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f9 fff6 	bl	8002090 <DATA_LOGGER_Get_Data>
 80080a4:	60f8      	str	r0, [r7, #12]
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	7a5b      	ldrb	r3, [r3, #9]
 80080aa:	4a30      	ldr	r2, [pc, #192]	; (800816c <TELEMETRY_Process+0x1d0>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3303      	adds	r3, #3
 80080b8:	817b      	strh	r3, [r7, #10]

			if(bytes_recquired > bytes_avaibles)
 80080ba:	897a      	ldrh	r2, [r7, #10]
 80080bc:	8a3b      	ldrh	r3, [r7, #16]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d84c      	bhi.n	800815c <TELEMETRY_Process+0x1c0>
				return ;	//We just wait for then next call with hopefully more data available
			bytes_used = bytes_recquired;
 80080c2:	897b      	ldrh	r3, [r7, #10]
 80080c4:	82fb      	strh	r3, [r7, #22]

			//Len is id(1 byte) + data(x bytes)
			uint16_t len_frame = bytes_recquired - 2 ;
 80080c6:	897b      	ldrh	r3, [r7, #10]
 80080c8:	3b02      	subs	r3, #2
 80080ca:	813b      	strh	r3, [r7, #8]

			//Checksum
			uint16_t checksum = 0 ;
 80080cc:	2300      	movs	r3, #0
 80080ce:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 80080d0:	2300      	movs	r3, #0
 80080d2:	827b      	strh	r3, [r7, #18]
 80080d4:	e012      	b.n	80080fc <TELEMETRY_Process+0x160>
			{
				checksum += telem->buffer_rx[telem->index_read_rx+1+b];
 80080d6:	4b23      	ldr	r3, [pc, #140]	; (8008164 <TELEMETRY_Process+0x1c8>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4b22      	ldr	r3, [pc, #136]	; (8008164 <TELEMETRY_Process+0x1c8>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 80080e2:	1c59      	adds	r1, r3, #1
 80080e4:	8a7b      	ldrh	r3, [r7, #18]
 80080e6:	440b      	add	r3, r1
 80080e8:	4413      	add	r3, r2
 80080ea:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	8abb      	ldrh	r3, [r7, #20]
 80080f2:	4413      	add	r3, r2
 80080f4:	82bb      	strh	r3, [r7, #20]
			for(uint16_t b = 0; b < len_frame; b++)
 80080f6:	8a7b      	ldrh	r3, [r7, #18]
 80080f8:	3301      	adds	r3, #1
 80080fa:	827b      	strh	r3, [r7, #18]
 80080fc:	8a7a      	ldrh	r2, [r7, #18]
 80080fe:	893b      	ldrh	r3, [r7, #8]
 8008100:	429a      	cmp	r2, r3
 8008102:	d3e8      	bcc.n	80080d6 <TELEMETRY_Process+0x13a>
			}
			if(checksum % 256 == telem->buffer_rx[telem->index_read_rx + bytes_recquired-1])
 8008104:	8abb      	ldrh	r3, [r7, #20]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	b29a      	uxth	r2, r3
 800810a:	4b16      	ldr	r3, [pc, #88]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800810c:	6819      	ldr	r1, [r3, #0]
 800810e:	4b15      	ldr	r3, [pc, #84]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8008116:	4618      	mov	r0, r3
 8008118:	897b      	ldrh	r3, [r7, #10]
 800811a:	4403      	add	r3, r0
 800811c:	3b01      	subs	r3, #1
 800811e:	440b      	add	r3, r1
 8008120:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8008124:	b29b      	uxth	r3, r3
 8008126:	429a      	cmp	r2, r3
 8008128:	d10c      	bne.n	8008144 <TELEMETRY_Process+0x1a8>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[telem->index_read_rx+1]);
 800812a:	4b0e      	ldr	r3, [pc, #56]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 8008136:	3301      	adds	r3, #1
 8008138:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800813c:	4413      	add	r3, r2
 800813e:	4618      	mov	r0, r3
 8008140:	f7f9 fd88 	bl	8001c54 <DATA_LOGGER_Reception>
			}
		}
		telem->index_read_rx += bytes_used ;
 8008144:	4b07      	ldr	r3, [pc, #28]	; (8008164 <TELEMETRY_Process+0x1c8>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f8b3 162a 	ldrh.w	r1, [r3, #1578]	; 0x62a
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <TELEMETRY_Process+0x1c8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	8afa      	ldrh	r2, [r7, #22]
 8008152:	440a      	add	r2, r1
 8008154:	b292      	uxth	r2, r2
 8008156:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
 800815a:	e000      	b.n	800815e <TELEMETRY_Process+0x1c2>
				return ;	//We just wait for then next call with hopefully more data available
 800815c:	bf00      	nop
	}

}
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	200024a4 	.word	0x200024a4
 8008168:	51eb851f 	.word	0x51eb851f
 800816c:	cccccccd 	.word	0xcccccccd

08008170 <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;
 800817c:	2300      	movs	r3, #0
 800817e:	627b      	str	r3, [r7, #36]	; 0x24


	to_send[0] = '$';
 8008180:	2324      	movs	r3, #36	; 0x24
 8008182:	733b      	strb	r3, [r7, #12]

	for(uint8_t b = 0; b < len; b++){
 8008184:	2300      	movs	r3, #0
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818a:	e01d      	b.n	80081c8 <TELEMETRY_Send_Data+0x58>
		to_send[1 + b] = data[b];
 800818c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	441a      	add	r2, r3
 8008194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008198:	3301      	adds	r3, #1
 800819a:	7812      	ldrb	r2, [r2, #0]
 800819c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80081a0:	440b      	add	r3, r1
 80081a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		checksum += (uint32_t)to_send[1 + b];
 80081a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081aa:	3301      	adds	r3, #1
 80081ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80081b0:	4413      	add	r3, r2
 80081b2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80081b6:	461a      	mov	r2, r3
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	4413      	add	r3, r2
 80081bc:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint8_t b = 0; b < len; b++){
 80081be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081c2:	3301      	adds	r3, #1
 80081c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081c8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80081cc:	78fb      	ldrb	r3, [r7, #3]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d3dc      	bcc.n	800818c <TELEMETRY_Send_Data+0x1c>
	}

	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	3301      	adds	r3, #1
 80081d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80081de:	440b      	add	r3, r1
 80081e0:	f803 2c1c 	strb.w	r2, [r3, #-28]
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	3302      	adds	r3, #2
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	f107 030c 	add.w	r3, r7, #12
 80081ee:	4611      	mov	r1, r2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f805 	bl	8008200 <TELEMETRY_Send_Data_Raw>
}
 80081f6:	bf00      	nop
 80081f8:	3728      	adds	r7, #40	; 0x28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <TELEMETRY_Send_Data_Raw>:

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
 8008210:	e017      	b.n	8008242 <TELEMETRY_Send_Data_Raw+0x42>
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 8008212:	7bfb      	ldrb	r3, [r7, #15]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	18d1      	adds	r1, r2, r3
 8008218:	4b20      	ldr	r3, [pc, #128]	; (800829c <TELEMETRY_Send_Data_Raw+0x9c>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	4b1f      	ldr	r3, [pc, #124]	; (800829c <TELEMETRY_Send_Data_Raw+0x9c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8008224:	4618      	mov	r0, r3
 8008226:	4603      	mov	r3, r0
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4403      	add	r3, r0
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4618      	mov	r0, r3
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4403      	add	r3, r0
 8008234:	7809      	ldrb	r1, [r1, #0]
 8008236:	4413      	add	r3, r2
 8008238:	460a      	mov	r2, r1
 800823a:	715a      	strb	r2, [r3, #5]
	for(uint8_t c = 0; c < len; c++)
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	3301      	adds	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
 8008242:	7bfa      	ldrb	r2, [r7, #15]
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	429a      	cmp	r2, r3
 8008248:	d3e3      	bcc.n	8008212 <TELEMETRY_Send_Data_Raw+0x12>
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;
 800824a:	4b14      	ldr	r3, [pc, #80]	; (800829c <TELEMETRY_Send_Data_Raw+0x9c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a13      	ldr	r2, [pc, #76]	; (800829c <TELEMETRY_Send_Data_Raw+0x9c>)
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	f8b2 2424 	ldrh.w	r2, [r2, #1060]	; 0x424
 8008256:	4413      	add	r3, r2
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <TELEMETRY_Send_Data_Raw+0x9c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f8b3 2424 	ldrh.w	r2, [r3, #1060]	; 0x424
 8008266:	3201      	adds	r2, #1
 8008268:	b292      	uxth	r2, r2
 800826a:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 800826e:	4b0b      	ldr	r3, [pc, #44]	; (800829c <TELEMETRY_Send_Data_Raw+0x9c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8b3 3424 	ldrh.w	r3, [r3, #1060]	; 0x424
 8008276:	4a09      	ldr	r2, [pc, #36]	; (800829c <TELEMETRY_Send_Data_Raw+0x9c>)
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	4909      	ldr	r1, [pc, #36]	; (80082a0 <TELEMETRY_Send_Data_Raw+0xa0>)
 800827c:	fba1 0103 	umull	r0, r1, r1, r3
 8008280:	0909      	lsrs	r1, r1, #4
 8008282:	2032      	movs	r0, #50	; 0x32
 8008284:	fb00 f101 	mul.w	r1, r0, r1
 8008288:	1a5b      	subs	r3, r3, r1
 800828a:	b29b      	uxth	r3, r3
 800828c:	f8a2 3424 	strh.w	r3, [r2, #1060]	; 0x424
}
 8008290:	bf00      	nop
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	200024a4 	.word	0x200024a4
 80082a0:	51eb851f 	.word	0x51eb851f

080082a4 <TELEMETRY_Idle_Line_Detection>:

void TELEMETRY_Idle_Line_Detection(void){
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <TELEMETRY_Idle_Line_Detection+0x2c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80082be:	b292      	uxth	r2, r2
 80082c0:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	200024a4 	.word	0x200024a4

080082d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80082d8:	4b0e      	ldr	r3, [pc, #56]	; (8008314 <HAL_Init+0x40>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a0d      	ldr	r2, [pc, #52]	; (8008314 <HAL_Init+0x40>)
 80082de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <HAL_Init+0x40>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <HAL_Init+0x40>)
 80082ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082f0:	4b08      	ldr	r3, [pc, #32]	; (8008314 <HAL_Init+0x40>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a07      	ldr	r2, [pc, #28]	; (8008314 <HAL_Init+0x40>)
 80082f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082fc:	2003      	movs	r0, #3
 80082fe:	f000 fd41 	bl	8008d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008302:	2000      	movs	r0, #0
 8008304:	f000 f808 	bl	8008318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008308:	f7ff f87a 	bl	8007400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	40023c00 	.word	0x40023c00

08008318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008320:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_InitTick+0x54>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	4b12      	ldr	r3, [pc, #72]	; (8008370 <HAL_InitTick+0x58>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	4619      	mov	r1, r3
 800832a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800832e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008332:	fbb2 f3f3 	udiv	r3, r2, r3
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fd59 	bl	8008dee <HAL_SYSTICK_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e00e      	b.n	8008364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b0f      	cmp	r3, #15
 800834a:	d80a      	bhi.n	8008362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800834c:	2200      	movs	r2, #0
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	f04f 30ff 	mov.w	r0, #4294967295
 8008354:	f000 fd21 	bl	8008d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008358:	4a06      	ldr	r2, [pc, #24]	; (8008374 <HAL_InitTick+0x5c>)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	e000      	b.n	8008364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20001c90 	.word	0x20001c90
 8008370:	20001cb0 	.word	0x20001cb0
 8008374:	20001cac 	.word	0x20001cac

08008378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800837c:	4b06      	ldr	r3, [pc, #24]	; (8008398 <HAL_IncTick+0x20>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	461a      	mov	r2, r3
 8008382:	4b06      	ldr	r3, [pc, #24]	; (800839c <HAL_IncTick+0x24>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4413      	add	r3, r2
 8008388:	4a04      	ldr	r2, [pc, #16]	; (800839c <HAL_IncTick+0x24>)
 800838a:	6013      	str	r3, [r2, #0]
}
 800838c:	bf00      	nop
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	20001cb0 	.word	0x20001cb0
 800839c:	20003974 	.word	0x20003974

080083a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  return uwTick;
 80083a4:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <HAL_GetTick+0x14>)
 80083a6:	681b      	ldr	r3, [r3, #0]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20003974 	.word	0x20003974

080083b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80083c0:	f7ff ffee 	bl	80083a0 <HAL_GetTick>
 80083c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d0:	d005      	beq.n	80083de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083d2:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <HAL_Delay+0x40>)
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80083de:	bf00      	nop
 80083e0:	f7ff ffde 	bl	80083a0 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d8f7      	bhi.n	80083e0 <HAL_Delay+0x28>
  {
  }
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20001cb0 	.word	0x20001cb0

080083fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e033      	b.n	800847a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d109      	bne.n	800842e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fe fa60 	bl	80068e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	f003 0310 	and.w	r3, r3, #16
 8008436:	2b00      	cmp	r3, #0
 8008438:	d118      	bne.n	800846c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008442:	f023 0302 	bic.w	r3, r3, #2
 8008446:	f043 0202 	orr.w	r2, r3, #2
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fa4a 	bl	80088e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f023 0303 	bic.w	r3, r3, #3
 8008462:	f043 0201 	orr.w	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	641a      	str	r2, [r3, #64]	; 0x40
 800846a:	e001      	b.n	8008470 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800849a:	2b01      	cmp	r3, #1
 800849c:	d101      	bne.n	80084a2 <HAL_ADC_Start_DMA+0x1e>
 800849e:	2302      	movs	r3, #2
 80084a0:	e0cc      	b.n	800863c <HAL_ADC_Start_DMA+0x1b8>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d018      	beq.n	80084ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0201 	orr.w	r2, r2, #1
 80084c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80084c8:	4b5e      	ldr	r3, [pc, #376]	; (8008644 <HAL_ADC_Start_DMA+0x1c0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a5e      	ldr	r2, [pc, #376]	; (8008648 <HAL_ADC_Start_DMA+0x1c4>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	0c9a      	lsrs	r2, r3, #18
 80084d4:	4613      	mov	r3, r2
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	4413      	add	r3, r2
 80084da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80084dc:	e002      	b.n	80084e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f9      	bne.n	80084de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	f040 80a0 	bne.w	800863a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008524:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008538:	d106      	bne.n	8008548 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853e:	f023 0206 	bic.w	r2, r3, #6
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	645a      	str	r2, [r3, #68]	; 0x44
 8008546:	e002      	b.n	800854e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008556:	4b3d      	ldr	r3, [pc, #244]	; (800864c <HAL_ADC_Start_DMA+0x1c8>)
 8008558:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	4a3c      	ldr	r2, [pc, #240]	; (8008650 <HAL_ADC_Start_DMA+0x1cc>)
 8008560:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	4a3b      	ldr	r2, [pc, #236]	; (8008654 <HAL_ADC_Start_DMA+0x1d0>)
 8008568:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	4a3a      	ldr	r2, [pc, #232]	; (8008658 <HAL_ADC_Start_DMA+0x1d4>)
 8008570:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800857a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800858a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800859a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	334c      	adds	r3, #76	; 0x4c
 80085a6:	4619      	mov	r1, r3
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f000 fcda 	bl	8008f64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f003 031f 	and.w	r3, r3, #31
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d12a      	bne.n	8008612 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a26      	ldr	r2, [pc, #152]	; (800865c <HAL_ADC_Start_DMA+0x1d8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d015      	beq.n	80085f2 <HAL_ADC_Start_DMA+0x16e>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a25      	ldr	r2, [pc, #148]	; (8008660 <HAL_ADC_Start_DMA+0x1dc>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d105      	bne.n	80085dc <HAL_ADC_Start_DMA+0x158>
 80085d0:	4b1e      	ldr	r3, [pc, #120]	; (800864c <HAL_ADC_Start_DMA+0x1c8>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00a      	beq.n	80085f2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a20      	ldr	r2, [pc, #128]	; (8008664 <HAL_ADC_Start_DMA+0x1e0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d129      	bne.n	800863a <HAL_ADC_Start_DMA+0x1b6>
 80085e6:	4b19      	ldr	r3, [pc, #100]	; (800864c <HAL_ADC_Start_DMA+0x1c8>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f003 031f 	and.w	r3, r3, #31
 80085ee:	2b0f      	cmp	r3, #15
 80085f0:	d823      	bhi.n	800863a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d11c      	bne.n	800863a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689a      	ldr	r2, [r3, #8]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800860e:	609a      	str	r2, [r3, #8]
 8008610:	e013      	b.n	800863a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a11      	ldr	r2, [pc, #68]	; (800865c <HAL_ADC_Start_DMA+0x1d8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d10e      	bne.n	800863a <HAL_ADC_Start_DMA+0x1b6>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008638:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20001c90 	.word	0x20001c90
 8008648:	431bde83 	.word	0x431bde83
 800864c:	40012300 	.word	0x40012300
 8008650:	08008ae1 	.word	0x08008ae1
 8008654:	08008b9b 	.word	0x08008b9b
 8008658:	08008bb7 	.word	0x08008bb7
 800865c:	40012000 	.word	0x40012000
 8008660:	40012100 	.word	0x40012100
 8008664:	40012200 	.word	0x40012200

08008668 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_ADC_ConfigChannel+0x1c>
 80086bc:	2302      	movs	r3, #2
 80086be:	e105      	b.n	80088cc <HAL_ADC_ConfigChannel+0x228>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b09      	cmp	r3, #9
 80086ce:	d925      	bls.n	800871c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68d9      	ldr	r1, [r3, #12]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	4613      	mov	r3, r2
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4413      	add	r3, r2
 80086e4:	3b1e      	subs	r3, #30
 80086e6:	2207      	movs	r2, #7
 80086e8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ec:	43da      	mvns	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	400a      	ands	r2, r1
 80086f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68d9      	ldr	r1, [r3, #12]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	b29b      	uxth	r3, r3
 8008706:	4618      	mov	r0, r3
 8008708:	4603      	mov	r3, r0
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	4403      	add	r3, r0
 800870e:	3b1e      	subs	r3, #30
 8008710:	409a      	lsls	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	e022      	b.n	8008762 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6919      	ldr	r1, [r3, #16]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	461a      	mov	r2, r3
 800872a:	4613      	mov	r3, r2
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4413      	add	r3, r2
 8008730:	2207      	movs	r2, #7
 8008732:	fa02 f303 	lsl.w	r3, r2, r3
 8008736:	43da      	mvns	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	400a      	ands	r2, r1
 800873e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6919      	ldr	r1, [r3, #16]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	4618      	mov	r0, r3
 8008752:	4603      	mov	r3, r0
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	4403      	add	r3, r0
 8008758:	409a      	lsls	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	2b06      	cmp	r3, #6
 8008768:	d824      	bhi.n	80087b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	3b05      	subs	r3, #5
 800877c:	221f      	movs	r2, #31
 800877e:	fa02 f303 	lsl.w	r3, r2, r3
 8008782:	43da      	mvns	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	400a      	ands	r2, r1
 800878a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	b29b      	uxth	r3, r3
 8008798:	4618      	mov	r0, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685a      	ldr	r2, [r3, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	3b05      	subs	r3, #5
 80087a6:	fa00 f203 	lsl.w	r2, r0, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	635a      	str	r2, [r3, #52]	; 0x34
 80087b2:	e04c      	b.n	800884e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b0c      	cmp	r3, #12
 80087ba:	d824      	bhi.n	8008806 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	3b23      	subs	r3, #35	; 0x23
 80087ce:	221f      	movs	r2, #31
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	43da      	mvns	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	400a      	ands	r2, r1
 80087dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	4618      	mov	r0, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	4613      	mov	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	3b23      	subs	r3, #35	; 0x23
 80087f8:	fa00 f203 	lsl.w	r2, r0, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
 8008804:	e023      	b.n	800884e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	685a      	ldr	r2, [r3, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	3b41      	subs	r3, #65	; 0x41
 8008818:	221f      	movs	r2, #31
 800881a:	fa02 f303 	lsl.w	r3, r2, r3
 800881e:	43da      	mvns	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	400a      	ands	r2, r1
 8008826:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	4618      	mov	r0, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	3b41      	subs	r3, #65	; 0x41
 8008842:	fa00 f203 	lsl.w	r2, r0, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800884e:	4b22      	ldr	r3, [pc, #136]	; (80088d8 <HAL_ADC_ConfigChannel+0x234>)
 8008850:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a21      	ldr	r2, [pc, #132]	; (80088dc <HAL_ADC_ConfigChannel+0x238>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d109      	bne.n	8008870 <HAL_ADC_ConfigChannel+0x1cc>
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b12      	cmp	r3, #18
 8008862:	d105      	bne.n	8008870 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a19      	ldr	r2, [pc, #100]	; (80088dc <HAL_ADC_ConfigChannel+0x238>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d123      	bne.n	80088c2 <HAL_ADC_ConfigChannel+0x21e>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b10      	cmp	r3, #16
 8008880:	d003      	beq.n	800888a <HAL_ADC_ConfigChannel+0x1e6>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b11      	cmp	r3, #17
 8008888:	d11b      	bne.n	80088c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b10      	cmp	r3, #16
 800889c:	d111      	bne.n	80088c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800889e:	4b10      	ldr	r3, [pc, #64]	; (80088e0 <HAL_ADC_ConfigChannel+0x23c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a10      	ldr	r2, [pc, #64]	; (80088e4 <HAL_ADC_ConfigChannel+0x240>)
 80088a4:	fba2 2303 	umull	r2, r3, r2, r3
 80088a8:	0c9a      	lsrs	r2, r3, #18
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80088b4:	e002      	b.n	80088bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1f9      	bne.n	80088b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	40012300 	.word	0x40012300
 80088dc:	40012000 	.word	0x40012000
 80088e0:	20001c90 	.word	0x20001c90
 80088e4:	431bde83 	.word	0x431bde83

080088e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80088f0:	4b79      	ldr	r3, [pc, #484]	; (8008ad8 <ADC_Init+0x1f0>)
 80088f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	431a      	orrs	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800891c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	6859      	ldr	r1, [r3, #4]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	021a      	lsls	r2, r3, #8
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6859      	ldr	r1, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008962:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6899      	ldr	r1, [r3, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68da      	ldr	r2, [r3, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897a:	4a58      	ldr	r2, [pc, #352]	; (8008adc <ADC_Init+0x1f4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d022      	beq.n	80089c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800898e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6899      	ldr	r1, [r3, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80089b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6899      	ldr	r1, [r3, #8]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	609a      	str	r2, [r3, #8]
 80089c4:	e00f      	b.n	80089e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80089d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80089e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0202 	bic.w	r2, r2, #2
 80089f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6899      	ldr	r1, [r3, #8]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7e1b      	ldrb	r3, [r3, #24]
 8008a00:	005a      	lsls	r2, r3, #1
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01b      	beq.n	8008a4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008a32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6859      	ldr	r1, [r3, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	035a      	lsls	r2, r3, #13
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	605a      	str	r2, [r3, #4]
 8008a4a:	e007      	b.n	8008a5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	051a      	lsls	r2, r3, #20
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6899      	ldr	r1, [r3, #8]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a9e:	025a      	lsls	r2, r3, #9
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	689a      	ldr	r2, [r3, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ab6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6899      	ldr	r1, [r3, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	029a      	lsls	r2, r3, #10
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	609a      	str	r2, [r3, #8]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	40012300 	.word	0x40012300
 8008adc:	0f000001 	.word	0x0f000001

08008ae0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d13c      	bne.n	8008b74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d12b      	bne.n	8008b6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d127      	bne.n	8008b6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d006      	beq.n	8008b38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d119      	bne.n	8008b6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0220 	bic.w	r2, r2, #32
 8008b46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	f043 0201 	orr.w	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f7ff fd7b 	bl	8008668 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008b72:	e00e      	b.n	8008b92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff fd85 	bl	8008690 <HAL_ADC_ErrorCallback>
}
 8008b86:	e004      	b.n	8008b92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
}
 8008b92:	bf00      	nop
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fd67 	bl	800867c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2240      	movs	r2, #64	; 0x40
 8008bc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bce:	f043 0204 	orr.w	r2, r3, #4
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff fd5a 	bl	8008690 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bf4:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <__NVIC_SetPriorityGrouping+0x44>)
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c00:	4013      	ands	r3, r2
 8008c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c16:	4a04      	ldr	r2, [pc, #16]	; (8008c28 <__NVIC_SetPriorityGrouping+0x44>)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	60d3      	str	r3, [r2, #12]
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	e000ed00 	.word	0xe000ed00

08008c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <__NVIC_GetPriorityGrouping+0x18>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	0a1b      	lsrs	r3, r3, #8
 8008c36:	f003 0307 	and.w	r3, r3, #7
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	e000ed00 	.word	0xe000ed00

08008c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	4603      	mov	r3, r0
 8008c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	db0b      	blt.n	8008c72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c5a:	79fb      	ldrb	r3, [r7, #7]
 8008c5c:	f003 021f 	and.w	r2, r3, #31
 8008c60:	4907      	ldr	r1, [pc, #28]	; (8008c80 <__NVIC_EnableIRQ+0x38>)
 8008c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c66:	095b      	lsrs	r3, r3, #5
 8008c68:	2001      	movs	r0, #1
 8008c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8008c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	e000e100 	.word	0xe000e100

08008c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	6039      	str	r1, [r7, #0]
 8008c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	db0a      	blt.n	8008cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	490c      	ldr	r1, [pc, #48]	; (8008cd0 <__NVIC_SetPriority+0x4c>)
 8008c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ca2:	0112      	lsls	r2, r2, #4
 8008ca4:	b2d2      	uxtb	r2, r2
 8008ca6:	440b      	add	r3, r1
 8008ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008cac:	e00a      	b.n	8008cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	4908      	ldr	r1, [pc, #32]	; (8008cd4 <__NVIC_SetPriority+0x50>)
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	3b04      	subs	r3, #4
 8008cbc:	0112      	lsls	r2, r2, #4
 8008cbe:	b2d2      	uxtb	r2, r2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	761a      	strb	r2, [r3, #24]
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	e000e100 	.word	0xe000e100
 8008cd4:	e000ed00 	.word	0xe000ed00

08008cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b089      	sub	sp, #36	; 0x24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	f1c3 0307 	rsb	r3, r3, #7
 8008cf2:	2b04      	cmp	r3, #4
 8008cf4:	bf28      	it	cs
 8008cf6:	2304      	movcs	r3, #4
 8008cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	3304      	adds	r3, #4
 8008cfe:	2b06      	cmp	r3, #6
 8008d00:	d902      	bls.n	8008d08 <NVIC_EncodePriority+0x30>
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	3b03      	subs	r3, #3
 8008d06:	e000      	b.n	8008d0a <NVIC_EncodePriority+0x32>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	fa02 f303 	lsl.w	r3, r2, r3
 8008d16:	43da      	mvns	r2, r3
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	401a      	ands	r2, r3
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d20:	f04f 31ff 	mov.w	r1, #4294967295
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	fa01 f303 	lsl.w	r3, r1, r3
 8008d2a:	43d9      	mvns	r1, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d30:	4313      	orrs	r3, r2
         );
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3724      	adds	r7, #36	; 0x24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
	...

08008d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d50:	d301      	bcc.n	8008d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d52:	2301      	movs	r3, #1
 8008d54:	e00f      	b.n	8008d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d56:	4a0a      	ldr	r2, [pc, #40]	; (8008d80 <SysTick_Config+0x40>)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d5e:	210f      	movs	r1, #15
 8008d60:	f04f 30ff 	mov.w	r0, #4294967295
 8008d64:	f7ff ff8e 	bl	8008c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <SysTick_Config+0x40>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d6e:	4b04      	ldr	r3, [pc, #16]	; (8008d80 <SysTick_Config+0x40>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	e000e010 	.word	0xe000e010

08008d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f7ff ff29 	bl	8008be4 <__NVIC_SetPriorityGrouping>
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b086      	sub	sp, #24
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	4603      	mov	r3, r0
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
 8008da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008dac:	f7ff ff3e 	bl	8008c2c <__NVIC_GetPriorityGrouping>
 8008db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	6978      	ldr	r0, [r7, #20]
 8008db8:	f7ff ff8e 	bl	8008cd8 <NVIC_EncodePriority>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff ff5d 	bl	8008c84 <__NVIC_SetPriority>
}
 8008dca:	bf00      	nop
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	4603      	mov	r3, r0
 8008dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7ff ff31 	bl	8008c48 <__NVIC_EnableIRQ>
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f7ff ffa2 	bl	8008d40 <SysTick_Config>
 8008dfc:	4603      	mov	r3, r0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008e14:	f7ff fac4 	bl	80083a0 <HAL_GetTick>
 8008e18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e099      	b.n	8008f58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e44:	e00f      	b.n	8008e66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e46:	f7ff faab 	bl	80083a0 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	2b05      	cmp	r3, #5
 8008e52:	d908      	bls.n	8008e66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e078      	b.n	8008f58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e8      	bne.n	8008e46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4b38      	ldr	r3, [pc, #224]	; (8008f60 <HAL_DMA_Init+0x158>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d107      	bne.n	8008ed0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f023 0307 	bic.w	r3, r3, #7
 8008ee6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d117      	bne.n	8008f2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00e      	beq.n	8008f2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 faab 	bl	8009468 <DMA_CheckFifoParam>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d008      	beq.n	8008f2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2240      	movs	r2, #64	; 0x40
 8008f1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008f26:	2301      	movs	r3, #1
 8008f28:	e016      	b.n	8008f58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa62 	bl	80093fc <DMA_CalcBaseAndBitshift>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f40:	223f      	movs	r2, #63	; 0x3f
 8008f42:	409a      	lsls	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	f010803f 	.word	0xf010803f

08008f64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_DMA_Start_IT+0x26>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e040      	b.n	800900c <HAL_DMA_Start_IT+0xa8>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d12f      	bne.n	8008ffe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 f9f4 	bl	80093a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fbc:	223f      	movs	r2, #63	; 0x3f
 8008fbe:	409a      	lsls	r2, r3
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f042 0216 	orr.w	r2, r2, #22
 8008fd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d007      	beq.n	8008fec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0208 	orr.w	r2, r2, #8
 8008fea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0201 	orr.w	r2, r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e005      	b.n	800900a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009006:	2302      	movs	r3, #2
 8009008:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800900a:	7dfb      	ldrb	r3, [r7, #23]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009022:	b2db      	uxtb	r3, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d004      	beq.n	8009032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2280      	movs	r2, #128	; 0x80
 800902c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e00c      	b.n	800904c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2205      	movs	r2, #5
 8009036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f022 0201 	bic.w	r2, r2, #1
 8009048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009064:	4b92      	ldr	r3, [pc, #584]	; (80092b0 <HAL_DMA_IRQHandler+0x258>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a92      	ldr	r2, [pc, #584]	; (80092b4 <HAL_DMA_IRQHandler+0x25c>)
 800906a:	fba2 2303 	umull	r2, r3, r2, r3
 800906e:	0a9b      	lsrs	r3, r3, #10
 8009070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009082:	2208      	movs	r2, #8
 8009084:	409a      	lsls	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4013      	ands	r3, r2
 800908a:	2b00      	cmp	r3, #0
 800908c:	d01a      	beq.n	80090c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d013      	beq.n	80090c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0204 	bic.w	r2, r2, #4
 80090aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b0:	2208      	movs	r2, #8
 80090b2:	409a      	lsls	r2, r3
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090bc:	f043 0201 	orr.w	r2, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c8:	2201      	movs	r2, #1
 80090ca:	409a      	lsls	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4013      	ands	r3, r2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d012      	beq.n	80090fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090e6:	2201      	movs	r2, #1
 80090e8:	409a      	lsls	r2, r3
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f2:	f043 0202 	orr.w	r2, r3, #2
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090fe:	2204      	movs	r2, #4
 8009100:	409a      	lsls	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4013      	ands	r3, r2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d012      	beq.n	8009130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0302 	and.w	r3, r3, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00b      	beq.n	8009130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800911c:	2204      	movs	r2, #4
 800911e:	409a      	lsls	r2, r3
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009128:	f043 0204 	orr.w	r2, r3, #4
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009134:	2210      	movs	r2, #16
 8009136:	409a      	lsls	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4013      	ands	r3, r2
 800913c:	2b00      	cmp	r3, #0
 800913e:	d043      	beq.n	80091c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b00      	cmp	r3, #0
 800914c:	d03c      	beq.n	80091c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009152:	2210      	movs	r2, #16
 8009154:	409a      	lsls	r2, r3
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009164:	2b00      	cmp	r3, #0
 8009166:	d018      	beq.n	800919a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d108      	bne.n	8009188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d024      	beq.n	80091c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	4798      	blx	r3
 8009186:	e01f      	b.n	80091c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01b      	beq.n	80091c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	4798      	blx	r3
 8009198:	e016      	b.n	80091c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d107      	bne.n	80091b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0208 	bic.w	r2, r2, #8
 80091b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091cc:	2220      	movs	r2, #32
 80091ce:	409a      	lsls	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 808e 	beq.w	80092f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 8086 	beq.w	80092f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091ee:	2220      	movs	r2, #32
 80091f0:	409a      	lsls	r2, r3
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b05      	cmp	r3, #5
 8009200:	d136      	bne.n	8009270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0216 	bic.w	r2, r2, #22
 8009210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	695a      	ldr	r2, [r3, #20]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d103      	bne.n	8009232 <HAL_DMA_IRQHandler+0x1da>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800922e:	2b00      	cmp	r3, #0
 8009230:	d007      	beq.n	8009242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0208 	bic.w	r2, r2, #8
 8009240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009246:	223f      	movs	r2, #63	; 0x3f
 8009248:	409a      	lsls	r2, r3
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009262:	2b00      	cmp	r3, #0
 8009264:	d07d      	beq.n	8009362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
        }
        return;
 800926e:	e078      	b.n	8009362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d01c      	beq.n	80092b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d108      	bne.n	800929e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009290:	2b00      	cmp	r3, #0
 8009292:	d030      	beq.n	80092f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	4798      	blx	r3
 800929c:	e02b      	b.n	80092f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d027      	beq.n	80092f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	4798      	blx	r3
 80092ae:	e022      	b.n	80092f6 <HAL_DMA_IRQHandler+0x29e>
 80092b0:	20001c90 	.word	0x20001c90
 80092b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10f      	bne.n	80092e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0210 	bic.w	r2, r2, #16
 80092d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d032      	beq.n	8009364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d022      	beq.n	8009350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2205      	movs	r2, #5
 800930e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f022 0201 	bic.w	r2, r2, #1
 8009320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	3301      	adds	r3, #1
 8009326:	60bb      	str	r3, [r7, #8]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	429a      	cmp	r2, r3
 800932c:	d307      	bcc.n	800933e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1f2      	bne.n	8009322 <HAL_DMA_IRQHandler+0x2ca>
 800933c:	e000      	b.n	8009340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800933e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3
 8009360:	e000      	b.n	8009364 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009362:	bf00      	nop
    }
  }
}
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop

0800936c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800937a:	b2db      	uxtb	r3, r3
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	607a      	str	r2, [r7, #4]
 80093ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80093bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	683a      	ldr	r2, [r7, #0]
 80093c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2b40      	cmp	r3, #64	; 0x40
 80093cc:	d108      	bne.n	80093e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80093de:	e007      	b.n	80093f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]
}
 80093f0:	bf00      	nop
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	3b10      	subs	r3, #16
 800940c:	4a14      	ldr	r2, [pc, #80]	; (8009460 <DMA_CalcBaseAndBitshift+0x64>)
 800940e:	fba2 2303 	umull	r2, r3, r2, r3
 8009412:	091b      	lsrs	r3, r3, #4
 8009414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009416:	4a13      	ldr	r2, [pc, #76]	; (8009464 <DMA_CalcBaseAndBitshift+0x68>)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b03      	cmp	r3, #3
 8009428:	d909      	bls.n	800943e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009432:	f023 0303 	bic.w	r3, r3, #3
 8009436:	1d1a      	adds	r2, r3, #4
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	659a      	str	r2, [r3, #88]	; 0x58
 800943c:	e007      	b.n	800944e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	aaaaaaab 	.word	0xaaaaaaab
 8009464:	08014670 	.word	0x08014670

08009468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d11f      	bne.n	80094c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	2b03      	cmp	r3, #3
 8009486:	d855      	bhi.n	8009534 <DMA_CheckFifoParam+0xcc>
 8009488:	a201      	add	r2, pc, #4	; (adr r2, 8009490 <DMA_CheckFifoParam+0x28>)
 800948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948e:	bf00      	nop
 8009490:	080094a1 	.word	0x080094a1
 8009494:	080094b3 	.word	0x080094b3
 8009498:	080094a1 	.word	0x080094a1
 800949c:	08009535 	.word	0x08009535
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d045      	beq.n	8009538 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094b0:	e042      	b.n	8009538 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80094ba:	d13f      	bne.n	800953c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094c0:	e03c      	b.n	800953c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ca:	d121      	bne.n	8009510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d836      	bhi.n	8009540 <DMA_CheckFifoParam+0xd8>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <DMA_CheckFifoParam+0x70>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	080094e9 	.word	0x080094e9
 80094dc:	080094ef 	.word	0x080094ef
 80094e0:	080094e9 	.word	0x080094e9
 80094e4:	08009501 	.word	0x08009501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	73fb      	strb	r3, [r7, #15]
      break;
 80094ec:	e02f      	b.n	800954e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d024      	beq.n	8009544 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094fe:	e021      	b.n	8009544 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009508:	d11e      	bne.n	8009548 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800950e:	e01b      	b.n	8009548 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d902      	bls.n	800951c <DMA_CheckFifoParam+0xb4>
 8009516:	2b03      	cmp	r3, #3
 8009518:	d003      	beq.n	8009522 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800951a:	e018      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
      break;
 8009520:	e015      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00e      	beq.n	800954c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	73fb      	strb	r3, [r7, #15]
      break;
 8009532:	e00b      	b.n	800954c <DMA_CheckFifoParam+0xe4>
      break;
 8009534:	bf00      	nop
 8009536:	e00a      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      break;
 8009538:	bf00      	nop
 800953a:	e008      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      break;
 800953c:	bf00      	nop
 800953e:	e006      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      break;
 8009540:	bf00      	nop
 8009542:	e004      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      break;
 8009544:	bf00      	nop
 8009546:	e002      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      break;   
 8009548:	bf00      	nop
 800954a:	e000      	b.n	800954e <DMA_CheckFifoParam+0xe6>
      break;
 800954c:	bf00      	nop
    }
  } 
  
  return status; 
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800955c:	b480      	push	{r7}
 800955e:	b089      	sub	sp, #36	; 0x24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800956a:	2300      	movs	r3, #0
 800956c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800956e:	2300      	movs	r3, #0
 8009570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009572:	2300      	movs	r3, #0
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	e16b      	b.n	8009850 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009578:	2201      	movs	r2, #1
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	fa02 f303 	lsl.w	r3, r2, r3
 8009580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	4013      	ands	r3, r2
 800958a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	429a      	cmp	r2, r3
 8009592:	f040 815a 	bne.w	800984a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d00b      	beq.n	80095b6 <HAL_GPIO_Init+0x5a>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d007      	beq.n	80095b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80095aa:	2b11      	cmp	r3, #17
 80095ac:	d003      	beq.n	80095b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	2b12      	cmp	r3, #18
 80095b4:	d130      	bne.n	8009618 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	2203      	movs	r2, #3
 80095c2:	fa02 f303 	lsl.w	r3, r2, r3
 80095c6:	43db      	mvns	r3, r3
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	4013      	ands	r3, r2
 80095cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	fa02 f303 	lsl.w	r3, r2, r3
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	4313      	orrs	r3, r2
 80095de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095ec:	2201      	movs	r2, #1
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	fa02 f303 	lsl.w	r3, r2, r3
 80095f4:	43db      	mvns	r3, r3
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	4013      	ands	r3, r2
 80095fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	f003 0201 	and.w	r2, r3, #1
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	fa02 f303 	lsl.w	r3, r2, r3
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4313      	orrs	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	2203      	movs	r2, #3
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	43db      	mvns	r3, r3
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	4013      	ands	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	689a      	ldr	r2, [r3, #8]
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	fa02 f303 	lsl.w	r3, r2, r3
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	4313      	orrs	r3, r2
 8009640:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b02      	cmp	r3, #2
 800964e:	d003      	beq.n	8009658 <HAL_GPIO_Init+0xfc>
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	2b12      	cmp	r3, #18
 8009656:	d123      	bne.n	80096a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	08da      	lsrs	r2, r3, #3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3208      	adds	r2, #8
 8009660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	220f      	movs	r2, #15
 8009670:	fa02 f303 	lsl.w	r3, r2, r3
 8009674:	43db      	mvns	r3, r3
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	4013      	ands	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	691a      	ldr	r2, [r3, #16]
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	fa02 f303 	lsl.w	r3, r2, r3
 800968c:	69ba      	ldr	r2, [r7, #24]
 800968e:	4313      	orrs	r3, r2
 8009690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	08da      	lsrs	r2, r3, #3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	3208      	adds	r2, #8
 800969a:	69b9      	ldr	r1, [r7, #24]
 800969c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	2203      	movs	r2, #3
 80096ac:	fa02 f303 	lsl.w	r3, r2, r3
 80096b0:	43db      	mvns	r3, r3
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	4013      	ands	r3, r2
 80096b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	f003 0203 	and.w	r2, r3, #3
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	fa02 f303 	lsl.w	r3, r2, r3
 80096c8:	69ba      	ldr	r2, [r7, #24]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80b4 	beq.w	800984a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	4b5f      	ldr	r3, [pc, #380]	; (8009864 <HAL_GPIO_Init+0x308>)
 80096e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ea:	4a5e      	ldr	r2, [pc, #376]	; (8009864 <HAL_GPIO_Init+0x308>)
 80096ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096f0:	6453      	str	r3, [r2, #68]	; 0x44
 80096f2:	4b5c      	ldr	r3, [pc, #368]	; (8009864 <HAL_GPIO_Init+0x308>)
 80096f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096fa:	60fb      	str	r3, [r7, #12]
 80096fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096fe:	4a5a      	ldr	r2, [pc, #360]	; (8009868 <HAL_GPIO_Init+0x30c>)
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	089b      	lsrs	r3, r3, #2
 8009704:	3302      	adds	r3, #2
 8009706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800970a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	f003 0303 	and.w	r3, r3, #3
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	220f      	movs	r2, #15
 8009716:	fa02 f303 	lsl.w	r3, r2, r3
 800971a:	43db      	mvns	r3, r3
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	4013      	ands	r3, r2
 8009720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a51      	ldr	r2, [pc, #324]	; (800986c <HAL_GPIO_Init+0x310>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d02b      	beq.n	8009782 <HAL_GPIO_Init+0x226>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a50      	ldr	r2, [pc, #320]	; (8009870 <HAL_GPIO_Init+0x314>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d025      	beq.n	800977e <HAL_GPIO_Init+0x222>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a4f      	ldr	r2, [pc, #316]	; (8009874 <HAL_GPIO_Init+0x318>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d01f      	beq.n	800977a <HAL_GPIO_Init+0x21e>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a4e      	ldr	r2, [pc, #312]	; (8009878 <HAL_GPIO_Init+0x31c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d019      	beq.n	8009776 <HAL_GPIO_Init+0x21a>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a4d      	ldr	r2, [pc, #308]	; (800987c <HAL_GPIO_Init+0x320>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <HAL_GPIO_Init+0x216>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a4c      	ldr	r2, [pc, #304]	; (8009880 <HAL_GPIO_Init+0x324>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d00d      	beq.n	800976e <HAL_GPIO_Init+0x212>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a4b      	ldr	r2, [pc, #300]	; (8009884 <HAL_GPIO_Init+0x328>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d007      	beq.n	800976a <HAL_GPIO_Init+0x20e>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a4a      	ldr	r2, [pc, #296]	; (8009888 <HAL_GPIO_Init+0x32c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d101      	bne.n	8009766 <HAL_GPIO_Init+0x20a>
 8009762:	2307      	movs	r3, #7
 8009764:	e00e      	b.n	8009784 <HAL_GPIO_Init+0x228>
 8009766:	2308      	movs	r3, #8
 8009768:	e00c      	b.n	8009784 <HAL_GPIO_Init+0x228>
 800976a:	2306      	movs	r3, #6
 800976c:	e00a      	b.n	8009784 <HAL_GPIO_Init+0x228>
 800976e:	2305      	movs	r3, #5
 8009770:	e008      	b.n	8009784 <HAL_GPIO_Init+0x228>
 8009772:	2304      	movs	r3, #4
 8009774:	e006      	b.n	8009784 <HAL_GPIO_Init+0x228>
 8009776:	2303      	movs	r3, #3
 8009778:	e004      	b.n	8009784 <HAL_GPIO_Init+0x228>
 800977a:	2302      	movs	r3, #2
 800977c:	e002      	b.n	8009784 <HAL_GPIO_Init+0x228>
 800977e:	2301      	movs	r3, #1
 8009780:	e000      	b.n	8009784 <HAL_GPIO_Init+0x228>
 8009782:	2300      	movs	r3, #0
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	f002 0203 	and.w	r2, r2, #3
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	4093      	lsls	r3, r2
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	4313      	orrs	r3, r2
 8009792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009794:	4934      	ldr	r1, [pc, #208]	; (8009868 <HAL_GPIO_Init+0x30c>)
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	089b      	lsrs	r3, r3, #2
 800979a:	3302      	adds	r3, #2
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80097a2:	4b3a      	ldr	r3, [pc, #232]	; (800988c <HAL_GPIO_Init+0x330>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	43db      	mvns	r3, r3
 80097ac:	69ba      	ldr	r2, [r7, #24]
 80097ae:	4013      	ands	r3, r2
 80097b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80097c6:	4a31      	ldr	r2, [pc, #196]	; (800988c <HAL_GPIO_Init+0x330>)
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80097cc:	4b2f      	ldr	r3, [pc, #188]	; (800988c <HAL_GPIO_Init+0x330>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	43db      	mvns	r3, r3
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	4013      	ands	r3, r2
 80097da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80097f0:	4a26      	ldr	r2, [pc, #152]	; (800988c <HAL_GPIO_Init+0x330>)
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80097f6:	4b25      	ldr	r3, [pc, #148]	; (800988c <HAL_GPIO_Init+0x330>)
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	43db      	mvns	r3, r3
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	4013      	ands	r3, r2
 8009804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800981a:	4a1c      	ldr	r2, [pc, #112]	; (800988c <HAL_GPIO_Init+0x330>)
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009820:	4b1a      	ldr	r3, [pc, #104]	; (800988c <HAL_GPIO_Init+0x330>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	43db      	mvns	r3, r3
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	4013      	ands	r3, r2
 800982e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	4313      	orrs	r3, r2
 8009842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009844:	4a11      	ldr	r2, [pc, #68]	; (800988c <HAL_GPIO_Init+0x330>)
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	3301      	adds	r3, #1
 800984e:	61fb      	str	r3, [r7, #28]
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	2b0f      	cmp	r3, #15
 8009854:	f67f ae90 	bls.w	8009578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009858:	bf00      	nop
 800985a:	3724      	adds	r7, #36	; 0x24
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr
 8009864:	40023800 	.word	0x40023800
 8009868:	40013800 	.word	0x40013800
 800986c:	40020000 	.word	0x40020000
 8009870:	40020400 	.word	0x40020400
 8009874:	40020800 	.word	0x40020800
 8009878:	40020c00 	.word	0x40020c00
 800987c:	40021000 	.word	0x40021000
 8009880:	40021400 	.word	0x40021400
 8009884:	40021800 	.word	0x40021800
 8009888:	40021c00 	.word	0x40021c00
 800988c:	40013c00 	.word	0x40013c00

08009890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	807b      	strh	r3, [r7, #2]
 800989c:	4613      	mov	r3, r2
 800989e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80098a0:	787b      	ldrb	r3, [r7, #1]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80098ac:	e003      	b.n	80098b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	041a      	lsls	r2, r3, #16
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	619a      	str	r2, [r3, #24]
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
	...

080098c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e11f      	b.n	8009b16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7fd f9de 	bl	8006cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2224      	movs	r2, #36	; 0x24
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009916:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009926:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009928:	f003 fb36 	bl	800cf98 <HAL_RCC_GetPCLK1Freq>
 800992c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	4a7b      	ldr	r2, [pc, #492]	; (8009b20 <HAL_I2C_Init+0x25c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d807      	bhi.n	8009948 <HAL_I2C_Init+0x84>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4a7a      	ldr	r2, [pc, #488]	; (8009b24 <HAL_I2C_Init+0x260>)
 800993c:	4293      	cmp	r3, r2
 800993e:	bf94      	ite	ls
 8009940:	2301      	movls	r3, #1
 8009942:	2300      	movhi	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	e006      	b.n	8009956 <HAL_I2C_Init+0x92>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4a77      	ldr	r2, [pc, #476]	; (8009b28 <HAL_I2C_Init+0x264>)
 800994c:	4293      	cmp	r3, r2
 800994e:	bf94      	ite	ls
 8009950:	2301      	movls	r3, #1
 8009952:	2300      	movhi	r3, #0
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e0db      	b.n	8009b16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	4a72      	ldr	r2, [pc, #456]	; (8009b2c <HAL_I2C_Init+0x268>)
 8009962:	fba2 2303 	umull	r2, r3, r2, r3
 8009966:	0c9b      	lsrs	r3, r3, #18
 8009968:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	430a      	orrs	r2, r1
 800997c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	4a64      	ldr	r2, [pc, #400]	; (8009b20 <HAL_I2C_Init+0x25c>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d802      	bhi.n	8009998 <HAL_I2C_Init+0xd4>
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	3301      	adds	r3, #1
 8009996:	e009      	b.n	80099ac <HAL_I2C_Init+0xe8>
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800999e:	fb02 f303 	mul.w	r3, r2, r3
 80099a2:	4a63      	ldr	r2, [pc, #396]	; (8009b30 <HAL_I2C_Init+0x26c>)
 80099a4:	fba2 2303 	umull	r2, r3, r2, r3
 80099a8:	099b      	lsrs	r3, r3, #6
 80099aa:	3301      	adds	r3, #1
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	6812      	ldr	r2, [r2, #0]
 80099b0:	430b      	orrs	r3, r1
 80099b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80099be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	4956      	ldr	r1, [pc, #344]	; (8009b20 <HAL_I2C_Init+0x25c>)
 80099c8:	428b      	cmp	r3, r1
 80099ca:	d80d      	bhi.n	80099e8 <HAL_I2C_Init+0x124>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	1e59      	subs	r1, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80099da:	3301      	adds	r3, #1
 80099dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	bf38      	it	cc
 80099e4:	2304      	movcc	r3, #4
 80099e6:	e04f      	b.n	8009a88 <HAL_I2C_Init+0x1c4>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d111      	bne.n	8009a14 <HAL_I2C_Init+0x150>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	1e58      	subs	r0, r3, #1
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6859      	ldr	r1, [r3, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	440b      	add	r3, r1
 80099fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a02:	3301      	adds	r3, #1
 8009a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	bf0c      	ite	eq
 8009a0c:	2301      	moveq	r3, #1
 8009a0e:	2300      	movne	r3, #0
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	e012      	b.n	8009a3a <HAL_I2C_Init+0x176>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	1e58      	subs	r0, r3, #1
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6859      	ldr	r1, [r3, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	440b      	add	r3, r1
 8009a22:	0099      	lsls	r1, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	bf0c      	ite	eq
 8009a34:	2301      	moveq	r3, #1
 8009a36:	2300      	movne	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <HAL_I2C_Init+0x17e>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e022      	b.n	8009a88 <HAL_I2C_Init+0x1c4>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10e      	bne.n	8009a68 <HAL_I2C_Init+0x1a4>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	1e58      	subs	r0, r3, #1
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6859      	ldr	r1, [r3, #4]
 8009a52:	460b      	mov	r3, r1
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	440b      	add	r3, r1
 8009a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a66:	e00f      	b.n	8009a88 <HAL_I2C_Init+0x1c4>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	1e58      	subs	r0, r3, #1
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6859      	ldr	r1, [r3, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	0099      	lsls	r1, r3, #2
 8009a78:	440b      	add	r3, r1
 8009a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a7e:	3301      	adds	r3, #1
 8009a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	6809      	ldr	r1, [r1, #0]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	69da      	ldr	r2, [r3, #28]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6911      	ldr	r1, [r2, #16]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	68d2      	ldr	r2, [r2, #12]
 8009ac2:	4311      	orrs	r1, r2
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6812      	ldr	r2, [r2, #0]
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	695a      	ldr	r2, [r3, #20]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f042 0201 	orr.w	r2, r2, #1
 8009af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	000186a0 	.word	0x000186a0
 8009b24:	001e847f 	.word	0x001e847f
 8009b28:	003d08ff 	.word	0x003d08ff
 8009b2c:	431bde83 	.word	0x431bde83
 8009b30:	10624dd3 	.word	0x10624dd3

08009b34 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	607a      	str	r2, [r7, #4]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	460b      	mov	r3, r1
 8009b42:	817b      	strh	r3, [r7, #10]
 8009b44:	4613      	mov	r3, r2
 8009b46:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b20      	cmp	r3, #32
 8009b56:	f040 80f4 	bne.w	8009d42 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b5a:	4b7c      	ldr	r3, [pc, #496]	; (8009d4c <HAL_I2C_Master_Transmit_DMA+0x218>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	08db      	lsrs	r3, r3, #3
 8009b60:	4a7b      	ldr	r2, [pc, #492]	; (8009d50 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8009b62:	fba2 2303 	umull	r2, r3, r2, r3
 8009b66:	0a1a      	lsrs	r2, r3, #8
 8009b68:	4613      	mov	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	009a      	lsls	r2, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d116      	bne.n	8009bae <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2220      	movs	r2, #32
 8009b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f043 0220 	orr.w	r2, r3, #32
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e0ca      	b.n	8009d44 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d0db      	beq.n	8009b74 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_I2C_Master_Transmit_DMA+0x96>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e0bc      	b.n	8009d44 <HAL_I2C_Master_Transmit_DMA+0x210>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d007      	beq.n	8009bf0 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f042 0201 	orr.w	r2, r2, #1
 8009bee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009bfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2221      	movs	r2, #33	; 0x21
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2210      	movs	r2, #16
 8009c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	893a      	ldrh	r2, [r7, #8]
 8009c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4a49      	ldr	r2, [pc, #292]	; (8009d54 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8009c30:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8009c32:	897a      	ldrh	r2, [r7, #10]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d062      	beq.n	8009d06 <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c44:	4a44      	ldr	r2, [pc, #272]	; (8009d58 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8009c46:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c4c:	4a43      	ldr	r2, [pc, #268]	; (8009d5c <HAL_I2C_Master_Transmit_DMA+0x228>)
 8009c4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c54:	2200      	movs	r2, #0
 8009c56:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c64:	2200      	movs	r2, #0
 8009c66:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	4619      	mov	r1, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3310      	adds	r3, #16
 8009c80:	461a      	mov	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c86:	f7ff f96d 	bl	8008f64 <HAL_DMA_Start_IT>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d124      	bne.n	8009cde <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ca2:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cb2:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009cca:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	e02f      	b.n	8009d3e <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	f043 0210 	orr.w	r2, r3, #16
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e01e      	b.n	8009d44 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d14:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d24:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8009d3c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e000      	b.n	8009d44 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8009d42:	2302      	movs	r3, #2
  }
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	20001c90 	.word	0x20001c90
 8009d50:	14f8b589 	.word	0x14f8b589
 8009d54:	ffff0000 	.word	0xffff0000
 8009d58:	0800c029 	.word	0x0800c029
 8009d5c:	0800c1d3 	.word	0x0800c1d3

08009d60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08c      	sub	sp, #48	; 0x30
 8009d64:	af02      	add	r7, sp, #8
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4603      	mov	r3, r0
 8009d70:	817b      	strh	r3, [r7, #10]
 8009d72:	460b      	mov	r3, r1
 8009d74:	813b      	strh	r3, [r7, #8]
 8009d76:	4613      	mov	r3, r2
 8009d78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d7a:	f7fe fb11 	bl	80083a0 <HAL_GetTick>
 8009d7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	f040 8208 	bne.w	800a19e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	9300      	str	r3, [sp, #0]
 8009d92:	2319      	movs	r3, #25
 8009d94:	2201      	movs	r2, #1
 8009d96:	497b      	ldr	r1, [pc, #492]	; (8009f84 <HAL_I2C_Mem_Read+0x224>)
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f002 faff 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009da4:	2302      	movs	r3, #2
 8009da6:	e1fb      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <HAL_I2C_Mem_Read+0x56>
 8009db2:	2302      	movs	r3, #2
 8009db4:	e1f4      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d007      	beq.n	8009ddc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f042 0201 	orr.w	r2, r2, #1
 8009dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2222      	movs	r2, #34	; 0x22
 8009df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2240      	movs	r2, #64	; 0x40
 8009df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4a5b      	ldr	r2, [pc, #364]	; (8009f88 <HAL_I2C_Mem_Read+0x228>)
 8009e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e1e:	88f8      	ldrh	r0, [r7, #6]
 8009e20:	893a      	ldrh	r2, [r7, #8]
 8009e22:	8979      	ldrh	r1, [r7, #10]
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	9301      	str	r3, [sp, #4]
 8009e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f002 f812 	bl	800be58 <I2C_RequestMemoryRead>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d001      	beq.n	8009e3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e1b0      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d113      	bne.n	8009e6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e46:	2300      	movs	r3, #0
 8009e48:	623b      	str	r3, [r7, #32]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	623b      	str	r3, [r7, #32]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	623b      	str	r3, [r7, #32]
 8009e5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	e184      	b.n	800a178 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d11b      	bne.n	8009eae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e86:	2300      	movs	r3, #0
 8009e88:	61fb      	str	r3, [r7, #28]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	61fb      	str	r3, [r7, #28]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	61fb      	str	r3, [r7, #28]
 8009e9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	e164      	b.n	800a178 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d11b      	bne.n	8009eee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ec4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ed4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61bb      	str	r3, [r7, #24]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	61bb      	str	r3, [r7, #24]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	699b      	ldr	r3, [r3, #24]
 8009ee8:	61bb      	str	r3, [r7, #24]
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	e144      	b.n	800a178 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009eee:	2300      	movs	r3, #0
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009f04:	e138      	b.n	800a178 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	f200 80f1 	bhi.w	800a0f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d123      	bne.n	8009f60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f002 fb87 	bl	800c630 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e139      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	3b01      	subs	r3, #1
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f5e:	e10b      	b.n	800a178 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	d14e      	bne.n	800a006 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6e:	2200      	movs	r2, #0
 8009f70:	4906      	ldr	r1, [pc, #24]	; (8009f8c <HAL_I2C_Mem_Read+0x22c>)
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f002 fa12 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d008      	beq.n	8009f90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e10e      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
 8009f82:	bf00      	nop
 8009f84:	00100002 	.word	0x00100002
 8009f88:	ffff0000 	.word	0xffff0000
 8009f8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	b2d2      	uxtb	r2, r2
 8009fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	691a      	ldr	r2, [r3, #16]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	b2d2      	uxtb	r2, r2
 8009fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe4:	1c5a      	adds	r2, r3, #1
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a004:	e0b8      	b.n	800a178 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00c:	2200      	movs	r2, #0
 800a00e:	4966      	ldr	r1, [pc, #408]	; (800a1a8 <HAL_I2C_Mem_Read+0x448>)
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f002 f9c3 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	e0bf      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a02e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	691a      	ldr	r2, [r3, #16]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	b2d2      	uxtb	r2, r2
 800a03c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a04c:	3b01      	subs	r3, #1
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	9300      	str	r3, [sp, #0]
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	2200      	movs	r2, #0
 800a06a:	494f      	ldr	r1, [pc, #316]	; (800a1a8 <HAL_I2C_Mem_Read+0x448>)
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f002 f995 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	e091      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a08a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	691a      	ldr	r2, [r3, #16]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	1c5a      	adds	r2, r3, #1
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	b2d2      	uxtb	r2, r2
 800a0ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0f0:	e042      	b.n	800a178 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f002 fa9a 	bl	800c630 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e04c      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	691a      	ldr	r2, [r3, #16]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	b2d2      	uxtb	r2, r2
 800a112:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a122:	3b01      	subs	r3, #1
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a12e:	b29b      	uxth	r3, r3
 800a130:	3b01      	subs	r3, #1
 800a132:	b29a      	uxth	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	f003 0304 	and.w	r3, r3, #4
 800a142:	2b04      	cmp	r3, #4
 800a144:	d118      	bne.n	800a178 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	691a      	ldr	r2, [r3, #16]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	b2d2      	uxtb	r2, r2
 800a152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a162:	3b01      	subs	r3, #1
 800a164:	b29a      	uxth	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a16e:	b29b      	uxth	r3, r3
 800a170:	3b01      	subs	r3, #1
 800a172:	b29a      	uxth	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f47f aec2 	bne.w	8009f06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2220      	movs	r2, #32
 800a186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a19a:	2300      	movs	r3, #0
 800a19c:	e000      	b.n	800a1a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a19e:	2302      	movs	r3, #2
  }
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3728      	adds	r7, #40	; 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	00010004 	.word	0x00010004

0800a1ac <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	; 0x30
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	817b      	strh	r3, [r7, #10]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	813b      	strh	r3, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1c6:	f7fe f8eb 	bl	80083a0 <HAL_GetTick>
 800a1ca:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b20      	cmp	r3, #32
 800a1da:	f040 8154 	bne.w	800a486 <HAL_I2C_Mem_Read_DMA+0x2da>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a1de:	4b96      	ldr	r3, [pc, #600]	; (800a438 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	08db      	lsrs	r3, r3, #3
 800a1e4:	4a95      	ldr	r2, [pc, #596]	; (800a43c <HAL_I2C_Mem_Read_DMA+0x290>)
 800a1e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a1ea:	0a1a      	lsrs	r2, r3, #8
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009a      	lsls	r2, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d116      	bne.n	800a232 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	f043 0220 	orr.w	r2, r3, #32
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e12a      	b.n	800a488 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	f003 0302 	and.w	r3, r3, #2
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d0db      	beq.n	800a1f8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_I2C_Mem_Read_DMA+0xa2>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e11c      	b.n	800a488 <HAL_I2C_Mem_Read_DMA+0x2dc>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b01      	cmp	r3, #1
 800a262:	d007      	beq.n	800a274 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f042 0201 	orr.w	r2, r2, #1
 800a272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2222      	movs	r2, #34	; 0x22
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2240      	movs	r2, #64	; 0x40
 800a290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a29e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a2a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4a63      	ldr	r2, [pc, #396]	; (800a440 <HAL_I2C_Mem_Read_DMA+0x294>)
 800a2b4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 80ab 	beq.w	800a416 <HAL_I2C_Mem_Read_DMA+0x26a>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c4:	4a5f      	ldr	r2, [pc, #380]	; (800a444 <HAL_I2C_Mem_Read_DMA+0x298>)
 800a2c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2cc:	4a5e      	ldr	r2, [pc, #376]	; (800a448 <HAL_I2C_Mem_Read_DMA+0x29c>)
 800a2ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	2200      	movs	r2, #0
 800a2de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3310      	adds	r3, #16
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	461a      	mov	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a306:	f7fe fe2d 	bl	8008f64 <HAL_DMA_Start_IT>
 800a30a:	4603      	mov	r3, r0
 800a30c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 800a310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a314:	2b00      	cmp	r3, #0
 800a316:	d16a      	bne.n	800a3ee <HAL_I2C_Mem_Read_DMA+0x242>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a318:	88f8      	ldrh	r0, [r7, #6]
 800a31a:	893a      	ldrh	r2, [r7, #8]
 800a31c:	8979      	ldrh	r1, [r7, #10]
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	2323      	movs	r3, #35	; 0x23
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	4603      	mov	r3, r0
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f001 fd95 	bl	800be58 <I2C_RequestMemoryRead>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d027      	beq.n	800a384 <HAL_I2C_Mem_Read_DMA+0x1d8>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe fe6b 	bl	8009014 <HAL_DMA_Abort_IT>
 800a33e:	4603      	mov	r3, r0
 800a340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Clear directly Complete callback as no XferAbortCallback is used to finalize Abort treatment */
          if (hi2c->hdmarx != NULL)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <HAL_I2C_Mem_Read_DMA+0x1a8>
          {
            hi2c->hdmarx->XferCpltCallback = NULL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a350:	2200      	movs	r2, #0
 800a352:	63da      	str	r2, [r3, #60]	; 0x3c
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a362:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2200      	movs	r2, #0
 800a36e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0201 	bic.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e081      	b.n	800a488 <HAL_I2C_Mem_Read_DMA+0x2dc>
        }

        if (hi2c->XferSize == 1U)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d108      	bne.n	800a39e <HAL_I2C_Mem_Read_DMA+0x1f2>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	e007      	b.n	800a3ae <HAL_I2C_Mem_Read_DMA+0x202>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61bb      	str	r3, [r7, #24]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	695b      	ldr	r3, [r3, #20]
 800a3b8:	61bb      	str	r3, [r7, #24]
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	61bb      	str	r3, [r7, #24]
 800a3c2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3da:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ea:	605a      	str	r2, [r3, #4]
 800a3ec:	e049      	b.n	800a482 <HAL_I2C_Mem_Read_DMA+0x2d6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2220      	movs	r2, #32
 800a3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a402:	f043 0210 	orr.w	r2, r3, #16
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e038      	b.n	800a488 <HAL_I2C_Mem_Read_DMA+0x2dc>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a416:	88f8      	ldrh	r0, [r7, #6]
 800a418:	893a      	ldrh	r2, [r7, #8]
 800a41a:	8979      	ldrh	r1, [r7, #10]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	2323      	movs	r3, #35	; 0x23
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	4603      	mov	r3, r0
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f001 fd16 	bl	800be58 <I2C_RequestMemoryRead>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00c      	beq.n	800a44c <HAL_I2C_Mem_Read_DMA+0x2a0>
      {
        return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e028      	b.n	800a488 <HAL_I2C_Mem_Read_DMA+0x2dc>
 800a436:	bf00      	nop
 800a438:	20001c90 	.word	0x20001c90
 800a43c:	14f8b589 	.word	0x14f8b589
 800a440:	ffff0000 	.word	0xffff0000
 800a444:	0800c029 	.word	0x0800c029
 800a448:	0800c1d3 	.word	0x0800c1d3
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a44c:	2300      	movs	r3, #0
 800a44e:	617b      	str	r3, [r7, #20]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	617b      	str	r3, [r7, #20]
 800a460:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a470:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2220      	movs	r2, #32
 800a476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	e000      	b.n	800a488 <HAL_I2C_Mem_Read_DMA+0x2dc>
  }
  else
  {
    return HAL_BUSY;
 800a486:	2302      	movs	r3, #2
  }
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3728      	adds	r7, #40	; 0x28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	; 0x28
 800a494:	af02      	add	r7, sp, #8
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	607a      	str	r2, [r7, #4]
 800a49a:	603b      	str	r3, [r7, #0]
 800a49c:	460b      	mov	r3, r1
 800a49e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a4a0:	f7fd ff7e 	bl	80083a0 <HAL_GetTick>
 800a4a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b20      	cmp	r3, #32
 800a4b4:	f040 8111 	bne.w	800a6da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	2319      	movs	r3, #25
 800a4be:	2201      	movs	r2, #1
 800a4c0:	4988      	ldr	r1, [pc, #544]	; (800a6e4 <HAL_I2C_IsDeviceReady+0x254>)
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f001 ff6a 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	e104      	b.n	800a6dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d101      	bne.n	800a4e0 <HAL_I2C_IsDeviceReady+0x50>
 800a4dc:	2302      	movs	r3, #2
 800a4de:	e0fd      	b.n	800a6dc <HAL_I2C_IsDeviceReady+0x24c>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d007      	beq.n	800a506 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f042 0201 	orr.w	r2, r2, #1
 800a504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a514:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2224      	movs	r2, #36	; 0x24
 800a51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4a70      	ldr	r2, [pc, #448]	; (800a6e8 <HAL_I2C_IsDeviceReady+0x258>)
 800a528:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a538:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2200      	movs	r2, #0
 800a542:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f001 ff28 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00d      	beq.n	800a56e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a560:	d103      	bne.n	800a56a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a568:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e0b6      	b.n	800a6dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a56e:	897b      	ldrh	r3, [r7, #10]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	461a      	mov	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a57c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a57e:	f7fd ff0f 	bl	80083a0 <HAL_GetTick>
 800a582:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f003 0302 	and.w	r3, r3, #2
 800a58e:	2b02      	cmp	r3, #2
 800a590:	bf0c      	ite	eq
 800a592:	2301      	moveq	r3, #1
 800a594:	2300      	movne	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5a8:	bf0c      	ite	eq
 800a5aa:	2301      	moveq	r3, #1
 800a5ac:	2300      	movne	r3, #0
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a5b2:	e025      	b.n	800a600 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a5b4:	f7fd fef4 	bl	80083a0 <HAL_GetTick>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d302      	bcc.n	800a5ca <HAL_I2C_IsDeviceReady+0x13a>
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	22a0      	movs	r2, #160	; 0xa0
 800a5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	695b      	ldr	r3, [r3, #20]
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	bf0c      	ite	eq
 800a5e0:	2301      	moveq	r3, #1
 800a5e2:	2300      	movne	r3, #0
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f6:	bf0c      	ite	eq
 800a5f8:	2301      	moveq	r3, #1
 800a5fa:	2300      	movne	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2ba0      	cmp	r3, #160	; 0xa0
 800a60a:	d005      	beq.n	800a618 <HAL_I2C_IsDeviceReady+0x188>
 800a60c:	7dfb      	ldrb	r3, [r7, #23]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d102      	bne.n	800a618 <HAL_I2C_IsDeviceReady+0x188>
 800a612:	7dbb      	ldrb	r3, [r7, #22]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d0cd      	beq.n	800a5b4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2220      	movs	r2, #32
 800a61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	f003 0302 	and.w	r3, r3, #2
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d129      	bne.n	800a682 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a63c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a63e:	2300      	movs	r3, #0
 800a640:	613b      	str	r3, [r7, #16]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	613b      	str	r3, [r7, #16]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	613b      	str	r3, [r7, #16]
 800a652:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	2319      	movs	r3, #25
 800a65a:	2201      	movs	r2, #1
 800a65c:	4921      	ldr	r1, [pc, #132]	; (800a6e4 <HAL_I2C_IsDeviceReady+0x254>)
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f001 fe9c 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e036      	b.n	800a6dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2220      	movs	r2, #32
 800a672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	e02c      	b.n	800a6dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a690:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a69a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2319      	movs	r3, #25
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	490f      	ldr	r1, [pc, #60]	; (800a6e4 <HAL_I2C_IsDeviceReady+0x254>)
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f001 fe78 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e012      	b.n	800a6dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	f4ff af32 	bcc.w	800a52a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a6da:	2302      	movs	r3, #2
  }
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3720      	adds	r7, #32
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	00100002 	.word	0x00100002
 800a6e8:	ffff0000 	.word	0xffff0000

0800a6ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a70c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a714:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	2b10      	cmp	r3, #16
 800a71a:	d003      	beq.n	800a724 <HAL_I2C_EV_IRQHandler+0x38>
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	2b40      	cmp	r3, #64	; 0x40
 800a720:	f040 80bd 	bne.w	800a89e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	695b      	ldr	r3, [r3, #20]
 800a732:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10d      	bne.n	800a75a <HAL_I2C_EV_IRQHandler+0x6e>
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a744:	d003      	beq.n	800a74e <HAL_I2C_EV_IRQHandler+0x62>
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a74c:	d101      	bne.n	800a752 <HAL_I2C_EV_IRQHandler+0x66>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <HAL_I2C_EV_IRQHandler+0x68>
 800a752:	2300      	movs	r3, #0
 800a754:	2b01      	cmp	r3, #1
 800a756:	f000 812e 	beq.w	800a9b6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00c      	beq.n	800a77e <HAL_I2C_EV_IRQHandler+0x92>
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	0a5b      	lsrs	r3, r3, #9
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d006      	beq.n	800a77e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 ffe2 	bl	800c73a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fd58 	bl	800b22c <I2C_Master_SB>
 800a77c:	e08e      	b.n	800a89c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	08db      	lsrs	r3, r3, #3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b00      	cmp	r3, #0
 800a788:	d009      	beq.n	800a79e <HAL_I2C_EV_IRQHandler+0xb2>
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	0a5b      	lsrs	r3, r3, #9
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fdce 	bl	800b338 <I2C_Master_ADD10>
 800a79c:	e07e      	b.n	800a89c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	085b      	lsrs	r3, r3, #1
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d009      	beq.n	800a7be <HAL_I2C_EV_IRQHandler+0xd2>
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	0a5b      	lsrs	r3, r3, #9
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fde8 	bl	800b38c <I2C_Master_ADDR>
 800a7bc:	e06e      	b.n	800a89c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	089b      	lsrs	r3, r3, #2
 800a7c2:	f003 0301 	and.w	r3, r3, #1
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d037      	beq.n	800a83a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7d8:	f000 80ef 	beq.w	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	09db      	lsrs	r3, r3, #7
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00f      	beq.n	800a808 <HAL_I2C_EV_IRQHandler+0x11c>
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	0a9b      	lsrs	r3, r3, #10
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d009      	beq.n	800a808 <HAL_I2C_EV_IRQHandler+0x11c>
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	089b      	lsrs	r3, r3, #2
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d103      	bne.n	800a808 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f9e5 	bl	800abd0 <I2C_MasterTransmit_TXE>
 800a806:	e049      	b.n	800a89c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	089b      	lsrs	r3, r3, #2
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	f000 80d2 	beq.w	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	0a5b      	lsrs	r3, r3, #9
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 80cb 	beq.w	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	2b10      	cmp	r3, #16
 800a828:	d103      	bne.n	800a832 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fa6c 	bl	800ad08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a830:	e0c3      	b.n	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fad0 	bl	800add8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a838:	e0bf      	b.n	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a848:	f000 80b7 	beq.w	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	099b      	lsrs	r3, r3, #6
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00f      	beq.n	800a878 <HAL_I2C_EV_IRQHandler+0x18c>
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	0a9b      	lsrs	r3, r3, #10
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d009      	beq.n	800a878 <HAL_I2C_EV_IRQHandler+0x18c>
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	089b      	lsrs	r3, r3, #2
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d103      	bne.n	800a878 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fb40 	bl	800aef6 <I2C_MasterReceive_RXNE>
 800a876:	e011      	b.n	800a89c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	089b      	lsrs	r3, r3, #2
 800a87c:	f003 0301 	and.w	r3, r3, #1
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 809a 	beq.w	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	0a5b      	lsrs	r3, r3, #9
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 8093 	beq.w	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fbdf 	bl	800b058 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a89a:	e08e      	b.n	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
 800a89c:	e08d      	b.n	800a9ba <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	e007      	b.n	800a8c0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	085b      	lsrs	r3, r3, #1
 800a8c4:	f003 0301 	and.w	r3, r3, #1
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d012      	beq.n	800a8f2 <HAL_I2C_EV_IRQHandler+0x206>
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	0a5b      	lsrs	r3, r3, #9
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00c      	beq.n	800a8f2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d003      	beq.n	800a8e8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a8e8:	69b9      	ldr	r1, [r7, #24]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 ff9d 	bl	800b82a <I2C_Slave_ADDR>
 800a8f0:	e066      	b.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	091b      	lsrs	r3, r3, #4
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d009      	beq.n	800a912 <HAL_I2C_EV_IRQHandler+0x226>
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	0a5b      	lsrs	r3, r3, #9
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 ffd2 	bl	800b8b4 <I2C_Slave_STOPF>
 800a910:	e056      	b.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a912:	7bbb      	ldrb	r3, [r7, #14]
 800a914:	2b21      	cmp	r3, #33	; 0x21
 800a916:	d002      	beq.n	800a91e <HAL_I2C_EV_IRQHandler+0x232>
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	2b29      	cmp	r3, #41	; 0x29
 800a91c:	d125      	bne.n	800a96a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	09db      	lsrs	r3, r3, #7
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00f      	beq.n	800a94a <HAL_I2C_EV_IRQHandler+0x25e>
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	0a9b      	lsrs	r3, r3, #10
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d009      	beq.n	800a94a <HAL_I2C_EV_IRQHandler+0x25e>
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	089b      	lsrs	r3, r3, #2
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d103      	bne.n	800a94a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 feb3 	bl	800b6ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a948:	e039      	b.n	800a9be <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	089b      	lsrs	r3, r3, #2
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	2b00      	cmp	r3, #0
 800a954:	d033      	beq.n	800a9be <HAL_I2C_EV_IRQHandler+0x2d2>
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	0a5b      	lsrs	r3, r3, #9
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d02d      	beq.n	800a9be <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fee0 	bl	800b728 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a968:	e029      	b.n	800a9be <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	099b      	lsrs	r3, r3, #6
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00f      	beq.n	800a996 <HAL_I2C_EV_IRQHandler+0x2aa>
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	0a9b      	lsrs	r3, r3, #10
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d009      	beq.n	800a996 <HAL_I2C_EV_IRQHandler+0x2aa>
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	089b      	lsrs	r3, r3, #2
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d103      	bne.n	800a996 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 feeb 	bl	800b76a <I2C_SlaveReceive_RXNE>
 800a994:	e014      	b.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	089b      	lsrs	r3, r3, #2
 800a99a:	f003 0301 	and.w	r3, r3, #1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00e      	beq.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	0a5b      	lsrs	r3, r3, #9
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d008      	beq.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 ff19 	bl	800b7e6 <I2C_SlaveReceive_BTF>
 800a9b4:	e004      	b.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800a9b6:	bf00      	nop
 800a9b8:	e002      	b.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a9ba:	bf00      	nop
 800a9bc:	e000      	b.n	800a9c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a9be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a9c0:	3720      	adds	r7, #32
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}

0800a9c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a9c6:	b580      	push	{r7, lr}
 800a9c8:	b08a      	sub	sp, #40	; 0x28
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	695b      	ldr	r3, [r3, #20]
 800a9d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a9ea:	6a3b      	ldr	r3, [r7, #32]
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00e      	beq.n	800aa14 <HAL_I2C_ER_IRQHandler+0x4e>
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	0a1b      	lsrs	r3, r3, #8
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	f043 0301 	orr.w	r3, r3, #1
 800aa08:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa12:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aa14:	6a3b      	ldr	r3, [r7, #32]
 800aa16:	0a5b      	lsrs	r3, r3, #9
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <HAL_I2C_ER_IRQHandler+0x78>
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	0a1b      	lsrs	r3, r3, #8
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d008      	beq.n	800aa3e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	f043 0302 	orr.w	r3, r3, #2
 800aa32:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800aa3c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	0a9b      	lsrs	r3, r3, #10
 800aa42:	f003 0301 	and.w	r3, r3, #1
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d03f      	beq.n	800aaca <HAL_I2C_ER_IRQHandler+0x104>
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	0a1b      	lsrs	r3, r3, #8
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d039      	beq.n	800aaca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800aa56:	7efb      	ldrb	r3, [r7, #27]
 800aa58:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa68:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800aa70:	7ebb      	ldrb	r3, [r7, #26]
 800aa72:	2b20      	cmp	r3, #32
 800aa74:	d112      	bne.n	800aa9c <HAL_I2C_ER_IRQHandler+0xd6>
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10f      	bne.n	800aa9c <HAL_I2C_ER_IRQHandler+0xd6>
 800aa7c:	7cfb      	ldrb	r3, [r7, #19]
 800aa7e:	2b21      	cmp	r3, #33	; 0x21
 800aa80:	d008      	beq.n	800aa94 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800aa82:	7cfb      	ldrb	r3, [r7, #19]
 800aa84:	2b29      	cmp	r3, #41	; 0x29
 800aa86:	d005      	beq.n	800aa94 <HAL_I2C_ER_IRQHandler+0xce>
 800aa88:	7cfb      	ldrb	r3, [r7, #19]
 800aa8a:	2b28      	cmp	r3, #40	; 0x28
 800aa8c:	d106      	bne.n	800aa9c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b21      	cmp	r3, #33	; 0x21
 800aa92:	d103      	bne.n	800aa9c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 f83d 	bl	800bb14 <I2C_Slave_AF>
 800aa9a:	e016      	b.n	800aaca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aaa4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	f043 0304 	orr.w	r3, r3, #4
 800aaac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800aaae:	7efb      	ldrb	r3, [r7, #27]
 800aab0:	2b10      	cmp	r3, #16
 800aab2:	d002      	beq.n	800aaba <HAL_I2C_ER_IRQHandler+0xf4>
 800aab4:	7efb      	ldrb	r3, [r7, #27]
 800aab6:	2b40      	cmp	r3, #64	; 0x40
 800aab8:	d107      	bne.n	800aaca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aac8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	0adb      	lsrs	r3, r3, #11
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00e      	beq.n	800aaf4 <HAL_I2C_ER_IRQHandler+0x12e>
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	0a1b      	lsrs	r3, r3, #8
 800aada:	f003 0301 	and.w	r3, r3, #1
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d008      	beq.n	800aaf4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	f043 0308 	orr.w	r3, r3, #8
 800aae8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800aaf2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 f874 	bl	800bbf4 <I2C_ITError>
  }
}
 800ab0c:	bf00      	nop
 800ab0e:	3728      	adds	r7, #40	; 0x28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
 800ab70:	4613      	mov	r3, r2
 800ab72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800abb0:	bf00      	nop
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800abc4:	bf00      	nop
 800abc6:	370c      	adds	r7, #12
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abe6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d150      	bne.n	800ac98 <I2C_MasterTransmit_TXE+0xc8>
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	2b21      	cmp	r3, #33	; 0x21
 800abfa:	d14d      	bne.n	800ac98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b08      	cmp	r3, #8
 800ac00:	d01d      	beq.n	800ac3e <I2C_MasterTransmit_TXE+0x6e>
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b20      	cmp	r3, #32
 800ac06:	d01a      	beq.n	800ac3e <I2C_MasterTransmit_TXE+0x6e>
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ac0e:	d016      	beq.n	800ac3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ac1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2211      	movs	r2, #17
 800ac24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2220      	movs	r2, #32
 800ac32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff ff6c 	bl	800ab14 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ac3c:	e060      	b.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ac4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2220      	movs	r2, #32
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b40      	cmp	r3, #64	; 0x40
 800ac76:	d107      	bne.n	800ac88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff ff87 	bl	800ab94 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ac86:	e03b      	b.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff ff3f 	bl	800ab14 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ac96:	e033      	b.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	2b21      	cmp	r3, #33	; 0x21
 800ac9c:	d005      	beq.n	800acaa <I2C_MasterTransmit_TXE+0xda>
 800ac9e:	7bbb      	ldrb	r3, [r7, #14]
 800aca0:	2b40      	cmp	r3, #64	; 0x40
 800aca2:	d12d      	bne.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	2b22      	cmp	r3, #34	; 0x22
 800aca8:	d12a      	bne.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acae:	b29b      	uxth	r3, r3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d108      	bne.n	800acc6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	685a      	ldr	r2, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acc2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800acc4:	e01c      	b.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b40      	cmp	r3, #64	; 0x40
 800acd0:	d103      	bne.n	800acda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f880 	bl	800add8 <I2C_MemoryTransmit_TXE_BTF>
}
 800acd8:	e012      	b.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	781a      	ldrb	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	3b01      	subs	r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800acfe:	e7ff      	b.n	800ad00 <I2C_MasterTransmit_TXE+0x130>
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b21      	cmp	r3, #33	; 0x21
 800ad20:	d156      	bne.n	800add0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d012      	beq.n	800ad52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ad50:	e03e      	b.n	800add0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b08      	cmp	r3, #8
 800ad56:	d01d      	beq.n	800ad94 <I2C_MasterTransmit_BTF+0x8c>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d01a      	beq.n	800ad94 <I2C_MasterTransmit_BTF+0x8c>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad64:	d016      	beq.n	800ad94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ad74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2211      	movs	r2, #17
 800ad7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2220      	movs	r2, #32
 800ad88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff fec1 	bl	800ab14 <HAL_I2C_MasterTxCpltCallback>
}
 800ad92:	e01d      	b.n	800add0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ada2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adb2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2220      	movs	r2, #32
 800adbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff fea2 	bl	800ab14 <HAL_I2C_MasterTxCpltCallback>
}
 800add0:	bf00      	nop
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adec:	2b00      	cmp	r3, #0
 800adee:	d11d      	bne.n	800ae2c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d10b      	bne.n	800ae10 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae08:	1c9a      	adds	r2, r3, #2
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800ae0e:	e06e      	b.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	121b      	asrs	r3, r3, #8
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ae2a:	e060      	b.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d10b      	bne.n	800ae4c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ae4a:	e050      	b.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d14c      	bne.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	2b22      	cmp	r3, #34	; 0x22
 800ae58:	d108      	bne.n	800ae6c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae68:	601a      	str	r2, [r3, #0]
}
 800ae6a:	e040      	b.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d015      	beq.n	800aea2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	2b21      	cmp	r3, #33	; 0x21
 800ae7a:	d112      	bne.n	800aea2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	781a      	ldrb	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	1c5a      	adds	r2, r3, #1
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800aea0:	e025      	b.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d120      	bne.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	2b21      	cmp	r3, #33	; 0x21
 800aeb0:	d11d      	bne.n	800aeee <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800aec0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aed0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2220      	movs	r2, #32
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff fe53 	bl	800ab94 <HAL_I2C_MemTxCpltCallback>
}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b22      	cmp	r3, #34	; 0x22
 800af08:	f040 80a2 	bne.w	800b050 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af10:	b29b      	uxth	r3, r3
 800af12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b03      	cmp	r3, #3
 800af18:	d921      	bls.n	800af5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	691a      	ldr	r2, [r3, #16]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	b2d2      	uxtb	r2, r2
 800af26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	1c5a      	adds	r2, r3, #1
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af36:	b29b      	uxth	r3, r3
 800af38:	3b01      	subs	r3, #1
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af44:	b29b      	uxth	r3, r3
 800af46:	2b03      	cmp	r3, #3
 800af48:	f040 8082 	bne.w	800b050 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af5a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800af5c:	e078      	b.n	800b050 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af62:	2b02      	cmp	r3, #2
 800af64:	d074      	beq.n	800b050 <I2C_MasterReceive_RXNE+0x15a>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d002      	beq.n	800af72 <I2C_MasterReceive_RXNE+0x7c>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d16e      	bne.n	800b050 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f001 fb2a 	bl	800c5cc <I2C_WaitOnSTOPRequestThroughIT>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d142      	bne.n	800b004 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800af9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	691a      	ldr	r2, [r3, #16]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afba:	b29b      	uxth	r3, r3
 800afbc:	3b01      	subs	r3, #1
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2220      	movs	r2, #32
 800afc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b40      	cmp	r3, #64	; 0x40
 800afd6:	d10a      	bne.n	800afee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7fc fb36 	bl	8007658 <HAL_I2C_MemRxCpltCallback>
}
 800afec:	e030      	b.n	800b050 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2212      	movs	r2, #18
 800affa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff fd93 	bl	800ab28 <HAL_I2C_MasterRxCpltCallback>
}
 800b002:	e025      	b.n	800b050 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b012:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	b2d2      	uxtb	r2, r2
 800b020:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b030:	b29b      	uxth	r3, r3
 800b032:	3b01      	subs	r3, #1
 800b034:	b29a      	uxth	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fdac 	bl	800aba8 <HAL_I2C_ErrorCallback>
}
 800b050:	bf00      	nop
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d11b      	bne.n	800b0a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b07e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	691a      	ldr	r2, [r3, #16]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	b2d2      	uxtb	r2, r2
 800b08c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	1c5a      	adds	r2, r3, #1
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b0a6:	e0bd      	b.n	800b224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	d129      	bne.n	800b106 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2b04      	cmp	r3, #4
 800b0c6:	d00a      	beq.n	800b0de <I2C_MasterReceive_BTF+0x86>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d007      	beq.n	800b0de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	691a      	ldr	r2, [r3, #16]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e8:	b2d2      	uxtb	r2, r2
 800b0ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	1c5a      	adds	r2, r3, #1
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b104:	e08e      	b.n	800b224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d176      	bne.n	800b1fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d002      	beq.n	800b11c <I2C_MasterReceive_BTF+0xc4>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b10      	cmp	r3, #16
 800b11a:	d108      	bne.n	800b12e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	e019      	b.n	800b162 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b04      	cmp	r3, #4
 800b132:	d002      	beq.n	800b13a <I2C_MasterReceive_BTF+0xe2>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2b02      	cmp	r3, #2
 800b138:	d108      	bne.n	800b14c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	e00a      	b.n	800b162 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b10      	cmp	r3, #16
 800b150:	d007      	beq.n	800b162 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b160:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	691a      	ldr	r2, [r3, #16]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	b2d2      	uxtb	r2, r2
 800b16e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b17e:	b29b      	uxth	r3, r3
 800b180:	3b01      	subs	r3, #1
 800b182:	b29a      	uxth	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	691a      	ldr	r2, [r3, #16]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	b2d2      	uxtb	r2, r2
 800b194:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	1c5a      	adds	r2, r3, #1
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b1bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b40      	cmp	r3, #64	; 0x40
 800b1d0:	d10a      	bne.n	800b1e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7fc fa39 	bl	8007658 <HAL_I2C_MemRxCpltCallback>
}
 800b1e6:	e01d      	b.n	800b224 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2212      	movs	r2, #18
 800b1f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7ff fc96 	bl	800ab28 <HAL_I2C_MasterRxCpltCallback>
}
 800b1fc:	e012      	b.n	800b224 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	691a      	ldr	r2, [r3, #16]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	b2d2      	uxtb	r2, r2
 800b20a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	3b01      	subs	r3, #1
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800b224:	bf00      	nop
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b40      	cmp	r3, #64	; 0x40
 800b23e:	d117      	bne.n	800b270 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b244:	2b00      	cmp	r3, #0
 800b246:	d109      	bne.n	800b25c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	461a      	mov	r2, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b258:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b25a:	e067      	b.n	800b32c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b260:	b2db      	uxtb	r3, r3
 800b262:	f043 0301 	orr.w	r3, r3, #1
 800b266:	b2da      	uxtb	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	611a      	str	r2, [r3, #16]
}
 800b26e:	e05d      	b.n	800b32c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b278:	d133      	bne.n	800b2e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b21      	cmp	r3, #33	; 0x21
 800b284:	d109      	bne.n	800b29a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	461a      	mov	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b296:	611a      	str	r2, [r3, #16]
 800b298:	e008      	b.n	800b2ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	f043 0301 	orr.w	r3, r3, #1
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d004      	beq.n	800b2be <I2C_Master_SB+0x92>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d108      	bne.n	800b2d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d032      	beq.n	800b32c <I2C_Master_SB+0x100>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d02d      	beq.n	800b32c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2de:	605a      	str	r2, [r3, #4]
}
 800b2e0:	e024      	b.n	800b32c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10e      	bne.n	800b308 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	11db      	asrs	r3, r3, #7
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	f003 0306 	and.w	r3, r3, #6
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	f063 030f 	orn	r3, r3, #15
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	611a      	str	r2, [r3, #16]
}
 800b306:	e011      	b.n	800b32c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d10d      	bne.n	800b32c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b314:	b29b      	uxth	r3, r3
 800b316:	11db      	asrs	r3, r3, #7
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	f003 0306 	and.w	r3, r3, #6
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	f063 030e 	orn	r3, r3, #14
 800b324:	b2da      	uxtb	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	611a      	str	r2, [r3, #16]
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b344:	b2da      	uxtb	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <I2C_Master_ADD10+0x24>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d011      	beq.n	800b380 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b362:	2b00      	cmp	r3, #0
 800b364:	d104      	bne.n	800b370 <I2C_Master_ADD10+0x38>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d007      	beq.n	800b380 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	685a      	ldr	r2, [r3, #4]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b37e:	605a      	str	r2, [r3, #4]
    }
  }
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b091      	sub	sp, #68	; 0x44
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b39a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b22      	cmp	r3, #34	; 0x22
 800b3b4:	f040 8169 	bne.w	800b68a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10f      	bne.n	800b3e0 <I2C_Master_ADDR+0x54>
 800b3c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3c4:	2b40      	cmp	r3, #64	; 0x40
 800b3c6:	d10b      	bne.n	800b3e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	633b      	str	r3, [r7, #48]	; 0x30
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	633b      	str	r3, [r7, #48]	; 0x30
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	633b      	str	r3, [r7, #48]	; 0x30
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3de:	e160      	b.n	800b6a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d11d      	bne.n	800b424 <I2C_Master_ADDR+0x98>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b3f0:	d118      	bne.n	800b424 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	695b      	ldr	r3, [r3, #20]
 800b3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b416:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41c:	1c5a      	adds	r2, r3, #1
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	651a      	str	r2, [r3, #80]	; 0x50
 800b422:	e13e      	b.n	800b6a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b428:	b29b      	uxth	r3, r3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d113      	bne.n	800b456 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b42e:	2300      	movs	r3, #0
 800b430:	62bb      	str	r3, [r7, #40]	; 0x28
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	62bb      	str	r3, [r7, #40]	; 0x28
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	699b      	ldr	r3, [r3, #24]
 800b440:	62bb      	str	r3, [r7, #40]	; 0x28
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	e115      	b.n	800b682 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	f040 808a 	bne.w	800b576 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b468:	d137      	bne.n	800b4da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b478:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b488:	d113      	bne.n	800b4b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b498:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b49a:	2300      	movs	r3, #0
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	699b      	ldr	r3, [r3, #24]
 800b4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	e0e7      	b.n	800b682 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	623b      	str	r3, [r7, #32]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	623b      	str	r3, [r7, #32]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	623b      	str	r3, [r7, #32]
 800b4c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	e0d3      	b.n	800b682 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4dc:	2b08      	cmp	r3, #8
 800b4de:	d02e      	beq.n	800b53e <I2C_Master_ADDR+0x1b2>
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	d02b      	beq.n	800b53e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e8:	2b12      	cmp	r3, #18
 800b4ea:	d102      	bne.n	800b4f2 <I2C_Master_ADDR+0x166>
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d125      	bne.n	800b53e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	d00e      	beq.n	800b516 <I2C_Master_ADDR+0x18a>
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	2b02      	cmp	r3, #2
 800b4fc:	d00b      	beq.n	800b516 <I2C_Master_ADDR+0x18a>
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	2b10      	cmp	r3, #16
 800b502:	d008      	beq.n	800b516 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b512:	601a      	str	r2, [r3, #0]
 800b514:	e007      	b.n	800b526 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b524:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b526:	2300      	movs	r3, #0
 800b528:	61fb      	str	r3, [r7, #28]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	695b      	ldr	r3, [r3, #20]
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	61fb      	str	r3, [r7, #28]
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	e0a1      	b.n	800b682 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b54c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b54e:	2300      	movs	r3, #0
 800b550:	61bb      	str	r3, [r7, #24]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	61bb      	str	r3, [r7, #24]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	e085      	b.n	800b682 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d14d      	bne.n	800b61c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	2b04      	cmp	r3, #4
 800b584:	d016      	beq.n	800b5b4 <I2C_Master_ADDR+0x228>
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d013      	beq.n	800b5b4 <I2C_Master_ADDR+0x228>
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	2b10      	cmp	r3, #16
 800b590:	d010      	beq.n	800b5b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	e007      	b.n	800b5c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5d2:	d117      	bne.n	800b604 <I2C_Master_ADDR+0x278>
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b5da:	d00b      	beq.n	800b5f4 <I2C_Master_ADDR+0x268>
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d008      	beq.n	800b5f4 <I2C_Master_ADDR+0x268>
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	2b08      	cmp	r3, #8
 800b5e6:	d005      	beq.n	800b5f4 <I2C_Master_ADDR+0x268>
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ea:	2b10      	cmp	r3, #16
 800b5ec:	d002      	beq.n	800b5f4 <I2C_Master_ADDR+0x268>
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f0:	2b20      	cmp	r3, #32
 800b5f2:	d107      	bne.n	800b604 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685a      	ldr	r2, [r3, #4]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b602:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	617b      	str	r3, [r7, #20]
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	e032      	b.n	800b682 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b62a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b63a:	d117      	bne.n	800b66c <I2C_Master_ADDR+0x2e0>
 800b63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b642:	d00b      	beq.n	800b65c <I2C_Master_ADDR+0x2d0>
 800b644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b646:	2b01      	cmp	r3, #1
 800b648:	d008      	beq.n	800b65c <I2C_Master_ADDR+0x2d0>
 800b64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64c:	2b08      	cmp	r3, #8
 800b64e:	d005      	beq.n	800b65c <I2C_Master_ADDR+0x2d0>
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	2b10      	cmp	r3, #16
 800b654:	d002      	beq.n	800b65c <I2C_Master_ADDR+0x2d0>
 800b656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b658:	2b20      	cmp	r3, #32
 800b65a:	d107      	bne.n	800b66c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685a      	ldr	r2, [r3, #4]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b66a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b66c:	2300      	movs	r3, #0
 800b66e:	613b      	str	r3, [r7, #16]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	613b      	str	r3, [r7, #16]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b688:	e00b      	b.n	800b6a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	695b      	ldr	r3, [r3, #20]
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	68fb      	ldr	r3, [r7, #12]
}
 800b6a0:	e7ff      	b.n	800b6a2 <I2C_Master_ADDR+0x316>
 800b6a2:	bf00      	nop
 800b6a4:	3744      	adds	r7, #68	; 0x44
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d02b      	beq.n	800b720 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	781a      	ldrb	r2, [r3, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d8:	1c5a      	adds	r2, r3, #1
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d114      	bne.n	800b720 <I2C_SlaveTransmit_TXE+0x72>
 800b6f6:	7bfb      	ldrb	r3, [r7, #15]
 800b6f8:	2b29      	cmp	r3, #41	; 0x29
 800b6fa:	d111      	bne.n	800b720 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685a      	ldr	r2, [r3, #4]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b70a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2221      	movs	r2, #33	; 0x21
 800b710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2228      	movs	r2, #40	; 0x28
 800b716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f7ff fa0e 	bl	800ab3c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b734:	b29b      	uxth	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d011      	beq.n	800b75e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	781a      	ldrb	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b754:	b29b      	uxth	r3, r3
 800b756:	3b01      	subs	r3, #1
 800b758:	b29a      	uxth	r2, r3
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b75e:	bf00      	nop
 800b760:	370c      	adds	r7, #12
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b778:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b77e:	b29b      	uxth	r3, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	d02c      	beq.n	800b7de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691a      	ldr	r2, [r3, #16]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	b2d2      	uxtb	r2, r2
 800b790:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d114      	bne.n	800b7de <I2C_SlaveReceive_RXNE+0x74>
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b8:	d111      	bne.n	800b7de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2222      	movs	r2, #34	; 0x22
 800b7ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2228      	movs	r2, #40	; 0x28
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff f9b9 	bl	800ab50 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b7de:	bf00      	nop
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b7e6:	b480      	push	{r7}
 800b7e8:	b083      	sub	sp, #12
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d012      	beq.n	800b81e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	691a      	ldr	r2, [r3, #16]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b802:	b2d2      	uxtb	r2, r2
 800b804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b814:	b29b      	uxth	r3, r3
 800b816:	3b01      	subs	r3, #1
 800b818:	b29a      	uxth	r2, r3
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b844:	2b28      	cmp	r3, #40	; 0x28
 800b846:	d127      	bne.n	800b898 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685a      	ldr	r2, [r3, #4]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b856:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	089b      	lsrs	r3, r3, #2
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b00      	cmp	r3, #0
 800b862:	d101      	bne.n	800b868 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b864:	2301      	movs	r3, #1
 800b866:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	09db      	lsrs	r3, r3, #7
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b00      	cmp	r3, #0
 800b872:	d103      	bne.n	800b87c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	68db      	ldr	r3, [r3, #12]
 800b878:	81bb      	strh	r3, [r7, #12]
 800b87a:	e002      	b.n	800b882 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b88a:	89ba      	ldrh	r2, [r7, #12]
 800b88c:	7bfb      	ldrb	r3, [r7, #15]
 800b88e:	4619      	mov	r1, r3
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff f967 	bl	800ab64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b896:	e008      	b.n	800b8aa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f06f 0202 	mvn.w	r2, #2
 800b8a0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800b8aa:	bf00      	nop
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
	...

0800b8b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	685a      	ldr	r2, [r3, #4]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b8d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	60bb      	str	r3, [r7, #8]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	60bb      	str	r3, [r7, #8]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0201 	orr.w	r2, r2, #1
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b900:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b90c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b910:	d172      	bne.n	800b9f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b912:	7bfb      	ldrb	r3, [r7, #15]
 800b914:	2b22      	cmp	r3, #34	; 0x22
 800b916:	d002      	beq.n	800b91e <I2C_Slave_STOPF+0x6a>
 800b918:	7bfb      	ldrb	r3, [r7, #15]
 800b91a:	2b2a      	cmp	r3, #42	; 0x2a
 800b91c:	d135      	bne.n	800b98a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	b29a      	uxth	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b930:	b29b      	uxth	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	d005      	beq.n	800b942 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	f043 0204 	orr.w	r2, r3, #4
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	685a      	ldr	r2, [r3, #4]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b950:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b956:	4618      	mov	r0, r3
 800b958:	f7fd fd08 	bl	800936c <HAL_DMA_GetState>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d049      	beq.n	800b9f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	4a69      	ldr	r2, [pc, #420]	; (800bb0c <I2C_Slave_STOPF+0x258>)
 800b968:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fd fb50 	bl	8009014 <HAL_DMA_Abort_IT>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d03d      	beq.n	800b9f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b980:	687a      	ldr	r2, [r7, #4]
 800b982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b984:	4610      	mov	r0, r2
 800b986:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b988:	e035      	b.n	800b9f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	b29a      	uxth	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d005      	beq.n	800b9ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a6:	f043 0204 	orr.w	r2, r3, #4
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	685a      	ldr	r2, [r3, #4]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fd fcd2 	bl	800936c <HAL_DMA_GetState>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d014      	beq.n	800b9f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d2:	4a4e      	ldr	r2, [pc, #312]	; (800bb0c <I2C_Slave_STOPF+0x258>)
 800b9d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fd fb1a 	bl	8009014 <HAL_DMA_Abort_IT>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	4798      	blx	r3
 800b9f4:	e000      	b.n	800b9f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b9f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d03e      	beq.n	800ba80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b04      	cmp	r3, #4
 800ba0e:	d112      	bne.n	800ba36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	691a      	ldr	r2, [r3, #16]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1a:	b2d2      	uxtb	r2, r2
 800ba1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba22:	1c5a      	adds	r2, r3, #1
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba2c:	b29b      	uxth	r3, r3
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba40:	2b40      	cmp	r3, #64	; 0x40
 800ba42:	d112      	bne.n	800ba6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	691a      	ldr	r2, [r3, #16]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	3b01      	subs	r3, #1
 800ba64:	b29a      	uxth	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d005      	beq.n	800ba80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba78:	f043 0204 	orr.w	r2, r3, #4
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d003      	beq.n	800ba90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f8b3 	bl	800bbf4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800ba8e:	e039      	b.n	800bb04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	2b2a      	cmp	r3, #42	; 0x2a
 800ba94:	d109      	bne.n	800baaa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2228      	movs	r2, #40	; 0x28
 800baa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff f853 	bl	800ab50 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b28      	cmp	r3, #40	; 0x28
 800bab4:	d111      	bne.n	800bada <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a15      	ldr	r2, [pc, #84]	; (800bb10 <I2C_Slave_STOPF+0x25c>)
 800baba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2220      	movs	r2, #32
 800bac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff f854 	bl	800ab80 <HAL_I2C_ListenCpltCallback>
}
 800bad8:	e014      	b.n	800bb04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	2b22      	cmp	r3, #34	; 0x22
 800bae0:	d002      	beq.n	800bae8 <I2C_Slave_STOPF+0x234>
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
 800bae4:	2b22      	cmp	r3, #34	; 0x22
 800bae6:	d10d      	bne.n	800bb04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2220      	movs	r2, #32
 800baf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff f826 	bl	800ab50 <HAL_I2C_SlaveRxCpltCallback>
}
 800bb04:	bf00      	nop
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	0800c24d 	.word	0x0800c24d
 800bb10:	ffff0000 	.word	0xffff0000

0800bb14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b08      	cmp	r3, #8
 800bb2e:	d002      	beq.n	800bb36 <I2C_Slave_AF+0x22>
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	d129      	bne.n	800bb8a <I2C_Slave_AF+0x76>
 800bb36:	7bfb      	ldrb	r3, [r7, #15]
 800bb38:	2b28      	cmp	r3, #40	; 0x28
 800bb3a:	d126      	bne.n	800bb8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a2c      	ldr	r2, [pc, #176]	; (800bbf0 <I2C_Slave_AF+0xdc>)
 800bb40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bb50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2220      	movs	r2, #32
 800bb76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7fe fffc 	bl	800ab80 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800bb88:	e02e      	b.n	800bbe8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
 800bb8c:	2b21      	cmp	r3, #33	; 0x21
 800bb8e:	d126      	bne.n	800bbde <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4a17      	ldr	r2, [pc, #92]	; (800bbf0 <I2C_Slave_AF+0xdc>)
 800bb94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2221      	movs	r2, #33	; 0x21
 800bb9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	685a      	ldr	r2, [r3, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800bbba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbc4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbd4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7fe ffb0 	bl	800ab3c <HAL_I2C_SlaveTxCpltCallback>
}
 800bbdc:	e004      	b.n	800bbe8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbe6:	615a      	str	r2, [r3, #20]
}
 800bbe8:	bf00      	nop
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	ffff0000 	.word	0xffff0000

0800bbf4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	2b10      	cmp	r3, #16
 800bc10:	d002      	beq.n	800bc18 <I2C_ITError+0x24>
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b40      	cmp	r3, #64	; 0x40
 800bc16:	d10a      	bne.n	800bc2e <I2C_ITError+0x3a>
 800bc18:	7bfb      	ldrb	r3, [r7, #15]
 800bc1a:	2b22      	cmp	r3, #34	; 0x22
 800bc1c:	d107      	bne.n	800bc2e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc2c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bc34:	2b28      	cmp	r3, #40	; 0x28
 800bc36:	d107      	bne.n	800bc48 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2228      	movs	r2, #40	; 0x28
 800bc42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800bc46:	e015      	b.n	800bc74 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc56:	d00a      	beq.n	800bc6e <I2C_ITError+0x7a>
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	2b60      	cmp	r3, #96	; 0x60
 800bc5c:	d007      	beq.n	800bc6e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2220      	movs	r2, #32
 800bc62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc82:	d162      	bne.n	800bd4a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	685a      	ldr	r2, [r3, #4]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc92:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d020      	beq.n	800bce4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bca6:	4a6a      	ldr	r2, [pc, #424]	; (800be50 <I2C_ITError+0x25c>)
 800bca8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fd f9b0 	bl	8009014 <HAL_DMA_Abort_IT>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 8089 	beq.w	800bdce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f022 0201 	bic.w	r2, r2, #1
 800bcca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bcde:	4610      	mov	r0, r2
 800bce0:	4798      	blx	r3
 800bce2:	e074      	b.n	800bdce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	4a59      	ldr	r2, [pc, #356]	; (800be50 <I2C_ITError+0x25c>)
 800bcea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fd f98f 	bl	8009014 <HAL_DMA_Abort_IT>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d068      	beq.n	800bdce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd06:	2b40      	cmp	r3, #64	; 0x40
 800bd08:	d10b      	bne.n	800bd22 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	691a      	ldr	r2, [r3, #16]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd14:	b2d2      	uxtb	r2, r2
 800bd16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1c:	1c5a      	adds	r2, r3, #1
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f022 0201 	bic.w	r2, r2, #1
 800bd30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
 800bd48:	e041      	b.n	800bdce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	2b60      	cmp	r3, #96	; 0x60
 800bd54:	d125      	bne.n	800bda2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2220      	movs	r2, #32
 800bd5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	695b      	ldr	r3, [r3, #20]
 800bd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd6e:	2b40      	cmp	r3, #64	; 0x40
 800bd70:	d10b      	bne.n	800bd8a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	691a      	ldr	r2, [r3, #16]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7c:	b2d2      	uxtb	r2, r2
 800bd7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd84:	1c5a      	adds	r2, r3, #1
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f022 0201 	bic.w	r2, r2, #1
 800bd98:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7fe ff0e 	bl	800abbc <HAL_I2C_AbortCpltCallback>
 800bda0:	e015      	b.n	800bdce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	695b      	ldr	r3, [r3, #20]
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b40      	cmp	r3, #64	; 0x40
 800bdae:	d10b      	bne.n	800bdc8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	691a      	ldr	r2, [r3, #16]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	1c5a      	adds	r2, r3, #1
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7fe feed 	bl	800aba8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10e      	bne.n	800bdfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d109      	bne.n	800bdfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d104      	bne.n	800bdfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d007      	beq.n	800be0c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685a      	ldr	r2, [r3, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800be0a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be12:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b04      	cmp	r3, #4
 800be1e:	d113      	bne.n	800be48 <I2C_ITError+0x254>
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	2b28      	cmp	r3, #40	; 0x28
 800be24:	d110      	bne.n	800be48 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a0a      	ldr	r2, [pc, #40]	; (800be54 <I2C_ITError+0x260>)
 800be2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2220      	movs	r2, #32
 800be36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7fe fe9c 	bl	800ab80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	0800c24d 	.word	0x0800c24d
 800be54:	ffff0000 	.word	0xffff0000

0800be58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	4608      	mov	r0, r1
 800be62:	4611      	mov	r1, r2
 800be64:	461a      	mov	r2, r3
 800be66:	4603      	mov	r3, r0
 800be68:	817b      	strh	r3, [r7, #10]
 800be6a:	460b      	mov	r3, r1
 800be6c:	813b      	strh	r3, [r7, #8]
 800be6e:	4613      	mov	r3, r2
 800be70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	2200      	movs	r2, #0
 800be9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f000 fa7c 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00d      	beq.n	800bec6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beb8:	d103      	bne.n	800bec2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e0aa      	b.n	800c01c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bec6:	897b      	ldrh	r3, [r7, #10]
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	461a      	mov	r2, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	6a3a      	ldr	r2, [r7, #32]
 800beda:	4952      	ldr	r1, [pc, #328]	; (800c024 <I2C_RequestMemoryRead+0x1cc>)
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 fab4 	bl	800c44a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e097      	b.n	800c01c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800beec:	2300      	movs	r3, #0
 800beee:	617b      	str	r3, [r7, #20]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	695b      	ldr	r3, [r3, #20]
 800bef6:	617b      	str	r3, [r7, #20]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	699b      	ldr	r3, [r3, #24]
 800befe:	617b      	str	r3, [r7, #20]
 800bf00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf04:	6a39      	ldr	r1, [r7, #32]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fb1e 	bl	800c548 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00d      	beq.n	800bf2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf16:	2b04      	cmp	r3, #4
 800bf18:	d107      	bne.n	800bf2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e076      	b.n	800c01c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bf2e:	88fb      	ldrh	r3, [r7, #6]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d105      	bne.n	800bf40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf34:	893b      	ldrh	r3, [r7, #8]
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	611a      	str	r2, [r3, #16]
 800bf3e:	e021      	b.n	800bf84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bf40:	893b      	ldrh	r3, [r7, #8]
 800bf42:	0a1b      	lsrs	r3, r3, #8
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf50:	6a39      	ldr	r1, [r7, #32]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 faf8 	bl	800c548 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00d      	beq.n	800bf7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf62:	2b04      	cmp	r3, #4
 800bf64:	d107      	bne.n	800bf76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e050      	b.n	800c01c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bf7a:	893b      	ldrh	r3, [r7, #8]
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf86:	6a39      	ldr	r1, [r7, #32]
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f000 fadd 	bl	800c548 <I2C_WaitOnTXEFlagUntilTimeout>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00d      	beq.n	800bfb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	d107      	bne.n	800bfac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bfac:	2301      	movs	r3, #1
 800bfae:	e035      	b.n	800c01c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bfbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bfcc:	68f8      	ldr	r0, [r7, #12]
 800bfce:	f000 f9e5 	bl	800c39c <I2C_WaitOnFlagUntilTimeout>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00d      	beq.n	800bff4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe6:	d103      	bne.n	800bff0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bff0:	2303      	movs	r3, #3
 800bff2:	e013      	b.n	800c01c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bff4:	897b      	ldrh	r3, [r7, #10]
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	f043 0301 	orr.w	r3, r3, #1
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	6a3a      	ldr	r2, [r7, #32]
 800c008:	4906      	ldr	r1, [pc, #24]	; (800c024 <I2C_RequestMemoryRead+0x1cc>)
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f000 fa1d 	bl	800c44a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e000      	b.n	800c01c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	00010002 	.word	0x00010002

0800c028 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c034:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c03c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c044:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c05a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c060:	2b00      	cmp	r3, #0
 800c062:	d003      	beq.n	800c06c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c068:	2200      	movs	r2, #0
 800c06a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c078:	2200      	movs	r2, #0
 800c07a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800c07c:	7cfb      	ldrb	r3, [r7, #19]
 800c07e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800c082:	2b21      	cmp	r3, #33	; 0x21
 800c084:	d007      	beq.n	800c096 <I2C_DMAXferCplt+0x6e>
 800c086:	7cfb      	ldrb	r3, [r7, #19]
 800c088:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800c08c:	2b22      	cmp	r3, #34	; 0x22
 800c08e:	d131      	bne.n	800c0f4 <I2C_DMAXferCplt+0xcc>
 800c090:	7cbb      	ldrb	r3, [r7, #18]
 800c092:	2b20      	cmp	r3, #32
 800c094:	d12e      	bne.n	800c0f4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0a4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c0ac:	7cfb      	ldrb	r3, [r7, #19]
 800c0ae:	2b29      	cmp	r3, #41	; 0x29
 800c0b0:	d10a      	bne.n	800c0c8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2221      	movs	r2, #33	; 0x21
 800c0b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2228      	movs	r2, #40	; 0x28
 800c0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c0c0:	6978      	ldr	r0, [r7, #20]
 800c0c2:	f7fe fd3b 	bl	800ab3c <HAL_I2C_SlaveTxCpltCallback>
 800c0c6:	e00c      	b.n	800c0e2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c0c8:	7cfb      	ldrb	r3, [r7, #19]
 800c0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800c0cc:	d109      	bne.n	800c0e2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2222      	movs	r2, #34	; 0x22
 800c0d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	2228      	movs	r2, #40	; 0x28
 800c0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c0dc:	6978      	ldr	r0, [r7, #20]
 800c0de:	f7fe fd37 	bl	800ab50 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c0f0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c0f2:	e06a      	b.n	800c1ca <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d064      	beq.n	800c1ca <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c104:	b29b      	uxth	r3, r3
 800c106:	2b01      	cmp	r3, #1
 800c108:	d107      	bne.n	800c11a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c118:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c128:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c130:	d009      	beq.n	800c146 <I2C_DMAXferCplt+0x11e>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b08      	cmp	r3, #8
 800c136:	d006      	beq.n	800c146 <I2C_DMAXferCplt+0x11e>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c13e:	d002      	beq.n	800c146 <I2C_DMAXferCplt+0x11e>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2b20      	cmp	r3, #32
 800c144:	d107      	bne.n	800c156 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c154:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685a      	ldr	r2, [r3, #4]
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c164:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c174:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	2200      	movs	r2, #0
 800c17a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c180:	2b00      	cmp	r3, #0
 800c182:	d003      	beq.n	800c18c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800c184:	6978      	ldr	r0, [r7, #20]
 800c186:	f7fe fd0f 	bl	800aba8 <HAL_I2C_ErrorCallback>
}
 800c18a:	e01e      	b.n	800c1ca <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2220      	movs	r2, #32
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b40      	cmp	r3, #64	; 0x40
 800c19e:	d10a      	bne.n	800c1b6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800c1ae:	6978      	ldr	r0, [r7, #20]
 800c1b0:	f7fb fa52 	bl	8007658 <HAL_I2C_MemRxCpltCallback>
}
 800c1b4:	e009      	b.n	800c1ca <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	2212      	movs	r2, #18
 800c1c2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800c1c4:	6978      	ldr	r0, [r7, #20]
 800c1c6:	f7fe fcaf 	bl	800ab28 <HAL_I2C_MasterRxCpltCallback>
}
 800c1ca:	bf00      	nop
 800c1cc:	3718      	adds	r7, #24
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1de:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d003      	beq.n	800c1f0 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7fd f8c1 	bl	8009388 <HAL_DMA_GetError>
 800c206:	4603      	mov	r3, r0
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d01b      	beq.n	800c244 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c21a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2220      	movs	r2, #32
 800c226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c236:	f043 0210 	orr.w	r2, r3, #16
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7fe fcb2 	bl	800aba8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c244:	bf00      	nop
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c264:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c266:	4b4b      	ldr	r3, [pc, #300]	; (800c394 <I2C_DMAAbort+0x148>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	08db      	lsrs	r3, r3, #3
 800c26c:	4a4a      	ldr	r2, [pc, #296]	; (800c398 <I2C_DMAAbort+0x14c>)
 800c26e:	fba2 2303 	umull	r2, r3, r2, r3
 800c272:	0a1a      	lsrs	r2, r3, #8
 800c274:	4613      	mov	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	00da      	lsls	r2, r3, #3
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d106      	bne.n	800c294 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28a:	f043 0220 	orr.w	r2, r3, #32
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800c292:	e00a      	b.n	800c2aa <I2C_DMAAbort+0x5e>
    }
    count--;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3b01      	subs	r3, #1
 800c298:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2a8:	d0ea      	beq.n	800c280 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d003      	beq.n	800c2f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f022 0201 	bic.w	r2, r2, #1
 800c30e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b60      	cmp	r3, #96	; 0x60
 800c31a:	d10e      	bne.n	800c33a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	2220      	movs	r2, #32
 800c320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2200      	movs	r2, #0
 800c330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c332:	6978      	ldr	r0, [r7, #20]
 800c334:	f7fe fc42 	bl	800abbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c338:	e027      	b.n	800c38a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c33a:	7cfb      	ldrb	r3, [r7, #19]
 800c33c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c340:	2b28      	cmp	r3, #40	; 0x28
 800c342:	d117      	bne.n	800c374 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f042 0201 	orr.w	r2, r2, #1
 800c352:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c362:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	2200      	movs	r2, #0
 800c368:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2228      	movs	r2, #40	; 0x28
 800c36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c372:	e007      	b.n	800c384 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	2220      	movs	r2, #32
 800c378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2200      	movs	r2, #0
 800c380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c384:	6978      	ldr	r0, [r7, #20]
 800c386:	f7fe fc0f 	bl	800aba8 <HAL_I2C_ErrorCallback>
}
 800c38a:	bf00      	nop
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
 800c392:	bf00      	nop
 800c394:	20001c90 	.word	0x20001c90
 800c398:	14f8b589 	.word	0x14f8b589

0800c39c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	603b      	str	r3, [r7, #0]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3ac:	e025      	b.n	800c3fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3b4:	d021      	beq.n	800c3fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3b6:	f7fb fff3 	bl	80083a0 <HAL_GetTick>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	683a      	ldr	r2, [r7, #0]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d302      	bcc.n	800c3cc <I2C_WaitOnFlagUntilTimeout+0x30>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d116      	bne.n	800c3fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2220      	movs	r2, #32
 800c3d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	f043 0220 	orr.w	r2, r3, #32
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e023      	b.n	800c442 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	0c1b      	lsrs	r3, r3, #16
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	2b01      	cmp	r3, #1
 800c402:	d10d      	bne.n	800c420 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	43da      	mvns	r2, r3
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	4013      	ands	r3, r2
 800c410:	b29b      	uxth	r3, r3
 800c412:	2b00      	cmp	r3, #0
 800c414:	bf0c      	ite	eq
 800c416:	2301      	moveq	r3, #1
 800c418:	2300      	movne	r3, #0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	461a      	mov	r2, r3
 800c41e:	e00c      	b.n	800c43a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	699b      	ldr	r3, [r3, #24]
 800c426:	43da      	mvns	r2, r3
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4013      	ands	r3, r2
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	bf0c      	ite	eq
 800c432:	2301      	moveq	r3, #1
 800c434:	2300      	movne	r3, #0
 800c436:	b2db      	uxtb	r3, r3
 800c438:	461a      	mov	r2, r3
 800c43a:	79fb      	ldrb	r3, [r7, #7]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d0b6      	beq.n	800c3ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}

0800c44a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c44a:	b580      	push	{r7, lr}
 800c44c:	b084      	sub	sp, #16
 800c44e:	af00      	add	r7, sp, #0
 800c450:	60f8      	str	r0, [r7, #12]
 800c452:	60b9      	str	r1, [r7, #8]
 800c454:	607a      	str	r2, [r7, #4]
 800c456:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c458:	e051      	b.n	800c4fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c468:	d123      	bne.n	800c4b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681a      	ldr	r2, [r3, #0]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c478:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c482:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2200      	movs	r2, #0
 800c488:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c49e:	f043 0204 	orr.w	r2, r3, #4
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e046      	b.n	800c540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b8:	d021      	beq.n	800c4fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4ba:	f7fb ff71 	bl	80083a0 <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d302      	bcc.n	800c4d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d116      	bne.n	800c4fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2220      	movs	r2, #32
 800c4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ea:	f043 0220 	orr.w	r2, r3, #32
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e020      	b.n	800c540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	0c1b      	lsrs	r3, r3, #16
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b01      	cmp	r3, #1
 800c506:	d10c      	bne.n	800c522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	695b      	ldr	r3, [r3, #20]
 800c50e:	43da      	mvns	r2, r3
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4013      	ands	r3, r2
 800c514:	b29b      	uxth	r3, r3
 800c516:	2b00      	cmp	r3, #0
 800c518:	bf14      	ite	ne
 800c51a:	2301      	movne	r3, #1
 800c51c:	2300      	moveq	r3, #0
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	e00b      	b.n	800c53a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	699b      	ldr	r3, [r3, #24]
 800c528:	43da      	mvns	r2, r3
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	4013      	ands	r3, r2
 800c52e:	b29b      	uxth	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	bf14      	ite	ne
 800c534:	2301      	movne	r3, #1
 800c536:	2300      	moveq	r3, #0
 800c538:	b2db      	uxtb	r3, r3
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d18d      	bne.n	800c45a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3710      	adds	r7, #16
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}

0800c548 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	60f8      	str	r0, [r7, #12]
 800c550:	60b9      	str	r1, [r7, #8]
 800c552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c554:	e02d      	b.n	800c5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 f8c0 	bl	800c6dc <I2C_IsAcknowledgeFailed>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e02d      	b.n	800c5c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56c:	d021      	beq.n	800c5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c56e:	f7fb ff17 	bl	80083a0 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d302      	bcc.n	800c584 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d116      	bne.n	800c5b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2220      	movs	r2, #32
 800c58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59e:	f043 0220 	orr.w	r2, r3, #32
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e007      	b.n	800c5c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5bc:	2b80      	cmp	r3, #128	; 0x80
 800c5be:	d1ca      	bne.n	800c556 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c5c0:	2300      	movs	r3, #0
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3710      	adds	r7, #16
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
	...

0800c5cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c5d8:	4b13      	ldr	r3, [pc, #76]	; (800c628 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	08db      	lsrs	r3, r3, #3
 800c5de:	4a13      	ldr	r2, [pc, #76]	; (800c62c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c5e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e4:	0a1a      	lsrs	r2, r3, #8
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4413      	add	r3, r2
 800c5ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d107      	bne.n	800c60a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fe:	f043 0220 	orr.w	r2, r3, #32
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e008      	b.n	800c61c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c618:	d0e9      	beq.n	800c5ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr
 800c628:	20001c90 	.word	0x20001c90
 800c62c:	14f8b589 	.word	0x14f8b589

0800c630 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c63c:	e042      	b.n	800c6c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	f003 0310 	and.w	r3, r3, #16
 800c648:	2b10      	cmp	r3, #16
 800c64a:	d119      	bne.n	800c680 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f06f 0210 	mvn.w	r2, #16
 800c654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2200      	movs	r2, #0
 800c65a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2220      	movs	r2, #32
 800c660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e029      	b.n	800c6d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c680:	f7fb fe8e 	bl	80083a0 <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d302      	bcc.n	800c696 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d116      	bne.n	800c6c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2200      	movs	r2, #0
 800c69a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6b0:	f043 0220 	orr.w	r2, r3, #32
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e007      	b.n	800c6d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ce:	2b40      	cmp	r3, #64	; 0x40
 800c6d0:	d1b5      	bne.n	800c63e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6f2:	d11b      	bne.n	800c72c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c6fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2220      	movs	r2, #32
 800c708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c718:	f043 0204 	orr.w	r2, r3, #4
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	e000      	b.n	800c72e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c72c:	2300      	movs	r3, #0
}
 800c72e:	4618      	mov	r0, r3
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c73a:	b480      	push	{r7}
 800c73c:	b083      	sub	sp, #12
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c746:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800c74a:	d103      	bne.n	800c754 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c752:	e007      	b.n	800c764 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c758:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800c75c:	d102      	bne.n	800c764 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2208      	movs	r2, #8
 800c762:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c764:	bf00      	nop
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d101      	bne.n	800c782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	e25b      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d075      	beq.n	800c87a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c78e:	4ba3      	ldr	r3, [pc, #652]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	f003 030c 	and.w	r3, r3, #12
 800c796:	2b04      	cmp	r3, #4
 800c798:	d00c      	beq.n	800c7b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c79a:	4ba0      	ldr	r3, [pc, #640]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c7a2:	2b08      	cmp	r3, #8
 800c7a4:	d112      	bne.n	800c7cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c7a6:	4b9d      	ldr	r3, [pc, #628]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7b2:	d10b      	bne.n	800c7cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7b4:	4b99      	ldr	r3, [pc, #612]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d05b      	beq.n	800c878 <HAL_RCC_OscConfig+0x108>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d157      	bne.n	800c878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e236      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7d4:	d106      	bne.n	800c7e4 <HAL_RCC_OscConfig+0x74>
 800c7d6:	4b91      	ldr	r3, [pc, #580]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a90      	ldr	r2, [pc, #576]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c7dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	e01d      	b.n	800c820 <HAL_RCC_OscConfig+0xb0>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7ec:	d10c      	bne.n	800c808 <HAL_RCC_OscConfig+0x98>
 800c7ee:	4b8b      	ldr	r3, [pc, #556]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a8a      	ldr	r2, [pc, #552]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c7f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	4b88      	ldr	r3, [pc, #544]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a87      	ldr	r2, [pc, #540]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c804:	6013      	str	r3, [r2, #0]
 800c806:	e00b      	b.n	800c820 <HAL_RCC_OscConfig+0xb0>
 800c808:	4b84      	ldr	r3, [pc, #528]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a83      	ldr	r2, [pc, #524]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c80e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c812:	6013      	str	r3, [r2, #0]
 800c814:	4b81      	ldr	r3, [pc, #516]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a80      	ldr	r2, [pc, #512]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c81a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c81e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d013      	beq.n	800c850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c828:	f7fb fdba 	bl	80083a0 <HAL_GetTick>
 800c82c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c82e:	e008      	b.n	800c842 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c830:	f7fb fdb6 	bl	80083a0 <HAL_GetTick>
 800c834:	4602      	mov	r2, r0
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	2b64      	cmp	r3, #100	; 0x64
 800c83c:	d901      	bls.n	800c842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e1fb      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c842:	4b76      	ldr	r3, [pc, #472]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0f0      	beq.n	800c830 <HAL_RCC_OscConfig+0xc0>
 800c84e:	e014      	b.n	800c87a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c850:	f7fb fda6 	bl	80083a0 <HAL_GetTick>
 800c854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c856:	e008      	b.n	800c86a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c858:	f7fb fda2 	bl	80083a0 <HAL_GetTick>
 800c85c:	4602      	mov	r2, r0
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	2b64      	cmp	r3, #100	; 0x64
 800c864:	d901      	bls.n	800c86a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c866:	2303      	movs	r3, #3
 800c868:	e1e7      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c86a:	4b6c      	ldr	r3, [pc, #432]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1f0      	bne.n	800c858 <HAL_RCC_OscConfig+0xe8>
 800c876:	e000      	b.n	800c87a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0302 	and.w	r3, r3, #2
 800c882:	2b00      	cmp	r3, #0
 800c884:	d063      	beq.n	800c94e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c886:	4b65      	ldr	r3, [pc, #404]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	f003 030c 	and.w	r3, r3, #12
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00b      	beq.n	800c8aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c892:	4b62      	ldr	r3, [pc, #392]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c89a:	2b08      	cmp	r3, #8
 800c89c:	d11c      	bne.n	800c8d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c89e:	4b5f      	ldr	r3, [pc, #380]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d116      	bne.n	800c8d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8aa:	4b5c      	ldr	r3, [pc, #368]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 0302 	and.w	r3, r3, #2
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d005      	beq.n	800c8c2 <HAL_RCC_OscConfig+0x152>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d001      	beq.n	800c8c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e1bb      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8c2:	4b56      	ldr	r3, [pc, #344]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	4952      	ldr	r1, [pc, #328]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8d6:	e03a      	b.n	800c94e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d020      	beq.n	800c922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c8e0:	4b4f      	ldr	r3, [pc, #316]	; (800ca20 <HAL_RCC_OscConfig+0x2b0>)
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8e6:	f7fb fd5b 	bl	80083a0 <HAL_GetTick>
 800c8ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8ec:	e008      	b.n	800c900 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8ee:	f7fb fd57 	bl	80083a0 <HAL_GetTick>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d901      	bls.n	800c900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e19c      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c900:	4b46      	ldr	r3, [pc, #280]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f003 0302 	and.w	r3, r3, #2
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d0f0      	beq.n	800c8ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c90c:	4b43      	ldr	r3, [pc, #268]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	4940      	ldr	r1, [pc, #256]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c91c:	4313      	orrs	r3, r2
 800c91e:	600b      	str	r3, [r1, #0]
 800c920:	e015      	b.n	800c94e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c922:	4b3f      	ldr	r3, [pc, #252]	; (800ca20 <HAL_RCC_OscConfig+0x2b0>)
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c928:	f7fb fd3a 	bl	80083a0 <HAL_GetTick>
 800c92c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c92e:	e008      	b.n	800c942 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c930:	f7fb fd36 	bl	80083a0 <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d901      	bls.n	800c942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c93e:	2303      	movs	r3, #3
 800c940:	e17b      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c942:	4b36      	ldr	r3, [pc, #216]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 0302 	and.w	r3, r3, #2
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1f0      	bne.n	800c930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0308 	and.w	r3, r3, #8
 800c956:	2b00      	cmp	r3, #0
 800c958:	d030      	beq.n	800c9bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d016      	beq.n	800c990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c962:	4b30      	ldr	r3, [pc, #192]	; (800ca24 <HAL_RCC_OscConfig+0x2b4>)
 800c964:	2201      	movs	r2, #1
 800c966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c968:	f7fb fd1a 	bl	80083a0 <HAL_GetTick>
 800c96c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c96e:	e008      	b.n	800c982 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c970:	f7fb fd16 	bl	80083a0 <HAL_GetTick>
 800c974:	4602      	mov	r2, r0
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d901      	bls.n	800c982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c97e:	2303      	movs	r3, #3
 800c980:	e15b      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c982:	4b26      	ldr	r3, [pc, #152]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c986:	f003 0302 	and.w	r3, r3, #2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0f0      	beq.n	800c970 <HAL_RCC_OscConfig+0x200>
 800c98e:	e015      	b.n	800c9bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c990:	4b24      	ldr	r3, [pc, #144]	; (800ca24 <HAL_RCC_OscConfig+0x2b4>)
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c996:	f7fb fd03 	bl	80083a0 <HAL_GetTick>
 800c99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c99c:	e008      	b.n	800c9b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c99e:	f7fb fcff 	bl	80083a0 <HAL_GetTick>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	d901      	bls.n	800c9b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c9ac:	2303      	movs	r3, #3
 800c9ae:	e144      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9b0:	4b1a      	ldr	r3, [pc, #104]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c9b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9b4:	f003 0302 	and.w	r3, r3, #2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1f0      	bne.n	800c99e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0304 	and.w	r3, r3, #4
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	f000 80a0 	beq.w	800cb0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9ce:	4b13      	ldr	r3, [pc, #76]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10f      	bne.n	800c9fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9da:	2300      	movs	r3, #0
 800c9dc:	60bb      	str	r3, [r7, #8]
 800c9de:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e2:	4a0e      	ldr	r2, [pc, #56]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c9e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9e8:	6413      	str	r3, [r2, #64]	; 0x40
 800c9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ca1c <HAL_RCC_OscConfig+0x2ac>)
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9f2:	60bb      	str	r3, [r7, #8]
 800c9f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9fa:	4b0b      	ldr	r3, [pc, #44]	; (800ca28 <HAL_RCC_OscConfig+0x2b8>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d121      	bne.n	800ca4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca06:	4b08      	ldr	r3, [pc, #32]	; (800ca28 <HAL_RCC_OscConfig+0x2b8>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a07      	ldr	r2, [pc, #28]	; (800ca28 <HAL_RCC_OscConfig+0x2b8>)
 800ca0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca12:	f7fb fcc5 	bl	80083a0 <HAL_GetTick>
 800ca16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca18:	e011      	b.n	800ca3e <HAL_RCC_OscConfig+0x2ce>
 800ca1a:	bf00      	nop
 800ca1c:	40023800 	.word	0x40023800
 800ca20:	42470000 	.word	0x42470000
 800ca24:	42470e80 	.word	0x42470e80
 800ca28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca2c:	f7fb fcb8 	bl	80083a0 <HAL_GetTick>
 800ca30:	4602      	mov	r2, r0
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d901      	bls.n	800ca3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e0fd      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca3e:	4b81      	ldr	r3, [pc, #516]	; (800cc44 <HAL_RCC_OscConfig+0x4d4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0f0      	beq.n	800ca2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	689b      	ldr	r3, [r3, #8]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d106      	bne.n	800ca60 <HAL_RCC_OscConfig+0x2f0>
 800ca52:	4b7d      	ldr	r3, [pc, #500]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca56:	4a7c      	ldr	r2, [pc, #496]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca58:	f043 0301 	orr.w	r3, r3, #1
 800ca5c:	6713      	str	r3, [r2, #112]	; 0x70
 800ca5e:	e01c      	b.n	800ca9a <HAL_RCC_OscConfig+0x32a>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	2b05      	cmp	r3, #5
 800ca66:	d10c      	bne.n	800ca82 <HAL_RCC_OscConfig+0x312>
 800ca68:	4b77      	ldr	r3, [pc, #476]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca6c:	4a76      	ldr	r2, [pc, #472]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca6e:	f043 0304 	orr.w	r3, r3, #4
 800ca72:	6713      	str	r3, [r2, #112]	; 0x70
 800ca74:	4b74      	ldr	r3, [pc, #464]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca78:	4a73      	ldr	r2, [pc, #460]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca7a:	f043 0301 	orr.w	r3, r3, #1
 800ca7e:	6713      	str	r3, [r2, #112]	; 0x70
 800ca80:	e00b      	b.n	800ca9a <HAL_RCC_OscConfig+0x32a>
 800ca82:	4b71      	ldr	r3, [pc, #452]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca86:	4a70      	ldr	r2, [pc, #448]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca88:	f023 0301 	bic.w	r3, r3, #1
 800ca8c:	6713      	str	r3, [r2, #112]	; 0x70
 800ca8e:	4b6e      	ldr	r3, [pc, #440]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca92:	4a6d      	ldr	r2, [pc, #436]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800ca94:	f023 0304 	bic.w	r3, r3, #4
 800ca98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d015      	beq.n	800cace <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caa2:	f7fb fc7d 	bl	80083a0 <HAL_GetTick>
 800caa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800caa8:	e00a      	b.n	800cac0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800caaa:	f7fb fc79 	bl	80083a0 <HAL_GetTick>
 800caae:	4602      	mov	r2, r0
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cab8:	4293      	cmp	r3, r2
 800caba:	d901      	bls.n	800cac0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800cabc:	2303      	movs	r3, #3
 800cabe:	e0bc      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cac0:	4b61      	ldr	r3, [pc, #388]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac4:	f003 0302 	and.w	r3, r3, #2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d0ee      	beq.n	800caaa <HAL_RCC_OscConfig+0x33a>
 800cacc:	e014      	b.n	800caf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cace:	f7fb fc67 	bl	80083a0 <HAL_GetTick>
 800cad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cad4:	e00a      	b.n	800caec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cad6:	f7fb fc63 	bl	80083a0 <HAL_GetTick>
 800cada:	4602      	mov	r2, r0
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d901      	bls.n	800caec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800cae8:	2303      	movs	r3, #3
 800caea:	e0a6      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800caec:	4b56      	ldr	r3, [pc, #344]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800caee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1ee      	bne.n	800cad6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d105      	bne.n	800cb0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cafe:	4b52      	ldr	r3, [pc, #328]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb02:	4a51      	ldr	r2, [pc, #324]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cb04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f000 8092 	beq.w	800cc38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cb14:	4b4c      	ldr	r3, [pc, #304]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	f003 030c 	and.w	r3, r3, #12
 800cb1c:	2b08      	cmp	r3, #8
 800cb1e:	d05c      	beq.n	800cbda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d141      	bne.n	800cbac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb28:	4b48      	ldr	r3, [pc, #288]	; (800cc4c <HAL_RCC_OscConfig+0x4dc>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb2e:	f7fb fc37 	bl	80083a0 <HAL_GetTick>
 800cb32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb34:	e008      	b.n	800cb48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb36:	f7fb fc33 	bl	80083a0 <HAL_GetTick>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d901      	bls.n	800cb48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800cb44:	2303      	movs	r3, #3
 800cb46:	e078      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb48:	4b3f      	ldr	r3, [pc, #252]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1f0      	bne.n	800cb36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	69da      	ldr	r2, [r3, #28]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	431a      	orrs	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb62:	019b      	lsls	r3, r3, #6
 800cb64:	431a      	orrs	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6a:	085b      	lsrs	r3, r3, #1
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	041b      	lsls	r3, r3, #16
 800cb70:	431a      	orrs	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb76:	061b      	lsls	r3, r3, #24
 800cb78:	4933      	ldr	r1, [pc, #204]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb7e:	4b33      	ldr	r3, [pc, #204]	; (800cc4c <HAL_RCC_OscConfig+0x4dc>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb84:	f7fb fc0c 	bl	80083a0 <HAL_GetTick>
 800cb88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb8a:	e008      	b.n	800cb9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb8c:	f7fb fc08 	bl	80083a0 <HAL_GetTick>
 800cb90:	4602      	mov	r2, r0
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d901      	bls.n	800cb9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	e04d      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb9e:	4b2a      	ldr	r3, [pc, #168]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0f0      	beq.n	800cb8c <HAL_RCC_OscConfig+0x41c>
 800cbaa:	e045      	b.n	800cc38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbac:	4b27      	ldr	r3, [pc, #156]	; (800cc4c <HAL_RCC_OscConfig+0x4dc>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbb2:	f7fb fbf5 	bl	80083a0 <HAL_GetTick>
 800cbb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbb8:	e008      	b.n	800cbcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cbba:	f7fb fbf1 	bl	80083a0 <HAL_GetTick>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d901      	bls.n	800cbcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e036      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cbcc:	4b1e      	ldr	r3, [pc, #120]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1f0      	bne.n	800cbba <HAL_RCC_OscConfig+0x44a>
 800cbd8:	e02e      	b.n	800cc38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d101      	bne.n	800cbe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e029      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cbe6:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <HAL_RCC_OscConfig+0x4d8>)
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d11c      	bne.n	800cc34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d115      	bne.n	800cc34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cc0e:	4013      	ands	r3, r2
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d10d      	bne.n	800cc34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d106      	bne.n	800cc34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d001      	beq.n	800cc38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	e000      	b.n	800cc3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3718      	adds	r7, #24
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	40007000 	.word	0x40007000
 800cc48:	40023800 	.word	0x40023800
 800cc4c:	42470060 	.word	0x42470060

0800cc50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d101      	bne.n	800cc64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e0cc      	b.n	800cdfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cc64:	4b68      	ldr	r3, [pc, #416]	; (800ce08 <HAL_RCC_ClockConfig+0x1b8>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f003 030f 	and.w	r3, r3, #15
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d90c      	bls.n	800cc8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc72:	4b65      	ldr	r3, [pc, #404]	; (800ce08 <HAL_RCC_ClockConfig+0x1b8>)
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc7a:	4b63      	ldr	r3, [pc, #396]	; (800ce08 <HAL_RCC_ClockConfig+0x1b8>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 030f 	and.w	r3, r3, #15
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d001      	beq.n	800cc8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e0b8      	b.n	800cdfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 0302 	and.w	r3, r3, #2
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d020      	beq.n	800ccda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f003 0304 	and.w	r3, r3, #4
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d005      	beq.n	800ccb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cca4:	4b59      	ldr	r3, [pc, #356]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	4a58      	ldr	r2, [pc, #352]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800ccaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ccae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0308 	and.w	r3, r3, #8
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d005      	beq.n	800ccc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ccbc:	4b53      	ldr	r3, [pc, #332]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	4a52      	ldr	r2, [pc, #328]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800ccc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ccc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ccc8:	4b50      	ldr	r3, [pc, #320]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	494d      	ldr	r1, [pc, #308]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f003 0301 	and.w	r3, r3, #1
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d044      	beq.n	800cd70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d107      	bne.n	800ccfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ccee:	4b47      	ldr	r3, [pc, #284]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d119      	bne.n	800cd2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e07f      	b.n	800cdfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d003      	beq.n	800cd0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	d107      	bne.n	800cd1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd0e:	4b3f      	ldr	r3, [pc, #252]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d109      	bne.n	800cd2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e06f      	b.n	800cdfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd1e:	4b3b      	ldr	r3, [pc, #236]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f003 0302 	and.w	r3, r3, #2
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e067      	b.n	800cdfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cd2e:	4b37      	ldr	r3, [pc, #220]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	f023 0203 	bic.w	r2, r3, #3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	4934      	ldr	r1, [pc, #208]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cd40:	f7fb fb2e 	bl	80083a0 <HAL_GetTick>
 800cd44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd46:	e00a      	b.n	800cd5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd48:	f7fb fb2a 	bl	80083a0 <HAL_GetTick>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d901      	bls.n	800cd5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e04f      	b.n	800cdfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd5e:	4b2b      	ldr	r3, [pc, #172]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f003 020c 	and.w	r2, r3, #12
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d1eb      	bne.n	800cd48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cd70:	4b25      	ldr	r3, [pc, #148]	; (800ce08 <HAL_RCC_ClockConfig+0x1b8>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d20c      	bcs.n	800cd98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd7e:	4b22      	ldr	r3, [pc, #136]	; (800ce08 <HAL_RCC_ClockConfig+0x1b8>)
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	b2d2      	uxtb	r2, r2
 800cd84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd86:	4b20      	ldr	r3, [pc, #128]	; (800ce08 <HAL_RCC_ClockConfig+0x1b8>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f003 030f 	and.w	r3, r3, #15
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d001      	beq.n	800cd98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e032      	b.n	800cdfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f003 0304 	and.w	r3, r3, #4
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d008      	beq.n	800cdb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cda4:	4b19      	ldr	r3, [pc, #100]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	4916      	ldr	r1, [pc, #88]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f003 0308 	and.w	r3, r3, #8
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d009      	beq.n	800cdd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cdc2:	4b12      	ldr	r3, [pc, #72]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	00db      	lsls	r3, r3, #3
 800cdd0:	490e      	ldr	r1, [pc, #56]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cdd6:	f000 f821 	bl	800ce1c <HAL_RCC_GetSysClockFreq>
 800cdda:	4601      	mov	r1, r0
 800cddc:	4b0b      	ldr	r3, [pc, #44]	; (800ce0c <HAL_RCC_ClockConfig+0x1bc>)
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	091b      	lsrs	r3, r3, #4
 800cde2:	f003 030f 	and.w	r3, r3, #15
 800cde6:	4a0a      	ldr	r2, [pc, #40]	; (800ce10 <HAL_RCC_ClockConfig+0x1c0>)
 800cde8:	5cd3      	ldrb	r3, [r2, r3]
 800cdea:	fa21 f303 	lsr.w	r3, r1, r3
 800cdee:	4a09      	ldr	r2, [pc, #36]	; (800ce14 <HAL_RCC_ClockConfig+0x1c4>)
 800cdf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cdf2:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <HAL_RCC_ClockConfig+0x1c8>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fb fa8e 	bl	8008318 <HAL_InitTick>

  return HAL_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	40023c00 	.word	0x40023c00
 800ce0c:	40023800 	.word	0x40023800
 800ce10:	08014658 	.word	0x08014658
 800ce14:	20001c90 	.word	0x20001c90
 800ce18:	20001cac 	.word	0x20001cac

0800ce1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	607b      	str	r3, [r7, #4]
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ce32:	4b50      	ldr	r3, [pc, #320]	; (800cf74 <HAL_RCC_GetSysClockFreq+0x158>)
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	f003 030c 	and.w	r3, r3, #12
 800ce3a:	2b04      	cmp	r3, #4
 800ce3c:	d007      	beq.n	800ce4e <HAL_RCC_GetSysClockFreq+0x32>
 800ce3e:	2b08      	cmp	r3, #8
 800ce40:	d008      	beq.n	800ce54 <HAL_RCC_GetSysClockFreq+0x38>
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f040 808d 	bne.w	800cf62 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ce48:	4b4b      	ldr	r3, [pc, #300]	; (800cf78 <HAL_RCC_GetSysClockFreq+0x15c>)
 800ce4a:	60bb      	str	r3, [r7, #8]
       break;
 800ce4c:	e08c      	b.n	800cf68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ce4e:	4b4b      	ldr	r3, [pc, #300]	; (800cf7c <HAL_RCC_GetSysClockFreq+0x160>)
 800ce50:	60bb      	str	r3, [r7, #8]
      break;
 800ce52:	e089      	b.n	800cf68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ce54:	4b47      	ldr	r3, [pc, #284]	; (800cf74 <HAL_RCC_GetSysClockFreq+0x158>)
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ce5e:	4b45      	ldr	r3, [pc, #276]	; (800cf74 <HAL_RCC_GetSysClockFreq+0x158>)
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d023      	beq.n	800ceb2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce6a:	4b42      	ldr	r3, [pc, #264]	; (800cf74 <HAL_RCC_GetSysClockFreq+0x158>)
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	099b      	lsrs	r3, r3, #6
 800ce70:	f04f 0400 	mov.w	r4, #0
 800ce74:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ce78:	f04f 0200 	mov.w	r2, #0
 800ce7c:	ea03 0501 	and.w	r5, r3, r1
 800ce80:	ea04 0602 	and.w	r6, r4, r2
 800ce84:	4a3d      	ldr	r2, [pc, #244]	; (800cf7c <HAL_RCC_GetSysClockFreq+0x160>)
 800ce86:	fb02 f106 	mul.w	r1, r2, r6
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	fb02 f205 	mul.w	r2, r2, r5
 800ce90:	440a      	add	r2, r1
 800ce92:	493a      	ldr	r1, [pc, #232]	; (800cf7c <HAL_RCC_GetSysClockFreq+0x160>)
 800ce94:	fba5 0101 	umull	r0, r1, r5, r1
 800ce98:	1853      	adds	r3, r2, r1
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f04f 0400 	mov.w	r4, #0
 800cea2:	461a      	mov	r2, r3
 800cea4:	4623      	mov	r3, r4
 800cea6:	f7f3 fecf 	bl	8000c48 <__aeabi_uldivmod>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	460c      	mov	r4, r1
 800ceae:	60fb      	str	r3, [r7, #12]
 800ceb0:	e049      	b.n	800cf46 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ceb2:	4b30      	ldr	r3, [pc, #192]	; (800cf74 <HAL_RCC_GetSysClockFreq+0x158>)
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	099b      	lsrs	r3, r3, #6
 800ceb8:	f04f 0400 	mov.w	r4, #0
 800cebc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cec0:	f04f 0200 	mov.w	r2, #0
 800cec4:	ea03 0501 	and.w	r5, r3, r1
 800cec8:	ea04 0602 	and.w	r6, r4, r2
 800cecc:	4629      	mov	r1, r5
 800cece:	4632      	mov	r2, r6
 800ced0:	f04f 0300 	mov.w	r3, #0
 800ced4:	f04f 0400 	mov.w	r4, #0
 800ced8:	0154      	lsls	r4, r2, #5
 800ceda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cede:	014b      	lsls	r3, r1, #5
 800cee0:	4619      	mov	r1, r3
 800cee2:	4622      	mov	r2, r4
 800cee4:	1b49      	subs	r1, r1, r5
 800cee6:	eb62 0206 	sbc.w	r2, r2, r6
 800ceea:	f04f 0300 	mov.w	r3, #0
 800ceee:	f04f 0400 	mov.w	r4, #0
 800cef2:	0194      	lsls	r4, r2, #6
 800cef4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cef8:	018b      	lsls	r3, r1, #6
 800cefa:	1a5b      	subs	r3, r3, r1
 800cefc:	eb64 0402 	sbc.w	r4, r4, r2
 800cf00:	f04f 0100 	mov.w	r1, #0
 800cf04:	f04f 0200 	mov.w	r2, #0
 800cf08:	00e2      	lsls	r2, r4, #3
 800cf0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cf0e:	00d9      	lsls	r1, r3, #3
 800cf10:	460b      	mov	r3, r1
 800cf12:	4614      	mov	r4, r2
 800cf14:	195b      	adds	r3, r3, r5
 800cf16:	eb44 0406 	adc.w	r4, r4, r6
 800cf1a:	f04f 0100 	mov.w	r1, #0
 800cf1e:	f04f 0200 	mov.w	r2, #0
 800cf22:	02a2      	lsls	r2, r4, #10
 800cf24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cf28:	0299      	lsls	r1, r3, #10
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	4614      	mov	r4, r2
 800cf2e:	4618      	mov	r0, r3
 800cf30:	4621      	mov	r1, r4
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f04f 0400 	mov.w	r4, #0
 800cf38:	461a      	mov	r2, r3
 800cf3a:	4623      	mov	r3, r4
 800cf3c:	f7f3 fe84 	bl	8000c48 <__aeabi_uldivmod>
 800cf40:	4603      	mov	r3, r0
 800cf42:	460c      	mov	r4, r1
 800cf44:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cf46:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <HAL_RCC_GetSysClockFreq+0x158>)
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	0c1b      	lsrs	r3, r3, #16
 800cf4c:	f003 0303 	and.w	r3, r3, #3
 800cf50:	3301      	adds	r3, #1
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf5e:	60bb      	str	r3, [r7, #8]
      break;
 800cf60:	e002      	b.n	800cf68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <HAL_RCC_GetSysClockFreq+0x15c>)
 800cf64:	60bb      	str	r3, [r7, #8]
      break;
 800cf66:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cf68:	68bb      	ldr	r3, [r7, #8]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3714      	adds	r7, #20
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf72:	bf00      	nop
 800cf74:	40023800 	.word	0x40023800
 800cf78:	00f42400 	.word	0x00f42400
 800cf7c:	017d7840 	.word	0x017d7840

0800cf80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf80:	b480      	push	{r7}
 800cf82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf84:	4b03      	ldr	r3, [pc, #12]	; (800cf94 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf86:	681b      	ldr	r3, [r3, #0]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop
 800cf94:	20001c90 	.word	0x20001c90

0800cf98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cf9c:	f7ff fff0 	bl	800cf80 <HAL_RCC_GetHCLKFreq>
 800cfa0:	4601      	mov	r1, r0
 800cfa2:	4b05      	ldr	r3, [pc, #20]	; (800cfb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	0a9b      	lsrs	r3, r3, #10
 800cfa8:	f003 0307 	and.w	r3, r3, #7
 800cfac:	4a03      	ldr	r2, [pc, #12]	; (800cfbc <HAL_RCC_GetPCLK1Freq+0x24>)
 800cfae:	5cd3      	ldrb	r3, [r2, r3]
 800cfb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	40023800 	.word	0x40023800
 800cfbc:	08014668 	.word	0x08014668

0800cfc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cfc4:	f7ff ffdc 	bl	800cf80 <HAL_RCC_GetHCLKFreq>
 800cfc8:	4601      	mov	r1, r0
 800cfca:	4b05      	ldr	r3, [pc, #20]	; (800cfe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	0b5b      	lsrs	r3, r3, #13
 800cfd0:	f003 0307 	and.w	r3, r3, #7
 800cfd4:	4a03      	ldr	r2, [pc, #12]	; (800cfe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cfd6:	5cd3      	ldrb	r3, [r2, r3]
 800cfd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	40023800 	.word	0x40023800
 800cfe4:	08014668 	.word	0x08014668

0800cfe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d101      	bne.n	800cffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	e056      	b.n	800d0a8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d006:	b2db      	uxtb	r3, r3
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d106      	bne.n	800d01a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7fa f8ad 	bl	8007174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2202      	movs	r2, #2
 800d01e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d030:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	431a      	orrs	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	695b      	ldr	r3, [r3, #20]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d056:	431a      	orrs	r2, r3
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	69db      	ldr	r3, [r3, #28]
 800d05c:	431a      	orrs	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	ea42 0103 	orr.w	r1, r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	430a      	orrs	r2, r1
 800d070:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	699b      	ldr	r3, [r3, #24]
 800d076:	0c1b      	lsrs	r3, r3, #16
 800d078:	f003 0104 	and.w	r1, r3, #4
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	430a      	orrs	r2, r1
 800d086:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	69da      	ldr	r2, [r3, #28]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d096:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b088      	sub	sp, #32
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	603b      	str	r3, [r7, #0]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d101      	bne.n	800d0d2 <HAL_SPI_Transmit+0x22>
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	e11e      	b.n	800d310 <HAL_SPI_Transmit+0x260>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0da:	f7fb f961 	bl	80083a0 <HAL_GetTick>
 800d0de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d0e0:	88fb      	ldrh	r3, [r7, #6]
 800d0e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d002      	beq.n	800d0f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d0f4:	e103      	b.n	800d2fe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d002      	beq.n	800d102 <HAL_SPI_Transmit+0x52>
 800d0fc:	88fb      	ldrh	r3, [r7, #6]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d102:	2301      	movs	r3, #1
 800d104:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d106:	e0fa      	b.n	800d2fe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2203      	movs	r2, #3
 800d10c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	68ba      	ldr	r2, [r7, #8]
 800d11a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	88fa      	ldrh	r2, [r7, #6]
 800d120:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	88fa      	ldrh	r2, [r7, #6]
 800d126:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2200      	movs	r2, #0
 800d12c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d14e:	d107      	bne.n	800d160 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d15e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d16a:	2b40      	cmp	r3, #64	; 0x40
 800d16c:	d007      	beq.n	800d17e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681a      	ldr	r2, [r3, #0]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d17c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d186:	d14b      	bne.n	800d220 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d002      	beq.n	800d196 <HAL_SPI_Transmit+0xe6>
 800d190:	8afb      	ldrh	r3, [r7, #22]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d13e      	bne.n	800d214 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19a:	881a      	ldrh	r2, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a6:	1c9a      	adds	r2, r3, #2
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d1ba:	e02b      	b.n	800d214 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	f003 0302 	and.w	r3, r3, #2
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d112      	bne.n	800d1f0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ce:	881a      	ldrh	r2, [r3, #0]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1da:	1c9a      	adds	r2, r3, #2
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	86da      	strh	r2, [r3, #54]	; 0x36
 800d1ee:	e011      	b.n	800d214 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1f0:	f7fb f8d6 	bl	80083a0 <HAL_GetTick>
 800d1f4:	4602      	mov	r2, r0
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	1ad3      	subs	r3, r2, r3
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d803      	bhi.n	800d208 <HAL_SPI_Transmit+0x158>
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d206:	d102      	bne.n	800d20e <HAL_SPI_Transmit+0x15e>
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800d20e:	2303      	movs	r3, #3
 800d210:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d212:	e074      	b.n	800d2fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d218:	b29b      	uxth	r3, r3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1ce      	bne.n	800d1bc <HAL_SPI_Transmit+0x10c>
 800d21e:	e04c      	b.n	800d2ba <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <HAL_SPI_Transmit+0x17e>
 800d228:	8afb      	ldrh	r3, [r7, #22]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d140      	bne.n	800d2b0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	330c      	adds	r3, #12
 800d238:	7812      	ldrb	r2, [r2, #0]
 800d23a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	3b01      	subs	r3, #1
 800d24e:	b29a      	uxth	r2, r3
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d254:	e02c      	b.n	800d2b0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	f003 0302 	and.w	r3, r3, #2
 800d260:	2b02      	cmp	r3, #2
 800d262:	d113      	bne.n	800d28c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	330c      	adds	r3, #12
 800d26e:	7812      	ldrb	r2, [r2, #0]
 800d270:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d280:	b29b      	uxth	r3, r3
 800d282:	3b01      	subs	r3, #1
 800d284:	b29a      	uxth	r2, r3
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	86da      	strh	r2, [r3, #54]	; 0x36
 800d28a:	e011      	b.n	800d2b0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d28c:	f7fb f888 	bl	80083a0 <HAL_GetTick>
 800d290:	4602      	mov	r2, r0
 800d292:	69bb      	ldr	r3, [r7, #24]
 800d294:	1ad3      	subs	r3, r2, r3
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d803      	bhi.n	800d2a4 <HAL_SPI_Transmit+0x1f4>
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a2:	d102      	bne.n	800d2aa <HAL_SPI_Transmit+0x1fa>
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d2ae:	e026      	b.n	800d2fe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d1cd      	bne.n	800d256 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	68f8      	ldr	r0, [r7, #12]
 800d2c0:	f000 fc94 	bl	800dbec <SPI_EndRxTxTransaction>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d002      	beq.n	800d2d0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2220      	movs	r2, #32
 800d2ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10a      	bne.n	800d2ee <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d2d8:	2300      	movs	r3, #0
 800d2da:	613b      	str	r3, [r7, #16]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	613b      	str	r3, [r7, #16]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	613b      	str	r3, [r7, #16]
 800d2ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	77fb      	strb	r3, [r7, #31]
 800d2fa:	e000      	b.n	800d2fe <HAL_SPI_Transmit+0x24e>
  }

error:
 800d2fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d30e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b08c      	sub	sp, #48	; 0x30
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
 800d324:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d326:	2301      	movs	r3, #1
 800d328:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d336:	2b01      	cmp	r3, #1
 800d338:	d101      	bne.n	800d33e <HAL_SPI_TransmitReceive+0x26>
 800d33a:	2302      	movs	r3, #2
 800d33c:	e18a      	b.n	800d654 <HAL_SPI_TransmitReceive+0x33c>
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d346:	f7fb f82b 	bl	80083a0 <HAL_GetTick>
 800d34a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d35c:	887b      	ldrh	r3, [r7, #2]
 800d35e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d364:	2b01      	cmp	r3, #1
 800d366:	d00f      	beq.n	800d388 <HAL_SPI_TransmitReceive+0x70>
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d36e:	d107      	bne.n	800d380 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d103      	bne.n	800d380 <HAL_SPI_TransmitReceive+0x68>
 800d378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d37c:	2b04      	cmp	r3, #4
 800d37e:	d003      	beq.n	800d388 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d380:	2302      	movs	r3, #2
 800d382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d386:	e15b      	b.n	800d640 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d005      	beq.n	800d39a <HAL_SPI_TransmitReceive+0x82>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <HAL_SPI_TransmitReceive+0x82>
 800d394:	887b      	ldrh	r3, [r7, #2]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d103      	bne.n	800d3a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d3a0:	e14e      	b.n	800d640 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	2b04      	cmp	r3, #4
 800d3ac:	d003      	beq.n	800d3b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2205      	movs	r2, #5
 800d3b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	687a      	ldr	r2, [r7, #4]
 800d3c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	887a      	ldrh	r2, [r7, #2]
 800d3c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	887a      	ldrh	r2, [r7, #2]
 800d3cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	68ba      	ldr	r2, [r7, #8]
 800d3d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	887a      	ldrh	r2, [r7, #2]
 800d3d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	887a      	ldrh	r2, [r7, #2]
 800d3de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3f6:	2b40      	cmp	r3, #64	; 0x40
 800d3f8:	d007      	beq.n	800d40a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d412:	d178      	bne.n	800d506 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <HAL_SPI_TransmitReceive+0x10a>
 800d41c:	8b7b      	ldrh	r3, [r7, #26]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d166      	bne.n	800d4f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d426:	881a      	ldrh	r2, [r3, #0]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d432:	1c9a      	adds	r2, r3, #2
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	3b01      	subs	r3, #1
 800d440:	b29a      	uxth	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d446:	e053      	b.n	800d4f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b02      	cmp	r3, #2
 800d454:	d11b      	bne.n	800d48e <HAL_SPI_TransmitReceive+0x176>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d016      	beq.n	800d48e <HAL_SPI_TransmitReceive+0x176>
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	2b01      	cmp	r3, #1
 800d464:	d113      	bne.n	800d48e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46a:	881a      	ldrh	r2, [r3, #0]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d476:	1c9a      	adds	r2, r3, #2
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d480:	b29b      	uxth	r3, r3
 800d482:	3b01      	subs	r3, #1
 800d484:	b29a      	uxth	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d48a:	2300      	movs	r3, #0
 800d48c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d119      	bne.n	800d4d0 <HAL_SPI_TransmitReceive+0x1b8>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d014      	beq.n	800d4d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b0:	b292      	uxth	r2, r2
 800d4b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b8:	1c9a      	adds	r2, r3, #2
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d4d0:	f7fa ff66 	bl	80083a0 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d807      	bhi.n	800d4f0 <HAL_SPI_TransmitReceive+0x1d8>
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e6:	d003      	beq.n	800d4f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d4ee:	e0a7      	b.n	800d640 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d4f4:	b29b      	uxth	r3, r3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1a6      	bne.n	800d448 <HAL_SPI_TransmitReceive+0x130>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d1a1      	bne.n	800d448 <HAL_SPI_TransmitReceive+0x130>
 800d504:	e07c      	b.n	800d600 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d002      	beq.n	800d514 <HAL_SPI_TransmitReceive+0x1fc>
 800d50e:	8b7b      	ldrh	r3, [r7, #26]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d16b      	bne.n	800d5ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	330c      	adds	r3, #12
 800d51e:	7812      	ldrb	r2, [r2, #0]
 800d520:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d526:	1c5a      	adds	r2, r3, #1
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d530:	b29b      	uxth	r3, r3
 800d532:	3b01      	subs	r3, #1
 800d534:	b29a      	uxth	r2, r3
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d53a:	e057      	b.n	800d5ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	f003 0302 	and.w	r3, r3, #2
 800d546:	2b02      	cmp	r3, #2
 800d548:	d11c      	bne.n	800d584 <HAL_SPI_TransmitReceive+0x26c>
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d54e:	b29b      	uxth	r3, r3
 800d550:	2b00      	cmp	r3, #0
 800d552:	d017      	beq.n	800d584 <HAL_SPI_TransmitReceive+0x26c>
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	2b01      	cmp	r3, #1
 800d558:	d114      	bne.n	800d584 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	330c      	adds	r3, #12
 800d564:	7812      	ldrb	r2, [r2, #0]
 800d566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56c:	1c5a      	adds	r2, r3, #1
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d576:	b29b      	uxth	r3, r3
 800d578:	3b01      	subs	r3, #1
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d580:	2300      	movs	r3, #0
 800d582:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d119      	bne.n	800d5c6 <HAL_SPI_TransmitReceive+0x2ae>
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d596:	b29b      	uxth	r3, r3
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d014      	beq.n	800d5c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a6:	b2d2      	uxtb	r2, r2
 800d5a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d5c6:	f7fa feeb 	bl	80083a0 <HAL_GetTick>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d803      	bhi.n	800d5de <HAL_SPI_TransmitReceive+0x2c6>
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5dc:	d102      	bne.n	800d5e4 <HAL_SPI_TransmitReceive+0x2cc>
 800d5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d103      	bne.n	800d5ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d5e4:	2303      	movs	r3, #3
 800d5e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d5ea:	e029      	b.n	800d640 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1a2      	bne.n	800d53c <HAL_SPI_TransmitReceive+0x224>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d19d      	bne.n	800d53c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d602:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 faf1 	bl	800dbec <SPI_EndRxTxTransaction>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d006      	beq.n	800d61e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2220      	movs	r2, #32
 800d61a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d61c:	e010      	b.n	800d640 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10b      	bne.n	800d63e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d626:	2300      	movs	r3, #0
 800d628:	617b      	str	r3, [r7, #20]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	617b      	str	r3, [r7, #20]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	689b      	ldr	r3, [r3, #8]
 800d638:	617b      	str	r3, [r7, #20]
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	e000      	b.n	800d640 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d63e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d650:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d654:	4618      	mov	r0, r3
 800d656:	3730      	adds	r7, #48	; 0x30
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
 800d668:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d66a:	2300      	movs	r3, #0
 800d66c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d674:	2b01      	cmp	r3, #1
 800d676:	d101      	bne.n	800d67c <HAL_SPI_TransmitReceive_DMA+0x20>
 800d678:	2302      	movs	r3, #2
 800d67a:	e0e3      	b.n	800d844 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d68a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800d692:	7dbb      	ldrb	r3, [r7, #22]
 800d694:	2b01      	cmp	r3, #1
 800d696:	d00d      	beq.n	800d6b4 <HAL_SPI_TransmitReceive_DMA+0x58>
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d69e:	d106      	bne.n	800d6ae <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d102      	bne.n	800d6ae <HAL_SPI_TransmitReceive_DMA+0x52>
 800d6a8:	7dbb      	ldrb	r3, [r7, #22]
 800d6aa:	2b04      	cmp	r3, #4
 800d6ac:	d002      	beq.n	800d6b4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800d6ae:	2302      	movs	r3, #2
 800d6b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d6b2:	e0c2      	b.n	800d83a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d005      	beq.n	800d6c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800d6c0:	887b      	ldrh	r3, [r7, #2]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d102      	bne.n	800d6cc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800d6ca:	e0b6      	b.n	800d83a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b04      	cmp	r3, #4
 800d6d6:	d003      	beq.n	800d6e0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2205      	movs	r2, #5
 800d6dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	887a      	ldrh	r2, [r7, #2]
 800d6f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	887a      	ldrh	r2, [r7, #2]
 800d6f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	887a      	ldrh	r2, [r7, #2]
 800d702:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	887a      	ldrh	r2, [r7, #2]
 800d708:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2200      	movs	r2, #0
 800d70e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2200      	movs	r2, #0
 800d714:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	2b04      	cmp	r3, #4
 800d720:	d108      	bne.n	800d734 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d726:	4a49      	ldr	r2, [pc, #292]	; (800d84c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800d728:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d72e:	4a48      	ldr	r2, [pc, #288]	; (800d850 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800d730:	63da      	str	r2, [r3, #60]	; 0x3c
 800d732:	e007      	b.n	800d744 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d738:	4a46      	ldr	r2, [pc, #280]	; (800d854 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800d73a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d740:	4a45      	ldr	r2, [pc, #276]	; (800d858 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800d742:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d748:	4a44      	ldr	r2, [pc, #272]	; (800d85c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800d74a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d750:	2200      	movs	r2, #0
 800d752:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	330c      	adds	r3, #12
 800d75e:	4619      	mov	r1, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d764:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d76a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800d76c:	f7fb fbfa 	bl	8008f64 <HAL_DMA_Start_IT>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00c      	beq.n	800d790 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d77a:	f043 0210 	orr.w	r2, r3, #16
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2201      	movs	r2, #1
 800d78a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d78e:	e054      	b.n	800d83a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	685a      	ldr	r2, [r3, #4]
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f042 0201 	orr.w	r2, r2, #1
 800d79e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7bc:	2200      	movs	r2, #0
 800d7be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	330c      	adds	r3, #12
 800d7d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d7d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800d7d8:	f7fb fbc4 	bl	8008f64 <HAL_DMA_Start_IT>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00c      	beq.n	800d7fc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7e6:	f043 0210 	orr.w	r2, r3, #16
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800d7fa:	e01e      	b.n	800d83a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d806:	2b40      	cmp	r3, #64	; 0x40
 800d808:	d007      	beq.n	800d81a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	681a      	ldr	r2, [r3, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d818:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	685a      	ldr	r2, [r3, #4]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f042 0220 	orr.w	r2, r2, #32
 800d828:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	685a      	ldr	r2, [r3, #4]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f042 0202 	orr.w	r2, r2, #2
 800d838:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d842:	7dfb      	ldrb	r3, [r7, #23]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3718      	adds	r7, #24
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	0800d9d5 	.word	0x0800d9d5
 800d850:	0800d89d 	.word	0x0800d89d
 800d854:	0800d9f1 	.word	0x0800d9f1
 800d858:	0800d945 	.word	0x0800d945
 800d85c:	0800da0d 	.word	0x0800da0d

0800d860 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8aa:	f7fa fd79 	bl	80083a0 <HAL_GetTick>
 800d8ae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8be:	d03b      	beq.n	800d938 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	685a      	ldr	r2, [r3, #4]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	f022 0220 	bic.w	r2, r2, #32
 800d8ce:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10d      	bne.n	800d8f4 <SPI_DMAReceiveCplt+0x58>
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d8e0:	d108      	bne.n	800d8f4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	685a      	ldr	r2, [r3, #4]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f022 0203 	bic.w	r2, r2, #3
 800d8f0:	605a      	str	r2, [r3, #4]
 800d8f2:	e007      	b.n	800d904 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f022 0201 	bic.w	r2, r2, #1
 800d902:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	2164      	movs	r1, #100	; 0x64
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f000 f909 	bl	800db20 <SPI_EndRxTransaction>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2220      	movs	r2, #32
 800d918:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2200      	movs	r2, #0
 800d91e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2201      	movs	r2, #1
 800d924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d003      	beq.n	800d938 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff ffa9 	bl	800d888 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d936:	e002      	b.n	800d93e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7ff ff91 	bl	800d860 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d93e:	3710      	adds	r7, #16
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d950:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d952:	f7fa fd25 	bl	80083a0 <HAL_GetTick>
 800d956:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d966:	d02f      	beq.n	800d9c8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	685a      	ldr	r2, [r3, #4]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f022 0220 	bic.w	r2, r2, #32
 800d976:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	2164      	movs	r1, #100	; 0x64
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 f935 	bl	800dbec <SPI_EndRxTxTransaction>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d005      	beq.n	800d994 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d98c:	f043 0220 	orr.w	r2, r3, #32
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	685a      	ldr	r2, [r3, #4]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f022 0203 	bic.w	r2, r2, #3
 800d9a2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d003      	beq.n	800d9c8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f7ff ff61 	bl	800d888 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d9c6:	e002      	b.n	800d9ce <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7f8 fc67 	bl	800629c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9ce:	3710      	adds	r7, #16
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f7ff ff46 	bl	800d874 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d9e8:	bf00      	nop
 800d9ea:	3710      	adds	r7, #16
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7f8 fc62 	bl	80062c8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800da04:	bf00      	nop
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da18:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	685a      	ldr	r2, [r3, #4]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f022 0203 	bic.w	r2, r2, #3
 800da28:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da2e:	f043 0210 	orr.w	r2, r3, #16
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff ff22 	bl	800d888 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800da44:	bf00      	nop
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	603b      	str	r3, [r7, #0]
 800da58:	4613      	mov	r3, r2
 800da5a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800da5c:	e04c      	b.n	800daf8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da64:	d048      	beq.n	800daf8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800da66:	f7fa fc9b 	bl	80083a0 <HAL_GetTick>
 800da6a:	4602      	mov	r2, r0
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	1ad3      	subs	r3, r2, r3
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	429a      	cmp	r2, r3
 800da74:	d902      	bls.n	800da7c <SPI_WaitFlagStateUntilTimeout+0x30>
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d13d      	bne.n	800daf8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	685a      	ldr	r2, [r3, #4]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800da8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da94:	d111      	bne.n	800daba <SPI_WaitFlagStateUntilTimeout+0x6e>
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da9e:	d004      	beq.n	800daaa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800daa8:	d107      	bne.n	800daba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dab8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dabe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dac2:	d10f      	bne.n	800dae4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dae2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800daf4:	2303      	movs	r3, #3
 800daf6:	e00f      	b.n	800db18 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	689a      	ldr	r2, [r3, #8]
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	4013      	ands	r3, r2
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	429a      	cmp	r2, r3
 800db06:	bf0c      	ite	eq
 800db08:	2301      	moveq	r3, #1
 800db0a:	2300      	movne	r3, #0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	461a      	mov	r2, r3
 800db10:	79fb      	ldrb	r3, [r7, #7]
 800db12:	429a      	cmp	r2, r3
 800db14:	d1a3      	bne.n	800da5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b086      	sub	sp, #24
 800db24:	af02      	add	r7, sp, #8
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db34:	d111      	bne.n	800db5a <SPI_EndRxTransaction+0x3a>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db3e:	d004      	beq.n	800db4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db48:	d107      	bne.n	800db5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800db62:	d12a      	bne.n	800dbba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db6c:	d012      	beq.n	800db94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	2200      	movs	r2, #0
 800db76:	2180      	movs	r1, #128	; 0x80
 800db78:	68f8      	ldr	r0, [r7, #12]
 800db7a:	f7ff ff67 	bl	800da4c <SPI_WaitFlagStateUntilTimeout>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d02d      	beq.n	800dbe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db88:	f043 0220 	orr.w	r2, r3, #32
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800db90:	2303      	movs	r3, #3
 800db92:	e026      	b.n	800dbe2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2200      	movs	r2, #0
 800db9c:	2101      	movs	r1, #1
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f7ff ff54 	bl	800da4c <SPI_WaitFlagStateUntilTimeout>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d01a      	beq.n	800dbe0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	f043 0220 	orr.w	r2, r3, #32
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	e013      	b.n	800dbe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f7ff ff41 	bl	800da4c <SPI_WaitFlagStateUntilTimeout>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d007      	beq.n	800dbe0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbd4:	f043 0220 	orr.w	r2, r3, #32
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dbdc:	2303      	movs	r3, #3
 800dbde:	e000      	b.n	800dbe2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
	...

0800dbec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b088      	sub	sp, #32
 800dbf0:	af02      	add	r7, sp, #8
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800dbf8:	4b1b      	ldr	r3, [pc, #108]	; (800dc68 <SPI_EndRxTxTransaction+0x7c>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a1b      	ldr	r2, [pc, #108]	; (800dc6c <SPI_EndRxTxTransaction+0x80>)
 800dbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800dc02:	0d5b      	lsrs	r3, r3, #21
 800dc04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800dc08:	fb02 f303 	mul.w	r3, r2, r3
 800dc0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc16:	d112      	bne.n	800dc3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	2180      	movs	r1, #128	; 0x80
 800dc22:	68f8      	ldr	r0, [r7, #12]
 800dc24:	f7ff ff12 	bl	800da4c <SPI_WaitFlagStateUntilTimeout>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d016      	beq.n	800dc5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc32:	f043 0220 	orr.w	r2, r3, #32
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	e00f      	b.n	800dc5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc54:	2b80      	cmp	r3, #128	; 0x80
 800dc56:	d0f2      	beq.n	800dc3e <SPI_EndRxTxTransaction+0x52>
 800dc58:	e000      	b.n	800dc5c <SPI_EndRxTxTransaction+0x70>
        break;
 800dc5a:	bf00      	nop
  }

  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	20001c90 	.word	0x20001c90
 800dc6c:	165e9f81 	.word	0x165e9f81

0800dc70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d101      	bne.n	800dc82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	e01d      	b.n	800dcbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7f9 fe4e 	bl	8007938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f000 fb34 	bl	800e31c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d101      	bne.n	800dcd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e01d      	b.n	800dd14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d106      	bne.n	800dcf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 f815 	bl	800dd1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	3304      	adds	r3, #4
 800dd02:	4619      	mov	r1, r3
 800dd04:	4610      	mov	r0, r2
 800dd06:	f000 fb09 	bl	800e31c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd12:	2300      	movs	r3, #0
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800dd24:	bf00      	nop
 800dd26:	370c      	adds	r7, #12
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f000 fdd4 	bl	800e8f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a15      	ldr	r2, [pc, #84]	; (800dda4 <HAL_TIM_PWM_Start+0x74>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d004      	beq.n	800dd5c <HAL_TIM_PWM_Start+0x2c>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a14      	ldr	r2, [pc, #80]	; (800dda8 <HAL_TIM_PWM_Start+0x78>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d101      	bne.n	800dd60 <HAL_TIM_PWM_Start+0x30>
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e000      	b.n	800dd62 <HAL_TIM_PWM_Start+0x32>
 800dd60:	2300      	movs	r3, #0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d007      	beq.n	800dd76 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dd74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	f003 0307 	and.w	r3, r3, #7
 800dd80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2b06      	cmp	r3, #6
 800dd86:	d007      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f042 0201 	orr.w	r2, r2, #1
 800dd96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	40010000 	.word	0x40010000
 800dda8:	40010400 	.word	0x40010400

0800ddac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f003 0302 	and.w	r3, r3, #2
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d122      	bne.n	800de08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	f003 0302 	and.w	r3, r3, #2
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d11b      	bne.n	800de08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f06f 0202 	mvn.w	r2, #2
 800ddd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2201      	movs	r2, #1
 800ddde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fa75 	bl	800e2de <HAL_TIM_IC_CaptureCallback>
 800ddf4:	e005      	b.n	800de02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fa67 	bl	800e2ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 fa78 	bl	800e2f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2200      	movs	r2, #0
 800de06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	f003 0304 	and.w	r3, r3, #4
 800de12:	2b04      	cmp	r3, #4
 800de14:	d122      	bne.n	800de5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	2b04      	cmp	r3, #4
 800de22:	d11b      	bne.n	800de5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f06f 0204 	mvn.w	r2, #4
 800de2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2202      	movs	r2, #2
 800de32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d003      	beq.n	800de4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa4b 	bl	800e2de <HAL_TIM_IC_CaptureCallback>
 800de48:	e005      	b.n	800de56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fa3d 	bl	800e2ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 fa4e 	bl	800e2f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	f003 0308 	and.w	r3, r3, #8
 800de66:	2b08      	cmp	r3, #8
 800de68:	d122      	bne.n	800deb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	f003 0308 	and.w	r3, r3, #8
 800de74:	2b08      	cmp	r3, #8
 800de76:	d11b      	bne.n	800deb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f06f 0208 	mvn.w	r2, #8
 800de80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2204      	movs	r2, #4
 800de86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	69db      	ldr	r3, [r3, #28]
 800de8e:	f003 0303 	and.w	r3, r3, #3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d003      	beq.n	800de9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fa21 	bl	800e2de <HAL_TIM_IC_CaptureCallback>
 800de9c:	e005      	b.n	800deaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f000 fa13 	bl	800e2ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fa24 	bl	800e2f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	f003 0310 	and.w	r3, r3, #16
 800deba:	2b10      	cmp	r3, #16
 800debc:	d122      	bne.n	800df04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	f003 0310 	and.w	r3, r3, #16
 800dec8:	2b10      	cmp	r3, #16
 800deca:	d11b      	bne.n	800df04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f06f 0210 	mvn.w	r2, #16
 800ded4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2208      	movs	r2, #8
 800deda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	69db      	ldr	r3, [r3, #28]
 800dee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f9f7 	bl	800e2de <HAL_TIM_IC_CaptureCallback>
 800def0:	e005      	b.n	800defe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f9e9 	bl	800e2ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f9fa 	bl	800e2f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d10e      	bne.n	800df30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	68db      	ldr	r3, [r3, #12]
 800df18:	f003 0301 	and.w	r3, r3, #1
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d107      	bne.n	800df30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f06f 0201 	mvn.w	r2, #1
 800df28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f9c3 	bl	800e2b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df3a:	2b80      	cmp	r3, #128	; 0x80
 800df3c:	d10e      	bne.n	800df5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df48:	2b80      	cmp	r3, #128	; 0x80
 800df4a:	d107      	bne.n	800df5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 fdc8 	bl	800eaec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df66:	2b40      	cmp	r3, #64	; 0x40
 800df68:	d10e      	bne.n	800df88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df74:	2b40      	cmp	r3, #64	; 0x40
 800df76:	d107      	bne.n	800df88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f000 f9bf 	bl	800e306 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	691b      	ldr	r3, [r3, #16]
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	2b20      	cmp	r3, #32
 800df94:	d10e      	bne.n	800dfb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	f003 0320 	and.w	r3, r3, #32
 800dfa0:	2b20      	cmp	r3, #32
 800dfa2:	d107      	bne.n	800dfb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	f06f 0220 	mvn.w	r2, #32
 800dfac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fd92 	bl	800ead8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dfb4:	bf00      	nop
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d101      	bne.n	800dfd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dfd2:	2302      	movs	r3, #2
 800dfd4:	e0b4      	b.n	800e140 <HAL_TIM_PWM_ConfigChannel+0x184>
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2202      	movs	r2, #2
 800dfe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b0c      	cmp	r3, #12
 800dfea:	f200 809f 	bhi.w	800e12c <HAL_TIM_PWM_ConfigChannel+0x170>
 800dfee:	a201      	add	r2, pc, #4	; (adr r2, 800dff4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800dff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff4:	0800e029 	.word	0x0800e029
 800dff8:	0800e12d 	.word	0x0800e12d
 800dffc:	0800e12d 	.word	0x0800e12d
 800e000:	0800e12d 	.word	0x0800e12d
 800e004:	0800e069 	.word	0x0800e069
 800e008:	0800e12d 	.word	0x0800e12d
 800e00c:	0800e12d 	.word	0x0800e12d
 800e010:	0800e12d 	.word	0x0800e12d
 800e014:	0800e0ab 	.word	0x0800e0ab
 800e018:	0800e12d 	.word	0x0800e12d
 800e01c:	0800e12d 	.word	0x0800e12d
 800e020:	0800e12d 	.word	0x0800e12d
 800e024:	0800e0eb 	.word	0x0800e0eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68b9      	ldr	r1, [r7, #8]
 800e02e:	4618      	mov	r0, r3
 800e030:	f000 fa14 	bl	800e45c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	699a      	ldr	r2, [r3, #24]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f042 0208 	orr.w	r2, r2, #8
 800e042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	699a      	ldr	r2, [r3, #24]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f022 0204 	bic.w	r2, r2, #4
 800e052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	6999      	ldr	r1, [r3, #24]
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	691a      	ldr	r2, [r3, #16]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	430a      	orrs	r2, r1
 800e064:	619a      	str	r2, [r3, #24]
      break;
 800e066:	e062      	b.n	800e12e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	68b9      	ldr	r1, [r7, #8]
 800e06e:	4618      	mov	r0, r3
 800e070:	f000 fa64 	bl	800e53c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	699a      	ldr	r2, [r3, #24]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	699a      	ldr	r2, [r3, #24]
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	6999      	ldr	r1, [r3, #24]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	021a      	lsls	r2, r3, #8
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	430a      	orrs	r2, r1
 800e0a6:	619a      	str	r2, [r3, #24]
      break;
 800e0a8:	e041      	b.n	800e12e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	68b9      	ldr	r1, [r7, #8]
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f000 fab9 	bl	800e628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	69da      	ldr	r2, [r3, #28]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f042 0208 	orr.w	r2, r2, #8
 800e0c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	69da      	ldr	r2, [r3, #28]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f022 0204 	bic.w	r2, r2, #4
 800e0d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	69d9      	ldr	r1, [r3, #28]
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	691a      	ldr	r2, [r3, #16]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	430a      	orrs	r2, r1
 800e0e6:	61da      	str	r2, [r3, #28]
      break;
 800e0e8:	e021      	b.n	800e12e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	68b9      	ldr	r1, [r7, #8]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 fb0d 	bl	800e710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	69da      	ldr	r2, [r3, #28]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	69da      	ldr	r2, [r3, #28]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	69d9      	ldr	r1, [r3, #28]
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	021a      	lsls	r2, r3, #8
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	430a      	orrs	r2, r1
 800e128:	61da      	str	r2, [r3, #28]
      break;
 800e12a:	e000      	b.n	800e12e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800e12c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2201      	movs	r2, #1
 800e132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2200      	movs	r2, #0
 800e13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d101      	bne.n	800e160 <HAL_TIM_ConfigClockSource+0x18>
 800e15c:	2302      	movs	r3, #2
 800e15e:	e0a6      	b.n	800e2ae <HAL_TIM_ConfigClockSource+0x166>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2202      	movs	r2, #2
 800e16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	689b      	ldr	r3, [r3, #8]
 800e176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e17e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68fa      	ldr	r2, [r7, #12]
 800e18e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	2b40      	cmp	r3, #64	; 0x40
 800e196:	d067      	beq.n	800e268 <HAL_TIM_ConfigClockSource+0x120>
 800e198:	2b40      	cmp	r3, #64	; 0x40
 800e19a:	d80b      	bhi.n	800e1b4 <HAL_TIM_ConfigClockSource+0x6c>
 800e19c:	2b10      	cmp	r3, #16
 800e19e:	d073      	beq.n	800e288 <HAL_TIM_ConfigClockSource+0x140>
 800e1a0:	2b10      	cmp	r3, #16
 800e1a2:	d802      	bhi.n	800e1aa <HAL_TIM_ConfigClockSource+0x62>
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d06f      	beq.n	800e288 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e1a8:	e078      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e1aa:	2b20      	cmp	r3, #32
 800e1ac:	d06c      	beq.n	800e288 <HAL_TIM_ConfigClockSource+0x140>
 800e1ae:	2b30      	cmp	r3, #48	; 0x30
 800e1b0:	d06a      	beq.n	800e288 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800e1b2:	e073      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e1b4:	2b70      	cmp	r3, #112	; 0x70
 800e1b6:	d00d      	beq.n	800e1d4 <HAL_TIM_ConfigClockSource+0x8c>
 800e1b8:	2b70      	cmp	r3, #112	; 0x70
 800e1ba:	d804      	bhi.n	800e1c6 <HAL_TIM_ConfigClockSource+0x7e>
 800e1bc:	2b50      	cmp	r3, #80	; 0x50
 800e1be:	d033      	beq.n	800e228 <HAL_TIM_ConfigClockSource+0xe0>
 800e1c0:	2b60      	cmp	r3, #96	; 0x60
 800e1c2:	d041      	beq.n	800e248 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800e1c4:	e06a      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800e1c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1ca:	d066      	beq.n	800e29a <HAL_TIM_ConfigClockSource+0x152>
 800e1cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1d0:	d017      	beq.n	800e202 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800e1d2:	e063      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6818      	ldr	r0, [r3, #0]
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	6899      	ldr	r1, [r3, #8]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	685a      	ldr	r2, [r3, #4]
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	f000 fb64 	bl	800e8b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e1f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	609a      	str	r2, [r3, #8]
      break;
 800e200:	e04c      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6818      	ldr	r0, [r3, #0]
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	6899      	ldr	r1, [r3, #8]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	f000 fb4d 	bl	800e8b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	689a      	ldr	r2, [r3, #8]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e224:	609a      	str	r2, [r3, #8]
      break;
 800e226:	e039      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6818      	ldr	r0, [r3, #0]
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	6859      	ldr	r1, [r3, #4]
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	461a      	mov	r2, r3
 800e236:	f000 fac1 	bl	800e7bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	2150      	movs	r1, #80	; 0x50
 800e240:	4618      	mov	r0, r3
 800e242:	f000 fb1a 	bl	800e87a <TIM_ITRx_SetConfig>
      break;
 800e246:	e029      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6818      	ldr	r0, [r3, #0]
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	6859      	ldr	r1, [r3, #4]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	461a      	mov	r2, r3
 800e256:	f000 fae0 	bl	800e81a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2160      	movs	r1, #96	; 0x60
 800e260:	4618      	mov	r0, r3
 800e262:	f000 fb0a 	bl	800e87a <TIM_ITRx_SetConfig>
      break;
 800e266:	e019      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6818      	ldr	r0, [r3, #0]
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	6859      	ldr	r1, [r3, #4]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	461a      	mov	r2, r3
 800e276:	f000 faa1 	bl	800e7bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2140      	movs	r1, #64	; 0x40
 800e280:	4618      	mov	r0, r3
 800e282:	f000 fafa 	bl	800e87a <TIM_ITRx_SetConfig>
      break;
 800e286:	e009      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4619      	mov	r1, r3
 800e292:	4610      	mov	r0, r2
 800e294:	f000 faf1 	bl	800e87a <TIM_ITRx_SetConfig>
      break;
 800e298:	e000      	b.n	800e29c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800e29a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3710      	adds	r7, #16
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b083      	sub	sp, #12
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e2be:	bf00      	nop
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e2d2:	bf00      	nop
 800e2d4:	370c      	adds	r7, #12
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr

0800e2de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e2de:	b480      	push	{r7}
 800e2e0:	b083      	sub	sp, #12
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e2e6:	bf00      	nop
 800e2e8:	370c      	adds	r7, #12
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr

0800e2f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e2f2:	b480      	push	{r7}
 800e2f4:	b083      	sub	sp, #12
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e2fa:	bf00      	nop
 800e2fc:	370c      	adds	r7, #12
 800e2fe:	46bd      	mov	sp, r7
 800e300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e304:	4770      	bx	lr

0800e306 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e306:	b480      	push	{r7}
 800e308:	b083      	sub	sp, #12
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e30e:	bf00      	nop
 800e310:	370c      	adds	r7, #12
 800e312:	46bd      	mov	sp, r7
 800e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e318:	4770      	bx	lr
	...

0800e31c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a40      	ldr	r2, [pc, #256]	; (800e430 <TIM_Base_SetConfig+0x114>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d013      	beq.n	800e35c <TIM_Base_SetConfig+0x40>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e33a:	d00f      	beq.n	800e35c <TIM_Base_SetConfig+0x40>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a3d      	ldr	r2, [pc, #244]	; (800e434 <TIM_Base_SetConfig+0x118>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d00b      	beq.n	800e35c <TIM_Base_SetConfig+0x40>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a3c      	ldr	r2, [pc, #240]	; (800e438 <TIM_Base_SetConfig+0x11c>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d007      	beq.n	800e35c <TIM_Base_SetConfig+0x40>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4a3b      	ldr	r2, [pc, #236]	; (800e43c <TIM_Base_SetConfig+0x120>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d003      	beq.n	800e35c <TIM_Base_SetConfig+0x40>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4a3a      	ldr	r2, [pc, #232]	; (800e440 <TIM_Base_SetConfig+0x124>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d108      	bne.n	800e36e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a2f      	ldr	r2, [pc, #188]	; (800e430 <TIM_Base_SetConfig+0x114>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d02b      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e37c:	d027      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	4a2c      	ldr	r2, [pc, #176]	; (800e434 <TIM_Base_SetConfig+0x118>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d023      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a2b      	ldr	r2, [pc, #172]	; (800e438 <TIM_Base_SetConfig+0x11c>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d01f      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a2a      	ldr	r2, [pc, #168]	; (800e43c <TIM_Base_SetConfig+0x120>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d01b      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a29      	ldr	r2, [pc, #164]	; (800e440 <TIM_Base_SetConfig+0x124>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d017      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a28      	ldr	r2, [pc, #160]	; (800e444 <TIM_Base_SetConfig+0x128>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d013      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a27      	ldr	r2, [pc, #156]	; (800e448 <TIM_Base_SetConfig+0x12c>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d00f      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a26      	ldr	r2, [pc, #152]	; (800e44c <TIM_Base_SetConfig+0x130>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d00b      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4a25      	ldr	r2, [pc, #148]	; (800e450 <TIM_Base_SetConfig+0x134>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d007      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a24      	ldr	r2, [pc, #144]	; (800e454 <TIM_Base_SetConfig+0x138>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d003      	beq.n	800e3ce <TIM_Base_SetConfig+0xb2>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a23      	ldr	r2, [pc, #140]	; (800e458 <TIM_Base_SetConfig+0x13c>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d108      	bne.n	800e3e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	695b      	ldr	r3, [r3, #20]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	68fa      	ldr	r2, [r7, #12]
 800e3f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	689a      	ldr	r2, [r3, #8]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	4a0a      	ldr	r2, [pc, #40]	; (800e430 <TIM_Base_SetConfig+0x114>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d003      	beq.n	800e414 <TIM_Base_SetConfig+0xf8>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4a0c      	ldr	r2, [pc, #48]	; (800e440 <TIM_Base_SetConfig+0x124>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d103      	bne.n	800e41c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	691a      	ldr	r2, [r3, #16]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2201      	movs	r2, #1
 800e420:	615a      	str	r2, [r3, #20]
}
 800e422:	bf00      	nop
 800e424:	3714      	adds	r7, #20
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop
 800e430:	40010000 	.word	0x40010000
 800e434:	40000400 	.word	0x40000400
 800e438:	40000800 	.word	0x40000800
 800e43c:	40000c00 	.word	0x40000c00
 800e440:	40010400 	.word	0x40010400
 800e444:	40014000 	.word	0x40014000
 800e448:	40014400 	.word	0x40014400
 800e44c:	40014800 	.word	0x40014800
 800e450:	40001800 	.word	0x40001800
 800e454:	40001c00 	.word	0x40001c00
 800e458:	40002000 	.word	0x40002000

0800e45c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b087      	sub	sp, #28
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	f023 0201 	bic.w	r2, r3, #1
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a1b      	ldr	r3, [r3, #32]
 800e476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	699b      	ldr	r3, [r3, #24]
 800e482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f023 0303 	bic.w	r3, r3, #3
 800e492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	4313      	orrs	r3, r2
 800e49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	f023 0302 	bic.w	r3, r3, #2
 800e4a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	697a      	ldr	r2, [r7, #20]
 800e4ac:	4313      	orrs	r3, r2
 800e4ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a20      	ldr	r2, [pc, #128]	; (800e534 <TIM_OC1_SetConfig+0xd8>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d003      	beq.n	800e4c0 <TIM_OC1_SetConfig+0x64>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a1f      	ldr	r2, [pc, #124]	; (800e538 <TIM_OC1_SetConfig+0xdc>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d10c      	bne.n	800e4da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	f023 0308 	bic.w	r3, r3, #8
 800e4c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	f023 0304 	bic.w	r3, r3, #4
 800e4d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a15      	ldr	r2, [pc, #84]	; (800e534 <TIM_OC1_SetConfig+0xd8>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d003      	beq.n	800e4ea <TIM_OC1_SetConfig+0x8e>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a14      	ldr	r2, [pc, #80]	; (800e538 <TIM_OC1_SetConfig+0xdc>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d111      	bne.n	800e50e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e4f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	695b      	ldr	r3, [r3, #20]
 800e4fe:	693a      	ldr	r2, [r7, #16]
 800e500:	4313      	orrs	r3, r2
 800e502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	699b      	ldr	r3, [r3, #24]
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	4313      	orrs	r3, r2
 800e50c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	697a      	ldr	r2, [r7, #20]
 800e526:	621a      	str	r2, [r3, #32]
}
 800e528:	bf00      	nop
 800e52a:	371c      	adds	r7, #28
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr
 800e534:	40010000 	.word	0x40010000
 800e538:	40010400 	.word	0x40010400

0800e53c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b087      	sub	sp, #28
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	f023 0210 	bic.w	r2, r3, #16
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a1b      	ldr	r3, [r3, #32]
 800e556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	699b      	ldr	r3, [r3, #24]
 800e562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	021b      	lsls	r3, r3, #8
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	f023 0320 	bic.w	r3, r3, #32
 800e586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	011b      	lsls	r3, r3, #4
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	4313      	orrs	r3, r2
 800e592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a22      	ldr	r2, [pc, #136]	; (800e620 <TIM_OC2_SetConfig+0xe4>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d003      	beq.n	800e5a4 <TIM_OC2_SetConfig+0x68>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4a21      	ldr	r2, [pc, #132]	; (800e624 <TIM_OC2_SetConfig+0xe8>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d10d      	bne.n	800e5c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	011b      	lsls	r3, r3, #4
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	4a17      	ldr	r2, [pc, #92]	; (800e620 <TIM_OC2_SetConfig+0xe4>)
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d003      	beq.n	800e5d0 <TIM_OC2_SetConfig+0x94>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	4a16      	ldr	r2, [pc, #88]	; (800e624 <TIM_OC2_SetConfig+0xe8>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d113      	bne.n	800e5f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e5d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e5de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	695b      	ldr	r3, [r3, #20]
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	693a      	ldr	r2, [r7, #16]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	009b      	lsls	r3, r3, #2
 800e5f2:	693a      	ldr	r2, [r7, #16]
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	685a      	ldr	r2, [r3, #4]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	697a      	ldr	r2, [r7, #20]
 800e610:	621a      	str	r2, [r3, #32]
}
 800e612:	bf00      	nop
 800e614:	371c      	adds	r7, #28
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	40010000 	.word	0x40010000
 800e624:	40010400 	.word	0x40010400

0800e628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e628:	b480      	push	{r7}
 800e62a:	b087      	sub	sp, #28
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a1b      	ldr	r3, [r3, #32]
 800e636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6a1b      	ldr	r3, [r3, #32]
 800e642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	685b      	ldr	r3, [r3, #4]
 800e648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	69db      	ldr	r3, [r3, #28]
 800e64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f023 0303 	bic.w	r3, r3, #3
 800e65e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	4313      	orrs	r3, r2
 800e668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	021b      	lsls	r3, r3, #8
 800e678:	697a      	ldr	r2, [r7, #20]
 800e67a:	4313      	orrs	r3, r2
 800e67c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4a21      	ldr	r2, [pc, #132]	; (800e708 <TIM_OC3_SetConfig+0xe0>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d003      	beq.n	800e68e <TIM_OC3_SetConfig+0x66>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a20      	ldr	r2, [pc, #128]	; (800e70c <TIM_OC3_SetConfig+0xe4>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d10d      	bne.n	800e6aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	021b      	lsls	r3, r3, #8
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4a16      	ldr	r2, [pc, #88]	; (800e708 <TIM_OC3_SetConfig+0xe0>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d003      	beq.n	800e6ba <TIM_OC3_SetConfig+0x92>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4a15      	ldr	r2, [pc, #84]	; (800e70c <TIM_OC3_SetConfig+0xe4>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d113      	bne.n	800e6e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	695b      	ldr	r3, [r3, #20]
 800e6ce:	011b      	lsls	r3, r3, #4
 800e6d0:	693a      	ldr	r2, [r7, #16]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	699b      	ldr	r3, [r3, #24]
 800e6da:	011b      	lsls	r3, r3, #4
 800e6dc:	693a      	ldr	r2, [r7, #16]
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	693a      	ldr	r2, [r7, #16]
 800e6e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	685a      	ldr	r2, [r3, #4]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	697a      	ldr	r2, [r7, #20]
 800e6fa:	621a      	str	r2, [r3, #32]
}
 800e6fc:	bf00      	nop
 800e6fe:	371c      	adds	r7, #28
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr
 800e708:	40010000 	.word	0x40010000
 800e70c:	40010400 	.word	0x40010400

0800e710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e710:	b480      	push	{r7}
 800e712:	b087      	sub	sp, #28
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6a1b      	ldr	r3, [r3, #32]
 800e72a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	69db      	ldr	r3, [r3, #28]
 800e736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e73e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	021b      	lsls	r3, r3, #8
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	4313      	orrs	r3, r2
 800e752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e75a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	031b      	lsls	r3, r3, #12
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	4313      	orrs	r3, r2
 800e766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a12      	ldr	r2, [pc, #72]	; (800e7b4 <TIM_OC4_SetConfig+0xa4>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d003      	beq.n	800e778 <TIM_OC4_SetConfig+0x68>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a11      	ldr	r2, [pc, #68]	; (800e7b8 <TIM_OC4_SetConfig+0xa8>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d109      	bne.n	800e78c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e77e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	695b      	ldr	r3, [r3, #20]
 800e784:	019b      	lsls	r3, r3, #6
 800e786:	697a      	ldr	r2, [r7, #20]
 800e788:	4313      	orrs	r3, r2
 800e78a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	621a      	str	r2, [r3, #32]
}
 800e7a6:	bf00      	nop
 800e7a8:	371c      	adds	r7, #28
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	40010000 	.word	0x40010000
 800e7b8:	40010400 	.word	0x40010400

0800e7bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b087      	sub	sp, #28
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6a1b      	ldr	r3, [r3, #32]
 800e7cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	f023 0201 	bic.w	r2, r3, #1
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	699b      	ldr	r3, [r3, #24]
 800e7de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e7e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	011b      	lsls	r3, r3, #4
 800e7ec:	693a      	ldr	r2, [r7, #16]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	f023 030a 	bic.w	r3, r3, #10
 800e7f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	693a      	ldr	r2, [r7, #16]
 800e806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	697a      	ldr	r2, [r7, #20]
 800e80c:	621a      	str	r2, [r3, #32]
}
 800e80e:	bf00      	nop
 800e810:	371c      	adds	r7, #28
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b087      	sub	sp, #28
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	f023 0210 	bic.w	r2, r3, #16
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	699b      	ldr	r3, [r3, #24]
 800e836:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	6a1b      	ldr	r3, [r3, #32]
 800e83c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	031b      	lsls	r3, r3, #12
 800e84a:	697a      	ldr	r2, [r7, #20]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e856:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	011b      	lsls	r3, r3, #4
 800e85c:	693a      	ldr	r2, [r7, #16]
 800e85e:	4313      	orrs	r3, r2
 800e860:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	697a      	ldr	r2, [r7, #20]
 800e866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	693a      	ldr	r2, [r7, #16]
 800e86c:	621a      	str	r2, [r3, #32]
}
 800e86e:	bf00      	nop
 800e870:	371c      	adds	r7, #28
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr

0800e87a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e87a:	b480      	push	{r7}
 800e87c:	b085      	sub	sp, #20
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e890:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e892:	683a      	ldr	r2, [r7, #0]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	4313      	orrs	r3, r2
 800e898:	f043 0307 	orr.w	r3, r3, #7
 800e89c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	609a      	str	r2, [r3, #8]
}
 800e8a4:	bf00      	nop
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b087      	sub	sp, #28
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	021a      	lsls	r2, r3, #8
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	431a      	orrs	r2, r3
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	697a      	ldr	r2, [r7, #20]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	697a      	ldr	r2, [r7, #20]
 800e8e2:	609a      	str	r2, [r3, #8]
}
 800e8e4:	bf00      	nop
 800e8e6:	371c      	adds	r7, #28
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b087      	sub	sp, #28
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	f003 031f 	and.w	r3, r3, #31
 800e902:	2201      	movs	r2, #1
 800e904:	fa02 f303 	lsl.w	r3, r2, r3
 800e908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6a1a      	ldr	r2, [r3, #32]
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	43db      	mvns	r3, r3
 800e912:	401a      	ands	r2, r3
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	6a1a      	ldr	r2, [r3, #32]
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	f003 031f 	and.w	r3, r3, #31
 800e922:	6879      	ldr	r1, [r7, #4]
 800e924:	fa01 f303 	lsl.w	r3, r1, r3
 800e928:	431a      	orrs	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	621a      	str	r2, [r3, #32]
}
 800e92e:	bf00      	nop
 800e930:	371c      	adds	r7, #28
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
	...

0800e93c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e94c:	2b01      	cmp	r3, #1
 800e94e:	d101      	bne.n	800e954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e950:	2302      	movs	r3, #2
 800e952:	e05a      	b.n	800ea0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2201      	movs	r2, #1
 800e958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2202      	movs	r2, #2
 800e960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e97a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	4313      	orrs	r3, r2
 800e984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a21      	ldr	r2, [pc, #132]	; (800ea18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e994:	4293      	cmp	r3, r2
 800e996:	d022      	beq.n	800e9de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9a0:	d01d      	beq.n	800e9de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a1d      	ldr	r2, [pc, #116]	; (800ea1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d018      	beq.n	800e9de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a1b      	ldr	r2, [pc, #108]	; (800ea20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d013      	beq.n	800e9de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a1a      	ldr	r2, [pc, #104]	; (800ea24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d00e      	beq.n	800e9de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a18      	ldr	r2, [pc, #96]	; (800ea28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d009      	beq.n	800e9de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a17      	ldr	r2, [pc, #92]	; (800ea2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d004      	beq.n	800e9de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a15      	ldr	r2, [pc, #84]	; (800ea30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d10c      	bne.n	800e9f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	68ba      	ldr	r2, [r7, #8]
 800e9f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3714      	adds	r7, #20
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea14:	4770      	bx	lr
 800ea16:	bf00      	nop
 800ea18:	40010000 	.word	0x40010000
 800ea1c:	40000400 	.word	0x40000400
 800ea20:	40000800 	.word	0x40000800
 800ea24:	40000c00 	.word	0x40000c00
 800ea28:	40010400 	.word	0x40010400
 800ea2c:	40014000 	.word	0x40014000
 800ea30:	40001800 	.word	0x40001800

0800ea34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b085      	sub	sp, #20
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d101      	bne.n	800ea50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	e03d      	b.n	800eacc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2201      	movs	r2, #1
 800ea54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	689b      	ldr	r3, [r3, #8]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	695b      	ldr	r3, [r3, #20]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	4313      	orrs	r3, r2
 800eab8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eaf4:	bf00      	nop
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb0e:	2301      	movs	r3, #1
 800eb10:	e03f      	b.n	800eb92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d106      	bne.n	800eb2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2200      	movs	r2, #0
 800eb22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f7f8 fffa 	bl	8007b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2224      	movs	r2, #36	; 0x24
 800eb30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eb42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 fdb5 	bl	800f6b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	691a      	ldr	r2, [r3, #16]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	695a      	ldr	r2, [r3, #20]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	68da      	ldr	r2, [r3, #12]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eb78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2220      	movs	r2, #32
 800eb84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2220      	movs	r2, #32
 800eb8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3708      	adds	r7, #8
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b088      	sub	sp, #32
 800eb9e:	af02      	add	r7, sp, #8
 800eba0:	60f8      	str	r0, [r7, #12]
 800eba2:	60b9      	str	r1, [r7, #8]
 800eba4:	603b      	str	r3, [r7, #0]
 800eba6:	4613      	mov	r3, r2
 800eba8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	2b20      	cmp	r3, #32
 800ebb8:	f040 8083 	bne.w	800ecc2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d002      	beq.n	800ebc8 <HAL_UART_Transmit+0x2e>
 800ebc2:	88fb      	ldrh	r3, [r7, #6]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d101      	bne.n	800ebcc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e07b      	b.n	800ecc4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d101      	bne.n	800ebda <HAL_UART_Transmit+0x40>
 800ebd6:	2302      	movs	r3, #2
 800ebd8:	e074      	b.n	800ecc4 <HAL_UART_Transmit+0x12a>
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2221      	movs	r2, #33	; 0x21
 800ebec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ebf0:	f7f9 fbd6 	bl	80083a0 <HAL_GetTick>
 800ebf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	88fa      	ldrh	r2, [r7, #6]
 800ebfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	88fa      	ldrh	r2, [r7, #6]
 800ec00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800ec0a:	e042      	b.n	800ec92 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	3b01      	subs	r3, #1
 800ec14:	b29a      	uxth	r2, r3
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	689b      	ldr	r3, [r3, #8]
 800ec1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec22:	d122      	bne.n	800ec6a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2180      	movs	r1, #128	; 0x80
 800ec2e:	68f8      	ldr	r0, [r7, #12]
 800ec30:	f000 fbbf 	bl	800f3b2 <UART_WaitOnFlagUntilTimeout>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d001      	beq.n	800ec3e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	e042      	b.n	800ecc4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	881b      	ldrh	r3, [r3, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	691b      	ldr	r3, [r3, #16]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d103      	bne.n	800ec62 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	3302      	adds	r3, #2
 800ec5e:	60bb      	str	r3, [r7, #8]
 800ec60:	e017      	b.n	800ec92 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	3301      	adds	r3, #1
 800ec66:	60bb      	str	r3, [r7, #8]
 800ec68:	e013      	b.n	800ec92 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	9300      	str	r3, [sp, #0]
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	2200      	movs	r2, #0
 800ec72:	2180      	movs	r1, #128	; 0x80
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f000 fb9c 	bl	800f3b2 <UART_WaitOnFlagUntilTimeout>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d001      	beq.n	800ec84 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800ec80:	2303      	movs	r3, #3
 800ec82:	e01f      	b.n	800ecc4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	1c5a      	adds	r2, r3, #1
 800ec88:	60ba      	str	r2, [r7, #8]
 800ec8a:	781a      	ldrb	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1b7      	bne.n	800ec0c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	2200      	movs	r2, #0
 800eca4:	2140      	movs	r1, #64	; 0x40
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f000 fb83 	bl	800f3b2 <UART_WaitOnFlagUntilTimeout>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d001      	beq.n	800ecb6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800ecb2:	2303      	movs	r3, #3
 800ecb4:	e006      	b.n	800ecc4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	e000      	b.n	800ecc4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ecc2:	2302      	movs	r3, #2
  }
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3718      	adds	r7, #24
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b088      	sub	sp, #32
 800ecd0:	af02      	add	r7, sp, #8
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	603b      	str	r3, [r7, #0]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ece6:	b2db      	uxtb	r3, r3
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	f040 8090 	bne.w	800ee0e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d002      	beq.n	800ecfa <HAL_UART_Receive+0x2e>
 800ecf4:	88fb      	ldrh	r3, [r7, #6]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d101      	bne.n	800ecfe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	e088      	b.n	800ee10 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d101      	bne.n	800ed0c <HAL_UART_Receive+0x40>
 800ed08:	2302      	movs	r3, #2
 800ed0a:	e081      	b.n	800ee10 <HAL_UART_Receive+0x144>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2200      	movs	r2, #0
 800ed18:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2222      	movs	r2, #34	; 0x22
 800ed1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ed22:	f7f9 fb3d 	bl	80083a0 <HAL_GetTick>
 800ed26:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	88fa      	ldrh	r2, [r7, #6]
 800ed2c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	88fa      	ldrh	r2, [r7, #6]
 800ed32:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ed3c:	e05c      	b.n	800edf8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	3b01      	subs	r3, #1
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed54:	d12b      	bne.n	800edae <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2120      	movs	r1, #32
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f000 fb26 	bl	800f3b2 <UART_WaitOnFlagUntilTimeout>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	e04f      	b.n	800ee10 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10c      	bne.n	800ed96 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed88:	b29a      	uxth	r2, r3
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	3302      	adds	r3, #2
 800ed92:	60bb      	str	r3, [r7, #8]
 800ed94:	e030      	b.n	800edf8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	3301      	adds	r3, #1
 800edaa:	60bb      	str	r3, [r7, #8]
 800edac:	e024      	b.n	800edf8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	9300      	str	r3, [sp, #0]
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	2200      	movs	r2, #0
 800edb6:	2120      	movs	r1, #32
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f000 fafa 	bl	800f3b2 <UART_WaitOnFlagUntilTimeout>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d001      	beq.n	800edc8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800edc4:	2303      	movs	r3, #3
 800edc6:	e023      	b.n	800ee10 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	691b      	ldr	r3, [r3, #16]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d108      	bne.n	800ede2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	6859      	ldr	r1, [r3, #4]
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	1c5a      	adds	r2, r3, #1
 800edda:	60ba      	str	r2, [r7, #8]
 800eddc:	b2ca      	uxtb	r2, r1
 800edde:	701a      	strb	r2, [r3, #0]
 800ede0:	e00a      	b.n	800edf8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	1c59      	adds	r1, r3, #1
 800edee:	60b9      	str	r1, [r7, #8]
 800edf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800edf4:	b2d2      	uxtb	r2, r2
 800edf6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d19d      	bne.n	800ed3e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2220      	movs	r2, #32
 800ee06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e000      	b.n	800ee10 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ee0e:	2302      	movs	r3, #2
  }
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b086      	sub	sp, #24
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	60b9      	str	r1, [r7, #8]
 800ee22:	4613      	mov	r3, r2
 800ee24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b20      	cmp	r3, #32
 800ee30:	d153      	bne.n	800eeda <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d002      	beq.n	800ee3e <HAL_UART_Transmit_DMA+0x26>
 800ee38:	88fb      	ldrh	r3, [r7, #6]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d101      	bne.n	800ee42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e04c      	b.n	800eedc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d101      	bne.n	800ee50 <HAL_UART_Transmit_DMA+0x38>
 800ee4c:	2302      	movs	r3, #2
 800ee4e:	e045      	b.n	800eedc <HAL_UART_Transmit_DMA+0xc4>
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	88fa      	ldrh	r2, [r7, #6]
 800ee62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	88fa      	ldrh	r2, [r7, #6]
 800ee68:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2221      	movs	r2, #33	; 0x21
 800ee74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee7c:	4a19      	ldr	r2, [pc, #100]	; (800eee4 <HAL_UART_Transmit_DMA+0xcc>)
 800ee7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee84:	4a18      	ldr	r2, [pc, #96]	; (800eee8 <HAL_UART_Transmit_DMA+0xd0>)
 800ee86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8c:	4a17      	ldr	r2, [pc, #92]	; (800eeec <HAL_UART_Transmit_DMA+0xd4>)
 800ee8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee94:	2200      	movs	r2, #0
 800ee96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ee98:	f107 0308 	add.w	r3, r7, #8
 800ee9c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	6819      	ldr	r1, [r3, #0]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	3304      	adds	r3, #4
 800eeac:	461a      	mov	r2, r3
 800eeae:	88fb      	ldrh	r3, [r7, #6]
 800eeb0:	f7fa f858 	bl	8008f64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eebc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	695a      	ldr	r2, [r3, #20]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eed4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800eed6:	2300      	movs	r3, #0
 800eed8:	e000      	b.n	800eedc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800eeda:	2302      	movs	r3, #2
  }
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3718      	adds	r7, #24
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	0800f22d 	.word	0x0800f22d
 800eee8:	0800f27f 	.word	0x0800f27f
 800eeec:	0800f31f 	.word	0x0800f31f

0800eef0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	4613      	mov	r3, r2
 800eefc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	2b20      	cmp	r3, #32
 800ef08:	d166      	bne.n	800efd8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d002      	beq.n	800ef16 <HAL_UART_Receive_DMA+0x26>
 800ef10:	88fb      	ldrh	r3, [r7, #6]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
 800ef18:	e05f      	b.n	800efda <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef20:	2b01      	cmp	r3, #1
 800ef22:	d101      	bne.n	800ef28 <HAL_UART_Receive_DMA+0x38>
 800ef24:	2302      	movs	r3, #2
 800ef26:	e058      	b.n	800efda <HAL_UART_Receive_DMA+0xea>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	88fa      	ldrh	r2, [r7, #6]
 800ef3a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2222      	movs	r2, #34	; 0x22
 800ef46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef4e:	4a25      	ldr	r2, [pc, #148]	; (800efe4 <HAL_UART_Receive_DMA+0xf4>)
 800ef50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef56:	4a24      	ldr	r2, [pc, #144]	; (800efe8 <HAL_UART_Receive_DMA+0xf8>)
 800ef58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef5e:	4a23      	ldr	r2, [pc, #140]	; (800efec <HAL_UART_Receive_DMA+0xfc>)
 800ef60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef66:	2200      	movs	r2, #0
 800ef68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800ef6a:	f107 0308 	add.w	r3, r7, #8
 800ef6e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3304      	adds	r3, #4
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	88fb      	ldrh	r3, [r7, #6]
 800ef82:	f7f9 ffef 	bl	8008f64 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ef86:	2300      	movs	r3, #0
 800ef88:	613b      	str	r3, [r7, #16]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	613b      	str	r3, [r7, #16]
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	613b      	str	r3, [r7, #16]
 800ef9a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	68da      	ldr	r2, [r3, #12]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800efb2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	695a      	ldr	r2, [r3, #20]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f042 0201 	orr.w	r2, r2, #1
 800efc2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	695a      	ldr	r2, [r3, #20]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800efd2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800efd4:	2300      	movs	r3, #0
 800efd6:	e000      	b.n	800efda <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800efd8:	2302      	movs	r3, #2
  }
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3718      	adds	r7, #24
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	0800f29b 	.word	0x0800f29b
 800efe8:	0800f303 	.word	0x0800f303
 800efec:	0800f31f 	.word	0x0800f31f

0800eff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b088      	sub	sp, #32
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	695b      	ldr	r3, [r3, #20]
 800f00e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800f010:	2300      	movs	r3, #0
 800f012:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800f014:	2300      	movs	r3, #0
 800f016:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	f003 030f 	and.w	r3, r3, #15
 800f01e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d10d      	bne.n	800f042 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	f003 0320 	and.w	r3, r3, #32
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d008      	beq.n	800f042 <HAL_UART_IRQHandler+0x52>
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	f003 0320 	and.w	r3, r3, #32
 800f036:	2b00      	cmp	r3, #0
 800f038:	d003      	beq.n	800f042 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fab9 	bl	800f5b2 <UART_Receive_IT>
      return;
 800f040:	e0d1      	b.n	800f1e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 80b0 	beq.w	800f1aa <HAL_UART_IRQHandler+0x1ba>
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	f003 0301 	and.w	r3, r3, #1
 800f050:	2b00      	cmp	r3, #0
 800f052:	d105      	bne.n	800f060 <HAL_UART_IRQHandler+0x70>
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f000 80a5 	beq.w	800f1aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	f003 0301 	and.w	r3, r3, #1
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00a      	beq.n	800f080 <HAL_UART_IRQHandler+0x90>
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f070:	2b00      	cmp	r3, #0
 800f072:	d005      	beq.n	800f080 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f078:	f043 0201 	orr.w	r2, r3, #1
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	f003 0304 	and.w	r3, r3, #4
 800f086:	2b00      	cmp	r3, #0
 800f088:	d00a      	beq.n	800f0a0 <HAL_UART_IRQHandler+0xb0>
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	f003 0301 	and.w	r3, r3, #1
 800f090:	2b00      	cmp	r3, #0
 800f092:	d005      	beq.n	800f0a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f098:	f043 0202 	orr.w	r2, r3, #2
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00a      	beq.n	800f0c0 <HAL_UART_IRQHandler+0xd0>
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	f003 0301 	and.w	r3, r3, #1
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d005      	beq.n	800f0c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0b8:	f043 0204 	orr.w	r2, r3, #4
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800f0c0:	69fb      	ldr	r3, [r7, #28]
 800f0c2:	f003 0308 	and.w	r3, r3, #8
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00f      	beq.n	800f0ea <HAL_UART_IRQHandler+0xfa>
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	f003 0320 	and.w	r3, r3, #32
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d104      	bne.n	800f0de <HAL_UART_IRQHandler+0xee>
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d005      	beq.n	800f0ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0e2:	f043 0208 	orr.w	r2, r3, #8
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d078      	beq.n	800f1e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f0f2:	69fb      	ldr	r3, [r7, #28]
 800f0f4:	f003 0320 	and.w	r3, r3, #32
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d007      	beq.n	800f10c <HAL_UART_IRQHandler+0x11c>
 800f0fc:	69bb      	ldr	r3, [r7, #24]
 800f0fe:	f003 0320 	and.w	r3, r3, #32
 800f102:	2b00      	cmp	r3, #0
 800f104:	d002      	beq.n	800f10c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fa53 	bl	800f5b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	695b      	ldr	r3, [r3, #20]
 800f112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f116:	2b40      	cmp	r3, #64	; 0x40
 800f118:	bf0c      	ite	eq
 800f11a:	2301      	moveq	r3, #1
 800f11c:	2300      	movne	r3, #0
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f126:	f003 0308 	and.w	r3, r3, #8
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d102      	bne.n	800f134 <HAL_UART_IRQHandler+0x144>
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d031      	beq.n	800f198 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 f99c 	bl	800f472 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	695b      	ldr	r3, [r3, #20]
 800f140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f144:	2b40      	cmp	r3, #64	; 0x40
 800f146:	d123      	bne.n	800f190 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	695a      	ldr	r2, [r3, #20]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f156:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d013      	beq.n	800f188 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f164:	4a21      	ldr	r2, [pc, #132]	; (800f1ec <HAL_UART_IRQHandler+0x1fc>)
 800f166:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f16c:	4618      	mov	r0, r3
 800f16e:	f7f9 ff51 	bl	8009014 <HAL_DMA_Abort_IT>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d016      	beq.n	800f1a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f182:	4610      	mov	r0, r2
 800f184:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f186:	e00e      	b.n	800f1a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 f845 	bl	800f218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f18e:	e00a      	b.n	800f1a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 f841 	bl	800f218 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f196:	e006      	b.n	800f1a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	f000 f83d 	bl	800f218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800f1a4:	e01e      	b.n	800f1e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1a6:	bf00      	nop
    return;
 800f1a8:	e01c      	b.n	800f1e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d008      	beq.n	800f1c6 <HAL_UART_IRQHandler+0x1d6>
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d003      	beq.n	800f1c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 f989 	bl	800f4d6 <UART_Transmit_IT>
    return;
 800f1c4:	e00f      	b.n	800f1e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f1c6:	69fb      	ldr	r3, [r7, #28]
 800f1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00a      	beq.n	800f1e6 <HAL_UART_IRQHandler+0x1f6>
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d005      	beq.n	800f1e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 f9d1 	bl	800f582 <UART_EndTransmit_IT>
    return;
 800f1e0:	bf00      	nop
 800f1e2:	e000      	b.n	800f1e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 800f1e4:	bf00      	nop
  }
}
 800f1e6:	3720      	adds	r7, #32
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}
 800f1ec:	0800f4af 	.word	0x0800f4af

0800f1f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800f1f8:	bf00      	nop
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f20c:	bf00      	nop
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f238:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f244:	2b00      	cmp	r3, #0
 800f246:	d113      	bne.n	800f270 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2200      	movs	r2, #0
 800f24c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	695a      	ldr	r2, [r3, #20]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f25c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	68da      	ldr	r2, [r3, #12]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f26c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f26e:	e002      	b.n	800f276 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f7ff ffbd 	bl	800f1f0 <HAL_UART_TxCpltCallback>
}
 800f276:	bf00      	nop
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b084      	sub	sp, #16
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f28a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f7ff ffb9 	bl	800f204 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f292:	bf00      	nop
 800f294:	3710      	adds	r7, #16
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b084      	sub	sp, #16
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d11e      	bne.n	800f2f4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68da      	ldr	r2, [r3, #12]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f2ca:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	695a      	ldr	r2, [r3, #20]
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f022 0201 	bic.w	r2, r2, #1
 800f2da:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	695a      	ldr	r2, [r3, #20]
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f2ea:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2220      	movs	r2, #32
 800f2f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f7f8 f999 	bl	800762c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f2fa:	bf00      	nop
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b084      	sub	sp, #16
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f30e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f7f8 f996 	bl	8007642 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f316:	bf00      	nop
 800f318:	3710      	adds	r7, #16
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b084      	sub	sp, #16
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f326:	2300      	movs	r3, #0
 800f328:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f32e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	695b      	ldr	r3, [r3, #20]
 800f336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f33a:	2b80      	cmp	r3, #128	; 0x80
 800f33c:	bf0c      	ite	eq
 800f33e:	2301      	moveq	r3, #1
 800f340:	2300      	movne	r3, #0
 800f342:	b2db      	uxtb	r3, r3
 800f344:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	2b21      	cmp	r3, #33	; 0x21
 800f350:	d108      	bne.n	800f364 <UART_DMAError+0x46>
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d005      	beq.n	800f364 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	2200      	movs	r2, #0
 800f35c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800f35e:	68b8      	ldr	r0, [r7, #8]
 800f360:	f000 f871 	bl	800f446 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	695b      	ldr	r3, [r3, #20]
 800f36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f36e:	2b40      	cmp	r3, #64	; 0x40
 800f370:	bf0c      	ite	eq
 800f372:	2301      	moveq	r3, #1
 800f374:	2300      	movne	r3, #0
 800f376:	b2db      	uxtb	r3, r3
 800f378:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f380:	b2db      	uxtb	r3, r3
 800f382:	2b22      	cmp	r3, #34	; 0x22
 800f384:	d108      	bne.n	800f398 <UART_DMAError+0x7a>
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d005      	beq.n	800f398 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	2200      	movs	r2, #0
 800f390:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800f392:	68b8      	ldr	r0, [r7, #8]
 800f394:	f000 f86d 	bl	800f472 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f39c:	f043 0210 	orr.w	r2, r3, #16
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3a4:	68b8      	ldr	r0, [r7, #8]
 800f3a6:	f7ff ff37 	bl	800f218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3aa:	bf00      	nop
 800f3ac:	3710      	adds	r7, #16
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}

0800f3b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b084      	sub	sp, #16
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	60f8      	str	r0, [r7, #12]
 800f3ba:	60b9      	str	r1, [r7, #8]
 800f3bc:	603b      	str	r3, [r7, #0]
 800f3be:	4613      	mov	r3, r2
 800f3c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f3c2:	e02c      	b.n	800f41e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ca:	d028      	beq.n	800f41e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d007      	beq.n	800f3e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800f3d2:	f7f8 ffe5 	bl	80083a0 <HAL_GetTick>
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	69ba      	ldr	r2, [r7, #24]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d21d      	bcs.n	800f41e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	68da      	ldr	r2, [r3, #12]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f3f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	695a      	ldr	r2, [r3, #20]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f022 0201 	bic.w	r2, r2, #1
 800f400:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	2220      	movs	r2, #32
 800f406:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	2220      	movs	r2, #32
 800f40e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800f41a:	2303      	movs	r3, #3
 800f41c:	e00f      	b.n	800f43e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	681a      	ldr	r2, [r3, #0]
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	4013      	ands	r3, r2
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	bf0c      	ite	eq
 800f42e:	2301      	moveq	r3, #1
 800f430:	2300      	movne	r3, #0
 800f432:	b2db      	uxtb	r3, r3
 800f434:	461a      	mov	r2, r3
 800f436:	79fb      	ldrb	r3, [r7, #7]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d0c3      	beq.n	800f3c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f43c:	2300      	movs	r3, #0
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	68da      	ldr	r2, [r3, #12]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f45c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2220      	movs	r2, #32
 800f462:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800f466:	bf00      	nop
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr

0800f472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	68da      	ldr	r2, [r3, #12]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f488:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	695a      	ldr	r2, [r3, #20]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f022 0201 	bic.w	r2, r2, #1
 800f498:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2220      	movs	r2, #32
 800f49e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800f4a2:	bf00      	nop
 800f4a4:	370c      	adds	r7, #12
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr

0800f4ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f4ae:	b580      	push	{r7, lr}
 800f4b0:	b084      	sub	sp, #16
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f7ff fea5 	bl	800f218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f4ce:	bf00      	nop
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}

0800f4d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f4d6:	b480      	push	{r7}
 800f4d8:	b085      	sub	sp, #20
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	2b21      	cmp	r3, #33	; 0x21
 800f4e8:	d144      	bne.n	800f574 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4f2:	d11a      	bne.n	800f52a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a1b      	ldr	r3, [r3, #32]
 800f4f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	461a      	mov	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f508:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	691b      	ldr	r3, [r3, #16]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d105      	bne.n	800f51e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6a1b      	ldr	r3, [r3, #32]
 800f516:	1c9a      	adds	r2, r3, #2
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	621a      	str	r2, [r3, #32]
 800f51c:	e00e      	b.n	800f53c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6a1b      	ldr	r3, [r3, #32]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	621a      	str	r2, [r3, #32]
 800f528:	e008      	b.n	800f53c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	1c59      	adds	r1, r3, #1
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	6211      	str	r1, [r2, #32]
 800f534:	781a      	ldrb	r2, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800f540:	b29b      	uxth	r3, r3
 800f542:	3b01      	subs	r3, #1
 800f544:	b29b      	uxth	r3, r3
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	4619      	mov	r1, r3
 800f54a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10f      	bne.n	800f570 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	68da      	ldr	r2, [r3, #12]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f55e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	68da      	ldr	r2, [r3, #12]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f56e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f570:	2300      	movs	r3, #0
 800f572:	e000      	b.n	800f576 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f574:	2302      	movs	r3, #2
  }
}
 800f576:	4618      	mov	r0, r3
 800f578:	3714      	adds	r7, #20
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr

0800f582 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	68da      	ldr	r2, [r3, #12]
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f598:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2220      	movs	r2, #32
 800f59e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f7ff fe24 	bl	800f1f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3708      	adds	r7, #8
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b084      	sub	sp, #16
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	2b22      	cmp	r3, #34	; 0x22
 800f5c4:	d171      	bne.n	800f6aa <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	689b      	ldr	r3, [r3, #8]
 800f5ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5ce:	d123      	bne.n	800f618 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5d4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d10e      	bne.n	800f5fc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5f4:	1c9a      	adds	r2, r3, #2
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	629a      	str	r2, [r3, #40]	; 0x28
 800f5fa:	e029      	b.n	800f650 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	b29b      	uxth	r3, r3
 800f604:	b2db      	uxtb	r3, r3
 800f606:	b29a      	uxth	r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f610:	1c5a      	adds	r2, r3, #1
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	629a      	str	r2, [r3, #40]	; 0x28
 800f616:	e01b      	b.n	800f650 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	691b      	ldr	r3, [r3, #16]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10a      	bne.n	800f636 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6858      	ldr	r0, [r3, #4]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f62a:	1c59      	adds	r1, r3, #1
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	6291      	str	r1, [r2, #40]	; 0x28
 800f630:	b2c2      	uxtb	r2, r0
 800f632:	701a      	strb	r2, [r3, #0]
 800f634:	e00c      	b.n	800f650 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f642:	1c58      	adds	r0, r3, #1
 800f644:	6879      	ldr	r1, [r7, #4]
 800f646:	6288      	str	r0, [r1, #40]	; 0x28
 800f648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f64c:	b2d2      	uxtb	r2, r2
 800f64e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f654:	b29b      	uxth	r3, r3
 800f656:	3b01      	subs	r3, #1
 800f658:	b29b      	uxth	r3, r3
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	4619      	mov	r1, r3
 800f65e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800f660:	2b00      	cmp	r3, #0
 800f662:	d120      	bne.n	800f6a6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	68da      	ldr	r2, [r3, #12]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f022 0220 	bic.w	r2, r2, #32
 800f672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	68da      	ldr	r2, [r3, #12]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	695a      	ldr	r2, [r3, #20]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f022 0201 	bic.w	r2, r2, #1
 800f692:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2220      	movs	r2, #32
 800f698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f7f7 ffc5 	bl	800762c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	e002      	b.n	800f6ac <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e000      	b.n	800f6ac <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800f6aa:	2302      	movs	r3, #2
  }
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	b085      	sub	sp, #20
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	68da      	ldr	r2, [r3, #12]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	430a      	orrs	r2, r1
 800f6d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	689a      	ldr	r2, [r3, #8]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	691b      	ldr	r3, [r3, #16]
 800f6dc:	431a      	orrs	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	431a      	orrs	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	69db      	ldr	r3, [r3, #28]
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f6f6:	f023 030c 	bic.w	r3, r3, #12
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	6812      	ldr	r2, [r2, #0]
 800f6fe:	68f9      	ldr	r1, [r7, #12]
 800f700:	430b      	orrs	r3, r1
 800f702:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	699a      	ldr	r2, [r3, #24]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	430a      	orrs	r2, r1
 800f718:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	69db      	ldr	r3, [r3, #28]
 800f71e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f722:	f040 818b 	bne.w	800fa3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4ac1      	ldr	r2, [pc, #772]	; (800fa30 <UART_SetConfig+0x37c>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d005      	beq.n	800f73c <UART_SetConfig+0x88>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4abf      	ldr	r2, [pc, #764]	; (800fa34 <UART_SetConfig+0x380>)
 800f736:	4293      	cmp	r3, r2
 800f738:	f040 80bd 	bne.w	800f8b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f73c:	f7fd fc40 	bl	800cfc0 <HAL_RCC_GetPCLK2Freq>
 800f740:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	461d      	mov	r5, r3
 800f746:	f04f 0600 	mov.w	r6, #0
 800f74a:	46a8      	mov	r8, r5
 800f74c:	46b1      	mov	r9, r6
 800f74e:	eb18 0308 	adds.w	r3, r8, r8
 800f752:	eb49 0409 	adc.w	r4, r9, r9
 800f756:	4698      	mov	r8, r3
 800f758:	46a1      	mov	r9, r4
 800f75a:	eb18 0805 	adds.w	r8, r8, r5
 800f75e:	eb49 0906 	adc.w	r9, r9, r6
 800f762:	f04f 0100 	mov.w	r1, #0
 800f766:	f04f 0200 	mov.w	r2, #0
 800f76a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f76e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f772:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f776:	4688      	mov	r8, r1
 800f778:	4691      	mov	r9, r2
 800f77a:	eb18 0005 	adds.w	r0, r8, r5
 800f77e:	eb49 0106 	adc.w	r1, r9, r6
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	461d      	mov	r5, r3
 800f788:	f04f 0600 	mov.w	r6, #0
 800f78c:	196b      	adds	r3, r5, r5
 800f78e:	eb46 0406 	adc.w	r4, r6, r6
 800f792:	461a      	mov	r2, r3
 800f794:	4623      	mov	r3, r4
 800f796:	f7f1 fa57 	bl	8000c48 <__aeabi_uldivmod>
 800f79a:	4603      	mov	r3, r0
 800f79c:	460c      	mov	r4, r1
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4ba5      	ldr	r3, [pc, #660]	; (800fa38 <UART_SetConfig+0x384>)
 800f7a2:	fba3 2302 	umull	r2, r3, r3, r2
 800f7a6:	095b      	lsrs	r3, r3, #5
 800f7a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	461d      	mov	r5, r3
 800f7b0:	f04f 0600 	mov.w	r6, #0
 800f7b4:	46a9      	mov	r9, r5
 800f7b6:	46b2      	mov	sl, r6
 800f7b8:	eb19 0309 	adds.w	r3, r9, r9
 800f7bc:	eb4a 040a 	adc.w	r4, sl, sl
 800f7c0:	4699      	mov	r9, r3
 800f7c2:	46a2      	mov	sl, r4
 800f7c4:	eb19 0905 	adds.w	r9, r9, r5
 800f7c8:	eb4a 0a06 	adc.w	sl, sl, r6
 800f7cc:	f04f 0100 	mov.w	r1, #0
 800f7d0:	f04f 0200 	mov.w	r2, #0
 800f7d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f7d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f7dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f7e0:	4689      	mov	r9, r1
 800f7e2:	4692      	mov	sl, r2
 800f7e4:	eb19 0005 	adds.w	r0, r9, r5
 800f7e8:	eb4a 0106 	adc.w	r1, sl, r6
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	461d      	mov	r5, r3
 800f7f2:	f04f 0600 	mov.w	r6, #0
 800f7f6:	196b      	adds	r3, r5, r5
 800f7f8:	eb46 0406 	adc.w	r4, r6, r6
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4623      	mov	r3, r4
 800f800:	f7f1 fa22 	bl	8000c48 <__aeabi_uldivmod>
 800f804:	4603      	mov	r3, r0
 800f806:	460c      	mov	r4, r1
 800f808:	461a      	mov	r2, r3
 800f80a:	4b8b      	ldr	r3, [pc, #556]	; (800fa38 <UART_SetConfig+0x384>)
 800f80c:	fba3 1302 	umull	r1, r3, r3, r2
 800f810:	095b      	lsrs	r3, r3, #5
 800f812:	2164      	movs	r1, #100	; 0x64
 800f814:	fb01 f303 	mul.w	r3, r1, r3
 800f818:	1ad3      	subs	r3, r2, r3
 800f81a:	00db      	lsls	r3, r3, #3
 800f81c:	3332      	adds	r3, #50	; 0x32
 800f81e:	4a86      	ldr	r2, [pc, #536]	; (800fa38 <UART_SetConfig+0x384>)
 800f820:	fba2 2303 	umull	r2, r3, r2, r3
 800f824:	095b      	lsrs	r3, r3, #5
 800f826:	005b      	lsls	r3, r3, #1
 800f828:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f82c:	4498      	add	r8, r3
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	461d      	mov	r5, r3
 800f832:	f04f 0600 	mov.w	r6, #0
 800f836:	46a9      	mov	r9, r5
 800f838:	46b2      	mov	sl, r6
 800f83a:	eb19 0309 	adds.w	r3, r9, r9
 800f83e:	eb4a 040a 	adc.w	r4, sl, sl
 800f842:	4699      	mov	r9, r3
 800f844:	46a2      	mov	sl, r4
 800f846:	eb19 0905 	adds.w	r9, r9, r5
 800f84a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f84e:	f04f 0100 	mov.w	r1, #0
 800f852:	f04f 0200 	mov.w	r2, #0
 800f856:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f85a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f85e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f862:	4689      	mov	r9, r1
 800f864:	4692      	mov	sl, r2
 800f866:	eb19 0005 	adds.w	r0, r9, r5
 800f86a:	eb4a 0106 	adc.w	r1, sl, r6
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	461d      	mov	r5, r3
 800f874:	f04f 0600 	mov.w	r6, #0
 800f878:	196b      	adds	r3, r5, r5
 800f87a:	eb46 0406 	adc.w	r4, r6, r6
 800f87e:	461a      	mov	r2, r3
 800f880:	4623      	mov	r3, r4
 800f882:	f7f1 f9e1 	bl	8000c48 <__aeabi_uldivmod>
 800f886:	4603      	mov	r3, r0
 800f888:	460c      	mov	r4, r1
 800f88a:	461a      	mov	r2, r3
 800f88c:	4b6a      	ldr	r3, [pc, #424]	; (800fa38 <UART_SetConfig+0x384>)
 800f88e:	fba3 1302 	umull	r1, r3, r3, r2
 800f892:	095b      	lsrs	r3, r3, #5
 800f894:	2164      	movs	r1, #100	; 0x64
 800f896:	fb01 f303 	mul.w	r3, r1, r3
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	00db      	lsls	r3, r3, #3
 800f89e:	3332      	adds	r3, #50	; 0x32
 800f8a0:	4a65      	ldr	r2, [pc, #404]	; (800fa38 <UART_SetConfig+0x384>)
 800f8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a6:	095b      	lsrs	r3, r3, #5
 800f8a8:	f003 0207 	and.w	r2, r3, #7
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4442      	add	r2, r8
 800f8b2:	609a      	str	r2, [r3, #8]
 800f8b4:	e26f      	b.n	800fd96 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f8b6:	f7fd fb6f 	bl	800cf98 <HAL_RCC_GetPCLK1Freq>
 800f8ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	461d      	mov	r5, r3
 800f8c0:	f04f 0600 	mov.w	r6, #0
 800f8c4:	46a8      	mov	r8, r5
 800f8c6:	46b1      	mov	r9, r6
 800f8c8:	eb18 0308 	adds.w	r3, r8, r8
 800f8cc:	eb49 0409 	adc.w	r4, r9, r9
 800f8d0:	4698      	mov	r8, r3
 800f8d2:	46a1      	mov	r9, r4
 800f8d4:	eb18 0805 	adds.w	r8, r8, r5
 800f8d8:	eb49 0906 	adc.w	r9, r9, r6
 800f8dc:	f04f 0100 	mov.w	r1, #0
 800f8e0:	f04f 0200 	mov.w	r2, #0
 800f8e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f8e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f8ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f8f0:	4688      	mov	r8, r1
 800f8f2:	4691      	mov	r9, r2
 800f8f4:	eb18 0005 	adds.w	r0, r8, r5
 800f8f8:	eb49 0106 	adc.w	r1, r9, r6
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	461d      	mov	r5, r3
 800f902:	f04f 0600 	mov.w	r6, #0
 800f906:	196b      	adds	r3, r5, r5
 800f908:	eb46 0406 	adc.w	r4, r6, r6
 800f90c:	461a      	mov	r2, r3
 800f90e:	4623      	mov	r3, r4
 800f910:	f7f1 f99a 	bl	8000c48 <__aeabi_uldivmod>
 800f914:	4603      	mov	r3, r0
 800f916:	460c      	mov	r4, r1
 800f918:	461a      	mov	r2, r3
 800f91a:	4b47      	ldr	r3, [pc, #284]	; (800fa38 <UART_SetConfig+0x384>)
 800f91c:	fba3 2302 	umull	r2, r3, r3, r2
 800f920:	095b      	lsrs	r3, r3, #5
 800f922:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	461d      	mov	r5, r3
 800f92a:	f04f 0600 	mov.w	r6, #0
 800f92e:	46a9      	mov	r9, r5
 800f930:	46b2      	mov	sl, r6
 800f932:	eb19 0309 	adds.w	r3, r9, r9
 800f936:	eb4a 040a 	adc.w	r4, sl, sl
 800f93a:	4699      	mov	r9, r3
 800f93c:	46a2      	mov	sl, r4
 800f93e:	eb19 0905 	adds.w	r9, r9, r5
 800f942:	eb4a 0a06 	adc.w	sl, sl, r6
 800f946:	f04f 0100 	mov.w	r1, #0
 800f94a:	f04f 0200 	mov.w	r2, #0
 800f94e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f952:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f956:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f95a:	4689      	mov	r9, r1
 800f95c:	4692      	mov	sl, r2
 800f95e:	eb19 0005 	adds.w	r0, r9, r5
 800f962:	eb4a 0106 	adc.w	r1, sl, r6
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	461d      	mov	r5, r3
 800f96c:	f04f 0600 	mov.w	r6, #0
 800f970:	196b      	adds	r3, r5, r5
 800f972:	eb46 0406 	adc.w	r4, r6, r6
 800f976:	461a      	mov	r2, r3
 800f978:	4623      	mov	r3, r4
 800f97a:	f7f1 f965 	bl	8000c48 <__aeabi_uldivmod>
 800f97e:	4603      	mov	r3, r0
 800f980:	460c      	mov	r4, r1
 800f982:	461a      	mov	r2, r3
 800f984:	4b2c      	ldr	r3, [pc, #176]	; (800fa38 <UART_SetConfig+0x384>)
 800f986:	fba3 1302 	umull	r1, r3, r3, r2
 800f98a:	095b      	lsrs	r3, r3, #5
 800f98c:	2164      	movs	r1, #100	; 0x64
 800f98e:	fb01 f303 	mul.w	r3, r1, r3
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	00db      	lsls	r3, r3, #3
 800f996:	3332      	adds	r3, #50	; 0x32
 800f998:	4a27      	ldr	r2, [pc, #156]	; (800fa38 <UART_SetConfig+0x384>)
 800f99a:	fba2 2303 	umull	r2, r3, r2, r3
 800f99e:	095b      	lsrs	r3, r3, #5
 800f9a0:	005b      	lsls	r3, r3, #1
 800f9a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f9a6:	4498      	add	r8, r3
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	461d      	mov	r5, r3
 800f9ac:	f04f 0600 	mov.w	r6, #0
 800f9b0:	46a9      	mov	r9, r5
 800f9b2:	46b2      	mov	sl, r6
 800f9b4:	eb19 0309 	adds.w	r3, r9, r9
 800f9b8:	eb4a 040a 	adc.w	r4, sl, sl
 800f9bc:	4699      	mov	r9, r3
 800f9be:	46a2      	mov	sl, r4
 800f9c0:	eb19 0905 	adds.w	r9, r9, r5
 800f9c4:	eb4a 0a06 	adc.w	sl, sl, r6
 800f9c8:	f04f 0100 	mov.w	r1, #0
 800f9cc:	f04f 0200 	mov.w	r2, #0
 800f9d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f9d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9dc:	4689      	mov	r9, r1
 800f9de:	4692      	mov	sl, r2
 800f9e0:	eb19 0005 	adds.w	r0, r9, r5
 800f9e4:	eb4a 0106 	adc.w	r1, sl, r6
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	685b      	ldr	r3, [r3, #4]
 800f9ec:	461d      	mov	r5, r3
 800f9ee:	f04f 0600 	mov.w	r6, #0
 800f9f2:	196b      	adds	r3, r5, r5
 800f9f4:	eb46 0406 	adc.w	r4, r6, r6
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	4623      	mov	r3, r4
 800f9fc:	f7f1 f924 	bl	8000c48 <__aeabi_uldivmod>
 800fa00:	4603      	mov	r3, r0
 800fa02:	460c      	mov	r4, r1
 800fa04:	461a      	mov	r2, r3
 800fa06:	4b0c      	ldr	r3, [pc, #48]	; (800fa38 <UART_SetConfig+0x384>)
 800fa08:	fba3 1302 	umull	r1, r3, r3, r2
 800fa0c:	095b      	lsrs	r3, r3, #5
 800fa0e:	2164      	movs	r1, #100	; 0x64
 800fa10:	fb01 f303 	mul.w	r3, r1, r3
 800fa14:	1ad3      	subs	r3, r2, r3
 800fa16:	00db      	lsls	r3, r3, #3
 800fa18:	3332      	adds	r3, #50	; 0x32
 800fa1a:	4a07      	ldr	r2, [pc, #28]	; (800fa38 <UART_SetConfig+0x384>)
 800fa1c:	fba2 2303 	umull	r2, r3, r2, r3
 800fa20:	095b      	lsrs	r3, r3, #5
 800fa22:	f003 0207 	and.w	r2, r3, #7
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4442      	add	r2, r8
 800fa2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fa2e:	e1b2      	b.n	800fd96 <UART_SetConfig+0x6e2>
 800fa30:	40011000 	.word	0x40011000
 800fa34:	40011400 	.word	0x40011400
 800fa38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4ad7      	ldr	r2, [pc, #860]	; (800fda0 <UART_SetConfig+0x6ec>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d005      	beq.n	800fa52 <UART_SetConfig+0x39e>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4ad6      	ldr	r2, [pc, #856]	; (800fda4 <UART_SetConfig+0x6f0>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	f040 80d1 	bne.w	800fbf4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fa52:	f7fd fab5 	bl	800cfc0 <HAL_RCC_GetPCLK2Freq>
 800fa56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	469a      	mov	sl, r3
 800fa5c:	f04f 0b00 	mov.w	fp, #0
 800fa60:	46d0      	mov	r8, sl
 800fa62:	46d9      	mov	r9, fp
 800fa64:	eb18 0308 	adds.w	r3, r8, r8
 800fa68:	eb49 0409 	adc.w	r4, r9, r9
 800fa6c:	4698      	mov	r8, r3
 800fa6e:	46a1      	mov	r9, r4
 800fa70:	eb18 080a 	adds.w	r8, r8, sl
 800fa74:	eb49 090b 	adc.w	r9, r9, fp
 800fa78:	f04f 0100 	mov.w	r1, #0
 800fa7c:	f04f 0200 	mov.w	r2, #0
 800fa80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fa84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fa88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fa8c:	4688      	mov	r8, r1
 800fa8e:	4691      	mov	r9, r2
 800fa90:	eb1a 0508 	adds.w	r5, sl, r8
 800fa94:	eb4b 0609 	adc.w	r6, fp, r9
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	f04f 0200 	mov.w	r2, #0
 800faa2:	f04f 0300 	mov.w	r3, #0
 800faa6:	f04f 0400 	mov.w	r4, #0
 800faaa:	0094      	lsls	r4, r2, #2
 800faac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fab0:	008b      	lsls	r3, r1, #2
 800fab2:	461a      	mov	r2, r3
 800fab4:	4623      	mov	r3, r4
 800fab6:	4628      	mov	r0, r5
 800fab8:	4631      	mov	r1, r6
 800faba:	f7f1 f8c5 	bl	8000c48 <__aeabi_uldivmod>
 800fabe:	4603      	mov	r3, r0
 800fac0:	460c      	mov	r4, r1
 800fac2:	461a      	mov	r2, r3
 800fac4:	4bb8      	ldr	r3, [pc, #736]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fac6:	fba3 2302 	umull	r2, r3, r3, r2
 800faca:	095b      	lsrs	r3, r3, #5
 800facc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	469b      	mov	fp, r3
 800fad4:	f04f 0c00 	mov.w	ip, #0
 800fad8:	46d9      	mov	r9, fp
 800fada:	46e2      	mov	sl, ip
 800fadc:	eb19 0309 	adds.w	r3, r9, r9
 800fae0:	eb4a 040a 	adc.w	r4, sl, sl
 800fae4:	4699      	mov	r9, r3
 800fae6:	46a2      	mov	sl, r4
 800fae8:	eb19 090b 	adds.w	r9, r9, fp
 800faec:	eb4a 0a0c 	adc.w	sl, sl, ip
 800faf0:	f04f 0100 	mov.w	r1, #0
 800faf4:	f04f 0200 	mov.w	r2, #0
 800faf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fafc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb04:	4689      	mov	r9, r1
 800fb06:	4692      	mov	sl, r2
 800fb08:	eb1b 0509 	adds.w	r5, fp, r9
 800fb0c:	eb4c 060a 	adc.w	r6, ip, sl
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	4619      	mov	r1, r3
 800fb16:	f04f 0200 	mov.w	r2, #0
 800fb1a:	f04f 0300 	mov.w	r3, #0
 800fb1e:	f04f 0400 	mov.w	r4, #0
 800fb22:	0094      	lsls	r4, r2, #2
 800fb24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb28:	008b      	lsls	r3, r1, #2
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	4623      	mov	r3, r4
 800fb2e:	4628      	mov	r0, r5
 800fb30:	4631      	mov	r1, r6
 800fb32:	f7f1 f889 	bl	8000c48 <__aeabi_uldivmod>
 800fb36:	4603      	mov	r3, r0
 800fb38:	460c      	mov	r4, r1
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	4b9a      	ldr	r3, [pc, #616]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fb3e:	fba3 1302 	umull	r1, r3, r3, r2
 800fb42:	095b      	lsrs	r3, r3, #5
 800fb44:	2164      	movs	r1, #100	; 0x64
 800fb46:	fb01 f303 	mul.w	r3, r1, r3
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	011b      	lsls	r3, r3, #4
 800fb4e:	3332      	adds	r3, #50	; 0x32
 800fb50:	4a95      	ldr	r2, [pc, #596]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fb52:	fba2 2303 	umull	r2, r3, r2, r3
 800fb56:	095b      	lsrs	r3, r3, #5
 800fb58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb5c:	4498      	add	r8, r3
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	469b      	mov	fp, r3
 800fb62:	f04f 0c00 	mov.w	ip, #0
 800fb66:	46d9      	mov	r9, fp
 800fb68:	46e2      	mov	sl, ip
 800fb6a:	eb19 0309 	adds.w	r3, r9, r9
 800fb6e:	eb4a 040a 	adc.w	r4, sl, sl
 800fb72:	4699      	mov	r9, r3
 800fb74:	46a2      	mov	sl, r4
 800fb76:	eb19 090b 	adds.w	r9, r9, fp
 800fb7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fb7e:	f04f 0100 	mov.w	r1, #0
 800fb82:	f04f 0200 	mov.w	r2, #0
 800fb86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb92:	4689      	mov	r9, r1
 800fb94:	4692      	mov	sl, r2
 800fb96:	eb1b 0509 	adds.w	r5, fp, r9
 800fb9a:	eb4c 060a 	adc.w	r6, ip, sl
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	4619      	mov	r1, r3
 800fba4:	f04f 0200 	mov.w	r2, #0
 800fba8:	f04f 0300 	mov.w	r3, #0
 800fbac:	f04f 0400 	mov.w	r4, #0
 800fbb0:	0094      	lsls	r4, r2, #2
 800fbb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fbb6:	008b      	lsls	r3, r1, #2
 800fbb8:	461a      	mov	r2, r3
 800fbba:	4623      	mov	r3, r4
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	f7f1 f842 	bl	8000c48 <__aeabi_uldivmod>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	461a      	mov	r2, r3
 800fbca:	4b77      	ldr	r3, [pc, #476]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fbcc:	fba3 1302 	umull	r1, r3, r3, r2
 800fbd0:	095b      	lsrs	r3, r3, #5
 800fbd2:	2164      	movs	r1, #100	; 0x64
 800fbd4:	fb01 f303 	mul.w	r3, r1, r3
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	3332      	adds	r3, #50	; 0x32
 800fbde:	4a72      	ldr	r2, [pc, #456]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800fbe4:	095b      	lsrs	r3, r3, #5
 800fbe6:	f003 020f 	and.w	r2, r3, #15
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4442      	add	r2, r8
 800fbf0:	609a      	str	r2, [r3, #8]
 800fbf2:	e0d0      	b.n	800fd96 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fbf4:	f7fd f9d0 	bl	800cf98 <HAL_RCC_GetPCLK1Freq>
 800fbf8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	469a      	mov	sl, r3
 800fbfe:	f04f 0b00 	mov.w	fp, #0
 800fc02:	46d0      	mov	r8, sl
 800fc04:	46d9      	mov	r9, fp
 800fc06:	eb18 0308 	adds.w	r3, r8, r8
 800fc0a:	eb49 0409 	adc.w	r4, r9, r9
 800fc0e:	4698      	mov	r8, r3
 800fc10:	46a1      	mov	r9, r4
 800fc12:	eb18 080a 	adds.w	r8, r8, sl
 800fc16:	eb49 090b 	adc.w	r9, r9, fp
 800fc1a:	f04f 0100 	mov.w	r1, #0
 800fc1e:	f04f 0200 	mov.w	r2, #0
 800fc22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fc26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fc2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fc2e:	4688      	mov	r8, r1
 800fc30:	4691      	mov	r9, r2
 800fc32:	eb1a 0508 	adds.w	r5, sl, r8
 800fc36:	eb4b 0609 	adc.w	r6, fp, r9
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	4619      	mov	r1, r3
 800fc40:	f04f 0200 	mov.w	r2, #0
 800fc44:	f04f 0300 	mov.w	r3, #0
 800fc48:	f04f 0400 	mov.w	r4, #0
 800fc4c:	0094      	lsls	r4, r2, #2
 800fc4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc52:	008b      	lsls	r3, r1, #2
 800fc54:	461a      	mov	r2, r3
 800fc56:	4623      	mov	r3, r4
 800fc58:	4628      	mov	r0, r5
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	f7f0 fff4 	bl	8000c48 <__aeabi_uldivmod>
 800fc60:	4603      	mov	r3, r0
 800fc62:	460c      	mov	r4, r1
 800fc64:	461a      	mov	r2, r3
 800fc66:	4b50      	ldr	r3, [pc, #320]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fc68:	fba3 2302 	umull	r2, r3, r3, r2
 800fc6c:	095b      	lsrs	r3, r3, #5
 800fc6e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	469b      	mov	fp, r3
 800fc76:	f04f 0c00 	mov.w	ip, #0
 800fc7a:	46d9      	mov	r9, fp
 800fc7c:	46e2      	mov	sl, ip
 800fc7e:	eb19 0309 	adds.w	r3, r9, r9
 800fc82:	eb4a 040a 	adc.w	r4, sl, sl
 800fc86:	4699      	mov	r9, r3
 800fc88:	46a2      	mov	sl, r4
 800fc8a:	eb19 090b 	adds.w	r9, r9, fp
 800fc8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc92:	f04f 0100 	mov.w	r1, #0
 800fc96:	f04f 0200 	mov.w	r2, #0
 800fc9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fca2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fca6:	4689      	mov	r9, r1
 800fca8:	4692      	mov	sl, r2
 800fcaa:	eb1b 0509 	adds.w	r5, fp, r9
 800fcae:	eb4c 060a 	adc.w	r6, ip, sl
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	f04f 0200 	mov.w	r2, #0
 800fcbc:	f04f 0300 	mov.w	r3, #0
 800fcc0:	f04f 0400 	mov.w	r4, #0
 800fcc4:	0094      	lsls	r4, r2, #2
 800fcc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fcca:	008b      	lsls	r3, r1, #2
 800fccc:	461a      	mov	r2, r3
 800fcce:	4623      	mov	r3, r4
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	4631      	mov	r1, r6
 800fcd4:	f7f0 ffb8 	bl	8000c48 <__aeabi_uldivmod>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	460c      	mov	r4, r1
 800fcdc:	461a      	mov	r2, r3
 800fcde:	4b32      	ldr	r3, [pc, #200]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fce0:	fba3 1302 	umull	r1, r3, r3, r2
 800fce4:	095b      	lsrs	r3, r3, #5
 800fce6:	2164      	movs	r1, #100	; 0x64
 800fce8:	fb01 f303 	mul.w	r3, r1, r3
 800fcec:	1ad3      	subs	r3, r2, r3
 800fcee:	011b      	lsls	r3, r3, #4
 800fcf0:	3332      	adds	r3, #50	; 0x32
 800fcf2:	4a2d      	ldr	r2, [pc, #180]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fcf4:	fba2 2303 	umull	r2, r3, r2, r3
 800fcf8:	095b      	lsrs	r3, r3, #5
 800fcfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcfe:	4498      	add	r8, r3
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	469b      	mov	fp, r3
 800fd04:	f04f 0c00 	mov.w	ip, #0
 800fd08:	46d9      	mov	r9, fp
 800fd0a:	46e2      	mov	sl, ip
 800fd0c:	eb19 0309 	adds.w	r3, r9, r9
 800fd10:	eb4a 040a 	adc.w	r4, sl, sl
 800fd14:	4699      	mov	r9, r3
 800fd16:	46a2      	mov	sl, r4
 800fd18:	eb19 090b 	adds.w	r9, r9, fp
 800fd1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fd20:	f04f 0100 	mov.w	r1, #0
 800fd24:	f04f 0200 	mov.w	r2, #0
 800fd28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd34:	4689      	mov	r9, r1
 800fd36:	4692      	mov	sl, r2
 800fd38:	eb1b 0509 	adds.w	r5, fp, r9
 800fd3c:	eb4c 060a 	adc.w	r6, ip, sl
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	4619      	mov	r1, r3
 800fd46:	f04f 0200 	mov.w	r2, #0
 800fd4a:	f04f 0300 	mov.w	r3, #0
 800fd4e:	f04f 0400 	mov.w	r4, #0
 800fd52:	0094      	lsls	r4, r2, #2
 800fd54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd58:	008b      	lsls	r3, r1, #2
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	4623      	mov	r3, r4
 800fd5e:	4628      	mov	r0, r5
 800fd60:	4631      	mov	r1, r6
 800fd62:	f7f0 ff71 	bl	8000c48 <__aeabi_uldivmod>
 800fd66:	4603      	mov	r3, r0
 800fd68:	460c      	mov	r4, r1
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	4b0e      	ldr	r3, [pc, #56]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fd6e:	fba3 1302 	umull	r1, r3, r3, r2
 800fd72:	095b      	lsrs	r3, r3, #5
 800fd74:	2164      	movs	r1, #100	; 0x64
 800fd76:	fb01 f303 	mul.w	r3, r1, r3
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	011b      	lsls	r3, r3, #4
 800fd7e:	3332      	adds	r3, #50	; 0x32
 800fd80:	4a09      	ldr	r2, [pc, #36]	; (800fda8 <UART_SetConfig+0x6f4>)
 800fd82:	fba2 2303 	umull	r2, r3, r2, r3
 800fd86:	095b      	lsrs	r3, r3, #5
 800fd88:	f003 020f 	and.w	r2, r3, #15
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	4442      	add	r2, r8
 800fd92:	609a      	str	r2, [r3, #8]
}
 800fd94:	e7ff      	b.n	800fd96 <UART_SetConfig+0x6e2>
 800fd96:	bf00      	nop
 800fd98:	3714      	adds	r7, #20
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda0:	40011000 	.word	0x40011000
 800fda4:	40011400 	.word	0x40011400
 800fda8:	51eb851f 	.word	0x51eb851f

0800fdac <FILTER_init>:
 *  Created on: 20 ao�t 2020
 *      Author: Th�o
 */
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
 800fdac:	b480      	push	{r7}
 800fdae:	b087      	sub	sp, #28
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	4613      	mov	r3, r2
 800fdb8:	71fb      	strb	r3, [r7, #7]
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
 800fdba:	2300      	movs	r3, #0
 800fdbc:	617b      	str	r3, [r7, #20]
 800fdbe:	e00c      	b.n	800fdda <FILTER_init+0x2e>
		filter->settings[s] = settings[s] ;
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	009b      	lsls	r3, r3, #2
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	68f9      	ldr	r1, [r7, #12]
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	009b      	lsls	r3, r3, #2
 800fdd0:	440b      	add	r3, r1
 800fdd2:	601a      	str	r2, [r3, #0]
	for(int32_t s = 0; s < 3; s++)
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	617b      	str	r3, [r7, #20]
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2b02      	cmp	r3, #2
 800fdde:	ddef      	ble.n	800fdc0 <FILTER_init+0x14>
	//Mode de filtrage, first order or second order
	filter->order = order ;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	79fa      	ldrb	r2, [r7, #7]
 800fde4:	761a      	strb	r2, [r3, #24]
}
 800fde6:	bf00      	nop
 800fde8:	371c      	adds	r7, #28
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr

0800fdf2 <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
 800fdf2:	b480      	push	{r7}
 800fdf4:	b085      	sub	sp, #20
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
 800fdfa:	ed87 0a00 	vstr	s0, [r7]
	float to_return = 0 ;
 800fdfe:	f04f 0300 	mov.w	r3, #0
 800fe02:	60fb      	str	r3, [r7, #12]
	switch(filter->order){
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	7e1b      	ldrb	r3, [r3, #24]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d01f      	beq.n	800fe4c <FILTER_process+0x5a>
 800fe0c:	2b02      	cmp	r3, #2
 800fe0e:	d047      	beq.n	800fea0 <FILTER_process+0xae>
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d148      	bne.n	800fea6 <FILTER_process+0xb4>
		case FILTER_FIRST_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	ed93 7a00 	vldr	s14, [r3]
 800fe1a:	edd7 7a00 	vldr	s15, [r7]
 800fe1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	edd3 6a04 	vldr	s13, [r3, #16]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[1] = filter->values[0];
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	68da      	ldr	r2, [r3, #12]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	611a      	str	r2, [r3, #16]
			to_return =  filter->values[0];
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	60fb      	str	r3, [r7, #12]
			break ;
 800fe4a:	e02f      	b.n	800feac <FILTER_process+0xba>

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	ed93 7a00 	vldr	s14, [r3]
 800fe52:	edd7 7a00 	vldr	s15, [r7]
 800fe56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	edd3 6a04 	vldr	s13, [r3, #16]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	edd3 6a05 	vldr	s13, [r3, #20]
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	edd3 7a02 	vldr	s15, [r3, #8]
 800fe7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fe7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	edc3 7a03 	vstr	s15, [r3, #12]
			filter->values[2] = filter->values[1];
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	691a      	ldr	r2, [r3, #16]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	615a      	str	r2, [r3, #20]
			filter->values[1] = filter->values[0];
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	68da      	ldr	r2, [r3, #12]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	611a      	str	r2, [r3, #16]
			to_return = filter->values[0];
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	60fb      	str	r3, [r7, #12]
			break;
 800fe9e:	e005      	b.n	800feac <FILTER_process+0xba>

		case FILTER_NO_FILTERING :
			to_return = new_value ;
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	60fb      	str	r3, [r7, #12]
			break;
 800fea4:	e002      	b.n	800feac <FILTER_process+0xba>
		default:
			to_return = new_value ;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	60fb      	str	r3, [r7, #12]
			break;
 800feaa:	bf00      	nop
	}

	return to_return ;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	ee07 3a90 	vmov	s15, r3
};
 800feb2:	eeb0 0a67 	vmov.f32	s0, s15
 800feb6:	3714      	adds	r7, #20
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr

0800fec0 <check_sum_f>:
static rx_cplt_mode_e rx_cplt_mode ;
static ibus_t * ibus ;	//On ne peut utilsier qu'une radio en ibus à la fois

//Fonction privé qui test si le checsum est bon sur un buffer
uint32_t check_sum_f(uint8_t * buffer);
uint32_t check_sum_f(uint8_t * buffer){
 800fec0:	b480      	push	{r7}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0 ;
 800fec8:	2300      	movs	r3, #0
 800feca:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800fecc:	2300      	movs	r3, #0
 800fece:	72fb      	strb	r3, [r7, #11]
 800fed0:	e00a      	b.n	800fee8 <check_sum_f+0x28>
		sum += (uint32_t)buffer[b];
 800fed2:	7afb      	ldrb	r3, [r7, #11]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	4413      	add	r3, r2
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4413      	add	r3, r2
 800fee0:	60fb      	str	r3, [r7, #12]
	for(uint8_t b=0; b <30; b++)
 800fee2:	7afb      	ldrb	r3, [r7, #11]
 800fee4:	3301      	adds	r3, #1
 800fee6:	72fb      	strb	r3, [r7, #11]
 800fee8:	7afb      	ldrb	r3, [r7, #11]
 800feea:	2b1d      	cmp	r3, #29
 800feec:	d9f1      	bls.n	800fed2 <check_sum_f+0x12>
	return sum ;
 800feee:	68fb      	ldr	r3, [r7, #12]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3714      	adds	r7, #20
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <IBUS_init>:

void IBUS_init(ibus_t * ibus_, UART_HandleTypeDef * huart, void(*data_rdy_callback)){
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b084      	sub	sp, #16
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
	ibus = ibus_;
 800ff08:	4a0e      	ldr	r2, [pc, #56]	; (800ff44 <IBUS_init+0x48>)
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6013      	str	r3, [r2, #0]
	ibus->huart = huart ;
 800ff0e:	4b0d      	ldr	r3, [pc, #52]	; (800ff44 <IBUS_init+0x48>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	68ba      	ldr	r2, [r7, #8]
 800ff14:	601a      	str	r2, [r3, #0]
	ibus->data_rdy_callback = data_rdy_callback ;
 800ff16:	4b0b      	ldr	r3, [pc, #44]	; (800ff44 <IBUS_init+0x48>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	639a      	str	r2, [r3, #56]	; 0x38
	//On lance la lecture
	HAL_UART_Receive_DMA(ibus->huart, ibus->dma_buffer, SIZE_DMA_BUFFER);
 800ff1e:	4b09      	ldr	r3, [pc, #36]	; (800ff44 <IBUS_init+0x48>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	6818      	ldr	r0, [r3, #0]
 800ff24:	4b07      	ldr	r3, [pc, #28]	; (800ff44 <IBUS_init+0x48>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	3304      	adds	r3, #4
 800ff2a:	2214      	movs	r2, #20
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	f7fe ffdf 	bl	800eef0 <HAL_UART_Receive_DMA>
	ibus->index_write = 1 ;
 800ff32:	4b04      	ldr	r3, [pc, #16]	; (800ff44 <IBUS_init+0x48>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2201      	movs	r2, #1
 800ff38:	761a      	strb	r2, [r3, #24]
}
 800ff3a:	bf00      	nop
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	200024ac 	.word	0x200024ac

0800ff48 <IBUS_RxCplt>:

void IBUS_RxCplt(UART_HandleTypeDef * huart){
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800ff50:	4b08      	ldr	r3, [pc, #32]	; (800ff74 <IBUS_RxCplt+0x2c>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d106      	bne.n	800ff6a <IBUS_RxCplt+0x22>
		rx_cplt_mode = MODE_CPLT_FULL;
 800ff5c:	4b06      	ldr	r3, [pc, #24]	; (800ff78 <IBUS_RxCplt+0x30>)
 800ff5e:	2201      	movs	r2, #1
 800ff60:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800ff62:	4b04      	ldr	r3, [pc, #16]	; (800ff74 <IBUS_RxCplt+0x2c>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff68:	4798      	blx	r3
	}
}
 800ff6a:	bf00      	nop
 800ff6c:	3708      	adds	r7, #8
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	200024ac 	.word	0x200024ac
 800ff78:	200024a8 	.word	0x200024a8

0800ff7c <IBUS_RxHalfCplt>:
void IBUS_RxHalfCplt(UART_HandleTypeDef * huart){
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
	if(huart == ibus->huart){
 800ff84:	4b08      	ldr	r3, [pc, #32]	; (800ffa8 <IBUS_RxHalfCplt+0x2c>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	687a      	ldr	r2, [r7, #4]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d106      	bne.n	800ff9e <IBUS_RxHalfCplt+0x22>
		rx_cplt_mode = MODE_CPLT_HALF ;
 800ff90:	4b06      	ldr	r3, [pc, #24]	; (800ffac <IBUS_RxHalfCplt+0x30>)
 800ff92:	2200      	movs	r2, #0
 800ff94:	701a      	strb	r2, [r3, #0]
		ibus->data_rdy_callback();
 800ff96:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <IBUS_RxHalfCplt+0x2c>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff9c:	4798      	blx	r3
	}
}
 800ff9e:	bf00      	nop
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	200024ac 	.word	0x200024ac
 800ffac:	200024a8 	.word	0x200024a8

0800ffb0 <IBUS_Channel_Update>:

bool_e IBUS_Channel_Update(void){
 800ffb0:	b5b0      	push	{r4, r5, r7, lr}
 800ffb2:	b088      	sub	sp, #32
 800ffb4:	af00      	add	r7, sp, #0

	bool_e to_return = FALSE ;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	61fb      	str	r3, [r7, #28]

	if(rx_cplt_mode == MODE_CPLT_HALF)
 800ffba:	4ba0      	ldr	r3, [pc, #640]	; (801023c <IBUS_Channel_Update+0x28c>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	f040 80ba 	bne.w	8010138 <IBUS_Channel_Update+0x188>
	{
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	76fb      	strb	r3, [r7, #27]
 800ffc8:	e0b1      	b.n	801012e <IBUS_Channel_Update+0x17e>
			switch(ibus->state){
 800ffca:	4b9d      	ldr	r3, [pc, #628]	; (8010240 <IBUS_Channel_Update+0x290>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d01b      	beq.n	801000e <IBUS_Channel_Update+0x5e>
 800ffd6:	2b02      	cmp	r3, #2
 800ffd8:	d041      	beq.n	801005e <IBUS_Channel_Update+0xae>
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f040 80a4 	bne.w	8010128 <IBUS_Channel_Update+0x178>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 800ffe0:	4b97      	ldr	r3, [pc, #604]	; (8010240 <IBUS_Channel_Update+0x290>)
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	7efb      	ldrb	r3, [r7, #27]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	791b      	ldrb	r3, [r3, #4]
 800ffea:	2b20      	cmp	r3, #32
 800ffec:	f040 8097 	bne.w	801011e <IBUS_Channel_Update+0x16e>
						ibus->state = STATE_IBUS_COMMAND ;
 800fff0:	4b93      	ldr	r3, [pc, #588]	; (8010240 <IBUS_Channel_Update+0x290>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	2201      	movs	r2, #1
 800fff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 800fffa:	4b91      	ldr	r3, [pc, #580]	; (8010240 <IBUS_Channel_Update+0x290>)
 800fffc:	6819      	ldr	r1, [r3, #0]
 800fffe:	7efa      	ldrb	r2, [r7, #27]
 8010000:	4b8f      	ldr	r3, [pc, #572]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	440a      	add	r2, r1
 8010006:	7912      	ldrb	r2, [r2, #4]
 8010008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 801000c:	e087      	b.n	801011e <IBUS_Channel_Update+0x16e>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 801000e:	4b8c      	ldr	r3, [pc, #560]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	7efb      	ldrb	r3, [r7, #27]
 8010014:	4413      	add	r3, r2
 8010016:	791b      	ldrb	r3, [r3, #4]
 8010018:	2b40      	cmp	r3, #64	; 0x40
 801001a:	d113      	bne.n	8010044 <IBUS_Channel_Update+0x94>
						ibus->state = STATE_IBUS_CHANNELS ;
 801001c:	4b88      	ldr	r3, [pc, #544]	; (8010240 <IBUS_Channel_Update+0x290>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2202      	movs	r2, #2
 8010022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 8010026:	4b86      	ldr	r3, [pc, #536]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010028:	6819      	ldr	r1, [r3, #0]
 801002a:	7efa      	ldrb	r2, [r7, #27]
 801002c:	4b84      	ldr	r3, [pc, #528]	; (8010240 <IBUS_Channel_Update+0x290>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	440a      	add	r2, r1
 8010032:	7912      	ldrb	r2, [r2, #4]
 8010034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 8010038:	4b81      	ldr	r3, [pc, #516]	; (8010240 <IBUS_Channel_Update+0x290>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	2202      	movs	r2, #2
 801003e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 8010042:	e06e      	b.n	8010122 <IBUS_Channel_Update+0x172>
					else if(ibus->dma_buffer[c] != 0x20)
 8010044:	4b7e      	ldr	r3, [pc, #504]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	7efb      	ldrb	r3, [r7, #27]
 801004a:	4413      	add	r3, r2
 801004c:	791b      	ldrb	r3, [r3, #4]
 801004e:	2b20      	cmp	r3, #32
 8010050:	d067      	beq.n	8010122 <IBUS_Channel_Update+0x172>
						ibus->state = STATE_IBUS_LENGTH ;
 8010052:	4b7b      	ldr	r3, [pc, #492]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2200      	movs	r2, #0
 8010058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 801005c:	e061      	b.n	8010122 <IBUS_Channel_Update+0x172>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 801005e:	4b78      	ldr	r3, [pc, #480]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010060:	681c      	ldr	r4, [r3, #0]
 8010062:	7ef8      	ldrb	r0, [r7, #27]
 8010064:	4b76      	ldr	r3, [pc, #472]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010066:	6819      	ldr	r1, [r3, #0]
 8010068:	4b75      	ldr	r3, [pc, #468]	; (8010240 <IBUS_Channel_Update+0x290>)
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8010070:	1c55      	adds	r5, r2, #1
 8010072:	b2ad      	uxth	r5, r5
 8010074:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 8010078:	4615      	mov	r5, r2
 801007a:	1823      	adds	r3, r4, r0
 801007c:	791a      	ldrb	r2, [r3, #4]
 801007e:	194b      	adds	r3, r1, r5
 8010080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 8010084:	4b6e      	ldr	r3, [pc, #440]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801008c:	2b20      	cmp	r3, #32
 801008e:	d14a      	bne.n	8010126 <IBUS_Channel_Update+0x176>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 8010090:	4b6b      	ldr	r3, [pc, #428]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8010098:	461a      	mov	r2, r3
 801009a:	4b69      	ldr	r3, [pc, #420]	; (8010240 <IBUS_Channel_Update+0x290>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80100a2:	021b      	lsls	r3, r3, #8
 80100a4:	4313      	orrs	r3, r2
 80100a6:	607b      	str	r3, [r7, #4]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 80100a8:	4b65      	ldr	r3, [pc, #404]	; (8010240 <IBUS_Channel_Update+0x290>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	333d      	adds	r3, #61	; 0x3d
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7ff ff06 	bl	800fec0 <check_sum_f>
 80100b4:	4603      	mov	r3, r0
 80100b6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80100ba:	33ff      	adds	r3, #255	; 0xff
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d127      	bne.n	8010112 <IBUS_Channel_Update+0x162>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 80100c2:	2300      	movs	r3, #0
 80100c4:	617b      	str	r3, [r7, #20]
 80100c6:	e01f      	b.n	8010108 <IBUS_Channel_Update+0x158>
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 80100c8:	4b5d      	ldr	r3, [pc, #372]	; (8010240 <IBUS_Channel_Update+0x290>)
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	3302      	adds	r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100d6:	b21a      	sxth	r2, r3
 80100d8:	4b59      	ldr	r3, [pc, #356]	; (8010240 <IBUS_Channel_Update+0x290>)
 80100da:	6819      	ldr	r1, [r3, #0]
 80100dc:	697b      	ldr	r3, [r7, #20]
 80100de:	3303      	adds	r3, #3
 80100e0:	440b      	add	r3, r1
 80100e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100e6:	021b      	lsls	r3, r3, #8
 80100e8:	b21b      	sxth	r3, r3
 80100ea:	4313      	orrs	r3, r2
 80100ec:	b219      	sxth	r1, r3
 80100ee:	4b54      	ldr	r3, [pc, #336]	; (8010240 <IBUS_Channel_Update+0x290>)
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	085b      	lsrs	r3, r3, #1
 80100f6:	b289      	uxth	r1, r1
 80100f8:	330c      	adds	r3, #12
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	4413      	add	r3, r2
 80100fe:	460a      	mov	r2, r1
 8010100:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	3302      	adds	r3, #2
 8010106:	617b      	str	r3, [r7, #20]
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	2b1b      	cmp	r3, #27
 801010c:	d9dc      	bls.n	80100c8 <IBUS_Channel_Update+0x118>
							to_return = TRUE;
 801010e:	2301      	movs	r3, #1
 8010110:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 8010112:	4b4b      	ldr	r3, [pc, #300]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2200      	movs	r2, #0
 8010118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 801011c:	e003      	b.n	8010126 <IBUS_Channel_Update+0x176>
					break;
 801011e:	bf00      	nop
 8010120:	e002      	b.n	8010128 <IBUS_Channel_Update+0x178>
					break ;
 8010122:	bf00      	nop
 8010124:	e000      	b.n	8010128 <IBUS_Channel_Update+0x178>
					break;
 8010126:	bf00      	nop
		for(uint8_t c = 0; c < SIZE_DMA_BUFFER / 2; c++){
 8010128:	7efb      	ldrb	r3, [r7, #27]
 801012a:	3301      	adds	r3, #1
 801012c:	76fb      	strb	r3, [r7, #27]
 801012e:	7efb      	ldrb	r3, [r7, #27]
 8010130:	2b09      	cmp	r3, #9
 8010132:	f67f af4a 	bls.w	800ffca <IBUS_Channel_Update+0x1a>
 8010136:	e0bc      	b.n	80102b2 <IBUS_Channel_Update+0x302>
			}
		}
	}
	else
	{
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 8010138:	230a      	movs	r3, #10
 801013a:	74fb      	strb	r3, [r7, #19]
 801013c:	e0b5      	b.n	80102aa <IBUS_Channel_Update+0x2fa>
			switch(ibus->state){
 801013e:	4b40      	ldr	r3, [pc, #256]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010146:	2b01      	cmp	r3, #1
 8010148:	d01b      	beq.n	8010182 <IBUS_Channel_Update+0x1d2>
 801014a:	2b02      	cmp	r3, #2
 801014c:	d041      	beq.n	80101d2 <IBUS_Channel_Update+0x222>
 801014e:	2b00      	cmp	r3, #0
 8010150:	f040 80a8 	bne.w	80102a4 <IBUS_Channel_Update+0x2f4>
				case STATE_IBUS_LENGTH :
					//ON sait que si on reçoit pas une lentgh de 0x20 (32) c pas bon
					if(ibus->dma_buffer[c] == 0x20){
 8010154:	4b3a      	ldr	r3, [pc, #232]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	7cfb      	ldrb	r3, [r7, #19]
 801015a:	4413      	add	r3, r2
 801015c:	791b      	ldrb	r3, [r3, #4]
 801015e:	2b20      	cmp	r3, #32
 8010160:	f040 809b 	bne.w	801029a <IBUS_Channel_Update+0x2ea>
						ibus->state = STATE_IBUS_COMMAND ;
 8010164:	4b36      	ldr	r3, [pc, #216]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2201      	movs	r2, #1
 801016a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[0] = ibus->dma_buffer[c] ;
 801016e:	4b34      	ldr	r3, [pc, #208]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010170:	6819      	ldr	r1, [r3, #0]
 8010172:	7cfa      	ldrb	r2, [r7, #19]
 8010174:	4b32      	ldr	r3, [pc, #200]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	440a      	add	r2, r1
 801017a:	7912      	ldrb	r2, [r2, #4]
 801017c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					}
					break;
 8010180:	e08b      	b.n	801029a <IBUS_Channel_Update+0x2ea>
				case STATE_IBUS_COMMAND :
					//Seul commande qu'on connait btw
					if(ibus->dma_buffer[c] == 0x40){
 8010182:	4b2f      	ldr	r3, [pc, #188]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	7cfb      	ldrb	r3, [r7, #19]
 8010188:	4413      	add	r3, r2
 801018a:	791b      	ldrb	r3, [r3, #4]
 801018c:	2b40      	cmp	r3, #64	; 0x40
 801018e:	d113      	bne.n	80101b8 <IBUS_Channel_Update+0x208>
						ibus->state = STATE_IBUS_CHANNELS ;
 8010190:	4b2b      	ldr	r3, [pc, #172]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2202      	movs	r2, #2
 8010196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
						ibus->buffer[1] = ibus->dma_buffer[c] ;
 801019a:	4b29      	ldr	r3, [pc, #164]	; (8010240 <IBUS_Channel_Update+0x290>)
 801019c:	6819      	ldr	r1, [r3, #0]
 801019e:	7cfa      	ldrb	r2, [r7, #19]
 80101a0:	4b27      	ldr	r3, [pc, #156]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	440a      	add	r2, r1
 80101a6:	7912      	ldrb	r2, [r2, #4]
 80101a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
						ibus->compteur = 2 ;
 80101ac:	4b24      	ldr	r3, [pc, #144]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2202      	movs	r2, #2
 80101b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					}
					//ON check que du coup c pas la commande de départ au cas ou et sinon retour au début
					else if(ibus->dma_buffer[c] != 0x20)
						ibus->state = STATE_IBUS_LENGTH ;
					break ;
 80101b6:	e072      	b.n	801029e <IBUS_Channel_Update+0x2ee>
					else if(ibus->dma_buffer[c] != 0x20)
 80101b8:	4b21      	ldr	r3, [pc, #132]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	7cfb      	ldrb	r3, [r7, #19]
 80101be:	4413      	add	r3, r2
 80101c0:	791b      	ldrb	r3, [r3, #4]
 80101c2:	2b20      	cmp	r3, #32
 80101c4:	d06b      	beq.n	801029e <IBUS_Channel_Update+0x2ee>
						ibus->state = STATE_IBUS_LENGTH ;
 80101c6:	4b1e      	ldr	r3, [pc, #120]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					break ;
 80101d0:	e065      	b.n	801029e <IBUS_Channel_Update+0x2ee>

				case STATE_IBUS_CHANNELS :
					ibus->buffer[ibus->compteur++] = ibus->dma_buffer[c] ;
 80101d2:	4b1b      	ldr	r3, [pc, #108]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101d4:	681c      	ldr	r4, [r3, #0]
 80101d6:	7cf8      	ldrb	r0, [r7, #19]
 80101d8:	4b19      	ldr	r3, [pc, #100]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101da:	6819      	ldr	r1, [r3, #0]
 80101dc:	4b18      	ldr	r3, [pc, #96]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80101e4:	1c55      	adds	r5, r2, #1
 80101e6:	b2ad      	uxth	r5, r5
 80101e8:	f8a3 505e 	strh.w	r5, [r3, #94]	; 0x5e
 80101ec:	4615      	mov	r5, r2
 80101ee:	1823      	adds	r3, r4, r0
 80101f0:	791a      	ldrb	r2, [r3, #4]
 80101f2:	194b      	adds	r3, r1, r5
 80101f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					if(ibus->compteur == 32){
 80101f8:	4b11      	ldr	r3, [pc, #68]	; (8010240 <IBUS_Channel_Update+0x290>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010200:	2b20      	cmp	r3, #32
 8010202:	d14e      	bne.n	80102a2 <IBUS_Channel_Update+0x2f2>
						uint32_t cs = (uint32_t)(ibus->buffer[30] | (ibus->buffer[31] << 8)) ;
 8010204:	4b0e      	ldr	r3, [pc, #56]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 801020c:	461a      	mov	r2, r3
 801020e:	4b0c      	ldr	r3, [pc, #48]	; (8010240 <IBUS_Channel_Update+0x290>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8010216:	021b      	lsls	r3, r3, #8
 8010218:	4313      	orrs	r3, r2
 801021a:	60bb      	str	r3, [r7, #8]
						if(0xFFFF - check_sum_f(ibus->buffer)== cs)
 801021c:	4b08      	ldr	r3, [pc, #32]	; (8010240 <IBUS_Channel_Update+0x290>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	333d      	adds	r3, #61	; 0x3d
 8010222:	4618      	mov	r0, r3
 8010224:	f7ff fe4c 	bl	800fec0 <check_sum_f>
 8010228:	4603      	mov	r3, r0
 801022a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 801022e:	33ff      	adds	r3, #255	; 0xff
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	429a      	cmp	r2, r3
 8010234:	d12b      	bne.n	801028e <IBUS_Channel_Update+0x2de>
						{
							for(uint32_t radio = 0; radio < 28; radio +=2)
 8010236:	2300      	movs	r3, #0
 8010238:	60fb      	str	r3, [r7, #12]
 801023a:	e023      	b.n	8010284 <IBUS_Channel_Update+0x2d4>
 801023c:	200024a8 	.word	0x200024a8
 8010240:	200024ac 	.word	0x200024ac
								ibus->channels[radio / 2] = (int32_t)(ibus->buffer[radio+2] | (ibus->buffer[radio + 3] << 8));
 8010244:	4b1d      	ldr	r3, [pc, #116]	; (80102bc <IBUS_Channel_Update+0x30c>)
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	3302      	adds	r3, #2
 801024c:	4413      	add	r3, r2
 801024e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010252:	b21a      	sxth	r2, r3
 8010254:	4b19      	ldr	r3, [pc, #100]	; (80102bc <IBUS_Channel_Update+0x30c>)
 8010256:	6819      	ldr	r1, [r3, #0]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3303      	adds	r3, #3
 801025c:	440b      	add	r3, r1
 801025e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010262:	021b      	lsls	r3, r3, #8
 8010264:	b21b      	sxth	r3, r3
 8010266:	4313      	orrs	r3, r2
 8010268:	b219      	sxth	r1, r3
 801026a:	4b14      	ldr	r3, [pc, #80]	; (80102bc <IBUS_Channel_Update+0x30c>)
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	085b      	lsrs	r3, r3, #1
 8010272:	b289      	uxth	r1, r1
 8010274:	330c      	adds	r3, #12
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	4413      	add	r3, r2
 801027a:	460a      	mov	r2, r1
 801027c:	805a      	strh	r2, [r3, #2]
							for(uint32_t radio = 0; radio < 28; radio +=2)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	3302      	adds	r3, #2
 8010282:	60fb      	str	r3, [r7, #12]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2b1b      	cmp	r3, #27
 8010288:	d9dc      	bls.n	8010244 <IBUS_Channel_Update+0x294>
							to_return = TRUE;
 801028a:	2301      	movs	r3, #1
 801028c:	61fb      	str	r3, [r7, #28]
						}
						ibus->state = STATE_IBUS_LENGTH ;
 801028e:	4b0b      	ldr	r3, [pc, #44]	; (80102bc <IBUS_Channel_Update+0x30c>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2200      	movs	r2, #0
 8010294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					}
					break;
 8010298:	e003      	b.n	80102a2 <IBUS_Channel_Update+0x2f2>
					break;
 801029a:	bf00      	nop
 801029c:	e002      	b.n	80102a4 <IBUS_Channel_Update+0x2f4>
					break ;
 801029e:	bf00      	nop
 80102a0:	e000      	b.n	80102a4 <IBUS_Channel_Update+0x2f4>
					break;
 80102a2:	bf00      	nop
		for(uint8_t c = 10; c < SIZE_DMA_BUFFER ; c++){
 80102a4:	7cfb      	ldrb	r3, [r7, #19]
 80102a6:	3301      	adds	r3, #1
 80102a8:	74fb      	strb	r3, [r7, #19]
 80102aa:	7cfb      	ldrb	r3, [r7, #19]
 80102ac:	2b13      	cmp	r3, #19
 80102ae:	f67f af46 	bls.w	801013e <IBUS_Channel_Update+0x18e>
		}
	}



	return to_return ;
 80102b2:	69fb      	ldr	r3, [r7, #28]
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3720      	adds	r7, #32
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bdb0      	pop	{r4, r5, r7, pc}
 80102bc:	200024ac 	.word	0x200024ac

080102c0 <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, uint16_t * duty, bool_e start){
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	607a      	str	r2, [r7, #4]
 80102cc:	603b      	str	r3, [r7, #0]
	motors->htim = htim ;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	68ba      	ldr	r2, [r7, #8]
 80102d2:	601a      	str	r2, [r3, #0]
	motors->duty = duty;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	609a      	str	r2, [r3, #8]
	if(start){
 80102da:	683b      	ldr	r3, [r7, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d022      	beq.n	8010326 <MOTORS_Init+0x66>
		motors->state = MOTORS_STATE_RUNNING ;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2201      	movs	r2, #1
 80102e4:	711a      	strb	r2, [r3, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80102e6:	2100      	movs	r1, #0
 80102e8:	68b8      	ldr	r0, [r7, #8]
 80102ea:	f7fd fd21 	bl	800dd30 <HAL_TIM_PWM_Start>
 80102ee:	4603      	mov	r3, r0
 80102f0:	461a      	mov	r2, r3
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 80102f6:	2104      	movs	r1, #4
 80102f8:	68b8      	ldr	r0, [r7, #8]
 80102fa:	f7fd fd19 	bl	800dd30 <HAL_TIM_PWM_Start>
 80102fe:	4603      	mov	r3, r0
 8010300:	461a      	mov	r2, r3
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8010306:	2108      	movs	r1, #8
 8010308:	68b8      	ldr	r0, [r7, #8]
 801030a:	f7fd fd11 	bl	800dd30 <HAL_TIM_PWM_Start>
 801030e:	4603      	mov	r3, r0
 8010310:	461a      	mov	r2, r3
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	731a      	strb	r2, [r3, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8010316:	210c      	movs	r1, #12
 8010318:	68b8      	ldr	r0, [r7, #8]
 801031a:	f7fd fd09 	bl	800dd30 <HAL_TIM_PWM_Start>
 801031e:	4603      	mov	r3, r0
 8010320:	461a      	mov	r2, r3
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	731a      	strb	r2, [r3, #12]
	}
}
 8010326:	bf00      	nop
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_2);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_3);
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){
 801032e:	b480      	push	{r7}
 8010330:	b083      	sub	sp, #12
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]

	motors->duty[0] = MIN(1000, motors->duty[0]);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	689b      	ldr	r3, [r3, #8]
 801033a:	881a      	ldrh	r2, [r3, #0]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010344:	bf28      	it	cs
 8010346:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 801034a:	b292      	uxth	r2, r2
 801034c:	801a      	strh	r2, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	689b      	ldr	r3, [r3, #8]
 8010352:	3302      	adds	r3, #2
 8010354:	881a      	ldrh	r2, [r3, #0]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	689b      	ldr	r3, [r3, #8]
 801035a:	3302      	adds	r3, #2
 801035c:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010360:	bf28      	it	cs
 8010362:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8010366:	b292      	uxth	r2, r2
 8010368:	801a      	strh	r2, [r3, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	689b      	ldr	r3, [r3, #8]
 801036e:	3304      	adds	r3, #4
 8010370:	881a      	ldrh	r2, [r3, #0]
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	3304      	adds	r3, #4
 8010378:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801037c:	bf28      	it	cs
 801037e:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 8010382:	b292      	uxth	r2, r2
 8010384:	801a      	strh	r2, [r3, #0]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	3306      	adds	r3, #6
 801038c:	881a      	ldrh	r2, [r3, #0]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	689b      	ldr	r3, [r3, #8]
 8010392:	3306      	adds	r3, #6
 8010394:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8010398:	bf28      	it	cs
 801039a:	f44f 727a 	movcs.w	r2, #1000	; 0x3e8
 801039e:	b292      	uxth	r2, r2
 80103a0:	801a      	strh	r2, [r3, #0]


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	689b      	ldr	r3, [r3, #8]
 80103a6:	881b      	ldrh	r3, [r3, #0]
 80103a8:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	635a      	str	r2, [r3, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	3302      	adds	r3, #2
 80103ba:	881b      	ldrh	r3, [r3, #0]
 80103bc:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	639a      	str	r2, [r3, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	3304      	adds	r3, #4
 80103ce:	881b      	ldrh	r3, [r3, #0]
 80103d0:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	63da      	str	r2, [r3, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	3306      	adds	r3, #6
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	f203 32e7 	addw	r2, r3, #999	; 0x3e7
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr

080103fc <PID_compute>:
 */

#include "../Inc/Pid.h"

//renvoit la sortie du pid
float PID_compute(PID_t * pid, float consigne, float measurement){
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	ed87 0a02 	vstr	s0, [r7, #8]
 8010408:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calcul de l'erreur
	pid->error = measurement - consigne ;
 801040c:	ed97 7a01 	vldr	s14, [r7, #4]
 8010410:	edd7 7a02 	vldr	s15, [r7, #8]
 8010414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//Calcul des P I D
	pid->P = pid->settings[PID_KP] * pid->error ;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	ed93 7a04 	vldr	s14, [r3, #16]
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801042a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	edc3 7a01 	vstr	s15, [r3, #4]
	pid->I += pid->settings[PID_KI] * pid->error / pid->settings[PID_FREQUENCY];
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	ed93 7a02 	vldr	s14, [r3, #8]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	edd3 6a05 	vldr	s13, [r3, #20]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8010446:	ee26 6aa7 	vmul.f32	s12, s13, s15
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	edd3 6a07 	vldr	s13, [r3, #28]
 8010450:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	edc3 7a02 	vstr	s15, [r3, #8]
	pid->D = pid->settings[PID_KD] * (measurement - pid->previous_measurement) * pid->settings[PID_FREQUENCY] ;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	ed93 7a06 	vldr	s14, [r3, #24]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801046a:	edd7 6a01 	vldr	s13, [r7, #4]
 801046e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	edd3 7a07 	vldr	s15, [r3, #28]
 801047c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	edc3 7a03 	vstr	s15, [r3, #12]

	//Filtrage
	pid->D = FILTER_process(&pid->d_filter, pid->D);
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	edd3 7a03 	vldr	s15, [r3, #12]
 8010492:	eeb0 0a67 	vmov.f32	s0, s15
 8010496:	4610      	mov	r0, r2
 8010498:	f7ff fcab 	bl	800fdf2 <FILTER_process>
 801049c:	eef0 7a40 	vmov.f32	s15, s0
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	edc3 7a03 	vstr	s15, [r3, #12]

	//On somme le tout
	pid->output = pid->P + pid->I + pid->D ;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80104b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80104bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	edc3 7a00 	vstr	s15, [r3]

	//Check mid and max
	pid->output = MIN(pid->settings[PID_MAX_OUTPUT], pid->output);
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	edd3 7a00 	vldr	s15, [r3]
 80104d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80104d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104da:	dd02      	ble.n	80104e2 <PID_compute+0xe6>
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	e001      	b.n	80104e6 <PID_compute+0xea>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6a1b      	ldr	r3, [r3, #32]
 80104e6:	68fa      	ldr	r2, [r7, #12]
 80104e8:	6013      	str	r3, [r2, #0]
	pid->output = MAX(-pid->settings[PID_MAX_OUTPUT], pid->output);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80104f0:	eeb1 7a67 	vneg.f32	s14, s15
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	edd3 7a00 	vldr	s15, [r3]
 80104fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80104fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010502:	dd05      	ble.n	8010510 <PID_compute+0x114>
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	edd3 7a08 	vldr	s15, [r3, #32]
 801050a:	eef1 7a67 	vneg.f32	s15, s15
 801050e:	e002      	b.n	8010516 <PID_compute+0x11a>
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	edd3 7a00 	vldr	s15, [r3]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	edc3 7a00 	vstr	s15, [r3]

	//Mise � jour des valeurs ant�rieures
	pid->previous_measurement = measurement ;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	629a      	str	r2, [r3, #40]	; 0x28
	return pid->output ;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	ee07 3a90 	vmov	s15, r3
}
 801052a:	eeb0 0a67 	vmov.f32	s0, s15
 801052e:	3710      	adds	r7, #16
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <PID_init>:



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	603b      	str	r3, [r7, #0]
 8010540:	4613      	mov	r3, r2
 8010542:	71fb      	strb	r3, [r7, #7]
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 8010544:	2300      	movs	r3, #0
 8010546:	75fb      	strb	r3, [r7, #23]
 8010548:	e00d      	b.n	8010566 <PID_init+0x32>
		pid->settings[s] = settings[s] ;
 801054a:	7dfb      	ldrb	r3, [r7, #23]
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	441a      	add	r2, r3
 8010552:	7dfb      	ldrb	r3, [r7, #23]
 8010554:	6812      	ldr	r2, [r2, #0]
 8010556:	68f9      	ldr	r1, [r7, #12]
 8010558:	3304      	adds	r3, #4
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	440b      	add	r3, r1
 801055e:	601a      	str	r2, [r3, #0]
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
 8010560:	7dfb      	ldrb	r3, [r7, #23]
 8010562:	3301      	adds	r3, #1
 8010564:	75fb      	strb	r3, [r7, #23]
 8010566:	7dfb      	ldrb	r3, [r7, #23]
 8010568:	2b04      	cmp	r3, #4
 801056a:	d9ee      	bls.n	801054a <PID_init+0x16>

	//Init values
	pid->P = 0 ;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	f04f 0200 	mov.w	r2, #0
 8010572:	605a      	str	r2, [r3, #4]
	pid->I = 0 ;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f04f 0200 	mov.w	r2, #0
 801057a:	609a      	str	r2, [r3, #8]
	pid->D = 0 ;
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f04f 0200 	mov.w	r2, #0
 8010582:	60da      	str	r2, [r3, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	332c      	adds	r3, #44	; 0x2c
 8010588:	79fa      	ldrb	r2, [r7, #7]
 801058a:	6839      	ldr	r1, [r7, #0]
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff fc0d 	bl	800fdac <FILTER_init>
}
 8010592:	bf00      	nop
 8010594:	3718      	adds	r7, #24
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
	...

0801059c <__errno>:
 801059c:	4b01      	ldr	r3, [pc, #4]	; (80105a4 <__errno+0x8>)
 801059e:	6818      	ldr	r0, [r3, #0]
 80105a0:	4770      	bx	lr
 80105a2:	bf00      	nop
 80105a4:	20001cb4 	.word	0x20001cb4

080105a8 <__libc_init_array>:
 80105a8:	b570      	push	{r4, r5, r6, lr}
 80105aa:	4e0d      	ldr	r6, [pc, #52]	; (80105e0 <__libc_init_array+0x38>)
 80105ac:	4c0d      	ldr	r4, [pc, #52]	; (80105e4 <__libc_init_array+0x3c>)
 80105ae:	1ba4      	subs	r4, r4, r6
 80105b0:	10a4      	asrs	r4, r4, #2
 80105b2:	2500      	movs	r5, #0
 80105b4:	42a5      	cmp	r5, r4
 80105b6:	d109      	bne.n	80105cc <__libc_init_array+0x24>
 80105b8:	4e0b      	ldr	r6, [pc, #44]	; (80105e8 <__libc_init_array+0x40>)
 80105ba:	4c0c      	ldr	r4, [pc, #48]	; (80105ec <__libc_init_array+0x44>)
 80105bc:	f004 f82c 	bl	8014618 <_init>
 80105c0:	1ba4      	subs	r4, r4, r6
 80105c2:	10a4      	asrs	r4, r4, #2
 80105c4:	2500      	movs	r5, #0
 80105c6:	42a5      	cmp	r5, r4
 80105c8:	d105      	bne.n	80105d6 <__libc_init_array+0x2e>
 80105ca:	bd70      	pop	{r4, r5, r6, pc}
 80105cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80105d0:	4798      	blx	r3
 80105d2:	3501      	adds	r5, #1
 80105d4:	e7ee      	b.n	80105b4 <__libc_init_array+0xc>
 80105d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80105da:	4798      	blx	r3
 80105dc:	3501      	adds	r5, #1
 80105de:	e7f2      	b.n	80105c6 <__libc_init_array+0x1e>
 80105e0:	08014d44 	.word	0x08014d44
 80105e4:	08014d44 	.word	0x08014d44
 80105e8:	08014d44 	.word	0x08014d44
 80105ec:	08014d48 	.word	0x08014d48

080105f0 <memcpy>:
 80105f0:	b510      	push	{r4, lr}
 80105f2:	1e43      	subs	r3, r0, #1
 80105f4:	440a      	add	r2, r1
 80105f6:	4291      	cmp	r1, r2
 80105f8:	d100      	bne.n	80105fc <memcpy+0xc>
 80105fa:	bd10      	pop	{r4, pc}
 80105fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010604:	e7f7      	b.n	80105f6 <memcpy+0x6>

08010606 <memmove>:
 8010606:	4288      	cmp	r0, r1
 8010608:	b510      	push	{r4, lr}
 801060a:	eb01 0302 	add.w	r3, r1, r2
 801060e:	d807      	bhi.n	8010620 <memmove+0x1a>
 8010610:	1e42      	subs	r2, r0, #1
 8010612:	4299      	cmp	r1, r3
 8010614:	d00a      	beq.n	801062c <memmove+0x26>
 8010616:	f811 4b01 	ldrb.w	r4, [r1], #1
 801061a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801061e:	e7f8      	b.n	8010612 <memmove+0xc>
 8010620:	4283      	cmp	r3, r0
 8010622:	d9f5      	bls.n	8010610 <memmove+0xa>
 8010624:	1881      	adds	r1, r0, r2
 8010626:	1ad2      	subs	r2, r2, r3
 8010628:	42d3      	cmn	r3, r2
 801062a:	d100      	bne.n	801062e <memmove+0x28>
 801062c:	bd10      	pop	{r4, pc}
 801062e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010632:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010636:	e7f7      	b.n	8010628 <memmove+0x22>

08010638 <memset>:
 8010638:	4402      	add	r2, r0
 801063a:	4603      	mov	r3, r0
 801063c:	4293      	cmp	r3, r2
 801063e:	d100      	bne.n	8010642 <memset+0xa>
 8010640:	4770      	bx	lr
 8010642:	f803 1b01 	strb.w	r1, [r3], #1
 8010646:	e7f9      	b.n	801063c <memset+0x4>

08010648 <__cvt>:
 8010648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801064c:	ec55 4b10 	vmov	r4, r5, d0
 8010650:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010652:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010656:	2d00      	cmp	r5, #0
 8010658:	460e      	mov	r6, r1
 801065a:	4691      	mov	r9, r2
 801065c:	4619      	mov	r1, r3
 801065e:	bfb8      	it	lt
 8010660:	4622      	movlt	r2, r4
 8010662:	462b      	mov	r3, r5
 8010664:	f027 0720 	bic.w	r7, r7, #32
 8010668:	bfbb      	ittet	lt
 801066a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801066e:	461d      	movlt	r5, r3
 8010670:	2300      	movge	r3, #0
 8010672:	232d      	movlt	r3, #45	; 0x2d
 8010674:	bfb8      	it	lt
 8010676:	4614      	movlt	r4, r2
 8010678:	2f46      	cmp	r7, #70	; 0x46
 801067a:	700b      	strb	r3, [r1, #0]
 801067c:	d004      	beq.n	8010688 <__cvt+0x40>
 801067e:	2f45      	cmp	r7, #69	; 0x45
 8010680:	d100      	bne.n	8010684 <__cvt+0x3c>
 8010682:	3601      	adds	r6, #1
 8010684:	2102      	movs	r1, #2
 8010686:	e000      	b.n	801068a <__cvt+0x42>
 8010688:	2103      	movs	r1, #3
 801068a:	ab03      	add	r3, sp, #12
 801068c:	9301      	str	r3, [sp, #4]
 801068e:	ab02      	add	r3, sp, #8
 8010690:	9300      	str	r3, [sp, #0]
 8010692:	4632      	mov	r2, r6
 8010694:	4653      	mov	r3, sl
 8010696:	ec45 4b10 	vmov	d0, r4, r5
 801069a:	f000 fea9 	bl	80113f0 <_dtoa_r>
 801069e:	2f47      	cmp	r7, #71	; 0x47
 80106a0:	4680      	mov	r8, r0
 80106a2:	d102      	bne.n	80106aa <__cvt+0x62>
 80106a4:	f019 0f01 	tst.w	r9, #1
 80106a8:	d026      	beq.n	80106f8 <__cvt+0xb0>
 80106aa:	2f46      	cmp	r7, #70	; 0x46
 80106ac:	eb08 0906 	add.w	r9, r8, r6
 80106b0:	d111      	bne.n	80106d6 <__cvt+0x8e>
 80106b2:	f898 3000 	ldrb.w	r3, [r8]
 80106b6:	2b30      	cmp	r3, #48	; 0x30
 80106b8:	d10a      	bne.n	80106d0 <__cvt+0x88>
 80106ba:	2200      	movs	r2, #0
 80106bc:	2300      	movs	r3, #0
 80106be:	4620      	mov	r0, r4
 80106c0:	4629      	mov	r1, r5
 80106c2:	f7f0 fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 80106c6:	b918      	cbnz	r0, 80106d0 <__cvt+0x88>
 80106c8:	f1c6 0601 	rsb	r6, r6, #1
 80106cc:	f8ca 6000 	str.w	r6, [sl]
 80106d0:	f8da 3000 	ldr.w	r3, [sl]
 80106d4:	4499      	add	r9, r3
 80106d6:	2200      	movs	r2, #0
 80106d8:	2300      	movs	r3, #0
 80106da:	4620      	mov	r0, r4
 80106dc:	4629      	mov	r1, r5
 80106de:	f7f0 f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80106e2:	b938      	cbnz	r0, 80106f4 <__cvt+0xac>
 80106e4:	2230      	movs	r2, #48	; 0x30
 80106e6:	9b03      	ldr	r3, [sp, #12]
 80106e8:	454b      	cmp	r3, r9
 80106ea:	d205      	bcs.n	80106f8 <__cvt+0xb0>
 80106ec:	1c59      	adds	r1, r3, #1
 80106ee:	9103      	str	r1, [sp, #12]
 80106f0:	701a      	strb	r2, [r3, #0]
 80106f2:	e7f8      	b.n	80106e6 <__cvt+0x9e>
 80106f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80106f8:	9b03      	ldr	r3, [sp, #12]
 80106fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80106fc:	eba3 0308 	sub.w	r3, r3, r8
 8010700:	4640      	mov	r0, r8
 8010702:	6013      	str	r3, [r2, #0]
 8010704:	b004      	add	sp, #16
 8010706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801070a <__exponent>:
 801070a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801070c:	2900      	cmp	r1, #0
 801070e:	4604      	mov	r4, r0
 8010710:	bfba      	itte	lt
 8010712:	4249      	neglt	r1, r1
 8010714:	232d      	movlt	r3, #45	; 0x2d
 8010716:	232b      	movge	r3, #43	; 0x2b
 8010718:	2909      	cmp	r1, #9
 801071a:	f804 2b02 	strb.w	r2, [r4], #2
 801071e:	7043      	strb	r3, [r0, #1]
 8010720:	dd20      	ble.n	8010764 <__exponent+0x5a>
 8010722:	f10d 0307 	add.w	r3, sp, #7
 8010726:	461f      	mov	r7, r3
 8010728:	260a      	movs	r6, #10
 801072a:	fb91 f5f6 	sdiv	r5, r1, r6
 801072e:	fb06 1115 	mls	r1, r6, r5, r1
 8010732:	3130      	adds	r1, #48	; 0x30
 8010734:	2d09      	cmp	r5, #9
 8010736:	f803 1c01 	strb.w	r1, [r3, #-1]
 801073a:	f103 32ff 	add.w	r2, r3, #4294967295
 801073e:	4629      	mov	r1, r5
 8010740:	dc09      	bgt.n	8010756 <__exponent+0x4c>
 8010742:	3130      	adds	r1, #48	; 0x30
 8010744:	3b02      	subs	r3, #2
 8010746:	f802 1c01 	strb.w	r1, [r2, #-1]
 801074a:	42bb      	cmp	r3, r7
 801074c:	4622      	mov	r2, r4
 801074e:	d304      	bcc.n	801075a <__exponent+0x50>
 8010750:	1a10      	subs	r0, r2, r0
 8010752:	b003      	add	sp, #12
 8010754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010756:	4613      	mov	r3, r2
 8010758:	e7e7      	b.n	801072a <__exponent+0x20>
 801075a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801075e:	f804 2b01 	strb.w	r2, [r4], #1
 8010762:	e7f2      	b.n	801074a <__exponent+0x40>
 8010764:	2330      	movs	r3, #48	; 0x30
 8010766:	4419      	add	r1, r3
 8010768:	7083      	strb	r3, [r0, #2]
 801076a:	1d02      	adds	r2, r0, #4
 801076c:	70c1      	strb	r1, [r0, #3]
 801076e:	e7ef      	b.n	8010750 <__exponent+0x46>

08010770 <_printf_float>:
 8010770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010774:	b08d      	sub	sp, #52	; 0x34
 8010776:	460c      	mov	r4, r1
 8010778:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801077c:	4616      	mov	r6, r2
 801077e:	461f      	mov	r7, r3
 8010780:	4605      	mov	r5, r0
 8010782:	f001 fd67 	bl	8012254 <_localeconv_r>
 8010786:	6803      	ldr	r3, [r0, #0]
 8010788:	9304      	str	r3, [sp, #16]
 801078a:	4618      	mov	r0, r3
 801078c:	f7ef fd20 	bl	80001d0 <strlen>
 8010790:	2300      	movs	r3, #0
 8010792:	930a      	str	r3, [sp, #40]	; 0x28
 8010794:	f8d8 3000 	ldr.w	r3, [r8]
 8010798:	9005      	str	r0, [sp, #20]
 801079a:	3307      	adds	r3, #7
 801079c:	f023 0307 	bic.w	r3, r3, #7
 80107a0:	f103 0208 	add.w	r2, r3, #8
 80107a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80107a8:	f8d4 b000 	ldr.w	fp, [r4]
 80107ac:	f8c8 2000 	str.w	r2, [r8]
 80107b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80107b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80107bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80107c0:	9307      	str	r3, [sp, #28]
 80107c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80107c6:	f04f 32ff 	mov.w	r2, #4294967295
 80107ca:	4ba7      	ldr	r3, [pc, #668]	; (8010a68 <_printf_float+0x2f8>)
 80107cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107d0:	f7f0 f9ac 	bl	8000b2c <__aeabi_dcmpun>
 80107d4:	bb70      	cbnz	r0, 8010834 <_printf_float+0xc4>
 80107d6:	f04f 32ff 	mov.w	r2, #4294967295
 80107da:	4ba3      	ldr	r3, [pc, #652]	; (8010a68 <_printf_float+0x2f8>)
 80107dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107e0:	f7f0 f986 	bl	8000af0 <__aeabi_dcmple>
 80107e4:	bb30      	cbnz	r0, 8010834 <_printf_float+0xc4>
 80107e6:	2200      	movs	r2, #0
 80107e8:	2300      	movs	r3, #0
 80107ea:	4640      	mov	r0, r8
 80107ec:	4649      	mov	r1, r9
 80107ee:	f7f0 f975 	bl	8000adc <__aeabi_dcmplt>
 80107f2:	b110      	cbz	r0, 80107fa <_printf_float+0x8a>
 80107f4:	232d      	movs	r3, #45	; 0x2d
 80107f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107fa:	4a9c      	ldr	r2, [pc, #624]	; (8010a6c <_printf_float+0x2fc>)
 80107fc:	4b9c      	ldr	r3, [pc, #624]	; (8010a70 <_printf_float+0x300>)
 80107fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010802:	bf8c      	ite	hi
 8010804:	4690      	movhi	r8, r2
 8010806:	4698      	movls	r8, r3
 8010808:	2303      	movs	r3, #3
 801080a:	f02b 0204 	bic.w	r2, fp, #4
 801080e:	6123      	str	r3, [r4, #16]
 8010810:	6022      	str	r2, [r4, #0]
 8010812:	f04f 0900 	mov.w	r9, #0
 8010816:	9700      	str	r7, [sp, #0]
 8010818:	4633      	mov	r3, r6
 801081a:	aa0b      	add	r2, sp, #44	; 0x2c
 801081c:	4621      	mov	r1, r4
 801081e:	4628      	mov	r0, r5
 8010820:	f000 f9e6 	bl	8010bf0 <_printf_common>
 8010824:	3001      	adds	r0, #1
 8010826:	f040 808d 	bne.w	8010944 <_printf_float+0x1d4>
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
 801082e:	b00d      	add	sp, #52	; 0x34
 8010830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010834:	4642      	mov	r2, r8
 8010836:	464b      	mov	r3, r9
 8010838:	4640      	mov	r0, r8
 801083a:	4649      	mov	r1, r9
 801083c:	f7f0 f976 	bl	8000b2c <__aeabi_dcmpun>
 8010840:	b110      	cbz	r0, 8010848 <_printf_float+0xd8>
 8010842:	4a8c      	ldr	r2, [pc, #560]	; (8010a74 <_printf_float+0x304>)
 8010844:	4b8c      	ldr	r3, [pc, #560]	; (8010a78 <_printf_float+0x308>)
 8010846:	e7da      	b.n	80107fe <_printf_float+0x8e>
 8010848:	6861      	ldr	r1, [r4, #4]
 801084a:	1c4b      	adds	r3, r1, #1
 801084c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010850:	a80a      	add	r0, sp, #40	; 0x28
 8010852:	d13e      	bne.n	80108d2 <_printf_float+0x162>
 8010854:	2306      	movs	r3, #6
 8010856:	6063      	str	r3, [r4, #4]
 8010858:	2300      	movs	r3, #0
 801085a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801085e:	ab09      	add	r3, sp, #36	; 0x24
 8010860:	9300      	str	r3, [sp, #0]
 8010862:	ec49 8b10 	vmov	d0, r8, r9
 8010866:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801086a:	6022      	str	r2, [r4, #0]
 801086c:	f8cd a004 	str.w	sl, [sp, #4]
 8010870:	6861      	ldr	r1, [r4, #4]
 8010872:	4628      	mov	r0, r5
 8010874:	f7ff fee8 	bl	8010648 <__cvt>
 8010878:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801087c:	2b47      	cmp	r3, #71	; 0x47
 801087e:	4680      	mov	r8, r0
 8010880:	d109      	bne.n	8010896 <_printf_float+0x126>
 8010882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010884:	1cd8      	adds	r0, r3, #3
 8010886:	db02      	blt.n	801088e <_printf_float+0x11e>
 8010888:	6862      	ldr	r2, [r4, #4]
 801088a:	4293      	cmp	r3, r2
 801088c:	dd47      	ble.n	801091e <_printf_float+0x1ae>
 801088e:	f1aa 0a02 	sub.w	sl, sl, #2
 8010892:	fa5f fa8a 	uxtb.w	sl, sl
 8010896:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801089a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801089c:	d824      	bhi.n	80108e8 <_printf_float+0x178>
 801089e:	3901      	subs	r1, #1
 80108a0:	4652      	mov	r2, sl
 80108a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80108a6:	9109      	str	r1, [sp, #36]	; 0x24
 80108a8:	f7ff ff2f 	bl	801070a <__exponent>
 80108ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108ae:	1813      	adds	r3, r2, r0
 80108b0:	2a01      	cmp	r2, #1
 80108b2:	4681      	mov	r9, r0
 80108b4:	6123      	str	r3, [r4, #16]
 80108b6:	dc02      	bgt.n	80108be <_printf_float+0x14e>
 80108b8:	6822      	ldr	r2, [r4, #0]
 80108ba:	07d1      	lsls	r1, r2, #31
 80108bc:	d501      	bpl.n	80108c2 <_printf_float+0x152>
 80108be:	3301      	adds	r3, #1
 80108c0:	6123      	str	r3, [r4, #16]
 80108c2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d0a5      	beq.n	8010816 <_printf_float+0xa6>
 80108ca:	232d      	movs	r3, #45	; 0x2d
 80108cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108d0:	e7a1      	b.n	8010816 <_printf_float+0xa6>
 80108d2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80108d6:	f000 8177 	beq.w	8010bc8 <_printf_float+0x458>
 80108da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80108de:	d1bb      	bne.n	8010858 <_printf_float+0xe8>
 80108e0:	2900      	cmp	r1, #0
 80108e2:	d1b9      	bne.n	8010858 <_printf_float+0xe8>
 80108e4:	2301      	movs	r3, #1
 80108e6:	e7b6      	b.n	8010856 <_printf_float+0xe6>
 80108e8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80108ec:	d119      	bne.n	8010922 <_printf_float+0x1b2>
 80108ee:	2900      	cmp	r1, #0
 80108f0:	6863      	ldr	r3, [r4, #4]
 80108f2:	dd0c      	ble.n	801090e <_printf_float+0x19e>
 80108f4:	6121      	str	r1, [r4, #16]
 80108f6:	b913      	cbnz	r3, 80108fe <_printf_float+0x18e>
 80108f8:	6822      	ldr	r2, [r4, #0]
 80108fa:	07d2      	lsls	r2, r2, #31
 80108fc:	d502      	bpl.n	8010904 <_printf_float+0x194>
 80108fe:	3301      	adds	r3, #1
 8010900:	440b      	add	r3, r1
 8010902:	6123      	str	r3, [r4, #16]
 8010904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010906:	65a3      	str	r3, [r4, #88]	; 0x58
 8010908:	f04f 0900 	mov.w	r9, #0
 801090c:	e7d9      	b.n	80108c2 <_printf_float+0x152>
 801090e:	b913      	cbnz	r3, 8010916 <_printf_float+0x1a6>
 8010910:	6822      	ldr	r2, [r4, #0]
 8010912:	07d0      	lsls	r0, r2, #31
 8010914:	d501      	bpl.n	801091a <_printf_float+0x1aa>
 8010916:	3302      	adds	r3, #2
 8010918:	e7f3      	b.n	8010902 <_printf_float+0x192>
 801091a:	2301      	movs	r3, #1
 801091c:	e7f1      	b.n	8010902 <_printf_float+0x192>
 801091e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010922:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010926:	4293      	cmp	r3, r2
 8010928:	db05      	blt.n	8010936 <_printf_float+0x1c6>
 801092a:	6822      	ldr	r2, [r4, #0]
 801092c:	6123      	str	r3, [r4, #16]
 801092e:	07d1      	lsls	r1, r2, #31
 8010930:	d5e8      	bpl.n	8010904 <_printf_float+0x194>
 8010932:	3301      	adds	r3, #1
 8010934:	e7e5      	b.n	8010902 <_printf_float+0x192>
 8010936:	2b00      	cmp	r3, #0
 8010938:	bfd4      	ite	le
 801093a:	f1c3 0302 	rsble	r3, r3, #2
 801093e:	2301      	movgt	r3, #1
 8010940:	4413      	add	r3, r2
 8010942:	e7de      	b.n	8010902 <_printf_float+0x192>
 8010944:	6823      	ldr	r3, [r4, #0]
 8010946:	055a      	lsls	r2, r3, #21
 8010948:	d407      	bmi.n	801095a <_printf_float+0x1ea>
 801094a:	6923      	ldr	r3, [r4, #16]
 801094c:	4642      	mov	r2, r8
 801094e:	4631      	mov	r1, r6
 8010950:	4628      	mov	r0, r5
 8010952:	47b8      	blx	r7
 8010954:	3001      	adds	r0, #1
 8010956:	d12b      	bne.n	80109b0 <_printf_float+0x240>
 8010958:	e767      	b.n	801082a <_printf_float+0xba>
 801095a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801095e:	f240 80dc 	bls.w	8010b1a <_printf_float+0x3aa>
 8010962:	2200      	movs	r2, #0
 8010964:	2300      	movs	r3, #0
 8010966:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801096a:	f7f0 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 801096e:	2800      	cmp	r0, #0
 8010970:	d033      	beq.n	80109da <_printf_float+0x26a>
 8010972:	2301      	movs	r3, #1
 8010974:	4a41      	ldr	r2, [pc, #260]	; (8010a7c <_printf_float+0x30c>)
 8010976:	4631      	mov	r1, r6
 8010978:	4628      	mov	r0, r5
 801097a:	47b8      	blx	r7
 801097c:	3001      	adds	r0, #1
 801097e:	f43f af54 	beq.w	801082a <_printf_float+0xba>
 8010982:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010986:	429a      	cmp	r2, r3
 8010988:	db02      	blt.n	8010990 <_printf_float+0x220>
 801098a:	6823      	ldr	r3, [r4, #0]
 801098c:	07d8      	lsls	r0, r3, #31
 801098e:	d50f      	bpl.n	80109b0 <_printf_float+0x240>
 8010990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010994:	4631      	mov	r1, r6
 8010996:	4628      	mov	r0, r5
 8010998:	47b8      	blx	r7
 801099a:	3001      	adds	r0, #1
 801099c:	f43f af45 	beq.w	801082a <_printf_float+0xba>
 80109a0:	f04f 0800 	mov.w	r8, #0
 80109a4:	f104 091a 	add.w	r9, r4, #26
 80109a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109aa:	3b01      	subs	r3, #1
 80109ac:	4543      	cmp	r3, r8
 80109ae:	dc09      	bgt.n	80109c4 <_printf_float+0x254>
 80109b0:	6823      	ldr	r3, [r4, #0]
 80109b2:	079b      	lsls	r3, r3, #30
 80109b4:	f100 8103 	bmi.w	8010bbe <_printf_float+0x44e>
 80109b8:	68e0      	ldr	r0, [r4, #12]
 80109ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80109bc:	4298      	cmp	r0, r3
 80109be:	bfb8      	it	lt
 80109c0:	4618      	movlt	r0, r3
 80109c2:	e734      	b.n	801082e <_printf_float+0xbe>
 80109c4:	2301      	movs	r3, #1
 80109c6:	464a      	mov	r2, r9
 80109c8:	4631      	mov	r1, r6
 80109ca:	4628      	mov	r0, r5
 80109cc:	47b8      	blx	r7
 80109ce:	3001      	adds	r0, #1
 80109d0:	f43f af2b 	beq.w	801082a <_printf_float+0xba>
 80109d4:	f108 0801 	add.w	r8, r8, #1
 80109d8:	e7e6      	b.n	80109a8 <_printf_float+0x238>
 80109da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109dc:	2b00      	cmp	r3, #0
 80109de:	dc2b      	bgt.n	8010a38 <_printf_float+0x2c8>
 80109e0:	2301      	movs	r3, #1
 80109e2:	4a26      	ldr	r2, [pc, #152]	; (8010a7c <_printf_float+0x30c>)
 80109e4:	4631      	mov	r1, r6
 80109e6:	4628      	mov	r0, r5
 80109e8:	47b8      	blx	r7
 80109ea:	3001      	adds	r0, #1
 80109ec:	f43f af1d 	beq.w	801082a <_printf_float+0xba>
 80109f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109f2:	b923      	cbnz	r3, 80109fe <_printf_float+0x28e>
 80109f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109f6:	b913      	cbnz	r3, 80109fe <_printf_float+0x28e>
 80109f8:	6823      	ldr	r3, [r4, #0]
 80109fa:	07d9      	lsls	r1, r3, #31
 80109fc:	d5d8      	bpl.n	80109b0 <_printf_float+0x240>
 80109fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a02:	4631      	mov	r1, r6
 8010a04:	4628      	mov	r0, r5
 8010a06:	47b8      	blx	r7
 8010a08:	3001      	adds	r0, #1
 8010a0a:	f43f af0e 	beq.w	801082a <_printf_float+0xba>
 8010a0e:	f04f 0900 	mov.w	r9, #0
 8010a12:	f104 0a1a 	add.w	sl, r4, #26
 8010a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a18:	425b      	negs	r3, r3
 8010a1a:	454b      	cmp	r3, r9
 8010a1c:	dc01      	bgt.n	8010a22 <_printf_float+0x2b2>
 8010a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a20:	e794      	b.n	801094c <_printf_float+0x1dc>
 8010a22:	2301      	movs	r3, #1
 8010a24:	4652      	mov	r2, sl
 8010a26:	4631      	mov	r1, r6
 8010a28:	4628      	mov	r0, r5
 8010a2a:	47b8      	blx	r7
 8010a2c:	3001      	adds	r0, #1
 8010a2e:	f43f aefc 	beq.w	801082a <_printf_float+0xba>
 8010a32:	f109 0901 	add.w	r9, r9, #1
 8010a36:	e7ee      	b.n	8010a16 <_printf_float+0x2a6>
 8010a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	bfa8      	it	ge
 8010a40:	461a      	movge	r2, r3
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	4691      	mov	r9, r2
 8010a46:	dd07      	ble.n	8010a58 <_printf_float+0x2e8>
 8010a48:	4613      	mov	r3, r2
 8010a4a:	4631      	mov	r1, r6
 8010a4c:	4642      	mov	r2, r8
 8010a4e:	4628      	mov	r0, r5
 8010a50:	47b8      	blx	r7
 8010a52:	3001      	adds	r0, #1
 8010a54:	f43f aee9 	beq.w	801082a <_printf_float+0xba>
 8010a58:	f104 031a 	add.w	r3, r4, #26
 8010a5c:	f04f 0b00 	mov.w	fp, #0
 8010a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a64:	9306      	str	r3, [sp, #24]
 8010a66:	e015      	b.n	8010a94 <_printf_float+0x324>
 8010a68:	7fefffff 	.word	0x7fefffff
 8010a6c:	0801493a 	.word	0x0801493a
 8010a70:	0801467c 	.word	0x0801467c
 8010a74:	08014684 	.word	0x08014684
 8010a78:	08014680 	.word	0x08014680
 8010a7c:	08014688 	.word	0x08014688
 8010a80:	2301      	movs	r3, #1
 8010a82:	9a06      	ldr	r2, [sp, #24]
 8010a84:	4631      	mov	r1, r6
 8010a86:	4628      	mov	r0, r5
 8010a88:	47b8      	blx	r7
 8010a8a:	3001      	adds	r0, #1
 8010a8c:	f43f aecd 	beq.w	801082a <_printf_float+0xba>
 8010a90:	f10b 0b01 	add.w	fp, fp, #1
 8010a94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010a98:	ebaa 0309 	sub.w	r3, sl, r9
 8010a9c:	455b      	cmp	r3, fp
 8010a9e:	dcef      	bgt.n	8010a80 <_printf_float+0x310>
 8010aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	44d0      	add	r8, sl
 8010aa8:	db15      	blt.n	8010ad6 <_printf_float+0x366>
 8010aaa:	6823      	ldr	r3, [r4, #0]
 8010aac:	07da      	lsls	r2, r3, #31
 8010aae:	d412      	bmi.n	8010ad6 <_printf_float+0x366>
 8010ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ab4:	eba3 020a 	sub.w	r2, r3, sl
 8010ab8:	eba3 0a01 	sub.w	sl, r3, r1
 8010abc:	4592      	cmp	sl, r2
 8010abe:	bfa8      	it	ge
 8010ac0:	4692      	movge	sl, r2
 8010ac2:	f1ba 0f00 	cmp.w	sl, #0
 8010ac6:	dc0e      	bgt.n	8010ae6 <_printf_float+0x376>
 8010ac8:	f04f 0800 	mov.w	r8, #0
 8010acc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ad0:	f104 091a 	add.w	r9, r4, #26
 8010ad4:	e019      	b.n	8010b0a <_printf_float+0x39a>
 8010ad6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ada:	4631      	mov	r1, r6
 8010adc:	4628      	mov	r0, r5
 8010ade:	47b8      	blx	r7
 8010ae0:	3001      	adds	r0, #1
 8010ae2:	d1e5      	bne.n	8010ab0 <_printf_float+0x340>
 8010ae4:	e6a1      	b.n	801082a <_printf_float+0xba>
 8010ae6:	4653      	mov	r3, sl
 8010ae8:	4642      	mov	r2, r8
 8010aea:	4631      	mov	r1, r6
 8010aec:	4628      	mov	r0, r5
 8010aee:	47b8      	blx	r7
 8010af0:	3001      	adds	r0, #1
 8010af2:	d1e9      	bne.n	8010ac8 <_printf_float+0x358>
 8010af4:	e699      	b.n	801082a <_printf_float+0xba>
 8010af6:	2301      	movs	r3, #1
 8010af8:	464a      	mov	r2, r9
 8010afa:	4631      	mov	r1, r6
 8010afc:	4628      	mov	r0, r5
 8010afe:	47b8      	blx	r7
 8010b00:	3001      	adds	r0, #1
 8010b02:	f43f ae92 	beq.w	801082a <_printf_float+0xba>
 8010b06:	f108 0801 	add.w	r8, r8, #1
 8010b0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010b0e:	1a9b      	subs	r3, r3, r2
 8010b10:	eba3 030a 	sub.w	r3, r3, sl
 8010b14:	4543      	cmp	r3, r8
 8010b16:	dcee      	bgt.n	8010af6 <_printf_float+0x386>
 8010b18:	e74a      	b.n	80109b0 <_printf_float+0x240>
 8010b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b1c:	2a01      	cmp	r2, #1
 8010b1e:	dc01      	bgt.n	8010b24 <_printf_float+0x3b4>
 8010b20:	07db      	lsls	r3, r3, #31
 8010b22:	d53a      	bpl.n	8010b9a <_printf_float+0x42a>
 8010b24:	2301      	movs	r3, #1
 8010b26:	4642      	mov	r2, r8
 8010b28:	4631      	mov	r1, r6
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	47b8      	blx	r7
 8010b2e:	3001      	adds	r0, #1
 8010b30:	f43f ae7b 	beq.w	801082a <_printf_float+0xba>
 8010b34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b38:	4631      	mov	r1, r6
 8010b3a:	4628      	mov	r0, r5
 8010b3c:	47b8      	blx	r7
 8010b3e:	3001      	adds	r0, #1
 8010b40:	f108 0801 	add.w	r8, r8, #1
 8010b44:	f43f ae71 	beq.w	801082a <_printf_float+0xba>
 8010b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	f103 3aff 	add.w	sl, r3, #4294967295
 8010b50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010b54:	2300      	movs	r3, #0
 8010b56:	f7ef ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b5a:	b9c8      	cbnz	r0, 8010b90 <_printf_float+0x420>
 8010b5c:	4653      	mov	r3, sl
 8010b5e:	4642      	mov	r2, r8
 8010b60:	4631      	mov	r1, r6
 8010b62:	4628      	mov	r0, r5
 8010b64:	47b8      	blx	r7
 8010b66:	3001      	adds	r0, #1
 8010b68:	d10e      	bne.n	8010b88 <_printf_float+0x418>
 8010b6a:	e65e      	b.n	801082a <_printf_float+0xba>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	4652      	mov	r2, sl
 8010b70:	4631      	mov	r1, r6
 8010b72:	4628      	mov	r0, r5
 8010b74:	47b8      	blx	r7
 8010b76:	3001      	adds	r0, #1
 8010b78:	f43f ae57 	beq.w	801082a <_printf_float+0xba>
 8010b7c:	f108 0801 	add.w	r8, r8, #1
 8010b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b82:	3b01      	subs	r3, #1
 8010b84:	4543      	cmp	r3, r8
 8010b86:	dcf1      	bgt.n	8010b6c <_printf_float+0x3fc>
 8010b88:	464b      	mov	r3, r9
 8010b8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010b8e:	e6de      	b.n	801094e <_printf_float+0x1de>
 8010b90:	f04f 0800 	mov.w	r8, #0
 8010b94:	f104 0a1a 	add.w	sl, r4, #26
 8010b98:	e7f2      	b.n	8010b80 <_printf_float+0x410>
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	e7df      	b.n	8010b5e <_printf_float+0x3ee>
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	464a      	mov	r2, r9
 8010ba2:	4631      	mov	r1, r6
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	47b8      	blx	r7
 8010ba8:	3001      	adds	r0, #1
 8010baa:	f43f ae3e 	beq.w	801082a <_printf_float+0xba>
 8010bae:	f108 0801 	add.w	r8, r8, #1
 8010bb2:	68e3      	ldr	r3, [r4, #12]
 8010bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bb6:	1a9b      	subs	r3, r3, r2
 8010bb8:	4543      	cmp	r3, r8
 8010bba:	dcf0      	bgt.n	8010b9e <_printf_float+0x42e>
 8010bbc:	e6fc      	b.n	80109b8 <_printf_float+0x248>
 8010bbe:	f04f 0800 	mov.w	r8, #0
 8010bc2:	f104 0919 	add.w	r9, r4, #25
 8010bc6:	e7f4      	b.n	8010bb2 <_printf_float+0x442>
 8010bc8:	2900      	cmp	r1, #0
 8010bca:	f43f ae8b 	beq.w	80108e4 <_printf_float+0x174>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010bd4:	ab09      	add	r3, sp, #36	; 0x24
 8010bd6:	9300      	str	r3, [sp, #0]
 8010bd8:	ec49 8b10 	vmov	d0, r8, r9
 8010bdc:	6022      	str	r2, [r4, #0]
 8010bde:	f8cd a004 	str.w	sl, [sp, #4]
 8010be2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010be6:	4628      	mov	r0, r5
 8010be8:	f7ff fd2e 	bl	8010648 <__cvt>
 8010bec:	4680      	mov	r8, r0
 8010bee:	e648      	b.n	8010882 <_printf_float+0x112>

08010bf0 <_printf_common>:
 8010bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bf4:	4691      	mov	r9, r2
 8010bf6:	461f      	mov	r7, r3
 8010bf8:	688a      	ldr	r2, [r1, #8]
 8010bfa:	690b      	ldr	r3, [r1, #16]
 8010bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010c00:	4293      	cmp	r3, r2
 8010c02:	bfb8      	it	lt
 8010c04:	4613      	movlt	r3, r2
 8010c06:	f8c9 3000 	str.w	r3, [r9]
 8010c0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010c0e:	4606      	mov	r6, r0
 8010c10:	460c      	mov	r4, r1
 8010c12:	b112      	cbz	r2, 8010c1a <_printf_common+0x2a>
 8010c14:	3301      	adds	r3, #1
 8010c16:	f8c9 3000 	str.w	r3, [r9]
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	0699      	lsls	r1, r3, #26
 8010c1e:	bf42      	ittt	mi
 8010c20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010c24:	3302      	addmi	r3, #2
 8010c26:	f8c9 3000 	strmi.w	r3, [r9]
 8010c2a:	6825      	ldr	r5, [r4, #0]
 8010c2c:	f015 0506 	ands.w	r5, r5, #6
 8010c30:	d107      	bne.n	8010c42 <_printf_common+0x52>
 8010c32:	f104 0a19 	add.w	sl, r4, #25
 8010c36:	68e3      	ldr	r3, [r4, #12]
 8010c38:	f8d9 2000 	ldr.w	r2, [r9]
 8010c3c:	1a9b      	subs	r3, r3, r2
 8010c3e:	42ab      	cmp	r3, r5
 8010c40:	dc28      	bgt.n	8010c94 <_printf_common+0xa4>
 8010c42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010c46:	6822      	ldr	r2, [r4, #0]
 8010c48:	3300      	adds	r3, #0
 8010c4a:	bf18      	it	ne
 8010c4c:	2301      	movne	r3, #1
 8010c4e:	0692      	lsls	r2, r2, #26
 8010c50:	d42d      	bmi.n	8010cae <_printf_common+0xbe>
 8010c52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c56:	4639      	mov	r1, r7
 8010c58:	4630      	mov	r0, r6
 8010c5a:	47c0      	blx	r8
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	d020      	beq.n	8010ca2 <_printf_common+0xb2>
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	68e5      	ldr	r5, [r4, #12]
 8010c64:	f8d9 2000 	ldr.w	r2, [r9]
 8010c68:	f003 0306 	and.w	r3, r3, #6
 8010c6c:	2b04      	cmp	r3, #4
 8010c6e:	bf08      	it	eq
 8010c70:	1aad      	subeq	r5, r5, r2
 8010c72:	68a3      	ldr	r3, [r4, #8]
 8010c74:	6922      	ldr	r2, [r4, #16]
 8010c76:	bf0c      	ite	eq
 8010c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c7c:	2500      	movne	r5, #0
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	bfc4      	itt	gt
 8010c82:	1a9b      	subgt	r3, r3, r2
 8010c84:	18ed      	addgt	r5, r5, r3
 8010c86:	f04f 0900 	mov.w	r9, #0
 8010c8a:	341a      	adds	r4, #26
 8010c8c:	454d      	cmp	r5, r9
 8010c8e:	d11a      	bne.n	8010cc6 <_printf_common+0xd6>
 8010c90:	2000      	movs	r0, #0
 8010c92:	e008      	b.n	8010ca6 <_printf_common+0xb6>
 8010c94:	2301      	movs	r3, #1
 8010c96:	4652      	mov	r2, sl
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	47c0      	blx	r8
 8010c9e:	3001      	adds	r0, #1
 8010ca0:	d103      	bne.n	8010caa <_printf_common+0xba>
 8010ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010caa:	3501      	adds	r5, #1
 8010cac:	e7c3      	b.n	8010c36 <_printf_common+0x46>
 8010cae:	18e1      	adds	r1, r4, r3
 8010cb0:	1c5a      	adds	r2, r3, #1
 8010cb2:	2030      	movs	r0, #48	; 0x30
 8010cb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010cb8:	4422      	add	r2, r4
 8010cba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010cc2:	3302      	adds	r3, #2
 8010cc4:	e7c5      	b.n	8010c52 <_printf_common+0x62>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	4622      	mov	r2, r4
 8010cca:	4639      	mov	r1, r7
 8010ccc:	4630      	mov	r0, r6
 8010cce:	47c0      	blx	r8
 8010cd0:	3001      	adds	r0, #1
 8010cd2:	d0e6      	beq.n	8010ca2 <_printf_common+0xb2>
 8010cd4:	f109 0901 	add.w	r9, r9, #1
 8010cd8:	e7d8      	b.n	8010c8c <_printf_common+0x9c>
	...

08010cdc <_printf_i>:
 8010cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ce0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010ce4:	460c      	mov	r4, r1
 8010ce6:	7e09      	ldrb	r1, [r1, #24]
 8010ce8:	b085      	sub	sp, #20
 8010cea:	296e      	cmp	r1, #110	; 0x6e
 8010cec:	4617      	mov	r7, r2
 8010cee:	4606      	mov	r6, r0
 8010cf0:	4698      	mov	r8, r3
 8010cf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010cf4:	f000 80b3 	beq.w	8010e5e <_printf_i+0x182>
 8010cf8:	d822      	bhi.n	8010d40 <_printf_i+0x64>
 8010cfa:	2963      	cmp	r1, #99	; 0x63
 8010cfc:	d036      	beq.n	8010d6c <_printf_i+0x90>
 8010cfe:	d80a      	bhi.n	8010d16 <_printf_i+0x3a>
 8010d00:	2900      	cmp	r1, #0
 8010d02:	f000 80b9 	beq.w	8010e78 <_printf_i+0x19c>
 8010d06:	2958      	cmp	r1, #88	; 0x58
 8010d08:	f000 8083 	beq.w	8010e12 <_printf_i+0x136>
 8010d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010d14:	e032      	b.n	8010d7c <_printf_i+0xa0>
 8010d16:	2964      	cmp	r1, #100	; 0x64
 8010d18:	d001      	beq.n	8010d1e <_printf_i+0x42>
 8010d1a:	2969      	cmp	r1, #105	; 0x69
 8010d1c:	d1f6      	bne.n	8010d0c <_printf_i+0x30>
 8010d1e:	6820      	ldr	r0, [r4, #0]
 8010d20:	6813      	ldr	r3, [r2, #0]
 8010d22:	0605      	lsls	r5, r0, #24
 8010d24:	f103 0104 	add.w	r1, r3, #4
 8010d28:	d52a      	bpl.n	8010d80 <_printf_i+0xa4>
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	6011      	str	r1, [r2, #0]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	da03      	bge.n	8010d3a <_printf_i+0x5e>
 8010d32:	222d      	movs	r2, #45	; 0x2d
 8010d34:	425b      	negs	r3, r3
 8010d36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010d3a:	486f      	ldr	r0, [pc, #444]	; (8010ef8 <_printf_i+0x21c>)
 8010d3c:	220a      	movs	r2, #10
 8010d3e:	e039      	b.n	8010db4 <_printf_i+0xd8>
 8010d40:	2973      	cmp	r1, #115	; 0x73
 8010d42:	f000 809d 	beq.w	8010e80 <_printf_i+0x1a4>
 8010d46:	d808      	bhi.n	8010d5a <_printf_i+0x7e>
 8010d48:	296f      	cmp	r1, #111	; 0x6f
 8010d4a:	d020      	beq.n	8010d8e <_printf_i+0xb2>
 8010d4c:	2970      	cmp	r1, #112	; 0x70
 8010d4e:	d1dd      	bne.n	8010d0c <_printf_i+0x30>
 8010d50:	6823      	ldr	r3, [r4, #0]
 8010d52:	f043 0320 	orr.w	r3, r3, #32
 8010d56:	6023      	str	r3, [r4, #0]
 8010d58:	e003      	b.n	8010d62 <_printf_i+0x86>
 8010d5a:	2975      	cmp	r1, #117	; 0x75
 8010d5c:	d017      	beq.n	8010d8e <_printf_i+0xb2>
 8010d5e:	2978      	cmp	r1, #120	; 0x78
 8010d60:	d1d4      	bne.n	8010d0c <_printf_i+0x30>
 8010d62:	2378      	movs	r3, #120	; 0x78
 8010d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010d68:	4864      	ldr	r0, [pc, #400]	; (8010efc <_printf_i+0x220>)
 8010d6a:	e055      	b.n	8010e18 <_printf_i+0x13c>
 8010d6c:	6813      	ldr	r3, [r2, #0]
 8010d6e:	1d19      	adds	r1, r3, #4
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	6011      	str	r1, [r2, #0]
 8010d74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	e08c      	b.n	8010e9a <_printf_i+0x1be>
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	6011      	str	r1, [r2, #0]
 8010d84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d88:	bf18      	it	ne
 8010d8a:	b21b      	sxthne	r3, r3
 8010d8c:	e7cf      	b.n	8010d2e <_printf_i+0x52>
 8010d8e:	6813      	ldr	r3, [r2, #0]
 8010d90:	6825      	ldr	r5, [r4, #0]
 8010d92:	1d18      	adds	r0, r3, #4
 8010d94:	6010      	str	r0, [r2, #0]
 8010d96:	0628      	lsls	r0, r5, #24
 8010d98:	d501      	bpl.n	8010d9e <_printf_i+0xc2>
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	e002      	b.n	8010da4 <_printf_i+0xc8>
 8010d9e:	0668      	lsls	r0, r5, #25
 8010da0:	d5fb      	bpl.n	8010d9a <_printf_i+0xbe>
 8010da2:	881b      	ldrh	r3, [r3, #0]
 8010da4:	4854      	ldr	r0, [pc, #336]	; (8010ef8 <_printf_i+0x21c>)
 8010da6:	296f      	cmp	r1, #111	; 0x6f
 8010da8:	bf14      	ite	ne
 8010daa:	220a      	movne	r2, #10
 8010dac:	2208      	moveq	r2, #8
 8010dae:	2100      	movs	r1, #0
 8010db0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010db4:	6865      	ldr	r5, [r4, #4]
 8010db6:	60a5      	str	r5, [r4, #8]
 8010db8:	2d00      	cmp	r5, #0
 8010dba:	f2c0 8095 	blt.w	8010ee8 <_printf_i+0x20c>
 8010dbe:	6821      	ldr	r1, [r4, #0]
 8010dc0:	f021 0104 	bic.w	r1, r1, #4
 8010dc4:	6021      	str	r1, [r4, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d13d      	bne.n	8010e46 <_printf_i+0x16a>
 8010dca:	2d00      	cmp	r5, #0
 8010dcc:	f040 808e 	bne.w	8010eec <_printf_i+0x210>
 8010dd0:	4665      	mov	r5, ip
 8010dd2:	2a08      	cmp	r2, #8
 8010dd4:	d10b      	bne.n	8010dee <_printf_i+0x112>
 8010dd6:	6823      	ldr	r3, [r4, #0]
 8010dd8:	07db      	lsls	r3, r3, #31
 8010dda:	d508      	bpl.n	8010dee <_printf_i+0x112>
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	6862      	ldr	r2, [r4, #4]
 8010de0:	429a      	cmp	r2, r3
 8010de2:	bfde      	ittt	le
 8010de4:	2330      	movle	r3, #48	; 0x30
 8010de6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010dea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010dee:	ebac 0305 	sub.w	r3, ip, r5
 8010df2:	6123      	str	r3, [r4, #16]
 8010df4:	f8cd 8000 	str.w	r8, [sp]
 8010df8:	463b      	mov	r3, r7
 8010dfa:	aa03      	add	r2, sp, #12
 8010dfc:	4621      	mov	r1, r4
 8010dfe:	4630      	mov	r0, r6
 8010e00:	f7ff fef6 	bl	8010bf0 <_printf_common>
 8010e04:	3001      	adds	r0, #1
 8010e06:	d14d      	bne.n	8010ea4 <_printf_i+0x1c8>
 8010e08:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0c:	b005      	add	sp, #20
 8010e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e12:	4839      	ldr	r0, [pc, #228]	; (8010ef8 <_printf_i+0x21c>)
 8010e14:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010e18:	6813      	ldr	r3, [r2, #0]
 8010e1a:	6821      	ldr	r1, [r4, #0]
 8010e1c:	1d1d      	adds	r5, r3, #4
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	6015      	str	r5, [r2, #0]
 8010e22:	060a      	lsls	r2, r1, #24
 8010e24:	d50b      	bpl.n	8010e3e <_printf_i+0x162>
 8010e26:	07ca      	lsls	r2, r1, #31
 8010e28:	bf44      	itt	mi
 8010e2a:	f041 0120 	orrmi.w	r1, r1, #32
 8010e2e:	6021      	strmi	r1, [r4, #0]
 8010e30:	b91b      	cbnz	r3, 8010e3a <_printf_i+0x15e>
 8010e32:	6822      	ldr	r2, [r4, #0]
 8010e34:	f022 0220 	bic.w	r2, r2, #32
 8010e38:	6022      	str	r2, [r4, #0]
 8010e3a:	2210      	movs	r2, #16
 8010e3c:	e7b7      	b.n	8010dae <_printf_i+0xd2>
 8010e3e:	064d      	lsls	r5, r1, #25
 8010e40:	bf48      	it	mi
 8010e42:	b29b      	uxthmi	r3, r3
 8010e44:	e7ef      	b.n	8010e26 <_printf_i+0x14a>
 8010e46:	4665      	mov	r5, ip
 8010e48:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e4c:	fb02 3311 	mls	r3, r2, r1, r3
 8010e50:	5cc3      	ldrb	r3, [r0, r3]
 8010e52:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010e56:	460b      	mov	r3, r1
 8010e58:	2900      	cmp	r1, #0
 8010e5a:	d1f5      	bne.n	8010e48 <_printf_i+0x16c>
 8010e5c:	e7b9      	b.n	8010dd2 <_printf_i+0xf6>
 8010e5e:	6813      	ldr	r3, [r2, #0]
 8010e60:	6825      	ldr	r5, [r4, #0]
 8010e62:	6961      	ldr	r1, [r4, #20]
 8010e64:	1d18      	adds	r0, r3, #4
 8010e66:	6010      	str	r0, [r2, #0]
 8010e68:	0628      	lsls	r0, r5, #24
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	d501      	bpl.n	8010e72 <_printf_i+0x196>
 8010e6e:	6019      	str	r1, [r3, #0]
 8010e70:	e002      	b.n	8010e78 <_printf_i+0x19c>
 8010e72:	066a      	lsls	r2, r5, #25
 8010e74:	d5fb      	bpl.n	8010e6e <_printf_i+0x192>
 8010e76:	8019      	strh	r1, [r3, #0]
 8010e78:	2300      	movs	r3, #0
 8010e7a:	6123      	str	r3, [r4, #16]
 8010e7c:	4665      	mov	r5, ip
 8010e7e:	e7b9      	b.n	8010df4 <_printf_i+0x118>
 8010e80:	6813      	ldr	r3, [r2, #0]
 8010e82:	1d19      	adds	r1, r3, #4
 8010e84:	6011      	str	r1, [r2, #0]
 8010e86:	681d      	ldr	r5, [r3, #0]
 8010e88:	6862      	ldr	r2, [r4, #4]
 8010e8a:	2100      	movs	r1, #0
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f7ef f9a7 	bl	80001e0 <memchr>
 8010e92:	b108      	cbz	r0, 8010e98 <_printf_i+0x1bc>
 8010e94:	1b40      	subs	r0, r0, r5
 8010e96:	6060      	str	r0, [r4, #4]
 8010e98:	6863      	ldr	r3, [r4, #4]
 8010e9a:	6123      	str	r3, [r4, #16]
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ea2:	e7a7      	b.n	8010df4 <_printf_i+0x118>
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	462a      	mov	r2, r5
 8010ea8:	4639      	mov	r1, r7
 8010eaa:	4630      	mov	r0, r6
 8010eac:	47c0      	blx	r8
 8010eae:	3001      	adds	r0, #1
 8010eb0:	d0aa      	beq.n	8010e08 <_printf_i+0x12c>
 8010eb2:	6823      	ldr	r3, [r4, #0]
 8010eb4:	079b      	lsls	r3, r3, #30
 8010eb6:	d413      	bmi.n	8010ee0 <_printf_i+0x204>
 8010eb8:	68e0      	ldr	r0, [r4, #12]
 8010eba:	9b03      	ldr	r3, [sp, #12]
 8010ebc:	4298      	cmp	r0, r3
 8010ebe:	bfb8      	it	lt
 8010ec0:	4618      	movlt	r0, r3
 8010ec2:	e7a3      	b.n	8010e0c <_printf_i+0x130>
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	464a      	mov	r2, r9
 8010ec8:	4639      	mov	r1, r7
 8010eca:	4630      	mov	r0, r6
 8010ecc:	47c0      	blx	r8
 8010ece:	3001      	adds	r0, #1
 8010ed0:	d09a      	beq.n	8010e08 <_printf_i+0x12c>
 8010ed2:	3501      	adds	r5, #1
 8010ed4:	68e3      	ldr	r3, [r4, #12]
 8010ed6:	9a03      	ldr	r2, [sp, #12]
 8010ed8:	1a9b      	subs	r3, r3, r2
 8010eda:	42ab      	cmp	r3, r5
 8010edc:	dcf2      	bgt.n	8010ec4 <_printf_i+0x1e8>
 8010ede:	e7eb      	b.n	8010eb8 <_printf_i+0x1dc>
 8010ee0:	2500      	movs	r5, #0
 8010ee2:	f104 0919 	add.w	r9, r4, #25
 8010ee6:	e7f5      	b.n	8010ed4 <_printf_i+0x1f8>
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d1ac      	bne.n	8010e46 <_printf_i+0x16a>
 8010eec:	7803      	ldrb	r3, [r0, #0]
 8010eee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ef2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ef6:	e76c      	b.n	8010dd2 <_printf_i+0xf6>
 8010ef8:	0801468a 	.word	0x0801468a
 8010efc:	0801469b 	.word	0x0801469b

08010f00 <iprintf>:
 8010f00:	b40f      	push	{r0, r1, r2, r3}
 8010f02:	4b0a      	ldr	r3, [pc, #40]	; (8010f2c <iprintf+0x2c>)
 8010f04:	b513      	push	{r0, r1, r4, lr}
 8010f06:	681c      	ldr	r4, [r3, #0]
 8010f08:	b124      	cbz	r4, 8010f14 <iprintf+0x14>
 8010f0a:	69a3      	ldr	r3, [r4, #24]
 8010f0c:	b913      	cbnz	r3, 8010f14 <iprintf+0x14>
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f001 f916 	bl	8012140 <__sinit>
 8010f14:	ab05      	add	r3, sp, #20
 8010f16:	9a04      	ldr	r2, [sp, #16]
 8010f18:	68a1      	ldr	r1, [r4, #8]
 8010f1a:	9301      	str	r3, [sp, #4]
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	f001 fdcf 	bl	8012ac0 <_vfiprintf_r>
 8010f22:	b002      	add	sp, #8
 8010f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f28:	b004      	add	sp, #16
 8010f2a:	4770      	bx	lr
 8010f2c:	20001cb4 	.word	0x20001cb4

08010f30 <_puts_r>:
 8010f30:	b570      	push	{r4, r5, r6, lr}
 8010f32:	460e      	mov	r6, r1
 8010f34:	4605      	mov	r5, r0
 8010f36:	b118      	cbz	r0, 8010f40 <_puts_r+0x10>
 8010f38:	6983      	ldr	r3, [r0, #24]
 8010f3a:	b90b      	cbnz	r3, 8010f40 <_puts_r+0x10>
 8010f3c:	f001 f900 	bl	8012140 <__sinit>
 8010f40:	69ab      	ldr	r3, [r5, #24]
 8010f42:	68ac      	ldr	r4, [r5, #8]
 8010f44:	b913      	cbnz	r3, 8010f4c <_puts_r+0x1c>
 8010f46:	4628      	mov	r0, r5
 8010f48:	f001 f8fa 	bl	8012140 <__sinit>
 8010f4c:	4b23      	ldr	r3, [pc, #140]	; (8010fdc <_puts_r+0xac>)
 8010f4e:	429c      	cmp	r4, r3
 8010f50:	d117      	bne.n	8010f82 <_puts_r+0x52>
 8010f52:	686c      	ldr	r4, [r5, #4]
 8010f54:	89a3      	ldrh	r3, [r4, #12]
 8010f56:	071b      	lsls	r3, r3, #28
 8010f58:	d51d      	bpl.n	8010f96 <_puts_r+0x66>
 8010f5a:	6923      	ldr	r3, [r4, #16]
 8010f5c:	b1db      	cbz	r3, 8010f96 <_puts_r+0x66>
 8010f5e:	3e01      	subs	r6, #1
 8010f60:	68a3      	ldr	r3, [r4, #8]
 8010f62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010f66:	3b01      	subs	r3, #1
 8010f68:	60a3      	str	r3, [r4, #8]
 8010f6a:	b9e9      	cbnz	r1, 8010fa8 <_puts_r+0x78>
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	da2e      	bge.n	8010fce <_puts_r+0x9e>
 8010f70:	4622      	mov	r2, r4
 8010f72:	210a      	movs	r1, #10
 8010f74:	4628      	mov	r0, r5
 8010f76:	f000 f8ed 	bl	8011154 <__swbuf_r>
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	d011      	beq.n	8010fa2 <_puts_r+0x72>
 8010f7e:	200a      	movs	r0, #10
 8010f80:	e011      	b.n	8010fa6 <_puts_r+0x76>
 8010f82:	4b17      	ldr	r3, [pc, #92]	; (8010fe0 <_puts_r+0xb0>)
 8010f84:	429c      	cmp	r4, r3
 8010f86:	d101      	bne.n	8010f8c <_puts_r+0x5c>
 8010f88:	68ac      	ldr	r4, [r5, #8]
 8010f8a:	e7e3      	b.n	8010f54 <_puts_r+0x24>
 8010f8c:	4b15      	ldr	r3, [pc, #84]	; (8010fe4 <_puts_r+0xb4>)
 8010f8e:	429c      	cmp	r4, r3
 8010f90:	bf08      	it	eq
 8010f92:	68ec      	ldreq	r4, [r5, #12]
 8010f94:	e7de      	b.n	8010f54 <_puts_r+0x24>
 8010f96:	4621      	mov	r1, r4
 8010f98:	4628      	mov	r0, r5
 8010f9a:	f000 f92d 	bl	80111f8 <__swsetup_r>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d0dd      	beq.n	8010f5e <_puts_r+0x2e>
 8010fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	da04      	bge.n	8010fb6 <_puts_r+0x86>
 8010fac:	69a2      	ldr	r2, [r4, #24]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	dc06      	bgt.n	8010fc0 <_puts_r+0x90>
 8010fb2:	290a      	cmp	r1, #10
 8010fb4:	d004      	beq.n	8010fc0 <_puts_r+0x90>
 8010fb6:	6823      	ldr	r3, [r4, #0]
 8010fb8:	1c5a      	adds	r2, r3, #1
 8010fba:	6022      	str	r2, [r4, #0]
 8010fbc:	7019      	strb	r1, [r3, #0]
 8010fbe:	e7cf      	b.n	8010f60 <_puts_r+0x30>
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	f000 f8c6 	bl	8011154 <__swbuf_r>
 8010fc8:	3001      	adds	r0, #1
 8010fca:	d1c9      	bne.n	8010f60 <_puts_r+0x30>
 8010fcc:	e7e9      	b.n	8010fa2 <_puts_r+0x72>
 8010fce:	6823      	ldr	r3, [r4, #0]
 8010fd0:	200a      	movs	r0, #10
 8010fd2:	1c5a      	adds	r2, r3, #1
 8010fd4:	6022      	str	r2, [r4, #0]
 8010fd6:	7018      	strb	r0, [r3, #0]
 8010fd8:	e7e5      	b.n	8010fa6 <_puts_r+0x76>
 8010fda:	bf00      	nop
 8010fdc:	080146dc 	.word	0x080146dc
 8010fe0:	080146fc 	.word	0x080146fc
 8010fe4:	080146bc 	.word	0x080146bc

08010fe8 <puts>:
 8010fe8:	4b02      	ldr	r3, [pc, #8]	; (8010ff4 <puts+0xc>)
 8010fea:	4601      	mov	r1, r0
 8010fec:	6818      	ldr	r0, [r3, #0]
 8010fee:	f7ff bf9f 	b.w	8010f30 <_puts_r>
 8010ff2:	bf00      	nop
 8010ff4:	20001cb4 	.word	0x20001cb4

08010ff8 <setvbuf>:
 8010ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ffc:	461d      	mov	r5, r3
 8010ffe:	4b51      	ldr	r3, [pc, #324]	; (8011144 <setvbuf+0x14c>)
 8011000:	681e      	ldr	r6, [r3, #0]
 8011002:	4604      	mov	r4, r0
 8011004:	460f      	mov	r7, r1
 8011006:	4690      	mov	r8, r2
 8011008:	b126      	cbz	r6, 8011014 <setvbuf+0x1c>
 801100a:	69b3      	ldr	r3, [r6, #24]
 801100c:	b913      	cbnz	r3, 8011014 <setvbuf+0x1c>
 801100e:	4630      	mov	r0, r6
 8011010:	f001 f896 	bl	8012140 <__sinit>
 8011014:	4b4c      	ldr	r3, [pc, #304]	; (8011148 <setvbuf+0x150>)
 8011016:	429c      	cmp	r4, r3
 8011018:	d152      	bne.n	80110c0 <setvbuf+0xc8>
 801101a:	6874      	ldr	r4, [r6, #4]
 801101c:	f1b8 0f02 	cmp.w	r8, #2
 8011020:	d006      	beq.n	8011030 <setvbuf+0x38>
 8011022:	f1b8 0f01 	cmp.w	r8, #1
 8011026:	f200 8089 	bhi.w	801113c <setvbuf+0x144>
 801102a:	2d00      	cmp	r5, #0
 801102c:	f2c0 8086 	blt.w	801113c <setvbuf+0x144>
 8011030:	4621      	mov	r1, r4
 8011032:	4630      	mov	r0, r6
 8011034:	f001 f81a 	bl	801206c <_fflush_r>
 8011038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801103a:	b141      	cbz	r1, 801104e <setvbuf+0x56>
 801103c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011040:	4299      	cmp	r1, r3
 8011042:	d002      	beq.n	801104a <setvbuf+0x52>
 8011044:	4630      	mov	r0, r6
 8011046:	f001 fc69 	bl	801291c <_free_r>
 801104a:	2300      	movs	r3, #0
 801104c:	6363      	str	r3, [r4, #52]	; 0x34
 801104e:	2300      	movs	r3, #0
 8011050:	61a3      	str	r3, [r4, #24]
 8011052:	6063      	str	r3, [r4, #4]
 8011054:	89a3      	ldrh	r3, [r4, #12]
 8011056:	061b      	lsls	r3, r3, #24
 8011058:	d503      	bpl.n	8011062 <setvbuf+0x6a>
 801105a:	6921      	ldr	r1, [r4, #16]
 801105c:	4630      	mov	r0, r6
 801105e:	f001 fc5d 	bl	801291c <_free_r>
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8011068:	f023 0303 	bic.w	r3, r3, #3
 801106c:	f1b8 0f02 	cmp.w	r8, #2
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	d05d      	beq.n	8011130 <setvbuf+0x138>
 8011074:	ab01      	add	r3, sp, #4
 8011076:	466a      	mov	r2, sp
 8011078:	4621      	mov	r1, r4
 801107a:	4630      	mov	r0, r6
 801107c:	f001 f8f8 	bl	8012270 <__swhatbuf_r>
 8011080:	89a3      	ldrh	r3, [r4, #12]
 8011082:	4318      	orrs	r0, r3
 8011084:	81a0      	strh	r0, [r4, #12]
 8011086:	bb2d      	cbnz	r5, 80110d4 <setvbuf+0xdc>
 8011088:	9d00      	ldr	r5, [sp, #0]
 801108a:	4628      	mov	r0, r5
 801108c:	f001 f954 	bl	8012338 <malloc>
 8011090:	4607      	mov	r7, r0
 8011092:	2800      	cmp	r0, #0
 8011094:	d14e      	bne.n	8011134 <setvbuf+0x13c>
 8011096:	f8dd 9000 	ldr.w	r9, [sp]
 801109a:	45a9      	cmp	r9, r5
 801109c:	d13c      	bne.n	8011118 <setvbuf+0x120>
 801109e:	f04f 30ff 	mov.w	r0, #4294967295
 80110a2:	89a3      	ldrh	r3, [r4, #12]
 80110a4:	f043 0302 	orr.w	r3, r3, #2
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	2300      	movs	r3, #0
 80110ac:	60a3      	str	r3, [r4, #8]
 80110ae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80110b2:	6023      	str	r3, [r4, #0]
 80110b4:	6123      	str	r3, [r4, #16]
 80110b6:	2301      	movs	r3, #1
 80110b8:	6163      	str	r3, [r4, #20]
 80110ba:	b003      	add	sp, #12
 80110bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110c0:	4b22      	ldr	r3, [pc, #136]	; (801114c <setvbuf+0x154>)
 80110c2:	429c      	cmp	r4, r3
 80110c4:	d101      	bne.n	80110ca <setvbuf+0xd2>
 80110c6:	68b4      	ldr	r4, [r6, #8]
 80110c8:	e7a8      	b.n	801101c <setvbuf+0x24>
 80110ca:	4b21      	ldr	r3, [pc, #132]	; (8011150 <setvbuf+0x158>)
 80110cc:	429c      	cmp	r4, r3
 80110ce:	bf08      	it	eq
 80110d0:	68f4      	ldreq	r4, [r6, #12]
 80110d2:	e7a3      	b.n	801101c <setvbuf+0x24>
 80110d4:	2f00      	cmp	r7, #0
 80110d6:	d0d8      	beq.n	801108a <setvbuf+0x92>
 80110d8:	69b3      	ldr	r3, [r6, #24]
 80110da:	b913      	cbnz	r3, 80110e2 <setvbuf+0xea>
 80110dc:	4630      	mov	r0, r6
 80110de:	f001 f82f 	bl	8012140 <__sinit>
 80110e2:	f1b8 0f01 	cmp.w	r8, #1
 80110e6:	bf08      	it	eq
 80110e8:	89a3      	ldrheq	r3, [r4, #12]
 80110ea:	6027      	str	r7, [r4, #0]
 80110ec:	bf04      	itt	eq
 80110ee:	f043 0301 	orreq.w	r3, r3, #1
 80110f2:	81a3      	strheq	r3, [r4, #12]
 80110f4:	89a3      	ldrh	r3, [r4, #12]
 80110f6:	f013 0008 	ands.w	r0, r3, #8
 80110fa:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80110fe:	d01b      	beq.n	8011138 <setvbuf+0x140>
 8011100:	f013 0001 	ands.w	r0, r3, #1
 8011104:	bf18      	it	ne
 8011106:	426d      	negne	r5, r5
 8011108:	f04f 0300 	mov.w	r3, #0
 801110c:	bf1d      	ittte	ne
 801110e:	60a3      	strne	r3, [r4, #8]
 8011110:	61a5      	strne	r5, [r4, #24]
 8011112:	4618      	movne	r0, r3
 8011114:	60a5      	streq	r5, [r4, #8]
 8011116:	e7d0      	b.n	80110ba <setvbuf+0xc2>
 8011118:	4648      	mov	r0, r9
 801111a:	f001 f90d 	bl	8012338 <malloc>
 801111e:	4607      	mov	r7, r0
 8011120:	2800      	cmp	r0, #0
 8011122:	d0bc      	beq.n	801109e <setvbuf+0xa6>
 8011124:	89a3      	ldrh	r3, [r4, #12]
 8011126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801112a:	81a3      	strh	r3, [r4, #12]
 801112c:	464d      	mov	r5, r9
 801112e:	e7d3      	b.n	80110d8 <setvbuf+0xe0>
 8011130:	2000      	movs	r0, #0
 8011132:	e7b6      	b.n	80110a2 <setvbuf+0xaa>
 8011134:	46a9      	mov	r9, r5
 8011136:	e7f5      	b.n	8011124 <setvbuf+0x12c>
 8011138:	60a0      	str	r0, [r4, #8]
 801113a:	e7be      	b.n	80110ba <setvbuf+0xc2>
 801113c:	f04f 30ff 	mov.w	r0, #4294967295
 8011140:	e7bb      	b.n	80110ba <setvbuf+0xc2>
 8011142:	bf00      	nop
 8011144:	20001cb4 	.word	0x20001cb4
 8011148:	080146dc 	.word	0x080146dc
 801114c:	080146fc 	.word	0x080146fc
 8011150:	080146bc 	.word	0x080146bc

08011154 <__swbuf_r>:
 8011154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011156:	460e      	mov	r6, r1
 8011158:	4614      	mov	r4, r2
 801115a:	4605      	mov	r5, r0
 801115c:	b118      	cbz	r0, 8011166 <__swbuf_r+0x12>
 801115e:	6983      	ldr	r3, [r0, #24]
 8011160:	b90b      	cbnz	r3, 8011166 <__swbuf_r+0x12>
 8011162:	f000 ffed 	bl	8012140 <__sinit>
 8011166:	4b21      	ldr	r3, [pc, #132]	; (80111ec <__swbuf_r+0x98>)
 8011168:	429c      	cmp	r4, r3
 801116a:	d12a      	bne.n	80111c2 <__swbuf_r+0x6e>
 801116c:	686c      	ldr	r4, [r5, #4]
 801116e:	69a3      	ldr	r3, [r4, #24]
 8011170:	60a3      	str	r3, [r4, #8]
 8011172:	89a3      	ldrh	r3, [r4, #12]
 8011174:	071a      	lsls	r2, r3, #28
 8011176:	d52e      	bpl.n	80111d6 <__swbuf_r+0x82>
 8011178:	6923      	ldr	r3, [r4, #16]
 801117a:	b363      	cbz	r3, 80111d6 <__swbuf_r+0x82>
 801117c:	6923      	ldr	r3, [r4, #16]
 801117e:	6820      	ldr	r0, [r4, #0]
 8011180:	1ac0      	subs	r0, r0, r3
 8011182:	6963      	ldr	r3, [r4, #20]
 8011184:	b2f6      	uxtb	r6, r6
 8011186:	4283      	cmp	r3, r0
 8011188:	4637      	mov	r7, r6
 801118a:	dc04      	bgt.n	8011196 <__swbuf_r+0x42>
 801118c:	4621      	mov	r1, r4
 801118e:	4628      	mov	r0, r5
 8011190:	f000 ff6c 	bl	801206c <_fflush_r>
 8011194:	bb28      	cbnz	r0, 80111e2 <__swbuf_r+0x8e>
 8011196:	68a3      	ldr	r3, [r4, #8]
 8011198:	3b01      	subs	r3, #1
 801119a:	60a3      	str	r3, [r4, #8]
 801119c:	6823      	ldr	r3, [r4, #0]
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	6022      	str	r2, [r4, #0]
 80111a2:	701e      	strb	r6, [r3, #0]
 80111a4:	6963      	ldr	r3, [r4, #20]
 80111a6:	3001      	adds	r0, #1
 80111a8:	4283      	cmp	r3, r0
 80111aa:	d004      	beq.n	80111b6 <__swbuf_r+0x62>
 80111ac:	89a3      	ldrh	r3, [r4, #12]
 80111ae:	07db      	lsls	r3, r3, #31
 80111b0:	d519      	bpl.n	80111e6 <__swbuf_r+0x92>
 80111b2:	2e0a      	cmp	r6, #10
 80111b4:	d117      	bne.n	80111e6 <__swbuf_r+0x92>
 80111b6:	4621      	mov	r1, r4
 80111b8:	4628      	mov	r0, r5
 80111ba:	f000 ff57 	bl	801206c <_fflush_r>
 80111be:	b190      	cbz	r0, 80111e6 <__swbuf_r+0x92>
 80111c0:	e00f      	b.n	80111e2 <__swbuf_r+0x8e>
 80111c2:	4b0b      	ldr	r3, [pc, #44]	; (80111f0 <__swbuf_r+0x9c>)
 80111c4:	429c      	cmp	r4, r3
 80111c6:	d101      	bne.n	80111cc <__swbuf_r+0x78>
 80111c8:	68ac      	ldr	r4, [r5, #8]
 80111ca:	e7d0      	b.n	801116e <__swbuf_r+0x1a>
 80111cc:	4b09      	ldr	r3, [pc, #36]	; (80111f4 <__swbuf_r+0xa0>)
 80111ce:	429c      	cmp	r4, r3
 80111d0:	bf08      	it	eq
 80111d2:	68ec      	ldreq	r4, [r5, #12]
 80111d4:	e7cb      	b.n	801116e <__swbuf_r+0x1a>
 80111d6:	4621      	mov	r1, r4
 80111d8:	4628      	mov	r0, r5
 80111da:	f000 f80d 	bl	80111f8 <__swsetup_r>
 80111de:	2800      	cmp	r0, #0
 80111e0:	d0cc      	beq.n	801117c <__swbuf_r+0x28>
 80111e2:	f04f 37ff 	mov.w	r7, #4294967295
 80111e6:	4638      	mov	r0, r7
 80111e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ea:	bf00      	nop
 80111ec:	080146dc 	.word	0x080146dc
 80111f0:	080146fc 	.word	0x080146fc
 80111f4:	080146bc 	.word	0x080146bc

080111f8 <__swsetup_r>:
 80111f8:	4b32      	ldr	r3, [pc, #200]	; (80112c4 <__swsetup_r+0xcc>)
 80111fa:	b570      	push	{r4, r5, r6, lr}
 80111fc:	681d      	ldr	r5, [r3, #0]
 80111fe:	4606      	mov	r6, r0
 8011200:	460c      	mov	r4, r1
 8011202:	b125      	cbz	r5, 801120e <__swsetup_r+0x16>
 8011204:	69ab      	ldr	r3, [r5, #24]
 8011206:	b913      	cbnz	r3, 801120e <__swsetup_r+0x16>
 8011208:	4628      	mov	r0, r5
 801120a:	f000 ff99 	bl	8012140 <__sinit>
 801120e:	4b2e      	ldr	r3, [pc, #184]	; (80112c8 <__swsetup_r+0xd0>)
 8011210:	429c      	cmp	r4, r3
 8011212:	d10f      	bne.n	8011234 <__swsetup_r+0x3c>
 8011214:	686c      	ldr	r4, [r5, #4]
 8011216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801121a:	b29a      	uxth	r2, r3
 801121c:	0715      	lsls	r5, r2, #28
 801121e:	d42c      	bmi.n	801127a <__swsetup_r+0x82>
 8011220:	06d0      	lsls	r0, r2, #27
 8011222:	d411      	bmi.n	8011248 <__swsetup_r+0x50>
 8011224:	2209      	movs	r2, #9
 8011226:	6032      	str	r2, [r6, #0]
 8011228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801122c:	81a3      	strh	r3, [r4, #12]
 801122e:	f04f 30ff 	mov.w	r0, #4294967295
 8011232:	e03e      	b.n	80112b2 <__swsetup_r+0xba>
 8011234:	4b25      	ldr	r3, [pc, #148]	; (80112cc <__swsetup_r+0xd4>)
 8011236:	429c      	cmp	r4, r3
 8011238:	d101      	bne.n	801123e <__swsetup_r+0x46>
 801123a:	68ac      	ldr	r4, [r5, #8]
 801123c:	e7eb      	b.n	8011216 <__swsetup_r+0x1e>
 801123e:	4b24      	ldr	r3, [pc, #144]	; (80112d0 <__swsetup_r+0xd8>)
 8011240:	429c      	cmp	r4, r3
 8011242:	bf08      	it	eq
 8011244:	68ec      	ldreq	r4, [r5, #12]
 8011246:	e7e6      	b.n	8011216 <__swsetup_r+0x1e>
 8011248:	0751      	lsls	r1, r2, #29
 801124a:	d512      	bpl.n	8011272 <__swsetup_r+0x7a>
 801124c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801124e:	b141      	cbz	r1, 8011262 <__swsetup_r+0x6a>
 8011250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011254:	4299      	cmp	r1, r3
 8011256:	d002      	beq.n	801125e <__swsetup_r+0x66>
 8011258:	4630      	mov	r0, r6
 801125a:	f001 fb5f 	bl	801291c <_free_r>
 801125e:	2300      	movs	r3, #0
 8011260:	6363      	str	r3, [r4, #52]	; 0x34
 8011262:	89a3      	ldrh	r3, [r4, #12]
 8011264:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011268:	81a3      	strh	r3, [r4, #12]
 801126a:	2300      	movs	r3, #0
 801126c:	6063      	str	r3, [r4, #4]
 801126e:	6923      	ldr	r3, [r4, #16]
 8011270:	6023      	str	r3, [r4, #0]
 8011272:	89a3      	ldrh	r3, [r4, #12]
 8011274:	f043 0308 	orr.w	r3, r3, #8
 8011278:	81a3      	strh	r3, [r4, #12]
 801127a:	6923      	ldr	r3, [r4, #16]
 801127c:	b94b      	cbnz	r3, 8011292 <__swsetup_r+0x9a>
 801127e:	89a3      	ldrh	r3, [r4, #12]
 8011280:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011288:	d003      	beq.n	8011292 <__swsetup_r+0x9a>
 801128a:	4621      	mov	r1, r4
 801128c:	4630      	mov	r0, r6
 801128e:	f001 f813 	bl	80122b8 <__smakebuf_r>
 8011292:	89a2      	ldrh	r2, [r4, #12]
 8011294:	f012 0301 	ands.w	r3, r2, #1
 8011298:	d00c      	beq.n	80112b4 <__swsetup_r+0xbc>
 801129a:	2300      	movs	r3, #0
 801129c:	60a3      	str	r3, [r4, #8]
 801129e:	6963      	ldr	r3, [r4, #20]
 80112a0:	425b      	negs	r3, r3
 80112a2:	61a3      	str	r3, [r4, #24]
 80112a4:	6923      	ldr	r3, [r4, #16]
 80112a6:	b953      	cbnz	r3, 80112be <__swsetup_r+0xc6>
 80112a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80112b0:	d1ba      	bne.n	8011228 <__swsetup_r+0x30>
 80112b2:	bd70      	pop	{r4, r5, r6, pc}
 80112b4:	0792      	lsls	r2, r2, #30
 80112b6:	bf58      	it	pl
 80112b8:	6963      	ldrpl	r3, [r4, #20]
 80112ba:	60a3      	str	r3, [r4, #8]
 80112bc:	e7f2      	b.n	80112a4 <__swsetup_r+0xac>
 80112be:	2000      	movs	r0, #0
 80112c0:	e7f7      	b.n	80112b2 <__swsetup_r+0xba>
 80112c2:	bf00      	nop
 80112c4:	20001cb4 	.word	0x20001cb4
 80112c8:	080146dc 	.word	0x080146dc
 80112cc:	080146fc 	.word	0x080146fc
 80112d0:	080146bc 	.word	0x080146bc

080112d4 <quorem>:
 80112d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d8:	6903      	ldr	r3, [r0, #16]
 80112da:	690c      	ldr	r4, [r1, #16]
 80112dc:	42a3      	cmp	r3, r4
 80112de:	4680      	mov	r8, r0
 80112e0:	f2c0 8082 	blt.w	80113e8 <quorem+0x114>
 80112e4:	3c01      	subs	r4, #1
 80112e6:	f101 0714 	add.w	r7, r1, #20
 80112ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80112ee:	f100 0614 	add.w	r6, r0, #20
 80112f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80112f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80112fa:	eb06 030c 	add.w	r3, r6, ip
 80112fe:	3501      	adds	r5, #1
 8011300:	eb07 090c 	add.w	r9, r7, ip
 8011304:	9301      	str	r3, [sp, #4]
 8011306:	fbb0 f5f5 	udiv	r5, r0, r5
 801130a:	b395      	cbz	r5, 8011372 <quorem+0x9e>
 801130c:	f04f 0a00 	mov.w	sl, #0
 8011310:	4638      	mov	r0, r7
 8011312:	46b6      	mov	lr, r6
 8011314:	46d3      	mov	fp, sl
 8011316:	f850 2b04 	ldr.w	r2, [r0], #4
 801131a:	b293      	uxth	r3, r2
 801131c:	fb05 a303 	mla	r3, r5, r3, sl
 8011320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011324:	b29b      	uxth	r3, r3
 8011326:	ebab 0303 	sub.w	r3, fp, r3
 801132a:	0c12      	lsrs	r2, r2, #16
 801132c:	f8de b000 	ldr.w	fp, [lr]
 8011330:	fb05 a202 	mla	r2, r5, r2, sl
 8011334:	fa13 f38b 	uxtah	r3, r3, fp
 8011338:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801133c:	fa1f fb82 	uxth.w	fp, r2
 8011340:	f8de 2000 	ldr.w	r2, [lr]
 8011344:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801134c:	b29b      	uxth	r3, r3
 801134e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011352:	4581      	cmp	r9, r0
 8011354:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011358:	f84e 3b04 	str.w	r3, [lr], #4
 801135c:	d2db      	bcs.n	8011316 <quorem+0x42>
 801135e:	f856 300c 	ldr.w	r3, [r6, ip]
 8011362:	b933      	cbnz	r3, 8011372 <quorem+0x9e>
 8011364:	9b01      	ldr	r3, [sp, #4]
 8011366:	3b04      	subs	r3, #4
 8011368:	429e      	cmp	r6, r3
 801136a:	461a      	mov	r2, r3
 801136c:	d330      	bcc.n	80113d0 <quorem+0xfc>
 801136e:	f8c8 4010 	str.w	r4, [r8, #16]
 8011372:	4640      	mov	r0, r8
 8011374:	f001 f9fe 	bl	8012774 <__mcmp>
 8011378:	2800      	cmp	r0, #0
 801137a:	db25      	blt.n	80113c8 <quorem+0xf4>
 801137c:	3501      	adds	r5, #1
 801137e:	4630      	mov	r0, r6
 8011380:	f04f 0c00 	mov.w	ip, #0
 8011384:	f857 2b04 	ldr.w	r2, [r7], #4
 8011388:	f8d0 e000 	ldr.w	lr, [r0]
 801138c:	b293      	uxth	r3, r2
 801138e:	ebac 0303 	sub.w	r3, ip, r3
 8011392:	0c12      	lsrs	r2, r2, #16
 8011394:	fa13 f38e 	uxtah	r3, r3, lr
 8011398:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801139c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80113a6:	45b9      	cmp	r9, r7
 80113a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80113ac:	f840 3b04 	str.w	r3, [r0], #4
 80113b0:	d2e8      	bcs.n	8011384 <quorem+0xb0>
 80113b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80113b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80113ba:	b92a      	cbnz	r2, 80113c8 <quorem+0xf4>
 80113bc:	3b04      	subs	r3, #4
 80113be:	429e      	cmp	r6, r3
 80113c0:	461a      	mov	r2, r3
 80113c2:	d30b      	bcc.n	80113dc <quorem+0x108>
 80113c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80113c8:	4628      	mov	r0, r5
 80113ca:	b003      	add	sp, #12
 80113cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d0:	6812      	ldr	r2, [r2, #0]
 80113d2:	3b04      	subs	r3, #4
 80113d4:	2a00      	cmp	r2, #0
 80113d6:	d1ca      	bne.n	801136e <quorem+0x9a>
 80113d8:	3c01      	subs	r4, #1
 80113da:	e7c5      	b.n	8011368 <quorem+0x94>
 80113dc:	6812      	ldr	r2, [r2, #0]
 80113de:	3b04      	subs	r3, #4
 80113e0:	2a00      	cmp	r2, #0
 80113e2:	d1ef      	bne.n	80113c4 <quorem+0xf0>
 80113e4:	3c01      	subs	r4, #1
 80113e6:	e7ea      	b.n	80113be <quorem+0xea>
 80113e8:	2000      	movs	r0, #0
 80113ea:	e7ee      	b.n	80113ca <quorem+0xf6>
 80113ec:	0000      	movs	r0, r0
	...

080113f0 <_dtoa_r>:
 80113f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f4:	ec57 6b10 	vmov	r6, r7, d0
 80113f8:	b097      	sub	sp, #92	; 0x5c
 80113fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80113fc:	9106      	str	r1, [sp, #24]
 80113fe:	4604      	mov	r4, r0
 8011400:	920b      	str	r2, [sp, #44]	; 0x2c
 8011402:	9312      	str	r3, [sp, #72]	; 0x48
 8011404:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011408:	e9cd 6700 	strd	r6, r7, [sp]
 801140c:	b93d      	cbnz	r5, 801141e <_dtoa_r+0x2e>
 801140e:	2010      	movs	r0, #16
 8011410:	f000 ff92 	bl	8012338 <malloc>
 8011414:	6260      	str	r0, [r4, #36]	; 0x24
 8011416:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801141a:	6005      	str	r5, [r0, #0]
 801141c:	60c5      	str	r5, [r0, #12]
 801141e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011420:	6819      	ldr	r1, [r3, #0]
 8011422:	b151      	cbz	r1, 801143a <_dtoa_r+0x4a>
 8011424:	685a      	ldr	r2, [r3, #4]
 8011426:	604a      	str	r2, [r1, #4]
 8011428:	2301      	movs	r3, #1
 801142a:	4093      	lsls	r3, r2
 801142c:	608b      	str	r3, [r1, #8]
 801142e:	4620      	mov	r0, r4
 8011430:	f000 ffbe 	bl	80123b0 <_Bfree>
 8011434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011436:	2200      	movs	r2, #0
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	1e3b      	subs	r3, r7, #0
 801143c:	bfbb      	ittet	lt
 801143e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011442:	9301      	strlt	r3, [sp, #4]
 8011444:	2300      	movge	r3, #0
 8011446:	2201      	movlt	r2, #1
 8011448:	bfac      	ite	ge
 801144a:	f8c8 3000 	strge.w	r3, [r8]
 801144e:	f8c8 2000 	strlt.w	r2, [r8]
 8011452:	4baf      	ldr	r3, [pc, #700]	; (8011710 <_dtoa_r+0x320>)
 8011454:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011458:	ea33 0308 	bics.w	r3, r3, r8
 801145c:	d114      	bne.n	8011488 <_dtoa_r+0x98>
 801145e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011460:	f242 730f 	movw	r3, #9999	; 0x270f
 8011464:	6013      	str	r3, [r2, #0]
 8011466:	9b00      	ldr	r3, [sp, #0]
 8011468:	b923      	cbnz	r3, 8011474 <_dtoa_r+0x84>
 801146a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801146e:	2800      	cmp	r0, #0
 8011470:	f000 8542 	beq.w	8011ef8 <_dtoa_r+0xb08>
 8011474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011476:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011724 <_dtoa_r+0x334>
 801147a:	2b00      	cmp	r3, #0
 801147c:	f000 8544 	beq.w	8011f08 <_dtoa_r+0xb18>
 8011480:	f10b 0303 	add.w	r3, fp, #3
 8011484:	f000 bd3e 	b.w	8011f04 <_dtoa_r+0xb14>
 8011488:	e9dd 6700 	ldrd	r6, r7, [sp]
 801148c:	2200      	movs	r2, #0
 801148e:	2300      	movs	r3, #0
 8011490:	4630      	mov	r0, r6
 8011492:	4639      	mov	r1, r7
 8011494:	f7ef fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8011498:	4681      	mov	r9, r0
 801149a:	b168      	cbz	r0, 80114b8 <_dtoa_r+0xc8>
 801149c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801149e:	2301      	movs	r3, #1
 80114a0:	6013      	str	r3, [r2, #0]
 80114a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	f000 8524 	beq.w	8011ef2 <_dtoa_r+0xb02>
 80114aa:	4b9a      	ldr	r3, [pc, #616]	; (8011714 <_dtoa_r+0x324>)
 80114ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80114ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80114b2:	6013      	str	r3, [r2, #0]
 80114b4:	f000 bd28 	b.w	8011f08 <_dtoa_r+0xb18>
 80114b8:	aa14      	add	r2, sp, #80	; 0x50
 80114ba:	a915      	add	r1, sp, #84	; 0x54
 80114bc:	ec47 6b10 	vmov	d0, r6, r7
 80114c0:	4620      	mov	r0, r4
 80114c2:	f001 f9ce 	bl	8012862 <__d2b>
 80114c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80114ca:	9004      	str	r0, [sp, #16]
 80114cc:	2d00      	cmp	r5, #0
 80114ce:	d07c      	beq.n	80115ca <_dtoa_r+0x1da>
 80114d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80114d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80114d8:	46b2      	mov	sl, r6
 80114da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80114de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80114e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80114e6:	2200      	movs	r2, #0
 80114e8:	4b8b      	ldr	r3, [pc, #556]	; (8011718 <_dtoa_r+0x328>)
 80114ea:	4650      	mov	r0, sl
 80114ec:	4659      	mov	r1, fp
 80114ee:	f7ee fecb 	bl	8000288 <__aeabi_dsub>
 80114f2:	a381      	add	r3, pc, #516	; (adr r3, 80116f8 <_dtoa_r+0x308>)
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	f7ef f87e 	bl	80005f8 <__aeabi_dmul>
 80114fc:	a380      	add	r3, pc, #512	; (adr r3, 8011700 <_dtoa_r+0x310>)
 80114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011502:	f7ee fec3 	bl	800028c <__adddf3>
 8011506:	4606      	mov	r6, r0
 8011508:	4628      	mov	r0, r5
 801150a:	460f      	mov	r7, r1
 801150c:	f7ef f80a 	bl	8000524 <__aeabi_i2d>
 8011510:	a37d      	add	r3, pc, #500	; (adr r3, 8011708 <_dtoa_r+0x318>)
 8011512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011516:	f7ef f86f 	bl	80005f8 <__aeabi_dmul>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	4630      	mov	r0, r6
 8011520:	4639      	mov	r1, r7
 8011522:	f7ee feb3 	bl	800028c <__adddf3>
 8011526:	4606      	mov	r6, r0
 8011528:	460f      	mov	r7, r1
 801152a:	f7ef fb15 	bl	8000b58 <__aeabi_d2iz>
 801152e:	2200      	movs	r2, #0
 8011530:	4682      	mov	sl, r0
 8011532:	2300      	movs	r3, #0
 8011534:	4630      	mov	r0, r6
 8011536:	4639      	mov	r1, r7
 8011538:	f7ef fad0 	bl	8000adc <__aeabi_dcmplt>
 801153c:	b148      	cbz	r0, 8011552 <_dtoa_r+0x162>
 801153e:	4650      	mov	r0, sl
 8011540:	f7ee fff0 	bl	8000524 <__aeabi_i2d>
 8011544:	4632      	mov	r2, r6
 8011546:	463b      	mov	r3, r7
 8011548:	f7ef fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 801154c:	b908      	cbnz	r0, 8011552 <_dtoa_r+0x162>
 801154e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011552:	f1ba 0f16 	cmp.w	sl, #22
 8011556:	d859      	bhi.n	801160c <_dtoa_r+0x21c>
 8011558:	4970      	ldr	r1, [pc, #448]	; (801171c <_dtoa_r+0x32c>)
 801155a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801155e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011566:	f7ef fad7 	bl	8000b18 <__aeabi_dcmpgt>
 801156a:	2800      	cmp	r0, #0
 801156c:	d050      	beq.n	8011610 <_dtoa_r+0x220>
 801156e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011572:	2300      	movs	r3, #0
 8011574:	930f      	str	r3, [sp, #60]	; 0x3c
 8011576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011578:	1b5d      	subs	r5, r3, r5
 801157a:	f1b5 0801 	subs.w	r8, r5, #1
 801157e:	bf49      	itett	mi
 8011580:	f1c5 0301 	rsbmi	r3, r5, #1
 8011584:	2300      	movpl	r3, #0
 8011586:	9305      	strmi	r3, [sp, #20]
 8011588:	f04f 0800 	movmi.w	r8, #0
 801158c:	bf58      	it	pl
 801158e:	9305      	strpl	r3, [sp, #20]
 8011590:	f1ba 0f00 	cmp.w	sl, #0
 8011594:	db3e      	blt.n	8011614 <_dtoa_r+0x224>
 8011596:	2300      	movs	r3, #0
 8011598:	44d0      	add	r8, sl
 801159a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801159e:	9307      	str	r3, [sp, #28]
 80115a0:	9b06      	ldr	r3, [sp, #24]
 80115a2:	2b09      	cmp	r3, #9
 80115a4:	f200 8090 	bhi.w	80116c8 <_dtoa_r+0x2d8>
 80115a8:	2b05      	cmp	r3, #5
 80115aa:	bfc4      	itt	gt
 80115ac:	3b04      	subgt	r3, #4
 80115ae:	9306      	strgt	r3, [sp, #24]
 80115b0:	9b06      	ldr	r3, [sp, #24]
 80115b2:	f1a3 0302 	sub.w	r3, r3, #2
 80115b6:	bfcc      	ite	gt
 80115b8:	2500      	movgt	r5, #0
 80115ba:	2501      	movle	r5, #1
 80115bc:	2b03      	cmp	r3, #3
 80115be:	f200 808f 	bhi.w	80116e0 <_dtoa_r+0x2f0>
 80115c2:	e8df f003 	tbb	[pc, r3]
 80115c6:	7f7d      	.short	0x7f7d
 80115c8:	7131      	.short	0x7131
 80115ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80115ce:	441d      	add	r5, r3
 80115d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80115d4:	2820      	cmp	r0, #32
 80115d6:	dd13      	ble.n	8011600 <_dtoa_r+0x210>
 80115d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80115dc:	9b00      	ldr	r3, [sp, #0]
 80115de:	fa08 f800 	lsl.w	r8, r8, r0
 80115e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80115e6:	fa23 f000 	lsr.w	r0, r3, r0
 80115ea:	ea48 0000 	orr.w	r0, r8, r0
 80115ee:	f7ee ff89 	bl	8000504 <__aeabi_ui2d>
 80115f2:	2301      	movs	r3, #1
 80115f4:	4682      	mov	sl, r0
 80115f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80115fa:	3d01      	subs	r5, #1
 80115fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80115fe:	e772      	b.n	80114e6 <_dtoa_r+0xf6>
 8011600:	9b00      	ldr	r3, [sp, #0]
 8011602:	f1c0 0020 	rsb	r0, r0, #32
 8011606:	fa03 f000 	lsl.w	r0, r3, r0
 801160a:	e7f0      	b.n	80115ee <_dtoa_r+0x1fe>
 801160c:	2301      	movs	r3, #1
 801160e:	e7b1      	b.n	8011574 <_dtoa_r+0x184>
 8011610:	900f      	str	r0, [sp, #60]	; 0x3c
 8011612:	e7b0      	b.n	8011576 <_dtoa_r+0x186>
 8011614:	9b05      	ldr	r3, [sp, #20]
 8011616:	eba3 030a 	sub.w	r3, r3, sl
 801161a:	9305      	str	r3, [sp, #20]
 801161c:	f1ca 0300 	rsb	r3, sl, #0
 8011620:	9307      	str	r3, [sp, #28]
 8011622:	2300      	movs	r3, #0
 8011624:	930e      	str	r3, [sp, #56]	; 0x38
 8011626:	e7bb      	b.n	80115a0 <_dtoa_r+0x1b0>
 8011628:	2301      	movs	r3, #1
 801162a:	930a      	str	r3, [sp, #40]	; 0x28
 801162c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801162e:	2b00      	cmp	r3, #0
 8011630:	dd59      	ble.n	80116e6 <_dtoa_r+0x2f6>
 8011632:	9302      	str	r3, [sp, #8]
 8011634:	4699      	mov	r9, r3
 8011636:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011638:	2200      	movs	r2, #0
 801163a:	6072      	str	r2, [r6, #4]
 801163c:	2204      	movs	r2, #4
 801163e:	f102 0014 	add.w	r0, r2, #20
 8011642:	4298      	cmp	r0, r3
 8011644:	6871      	ldr	r1, [r6, #4]
 8011646:	d953      	bls.n	80116f0 <_dtoa_r+0x300>
 8011648:	4620      	mov	r0, r4
 801164a:	f000 fe7d 	bl	8012348 <_Balloc>
 801164e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011650:	6030      	str	r0, [r6, #0]
 8011652:	f1b9 0f0e 	cmp.w	r9, #14
 8011656:	f8d3 b000 	ldr.w	fp, [r3]
 801165a:	f200 80e6 	bhi.w	801182a <_dtoa_r+0x43a>
 801165e:	2d00      	cmp	r5, #0
 8011660:	f000 80e3 	beq.w	801182a <_dtoa_r+0x43a>
 8011664:	ed9d 7b00 	vldr	d7, [sp]
 8011668:	f1ba 0f00 	cmp.w	sl, #0
 801166c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011670:	dd74      	ble.n	801175c <_dtoa_r+0x36c>
 8011672:	4a2a      	ldr	r2, [pc, #168]	; (801171c <_dtoa_r+0x32c>)
 8011674:	f00a 030f 	and.w	r3, sl, #15
 8011678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801167c:	ed93 7b00 	vldr	d7, [r3]
 8011680:	ea4f 162a 	mov.w	r6, sl, asr #4
 8011684:	06f0      	lsls	r0, r6, #27
 8011686:	ed8d 7b08 	vstr	d7, [sp, #32]
 801168a:	d565      	bpl.n	8011758 <_dtoa_r+0x368>
 801168c:	4b24      	ldr	r3, [pc, #144]	; (8011720 <_dtoa_r+0x330>)
 801168e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011692:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011696:	f7ef f8d9 	bl	800084c <__aeabi_ddiv>
 801169a:	e9cd 0100 	strd	r0, r1, [sp]
 801169e:	f006 060f 	and.w	r6, r6, #15
 80116a2:	2503      	movs	r5, #3
 80116a4:	4f1e      	ldr	r7, [pc, #120]	; (8011720 <_dtoa_r+0x330>)
 80116a6:	e04c      	b.n	8011742 <_dtoa_r+0x352>
 80116a8:	2301      	movs	r3, #1
 80116aa:	930a      	str	r3, [sp, #40]	; 0x28
 80116ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116ae:	4453      	add	r3, sl
 80116b0:	f103 0901 	add.w	r9, r3, #1
 80116b4:	9302      	str	r3, [sp, #8]
 80116b6:	464b      	mov	r3, r9
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	bfb8      	it	lt
 80116bc:	2301      	movlt	r3, #1
 80116be:	e7ba      	b.n	8011636 <_dtoa_r+0x246>
 80116c0:	2300      	movs	r3, #0
 80116c2:	e7b2      	b.n	801162a <_dtoa_r+0x23a>
 80116c4:	2300      	movs	r3, #0
 80116c6:	e7f0      	b.n	80116aa <_dtoa_r+0x2ba>
 80116c8:	2501      	movs	r5, #1
 80116ca:	2300      	movs	r3, #0
 80116cc:	9306      	str	r3, [sp, #24]
 80116ce:	950a      	str	r5, [sp, #40]	; 0x28
 80116d0:	f04f 33ff 	mov.w	r3, #4294967295
 80116d4:	9302      	str	r3, [sp, #8]
 80116d6:	4699      	mov	r9, r3
 80116d8:	2200      	movs	r2, #0
 80116da:	2312      	movs	r3, #18
 80116dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80116de:	e7aa      	b.n	8011636 <_dtoa_r+0x246>
 80116e0:	2301      	movs	r3, #1
 80116e2:	930a      	str	r3, [sp, #40]	; 0x28
 80116e4:	e7f4      	b.n	80116d0 <_dtoa_r+0x2e0>
 80116e6:	2301      	movs	r3, #1
 80116e8:	9302      	str	r3, [sp, #8]
 80116ea:	4699      	mov	r9, r3
 80116ec:	461a      	mov	r2, r3
 80116ee:	e7f5      	b.n	80116dc <_dtoa_r+0x2ec>
 80116f0:	3101      	adds	r1, #1
 80116f2:	6071      	str	r1, [r6, #4]
 80116f4:	0052      	lsls	r2, r2, #1
 80116f6:	e7a2      	b.n	801163e <_dtoa_r+0x24e>
 80116f8:	636f4361 	.word	0x636f4361
 80116fc:	3fd287a7 	.word	0x3fd287a7
 8011700:	8b60c8b3 	.word	0x8b60c8b3
 8011704:	3fc68a28 	.word	0x3fc68a28
 8011708:	509f79fb 	.word	0x509f79fb
 801170c:	3fd34413 	.word	0x3fd34413
 8011710:	7ff00000 	.word	0x7ff00000
 8011714:	08014689 	.word	0x08014689
 8011718:	3ff80000 	.word	0x3ff80000
 801171c:	08014748 	.word	0x08014748
 8011720:	08014720 	.word	0x08014720
 8011724:	080146b5 	.word	0x080146b5
 8011728:	07f1      	lsls	r1, r6, #31
 801172a:	d508      	bpl.n	801173e <_dtoa_r+0x34e>
 801172c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011734:	f7ee ff60 	bl	80005f8 <__aeabi_dmul>
 8011738:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801173c:	3501      	adds	r5, #1
 801173e:	1076      	asrs	r6, r6, #1
 8011740:	3708      	adds	r7, #8
 8011742:	2e00      	cmp	r6, #0
 8011744:	d1f0      	bne.n	8011728 <_dtoa_r+0x338>
 8011746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801174a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801174e:	f7ef f87d 	bl	800084c <__aeabi_ddiv>
 8011752:	e9cd 0100 	strd	r0, r1, [sp]
 8011756:	e01a      	b.n	801178e <_dtoa_r+0x39e>
 8011758:	2502      	movs	r5, #2
 801175a:	e7a3      	b.n	80116a4 <_dtoa_r+0x2b4>
 801175c:	f000 80a0 	beq.w	80118a0 <_dtoa_r+0x4b0>
 8011760:	f1ca 0600 	rsb	r6, sl, #0
 8011764:	4b9f      	ldr	r3, [pc, #636]	; (80119e4 <_dtoa_r+0x5f4>)
 8011766:	4fa0      	ldr	r7, [pc, #640]	; (80119e8 <_dtoa_r+0x5f8>)
 8011768:	f006 020f 	and.w	r2, r6, #15
 801176c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011774:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011778:	f7ee ff3e 	bl	80005f8 <__aeabi_dmul>
 801177c:	e9cd 0100 	strd	r0, r1, [sp]
 8011780:	1136      	asrs	r6, r6, #4
 8011782:	2300      	movs	r3, #0
 8011784:	2502      	movs	r5, #2
 8011786:	2e00      	cmp	r6, #0
 8011788:	d17f      	bne.n	801188a <_dtoa_r+0x49a>
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1e1      	bne.n	8011752 <_dtoa_r+0x362>
 801178e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011790:	2b00      	cmp	r3, #0
 8011792:	f000 8087 	beq.w	80118a4 <_dtoa_r+0x4b4>
 8011796:	e9dd 6700 	ldrd	r6, r7, [sp]
 801179a:	2200      	movs	r2, #0
 801179c:	4b93      	ldr	r3, [pc, #588]	; (80119ec <_dtoa_r+0x5fc>)
 801179e:	4630      	mov	r0, r6
 80117a0:	4639      	mov	r1, r7
 80117a2:	f7ef f99b 	bl	8000adc <__aeabi_dcmplt>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	d07c      	beq.n	80118a4 <_dtoa_r+0x4b4>
 80117aa:	f1b9 0f00 	cmp.w	r9, #0
 80117ae:	d079      	beq.n	80118a4 <_dtoa_r+0x4b4>
 80117b0:	9b02      	ldr	r3, [sp, #8]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	dd35      	ble.n	8011822 <_dtoa_r+0x432>
 80117b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80117ba:	9308      	str	r3, [sp, #32]
 80117bc:	4639      	mov	r1, r7
 80117be:	2200      	movs	r2, #0
 80117c0:	4b8b      	ldr	r3, [pc, #556]	; (80119f0 <_dtoa_r+0x600>)
 80117c2:	4630      	mov	r0, r6
 80117c4:	f7ee ff18 	bl	80005f8 <__aeabi_dmul>
 80117c8:	e9cd 0100 	strd	r0, r1, [sp]
 80117cc:	9f02      	ldr	r7, [sp, #8]
 80117ce:	3501      	adds	r5, #1
 80117d0:	4628      	mov	r0, r5
 80117d2:	f7ee fea7 	bl	8000524 <__aeabi_i2d>
 80117d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117da:	f7ee ff0d 	bl	80005f8 <__aeabi_dmul>
 80117de:	2200      	movs	r2, #0
 80117e0:	4b84      	ldr	r3, [pc, #528]	; (80119f4 <_dtoa_r+0x604>)
 80117e2:	f7ee fd53 	bl	800028c <__adddf3>
 80117e6:	4605      	mov	r5, r0
 80117e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80117ec:	2f00      	cmp	r7, #0
 80117ee:	d15d      	bne.n	80118ac <_dtoa_r+0x4bc>
 80117f0:	2200      	movs	r2, #0
 80117f2:	4b81      	ldr	r3, [pc, #516]	; (80119f8 <_dtoa_r+0x608>)
 80117f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117f8:	f7ee fd46 	bl	8000288 <__aeabi_dsub>
 80117fc:	462a      	mov	r2, r5
 80117fe:	4633      	mov	r3, r6
 8011800:	e9cd 0100 	strd	r0, r1, [sp]
 8011804:	f7ef f988 	bl	8000b18 <__aeabi_dcmpgt>
 8011808:	2800      	cmp	r0, #0
 801180a:	f040 8288 	bne.w	8011d1e <_dtoa_r+0x92e>
 801180e:	462a      	mov	r2, r5
 8011810:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011818:	f7ef f960 	bl	8000adc <__aeabi_dcmplt>
 801181c:	2800      	cmp	r0, #0
 801181e:	f040 827c 	bne.w	8011d1a <_dtoa_r+0x92a>
 8011822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011826:	e9cd 2300 	strd	r2, r3, [sp]
 801182a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801182c:	2b00      	cmp	r3, #0
 801182e:	f2c0 8150 	blt.w	8011ad2 <_dtoa_r+0x6e2>
 8011832:	f1ba 0f0e 	cmp.w	sl, #14
 8011836:	f300 814c 	bgt.w	8011ad2 <_dtoa_r+0x6e2>
 801183a:	4b6a      	ldr	r3, [pc, #424]	; (80119e4 <_dtoa_r+0x5f4>)
 801183c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011840:	ed93 7b00 	vldr	d7, [r3]
 8011844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011846:	2b00      	cmp	r3, #0
 8011848:	ed8d 7b02 	vstr	d7, [sp, #8]
 801184c:	f280 80d8 	bge.w	8011a00 <_dtoa_r+0x610>
 8011850:	f1b9 0f00 	cmp.w	r9, #0
 8011854:	f300 80d4 	bgt.w	8011a00 <_dtoa_r+0x610>
 8011858:	f040 825e 	bne.w	8011d18 <_dtoa_r+0x928>
 801185c:	2200      	movs	r2, #0
 801185e:	4b66      	ldr	r3, [pc, #408]	; (80119f8 <_dtoa_r+0x608>)
 8011860:	ec51 0b17 	vmov	r0, r1, d7
 8011864:	f7ee fec8 	bl	80005f8 <__aeabi_dmul>
 8011868:	e9dd 2300 	ldrd	r2, r3, [sp]
 801186c:	f7ef f94a 	bl	8000b04 <__aeabi_dcmpge>
 8011870:	464f      	mov	r7, r9
 8011872:	464e      	mov	r6, r9
 8011874:	2800      	cmp	r0, #0
 8011876:	f040 8234 	bne.w	8011ce2 <_dtoa_r+0x8f2>
 801187a:	2331      	movs	r3, #49	; 0x31
 801187c:	f10b 0501 	add.w	r5, fp, #1
 8011880:	f88b 3000 	strb.w	r3, [fp]
 8011884:	f10a 0a01 	add.w	sl, sl, #1
 8011888:	e22f      	b.n	8011cea <_dtoa_r+0x8fa>
 801188a:	07f2      	lsls	r2, r6, #31
 801188c:	d505      	bpl.n	801189a <_dtoa_r+0x4aa>
 801188e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011892:	f7ee feb1 	bl	80005f8 <__aeabi_dmul>
 8011896:	3501      	adds	r5, #1
 8011898:	2301      	movs	r3, #1
 801189a:	1076      	asrs	r6, r6, #1
 801189c:	3708      	adds	r7, #8
 801189e:	e772      	b.n	8011786 <_dtoa_r+0x396>
 80118a0:	2502      	movs	r5, #2
 80118a2:	e774      	b.n	801178e <_dtoa_r+0x39e>
 80118a4:	f8cd a020 	str.w	sl, [sp, #32]
 80118a8:	464f      	mov	r7, r9
 80118aa:	e791      	b.n	80117d0 <_dtoa_r+0x3e0>
 80118ac:	4b4d      	ldr	r3, [pc, #308]	; (80119e4 <_dtoa_r+0x5f4>)
 80118ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80118b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80118b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d047      	beq.n	801194c <_dtoa_r+0x55c>
 80118bc:	4602      	mov	r2, r0
 80118be:	460b      	mov	r3, r1
 80118c0:	2000      	movs	r0, #0
 80118c2:	494e      	ldr	r1, [pc, #312]	; (80119fc <_dtoa_r+0x60c>)
 80118c4:	f7ee ffc2 	bl	800084c <__aeabi_ddiv>
 80118c8:	462a      	mov	r2, r5
 80118ca:	4633      	mov	r3, r6
 80118cc:	f7ee fcdc 	bl	8000288 <__aeabi_dsub>
 80118d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80118d4:	465d      	mov	r5, fp
 80118d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118da:	f7ef f93d 	bl	8000b58 <__aeabi_d2iz>
 80118de:	4606      	mov	r6, r0
 80118e0:	f7ee fe20 	bl	8000524 <__aeabi_i2d>
 80118e4:	4602      	mov	r2, r0
 80118e6:	460b      	mov	r3, r1
 80118e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118ec:	f7ee fccc 	bl	8000288 <__aeabi_dsub>
 80118f0:	3630      	adds	r6, #48	; 0x30
 80118f2:	f805 6b01 	strb.w	r6, [r5], #1
 80118f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80118fa:	e9cd 0100 	strd	r0, r1, [sp]
 80118fe:	f7ef f8ed 	bl	8000adc <__aeabi_dcmplt>
 8011902:	2800      	cmp	r0, #0
 8011904:	d163      	bne.n	80119ce <_dtoa_r+0x5de>
 8011906:	e9dd 2300 	ldrd	r2, r3, [sp]
 801190a:	2000      	movs	r0, #0
 801190c:	4937      	ldr	r1, [pc, #220]	; (80119ec <_dtoa_r+0x5fc>)
 801190e:	f7ee fcbb 	bl	8000288 <__aeabi_dsub>
 8011912:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011916:	f7ef f8e1 	bl	8000adc <__aeabi_dcmplt>
 801191a:	2800      	cmp	r0, #0
 801191c:	f040 80b7 	bne.w	8011a8e <_dtoa_r+0x69e>
 8011920:	eba5 030b 	sub.w	r3, r5, fp
 8011924:	429f      	cmp	r7, r3
 8011926:	f77f af7c 	ble.w	8011822 <_dtoa_r+0x432>
 801192a:	2200      	movs	r2, #0
 801192c:	4b30      	ldr	r3, [pc, #192]	; (80119f0 <_dtoa_r+0x600>)
 801192e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011932:	f7ee fe61 	bl	80005f8 <__aeabi_dmul>
 8011936:	2200      	movs	r2, #0
 8011938:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801193c:	4b2c      	ldr	r3, [pc, #176]	; (80119f0 <_dtoa_r+0x600>)
 801193e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011942:	f7ee fe59 	bl	80005f8 <__aeabi_dmul>
 8011946:	e9cd 0100 	strd	r0, r1, [sp]
 801194a:	e7c4      	b.n	80118d6 <_dtoa_r+0x4e6>
 801194c:	462a      	mov	r2, r5
 801194e:	4633      	mov	r3, r6
 8011950:	f7ee fe52 	bl	80005f8 <__aeabi_dmul>
 8011954:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011958:	eb0b 0507 	add.w	r5, fp, r7
 801195c:	465e      	mov	r6, fp
 801195e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011962:	f7ef f8f9 	bl	8000b58 <__aeabi_d2iz>
 8011966:	4607      	mov	r7, r0
 8011968:	f7ee fddc 	bl	8000524 <__aeabi_i2d>
 801196c:	3730      	adds	r7, #48	; 0x30
 801196e:	4602      	mov	r2, r0
 8011970:	460b      	mov	r3, r1
 8011972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011976:	f7ee fc87 	bl	8000288 <__aeabi_dsub>
 801197a:	f806 7b01 	strb.w	r7, [r6], #1
 801197e:	42ae      	cmp	r6, r5
 8011980:	e9cd 0100 	strd	r0, r1, [sp]
 8011984:	f04f 0200 	mov.w	r2, #0
 8011988:	d126      	bne.n	80119d8 <_dtoa_r+0x5e8>
 801198a:	4b1c      	ldr	r3, [pc, #112]	; (80119fc <_dtoa_r+0x60c>)
 801198c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011990:	f7ee fc7c 	bl	800028c <__adddf3>
 8011994:	4602      	mov	r2, r0
 8011996:	460b      	mov	r3, r1
 8011998:	e9dd 0100 	ldrd	r0, r1, [sp]
 801199c:	f7ef f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	d174      	bne.n	8011a8e <_dtoa_r+0x69e>
 80119a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80119a8:	2000      	movs	r0, #0
 80119aa:	4914      	ldr	r1, [pc, #80]	; (80119fc <_dtoa_r+0x60c>)
 80119ac:	f7ee fc6c 	bl	8000288 <__aeabi_dsub>
 80119b0:	4602      	mov	r2, r0
 80119b2:	460b      	mov	r3, r1
 80119b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119b8:	f7ef f890 	bl	8000adc <__aeabi_dcmplt>
 80119bc:	2800      	cmp	r0, #0
 80119be:	f43f af30 	beq.w	8011822 <_dtoa_r+0x432>
 80119c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80119c6:	2b30      	cmp	r3, #48	; 0x30
 80119c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80119cc:	d002      	beq.n	80119d4 <_dtoa_r+0x5e4>
 80119ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80119d2:	e04a      	b.n	8011a6a <_dtoa_r+0x67a>
 80119d4:	4615      	mov	r5, r2
 80119d6:	e7f4      	b.n	80119c2 <_dtoa_r+0x5d2>
 80119d8:	4b05      	ldr	r3, [pc, #20]	; (80119f0 <_dtoa_r+0x600>)
 80119da:	f7ee fe0d 	bl	80005f8 <__aeabi_dmul>
 80119de:	e9cd 0100 	strd	r0, r1, [sp]
 80119e2:	e7bc      	b.n	801195e <_dtoa_r+0x56e>
 80119e4:	08014748 	.word	0x08014748
 80119e8:	08014720 	.word	0x08014720
 80119ec:	3ff00000 	.word	0x3ff00000
 80119f0:	40240000 	.word	0x40240000
 80119f4:	401c0000 	.word	0x401c0000
 80119f8:	40140000 	.word	0x40140000
 80119fc:	3fe00000 	.word	0x3fe00000
 8011a00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011a04:	465d      	mov	r5, fp
 8011a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	4639      	mov	r1, r7
 8011a0e:	f7ee ff1d 	bl	800084c <__aeabi_ddiv>
 8011a12:	f7ef f8a1 	bl	8000b58 <__aeabi_d2iz>
 8011a16:	4680      	mov	r8, r0
 8011a18:	f7ee fd84 	bl	8000524 <__aeabi_i2d>
 8011a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a20:	f7ee fdea 	bl	80005f8 <__aeabi_dmul>
 8011a24:	4602      	mov	r2, r0
 8011a26:	460b      	mov	r3, r1
 8011a28:	4630      	mov	r0, r6
 8011a2a:	4639      	mov	r1, r7
 8011a2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011a30:	f7ee fc2a 	bl	8000288 <__aeabi_dsub>
 8011a34:	f805 6b01 	strb.w	r6, [r5], #1
 8011a38:	eba5 060b 	sub.w	r6, r5, fp
 8011a3c:	45b1      	cmp	r9, r6
 8011a3e:	4602      	mov	r2, r0
 8011a40:	460b      	mov	r3, r1
 8011a42:	d139      	bne.n	8011ab8 <_dtoa_r+0x6c8>
 8011a44:	f7ee fc22 	bl	800028c <__adddf3>
 8011a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a4c:	4606      	mov	r6, r0
 8011a4e:	460f      	mov	r7, r1
 8011a50:	f7ef f862 	bl	8000b18 <__aeabi_dcmpgt>
 8011a54:	b9c8      	cbnz	r0, 8011a8a <_dtoa_r+0x69a>
 8011a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	4639      	mov	r1, r7
 8011a5e:	f7ef f833 	bl	8000ac8 <__aeabi_dcmpeq>
 8011a62:	b110      	cbz	r0, 8011a6a <_dtoa_r+0x67a>
 8011a64:	f018 0f01 	tst.w	r8, #1
 8011a68:	d10f      	bne.n	8011a8a <_dtoa_r+0x69a>
 8011a6a:	9904      	ldr	r1, [sp, #16]
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f000 fc9f 	bl	80123b0 <_Bfree>
 8011a72:	2300      	movs	r3, #0
 8011a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011a76:	702b      	strb	r3, [r5, #0]
 8011a78:	f10a 0301 	add.w	r3, sl, #1
 8011a7c:	6013      	str	r3, [r2, #0]
 8011a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f000 8241 	beq.w	8011f08 <_dtoa_r+0xb18>
 8011a86:	601d      	str	r5, [r3, #0]
 8011a88:	e23e      	b.n	8011f08 <_dtoa_r+0xb18>
 8011a8a:	f8cd a020 	str.w	sl, [sp, #32]
 8011a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011a92:	2a39      	cmp	r2, #57	; 0x39
 8011a94:	f105 33ff 	add.w	r3, r5, #4294967295
 8011a98:	d108      	bne.n	8011aac <_dtoa_r+0x6bc>
 8011a9a:	459b      	cmp	fp, r3
 8011a9c:	d10a      	bne.n	8011ab4 <_dtoa_r+0x6c4>
 8011a9e:	9b08      	ldr	r3, [sp, #32]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	9308      	str	r3, [sp, #32]
 8011aa4:	2330      	movs	r3, #48	; 0x30
 8011aa6:	f88b 3000 	strb.w	r3, [fp]
 8011aaa:	465b      	mov	r3, fp
 8011aac:	781a      	ldrb	r2, [r3, #0]
 8011aae:	3201      	adds	r2, #1
 8011ab0:	701a      	strb	r2, [r3, #0]
 8011ab2:	e78c      	b.n	80119ce <_dtoa_r+0x5de>
 8011ab4:	461d      	mov	r5, r3
 8011ab6:	e7ea      	b.n	8011a8e <_dtoa_r+0x69e>
 8011ab8:	2200      	movs	r2, #0
 8011aba:	4b9b      	ldr	r3, [pc, #620]	; (8011d28 <_dtoa_r+0x938>)
 8011abc:	f7ee fd9c 	bl	80005f8 <__aeabi_dmul>
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	4606      	mov	r6, r0
 8011ac6:	460f      	mov	r7, r1
 8011ac8:	f7ee fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	d09a      	beq.n	8011a06 <_dtoa_r+0x616>
 8011ad0:	e7cb      	b.n	8011a6a <_dtoa_r+0x67a>
 8011ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ad4:	2a00      	cmp	r2, #0
 8011ad6:	f000 808b 	beq.w	8011bf0 <_dtoa_r+0x800>
 8011ada:	9a06      	ldr	r2, [sp, #24]
 8011adc:	2a01      	cmp	r2, #1
 8011ade:	dc6e      	bgt.n	8011bbe <_dtoa_r+0x7ce>
 8011ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011ae2:	2a00      	cmp	r2, #0
 8011ae4:	d067      	beq.n	8011bb6 <_dtoa_r+0x7c6>
 8011ae6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011aea:	9f07      	ldr	r7, [sp, #28]
 8011aec:	9d05      	ldr	r5, [sp, #20]
 8011aee:	9a05      	ldr	r2, [sp, #20]
 8011af0:	2101      	movs	r1, #1
 8011af2:	441a      	add	r2, r3
 8011af4:	4620      	mov	r0, r4
 8011af6:	9205      	str	r2, [sp, #20]
 8011af8:	4498      	add	r8, r3
 8011afa:	f000 fcf9 	bl	80124f0 <__i2b>
 8011afe:	4606      	mov	r6, r0
 8011b00:	2d00      	cmp	r5, #0
 8011b02:	dd0c      	ble.n	8011b1e <_dtoa_r+0x72e>
 8011b04:	f1b8 0f00 	cmp.w	r8, #0
 8011b08:	dd09      	ble.n	8011b1e <_dtoa_r+0x72e>
 8011b0a:	4545      	cmp	r5, r8
 8011b0c:	9a05      	ldr	r2, [sp, #20]
 8011b0e:	462b      	mov	r3, r5
 8011b10:	bfa8      	it	ge
 8011b12:	4643      	movge	r3, r8
 8011b14:	1ad2      	subs	r2, r2, r3
 8011b16:	9205      	str	r2, [sp, #20]
 8011b18:	1aed      	subs	r5, r5, r3
 8011b1a:	eba8 0803 	sub.w	r8, r8, r3
 8011b1e:	9b07      	ldr	r3, [sp, #28]
 8011b20:	b1eb      	cbz	r3, 8011b5e <_dtoa_r+0x76e>
 8011b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d067      	beq.n	8011bf8 <_dtoa_r+0x808>
 8011b28:	b18f      	cbz	r7, 8011b4e <_dtoa_r+0x75e>
 8011b2a:	4631      	mov	r1, r6
 8011b2c:	463a      	mov	r2, r7
 8011b2e:	4620      	mov	r0, r4
 8011b30:	f000 fd7e 	bl	8012630 <__pow5mult>
 8011b34:	9a04      	ldr	r2, [sp, #16]
 8011b36:	4601      	mov	r1, r0
 8011b38:	4606      	mov	r6, r0
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f000 fce1 	bl	8012502 <__multiply>
 8011b40:	9904      	ldr	r1, [sp, #16]
 8011b42:	9008      	str	r0, [sp, #32]
 8011b44:	4620      	mov	r0, r4
 8011b46:	f000 fc33 	bl	80123b0 <_Bfree>
 8011b4a:	9b08      	ldr	r3, [sp, #32]
 8011b4c:	9304      	str	r3, [sp, #16]
 8011b4e:	9b07      	ldr	r3, [sp, #28]
 8011b50:	1bda      	subs	r2, r3, r7
 8011b52:	d004      	beq.n	8011b5e <_dtoa_r+0x76e>
 8011b54:	9904      	ldr	r1, [sp, #16]
 8011b56:	4620      	mov	r0, r4
 8011b58:	f000 fd6a 	bl	8012630 <__pow5mult>
 8011b5c:	9004      	str	r0, [sp, #16]
 8011b5e:	2101      	movs	r1, #1
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 fcc5 	bl	80124f0 <__i2b>
 8011b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b68:	4607      	mov	r7, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f000 81d0 	beq.w	8011f10 <_dtoa_r+0xb20>
 8011b70:	461a      	mov	r2, r3
 8011b72:	4601      	mov	r1, r0
 8011b74:	4620      	mov	r0, r4
 8011b76:	f000 fd5b 	bl	8012630 <__pow5mult>
 8011b7a:	9b06      	ldr	r3, [sp, #24]
 8011b7c:	2b01      	cmp	r3, #1
 8011b7e:	4607      	mov	r7, r0
 8011b80:	dc40      	bgt.n	8011c04 <_dtoa_r+0x814>
 8011b82:	9b00      	ldr	r3, [sp, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d139      	bne.n	8011bfc <_dtoa_r+0x80c>
 8011b88:	9b01      	ldr	r3, [sp, #4]
 8011b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d136      	bne.n	8011c00 <_dtoa_r+0x810>
 8011b92:	9b01      	ldr	r3, [sp, #4]
 8011b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011b98:	0d1b      	lsrs	r3, r3, #20
 8011b9a:	051b      	lsls	r3, r3, #20
 8011b9c:	b12b      	cbz	r3, 8011baa <_dtoa_r+0x7ba>
 8011b9e:	9b05      	ldr	r3, [sp, #20]
 8011ba0:	3301      	adds	r3, #1
 8011ba2:	9305      	str	r3, [sp, #20]
 8011ba4:	f108 0801 	add.w	r8, r8, #1
 8011ba8:	2301      	movs	r3, #1
 8011baa:	9307      	str	r3, [sp, #28]
 8011bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d12a      	bne.n	8011c08 <_dtoa_r+0x818>
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	e030      	b.n	8011c18 <_dtoa_r+0x828>
 8011bb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011bbc:	e795      	b.n	8011aea <_dtoa_r+0x6fa>
 8011bbe:	9b07      	ldr	r3, [sp, #28]
 8011bc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8011bc4:	42bb      	cmp	r3, r7
 8011bc6:	bfbf      	itttt	lt
 8011bc8:	9b07      	ldrlt	r3, [sp, #28]
 8011bca:	9707      	strlt	r7, [sp, #28]
 8011bcc:	1afa      	sublt	r2, r7, r3
 8011bce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011bd0:	bfbb      	ittet	lt
 8011bd2:	189b      	addlt	r3, r3, r2
 8011bd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011bd6:	1bdf      	subge	r7, r3, r7
 8011bd8:	2700      	movlt	r7, #0
 8011bda:	f1b9 0f00 	cmp.w	r9, #0
 8011bde:	bfb5      	itete	lt
 8011be0:	9b05      	ldrlt	r3, [sp, #20]
 8011be2:	9d05      	ldrge	r5, [sp, #20]
 8011be4:	eba3 0509 	sublt.w	r5, r3, r9
 8011be8:	464b      	movge	r3, r9
 8011bea:	bfb8      	it	lt
 8011bec:	2300      	movlt	r3, #0
 8011bee:	e77e      	b.n	8011aee <_dtoa_r+0x6fe>
 8011bf0:	9f07      	ldr	r7, [sp, #28]
 8011bf2:	9d05      	ldr	r5, [sp, #20]
 8011bf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011bf6:	e783      	b.n	8011b00 <_dtoa_r+0x710>
 8011bf8:	9a07      	ldr	r2, [sp, #28]
 8011bfa:	e7ab      	b.n	8011b54 <_dtoa_r+0x764>
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	e7d4      	b.n	8011baa <_dtoa_r+0x7ba>
 8011c00:	9b00      	ldr	r3, [sp, #0]
 8011c02:	e7d2      	b.n	8011baa <_dtoa_r+0x7ba>
 8011c04:	2300      	movs	r3, #0
 8011c06:	9307      	str	r3, [sp, #28]
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011c0e:	6918      	ldr	r0, [r3, #16]
 8011c10:	f000 fc20 	bl	8012454 <__hi0bits>
 8011c14:	f1c0 0020 	rsb	r0, r0, #32
 8011c18:	4440      	add	r0, r8
 8011c1a:	f010 001f 	ands.w	r0, r0, #31
 8011c1e:	d047      	beq.n	8011cb0 <_dtoa_r+0x8c0>
 8011c20:	f1c0 0320 	rsb	r3, r0, #32
 8011c24:	2b04      	cmp	r3, #4
 8011c26:	dd3b      	ble.n	8011ca0 <_dtoa_r+0x8b0>
 8011c28:	9b05      	ldr	r3, [sp, #20]
 8011c2a:	f1c0 001c 	rsb	r0, r0, #28
 8011c2e:	4403      	add	r3, r0
 8011c30:	9305      	str	r3, [sp, #20]
 8011c32:	4405      	add	r5, r0
 8011c34:	4480      	add	r8, r0
 8011c36:	9b05      	ldr	r3, [sp, #20]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	dd05      	ble.n	8011c48 <_dtoa_r+0x858>
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	9904      	ldr	r1, [sp, #16]
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fd43 	bl	80126cc <__lshift>
 8011c46:	9004      	str	r0, [sp, #16]
 8011c48:	f1b8 0f00 	cmp.w	r8, #0
 8011c4c:	dd05      	ble.n	8011c5a <_dtoa_r+0x86a>
 8011c4e:	4639      	mov	r1, r7
 8011c50:	4642      	mov	r2, r8
 8011c52:	4620      	mov	r0, r4
 8011c54:	f000 fd3a 	bl	80126cc <__lshift>
 8011c58:	4607      	mov	r7, r0
 8011c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c5c:	b353      	cbz	r3, 8011cb4 <_dtoa_r+0x8c4>
 8011c5e:	4639      	mov	r1, r7
 8011c60:	9804      	ldr	r0, [sp, #16]
 8011c62:	f000 fd87 	bl	8012774 <__mcmp>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	da24      	bge.n	8011cb4 <_dtoa_r+0x8c4>
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	220a      	movs	r2, #10
 8011c6e:	9904      	ldr	r1, [sp, #16]
 8011c70:	4620      	mov	r0, r4
 8011c72:	f000 fbb4 	bl	80123de <__multadd>
 8011c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c78:	9004      	str	r0, [sp, #16]
 8011c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f000 814d 	beq.w	8011f1e <_dtoa_r+0xb2e>
 8011c84:	2300      	movs	r3, #0
 8011c86:	4631      	mov	r1, r6
 8011c88:	220a      	movs	r2, #10
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f000 fba7 	bl	80123de <__multadd>
 8011c90:	9b02      	ldr	r3, [sp, #8]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	4606      	mov	r6, r0
 8011c96:	dc4f      	bgt.n	8011d38 <_dtoa_r+0x948>
 8011c98:	9b06      	ldr	r3, [sp, #24]
 8011c9a:	2b02      	cmp	r3, #2
 8011c9c:	dd4c      	ble.n	8011d38 <_dtoa_r+0x948>
 8011c9e:	e011      	b.n	8011cc4 <_dtoa_r+0x8d4>
 8011ca0:	d0c9      	beq.n	8011c36 <_dtoa_r+0x846>
 8011ca2:	9a05      	ldr	r2, [sp, #20]
 8011ca4:	331c      	adds	r3, #28
 8011ca6:	441a      	add	r2, r3
 8011ca8:	9205      	str	r2, [sp, #20]
 8011caa:	441d      	add	r5, r3
 8011cac:	4498      	add	r8, r3
 8011cae:	e7c2      	b.n	8011c36 <_dtoa_r+0x846>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	e7f6      	b.n	8011ca2 <_dtoa_r+0x8b2>
 8011cb4:	f1b9 0f00 	cmp.w	r9, #0
 8011cb8:	dc38      	bgt.n	8011d2c <_dtoa_r+0x93c>
 8011cba:	9b06      	ldr	r3, [sp, #24]
 8011cbc:	2b02      	cmp	r3, #2
 8011cbe:	dd35      	ble.n	8011d2c <_dtoa_r+0x93c>
 8011cc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8011cc4:	9b02      	ldr	r3, [sp, #8]
 8011cc6:	b963      	cbnz	r3, 8011ce2 <_dtoa_r+0x8f2>
 8011cc8:	4639      	mov	r1, r7
 8011cca:	2205      	movs	r2, #5
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f000 fb86 	bl	80123de <__multadd>
 8011cd2:	4601      	mov	r1, r0
 8011cd4:	4607      	mov	r7, r0
 8011cd6:	9804      	ldr	r0, [sp, #16]
 8011cd8:	f000 fd4c 	bl	8012774 <__mcmp>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	f73f adcc 	bgt.w	801187a <_dtoa_r+0x48a>
 8011ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ce4:	465d      	mov	r5, fp
 8011ce6:	ea6f 0a03 	mvn.w	sl, r3
 8011cea:	f04f 0900 	mov.w	r9, #0
 8011cee:	4639      	mov	r1, r7
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f000 fb5d 	bl	80123b0 <_Bfree>
 8011cf6:	2e00      	cmp	r6, #0
 8011cf8:	f43f aeb7 	beq.w	8011a6a <_dtoa_r+0x67a>
 8011cfc:	f1b9 0f00 	cmp.w	r9, #0
 8011d00:	d005      	beq.n	8011d0e <_dtoa_r+0x91e>
 8011d02:	45b1      	cmp	r9, r6
 8011d04:	d003      	beq.n	8011d0e <_dtoa_r+0x91e>
 8011d06:	4649      	mov	r1, r9
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f000 fb51 	bl	80123b0 <_Bfree>
 8011d0e:	4631      	mov	r1, r6
 8011d10:	4620      	mov	r0, r4
 8011d12:	f000 fb4d 	bl	80123b0 <_Bfree>
 8011d16:	e6a8      	b.n	8011a6a <_dtoa_r+0x67a>
 8011d18:	2700      	movs	r7, #0
 8011d1a:	463e      	mov	r6, r7
 8011d1c:	e7e1      	b.n	8011ce2 <_dtoa_r+0x8f2>
 8011d1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011d22:	463e      	mov	r6, r7
 8011d24:	e5a9      	b.n	801187a <_dtoa_r+0x48a>
 8011d26:	bf00      	nop
 8011d28:	40240000 	.word	0x40240000
 8011d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	f000 80fa 	beq.w	8011f2c <_dtoa_r+0xb3c>
 8011d38:	2d00      	cmp	r5, #0
 8011d3a:	dd05      	ble.n	8011d48 <_dtoa_r+0x958>
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	462a      	mov	r2, r5
 8011d40:	4620      	mov	r0, r4
 8011d42:	f000 fcc3 	bl	80126cc <__lshift>
 8011d46:	4606      	mov	r6, r0
 8011d48:	9b07      	ldr	r3, [sp, #28]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d04c      	beq.n	8011de8 <_dtoa_r+0x9f8>
 8011d4e:	6871      	ldr	r1, [r6, #4]
 8011d50:	4620      	mov	r0, r4
 8011d52:	f000 faf9 	bl	8012348 <_Balloc>
 8011d56:	6932      	ldr	r2, [r6, #16]
 8011d58:	3202      	adds	r2, #2
 8011d5a:	4605      	mov	r5, r0
 8011d5c:	0092      	lsls	r2, r2, #2
 8011d5e:	f106 010c 	add.w	r1, r6, #12
 8011d62:	300c      	adds	r0, #12
 8011d64:	f7fe fc44 	bl	80105f0 <memcpy>
 8011d68:	2201      	movs	r2, #1
 8011d6a:	4629      	mov	r1, r5
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f000 fcad 	bl	80126cc <__lshift>
 8011d72:	9b00      	ldr	r3, [sp, #0]
 8011d74:	f8cd b014 	str.w	fp, [sp, #20]
 8011d78:	f003 0301 	and.w	r3, r3, #1
 8011d7c:	46b1      	mov	r9, r6
 8011d7e:	9307      	str	r3, [sp, #28]
 8011d80:	4606      	mov	r6, r0
 8011d82:	4639      	mov	r1, r7
 8011d84:	9804      	ldr	r0, [sp, #16]
 8011d86:	f7ff faa5 	bl	80112d4 <quorem>
 8011d8a:	4649      	mov	r1, r9
 8011d8c:	4605      	mov	r5, r0
 8011d8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011d92:	9804      	ldr	r0, [sp, #16]
 8011d94:	f000 fcee 	bl	8012774 <__mcmp>
 8011d98:	4632      	mov	r2, r6
 8011d9a:	9000      	str	r0, [sp, #0]
 8011d9c:	4639      	mov	r1, r7
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 fd02 	bl	80127a8 <__mdiff>
 8011da4:	68c3      	ldr	r3, [r0, #12]
 8011da6:	4602      	mov	r2, r0
 8011da8:	bb03      	cbnz	r3, 8011dec <_dtoa_r+0x9fc>
 8011daa:	4601      	mov	r1, r0
 8011dac:	9008      	str	r0, [sp, #32]
 8011dae:	9804      	ldr	r0, [sp, #16]
 8011db0:	f000 fce0 	bl	8012774 <__mcmp>
 8011db4:	9a08      	ldr	r2, [sp, #32]
 8011db6:	4603      	mov	r3, r0
 8011db8:	4611      	mov	r1, r2
 8011dba:	4620      	mov	r0, r4
 8011dbc:	9308      	str	r3, [sp, #32]
 8011dbe:	f000 faf7 	bl	80123b0 <_Bfree>
 8011dc2:	9b08      	ldr	r3, [sp, #32]
 8011dc4:	b9a3      	cbnz	r3, 8011df0 <_dtoa_r+0xa00>
 8011dc6:	9a06      	ldr	r2, [sp, #24]
 8011dc8:	b992      	cbnz	r2, 8011df0 <_dtoa_r+0xa00>
 8011dca:	9a07      	ldr	r2, [sp, #28]
 8011dcc:	b982      	cbnz	r2, 8011df0 <_dtoa_r+0xa00>
 8011dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011dd2:	d029      	beq.n	8011e28 <_dtoa_r+0xa38>
 8011dd4:	9b00      	ldr	r3, [sp, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	dd01      	ble.n	8011dde <_dtoa_r+0x9ee>
 8011dda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011dde:	9b05      	ldr	r3, [sp, #20]
 8011de0:	1c5d      	adds	r5, r3, #1
 8011de2:	f883 8000 	strb.w	r8, [r3]
 8011de6:	e782      	b.n	8011cee <_dtoa_r+0x8fe>
 8011de8:	4630      	mov	r0, r6
 8011dea:	e7c2      	b.n	8011d72 <_dtoa_r+0x982>
 8011dec:	2301      	movs	r3, #1
 8011dee:	e7e3      	b.n	8011db8 <_dtoa_r+0x9c8>
 8011df0:	9a00      	ldr	r2, [sp, #0]
 8011df2:	2a00      	cmp	r2, #0
 8011df4:	db04      	blt.n	8011e00 <_dtoa_r+0xa10>
 8011df6:	d125      	bne.n	8011e44 <_dtoa_r+0xa54>
 8011df8:	9a06      	ldr	r2, [sp, #24]
 8011dfa:	bb1a      	cbnz	r2, 8011e44 <_dtoa_r+0xa54>
 8011dfc:	9a07      	ldr	r2, [sp, #28]
 8011dfe:	bb0a      	cbnz	r2, 8011e44 <_dtoa_r+0xa54>
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	ddec      	ble.n	8011dde <_dtoa_r+0x9ee>
 8011e04:	2201      	movs	r2, #1
 8011e06:	9904      	ldr	r1, [sp, #16]
 8011e08:	4620      	mov	r0, r4
 8011e0a:	f000 fc5f 	bl	80126cc <__lshift>
 8011e0e:	4639      	mov	r1, r7
 8011e10:	9004      	str	r0, [sp, #16]
 8011e12:	f000 fcaf 	bl	8012774 <__mcmp>
 8011e16:	2800      	cmp	r0, #0
 8011e18:	dc03      	bgt.n	8011e22 <_dtoa_r+0xa32>
 8011e1a:	d1e0      	bne.n	8011dde <_dtoa_r+0x9ee>
 8011e1c:	f018 0f01 	tst.w	r8, #1
 8011e20:	d0dd      	beq.n	8011dde <_dtoa_r+0x9ee>
 8011e22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011e26:	d1d8      	bne.n	8011dda <_dtoa_r+0x9ea>
 8011e28:	9b05      	ldr	r3, [sp, #20]
 8011e2a:	9a05      	ldr	r2, [sp, #20]
 8011e2c:	1c5d      	adds	r5, r3, #1
 8011e2e:	2339      	movs	r3, #57	; 0x39
 8011e30:	7013      	strb	r3, [r2, #0]
 8011e32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011e36:	2b39      	cmp	r3, #57	; 0x39
 8011e38:	f105 32ff 	add.w	r2, r5, #4294967295
 8011e3c:	d04f      	beq.n	8011ede <_dtoa_r+0xaee>
 8011e3e:	3301      	adds	r3, #1
 8011e40:	7013      	strb	r3, [r2, #0]
 8011e42:	e754      	b.n	8011cee <_dtoa_r+0x8fe>
 8011e44:	9a05      	ldr	r2, [sp, #20]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f102 0501 	add.w	r5, r2, #1
 8011e4c:	dd06      	ble.n	8011e5c <_dtoa_r+0xa6c>
 8011e4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011e52:	d0e9      	beq.n	8011e28 <_dtoa_r+0xa38>
 8011e54:	f108 0801 	add.w	r8, r8, #1
 8011e58:	9b05      	ldr	r3, [sp, #20]
 8011e5a:	e7c2      	b.n	8011de2 <_dtoa_r+0x9f2>
 8011e5c:	9a02      	ldr	r2, [sp, #8]
 8011e5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011e62:	eba5 030b 	sub.w	r3, r5, fp
 8011e66:	4293      	cmp	r3, r2
 8011e68:	d021      	beq.n	8011eae <_dtoa_r+0xabe>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	220a      	movs	r2, #10
 8011e6e:	9904      	ldr	r1, [sp, #16]
 8011e70:	4620      	mov	r0, r4
 8011e72:	f000 fab4 	bl	80123de <__multadd>
 8011e76:	45b1      	cmp	r9, r6
 8011e78:	9004      	str	r0, [sp, #16]
 8011e7a:	f04f 0300 	mov.w	r3, #0
 8011e7e:	f04f 020a 	mov.w	r2, #10
 8011e82:	4649      	mov	r1, r9
 8011e84:	4620      	mov	r0, r4
 8011e86:	d105      	bne.n	8011e94 <_dtoa_r+0xaa4>
 8011e88:	f000 faa9 	bl	80123de <__multadd>
 8011e8c:	4681      	mov	r9, r0
 8011e8e:	4606      	mov	r6, r0
 8011e90:	9505      	str	r5, [sp, #20]
 8011e92:	e776      	b.n	8011d82 <_dtoa_r+0x992>
 8011e94:	f000 faa3 	bl	80123de <__multadd>
 8011e98:	4631      	mov	r1, r6
 8011e9a:	4681      	mov	r9, r0
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	220a      	movs	r2, #10
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f000 fa9c 	bl	80123de <__multadd>
 8011ea6:	4606      	mov	r6, r0
 8011ea8:	e7f2      	b.n	8011e90 <_dtoa_r+0xaa0>
 8011eaa:	f04f 0900 	mov.w	r9, #0
 8011eae:	2201      	movs	r2, #1
 8011eb0:	9904      	ldr	r1, [sp, #16]
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	f000 fc0a 	bl	80126cc <__lshift>
 8011eb8:	4639      	mov	r1, r7
 8011eba:	9004      	str	r0, [sp, #16]
 8011ebc:	f000 fc5a 	bl	8012774 <__mcmp>
 8011ec0:	2800      	cmp	r0, #0
 8011ec2:	dcb6      	bgt.n	8011e32 <_dtoa_r+0xa42>
 8011ec4:	d102      	bne.n	8011ecc <_dtoa_r+0xadc>
 8011ec6:	f018 0f01 	tst.w	r8, #1
 8011eca:	d1b2      	bne.n	8011e32 <_dtoa_r+0xa42>
 8011ecc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011ed0:	2b30      	cmp	r3, #48	; 0x30
 8011ed2:	f105 32ff 	add.w	r2, r5, #4294967295
 8011ed6:	f47f af0a 	bne.w	8011cee <_dtoa_r+0x8fe>
 8011eda:	4615      	mov	r5, r2
 8011edc:	e7f6      	b.n	8011ecc <_dtoa_r+0xadc>
 8011ede:	4593      	cmp	fp, r2
 8011ee0:	d105      	bne.n	8011eee <_dtoa_r+0xafe>
 8011ee2:	2331      	movs	r3, #49	; 0x31
 8011ee4:	f10a 0a01 	add.w	sl, sl, #1
 8011ee8:	f88b 3000 	strb.w	r3, [fp]
 8011eec:	e6ff      	b.n	8011cee <_dtoa_r+0x8fe>
 8011eee:	4615      	mov	r5, r2
 8011ef0:	e79f      	b.n	8011e32 <_dtoa_r+0xa42>
 8011ef2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011f58 <_dtoa_r+0xb68>
 8011ef6:	e007      	b.n	8011f08 <_dtoa_r+0xb18>
 8011ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011efa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011f5c <_dtoa_r+0xb6c>
 8011efe:	b11b      	cbz	r3, 8011f08 <_dtoa_r+0xb18>
 8011f00:	f10b 0308 	add.w	r3, fp, #8
 8011f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f06:	6013      	str	r3, [r2, #0]
 8011f08:	4658      	mov	r0, fp
 8011f0a:	b017      	add	sp, #92	; 0x5c
 8011f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f10:	9b06      	ldr	r3, [sp, #24]
 8011f12:	2b01      	cmp	r3, #1
 8011f14:	f77f ae35 	ble.w	8011b82 <_dtoa_r+0x792>
 8011f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011f1a:	9307      	str	r3, [sp, #28]
 8011f1c:	e649      	b.n	8011bb2 <_dtoa_r+0x7c2>
 8011f1e:	9b02      	ldr	r3, [sp, #8]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	dc03      	bgt.n	8011f2c <_dtoa_r+0xb3c>
 8011f24:	9b06      	ldr	r3, [sp, #24]
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	f73f aecc 	bgt.w	8011cc4 <_dtoa_r+0x8d4>
 8011f2c:	465d      	mov	r5, fp
 8011f2e:	4639      	mov	r1, r7
 8011f30:	9804      	ldr	r0, [sp, #16]
 8011f32:	f7ff f9cf 	bl	80112d4 <quorem>
 8011f36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011f3a:	f805 8b01 	strb.w	r8, [r5], #1
 8011f3e:	9a02      	ldr	r2, [sp, #8]
 8011f40:	eba5 030b 	sub.w	r3, r5, fp
 8011f44:	429a      	cmp	r2, r3
 8011f46:	ddb0      	ble.n	8011eaa <_dtoa_r+0xaba>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	220a      	movs	r2, #10
 8011f4c:	9904      	ldr	r1, [sp, #16]
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 fa45 	bl	80123de <__multadd>
 8011f54:	9004      	str	r0, [sp, #16]
 8011f56:	e7ea      	b.n	8011f2e <_dtoa_r+0xb3e>
 8011f58:	08014688 	.word	0x08014688
 8011f5c:	080146ac 	.word	0x080146ac

08011f60 <__sflush_r>:
 8011f60:	898a      	ldrh	r2, [r1, #12]
 8011f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f66:	4605      	mov	r5, r0
 8011f68:	0710      	lsls	r0, r2, #28
 8011f6a:	460c      	mov	r4, r1
 8011f6c:	d458      	bmi.n	8012020 <__sflush_r+0xc0>
 8011f6e:	684b      	ldr	r3, [r1, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	dc05      	bgt.n	8011f80 <__sflush_r+0x20>
 8011f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	dc02      	bgt.n	8011f80 <__sflush_r+0x20>
 8011f7a:	2000      	movs	r0, #0
 8011f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011f82:	2e00      	cmp	r6, #0
 8011f84:	d0f9      	beq.n	8011f7a <__sflush_r+0x1a>
 8011f86:	2300      	movs	r3, #0
 8011f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011f8c:	682f      	ldr	r7, [r5, #0]
 8011f8e:	6a21      	ldr	r1, [r4, #32]
 8011f90:	602b      	str	r3, [r5, #0]
 8011f92:	d032      	beq.n	8011ffa <__sflush_r+0x9a>
 8011f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011f96:	89a3      	ldrh	r3, [r4, #12]
 8011f98:	075a      	lsls	r2, r3, #29
 8011f9a:	d505      	bpl.n	8011fa8 <__sflush_r+0x48>
 8011f9c:	6863      	ldr	r3, [r4, #4]
 8011f9e:	1ac0      	subs	r0, r0, r3
 8011fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011fa2:	b10b      	cbz	r3, 8011fa8 <__sflush_r+0x48>
 8011fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011fa6:	1ac0      	subs	r0, r0, r3
 8011fa8:	2300      	movs	r3, #0
 8011faa:	4602      	mov	r2, r0
 8011fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011fae:	6a21      	ldr	r1, [r4, #32]
 8011fb0:	4628      	mov	r0, r5
 8011fb2:	47b0      	blx	r6
 8011fb4:	1c43      	adds	r3, r0, #1
 8011fb6:	89a3      	ldrh	r3, [r4, #12]
 8011fb8:	d106      	bne.n	8011fc8 <__sflush_r+0x68>
 8011fba:	6829      	ldr	r1, [r5, #0]
 8011fbc:	291d      	cmp	r1, #29
 8011fbe:	d848      	bhi.n	8012052 <__sflush_r+0xf2>
 8011fc0:	4a29      	ldr	r2, [pc, #164]	; (8012068 <__sflush_r+0x108>)
 8011fc2:	40ca      	lsrs	r2, r1
 8011fc4:	07d6      	lsls	r6, r2, #31
 8011fc6:	d544      	bpl.n	8012052 <__sflush_r+0xf2>
 8011fc8:	2200      	movs	r2, #0
 8011fca:	6062      	str	r2, [r4, #4]
 8011fcc:	04d9      	lsls	r1, r3, #19
 8011fce:	6922      	ldr	r2, [r4, #16]
 8011fd0:	6022      	str	r2, [r4, #0]
 8011fd2:	d504      	bpl.n	8011fde <__sflush_r+0x7e>
 8011fd4:	1c42      	adds	r2, r0, #1
 8011fd6:	d101      	bne.n	8011fdc <__sflush_r+0x7c>
 8011fd8:	682b      	ldr	r3, [r5, #0]
 8011fda:	b903      	cbnz	r3, 8011fde <__sflush_r+0x7e>
 8011fdc:	6560      	str	r0, [r4, #84]	; 0x54
 8011fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011fe0:	602f      	str	r7, [r5, #0]
 8011fe2:	2900      	cmp	r1, #0
 8011fe4:	d0c9      	beq.n	8011f7a <__sflush_r+0x1a>
 8011fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011fea:	4299      	cmp	r1, r3
 8011fec:	d002      	beq.n	8011ff4 <__sflush_r+0x94>
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f000 fc94 	bl	801291c <_free_r>
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	6360      	str	r0, [r4, #52]	; 0x34
 8011ff8:	e7c0      	b.n	8011f7c <__sflush_r+0x1c>
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	4628      	mov	r0, r5
 8011ffe:	47b0      	blx	r6
 8012000:	1c41      	adds	r1, r0, #1
 8012002:	d1c8      	bne.n	8011f96 <__sflush_r+0x36>
 8012004:	682b      	ldr	r3, [r5, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d0c5      	beq.n	8011f96 <__sflush_r+0x36>
 801200a:	2b1d      	cmp	r3, #29
 801200c:	d001      	beq.n	8012012 <__sflush_r+0xb2>
 801200e:	2b16      	cmp	r3, #22
 8012010:	d101      	bne.n	8012016 <__sflush_r+0xb6>
 8012012:	602f      	str	r7, [r5, #0]
 8012014:	e7b1      	b.n	8011f7a <__sflush_r+0x1a>
 8012016:	89a3      	ldrh	r3, [r4, #12]
 8012018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801201c:	81a3      	strh	r3, [r4, #12]
 801201e:	e7ad      	b.n	8011f7c <__sflush_r+0x1c>
 8012020:	690f      	ldr	r7, [r1, #16]
 8012022:	2f00      	cmp	r7, #0
 8012024:	d0a9      	beq.n	8011f7a <__sflush_r+0x1a>
 8012026:	0793      	lsls	r3, r2, #30
 8012028:	680e      	ldr	r6, [r1, #0]
 801202a:	bf08      	it	eq
 801202c:	694b      	ldreq	r3, [r1, #20]
 801202e:	600f      	str	r7, [r1, #0]
 8012030:	bf18      	it	ne
 8012032:	2300      	movne	r3, #0
 8012034:	eba6 0807 	sub.w	r8, r6, r7
 8012038:	608b      	str	r3, [r1, #8]
 801203a:	f1b8 0f00 	cmp.w	r8, #0
 801203e:	dd9c      	ble.n	8011f7a <__sflush_r+0x1a>
 8012040:	4643      	mov	r3, r8
 8012042:	463a      	mov	r2, r7
 8012044:	6a21      	ldr	r1, [r4, #32]
 8012046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012048:	4628      	mov	r0, r5
 801204a:	47b0      	blx	r6
 801204c:	2800      	cmp	r0, #0
 801204e:	dc06      	bgt.n	801205e <__sflush_r+0xfe>
 8012050:	89a3      	ldrh	r3, [r4, #12]
 8012052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012056:	81a3      	strh	r3, [r4, #12]
 8012058:	f04f 30ff 	mov.w	r0, #4294967295
 801205c:	e78e      	b.n	8011f7c <__sflush_r+0x1c>
 801205e:	4407      	add	r7, r0
 8012060:	eba8 0800 	sub.w	r8, r8, r0
 8012064:	e7e9      	b.n	801203a <__sflush_r+0xda>
 8012066:	bf00      	nop
 8012068:	20400001 	.word	0x20400001

0801206c <_fflush_r>:
 801206c:	b538      	push	{r3, r4, r5, lr}
 801206e:	690b      	ldr	r3, [r1, #16]
 8012070:	4605      	mov	r5, r0
 8012072:	460c      	mov	r4, r1
 8012074:	b1db      	cbz	r3, 80120ae <_fflush_r+0x42>
 8012076:	b118      	cbz	r0, 8012080 <_fflush_r+0x14>
 8012078:	6983      	ldr	r3, [r0, #24]
 801207a:	b90b      	cbnz	r3, 8012080 <_fflush_r+0x14>
 801207c:	f000 f860 	bl	8012140 <__sinit>
 8012080:	4b0c      	ldr	r3, [pc, #48]	; (80120b4 <_fflush_r+0x48>)
 8012082:	429c      	cmp	r4, r3
 8012084:	d109      	bne.n	801209a <_fflush_r+0x2e>
 8012086:	686c      	ldr	r4, [r5, #4]
 8012088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801208c:	b17b      	cbz	r3, 80120ae <_fflush_r+0x42>
 801208e:	4621      	mov	r1, r4
 8012090:	4628      	mov	r0, r5
 8012092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012096:	f7ff bf63 	b.w	8011f60 <__sflush_r>
 801209a:	4b07      	ldr	r3, [pc, #28]	; (80120b8 <_fflush_r+0x4c>)
 801209c:	429c      	cmp	r4, r3
 801209e:	d101      	bne.n	80120a4 <_fflush_r+0x38>
 80120a0:	68ac      	ldr	r4, [r5, #8]
 80120a2:	e7f1      	b.n	8012088 <_fflush_r+0x1c>
 80120a4:	4b05      	ldr	r3, [pc, #20]	; (80120bc <_fflush_r+0x50>)
 80120a6:	429c      	cmp	r4, r3
 80120a8:	bf08      	it	eq
 80120aa:	68ec      	ldreq	r4, [r5, #12]
 80120ac:	e7ec      	b.n	8012088 <_fflush_r+0x1c>
 80120ae:	2000      	movs	r0, #0
 80120b0:	bd38      	pop	{r3, r4, r5, pc}
 80120b2:	bf00      	nop
 80120b4:	080146dc 	.word	0x080146dc
 80120b8:	080146fc 	.word	0x080146fc
 80120bc:	080146bc 	.word	0x080146bc

080120c0 <std>:
 80120c0:	2300      	movs	r3, #0
 80120c2:	b510      	push	{r4, lr}
 80120c4:	4604      	mov	r4, r0
 80120c6:	e9c0 3300 	strd	r3, r3, [r0]
 80120ca:	6083      	str	r3, [r0, #8]
 80120cc:	8181      	strh	r1, [r0, #12]
 80120ce:	6643      	str	r3, [r0, #100]	; 0x64
 80120d0:	81c2      	strh	r2, [r0, #14]
 80120d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80120d6:	6183      	str	r3, [r0, #24]
 80120d8:	4619      	mov	r1, r3
 80120da:	2208      	movs	r2, #8
 80120dc:	305c      	adds	r0, #92	; 0x5c
 80120de:	f7fe faab 	bl	8010638 <memset>
 80120e2:	4b05      	ldr	r3, [pc, #20]	; (80120f8 <std+0x38>)
 80120e4:	6263      	str	r3, [r4, #36]	; 0x24
 80120e6:	4b05      	ldr	r3, [pc, #20]	; (80120fc <std+0x3c>)
 80120e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80120ea:	4b05      	ldr	r3, [pc, #20]	; (8012100 <std+0x40>)
 80120ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120ee:	4b05      	ldr	r3, [pc, #20]	; (8012104 <std+0x44>)
 80120f0:	6224      	str	r4, [r4, #32]
 80120f2:	6323      	str	r3, [r4, #48]	; 0x30
 80120f4:	bd10      	pop	{r4, pc}
 80120f6:	bf00      	nop
 80120f8:	08012d0d 	.word	0x08012d0d
 80120fc:	08012d2f 	.word	0x08012d2f
 8012100:	08012d67 	.word	0x08012d67
 8012104:	08012d8b 	.word	0x08012d8b

08012108 <_cleanup_r>:
 8012108:	4901      	ldr	r1, [pc, #4]	; (8012110 <_cleanup_r+0x8>)
 801210a:	f000 b885 	b.w	8012218 <_fwalk_reent>
 801210e:	bf00      	nop
 8012110:	0801206d 	.word	0x0801206d

08012114 <__sfmoreglue>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	1e4a      	subs	r2, r1, #1
 8012118:	2568      	movs	r5, #104	; 0x68
 801211a:	4355      	muls	r5, r2
 801211c:	460e      	mov	r6, r1
 801211e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012122:	f000 fc49 	bl	80129b8 <_malloc_r>
 8012126:	4604      	mov	r4, r0
 8012128:	b140      	cbz	r0, 801213c <__sfmoreglue+0x28>
 801212a:	2100      	movs	r1, #0
 801212c:	e9c0 1600 	strd	r1, r6, [r0]
 8012130:	300c      	adds	r0, #12
 8012132:	60a0      	str	r0, [r4, #8]
 8012134:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012138:	f7fe fa7e 	bl	8010638 <memset>
 801213c:	4620      	mov	r0, r4
 801213e:	bd70      	pop	{r4, r5, r6, pc}

08012140 <__sinit>:
 8012140:	6983      	ldr	r3, [r0, #24]
 8012142:	b510      	push	{r4, lr}
 8012144:	4604      	mov	r4, r0
 8012146:	bb33      	cbnz	r3, 8012196 <__sinit+0x56>
 8012148:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801214c:	6503      	str	r3, [r0, #80]	; 0x50
 801214e:	4b12      	ldr	r3, [pc, #72]	; (8012198 <__sinit+0x58>)
 8012150:	4a12      	ldr	r2, [pc, #72]	; (801219c <__sinit+0x5c>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	6282      	str	r2, [r0, #40]	; 0x28
 8012156:	4298      	cmp	r0, r3
 8012158:	bf04      	itt	eq
 801215a:	2301      	moveq	r3, #1
 801215c:	6183      	streq	r3, [r0, #24]
 801215e:	f000 f81f 	bl	80121a0 <__sfp>
 8012162:	6060      	str	r0, [r4, #4]
 8012164:	4620      	mov	r0, r4
 8012166:	f000 f81b 	bl	80121a0 <__sfp>
 801216a:	60a0      	str	r0, [r4, #8]
 801216c:	4620      	mov	r0, r4
 801216e:	f000 f817 	bl	80121a0 <__sfp>
 8012172:	2200      	movs	r2, #0
 8012174:	60e0      	str	r0, [r4, #12]
 8012176:	2104      	movs	r1, #4
 8012178:	6860      	ldr	r0, [r4, #4]
 801217a:	f7ff ffa1 	bl	80120c0 <std>
 801217e:	2201      	movs	r2, #1
 8012180:	2109      	movs	r1, #9
 8012182:	68a0      	ldr	r0, [r4, #8]
 8012184:	f7ff ff9c 	bl	80120c0 <std>
 8012188:	2202      	movs	r2, #2
 801218a:	2112      	movs	r1, #18
 801218c:	68e0      	ldr	r0, [r4, #12]
 801218e:	f7ff ff97 	bl	80120c0 <std>
 8012192:	2301      	movs	r3, #1
 8012194:	61a3      	str	r3, [r4, #24]
 8012196:	bd10      	pop	{r4, pc}
 8012198:	08014678 	.word	0x08014678
 801219c:	08012109 	.word	0x08012109

080121a0 <__sfp>:
 80121a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121a2:	4b1b      	ldr	r3, [pc, #108]	; (8012210 <__sfp+0x70>)
 80121a4:	681e      	ldr	r6, [r3, #0]
 80121a6:	69b3      	ldr	r3, [r6, #24]
 80121a8:	4607      	mov	r7, r0
 80121aa:	b913      	cbnz	r3, 80121b2 <__sfp+0x12>
 80121ac:	4630      	mov	r0, r6
 80121ae:	f7ff ffc7 	bl	8012140 <__sinit>
 80121b2:	3648      	adds	r6, #72	; 0x48
 80121b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80121b8:	3b01      	subs	r3, #1
 80121ba:	d503      	bpl.n	80121c4 <__sfp+0x24>
 80121bc:	6833      	ldr	r3, [r6, #0]
 80121be:	b133      	cbz	r3, 80121ce <__sfp+0x2e>
 80121c0:	6836      	ldr	r6, [r6, #0]
 80121c2:	e7f7      	b.n	80121b4 <__sfp+0x14>
 80121c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80121c8:	b16d      	cbz	r5, 80121e6 <__sfp+0x46>
 80121ca:	3468      	adds	r4, #104	; 0x68
 80121cc:	e7f4      	b.n	80121b8 <__sfp+0x18>
 80121ce:	2104      	movs	r1, #4
 80121d0:	4638      	mov	r0, r7
 80121d2:	f7ff ff9f 	bl	8012114 <__sfmoreglue>
 80121d6:	6030      	str	r0, [r6, #0]
 80121d8:	2800      	cmp	r0, #0
 80121da:	d1f1      	bne.n	80121c0 <__sfp+0x20>
 80121dc:	230c      	movs	r3, #12
 80121de:	603b      	str	r3, [r7, #0]
 80121e0:	4604      	mov	r4, r0
 80121e2:	4620      	mov	r0, r4
 80121e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e6:	4b0b      	ldr	r3, [pc, #44]	; (8012214 <__sfp+0x74>)
 80121e8:	6665      	str	r5, [r4, #100]	; 0x64
 80121ea:	e9c4 5500 	strd	r5, r5, [r4]
 80121ee:	60a5      	str	r5, [r4, #8]
 80121f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80121f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80121f8:	2208      	movs	r2, #8
 80121fa:	4629      	mov	r1, r5
 80121fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012200:	f7fe fa1a 	bl	8010638 <memset>
 8012204:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012208:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801220c:	e7e9      	b.n	80121e2 <__sfp+0x42>
 801220e:	bf00      	nop
 8012210:	08014678 	.word	0x08014678
 8012214:	ffff0001 	.word	0xffff0001

08012218 <_fwalk_reent>:
 8012218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801221c:	4680      	mov	r8, r0
 801221e:	4689      	mov	r9, r1
 8012220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012224:	2600      	movs	r6, #0
 8012226:	b914      	cbnz	r4, 801222e <_fwalk_reent+0x16>
 8012228:	4630      	mov	r0, r6
 801222a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801222e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012232:	3f01      	subs	r7, #1
 8012234:	d501      	bpl.n	801223a <_fwalk_reent+0x22>
 8012236:	6824      	ldr	r4, [r4, #0]
 8012238:	e7f5      	b.n	8012226 <_fwalk_reent+0xe>
 801223a:	89ab      	ldrh	r3, [r5, #12]
 801223c:	2b01      	cmp	r3, #1
 801223e:	d907      	bls.n	8012250 <_fwalk_reent+0x38>
 8012240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012244:	3301      	adds	r3, #1
 8012246:	d003      	beq.n	8012250 <_fwalk_reent+0x38>
 8012248:	4629      	mov	r1, r5
 801224a:	4640      	mov	r0, r8
 801224c:	47c8      	blx	r9
 801224e:	4306      	orrs	r6, r0
 8012250:	3568      	adds	r5, #104	; 0x68
 8012252:	e7ee      	b.n	8012232 <_fwalk_reent+0x1a>

08012254 <_localeconv_r>:
 8012254:	4b04      	ldr	r3, [pc, #16]	; (8012268 <_localeconv_r+0x14>)
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	6a18      	ldr	r0, [r3, #32]
 801225a:	4b04      	ldr	r3, [pc, #16]	; (801226c <_localeconv_r+0x18>)
 801225c:	2800      	cmp	r0, #0
 801225e:	bf08      	it	eq
 8012260:	4618      	moveq	r0, r3
 8012262:	30f0      	adds	r0, #240	; 0xf0
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	20001cb4 	.word	0x20001cb4
 801226c:	20001d18 	.word	0x20001d18

08012270 <__swhatbuf_r>:
 8012270:	b570      	push	{r4, r5, r6, lr}
 8012272:	460e      	mov	r6, r1
 8012274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012278:	2900      	cmp	r1, #0
 801227a:	b096      	sub	sp, #88	; 0x58
 801227c:	4614      	mov	r4, r2
 801227e:	461d      	mov	r5, r3
 8012280:	da07      	bge.n	8012292 <__swhatbuf_r+0x22>
 8012282:	2300      	movs	r3, #0
 8012284:	602b      	str	r3, [r5, #0]
 8012286:	89b3      	ldrh	r3, [r6, #12]
 8012288:	061a      	lsls	r2, r3, #24
 801228a:	d410      	bmi.n	80122ae <__swhatbuf_r+0x3e>
 801228c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012290:	e00e      	b.n	80122b0 <__swhatbuf_r+0x40>
 8012292:	466a      	mov	r2, sp
 8012294:	f000 fda0 	bl	8012dd8 <_fstat_r>
 8012298:	2800      	cmp	r0, #0
 801229a:	dbf2      	blt.n	8012282 <__swhatbuf_r+0x12>
 801229c:	9a01      	ldr	r2, [sp, #4]
 801229e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80122a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80122a6:	425a      	negs	r2, r3
 80122a8:	415a      	adcs	r2, r3
 80122aa:	602a      	str	r2, [r5, #0]
 80122ac:	e7ee      	b.n	801228c <__swhatbuf_r+0x1c>
 80122ae:	2340      	movs	r3, #64	; 0x40
 80122b0:	2000      	movs	r0, #0
 80122b2:	6023      	str	r3, [r4, #0]
 80122b4:	b016      	add	sp, #88	; 0x58
 80122b6:	bd70      	pop	{r4, r5, r6, pc}

080122b8 <__smakebuf_r>:
 80122b8:	898b      	ldrh	r3, [r1, #12]
 80122ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122bc:	079d      	lsls	r5, r3, #30
 80122be:	4606      	mov	r6, r0
 80122c0:	460c      	mov	r4, r1
 80122c2:	d507      	bpl.n	80122d4 <__smakebuf_r+0x1c>
 80122c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80122c8:	6023      	str	r3, [r4, #0]
 80122ca:	6123      	str	r3, [r4, #16]
 80122cc:	2301      	movs	r3, #1
 80122ce:	6163      	str	r3, [r4, #20]
 80122d0:	b002      	add	sp, #8
 80122d2:	bd70      	pop	{r4, r5, r6, pc}
 80122d4:	ab01      	add	r3, sp, #4
 80122d6:	466a      	mov	r2, sp
 80122d8:	f7ff ffca 	bl	8012270 <__swhatbuf_r>
 80122dc:	9900      	ldr	r1, [sp, #0]
 80122de:	4605      	mov	r5, r0
 80122e0:	4630      	mov	r0, r6
 80122e2:	f000 fb69 	bl	80129b8 <_malloc_r>
 80122e6:	b948      	cbnz	r0, 80122fc <__smakebuf_r+0x44>
 80122e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ec:	059a      	lsls	r2, r3, #22
 80122ee:	d4ef      	bmi.n	80122d0 <__smakebuf_r+0x18>
 80122f0:	f023 0303 	bic.w	r3, r3, #3
 80122f4:	f043 0302 	orr.w	r3, r3, #2
 80122f8:	81a3      	strh	r3, [r4, #12]
 80122fa:	e7e3      	b.n	80122c4 <__smakebuf_r+0xc>
 80122fc:	4b0d      	ldr	r3, [pc, #52]	; (8012334 <__smakebuf_r+0x7c>)
 80122fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8012300:	89a3      	ldrh	r3, [r4, #12]
 8012302:	6020      	str	r0, [r4, #0]
 8012304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012308:	81a3      	strh	r3, [r4, #12]
 801230a:	9b00      	ldr	r3, [sp, #0]
 801230c:	6163      	str	r3, [r4, #20]
 801230e:	9b01      	ldr	r3, [sp, #4]
 8012310:	6120      	str	r0, [r4, #16]
 8012312:	b15b      	cbz	r3, 801232c <__smakebuf_r+0x74>
 8012314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012318:	4630      	mov	r0, r6
 801231a:	f000 fd6f 	bl	8012dfc <_isatty_r>
 801231e:	b128      	cbz	r0, 801232c <__smakebuf_r+0x74>
 8012320:	89a3      	ldrh	r3, [r4, #12]
 8012322:	f023 0303 	bic.w	r3, r3, #3
 8012326:	f043 0301 	orr.w	r3, r3, #1
 801232a:	81a3      	strh	r3, [r4, #12]
 801232c:	89a3      	ldrh	r3, [r4, #12]
 801232e:	431d      	orrs	r5, r3
 8012330:	81a5      	strh	r5, [r4, #12]
 8012332:	e7cd      	b.n	80122d0 <__smakebuf_r+0x18>
 8012334:	08012109 	.word	0x08012109

08012338 <malloc>:
 8012338:	4b02      	ldr	r3, [pc, #8]	; (8012344 <malloc+0xc>)
 801233a:	4601      	mov	r1, r0
 801233c:	6818      	ldr	r0, [r3, #0]
 801233e:	f000 bb3b 	b.w	80129b8 <_malloc_r>
 8012342:	bf00      	nop
 8012344:	20001cb4 	.word	0x20001cb4

08012348 <_Balloc>:
 8012348:	b570      	push	{r4, r5, r6, lr}
 801234a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801234c:	4604      	mov	r4, r0
 801234e:	460e      	mov	r6, r1
 8012350:	b93d      	cbnz	r5, 8012362 <_Balloc+0x1a>
 8012352:	2010      	movs	r0, #16
 8012354:	f7ff fff0 	bl	8012338 <malloc>
 8012358:	6260      	str	r0, [r4, #36]	; 0x24
 801235a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801235e:	6005      	str	r5, [r0, #0]
 8012360:	60c5      	str	r5, [r0, #12]
 8012362:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012364:	68eb      	ldr	r3, [r5, #12]
 8012366:	b183      	cbz	r3, 801238a <_Balloc+0x42>
 8012368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012370:	b9b8      	cbnz	r0, 80123a2 <_Balloc+0x5a>
 8012372:	2101      	movs	r1, #1
 8012374:	fa01 f506 	lsl.w	r5, r1, r6
 8012378:	1d6a      	adds	r2, r5, #5
 801237a:	0092      	lsls	r2, r2, #2
 801237c:	4620      	mov	r0, r4
 801237e:	f000 fabf 	bl	8012900 <_calloc_r>
 8012382:	b160      	cbz	r0, 801239e <_Balloc+0x56>
 8012384:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012388:	e00e      	b.n	80123a8 <_Balloc+0x60>
 801238a:	2221      	movs	r2, #33	; 0x21
 801238c:	2104      	movs	r1, #4
 801238e:	4620      	mov	r0, r4
 8012390:	f000 fab6 	bl	8012900 <_calloc_r>
 8012394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012396:	60e8      	str	r0, [r5, #12]
 8012398:	68db      	ldr	r3, [r3, #12]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d1e4      	bne.n	8012368 <_Balloc+0x20>
 801239e:	2000      	movs	r0, #0
 80123a0:	bd70      	pop	{r4, r5, r6, pc}
 80123a2:	6802      	ldr	r2, [r0, #0]
 80123a4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80123a8:	2300      	movs	r3, #0
 80123aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80123ae:	e7f7      	b.n	80123a0 <_Balloc+0x58>

080123b0 <_Bfree>:
 80123b0:	b570      	push	{r4, r5, r6, lr}
 80123b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80123b4:	4606      	mov	r6, r0
 80123b6:	460d      	mov	r5, r1
 80123b8:	b93c      	cbnz	r4, 80123ca <_Bfree+0x1a>
 80123ba:	2010      	movs	r0, #16
 80123bc:	f7ff ffbc 	bl	8012338 <malloc>
 80123c0:	6270      	str	r0, [r6, #36]	; 0x24
 80123c2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80123c6:	6004      	str	r4, [r0, #0]
 80123c8:	60c4      	str	r4, [r0, #12]
 80123ca:	b13d      	cbz	r5, 80123dc <_Bfree+0x2c>
 80123cc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80123ce:	686a      	ldr	r2, [r5, #4]
 80123d0:	68db      	ldr	r3, [r3, #12]
 80123d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80123d6:	6029      	str	r1, [r5, #0]
 80123d8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80123dc:	bd70      	pop	{r4, r5, r6, pc}

080123de <__multadd>:
 80123de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123e2:	690d      	ldr	r5, [r1, #16]
 80123e4:	461f      	mov	r7, r3
 80123e6:	4606      	mov	r6, r0
 80123e8:	460c      	mov	r4, r1
 80123ea:	f101 0c14 	add.w	ip, r1, #20
 80123ee:	2300      	movs	r3, #0
 80123f0:	f8dc 0000 	ldr.w	r0, [ip]
 80123f4:	b281      	uxth	r1, r0
 80123f6:	fb02 7101 	mla	r1, r2, r1, r7
 80123fa:	0c0f      	lsrs	r7, r1, #16
 80123fc:	0c00      	lsrs	r0, r0, #16
 80123fe:	fb02 7000 	mla	r0, r2, r0, r7
 8012402:	b289      	uxth	r1, r1
 8012404:	3301      	adds	r3, #1
 8012406:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801240a:	429d      	cmp	r5, r3
 801240c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012410:	f84c 1b04 	str.w	r1, [ip], #4
 8012414:	dcec      	bgt.n	80123f0 <__multadd+0x12>
 8012416:	b1d7      	cbz	r7, 801244e <__multadd+0x70>
 8012418:	68a3      	ldr	r3, [r4, #8]
 801241a:	42ab      	cmp	r3, r5
 801241c:	dc12      	bgt.n	8012444 <__multadd+0x66>
 801241e:	6861      	ldr	r1, [r4, #4]
 8012420:	4630      	mov	r0, r6
 8012422:	3101      	adds	r1, #1
 8012424:	f7ff ff90 	bl	8012348 <_Balloc>
 8012428:	6922      	ldr	r2, [r4, #16]
 801242a:	3202      	adds	r2, #2
 801242c:	f104 010c 	add.w	r1, r4, #12
 8012430:	4680      	mov	r8, r0
 8012432:	0092      	lsls	r2, r2, #2
 8012434:	300c      	adds	r0, #12
 8012436:	f7fe f8db 	bl	80105f0 <memcpy>
 801243a:	4621      	mov	r1, r4
 801243c:	4630      	mov	r0, r6
 801243e:	f7ff ffb7 	bl	80123b0 <_Bfree>
 8012442:	4644      	mov	r4, r8
 8012444:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012448:	3501      	adds	r5, #1
 801244a:	615f      	str	r7, [r3, #20]
 801244c:	6125      	str	r5, [r4, #16]
 801244e:	4620      	mov	r0, r4
 8012450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012454 <__hi0bits>:
 8012454:	0c02      	lsrs	r2, r0, #16
 8012456:	0412      	lsls	r2, r2, #16
 8012458:	4603      	mov	r3, r0
 801245a:	b9b2      	cbnz	r2, 801248a <__hi0bits+0x36>
 801245c:	0403      	lsls	r3, r0, #16
 801245e:	2010      	movs	r0, #16
 8012460:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012464:	bf04      	itt	eq
 8012466:	021b      	lsleq	r3, r3, #8
 8012468:	3008      	addeq	r0, #8
 801246a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801246e:	bf04      	itt	eq
 8012470:	011b      	lsleq	r3, r3, #4
 8012472:	3004      	addeq	r0, #4
 8012474:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012478:	bf04      	itt	eq
 801247a:	009b      	lsleq	r3, r3, #2
 801247c:	3002      	addeq	r0, #2
 801247e:	2b00      	cmp	r3, #0
 8012480:	db06      	blt.n	8012490 <__hi0bits+0x3c>
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	d503      	bpl.n	801248e <__hi0bits+0x3a>
 8012486:	3001      	adds	r0, #1
 8012488:	4770      	bx	lr
 801248a:	2000      	movs	r0, #0
 801248c:	e7e8      	b.n	8012460 <__hi0bits+0xc>
 801248e:	2020      	movs	r0, #32
 8012490:	4770      	bx	lr

08012492 <__lo0bits>:
 8012492:	6803      	ldr	r3, [r0, #0]
 8012494:	f013 0207 	ands.w	r2, r3, #7
 8012498:	4601      	mov	r1, r0
 801249a:	d00b      	beq.n	80124b4 <__lo0bits+0x22>
 801249c:	07da      	lsls	r2, r3, #31
 801249e:	d423      	bmi.n	80124e8 <__lo0bits+0x56>
 80124a0:	0798      	lsls	r0, r3, #30
 80124a2:	bf49      	itett	mi
 80124a4:	085b      	lsrmi	r3, r3, #1
 80124a6:	089b      	lsrpl	r3, r3, #2
 80124a8:	2001      	movmi	r0, #1
 80124aa:	600b      	strmi	r3, [r1, #0]
 80124ac:	bf5c      	itt	pl
 80124ae:	600b      	strpl	r3, [r1, #0]
 80124b0:	2002      	movpl	r0, #2
 80124b2:	4770      	bx	lr
 80124b4:	b298      	uxth	r0, r3
 80124b6:	b9a8      	cbnz	r0, 80124e4 <__lo0bits+0x52>
 80124b8:	0c1b      	lsrs	r3, r3, #16
 80124ba:	2010      	movs	r0, #16
 80124bc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80124c0:	bf04      	itt	eq
 80124c2:	0a1b      	lsreq	r3, r3, #8
 80124c4:	3008      	addeq	r0, #8
 80124c6:	071a      	lsls	r2, r3, #28
 80124c8:	bf04      	itt	eq
 80124ca:	091b      	lsreq	r3, r3, #4
 80124cc:	3004      	addeq	r0, #4
 80124ce:	079a      	lsls	r2, r3, #30
 80124d0:	bf04      	itt	eq
 80124d2:	089b      	lsreq	r3, r3, #2
 80124d4:	3002      	addeq	r0, #2
 80124d6:	07da      	lsls	r2, r3, #31
 80124d8:	d402      	bmi.n	80124e0 <__lo0bits+0x4e>
 80124da:	085b      	lsrs	r3, r3, #1
 80124dc:	d006      	beq.n	80124ec <__lo0bits+0x5a>
 80124de:	3001      	adds	r0, #1
 80124e0:	600b      	str	r3, [r1, #0]
 80124e2:	4770      	bx	lr
 80124e4:	4610      	mov	r0, r2
 80124e6:	e7e9      	b.n	80124bc <__lo0bits+0x2a>
 80124e8:	2000      	movs	r0, #0
 80124ea:	4770      	bx	lr
 80124ec:	2020      	movs	r0, #32
 80124ee:	4770      	bx	lr

080124f0 <__i2b>:
 80124f0:	b510      	push	{r4, lr}
 80124f2:	460c      	mov	r4, r1
 80124f4:	2101      	movs	r1, #1
 80124f6:	f7ff ff27 	bl	8012348 <_Balloc>
 80124fa:	2201      	movs	r2, #1
 80124fc:	6144      	str	r4, [r0, #20]
 80124fe:	6102      	str	r2, [r0, #16]
 8012500:	bd10      	pop	{r4, pc}

08012502 <__multiply>:
 8012502:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012506:	4614      	mov	r4, r2
 8012508:	690a      	ldr	r2, [r1, #16]
 801250a:	6923      	ldr	r3, [r4, #16]
 801250c:	429a      	cmp	r2, r3
 801250e:	bfb8      	it	lt
 8012510:	460b      	movlt	r3, r1
 8012512:	4688      	mov	r8, r1
 8012514:	bfbc      	itt	lt
 8012516:	46a0      	movlt	r8, r4
 8012518:	461c      	movlt	r4, r3
 801251a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801251e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012522:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012526:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801252a:	eb07 0609 	add.w	r6, r7, r9
 801252e:	42b3      	cmp	r3, r6
 8012530:	bfb8      	it	lt
 8012532:	3101      	addlt	r1, #1
 8012534:	f7ff ff08 	bl	8012348 <_Balloc>
 8012538:	f100 0514 	add.w	r5, r0, #20
 801253c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8012540:	462b      	mov	r3, r5
 8012542:	2200      	movs	r2, #0
 8012544:	4573      	cmp	r3, lr
 8012546:	d316      	bcc.n	8012576 <__multiply+0x74>
 8012548:	f104 0214 	add.w	r2, r4, #20
 801254c:	f108 0114 	add.w	r1, r8, #20
 8012550:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012554:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012558:	9300      	str	r3, [sp, #0]
 801255a:	9b00      	ldr	r3, [sp, #0]
 801255c:	9201      	str	r2, [sp, #4]
 801255e:	4293      	cmp	r3, r2
 8012560:	d80c      	bhi.n	801257c <__multiply+0x7a>
 8012562:	2e00      	cmp	r6, #0
 8012564:	dd03      	ble.n	801256e <__multiply+0x6c>
 8012566:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801256a:	2b00      	cmp	r3, #0
 801256c:	d05d      	beq.n	801262a <__multiply+0x128>
 801256e:	6106      	str	r6, [r0, #16]
 8012570:	b003      	add	sp, #12
 8012572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012576:	f843 2b04 	str.w	r2, [r3], #4
 801257a:	e7e3      	b.n	8012544 <__multiply+0x42>
 801257c:	f8b2 b000 	ldrh.w	fp, [r2]
 8012580:	f1bb 0f00 	cmp.w	fp, #0
 8012584:	d023      	beq.n	80125ce <__multiply+0xcc>
 8012586:	4689      	mov	r9, r1
 8012588:	46ac      	mov	ip, r5
 801258a:	f04f 0800 	mov.w	r8, #0
 801258e:	f859 4b04 	ldr.w	r4, [r9], #4
 8012592:	f8dc a000 	ldr.w	sl, [ip]
 8012596:	b2a3      	uxth	r3, r4
 8012598:	fa1f fa8a 	uxth.w	sl, sl
 801259c:	fb0b a303 	mla	r3, fp, r3, sl
 80125a0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80125a4:	f8dc 4000 	ldr.w	r4, [ip]
 80125a8:	4443      	add	r3, r8
 80125aa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80125ae:	fb0b 840a 	mla	r4, fp, sl, r8
 80125b2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80125b6:	46e2      	mov	sl, ip
 80125b8:	b29b      	uxth	r3, r3
 80125ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80125be:	454f      	cmp	r7, r9
 80125c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80125c4:	f84a 3b04 	str.w	r3, [sl], #4
 80125c8:	d82b      	bhi.n	8012622 <__multiply+0x120>
 80125ca:	f8cc 8004 	str.w	r8, [ip, #4]
 80125ce:	9b01      	ldr	r3, [sp, #4]
 80125d0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80125d4:	3204      	adds	r2, #4
 80125d6:	f1ba 0f00 	cmp.w	sl, #0
 80125da:	d020      	beq.n	801261e <__multiply+0x11c>
 80125dc:	682b      	ldr	r3, [r5, #0]
 80125de:	4689      	mov	r9, r1
 80125e0:	46a8      	mov	r8, r5
 80125e2:	f04f 0b00 	mov.w	fp, #0
 80125e6:	f8b9 c000 	ldrh.w	ip, [r9]
 80125ea:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80125ee:	fb0a 440c 	mla	r4, sl, ip, r4
 80125f2:	445c      	add	r4, fp
 80125f4:	46c4      	mov	ip, r8
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80125fc:	f84c 3b04 	str.w	r3, [ip], #4
 8012600:	f859 3b04 	ldr.w	r3, [r9], #4
 8012604:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8012608:	0c1b      	lsrs	r3, r3, #16
 801260a:	fb0a b303 	mla	r3, sl, r3, fp
 801260e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012612:	454f      	cmp	r7, r9
 8012614:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8012618:	d805      	bhi.n	8012626 <__multiply+0x124>
 801261a:	f8c8 3004 	str.w	r3, [r8, #4]
 801261e:	3504      	adds	r5, #4
 8012620:	e79b      	b.n	801255a <__multiply+0x58>
 8012622:	46d4      	mov	ip, sl
 8012624:	e7b3      	b.n	801258e <__multiply+0x8c>
 8012626:	46e0      	mov	r8, ip
 8012628:	e7dd      	b.n	80125e6 <__multiply+0xe4>
 801262a:	3e01      	subs	r6, #1
 801262c:	e799      	b.n	8012562 <__multiply+0x60>
	...

08012630 <__pow5mult>:
 8012630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012634:	4615      	mov	r5, r2
 8012636:	f012 0203 	ands.w	r2, r2, #3
 801263a:	4606      	mov	r6, r0
 801263c:	460f      	mov	r7, r1
 801263e:	d007      	beq.n	8012650 <__pow5mult+0x20>
 8012640:	3a01      	subs	r2, #1
 8012642:	4c21      	ldr	r4, [pc, #132]	; (80126c8 <__pow5mult+0x98>)
 8012644:	2300      	movs	r3, #0
 8012646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801264a:	f7ff fec8 	bl	80123de <__multadd>
 801264e:	4607      	mov	r7, r0
 8012650:	10ad      	asrs	r5, r5, #2
 8012652:	d035      	beq.n	80126c0 <__pow5mult+0x90>
 8012654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012656:	b93c      	cbnz	r4, 8012668 <__pow5mult+0x38>
 8012658:	2010      	movs	r0, #16
 801265a:	f7ff fe6d 	bl	8012338 <malloc>
 801265e:	6270      	str	r0, [r6, #36]	; 0x24
 8012660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012664:	6004      	str	r4, [r0, #0]
 8012666:	60c4      	str	r4, [r0, #12]
 8012668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801266c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012670:	b94c      	cbnz	r4, 8012686 <__pow5mult+0x56>
 8012672:	f240 2171 	movw	r1, #625	; 0x271
 8012676:	4630      	mov	r0, r6
 8012678:	f7ff ff3a 	bl	80124f0 <__i2b>
 801267c:	2300      	movs	r3, #0
 801267e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012682:	4604      	mov	r4, r0
 8012684:	6003      	str	r3, [r0, #0]
 8012686:	f04f 0800 	mov.w	r8, #0
 801268a:	07eb      	lsls	r3, r5, #31
 801268c:	d50a      	bpl.n	80126a4 <__pow5mult+0x74>
 801268e:	4639      	mov	r1, r7
 8012690:	4622      	mov	r2, r4
 8012692:	4630      	mov	r0, r6
 8012694:	f7ff ff35 	bl	8012502 <__multiply>
 8012698:	4639      	mov	r1, r7
 801269a:	4681      	mov	r9, r0
 801269c:	4630      	mov	r0, r6
 801269e:	f7ff fe87 	bl	80123b0 <_Bfree>
 80126a2:	464f      	mov	r7, r9
 80126a4:	106d      	asrs	r5, r5, #1
 80126a6:	d00b      	beq.n	80126c0 <__pow5mult+0x90>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	b938      	cbnz	r0, 80126bc <__pow5mult+0x8c>
 80126ac:	4622      	mov	r2, r4
 80126ae:	4621      	mov	r1, r4
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff ff26 	bl	8012502 <__multiply>
 80126b6:	6020      	str	r0, [r4, #0]
 80126b8:	f8c0 8000 	str.w	r8, [r0]
 80126bc:	4604      	mov	r4, r0
 80126be:	e7e4      	b.n	801268a <__pow5mult+0x5a>
 80126c0:	4638      	mov	r0, r7
 80126c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c6:	bf00      	nop
 80126c8:	08014810 	.word	0x08014810

080126cc <__lshift>:
 80126cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d0:	460c      	mov	r4, r1
 80126d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126d6:	6923      	ldr	r3, [r4, #16]
 80126d8:	6849      	ldr	r1, [r1, #4]
 80126da:	eb0a 0903 	add.w	r9, sl, r3
 80126de:	68a3      	ldr	r3, [r4, #8]
 80126e0:	4607      	mov	r7, r0
 80126e2:	4616      	mov	r6, r2
 80126e4:	f109 0501 	add.w	r5, r9, #1
 80126e8:	42ab      	cmp	r3, r5
 80126ea:	db32      	blt.n	8012752 <__lshift+0x86>
 80126ec:	4638      	mov	r0, r7
 80126ee:	f7ff fe2b 	bl	8012348 <_Balloc>
 80126f2:	2300      	movs	r3, #0
 80126f4:	4680      	mov	r8, r0
 80126f6:	f100 0114 	add.w	r1, r0, #20
 80126fa:	461a      	mov	r2, r3
 80126fc:	4553      	cmp	r3, sl
 80126fe:	db2b      	blt.n	8012758 <__lshift+0x8c>
 8012700:	6920      	ldr	r0, [r4, #16]
 8012702:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012706:	f104 0314 	add.w	r3, r4, #20
 801270a:	f016 021f 	ands.w	r2, r6, #31
 801270e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012712:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012716:	d025      	beq.n	8012764 <__lshift+0x98>
 8012718:	f1c2 0e20 	rsb	lr, r2, #32
 801271c:	2000      	movs	r0, #0
 801271e:	681e      	ldr	r6, [r3, #0]
 8012720:	468a      	mov	sl, r1
 8012722:	4096      	lsls	r6, r2
 8012724:	4330      	orrs	r0, r6
 8012726:	f84a 0b04 	str.w	r0, [sl], #4
 801272a:	f853 0b04 	ldr.w	r0, [r3], #4
 801272e:	459c      	cmp	ip, r3
 8012730:	fa20 f00e 	lsr.w	r0, r0, lr
 8012734:	d814      	bhi.n	8012760 <__lshift+0x94>
 8012736:	6048      	str	r0, [r1, #4]
 8012738:	b108      	cbz	r0, 801273e <__lshift+0x72>
 801273a:	f109 0502 	add.w	r5, r9, #2
 801273e:	3d01      	subs	r5, #1
 8012740:	4638      	mov	r0, r7
 8012742:	f8c8 5010 	str.w	r5, [r8, #16]
 8012746:	4621      	mov	r1, r4
 8012748:	f7ff fe32 	bl	80123b0 <_Bfree>
 801274c:	4640      	mov	r0, r8
 801274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012752:	3101      	adds	r1, #1
 8012754:	005b      	lsls	r3, r3, #1
 8012756:	e7c7      	b.n	80126e8 <__lshift+0x1c>
 8012758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801275c:	3301      	adds	r3, #1
 801275e:	e7cd      	b.n	80126fc <__lshift+0x30>
 8012760:	4651      	mov	r1, sl
 8012762:	e7dc      	b.n	801271e <__lshift+0x52>
 8012764:	3904      	subs	r1, #4
 8012766:	f853 2b04 	ldr.w	r2, [r3], #4
 801276a:	f841 2f04 	str.w	r2, [r1, #4]!
 801276e:	459c      	cmp	ip, r3
 8012770:	d8f9      	bhi.n	8012766 <__lshift+0x9a>
 8012772:	e7e4      	b.n	801273e <__lshift+0x72>

08012774 <__mcmp>:
 8012774:	6903      	ldr	r3, [r0, #16]
 8012776:	690a      	ldr	r2, [r1, #16]
 8012778:	1a9b      	subs	r3, r3, r2
 801277a:	b530      	push	{r4, r5, lr}
 801277c:	d10c      	bne.n	8012798 <__mcmp+0x24>
 801277e:	0092      	lsls	r2, r2, #2
 8012780:	3014      	adds	r0, #20
 8012782:	3114      	adds	r1, #20
 8012784:	1884      	adds	r4, r0, r2
 8012786:	4411      	add	r1, r2
 8012788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801278c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012790:	4295      	cmp	r5, r2
 8012792:	d003      	beq.n	801279c <__mcmp+0x28>
 8012794:	d305      	bcc.n	80127a2 <__mcmp+0x2e>
 8012796:	2301      	movs	r3, #1
 8012798:	4618      	mov	r0, r3
 801279a:	bd30      	pop	{r4, r5, pc}
 801279c:	42a0      	cmp	r0, r4
 801279e:	d3f3      	bcc.n	8012788 <__mcmp+0x14>
 80127a0:	e7fa      	b.n	8012798 <__mcmp+0x24>
 80127a2:	f04f 33ff 	mov.w	r3, #4294967295
 80127a6:	e7f7      	b.n	8012798 <__mcmp+0x24>

080127a8 <__mdiff>:
 80127a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127ac:	460d      	mov	r5, r1
 80127ae:	4607      	mov	r7, r0
 80127b0:	4611      	mov	r1, r2
 80127b2:	4628      	mov	r0, r5
 80127b4:	4614      	mov	r4, r2
 80127b6:	f7ff ffdd 	bl	8012774 <__mcmp>
 80127ba:	1e06      	subs	r6, r0, #0
 80127bc:	d108      	bne.n	80127d0 <__mdiff+0x28>
 80127be:	4631      	mov	r1, r6
 80127c0:	4638      	mov	r0, r7
 80127c2:	f7ff fdc1 	bl	8012348 <_Balloc>
 80127c6:	2301      	movs	r3, #1
 80127c8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80127cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127d0:	bfa4      	itt	ge
 80127d2:	4623      	movge	r3, r4
 80127d4:	462c      	movge	r4, r5
 80127d6:	4638      	mov	r0, r7
 80127d8:	6861      	ldr	r1, [r4, #4]
 80127da:	bfa6      	itte	ge
 80127dc:	461d      	movge	r5, r3
 80127de:	2600      	movge	r6, #0
 80127e0:	2601      	movlt	r6, #1
 80127e2:	f7ff fdb1 	bl	8012348 <_Balloc>
 80127e6:	692b      	ldr	r3, [r5, #16]
 80127e8:	60c6      	str	r6, [r0, #12]
 80127ea:	6926      	ldr	r6, [r4, #16]
 80127ec:	f105 0914 	add.w	r9, r5, #20
 80127f0:	f104 0214 	add.w	r2, r4, #20
 80127f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80127f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80127fc:	f100 0514 	add.w	r5, r0, #20
 8012800:	f04f 0e00 	mov.w	lr, #0
 8012804:	f852 ab04 	ldr.w	sl, [r2], #4
 8012808:	f859 4b04 	ldr.w	r4, [r9], #4
 801280c:	fa1e f18a 	uxtah	r1, lr, sl
 8012810:	b2a3      	uxth	r3, r4
 8012812:	1ac9      	subs	r1, r1, r3
 8012814:	0c23      	lsrs	r3, r4, #16
 8012816:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801281a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801281e:	b289      	uxth	r1, r1
 8012820:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012824:	45c8      	cmp	r8, r9
 8012826:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801282a:	4694      	mov	ip, r2
 801282c:	f845 3b04 	str.w	r3, [r5], #4
 8012830:	d8e8      	bhi.n	8012804 <__mdiff+0x5c>
 8012832:	45bc      	cmp	ip, r7
 8012834:	d304      	bcc.n	8012840 <__mdiff+0x98>
 8012836:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801283a:	b183      	cbz	r3, 801285e <__mdiff+0xb6>
 801283c:	6106      	str	r6, [r0, #16]
 801283e:	e7c5      	b.n	80127cc <__mdiff+0x24>
 8012840:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012844:	fa1e f381 	uxtah	r3, lr, r1
 8012848:	141a      	asrs	r2, r3, #16
 801284a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801284e:	b29b      	uxth	r3, r3
 8012850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012854:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012858:	f845 3b04 	str.w	r3, [r5], #4
 801285c:	e7e9      	b.n	8012832 <__mdiff+0x8a>
 801285e:	3e01      	subs	r6, #1
 8012860:	e7e9      	b.n	8012836 <__mdiff+0x8e>

08012862 <__d2b>:
 8012862:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012866:	460e      	mov	r6, r1
 8012868:	2101      	movs	r1, #1
 801286a:	ec59 8b10 	vmov	r8, r9, d0
 801286e:	4615      	mov	r5, r2
 8012870:	f7ff fd6a 	bl	8012348 <_Balloc>
 8012874:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012878:	4607      	mov	r7, r0
 801287a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801287e:	bb34      	cbnz	r4, 80128ce <__d2b+0x6c>
 8012880:	9301      	str	r3, [sp, #4]
 8012882:	f1b8 0300 	subs.w	r3, r8, #0
 8012886:	d027      	beq.n	80128d8 <__d2b+0x76>
 8012888:	a802      	add	r0, sp, #8
 801288a:	f840 3d08 	str.w	r3, [r0, #-8]!
 801288e:	f7ff fe00 	bl	8012492 <__lo0bits>
 8012892:	9900      	ldr	r1, [sp, #0]
 8012894:	b1f0      	cbz	r0, 80128d4 <__d2b+0x72>
 8012896:	9a01      	ldr	r2, [sp, #4]
 8012898:	f1c0 0320 	rsb	r3, r0, #32
 801289c:	fa02 f303 	lsl.w	r3, r2, r3
 80128a0:	430b      	orrs	r3, r1
 80128a2:	40c2      	lsrs	r2, r0
 80128a4:	617b      	str	r3, [r7, #20]
 80128a6:	9201      	str	r2, [sp, #4]
 80128a8:	9b01      	ldr	r3, [sp, #4]
 80128aa:	61bb      	str	r3, [r7, #24]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	bf14      	ite	ne
 80128b0:	2102      	movne	r1, #2
 80128b2:	2101      	moveq	r1, #1
 80128b4:	6139      	str	r1, [r7, #16]
 80128b6:	b1c4      	cbz	r4, 80128ea <__d2b+0x88>
 80128b8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80128bc:	4404      	add	r4, r0
 80128be:	6034      	str	r4, [r6, #0]
 80128c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128c4:	6028      	str	r0, [r5, #0]
 80128c6:	4638      	mov	r0, r7
 80128c8:	b003      	add	sp, #12
 80128ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80128d2:	e7d5      	b.n	8012880 <__d2b+0x1e>
 80128d4:	6179      	str	r1, [r7, #20]
 80128d6:	e7e7      	b.n	80128a8 <__d2b+0x46>
 80128d8:	a801      	add	r0, sp, #4
 80128da:	f7ff fdda 	bl	8012492 <__lo0bits>
 80128de:	9b01      	ldr	r3, [sp, #4]
 80128e0:	617b      	str	r3, [r7, #20]
 80128e2:	2101      	movs	r1, #1
 80128e4:	6139      	str	r1, [r7, #16]
 80128e6:	3020      	adds	r0, #32
 80128e8:	e7e5      	b.n	80128b6 <__d2b+0x54>
 80128ea:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80128ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80128f2:	6030      	str	r0, [r6, #0]
 80128f4:	6918      	ldr	r0, [r3, #16]
 80128f6:	f7ff fdad 	bl	8012454 <__hi0bits>
 80128fa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80128fe:	e7e1      	b.n	80128c4 <__d2b+0x62>

08012900 <_calloc_r>:
 8012900:	b538      	push	{r3, r4, r5, lr}
 8012902:	fb02 f401 	mul.w	r4, r2, r1
 8012906:	4621      	mov	r1, r4
 8012908:	f000 f856 	bl	80129b8 <_malloc_r>
 801290c:	4605      	mov	r5, r0
 801290e:	b118      	cbz	r0, 8012918 <_calloc_r+0x18>
 8012910:	4622      	mov	r2, r4
 8012912:	2100      	movs	r1, #0
 8012914:	f7fd fe90 	bl	8010638 <memset>
 8012918:	4628      	mov	r0, r5
 801291a:	bd38      	pop	{r3, r4, r5, pc}

0801291c <_free_r>:
 801291c:	b538      	push	{r3, r4, r5, lr}
 801291e:	4605      	mov	r5, r0
 8012920:	2900      	cmp	r1, #0
 8012922:	d045      	beq.n	80129b0 <_free_r+0x94>
 8012924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012928:	1f0c      	subs	r4, r1, #4
 801292a:	2b00      	cmp	r3, #0
 801292c:	bfb8      	it	lt
 801292e:	18e4      	addlt	r4, r4, r3
 8012930:	f000 fa98 	bl	8012e64 <__malloc_lock>
 8012934:	4a1f      	ldr	r2, [pc, #124]	; (80129b4 <_free_r+0x98>)
 8012936:	6813      	ldr	r3, [r2, #0]
 8012938:	4610      	mov	r0, r2
 801293a:	b933      	cbnz	r3, 801294a <_free_r+0x2e>
 801293c:	6063      	str	r3, [r4, #4]
 801293e:	6014      	str	r4, [r2, #0]
 8012940:	4628      	mov	r0, r5
 8012942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012946:	f000 ba8e 	b.w	8012e66 <__malloc_unlock>
 801294a:	42a3      	cmp	r3, r4
 801294c:	d90c      	bls.n	8012968 <_free_r+0x4c>
 801294e:	6821      	ldr	r1, [r4, #0]
 8012950:	1862      	adds	r2, r4, r1
 8012952:	4293      	cmp	r3, r2
 8012954:	bf04      	itt	eq
 8012956:	681a      	ldreq	r2, [r3, #0]
 8012958:	685b      	ldreq	r3, [r3, #4]
 801295a:	6063      	str	r3, [r4, #4]
 801295c:	bf04      	itt	eq
 801295e:	1852      	addeq	r2, r2, r1
 8012960:	6022      	streq	r2, [r4, #0]
 8012962:	6004      	str	r4, [r0, #0]
 8012964:	e7ec      	b.n	8012940 <_free_r+0x24>
 8012966:	4613      	mov	r3, r2
 8012968:	685a      	ldr	r2, [r3, #4]
 801296a:	b10a      	cbz	r2, 8012970 <_free_r+0x54>
 801296c:	42a2      	cmp	r2, r4
 801296e:	d9fa      	bls.n	8012966 <_free_r+0x4a>
 8012970:	6819      	ldr	r1, [r3, #0]
 8012972:	1858      	adds	r0, r3, r1
 8012974:	42a0      	cmp	r0, r4
 8012976:	d10b      	bne.n	8012990 <_free_r+0x74>
 8012978:	6820      	ldr	r0, [r4, #0]
 801297a:	4401      	add	r1, r0
 801297c:	1858      	adds	r0, r3, r1
 801297e:	4282      	cmp	r2, r0
 8012980:	6019      	str	r1, [r3, #0]
 8012982:	d1dd      	bne.n	8012940 <_free_r+0x24>
 8012984:	6810      	ldr	r0, [r2, #0]
 8012986:	6852      	ldr	r2, [r2, #4]
 8012988:	605a      	str	r2, [r3, #4]
 801298a:	4401      	add	r1, r0
 801298c:	6019      	str	r1, [r3, #0]
 801298e:	e7d7      	b.n	8012940 <_free_r+0x24>
 8012990:	d902      	bls.n	8012998 <_free_r+0x7c>
 8012992:	230c      	movs	r3, #12
 8012994:	602b      	str	r3, [r5, #0]
 8012996:	e7d3      	b.n	8012940 <_free_r+0x24>
 8012998:	6820      	ldr	r0, [r4, #0]
 801299a:	1821      	adds	r1, r4, r0
 801299c:	428a      	cmp	r2, r1
 801299e:	bf04      	itt	eq
 80129a0:	6811      	ldreq	r1, [r2, #0]
 80129a2:	6852      	ldreq	r2, [r2, #4]
 80129a4:	6062      	str	r2, [r4, #4]
 80129a6:	bf04      	itt	eq
 80129a8:	1809      	addeq	r1, r1, r0
 80129aa:	6021      	streq	r1, [r4, #0]
 80129ac:	605c      	str	r4, [r3, #4]
 80129ae:	e7c7      	b.n	8012940 <_free_r+0x24>
 80129b0:	bd38      	pop	{r3, r4, r5, pc}
 80129b2:	bf00      	nop
 80129b4:	200024b0 	.word	0x200024b0

080129b8 <_malloc_r>:
 80129b8:	b570      	push	{r4, r5, r6, lr}
 80129ba:	1ccd      	adds	r5, r1, #3
 80129bc:	f025 0503 	bic.w	r5, r5, #3
 80129c0:	3508      	adds	r5, #8
 80129c2:	2d0c      	cmp	r5, #12
 80129c4:	bf38      	it	cc
 80129c6:	250c      	movcc	r5, #12
 80129c8:	2d00      	cmp	r5, #0
 80129ca:	4606      	mov	r6, r0
 80129cc:	db01      	blt.n	80129d2 <_malloc_r+0x1a>
 80129ce:	42a9      	cmp	r1, r5
 80129d0:	d903      	bls.n	80129da <_malloc_r+0x22>
 80129d2:	230c      	movs	r3, #12
 80129d4:	6033      	str	r3, [r6, #0]
 80129d6:	2000      	movs	r0, #0
 80129d8:	bd70      	pop	{r4, r5, r6, pc}
 80129da:	f000 fa43 	bl	8012e64 <__malloc_lock>
 80129de:	4a21      	ldr	r2, [pc, #132]	; (8012a64 <_malloc_r+0xac>)
 80129e0:	6814      	ldr	r4, [r2, #0]
 80129e2:	4621      	mov	r1, r4
 80129e4:	b991      	cbnz	r1, 8012a0c <_malloc_r+0x54>
 80129e6:	4c20      	ldr	r4, [pc, #128]	; (8012a68 <_malloc_r+0xb0>)
 80129e8:	6823      	ldr	r3, [r4, #0]
 80129ea:	b91b      	cbnz	r3, 80129f4 <_malloc_r+0x3c>
 80129ec:	4630      	mov	r0, r6
 80129ee:	f000 f97d 	bl	8012cec <_sbrk_r>
 80129f2:	6020      	str	r0, [r4, #0]
 80129f4:	4629      	mov	r1, r5
 80129f6:	4630      	mov	r0, r6
 80129f8:	f000 f978 	bl	8012cec <_sbrk_r>
 80129fc:	1c43      	adds	r3, r0, #1
 80129fe:	d124      	bne.n	8012a4a <_malloc_r+0x92>
 8012a00:	230c      	movs	r3, #12
 8012a02:	6033      	str	r3, [r6, #0]
 8012a04:	4630      	mov	r0, r6
 8012a06:	f000 fa2e 	bl	8012e66 <__malloc_unlock>
 8012a0a:	e7e4      	b.n	80129d6 <_malloc_r+0x1e>
 8012a0c:	680b      	ldr	r3, [r1, #0]
 8012a0e:	1b5b      	subs	r3, r3, r5
 8012a10:	d418      	bmi.n	8012a44 <_malloc_r+0x8c>
 8012a12:	2b0b      	cmp	r3, #11
 8012a14:	d90f      	bls.n	8012a36 <_malloc_r+0x7e>
 8012a16:	600b      	str	r3, [r1, #0]
 8012a18:	50cd      	str	r5, [r1, r3]
 8012a1a:	18cc      	adds	r4, r1, r3
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f000 fa22 	bl	8012e66 <__malloc_unlock>
 8012a22:	f104 000b 	add.w	r0, r4, #11
 8012a26:	1d23      	adds	r3, r4, #4
 8012a28:	f020 0007 	bic.w	r0, r0, #7
 8012a2c:	1ac3      	subs	r3, r0, r3
 8012a2e:	d0d3      	beq.n	80129d8 <_malloc_r+0x20>
 8012a30:	425a      	negs	r2, r3
 8012a32:	50e2      	str	r2, [r4, r3]
 8012a34:	e7d0      	b.n	80129d8 <_malloc_r+0x20>
 8012a36:	428c      	cmp	r4, r1
 8012a38:	684b      	ldr	r3, [r1, #4]
 8012a3a:	bf16      	itet	ne
 8012a3c:	6063      	strne	r3, [r4, #4]
 8012a3e:	6013      	streq	r3, [r2, #0]
 8012a40:	460c      	movne	r4, r1
 8012a42:	e7eb      	b.n	8012a1c <_malloc_r+0x64>
 8012a44:	460c      	mov	r4, r1
 8012a46:	6849      	ldr	r1, [r1, #4]
 8012a48:	e7cc      	b.n	80129e4 <_malloc_r+0x2c>
 8012a4a:	1cc4      	adds	r4, r0, #3
 8012a4c:	f024 0403 	bic.w	r4, r4, #3
 8012a50:	42a0      	cmp	r0, r4
 8012a52:	d005      	beq.n	8012a60 <_malloc_r+0xa8>
 8012a54:	1a21      	subs	r1, r4, r0
 8012a56:	4630      	mov	r0, r6
 8012a58:	f000 f948 	bl	8012cec <_sbrk_r>
 8012a5c:	3001      	adds	r0, #1
 8012a5e:	d0cf      	beq.n	8012a00 <_malloc_r+0x48>
 8012a60:	6025      	str	r5, [r4, #0]
 8012a62:	e7db      	b.n	8012a1c <_malloc_r+0x64>
 8012a64:	200024b0 	.word	0x200024b0
 8012a68:	200024b4 	.word	0x200024b4

08012a6c <__sfputc_r>:
 8012a6c:	6893      	ldr	r3, [r2, #8]
 8012a6e:	3b01      	subs	r3, #1
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	b410      	push	{r4}
 8012a74:	6093      	str	r3, [r2, #8]
 8012a76:	da08      	bge.n	8012a8a <__sfputc_r+0x1e>
 8012a78:	6994      	ldr	r4, [r2, #24]
 8012a7a:	42a3      	cmp	r3, r4
 8012a7c:	db01      	blt.n	8012a82 <__sfputc_r+0x16>
 8012a7e:	290a      	cmp	r1, #10
 8012a80:	d103      	bne.n	8012a8a <__sfputc_r+0x1e>
 8012a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a86:	f7fe bb65 	b.w	8011154 <__swbuf_r>
 8012a8a:	6813      	ldr	r3, [r2, #0]
 8012a8c:	1c58      	adds	r0, r3, #1
 8012a8e:	6010      	str	r0, [r2, #0]
 8012a90:	7019      	strb	r1, [r3, #0]
 8012a92:	4608      	mov	r0, r1
 8012a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <__sfputs_r>:
 8012a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a9c:	4606      	mov	r6, r0
 8012a9e:	460f      	mov	r7, r1
 8012aa0:	4614      	mov	r4, r2
 8012aa2:	18d5      	adds	r5, r2, r3
 8012aa4:	42ac      	cmp	r4, r5
 8012aa6:	d101      	bne.n	8012aac <__sfputs_r+0x12>
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	e007      	b.n	8012abc <__sfputs_r+0x22>
 8012aac:	463a      	mov	r2, r7
 8012aae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f7ff ffda 	bl	8012a6c <__sfputc_r>
 8012ab8:	1c43      	adds	r3, r0, #1
 8012aba:	d1f3      	bne.n	8012aa4 <__sfputs_r+0xa>
 8012abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ac0 <_vfiprintf_r>:
 8012ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac4:	460c      	mov	r4, r1
 8012ac6:	b09d      	sub	sp, #116	; 0x74
 8012ac8:	4617      	mov	r7, r2
 8012aca:	461d      	mov	r5, r3
 8012acc:	4606      	mov	r6, r0
 8012ace:	b118      	cbz	r0, 8012ad8 <_vfiprintf_r+0x18>
 8012ad0:	6983      	ldr	r3, [r0, #24]
 8012ad2:	b90b      	cbnz	r3, 8012ad8 <_vfiprintf_r+0x18>
 8012ad4:	f7ff fb34 	bl	8012140 <__sinit>
 8012ad8:	4b7c      	ldr	r3, [pc, #496]	; (8012ccc <_vfiprintf_r+0x20c>)
 8012ada:	429c      	cmp	r4, r3
 8012adc:	d158      	bne.n	8012b90 <_vfiprintf_r+0xd0>
 8012ade:	6874      	ldr	r4, [r6, #4]
 8012ae0:	89a3      	ldrh	r3, [r4, #12]
 8012ae2:	0718      	lsls	r0, r3, #28
 8012ae4:	d55e      	bpl.n	8012ba4 <_vfiprintf_r+0xe4>
 8012ae6:	6923      	ldr	r3, [r4, #16]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d05b      	beq.n	8012ba4 <_vfiprintf_r+0xe4>
 8012aec:	2300      	movs	r3, #0
 8012aee:	9309      	str	r3, [sp, #36]	; 0x24
 8012af0:	2320      	movs	r3, #32
 8012af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012af6:	2330      	movs	r3, #48	; 0x30
 8012af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012afc:	9503      	str	r5, [sp, #12]
 8012afe:	f04f 0b01 	mov.w	fp, #1
 8012b02:	46b8      	mov	r8, r7
 8012b04:	4645      	mov	r5, r8
 8012b06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012b0a:	b10b      	cbz	r3, 8012b10 <_vfiprintf_r+0x50>
 8012b0c:	2b25      	cmp	r3, #37	; 0x25
 8012b0e:	d154      	bne.n	8012bba <_vfiprintf_r+0xfa>
 8012b10:	ebb8 0a07 	subs.w	sl, r8, r7
 8012b14:	d00b      	beq.n	8012b2e <_vfiprintf_r+0x6e>
 8012b16:	4653      	mov	r3, sl
 8012b18:	463a      	mov	r2, r7
 8012b1a:	4621      	mov	r1, r4
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	f7ff ffbc 	bl	8012a9a <__sfputs_r>
 8012b22:	3001      	adds	r0, #1
 8012b24:	f000 80c2 	beq.w	8012cac <_vfiprintf_r+0x1ec>
 8012b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b2a:	4453      	add	r3, sl
 8012b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8012b2e:	f898 3000 	ldrb.w	r3, [r8]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	f000 80ba 	beq.w	8012cac <_vfiprintf_r+0x1ec>
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b42:	9304      	str	r3, [sp, #16]
 8012b44:	9307      	str	r3, [sp, #28]
 8012b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8012b4c:	46a8      	mov	r8, r5
 8012b4e:	2205      	movs	r2, #5
 8012b50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012b54:	485e      	ldr	r0, [pc, #376]	; (8012cd0 <_vfiprintf_r+0x210>)
 8012b56:	f7ed fb43 	bl	80001e0 <memchr>
 8012b5a:	9b04      	ldr	r3, [sp, #16]
 8012b5c:	bb78      	cbnz	r0, 8012bbe <_vfiprintf_r+0xfe>
 8012b5e:	06d9      	lsls	r1, r3, #27
 8012b60:	bf44      	itt	mi
 8012b62:	2220      	movmi	r2, #32
 8012b64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b68:	071a      	lsls	r2, r3, #28
 8012b6a:	bf44      	itt	mi
 8012b6c:	222b      	movmi	r2, #43	; 0x2b
 8012b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b72:	782a      	ldrb	r2, [r5, #0]
 8012b74:	2a2a      	cmp	r2, #42	; 0x2a
 8012b76:	d02a      	beq.n	8012bce <_vfiprintf_r+0x10e>
 8012b78:	9a07      	ldr	r2, [sp, #28]
 8012b7a:	46a8      	mov	r8, r5
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	250a      	movs	r5, #10
 8012b80:	4641      	mov	r1, r8
 8012b82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b86:	3b30      	subs	r3, #48	; 0x30
 8012b88:	2b09      	cmp	r3, #9
 8012b8a:	d969      	bls.n	8012c60 <_vfiprintf_r+0x1a0>
 8012b8c:	b360      	cbz	r0, 8012be8 <_vfiprintf_r+0x128>
 8012b8e:	e024      	b.n	8012bda <_vfiprintf_r+0x11a>
 8012b90:	4b50      	ldr	r3, [pc, #320]	; (8012cd4 <_vfiprintf_r+0x214>)
 8012b92:	429c      	cmp	r4, r3
 8012b94:	d101      	bne.n	8012b9a <_vfiprintf_r+0xda>
 8012b96:	68b4      	ldr	r4, [r6, #8]
 8012b98:	e7a2      	b.n	8012ae0 <_vfiprintf_r+0x20>
 8012b9a:	4b4f      	ldr	r3, [pc, #316]	; (8012cd8 <_vfiprintf_r+0x218>)
 8012b9c:	429c      	cmp	r4, r3
 8012b9e:	bf08      	it	eq
 8012ba0:	68f4      	ldreq	r4, [r6, #12]
 8012ba2:	e79d      	b.n	8012ae0 <_vfiprintf_r+0x20>
 8012ba4:	4621      	mov	r1, r4
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	f7fe fb26 	bl	80111f8 <__swsetup_r>
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d09d      	beq.n	8012aec <_vfiprintf_r+0x2c>
 8012bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bb4:	b01d      	add	sp, #116	; 0x74
 8012bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bba:	46a8      	mov	r8, r5
 8012bbc:	e7a2      	b.n	8012b04 <_vfiprintf_r+0x44>
 8012bbe:	4a44      	ldr	r2, [pc, #272]	; (8012cd0 <_vfiprintf_r+0x210>)
 8012bc0:	1a80      	subs	r0, r0, r2
 8012bc2:	fa0b f000 	lsl.w	r0, fp, r0
 8012bc6:	4318      	orrs	r0, r3
 8012bc8:	9004      	str	r0, [sp, #16]
 8012bca:	4645      	mov	r5, r8
 8012bcc:	e7be      	b.n	8012b4c <_vfiprintf_r+0x8c>
 8012bce:	9a03      	ldr	r2, [sp, #12]
 8012bd0:	1d11      	adds	r1, r2, #4
 8012bd2:	6812      	ldr	r2, [r2, #0]
 8012bd4:	9103      	str	r1, [sp, #12]
 8012bd6:	2a00      	cmp	r2, #0
 8012bd8:	db01      	blt.n	8012bde <_vfiprintf_r+0x11e>
 8012bda:	9207      	str	r2, [sp, #28]
 8012bdc:	e004      	b.n	8012be8 <_vfiprintf_r+0x128>
 8012bde:	4252      	negs	r2, r2
 8012be0:	f043 0302 	orr.w	r3, r3, #2
 8012be4:	9207      	str	r2, [sp, #28]
 8012be6:	9304      	str	r3, [sp, #16]
 8012be8:	f898 3000 	ldrb.w	r3, [r8]
 8012bec:	2b2e      	cmp	r3, #46	; 0x2e
 8012bee:	d10e      	bne.n	8012c0e <_vfiprintf_r+0x14e>
 8012bf0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8012bf6:	d138      	bne.n	8012c6a <_vfiprintf_r+0x1aa>
 8012bf8:	9b03      	ldr	r3, [sp, #12]
 8012bfa:	1d1a      	adds	r2, r3, #4
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	9203      	str	r2, [sp, #12]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	bfb8      	it	lt
 8012c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8012c08:	f108 0802 	add.w	r8, r8, #2
 8012c0c:	9305      	str	r3, [sp, #20]
 8012c0e:	4d33      	ldr	r5, [pc, #204]	; (8012cdc <_vfiprintf_r+0x21c>)
 8012c10:	f898 1000 	ldrb.w	r1, [r8]
 8012c14:	2203      	movs	r2, #3
 8012c16:	4628      	mov	r0, r5
 8012c18:	f7ed fae2 	bl	80001e0 <memchr>
 8012c1c:	b140      	cbz	r0, 8012c30 <_vfiprintf_r+0x170>
 8012c1e:	2340      	movs	r3, #64	; 0x40
 8012c20:	1b40      	subs	r0, r0, r5
 8012c22:	fa03 f000 	lsl.w	r0, r3, r0
 8012c26:	9b04      	ldr	r3, [sp, #16]
 8012c28:	4303      	orrs	r3, r0
 8012c2a:	f108 0801 	add.w	r8, r8, #1
 8012c2e:	9304      	str	r3, [sp, #16]
 8012c30:	f898 1000 	ldrb.w	r1, [r8]
 8012c34:	482a      	ldr	r0, [pc, #168]	; (8012ce0 <_vfiprintf_r+0x220>)
 8012c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c3a:	2206      	movs	r2, #6
 8012c3c:	f108 0701 	add.w	r7, r8, #1
 8012c40:	f7ed face 	bl	80001e0 <memchr>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	d037      	beq.n	8012cb8 <_vfiprintf_r+0x1f8>
 8012c48:	4b26      	ldr	r3, [pc, #152]	; (8012ce4 <_vfiprintf_r+0x224>)
 8012c4a:	bb1b      	cbnz	r3, 8012c94 <_vfiprintf_r+0x1d4>
 8012c4c:	9b03      	ldr	r3, [sp, #12]
 8012c4e:	3307      	adds	r3, #7
 8012c50:	f023 0307 	bic.w	r3, r3, #7
 8012c54:	3308      	adds	r3, #8
 8012c56:	9303      	str	r3, [sp, #12]
 8012c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c5a:	444b      	add	r3, r9
 8012c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c5e:	e750      	b.n	8012b02 <_vfiprintf_r+0x42>
 8012c60:	fb05 3202 	mla	r2, r5, r2, r3
 8012c64:	2001      	movs	r0, #1
 8012c66:	4688      	mov	r8, r1
 8012c68:	e78a      	b.n	8012b80 <_vfiprintf_r+0xc0>
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	f108 0801 	add.w	r8, r8, #1
 8012c70:	9305      	str	r3, [sp, #20]
 8012c72:	4619      	mov	r1, r3
 8012c74:	250a      	movs	r5, #10
 8012c76:	4640      	mov	r0, r8
 8012c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c7c:	3a30      	subs	r2, #48	; 0x30
 8012c7e:	2a09      	cmp	r2, #9
 8012c80:	d903      	bls.n	8012c8a <_vfiprintf_r+0x1ca>
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d0c3      	beq.n	8012c0e <_vfiprintf_r+0x14e>
 8012c86:	9105      	str	r1, [sp, #20]
 8012c88:	e7c1      	b.n	8012c0e <_vfiprintf_r+0x14e>
 8012c8a:	fb05 2101 	mla	r1, r5, r1, r2
 8012c8e:	2301      	movs	r3, #1
 8012c90:	4680      	mov	r8, r0
 8012c92:	e7f0      	b.n	8012c76 <_vfiprintf_r+0x1b6>
 8012c94:	ab03      	add	r3, sp, #12
 8012c96:	9300      	str	r3, [sp, #0]
 8012c98:	4622      	mov	r2, r4
 8012c9a:	4b13      	ldr	r3, [pc, #76]	; (8012ce8 <_vfiprintf_r+0x228>)
 8012c9c:	a904      	add	r1, sp, #16
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f7fd fd66 	bl	8010770 <_printf_float>
 8012ca4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012ca8:	4681      	mov	r9, r0
 8012caa:	d1d5      	bne.n	8012c58 <_vfiprintf_r+0x198>
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	065b      	lsls	r3, r3, #25
 8012cb0:	f53f af7e 	bmi.w	8012bb0 <_vfiprintf_r+0xf0>
 8012cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012cb6:	e77d      	b.n	8012bb4 <_vfiprintf_r+0xf4>
 8012cb8:	ab03      	add	r3, sp, #12
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	4622      	mov	r2, r4
 8012cbe:	4b0a      	ldr	r3, [pc, #40]	; (8012ce8 <_vfiprintf_r+0x228>)
 8012cc0:	a904      	add	r1, sp, #16
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f7fe f80a 	bl	8010cdc <_printf_i>
 8012cc8:	e7ec      	b.n	8012ca4 <_vfiprintf_r+0x1e4>
 8012cca:	bf00      	nop
 8012ccc:	080146dc 	.word	0x080146dc
 8012cd0:	0801481c 	.word	0x0801481c
 8012cd4:	080146fc 	.word	0x080146fc
 8012cd8:	080146bc 	.word	0x080146bc
 8012cdc:	08014822 	.word	0x08014822
 8012ce0:	08014826 	.word	0x08014826
 8012ce4:	08010771 	.word	0x08010771
 8012ce8:	08012a9b 	.word	0x08012a9b

08012cec <_sbrk_r>:
 8012cec:	b538      	push	{r3, r4, r5, lr}
 8012cee:	4c06      	ldr	r4, [pc, #24]	; (8012d08 <_sbrk_r+0x1c>)
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	4608      	mov	r0, r1
 8012cf6:	6023      	str	r3, [r4, #0]
 8012cf8:	f7f4 fcc0 	bl	800767c <_sbrk>
 8012cfc:	1c43      	adds	r3, r0, #1
 8012cfe:	d102      	bne.n	8012d06 <_sbrk_r+0x1a>
 8012d00:	6823      	ldr	r3, [r4, #0]
 8012d02:	b103      	cbz	r3, 8012d06 <_sbrk_r+0x1a>
 8012d04:	602b      	str	r3, [r5, #0]
 8012d06:	bd38      	pop	{r3, r4, r5, pc}
 8012d08:	20003978 	.word	0x20003978

08012d0c <__sread>:
 8012d0c:	b510      	push	{r4, lr}
 8012d0e:	460c      	mov	r4, r1
 8012d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d14:	f000 f8a8 	bl	8012e68 <_read_r>
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	bfab      	itete	ge
 8012d1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8012d20:	181b      	addge	r3, r3, r0
 8012d22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d26:	bfac      	ite	ge
 8012d28:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d2a:	81a3      	strhlt	r3, [r4, #12]
 8012d2c:	bd10      	pop	{r4, pc}

08012d2e <__swrite>:
 8012d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d32:	461f      	mov	r7, r3
 8012d34:	898b      	ldrh	r3, [r1, #12]
 8012d36:	05db      	lsls	r3, r3, #23
 8012d38:	4605      	mov	r5, r0
 8012d3a:	460c      	mov	r4, r1
 8012d3c:	4616      	mov	r6, r2
 8012d3e:	d505      	bpl.n	8012d4c <__swrite+0x1e>
 8012d40:	2302      	movs	r3, #2
 8012d42:	2200      	movs	r2, #0
 8012d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d48:	f000 f868 	bl	8012e1c <_lseek_r>
 8012d4c:	89a3      	ldrh	r3, [r4, #12]
 8012d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d56:	81a3      	strh	r3, [r4, #12]
 8012d58:	4632      	mov	r2, r6
 8012d5a:	463b      	mov	r3, r7
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d62:	f000 b817 	b.w	8012d94 <_write_r>

08012d66 <__sseek>:
 8012d66:	b510      	push	{r4, lr}
 8012d68:	460c      	mov	r4, r1
 8012d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d6e:	f000 f855 	bl	8012e1c <_lseek_r>
 8012d72:	1c43      	adds	r3, r0, #1
 8012d74:	89a3      	ldrh	r3, [r4, #12]
 8012d76:	bf15      	itete	ne
 8012d78:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012d7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012d82:	81a3      	strheq	r3, [r4, #12]
 8012d84:	bf18      	it	ne
 8012d86:	81a3      	strhne	r3, [r4, #12]
 8012d88:	bd10      	pop	{r4, pc}

08012d8a <__sclose>:
 8012d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d8e:	f000 b813 	b.w	8012db8 <_close_r>
	...

08012d94 <_write_r>:
 8012d94:	b538      	push	{r3, r4, r5, lr}
 8012d96:	4c07      	ldr	r4, [pc, #28]	; (8012db4 <_write_r+0x20>)
 8012d98:	4605      	mov	r5, r0
 8012d9a:	4608      	mov	r0, r1
 8012d9c:	4611      	mov	r1, r2
 8012d9e:	2200      	movs	r2, #0
 8012da0:	6022      	str	r2, [r4, #0]
 8012da2:	461a      	mov	r2, r3
 8012da4:	f7f0 fae4 	bl	8003370 <_write>
 8012da8:	1c43      	adds	r3, r0, #1
 8012daa:	d102      	bne.n	8012db2 <_write_r+0x1e>
 8012dac:	6823      	ldr	r3, [r4, #0]
 8012dae:	b103      	cbz	r3, 8012db2 <_write_r+0x1e>
 8012db0:	602b      	str	r3, [r5, #0]
 8012db2:	bd38      	pop	{r3, r4, r5, pc}
 8012db4:	20003978 	.word	0x20003978

08012db8 <_close_r>:
 8012db8:	b538      	push	{r3, r4, r5, lr}
 8012dba:	4c06      	ldr	r4, [pc, #24]	; (8012dd4 <_close_r+0x1c>)
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	4605      	mov	r5, r0
 8012dc0:	4608      	mov	r0, r1
 8012dc2:	6023      	str	r3, [r4, #0]
 8012dc4:	f7f0 fafe 	bl	80033c4 <_close>
 8012dc8:	1c43      	adds	r3, r0, #1
 8012dca:	d102      	bne.n	8012dd2 <_close_r+0x1a>
 8012dcc:	6823      	ldr	r3, [r4, #0]
 8012dce:	b103      	cbz	r3, 8012dd2 <_close_r+0x1a>
 8012dd0:	602b      	str	r3, [r5, #0]
 8012dd2:	bd38      	pop	{r3, r4, r5, pc}
 8012dd4:	20003978 	.word	0x20003978

08012dd8 <_fstat_r>:
 8012dd8:	b538      	push	{r3, r4, r5, lr}
 8012dda:	4c07      	ldr	r4, [pc, #28]	; (8012df8 <_fstat_r+0x20>)
 8012ddc:	2300      	movs	r3, #0
 8012dde:	4605      	mov	r5, r0
 8012de0:	4608      	mov	r0, r1
 8012de2:	4611      	mov	r1, r2
 8012de4:	6023      	str	r3, [r4, #0]
 8012de6:	f7f0 fb3d 	bl	8003464 <_fstat>
 8012dea:	1c43      	adds	r3, r0, #1
 8012dec:	d102      	bne.n	8012df4 <_fstat_r+0x1c>
 8012dee:	6823      	ldr	r3, [r4, #0]
 8012df0:	b103      	cbz	r3, 8012df4 <_fstat_r+0x1c>
 8012df2:	602b      	str	r3, [r5, #0]
 8012df4:	bd38      	pop	{r3, r4, r5, pc}
 8012df6:	bf00      	nop
 8012df8:	20003978 	.word	0x20003978

08012dfc <_isatty_r>:
 8012dfc:	b538      	push	{r3, r4, r5, lr}
 8012dfe:	4c06      	ldr	r4, [pc, #24]	; (8012e18 <_isatty_r+0x1c>)
 8012e00:	2300      	movs	r3, #0
 8012e02:	4605      	mov	r5, r0
 8012e04:	4608      	mov	r0, r1
 8012e06:	6023      	str	r3, [r4, #0]
 8012e08:	f7f0 fa9c 	bl	8003344 <_isatty>
 8012e0c:	1c43      	adds	r3, r0, #1
 8012e0e:	d102      	bne.n	8012e16 <_isatty_r+0x1a>
 8012e10:	6823      	ldr	r3, [r4, #0]
 8012e12:	b103      	cbz	r3, 8012e16 <_isatty_r+0x1a>
 8012e14:	602b      	str	r3, [r5, #0]
 8012e16:	bd38      	pop	{r3, r4, r5, pc}
 8012e18:	20003978 	.word	0x20003978

08012e1c <_lseek_r>:
 8012e1c:	b538      	push	{r3, r4, r5, lr}
 8012e1e:	4c07      	ldr	r4, [pc, #28]	; (8012e3c <_lseek_r+0x20>)
 8012e20:	4605      	mov	r5, r0
 8012e22:	4608      	mov	r0, r1
 8012e24:	4611      	mov	r1, r2
 8012e26:	2200      	movs	r2, #0
 8012e28:	6022      	str	r2, [r4, #0]
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	f7f0 fae1 	bl	80033f2 <_lseek>
 8012e30:	1c43      	adds	r3, r0, #1
 8012e32:	d102      	bne.n	8012e3a <_lseek_r+0x1e>
 8012e34:	6823      	ldr	r3, [r4, #0]
 8012e36:	b103      	cbz	r3, 8012e3a <_lseek_r+0x1e>
 8012e38:	602b      	str	r3, [r5, #0]
 8012e3a:	bd38      	pop	{r3, r4, r5, pc}
 8012e3c:	20003978 	.word	0x20003978

08012e40 <__ascii_mbtowc>:
 8012e40:	b082      	sub	sp, #8
 8012e42:	b901      	cbnz	r1, 8012e46 <__ascii_mbtowc+0x6>
 8012e44:	a901      	add	r1, sp, #4
 8012e46:	b142      	cbz	r2, 8012e5a <__ascii_mbtowc+0x1a>
 8012e48:	b14b      	cbz	r3, 8012e5e <__ascii_mbtowc+0x1e>
 8012e4a:	7813      	ldrb	r3, [r2, #0]
 8012e4c:	600b      	str	r3, [r1, #0]
 8012e4e:	7812      	ldrb	r2, [r2, #0]
 8012e50:	1c10      	adds	r0, r2, #0
 8012e52:	bf18      	it	ne
 8012e54:	2001      	movne	r0, #1
 8012e56:	b002      	add	sp, #8
 8012e58:	4770      	bx	lr
 8012e5a:	4610      	mov	r0, r2
 8012e5c:	e7fb      	b.n	8012e56 <__ascii_mbtowc+0x16>
 8012e5e:	f06f 0001 	mvn.w	r0, #1
 8012e62:	e7f8      	b.n	8012e56 <__ascii_mbtowc+0x16>

08012e64 <__malloc_lock>:
 8012e64:	4770      	bx	lr

08012e66 <__malloc_unlock>:
 8012e66:	4770      	bx	lr

08012e68 <_read_r>:
 8012e68:	b538      	push	{r3, r4, r5, lr}
 8012e6a:	4c07      	ldr	r4, [pc, #28]	; (8012e88 <_read_r+0x20>)
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	4608      	mov	r0, r1
 8012e70:	4611      	mov	r1, r2
 8012e72:	2200      	movs	r2, #0
 8012e74:	6022      	str	r2, [r4, #0]
 8012e76:	461a      	mov	r2, r3
 8012e78:	f7f0 facc 	bl	8003414 <_read>
 8012e7c:	1c43      	adds	r3, r0, #1
 8012e7e:	d102      	bne.n	8012e86 <_read_r+0x1e>
 8012e80:	6823      	ldr	r3, [r4, #0]
 8012e82:	b103      	cbz	r3, 8012e86 <_read_r+0x1e>
 8012e84:	602b      	str	r3, [r5, #0]
 8012e86:	bd38      	pop	{r3, r4, r5, pc}
 8012e88:	20003978 	.word	0x20003978

08012e8c <__ascii_wctomb>:
 8012e8c:	b149      	cbz	r1, 8012ea2 <__ascii_wctomb+0x16>
 8012e8e:	2aff      	cmp	r2, #255	; 0xff
 8012e90:	bf85      	ittet	hi
 8012e92:	238a      	movhi	r3, #138	; 0x8a
 8012e94:	6003      	strhi	r3, [r0, #0]
 8012e96:	700a      	strbls	r2, [r1, #0]
 8012e98:	f04f 30ff 	movhi.w	r0, #4294967295
 8012e9c:	bf98      	it	ls
 8012e9e:	2001      	movls	r0, #1
 8012ea0:	4770      	bx	lr
 8012ea2:	4608      	mov	r0, r1
 8012ea4:	4770      	bx	lr
	...

08012ea8 <cosf>:
 8012ea8:	ee10 3a10 	vmov	r3, s0
 8012eac:	b507      	push	{r0, r1, r2, lr}
 8012eae:	4a1c      	ldr	r2, [pc, #112]	; (8012f20 <cosf+0x78>)
 8012eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	dc04      	bgt.n	8012ec2 <cosf+0x1a>
 8012eb8:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8012f24 <cosf+0x7c>
 8012ebc:	f000 ff5a 	bl	8013d74 <__kernel_cosf>
 8012ec0:	e004      	b.n	8012ecc <cosf+0x24>
 8012ec2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ec6:	db04      	blt.n	8012ed2 <cosf+0x2a>
 8012ec8:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012ecc:	b003      	add	sp, #12
 8012ece:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ed2:	4668      	mov	r0, sp
 8012ed4:	f000 fe1e 	bl	8013b14 <__ieee754_rem_pio2f>
 8012ed8:	f000 0003 	and.w	r0, r0, #3
 8012edc:	2801      	cmp	r0, #1
 8012ede:	d007      	beq.n	8012ef0 <cosf+0x48>
 8012ee0:	2802      	cmp	r0, #2
 8012ee2:	d00e      	beq.n	8012f02 <cosf+0x5a>
 8012ee4:	b9a0      	cbnz	r0, 8012f10 <cosf+0x68>
 8012ee6:	eddd 0a01 	vldr	s1, [sp, #4]
 8012eea:	ed9d 0a00 	vldr	s0, [sp]
 8012eee:	e7e5      	b.n	8012ebc <cosf+0x14>
 8012ef0:	eddd 0a01 	vldr	s1, [sp, #4]
 8012ef4:	ed9d 0a00 	vldr	s0, [sp]
 8012ef8:	f001 fa1c 	bl	8014334 <__kernel_sinf>
 8012efc:	eeb1 0a40 	vneg.f32	s0, s0
 8012f00:	e7e4      	b.n	8012ecc <cosf+0x24>
 8012f02:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f06:	ed9d 0a00 	vldr	s0, [sp]
 8012f0a:	f000 ff33 	bl	8013d74 <__kernel_cosf>
 8012f0e:	e7f5      	b.n	8012efc <cosf+0x54>
 8012f10:	2001      	movs	r0, #1
 8012f12:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f16:	ed9d 0a00 	vldr	s0, [sp]
 8012f1a:	f001 fa0b 	bl	8014334 <__kernel_sinf>
 8012f1e:	e7d5      	b.n	8012ecc <cosf+0x24>
 8012f20:	3f490fd8 	.word	0x3f490fd8
 8012f24:	00000000 	.word	0x00000000

08012f28 <sinf>:
 8012f28:	ee10 3a10 	vmov	r3, s0
 8012f2c:	b507      	push	{r0, r1, r2, lr}
 8012f2e:	4a1d      	ldr	r2, [pc, #116]	; (8012fa4 <sinf+0x7c>)
 8012f30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f34:	4293      	cmp	r3, r2
 8012f36:	dc05      	bgt.n	8012f44 <sinf+0x1c>
 8012f38:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8012fa8 <sinf+0x80>
 8012f3c:	2000      	movs	r0, #0
 8012f3e:	f001 f9f9 	bl	8014334 <__kernel_sinf>
 8012f42:	e004      	b.n	8012f4e <sinf+0x26>
 8012f44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012f48:	db04      	blt.n	8012f54 <sinf+0x2c>
 8012f4a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012f4e:	b003      	add	sp, #12
 8012f50:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f54:	4668      	mov	r0, sp
 8012f56:	f000 fddd 	bl	8013b14 <__ieee754_rem_pio2f>
 8012f5a:	f000 0003 	and.w	r0, r0, #3
 8012f5e:	2801      	cmp	r0, #1
 8012f60:	d008      	beq.n	8012f74 <sinf+0x4c>
 8012f62:	2802      	cmp	r0, #2
 8012f64:	d00d      	beq.n	8012f82 <sinf+0x5a>
 8012f66:	b9b0      	cbnz	r0, 8012f96 <sinf+0x6e>
 8012f68:	2001      	movs	r0, #1
 8012f6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f6e:	ed9d 0a00 	vldr	s0, [sp]
 8012f72:	e7e4      	b.n	8012f3e <sinf+0x16>
 8012f74:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f78:	ed9d 0a00 	vldr	s0, [sp]
 8012f7c:	f000 fefa 	bl	8013d74 <__kernel_cosf>
 8012f80:	e7e5      	b.n	8012f4e <sinf+0x26>
 8012f82:	2001      	movs	r0, #1
 8012f84:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f88:	ed9d 0a00 	vldr	s0, [sp]
 8012f8c:	f001 f9d2 	bl	8014334 <__kernel_sinf>
 8012f90:	eeb1 0a40 	vneg.f32	s0, s0
 8012f94:	e7db      	b.n	8012f4e <sinf+0x26>
 8012f96:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f9a:	ed9d 0a00 	vldr	s0, [sp]
 8012f9e:	f000 fee9 	bl	8013d74 <__kernel_cosf>
 8012fa2:	e7f5      	b.n	8012f90 <sinf+0x68>
 8012fa4:	3f490fd8 	.word	0x3f490fd8
 8012fa8:	00000000 	.word	0x00000000

08012fac <asinf>:
 8012fac:	b510      	push	{r4, lr}
 8012fae:	ed2d 8b02 	vpush	{d8}
 8012fb2:	4c27      	ldr	r4, [pc, #156]	; (8013050 <asinf+0xa4>)
 8012fb4:	b08a      	sub	sp, #40	; 0x28
 8012fb6:	eeb0 8a40 	vmov.f32	s16, s0
 8012fba:	f000 fa03 	bl	80133c4 <__ieee754_asinf>
 8012fbe:	f994 3000 	ldrsb.w	r3, [r4]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	eef0 8a40 	vmov.f32	s17, s0
 8012fc8:	d03c      	beq.n	8013044 <asinf+0x98>
 8012fca:	eeb4 8a48 	vcmp.f32	s16, s16
 8012fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd2:	d637      	bvs.n	8013044 <asinf+0x98>
 8012fd4:	eeb0 0a48 	vmov.f32	s0, s16
 8012fd8:	f001 f9fe 	bl	80143d8 <fabsf>
 8012fdc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012fe0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe8:	dd2c      	ble.n	8013044 <asinf+0x98>
 8012fea:	2301      	movs	r3, #1
 8012fec:	9300      	str	r3, [sp, #0]
 8012fee:	4b19      	ldr	r3, [pc, #100]	; (8013054 <asinf+0xa8>)
 8012ff0:	9301      	str	r3, [sp, #4]
 8012ff2:	ee18 0a10 	vmov	r0, s16
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9308      	str	r3, [sp, #32]
 8012ffa:	f7ed faa5 	bl	8000548 <__aeabi_f2d>
 8012ffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013006:	4814      	ldr	r0, [pc, #80]	; (8013058 <asinf+0xac>)
 8013008:	f001 f9de 	bl	80143c8 <nan>
 801300c:	f994 3000 	ldrsb.w	r3, [r4]
 8013010:	2b02      	cmp	r3, #2
 8013012:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013016:	d104      	bne.n	8013022 <asinf+0x76>
 8013018:	f7fd fac0 	bl	801059c <__errno>
 801301c:	2321      	movs	r3, #33	; 0x21
 801301e:	6003      	str	r3, [r0, #0]
 8013020:	e004      	b.n	801302c <asinf+0x80>
 8013022:	4668      	mov	r0, sp
 8013024:	f001 f9ce 	bl	80143c4 <matherr>
 8013028:	2800      	cmp	r0, #0
 801302a:	d0f5      	beq.n	8013018 <asinf+0x6c>
 801302c:	9b08      	ldr	r3, [sp, #32]
 801302e:	b11b      	cbz	r3, 8013038 <asinf+0x8c>
 8013030:	f7fd fab4 	bl	801059c <__errno>
 8013034:	9b08      	ldr	r3, [sp, #32]
 8013036:	6003      	str	r3, [r0, #0]
 8013038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801303c:	f7ed fdb4 	bl	8000ba8 <__aeabi_d2f>
 8013040:	ee08 0a90 	vmov	s17, r0
 8013044:	eeb0 0a68 	vmov.f32	s0, s17
 8013048:	b00a      	add	sp, #40	; 0x28
 801304a:	ecbd 8b02 	vpop	{d8}
 801304e:	bd10      	pop	{r4, pc}
 8013050:	20001e84 	.word	0x20001e84
 8013054:	08014938 	.word	0x08014938
 8013058:	08014821 	.word	0x08014821

0801305c <powf>:
 801305c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8013060:	ed2d 8b04 	vpush	{d8-d9}
 8013064:	4ca7      	ldr	r4, [pc, #668]	; (8013304 <powf+0x2a8>)
 8013066:	b08a      	sub	sp, #40	; 0x28
 8013068:	eef0 8a40 	vmov.f32	s17, s0
 801306c:	eeb0 8a60 	vmov.f32	s16, s1
 8013070:	f000 fa90 	bl	8013594 <__ieee754_powf>
 8013074:	f994 5000 	ldrsb.w	r5, [r4]
 8013078:	1c6b      	adds	r3, r5, #1
 801307a:	eeb0 9a40 	vmov.f32	s18, s0
 801307e:	4626      	mov	r6, r4
 8013080:	d05f      	beq.n	8013142 <powf+0xe6>
 8013082:	eeb4 8a48 	vcmp.f32	s16, s16
 8013086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308a:	d65a      	bvs.n	8013142 <powf+0xe6>
 801308c:	eef4 8a68 	vcmp.f32	s17, s17
 8013090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013094:	d721      	bvc.n	80130da <powf+0x7e>
 8013096:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801309a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801309e:	d150      	bne.n	8013142 <powf+0xe6>
 80130a0:	2301      	movs	r3, #1
 80130a2:	9300      	str	r3, [sp, #0]
 80130a4:	4b98      	ldr	r3, [pc, #608]	; (8013308 <powf+0x2ac>)
 80130a6:	9301      	str	r3, [sp, #4]
 80130a8:	ee18 0a90 	vmov	r0, s17
 80130ac:	2300      	movs	r3, #0
 80130ae:	9308      	str	r3, [sp, #32]
 80130b0:	f7ed fa4a 	bl	8000548 <__aeabi_f2d>
 80130b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130b8:	ee18 0a10 	vmov	r0, s16
 80130bc:	f7ed fa44 	bl	8000548 <__aeabi_f2d>
 80130c0:	4b92      	ldr	r3, [pc, #584]	; (801330c <powf+0x2b0>)
 80130c2:	2200      	movs	r2, #0
 80130c4:	2d02      	cmp	r5, #2
 80130c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80130ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130ce:	d032      	beq.n	8013136 <powf+0xda>
 80130d0:	4668      	mov	r0, sp
 80130d2:	f001 f977 	bl	80143c4 <matherr>
 80130d6:	bb40      	cbnz	r0, 801312a <powf+0xce>
 80130d8:	e065      	b.n	80131a6 <powf+0x14a>
 80130da:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8013310 <powf+0x2b4>
 80130de:	eef4 8a69 	vcmp.f32	s17, s19
 80130e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e6:	d163      	bne.n	80131b0 <powf+0x154>
 80130e8:	eeb4 8a69 	vcmp.f32	s16, s19
 80130ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130f0:	d12e      	bne.n	8013150 <powf+0xf4>
 80130f2:	2301      	movs	r3, #1
 80130f4:	9300      	str	r3, [sp, #0]
 80130f6:	4b84      	ldr	r3, [pc, #528]	; (8013308 <powf+0x2ac>)
 80130f8:	9301      	str	r3, [sp, #4]
 80130fa:	ee18 0a90 	vmov	r0, s17
 80130fe:	2300      	movs	r3, #0
 8013100:	9308      	str	r3, [sp, #32]
 8013102:	f7ed fa21 	bl	8000548 <__aeabi_f2d>
 8013106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801310a:	ee18 0a10 	vmov	r0, s16
 801310e:	f7ed fa1b 	bl	8000548 <__aeabi_f2d>
 8013112:	2200      	movs	r2, #0
 8013114:	2300      	movs	r3, #0
 8013116:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801311a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801311e:	2d00      	cmp	r5, #0
 8013120:	d0d6      	beq.n	80130d0 <powf+0x74>
 8013122:	4b7a      	ldr	r3, [pc, #488]	; (801330c <powf+0x2b0>)
 8013124:	2200      	movs	r2, #0
 8013126:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801312a:	9b08      	ldr	r3, [sp, #32]
 801312c:	b11b      	cbz	r3, 8013136 <powf+0xda>
 801312e:	f7fd fa35 	bl	801059c <__errno>
 8013132:	9b08      	ldr	r3, [sp, #32]
 8013134:	6003      	str	r3, [r0, #0]
 8013136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801313a:	f7ed fd35 	bl	8000ba8 <__aeabi_d2f>
 801313e:	ee09 0a10 	vmov	s18, r0
 8013142:	eeb0 0a49 	vmov.f32	s0, s18
 8013146:	b00a      	add	sp, #40	; 0x28
 8013148:	ecbd 8b04 	vpop	{d8-d9}
 801314c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8013150:	eeb0 0a48 	vmov.f32	s0, s16
 8013154:	f001 f947 	bl	80143e6 <finitef>
 8013158:	2800      	cmp	r0, #0
 801315a:	d0f2      	beq.n	8013142 <powf+0xe6>
 801315c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013164:	d5ed      	bpl.n	8013142 <powf+0xe6>
 8013166:	2301      	movs	r3, #1
 8013168:	9300      	str	r3, [sp, #0]
 801316a:	4b67      	ldr	r3, [pc, #412]	; (8013308 <powf+0x2ac>)
 801316c:	9301      	str	r3, [sp, #4]
 801316e:	ee18 0a90 	vmov	r0, s17
 8013172:	2300      	movs	r3, #0
 8013174:	9308      	str	r3, [sp, #32]
 8013176:	f7ed f9e7 	bl	8000548 <__aeabi_f2d>
 801317a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801317e:	ee18 0a10 	vmov	r0, s16
 8013182:	f7ed f9e1 	bl	8000548 <__aeabi_f2d>
 8013186:	f994 3000 	ldrsb.w	r3, [r4]
 801318a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801318e:	b923      	cbnz	r3, 801319a <powf+0x13e>
 8013190:	2200      	movs	r2, #0
 8013192:	2300      	movs	r3, #0
 8013194:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013198:	e79a      	b.n	80130d0 <powf+0x74>
 801319a:	495e      	ldr	r1, [pc, #376]	; (8013314 <powf+0x2b8>)
 801319c:	2000      	movs	r0, #0
 801319e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80131a2:	2b02      	cmp	r3, #2
 80131a4:	d194      	bne.n	80130d0 <powf+0x74>
 80131a6:	f7fd f9f9 	bl	801059c <__errno>
 80131aa:	2321      	movs	r3, #33	; 0x21
 80131ac:	6003      	str	r3, [r0, #0]
 80131ae:	e7bc      	b.n	801312a <powf+0xce>
 80131b0:	f001 f919 	bl	80143e6 <finitef>
 80131b4:	4605      	mov	r5, r0
 80131b6:	2800      	cmp	r0, #0
 80131b8:	d173      	bne.n	80132a2 <powf+0x246>
 80131ba:	eeb0 0a68 	vmov.f32	s0, s17
 80131be:	f001 f912 	bl	80143e6 <finitef>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	d06d      	beq.n	80132a2 <powf+0x246>
 80131c6:	eeb0 0a48 	vmov.f32	s0, s16
 80131ca:	f001 f90c 	bl	80143e6 <finitef>
 80131ce:	2800      	cmp	r0, #0
 80131d0:	d067      	beq.n	80132a2 <powf+0x246>
 80131d2:	ee18 0a90 	vmov	r0, s17
 80131d6:	f7ed f9b7 	bl	8000548 <__aeabi_f2d>
 80131da:	4680      	mov	r8, r0
 80131dc:	ee18 0a10 	vmov	r0, s16
 80131e0:	4689      	mov	r9, r1
 80131e2:	f7ed f9b1 	bl	8000548 <__aeabi_f2d>
 80131e6:	eeb4 9a49 	vcmp.f32	s18, s18
 80131ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ee:	f994 4000 	ldrsb.w	r4, [r4]
 80131f2:	4b45      	ldr	r3, [pc, #276]	; (8013308 <powf+0x2ac>)
 80131f4:	d713      	bvc.n	801321e <powf+0x1c2>
 80131f6:	2201      	movs	r2, #1
 80131f8:	e9cd 2300 	strd	r2, r3, [sp]
 80131fc:	9508      	str	r5, [sp, #32]
 80131fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013202:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013206:	2c00      	cmp	r4, #0
 8013208:	d0c2      	beq.n	8013190 <powf+0x134>
 801320a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801320e:	ee17 0a90 	vmov	r0, s15
 8013212:	f7ed f999 	bl	8000548 <__aeabi_f2d>
 8013216:	2c02      	cmp	r4, #2
 8013218:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801321c:	e7c2      	b.n	80131a4 <powf+0x148>
 801321e:	2203      	movs	r2, #3
 8013220:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013224:	e9cd 2300 	strd	r2, r3, [sp]
 8013228:	9508      	str	r5, [sp, #32]
 801322a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801322e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013232:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013236:	b9fc      	cbnz	r4, 8013278 <powf+0x21c>
 8013238:	4b37      	ldr	r3, [pc, #220]	; (8013318 <powf+0x2bc>)
 801323a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801323e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013246:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801324a:	d553      	bpl.n	80132f4 <powf+0x298>
 801324c:	eeb0 0a48 	vmov.f32	s0, s16
 8013250:	f001 f91c 	bl	801448c <rintf>
 8013254:	eeb4 0a48 	vcmp.f32	s0, s16
 8013258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325c:	d004      	beq.n	8013268 <powf+0x20c>
 801325e:	4b2f      	ldr	r3, [pc, #188]	; (801331c <powf+0x2c0>)
 8013260:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013264:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013268:	f996 3000 	ldrsb.w	r3, [r6]
 801326c:	2b02      	cmp	r3, #2
 801326e:	d141      	bne.n	80132f4 <powf+0x298>
 8013270:	f7fd f994 	bl	801059c <__errno>
 8013274:	2322      	movs	r3, #34	; 0x22
 8013276:	e799      	b.n	80131ac <powf+0x150>
 8013278:	4b29      	ldr	r3, [pc, #164]	; (8013320 <powf+0x2c4>)
 801327a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801327e:	2200      	movs	r2, #0
 8013280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013284:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013288:	d5ee      	bpl.n	8013268 <powf+0x20c>
 801328a:	eeb0 0a48 	vmov.f32	s0, s16
 801328e:	f001 f8fd 	bl	801448c <rintf>
 8013292:	eeb4 0a48 	vcmp.f32	s0, s16
 8013296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801329a:	d0e5      	beq.n	8013268 <powf+0x20c>
 801329c:	2200      	movs	r2, #0
 801329e:	4b1d      	ldr	r3, [pc, #116]	; (8013314 <powf+0x2b8>)
 80132a0:	e7e0      	b.n	8013264 <powf+0x208>
 80132a2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80132a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132aa:	f47f af4a 	bne.w	8013142 <powf+0xe6>
 80132ae:	eeb0 0a68 	vmov.f32	s0, s17
 80132b2:	f001 f898 	bl	80143e6 <finitef>
 80132b6:	2800      	cmp	r0, #0
 80132b8:	f43f af43 	beq.w	8013142 <powf+0xe6>
 80132bc:	eeb0 0a48 	vmov.f32	s0, s16
 80132c0:	f001 f891 	bl	80143e6 <finitef>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	f43f af3c 	beq.w	8013142 <powf+0xe6>
 80132ca:	2304      	movs	r3, #4
 80132cc:	9300      	str	r3, [sp, #0]
 80132ce:	4b0e      	ldr	r3, [pc, #56]	; (8013308 <powf+0x2ac>)
 80132d0:	9301      	str	r3, [sp, #4]
 80132d2:	ee18 0a90 	vmov	r0, s17
 80132d6:	2300      	movs	r3, #0
 80132d8:	9308      	str	r3, [sp, #32]
 80132da:	f7ed f935 	bl	8000548 <__aeabi_f2d>
 80132de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132e2:	ee18 0a10 	vmov	r0, s16
 80132e6:	f7ed f92f 	bl	8000548 <__aeabi_f2d>
 80132ea:	2200      	movs	r2, #0
 80132ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80132f0:	2300      	movs	r3, #0
 80132f2:	e7b7      	b.n	8013264 <powf+0x208>
 80132f4:	4668      	mov	r0, sp
 80132f6:	f001 f865 	bl	80143c4 <matherr>
 80132fa:	2800      	cmp	r0, #0
 80132fc:	f47f af15 	bne.w	801312a <powf+0xce>
 8013300:	e7b6      	b.n	8013270 <powf+0x214>
 8013302:	bf00      	nop
 8013304:	20001e84 	.word	0x20001e84
 8013308:	0801493e 	.word	0x0801493e
 801330c:	3ff00000 	.word	0x3ff00000
 8013310:	00000000 	.word	0x00000000
 8013314:	fff00000 	.word	0xfff00000
 8013318:	47efffff 	.word	0x47efffff
 801331c:	c7efffff 	.word	0xc7efffff
 8013320:	7ff00000 	.word	0x7ff00000

08013324 <sqrtf>:
 8013324:	b510      	push	{r4, lr}
 8013326:	ed2d 8b02 	vpush	{d8}
 801332a:	b08a      	sub	sp, #40	; 0x28
 801332c:	eeb0 8a40 	vmov.f32	s16, s0
 8013330:	f000 fd1c 	bl	8013d6c <__ieee754_sqrtf>
 8013334:	4b21      	ldr	r3, [pc, #132]	; (80133bc <sqrtf+0x98>)
 8013336:	f993 4000 	ldrsb.w	r4, [r3]
 801333a:	1c63      	adds	r3, r4, #1
 801333c:	d02c      	beq.n	8013398 <sqrtf+0x74>
 801333e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013346:	d627      	bvs.n	8013398 <sqrtf+0x74>
 8013348:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801334c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013350:	d522      	bpl.n	8013398 <sqrtf+0x74>
 8013352:	2301      	movs	r3, #1
 8013354:	9300      	str	r3, [sp, #0]
 8013356:	4b1a      	ldr	r3, [pc, #104]	; (80133c0 <sqrtf+0x9c>)
 8013358:	9301      	str	r3, [sp, #4]
 801335a:	ee18 0a10 	vmov	r0, s16
 801335e:	2300      	movs	r3, #0
 8013360:	9308      	str	r3, [sp, #32]
 8013362:	f7ed f8f1 	bl	8000548 <__aeabi_f2d>
 8013366:	2200      	movs	r2, #0
 8013368:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801336c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013370:	2300      	movs	r3, #0
 8013372:	b9ac      	cbnz	r4, 80133a0 <sqrtf+0x7c>
 8013374:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013378:	4668      	mov	r0, sp
 801337a:	f001 f823 	bl	80143c4 <matherr>
 801337e:	b1b8      	cbz	r0, 80133b0 <sqrtf+0x8c>
 8013380:	9b08      	ldr	r3, [sp, #32]
 8013382:	b11b      	cbz	r3, 801338c <sqrtf+0x68>
 8013384:	f7fd f90a 	bl	801059c <__errno>
 8013388:	9b08      	ldr	r3, [sp, #32]
 801338a:	6003      	str	r3, [r0, #0]
 801338c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013390:	f7ed fc0a 	bl	8000ba8 <__aeabi_d2f>
 8013394:	ee00 0a10 	vmov	s0, r0
 8013398:	b00a      	add	sp, #40	; 0x28
 801339a:	ecbd 8b02 	vpop	{d8}
 801339e:	bd10      	pop	{r4, pc}
 80133a0:	4610      	mov	r0, r2
 80133a2:	4619      	mov	r1, r3
 80133a4:	f7ed fa52 	bl	800084c <__aeabi_ddiv>
 80133a8:	2c02      	cmp	r4, #2
 80133aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80133ae:	d1e3      	bne.n	8013378 <sqrtf+0x54>
 80133b0:	f7fd f8f4 	bl	801059c <__errno>
 80133b4:	2321      	movs	r3, #33	; 0x21
 80133b6:	6003      	str	r3, [r0, #0]
 80133b8:	e7e2      	b.n	8013380 <sqrtf+0x5c>
 80133ba:	bf00      	nop
 80133bc:	20001e84 	.word	0x20001e84
 80133c0:	08014943 	.word	0x08014943

080133c4 <__ieee754_asinf>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	ee10 5a10 	vmov	r5, s0
 80133ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80133ce:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80133d2:	ed2d 8b04 	vpush	{d8-d9}
 80133d6:	d10c      	bne.n	80133f2 <__ieee754_asinf+0x2e>
 80133d8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8013554 <__ieee754_asinf+0x190>
 80133dc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8013558 <__ieee754_asinf+0x194>
 80133e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80133e4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80133e8:	eeb0 0a67 	vmov.f32	s0, s15
 80133ec:	ecbd 8b04 	vpop	{d8-d9}
 80133f0:	bd38      	pop	{r3, r4, r5, pc}
 80133f2:	dd04      	ble.n	80133fe <__ieee754_asinf+0x3a>
 80133f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80133f8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80133fc:	e7f6      	b.n	80133ec <__ieee754_asinf+0x28>
 80133fe:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013402:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013406:	da0b      	bge.n	8013420 <__ieee754_asinf+0x5c>
 8013408:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801340c:	da52      	bge.n	80134b4 <__ieee754_asinf+0xf0>
 801340e:	eddf 7a53 	vldr	s15, [pc, #332]	; 801355c <__ieee754_asinf+0x198>
 8013412:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013416:	eef4 7ae8 	vcmpe.f32	s15, s17
 801341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341e:	dce5      	bgt.n	80133ec <__ieee754_asinf+0x28>
 8013420:	f000 ffda 	bl	80143d8 <fabsf>
 8013424:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013428:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801342c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013430:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8013560 <__ieee754_asinf+0x19c>
 8013434:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013564 <__ieee754_asinf+0x1a0>
 8013438:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8013568 <__ieee754_asinf+0x1a4>
 801343c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013440:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801356c <__ieee754_asinf+0x1a8>
 8013444:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013448:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013570 <__ieee754_asinf+0x1ac>
 801344c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013450:	eddf 7a48 	vldr	s15, [pc, #288]	; 8013574 <__ieee754_asinf+0x1b0>
 8013454:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013458:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013578 <__ieee754_asinf+0x1b4>
 801345c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013460:	eddf 7a46 	vldr	s15, [pc, #280]	; 801357c <__ieee754_asinf+0x1b8>
 8013464:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013468:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8013580 <__ieee754_asinf+0x1bc>
 801346c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013470:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013584 <__ieee754_asinf+0x1c0>
 8013474:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013478:	eeb0 0a48 	vmov.f32	s0, s16
 801347c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013480:	f000 fc74 	bl	8013d6c <__ieee754_sqrtf>
 8013484:	4b40      	ldr	r3, [pc, #256]	; (8013588 <__ieee754_asinf+0x1c4>)
 8013486:	ee29 9a08 	vmul.f32	s18, s18, s16
 801348a:	429c      	cmp	r4, r3
 801348c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013490:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013494:	dd3d      	ble.n	8013512 <__ieee754_asinf+0x14e>
 8013496:	eea0 0a06 	vfma.f32	s0, s0, s12
 801349a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 801358c <__ieee754_asinf+0x1c8>
 801349e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80134a2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8013558 <__ieee754_asinf+0x194>
 80134a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80134aa:	2d00      	cmp	r5, #0
 80134ac:	bfd8      	it	le
 80134ae:	eeb1 0a40 	vnegle.f32	s0, s0
 80134b2:	e79b      	b.n	80133ec <__ieee754_asinf+0x28>
 80134b4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80134b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013560 <__ieee754_asinf+0x19c>
 80134bc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013564 <__ieee754_asinf+0x1a0>
 80134c0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8013578 <__ieee754_asinf+0x1b4>
 80134c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80134c8:	eddf 6a28 	vldr	s13, [pc, #160]	; 801356c <__ieee754_asinf+0x1a8>
 80134cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80134d0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8013570 <__ieee754_asinf+0x1ac>
 80134d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80134d8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013574 <__ieee754_asinf+0x1b0>
 80134dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80134e0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8013568 <__ieee754_asinf+0x1a4>
 80134e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80134e8:	eddf 6a24 	vldr	s13, [pc, #144]	; 801357c <__ieee754_asinf+0x1b8>
 80134ec:	eee7 6a86 	vfma.f32	s13, s15, s12
 80134f0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8013580 <__ieee754_asinf+0x1bc>
 80134f4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80134f8:	eddf 6a22 	vldr	s13, [pc, #136]	; 8013584 <__ieee754_asinf+0x1c0>
 80134fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013500:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013504:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013508:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801350c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013510:	e76c      	b.n	80133ec <__ieee754_asinf+0x28>
 8013512:	ee10 3a10 	vmov	r3, s0
 8013516:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801351a:	f023 030f 	bic.w	r3, r3, #15
 801351e:	ee07 3a90 	vmov	s15, r3
 8013522:	eef1 6a67 	vneg.f32	s13, s15
 8013526:	eea6 8aa7 	vfma.f32	s16, s13, s15
 801352a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801352e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013532:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013554 <__ieee754_asinf+0x190>
 8013536:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801353a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8013590 <__ieee754_asinf+0x1cc>
 801353e:	eee5 7a47 	vfms.f32	s15, s10, s14
 8013542:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8013546:	eeb0 6a40 	vmov.f32	s12, s0
 801354a:	eea6 6a87 	vfma.f32	s12, s13, s14
 801354e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013552:	e7a8      	b.n	80134a6 <__ieee754_asinf+0xe2>
 8013554:	b33bbd2e 	.word	0xb33bbd2e
 8013558:	3fc90fdb 	.word	0x3fc90fdb
 801355c:	7149f2ca 	.word	0x7149f2ca
 8013560:	3811ef08 	.word	0x3811ef08
 8013564:	3a4f7f04 	.word	0x3a4f7f04
 8013568:	3e2aaaab 	.word	0x3e2aaaab
 801356c:	bd241146 	.word	0xbd241146
 8013570:	3e4e0aa8 	.word	0x3e4e0aa8
 8013574:	bea6b090 	.word	0xbea6b090
 8013578:	3d9dc62e 	.word	0x3d9dc62e
 801357c:	bf303361 	.word	0xbf303361
 8013580:	4001572d 	.word	0x4001572d
 8013584:	c019d139 	.word	0xc019d139
 8013588:	3f799999 	.word	0x3f799999
 801358c:	333bbd2e 	.word	0x333bbd2e
 8013590:	3f490fdb 	.word	0x3f490fdb

08013594 <__ieee754_powf>:
 8013594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013598:	ee10 5a90 	vmov	r5, s1
 801359c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80135a0:	ed2d 8b02 	vpush	{d8}
 80135a4:	eeb0 8a40 	vmov.f32	s16, s0
 80135a8:	eef0 8a60 	vmov.f32	s17, s1
 80135ac:	f000 8293 	beq.w	8013ad6 <__ieee754_powf+0x542>
 80135b0:	ee10 8a10 	vmov	r8, s0
 80135b4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80135b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80135bc:	dc06      	bgt.n	80135cc <__ieee754_powf+0x38>
 80135be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80135c2:	dd0a      	ble.n	80135da <__ieee754_powf+0x46>
 80135c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80135c8:	f000 8285 	beq.w	8013ad6 <__ieee754_powf+0x542>
 80135cc:	ecbd 8b02 	vpop	{d8}
 80135d0:	48d9      	ldr	r0, [pc, #868]	; (8013938 <__ieee754_powf+0x3a4>)
 80135d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135d6:	f000 bf53 	b.w	8014480 <nanf>
 80135da:	f1b8 0f00 	cmp.w	r8, #0
 80135de:	da1d      	bge.n	801361c <__ieee754_powf+0x88>
 80135e0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80135e4:	da2c      	bge.n	8013640 <__ieee754_powf+0xac>
 80135e6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80135ea:	db30      	blt.n	801364e <__ieee754_powf+0xba>
 80135ec:	15fb      	asrs	r3, r7, #23
 80135ee:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80135f2:	fa47 f603 	asr.w	r6, r7, r3
 80135f6:	fa06 f303 	lsl.w	r3, r6, r3
 80135fa:	42bb      	cmp	r3, r7
 80135fc:	d127      	bne.n	801364e <__ieee754_powf+0xba>
 80135fe:	f006 0601 	and.w	r6, r6, #1
 8013602:	f1c6 0602 	rsb	r6, r6, #2
 8013606:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801360a:	d122      	bne.n	8013652 <__ieee754_powf+0xbe>
 801360c:	2d00      	cmp	r5, #0
 801360e:	f280 8268 	bge.w	8013ae2 <__ieee754_powf+0x54e>
 8013612:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013616:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801361a:	e00d      	b.n	8013638 <__ieee754_powf+0xa4>
 801361c:	2600      	movs	r6, #0
 801361e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013622:	d1f0      	bne.n	8013606 <__ieee754_powf+0x72>
 8013624:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013628:	f000 8255 	beq.w	8013ad6 <__ieee754_powf+0x542>
 801362c:	dd0a      	ble.n	8013644 <__ieee754_powf+0xb0>
 801362e:	2d00      	cmp	r5, #0
 8013630:	f280 8254 	bge.w	8013adc <__ieee754_powf+0x548>
 8013634:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801393c <__ieee754_powf+0x3a8>
 8013638:	ecbd 8b02 	vpop	{d8}
 801363c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013640:	2602      	movs	r6, #2
 8013642:	e7ec      	b.n	801361e <__ieee754_powf+0x8a>
 8013644:	2d00      	cmp	r5, #0
 8013646:	daf5      	bge.n	8013634 <__ieee754_powf+0xa0>
 8013648:	eeb1 0a68 	vneg.f32	s0, s17
 801364c:	e7f4      	b.n	8013638 <__ieee754_powf+0xa4>
 801364e:	2600      	movs	r6, #0
 8013650:	e7d9      	b.n	8013606 <__ieee754_powf+0x72>
 8013652:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8013656:	d102      	bne.n	801365e <__ieee754_powf+0xca>
 8013658:	ee28 0a08 	vmul.f32	s0, s16, s16
 801365c:	e7ec      	b.n	8013638 <__ieee754_powf+0xa4>
 801365e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8013662:	eeb0 0a48 	vmov.f32	s0, s16
 8013666:	d108      	bne.n	801367a <__ieee754_powf+0xe6>
 8013668:	f1b8 0f00 	cmp.w	r8, #0
 801366c:	db05      	blt.n	801367a <__ieee754_powf+0xe6>
 801366e:	ecbd 8b02 	vpop	{d8}
 8013672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013676:	f000 bb79 	b.w	8013d6c <__ieee754_sqrtf>
 801367a:	f000 fead 	bl	80143d8 <fabsf>
 801367e:	b124      	cbz	r4, 801368a <__ieee754_powf+0xf6>
 8013680:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8013684:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8013688:	d117      	bne.n	80136ba <__ieee754_powf+0x126>
 801368a:	2d00      	cmp	r5, #0
 801368c:	bfbc      	itt	lt
 801368e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013692:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013696:	f1b8 0f00 	cmp.w	r8, #0
 801369a:	dacd      	bge.n	8013638 <__ieee754_powf+0xa4>
 801369c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80136a0:	ea54 0306 	orrs.w	r3, r4, r6
 80136a4:	d104      	bne.n	80136b0 <__ieee754_powf+0x11c>
 80136a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80136aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80136ae:	e7c3      	b.n	8013638 <__ieee754_powf+0xa4>
 80136b0:	2e01      	cmp	r6, #1
 80136b2:	d1c1      	bne.n	8013638 <__ieee754_powf+0xa4>
 80136b4:	eeb1 0a40 	vneg.f32	s0, s0
 80136b8:	e7be      	b.n	8013638 <__ieee754_powf+0xa4>
 80136ba:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80136be:	3801      	subs	r0, #1
 80136c0:	ea56 0300 	orrs.w	r3, r6, r0
 80136c4:	d104      	bne.n	80136d0 <__ieee754_powf+0x13c>
 80136c6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80136ca:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80136ce:	e7b3      	b.n	8013638 <__ieee754_powf+0xa4>
 80136d0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80136d4:	dd6d      	ble.n	80137b2 <__ieee754_powf+0x21e>
 80136d6:	4b9a      	ldr	r3, [pc, #616]	; (8013940 <__ieee754_powf+0x3ac>)
 80136d8:	429c      	cmp	r4, r3
 80136da:	dc06      	bgt.n	80136ea <__ieee754_powf+0x156>
 80136dc:	2d00      	cmp	r5, #0
 80136de:	daa9      	bge.n	8013634 <__ieee754_powf+0xa0>
 80136e0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8013944 <__ieee754_powf+0x3b0>
 80136e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80136e8:	e7a6      	b.n	8013638 <__ieee754_powf+0xa4>
 80136ea:	4b97      	ldr	r3, [pc, #604]	; (8013948 <__ieee754_powf+0x3b4>)
 80136ec:	429c      	cmp	r4, r3
 80136ee:	dd02      	ble.n	80136f6 <__ieee754_powf+0x162>
 80136f0:	2d00      	cmp	r5, #0
 80136f2:	dcf5      	bgt.n	80136e0 <__ieee754_powf+0x14c>
 80136f4:	e79e      	b.n	8013634 <__ieee754_powf+0xa0>
 80136f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80136fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80136fe:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801394c <__ieee754_powf+0x3b8>
 8013702:	eef1 6a40 	vneg.f32	s13, s0
 8013706:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801370a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801370e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013712:	eee7 7a40 	vfms.f32	s15, s14, s0
 8013716:	ee60 0a00 	vmul.f32	s1, s0, s0
 801371a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8013950 <__ieee754_powf+0x3bc>
 801371e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013722:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8013954 <__ieee754_powf+0x3c0>
 8013726:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801372a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801372e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8013958 <__ieee754_powf+0x3c4>
 8013732:	eeb0 6a67 	vmov.f32	s12, s15
 8013736:	eea0 6a07 	vfma.f32	s12, s0, s14
 801373a:	ee16 3a10 	vmov	r3, s12
 801373e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013742:	f023 030f 	bic.w	r3, r3, #15
 8013746:	ee00 3a90 	vmov	s1, r3
 801374a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801374e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013752:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8013756:	f025 050f 	bic.w	r5, r5, #15
 801375a:	ee07 5a10 	vmov	s14, r5
 801375e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013762:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013766:	ee07 3a90 	vmov	s15, r3
 801376a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801376e:	3e01      	subs	r6, #1
 8013770:	ea56 0200 	orrs.w	r2, r6, r0
 8013774:	ee07 5a10 	vmov	s14, r5
 8013778:	ee67 7a87 	vmul.f32	s15, s15, s14
 801377c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013780:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013784:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013788:	ee17 4a10 	vmov	r4, s14
 801378c:	bf08      	it	eq
 801378e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8013792:	2c00      	cmp	r4, #0
 8013794:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013798:	f340 8184 	ble.w	8013aa4 <__ieee754_powf+0x510>
 801379c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80137a0:	f340 80fc 	ble.w	801399c <__ieee754_powf+0x408>
 80137a4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8013944 <__ieee754_powf+0x3b0>
 80137a8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80137ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80137b0:	e742      	b.n	8013638 <__ieee754_powf+0xa4>
 80137b2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80137b6:	bfbf      	itttt	lt
 80137b8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801395c <__ieee754_powf+0x3c8>
 80137bc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80137c0:	f06f 0217 	mvnlt.w	r2, #23
 80137c4:	ee17 4a90 	vmovlt	r4, s15
 80137c8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80137cc:	bfa8      	it	ge
 80137ce:	2200      	movge	r2, #0
 80137d0:	3b7f      	subs	r3, #127	; 0x7f
 80137d2:	4413      	add	r3, r2
 80137d4:	4a62      	ldr	r2, [pc, #392]	; (8013960 <__ieee754_powf+0x3cc>)
 80137d6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80137da:	4294      	cmp	r4, r2
 80137dc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80137e0:	dd06      	ble.n	80137f0 <__ieee754_powf+0x25c>
 80137e2:	4a60      	ldr	r2, [pc, #384]	; (8013964 <__ieee754_powf+0x3d0>)
 80137e4:	4294      	cmp	r4, r2
 80137e6:	f340 80a5 	ble.w	8013934 <__ieee754_powf+0x3a0>
 80137ea:	3301      	adds	r3, #1
 80137ec:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80137f0:	2400      	movs	r4, #0
 80137f2:	4a5d      	ldr	r2, [pc, #372]	; (8013968 <__ieee754_powf+0x3d4>)
 80137f4:	00a7      	lsls	r7, r4, #2
 80137f6:	443a      	add	r2, r7
 80137f8:	ee07 1a90 	vmov	s15, r1
 80137fc:	ed92 7a00 	vldr	s14, [r2]
 8013800:	4a5a      	ldr	r2, [pc, #360]	; (801396c <__ieee754_powf+0x3d8>)
 8013802:	ee37 6a27 	vadd.f32	s12, s14, s15
 8013806:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801380a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801380e:	1049      	asrs	r1, r1, #1
 8013810:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013814:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013818:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801381c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8013820:	ee06 1a10 	vmov	s12, r1
 8013824:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8013828:	ee14 ca90 	vmov	ip, s9
 801382c:	ea02 0c0c 	and.w	ip, r2, ip
 8013830:	ee05 ca10 	vmov	s10, ip
 8013834:	eeb1 4a45 	vneg.f32	s8, s10
 8013838:	eee4 5a06 	vfma.f32	s11, s8, s12
 801383c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013840:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013970 <__ieee754_powf+0x3dc>
 8013844:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8013848:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801384c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8013850:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8013854:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8013858:	eddf 5a46 	vldr	s11, [pc, #280]	; 8013974 <__ieee754_powf+0x3e0>
 801385c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013860:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013978 <__ieee754_powf+0x3e4>
 8013864:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013868:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801394c <__ieee754_powf+0x3b8>
 801386c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013870:	eddf 5a42 	vldr	s11, [pc, #264]	; 801397c <__ieee754_powf+0x3e8>
 8013874:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013878:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8013980 <__ieee754_powf+0x3ec>
 801387c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8013880:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013884:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013888:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801388c:	eef0 7a65 	vmov.f32	s15, s11
 8013890:	eee3 6a87 	vfma.f32	s13, s7, s14
 8013894:	eee5 7a05 	vfma.f32	s15, s10, s10
 8013898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801389c:	ee17 1a90 	vmov	r1, s15
 80138a0:	4011      	ands	r1, r2
 80138a2:	ee07 1a90 	vmov	s15, r1
 80138a6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80138aa:	eddf 5a36 	vldr	s11, [pc, #216]	; 8013984 <__ieee754_powf+0x3f0>
 80138ae:	eea4 7a05 	vfma.f32	s14, s8, s10
 80138b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80138b6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80138ba:	eea7 7a86 	vfma.f32	s14, s15, s12
 80138be:	eeb0 6a47 	vmov.f32	s12, s14
 80138c2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80138c6:	ee16 1a10 	vmov	r1, s12
 80138ca:	4011      	ands	r1, r2
 80138cc:	ee06 1a90 	vmov	s13, r1
 80138d0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80138d4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013988 <__ieee754_powf+0x3f4>
 80138d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80138dc:	ee06 1a10 	vmov	s12, r1
 80138e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138e4:	eddf 7a29 	vldr	s15, [pc, #164]	; 801398c <__ieee754_powf+0x3f8>
 80138e8:	4929      	ldr	r1, [pc, #164]	; (8013990 <__ieee754_powf+0x3fc>)
 80138ea:	eea6 7a27 	vfma.f32	s14, s12, s15
 80138ee:	4439      	add	r1, r7
 80138f0:	edd1 7a00 	vldr	s15, [r1]
 80138f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80138f8:	ee07 3a90 	vmov	s15, r3
 80138fc:	eef0 0a47 	vmov.f32	s1, s14
 8013900:	4b24      	ldr	r3, [pc, #144]	; (8013994 <__ieee754_powf+0x400>)
 8013902:	eee6 0a25 	vfma.f32	s1, s12, s11
 8013906:	443b      	add	r3, r7
 8013908:	ed93 5a00 	vldr	s10, [r3]
 801390c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013910:	ee70 0a85 	vadd.f32	s1, s1, s10
 8013914:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8013918:	ee17 3a90 	vmov	r3, s15
 801391c:	4013      	ands	r3, r2
 801391e:	ee07 3a90 	vmov	s15, r3
 8013922:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013926:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801392a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801392e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013932:	e70e      	b.n	8013752 <__ieee754_powf+0x1be>
 8013934:	2401      	movs	r4, #1
 8013936:	e75c      	b.n	80137f2 <__ieee754_powf+0x25e>
 8013938:	08014821 	.word	0x08014821
 801393c:	00000000 	.word	0x00000000
 8013940:	3f7ffff7 	.word	0x3f7ffff7
 8013944:	7149f2ca 	.word	0x7149f2ca
 8013948:	3f800007 	.word	0x3f800007
 801394c:	3eaaaaab 	.word	0x3eaaaaab
 8013950:	36eca570 	.word	0x36eca570
 8013954:	3fb8aa3b 	.word	0x3fb8aa3b
 8013958:	3fb8aa00 	.word	0x3fb8aa00
 801395c:	4b800000 	.word	0x4b800000
 8013960:	001cc471 	.word	0x001cc471
 8013964:	005db3d6 	.word	0x005db3d6
 8013968:	0801494c 	.word	0x0801494c
 801396c:	fffff000 	.word	0xfffff000
 8013970:	3e6c3255 	.word	0x3e6c3255
 8013974:	3e53f142 	.word	0x3e53f142
 8013978:	3e8ba305 	.word	0x3e8ba305
 801397c:	3edb6db7 	.word	0x3edb6db7
 8013980:	3f19999a 	.word	0x3f19999a
 8013984:	3f763800 	.word	0x3f763800
 8013988:	3f76384f 	.word	0x3f76384f
 801398c:	369dc3a0 	.word	0x369dc3a0
 8013990:	0801495c 	.word	0x0801495c
 8013994:	08014954 	.word	0x08014954
 8013998:	3338aa3c 	.word	0x3338aa3c
 801399c:	f040 8092 	bne.w	8013ac4 <__ieee754_powf+0x530>
 80139a0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013998 <__ieee754_powf+0x404>
 80139a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80139a8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80139ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80139b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139b4:	f73f aef6 	bgt.w	80137a4 <__ieee754_powf+0x210>
 80139b8:	15db      	asrs	r3, r3, #23
 80139ba:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80139be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80139c2:	4103      	asrs	r3, r0
 80139c4:	4423      	add	r3, r4
 80139c6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80139ca:	4947      	ldr	r1, [pc, #284]	; (8013ae8 <__ieee754_powf+0x554>)
 80139cc:	3a7f      	subs	r2, #127	; 0x7f
 80139ce:	4111      	asrs	r1, r2
 80139d0:	ea23 0101 	bic.w	r1, r3, r1
 80139d4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80139d8:	ee07 1a10 	vmov	s14, r1
 80139dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80139e0:	f1c2 0217 	rsb	r2, r2, #23
 80139e4:	4110      	asrs	r0, r2
 80139e6:	2c00      	cmp	r4, #0
 80139e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139ec:	bfb8      	it	lt
 80139ee:	4240      	neglt	r0, r0
 80139f0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80139f4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013aec <__ieee754_powf+0x558>
 80139f8:	ee17 3a10 	vmov	r3, s14
 80139fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013a00:	f023 030f 	bic.w	r3, r3, #15
 8013a04:	ee07 3a10 	vmov	s14, r3
 8013a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a0c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013a10:	eddf 7a37 	vldr	s15, [pc, #220]	; 8013af0 <__ieee754_powf+0x55c>
 8013a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a18:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013a1c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8013af4 <__ieee754_powf+0x560>
 8013a20:	eeb0 0a67 	vmov.f32	s0, s15
 8013a24:	eea7 0a26 	vfma.f32	s0, s14, s13
 8013a28:	eeb0 6a40 	vmov.f32	s12, s0
 8013a2c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013a30:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013a34:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013a38:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8013af8 <__ieee754_powf+0x564>
 8013a3c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013afc <__ieee754_powf+0x568>
 8013a40:	eea7 6a26 	vfma.f32	s12, s14, s13
 8013a44:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8013b00 <__ieee754_powf+0x56c>
 8013a48:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013a4c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8013b04 <__ieee754_powf+0x570>
 8013a50:	eea6 6a87 	vfma.f32	s12, s13, s14
 8013a54:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8013b08 <__ieee754_powf+0x574>
 8013a58:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013a5c:	eeb0 6a40 	vmov.f32	s12, s0
 8013a60:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013a64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013a68:	eeb0 7a46 	vmov.f32	s14, s12
 8013a6c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013a70:	ee20 6a06 	vmul.f32	s12, s0, s12
 8013a74:	eee0 7a27 	vfma.f32	s15, s0, s15
 8013a78:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013a84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013a88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013a8c:	ee10 3a10 	vmov	r3, s0
 8013a90:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013a94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013a98:	da1a      	bge.n	8013ad0 <__ieee754_powf+0x53c>
 8013a9a:	f000 fd51 	bl	8014540 <scalbnf>
 8013a9e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013aa2:	e5c9      	b.n	8013638 <__ieee754_powf+0xa4>
 8013aa4:	4a19      	ldr	r2, [pc, #100]	; (8013b0c <__ieee754_powf+0x578>)
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	dd02      	ble.n	8013ab0 <__ieee754_powf+0x51c>
 8013aaa:	eddf 7a19 	vldr	s15, [pc, #100]	; 8013b10 <__ieee754_powf+0x57c>
 8013aae:	e67b      	b.n	80137a8 <__ieee754_powf+0x214>
 8013ab0:	d108      	bne.n	8013ac4 <__ieee754_powf+0x530>
 8013ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ab6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013abe:	f6ff af7b 	blt.w	80139b8 <__ieee754_powf+0x424>
 8013ac2:	e7f2      	b.n	8013aaa <__ieee754_powf+0x516>
 8013ac4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013ac8:	f73f af76 	bgt.w	80139b8 <__ieee754_powf+0x424>
 8013acc:	2000      	movs	r0, #0
 8013ace:	e78f      	b.n	80139f0 <__ieee754_powf+0x45c>
 8013ad0:	ee00 3a10 	vmov	s0, r3
 8013ad4:	e7e3      	b.n	8013a9e <__ieee754_powf+0x50a>
 8013ad6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013ada:	e5ad      	b.n	8013638 <__ieee754_powf+0xa4>
 8013adc:	eeb0 0a68 	vmov.f32	s0, s17
 8013ae0:	e5aa      	b.n	8013638 <__ieee754_powf+0xa4>
 8013ae2:	eeb0 0a48 	vmov.f32	s0, s16
 8013ae6:	e5a7      	b.n	8013638 <__ieee754_powf+0xa4>
 8013ae8:	007fffff 	.word	0x007fffff
 8013aec:	3f317218 	.word	0x3f317218
 8013af0:	35bfbe8c 	.word	0x35bfbe8c
 8013af4:	3f317200 	.word	0x3f317200
 8013af8:	3331bb4c 	.word	0x3331bb4c
 8013afc:	b5ddea0e 	.word	0xb5ddea0e
 8013b00:	388ab355 	.word	0x388ab355
 8013b04:	bb360b61 	.word	0xbb360b61
 8013b08:	3e2aaaab 	.word	0x3e2aaaab
 8013b0c:	43160000 	.word	0x43160000
 8013b10:	0da24260 	.word	0x0da24260

08013b14 <__ieee754_rem_pio2f>:
 8013b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b16:	ee10 6a10 	vmov	r6, s0
 8013b1a:	4b86      	ldr	r3, [pc, #536]	; (8013d34 <__ieee754_rem_pio2f+0x220>)
 8013b1c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8013b20:	429c      	cmp	r4, r3
 8013b22:	b087      	sub	sp, #28
 8013b24:	4605      	mov	r5, r0
 8013b26:	dc05      	bgt.n	8013b34 <__ieee754_rem_pio2f+0x20>
 8013b28:	2300      	movs	r3, #0
 8013b2a:	ed85 0a00 	vstr	s0, [r5]
 8013b2e:	6043      	str	r3, [r0, #4]
 8013b30:	2000      	movs	r0, #0
 8013b32:	e020      	b.n	8013b76 <__ieee754_rem_pio2f+0x62>
 8013b34:	4b80      	ldr	r3, [pc, #512]	; (8013d38 <__ieee754_rem_pio2f+0x224>)
 8013b36:	429c      	cmp	r4, r3
 8013b38:	dc38      	bgt.n	8013bac <__ieee754_rem_pio2f+0x98>
 8013b3a:	2e00      	cmp	r6, #0
 8013b3c:	f024 040f 	bic.w	r4, r4, #15
 8013b40:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8013d3c <__ieee754_rem_pio2f+0x228>
 8013b44:	4b7e      	ldr	r3, [pc, #504]	; (8013d40 <__ieee754_rem_pio2f+0x22c>)
 8013b46:	dd18      	ble.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013b48:	429c      	cmp	r4, r3
 8013b4a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013b4e:	bf09      	itett	eq
 8013b50:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8013d44 <__ieee754_rem_pio2f+0x230>
 8013b54:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8013d48 <__ieee754_rem_pio2f+0x234>
 8013b58:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013b5c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8013d4c <__ieee754_rem_pio2f+0x238>
 8013b60:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013b64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013b68:	edc0 6a00 	vstr	s13, [r0]
 8013b6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b70:	edc0 7a01 	vstr	s15, [r0, #4]
 8013b74:	2001      	movs	r0, #1
 8013b76:	b007      	add	sp, #28
 8013b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b7a:	429c      	cmp	r4, r3
 8013b7c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013b80:	bf09      	itett	eq
 8013b82:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8013d44 <__ieee754_rem_pio2f+0x230>
 8013b86:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8013d48 <__ieee754_rem_pio2f+0x234>
 8013b8a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013b8e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8013d4c <__ieee754_rem_pio2f+0x238>
 8013b92:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013b96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013b9a:	edc0 6a00 	vstr	s13, [r0]
 8013b9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013ba2:	edc0 7a01 	vstr	s15, [r0, #4]
 8013ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8013baa:	e7e4      	b.n	8013b76 <__ieee754_rem_pio2f+0x62>
 8013bac:	4b68      	ldr	r3, [pc, #416]	; (8013d50 <__ieee754_rem_pio2f+0x23c>)
 8013bae:	429c      	cmp	r4, r3
 8013bb0:	dc71      	bgt.n	8013c96 <__ieee754_rem_pio2f+0x182>
 8013bb2:	f000 fc11 	bl	80143d8 <fabsf>
 8013bb6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013d54 <__ieee754_rem_pio2f+0x240>
 8013bba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013bbe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bc6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8013bca:	ee17 0a90 	vmov	r0, s15
 8013bce:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013d3c <__ieee754_rem_pio2f+0x228>
 8013bd2:	eeb1 7a46 	vneg.f32	s14, s12
 8013bd6:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013bda:	281f      	cmp	r0, #31
 8013bdc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013d48 <__ieee754_rem_pio2f+0x234>
 8013be0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013be4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013be8:	ee16 3a90 	vmov	r3, s13
 8013bec:	dc1c      	bgt.n	8013c28 <__ieee754_rem_pio2f+0x114>
 8013bee:	1e47      	subs	r7, r0, #1
 8013bf0:	4959      	ldr	r1, [pc, #356]	; (8013d58 <__ieee754_rem_pio2f+0x244>)
 8013bf2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013bf6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8013bfa:	428a      	cmp	r2, r1
 8013bfc:	d014      	beq.n	8013c28 <__ieee754_rem_pio2f+0x114>
 8013bfe:	602b      	str	r3, [r5, #0]
 8013c00:	ed95 7a00 	vldr	s14, [r5]
 8013c04:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013c08:	2e00      	cmp	r6, #0
 8013c0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c0e:	ed85 0a01 	vstr	s0, [r5, #4]
 8013c12:	dab0      	bge.n	8013b76 <__ieee754_rem_pio2f+0x62>
 8013c14:	eeb1 7a47 	vneg.f32	s14, s14
 8013c18:	eeb1 0a40 	vneg.f32	s0, s0
 8013c1c:	ed85 7a00 	vstr	s14, [r5]
 8013c20:	ed85 0a01 	vstr	s0, [r5, #4]
 8013c24:	4240      	negs	r0, r0
 8013c26:	e7a6      	b.n	8013b76 <__ieee754_rem_pio2f+0x62>
 8013c28:	15e4      	asrs	r4, r4, #23
 8013c2a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013c2e:	1aa2      	subs	r2, r4, r2
 8013c30:	2a08      	cmp	r2, #8
 8013c32:	dde4      	ble.n	8013bfe <__ieee754_rem_pio2f+0xea>
 8013c34:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013d44 <__ieee754_rem_pio2f+0x230>
 8013c38:	eef0 6a40 	vmov.f32	s13, s0
 8013c3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013c40:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013c44:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013c48:	eddf 7a40 	vldr	s15, [pc, #256]	; 8013d4c <__ieee754_rem_pio2f+0x238>
 8013c4c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8013c50:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8013c54:	eef0 7a40 	vmov.f32	s15, s0
 8013c58:	ee15 3a90 	vmov	r3, s11
 8013c5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013c60:	1aa4      	subs	r4, r4, r2
 8013c62:	2c19      	cmp	r4, #25
 8013c64:	dc04      	bgt.n	8013c70 <__ieee754_rem_pio2f+0x15c>
 8013c66:	edc5 5a00 	vstr	s11, [r5]
 8013c6a:	eeb0 0a66 	vmov.f32	s0, s13
 8013c6e:	e7c7      	b.n	8013c00 <__ieee754_rem_pio2f+0xec>
 8013c70:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013d5c <__ieee754_rem_pio2f+0x248>
 8013c74:	eeb0 0a66 	vmov.f32	s0, s13
 8013c78:	eea7 0a25 	vfma.f32	s0, s14, s11
 8013c7c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013c80:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013c84:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013d60 <__ieee754_rem_pio2f+0x24c>
 8013c88:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8013c8c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013c90:	ed85 7a00 	vstr	s14, [r5]
 8013c94:	e7b4      	b.n	8013c00 <__ieee754_rem_pio2f+0xec>
 8013c96:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013c9a:	db06      	blt.n	8013caa <__ieee754_rem_pio2f+0x196>
 8013c9c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013ca0:	edc0 7a01 	vstr	s15, [r0, #4]
 8013ca4:	edc0 7a00 	vstr	s15, [r0]
 8013ca8:	e742      	b.n	8013b30 <__ieee754_rem_pio2f+0x1c>
 8013caa:	15e2      	asrs	r2, r4, #23
 8013cac:	3a86      	subs	r2, #134	; 0x86
 8013cae:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8013cb2:	ee07 3a90 	vmov	s15, r3
 8013cb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013cba:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8013d64 <__ieee754_rem_pio2f+0x250>
 8013cbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cc6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013cca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013cce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013cd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cda:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013cde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ce2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cea:	edcd 7a05 	vstr	s15, [sp, #20]
 8013cee:	d11e      	bne.n	8013d2e <__ieee754_rem_pio2f+0x21a>
 8013cf0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf8:	bf0c      	ite	eq
 8013cfa:	2301      	moveq	r3, #1
 8013cfc:	2302      	movne	r3, #2
 8013cfe:	491a      	ldr	r1, [pc, #104]	; (8013d68 <__ieee754_rem_pio2f+0x254>)
 8013d00:	9101      	str	r1, [sp, #4]
 8013d02:	2102      	movs	r1, #2
 8013d04:	9100      	str	r1, [sp, #0]
 8013d06:	a803      	add	r0, sp, #12
 8013d08:	4629      	mov	r1, r5
 8013d0a:	f000 f891 	bl	8013e30 <__kernel_rem_pio2f>
 8013d0e:	2e00      	cmp	r6, #0
 8013d10:	f6bf af31 	bge.w	8013b76 <__ieee754_rem_pio2f+0x62>
 8013d14:	edd5 7a00 	vldr	s15, [r5]
 8013d18:	eef1 7a67 	vneg.f32	s15, s15
 8013d1c:	edc5 7a00 	vstr	s15, [r5]
 8013d20:	edd5 7a01 	vldr	s15, [r5, #4]
 8013d24:	eef1 7a67 	vneg.f32	s15, s15
 8013d28:	edc5 7a01 	vstr	s15, [r5, #4]
 8013d2c:	e77a      	b.n	8013c24 <__ieee754_rem_pio2f+0x110>
 8013d2e:	2303      	movs	r3, #3
 8013d30:	e7e5      	b.n	8013cfe <__ieee754_rem_pio2f+0x1ea>
 8013d32:	bf00      	nop
 8013d34:	3f490fd8 	.word	0x3f490fd8
 8013d38:	4016cbe3 	.word	0x4016cbe3
 8013d3c:	3fc90f80 	.word	0x3fc90f80
 8013d40:	3fc90fd0 	.word	0x3fc90fd0
 8013d44:	37354400 	.word	0x37354400
 8013d48:	37354443 	.word	0x37354443
 8013d4c:	2e85a308 	.word	0x2e85a308
 8013d50:	43490f80 	.word	0x43490f80
 8013d54:	3f22f984 	.word	0x3f22f984
 8013d58:	08014964 	.word	0x08014964
 8013d5c:	2e85a300 	.word	0x2e85a300
 8013d60:	248d3132 	.word	0x248d3132
 8013d64:	43800000 	.word	0x43800000
 8013d68:	080149e4 	.word	0x080149e4

08013d6c <__ieee754_sqrtf>:
 8013d6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013d70:	4770      	bx	lr
	...

08013d74 <__kernel_cosf>:
 8013d74:	ee10 3a10 	vmov	r3, s0
 8013d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013d7c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013d80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013d84:	da05      	bge.n	8013d92 <__kernel_cosf+0x1e>
 8013d86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013d8a:	ee17 2a90 	vmov	r2, s15
 8013d8e:	2a00      	cmp	r2, #0
 8013d90:	d03b      	beq.n	8013e0a <__kernel_cosf+0x96>
 8013d92:	ee20 6a00 	vmul.f32	s12, s0, s0
 8013d96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013d9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8013e10 <__kernel_cosf+0x9c>
 8013d9e:	4a1d      	ldr	r2, [pc, #116]	; (8013e14 <__kernel_cosf+0xa0>)
 8013da0:	ee66 7a07 	vmul.f32	s15, s12, s14
 8013da4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8013e18 <__kernel_cosf+0xa4>
 8013da8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8013dac:	4293      	cmp	r3, r2
 8013dae:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8013e1c <__kernel_cosf+0xa8>
 8013db2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8013db6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8013e20 <__kernel_cosf+0xac>
 8013dba:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013dbe:	eddf 5a19 	vldr	s11, [pc, #100]	; 8013e24 <__kernel_cosf+0xb0>
 8013dc2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8013dc6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8013e28 <__kernel_cosf+0xb4>
 8013dca:	eea5 7a86 	vfma.f32	s14, s11, s12
 8013dce:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8013dd2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013dd6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8013dda:	dc04      	bgt.n	8013de6 <__kernel_cosf+0x72>
 8013ddc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8013de0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8013de4:	4770      	bx	lr
 8013de6:	4a11      	ldr	r2, [pc, #68]	; (8013e2c <__kernel_cosf+0xb8>)
 8013de8:	4293      	cmp	r3, r2
 8013dea:	bfda      	itte	le
 8013dec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013df0:	ee07 3a10 	vmovle	s14, r3
 8013df4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8013df8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013dfc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8013e00:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013e04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013e08:	4770      	bx	lr
 8013e0a:	eeb0 0a66 	vmov.f32	s0, s13
 8013e0e:	4770      	bx	lr
 8013e10:	ad47d74e 	.word	0xad47d74e
 8013e14:	3e999999 	.word	0x3e999999
 8013e18:	310f74f6 	.word	0x310f74f6
 8013e1c:	b493f27c 	.word	0xb493f27c
 8013e20:	37d00d01 	.word	0x37d00d01
 8013e24:	bab60b61 	.word	0xbab60b61
 8013e28:	3d2aaaab 	.word	0x3d2aaaab
 8013e2c:	3f480000 	.word	0x3f480000

08013e30 <__kernel_rem_pio2f>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	ed2d 8b04 	vpush	{d8-d9}
 8013e38:	b0d7      	sub	sp, #348	; 0x15c
 8013e3a:	469b      	mov	fp, r3
 8013e3c:	460e      	mov	r6, r1
 8013e3e:	4bbe      	ldr	r3, [pc, #760]	; (8014138 <__kernel_rem_pio2f+0x308>)
 8013e40:	9964      	ldr	r1, [sp, #400]	; 0x190
 8013e42:	9002      	str	r0, [sp, #8]
 8013e44:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8013e48:	9865      	ldr	r0, [sp, #404]	; 0x194
 8013e4a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8014148 <__kernel_rem_pio2f+0x318>
 8013e4e:	1ed1      	subs	r1, r2, #3
 8013e50:	2308      	movs	r3, #8
 8013e52:	fb91 f1f3 	sdiv	r1, r1, r3
 8013e56:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8013e5a:	f10b 3aff 	add.w	sl, fp, #4294967295
 8013e5e:	1c4c      	adds	r4, r1, #1
 8013e60:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8013e64:	eba1 050a 	sub.w	r5, r1, sl
 8013e68:	aa1a      	add	r2, sp, #104	; 0x68
 8013e6a:	eb09 070a 	add.w	r7, r9, sl
 8013e6e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8013e72:	4696      	mov	lr, r2
 8013e74:	2300      	movs	r3, #0
 8013e76:	42bb      	cmp	r3, r7
 8013e78:	dd0f      	ble.n	8013e9a <__kernel_rem_pio2f+0x6a>
 8013e7a:	af42      	add	r7, sp, #264	; 0x108
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	454a      	cmp	r2, r9
 8013e80:	dc27      	bgt.n	8013ed2 <__kernel_rem_pio2f+0xa2>
 8013e82:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8013e86:	eb0b 0302 	add.w	r3, fp, r2
 8013e8a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8013e8e:	9d02      	ldr	r5, [sp, #8]
 8013e90:	eddf 7aad 	vldr	s15, [pc, #692]	; 8014148 <__kernel_rem_pio2f+0x318>
 8013e94:	f04f 0c00 	mov.w	ip, #0
 8013e98:	e015      	b.n	8013ec6 <__kernel_rem_pio2f+0x96>
 8013e9a:	42dd      	cmn	r5, r3
 8013e9c:	bf5d      	ittte	pl
 8013e9e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8013ea2:	ee07 2a90 	vmovpl	s15, r2
 8013ea6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013eaa:	eef0 7a47 	vmovmi.f32	s15, s14
 8013eae:	ecee 7a01 	vstmia	lr!, {s15}
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	e7df      	b.n	8013e76 <__kernel_rem_pio2f+0x46>
 8013eb6:	ecf5 6a01 	vldmia	r5!, {s13}
 8013eba:	ed33 7a01 	vldmdb	r3!, {s14}
 8013ebe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013ec2:	f10c 0c01 	add.w	ip, ip, #1
 8013ec6:	45d4      	cmp	ip, sl
 8013ec8:	ddf5      	ble.n	8013eb6 <__kernel_rem_pio2f+0x86>
 8013eca:	ece7 7a01 	vstmia	r7!, {s15}
 8013ece:	3201      	adds	r2, #1
 8013ed0:	e7d5      	b.n	8013e7e <__kernel_rem_pio2f+0x4e>
 8013ed2:	ab06      	add	r3, sp, #24
 8013ed4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8013ed8:	9304      	str	r3, [sp, #16]
 8013eda:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8014144 <__kernel_rem_pio2f+0x314>
 8013ede:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8014140 <__kernel_rem_pio2f+0x310>
 8013ee2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8013ee6:	9303      	str	r3, [sp, #12]
 8013ee8:	464d      	mov	r5, r9
 8013eea:	ab56      	add	r3, sp, #344	; 0x158
 8013eec:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8013ef0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8013ef4:	3f01      	subs	r7, #1
 8013ef6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8013efa:	00bf      	lsls	r7, r7, #2
 8013efc:	ab56      	add	r3, sp, #344	; 0x158
 8013efe:	19da      	adds	r2, r3, r7
 8013f00:	3a4c      	subs	r2, #76	; 0x4c
 8013f02:	2300      	movs	r3, #0
 8013f04:	1ae9      	subs	r1, r5, r3
 8013f06:	2900      	cmp	r1, #0
 8013f08:	dc4c      	bgt.n	8013fa4 <__kernel_rem_pio2f+0x174>
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	f000 fb18 	bl	8014540 <scalbnf>
 8013f10:	eeb0 8a40 	vmov.f32	s16, s0
 8013f14:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013f18:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013f1c:	f000 fa6e 	bl	80143fc <floorf>
 8013f20:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013f24:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013f28:	2c00      	cmp	r4, #0
 8013f2a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013f2e:	edcd 7a01 	vstr	s15, [sp, #4]
 8013f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f36:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013f3a:	dd48      	ble.n	8013fce <__kernel_rem_pio2f+0x19e>
 8013f3c:	1e69      	subs	r1, r5, #1
 8013f3e:	ab06      	add	r3, sp, #24
 8013f40:	f1c4 0008 	rsb	r0, r4, #8
 8013f44:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8013f48:	9a01      	ldr	r2, [sp, #4]
 8013f4a:	fa4c f300 	asr.w	r3, ip, r0
 8013f4e:	441a      	add	r2, r3
 8013f50:	4083      	lsls	r3, r0
 8013f52:	9201      	str	r2, [sp, #4]
 8013f54:	ebac 0203 	sub.w	r2, ip, r3
 8013f58:	ab06      	add	r3, sp, #24
 8013f5a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8013f5e:	f1c4 0307 	rsb	r3, r4, #7
 8013f62:	fa42 f803 	asr.w	r8, r2, r3
 8013f66:	f1b8 0f00 	cmp.w	r8, #0
 8013f6a:	dd41      	ble.n	8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013f6c:	9b01      	ldr	r3, [sp, #4]
 8013f6e:	2000      	movs	r0, #0
 8013f70:	3301      	adds	r3, #1
 8013f72:	9301      	str	r3, [sp, #4]
 8013f74:	4601      	mov	r1, r0
 8013f76:	4285      	cmp	r5, r0
 8013f78:	dc6d      	bgt.n	8014056 <__kernel_rem_pio2f+0x226>
 8013f7a:	2c00      	cmp	r4, #0
 8013f7c:	dd04      	ble.n	8013f88 <__kernel_rem_pio2f+0x158>
 8013f7e:	2c01      	cmp	r4, #1
 8013f80:	d07e      	beq.n	8014080 <__kernel_rem_pio2f+0x250>
 8013f82:	2c02      	cmp	r4, #2
 8013f84:	f000 8086 	beq.w	8014094 <__kernel_rem_pio2f+0x264>
 8013f88:	f1b8 0f02 	cmp.w	r8, #2
 8013f8c:	d130      	bne.n	8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013f8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013f92:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013f96:	b359      	cbz	r1, 8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013f98:	4620      	mov	r0, r4
 8013f9a:	f000 fad1 	bl	8014540 <scalbnf>
 8013f9e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013fa2:	e025      	b.n	8013ff0 <__kernel_rem_pio2f+0x1c0>
 8013fa4:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013fa8:	a806      	add	r0, sp, #24
 8013faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013fb2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013fb6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013fba:	ee10 1a10 	vmov	r1, s0
 8013fbe:	ed32 0a01 	vldmdb	r2!, {s0}
 8013fc2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8013fc6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013fca:	3301      	adds	r3, #1
 8013fcc:	e79a      	b.n	8013f04 <__kernel_rem_pio2f+0xd4>
 8013fce:	d106      	bne.n	8013fde <__kernel_rem_pio2f+0x1ae>
 8013fd0:	1e6b      	subs	r3, r5, #1
 8013fd2:	aa06      	add	r2, sp, #24
 8013fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013fd8:	ea4f 2822 	mov.w	r8, r2, asr #8
 8013fdc:	e7c3      	b.n	8013f66 <__kernel_rem_pio2f+0x136>
 8013fde:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013fe2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fea:	da31      	bge.n	8014050 <__kernel_rem_pio2f+0x220>
 8013fec:	f04f 0800 	mov.w	r8, #0
 8013ff0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff8:	f040 80a8 	bne.w	801414c <__kernel_rem_pio2f+0x31c>
 8013ffc:	1e6b      	subs	r3, r5, #1
 8013ffe:	4618      	mov	r0, r3
 8014000:	2200      	movs	r2, #0
 8014002:	4548      	cmp	r0, r9
 8014004:	da4d      	bge.n	80140a2 <__kernel_rem_pio2f+0x272>
 8014006:	2a00      	cmp	r2, #0
 8014008:	f000 8087 	beq.w	801411a <__kernel_rem_pio2f+0x2ea>
 801400c:	aa06      	add	r2, sp, #24
 801400e:	3c08      	subs	r4, #8
 8014010:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8014014:	2900      	cmp	r1, #0
 8014016:	f000 808d 	beq.w	8014134 <__kernel_rem_pio2f+0x304>
 801401a:	4620      	mov	r0, r4
 801401c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014020:	9302      	str	r3, [sp, #8]
 8014022:	f000 fa8d 	bl	8014540 <scalbnf>
 8014026:	9b02      	ldr	r3, [sp, #8]
 8014028:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014144 <__kernel_rem_pio2f+0x314>
 801402c:	0099      	lsls	r1, r3, #2
 801402e:	aa42      	add	r2, sp, #264	; 0x108
 8014030:	1850      	adds	r0, r2, r1
 8014032:	1d05      	adds	r5, r0, #4
 8014034:	461c      	mov	r4, r3
 8014036:	2c00      	cmp	r4, #0
 8014038:	f280 80b8 	bge.w	80141ac <__kernel_rem_pio2f+0x37c>
 801403c:	2500      	movs	r5, #0
 801403e:	1b5c      	subs	r4, r3, r5
 8014040:	2c00      	cmp	r4, #0
 8014042:	f2c0 80d8 	blt.w	80141f6 <__kernel_rem_pio2f+0x3c6>
 8014046:	4f3d      	ldr	r7, [pc, #244]	; (801413c <__kernel_rem_pio2f+0x30c>)
 8014048:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8014148 <__kernel_rem_pio2f+0x318>
 801404c:	2400      	movs	r4, #0
 801404e:	e0c6      	b.n	80141de <__kernel_rem_pio2f+0x3ae>
 8014050:	f04f 0802 	mov.w	r8, #2
 8014054:	e78a      	b.n	8013f6c <__kernel_rem_pio2f+0x13c>
 8014056:	ab06      	add	r3, sp, #24
 8014058:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801405c:	b949      	cbnz	r1, 8014072 <__kernel_rem_pio2f+0x242>
 801405e:	b12b      	cbz	r3, 801406c <__kernel_rem_pio2f+0x23c>
 8014060:	aa06      	add	r2, sp, #24
 8014062:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8014066:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801406a:	2301      	movs	r3, #1
 801406c:	3001      	adds	r0, #1
 801406e:	4619      	mov	r1, r3
 8014070:	e781      	b.n	8013f76 <__kernel_rem_pio2f+0x146>
 8014072:	aa06      	add	r2, sp, #24
 8014074:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014078:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801407c:	460b      	mov	r3, r1
 801407e:	e7f5      	b.n	801406c <__kernel_rem_pio2f+0x23c>
 8014080:	1e68      	subs	r0, r5, #1
 8014082:	ab06      	add	r3, sp, #24
 8014084:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801408c:	aa06      	add	r2, sp, #24
 801408e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8014092:	e779      	b.n	8013f88 <__kernel_rem_pio2f+0x158>
 8014094:	1e68      	subs	r0, r5, #1
 8014096:	ab06      	add	r3, sp, #24
 8014098:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140a0:	e7f4      	b.n	801408c <__kernel_rem_pio2f+0x25c>
 80140a2:	a906      	add	r1, sp, #24
 80140a4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80140a8:	3801      	subs	r0, #1
 80140aa:	430a      	orrs	r2, r1
 80140ac:	e7a9      	b.n	8014002 <__kernel_rem_pio2f+0x1d2>
 80140ae:	f10c 0c01 	add.w	ip, ip, #1
 80140b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80140b6:	2a00      	cmp	r2, #0
 80140b8:	d0f9      	beq.n	80140ae <__kernel_rem_pio2f+0x27e>
 80140ba:	eb0b 0305 	add.w	r3, fp, r5
 80140be:	aa1a      	add	r2, sp, #104	; 0x68
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	1898      	adds	r0, r3, r2
 80140c4:	3004      	adds	r0, #4
 80140c6:	1c69      	adds	r1, r5, #1
 80140c8:	3704      	adds	r7, #4
 80140ca:	2200      	movs	r2, #0
 80140cc:	4465      	add	r5, ip
 80140ce:	9005      	str	r0, [sp, #20]
 80140d0:	428d      	cmp	r5, r1
 80140d2:	f6ff af0a 	blt.w	8013eea <__kernel_rem_pio2f+0xba>
 80140d6:	a81a      	add	r0, sp, #104	; 0x68
 80140d8:	eb02 0c03 	add.w	ip, r2, r3
 80140dc:	4484      	add	ip, r0
 80140de:	9803      	ldr	r0, [sp, #12]
 80140e0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80140e4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80140e8:	9001      	str	r0, [sp, #4]
 80140ea:	ee07 0a90 	vmov	s15, r0
 80140ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140f2:	9805      	ldr	r0, [sp, #20]
 80140f4:	edcc 7a00 	vstr	s15, [ip]
 80140f8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8014148 <__kernel_rem_pio2f+0x318>
 80140fc:	eb00 0802 	add.w	r8, r0, r2
 8014100:	f04f 0c00 	mov.w	ip, #0
 8014104:	45d4      	cmp	ip, sl
 8014106:	dd0c      	ble.n	8014122 <__kernel_rem_pio2f+0x2f2>
 8014108:	eb02 0c07 	add.w	ip, r2, r7
 801410c:	a842      	add	r0, sp, #264	; 0x108
 801410e:	4484      	add	ip, r0
 8014110:	edcc 7a01 	vstr	s15, [ip, #4]
 8014114:	3101      	adds	r1, #1
 8014116:	3204      	adds	r2, #4
 8014118:	e7da      	b.n	80140d0 <__kernel_rem_pio2f+0x2a0>
 801411a:	9b04      	ldr	r3, [sp, #16]
 801411c:	f04f 0c01 	mov.w	ip, #1
 8014120:	e7c7      	b.n	80140b2 <__kernel_rem_pio2f+0x282>
 8014122:	ecfe 6a01 	vldmia	lr!, {s13}
 8014126:	ed38 7a01 	vldmdb	r8!, {s14}
 801412a:	f10c 0c01 	add.w	ip, ip, #1
 801412e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014132:	e7e7      	b.n	8014104 <__kernel_rem_pio2f+0x2d4>
 8014134:	3b01      	subs	r3, #1
 8014136:	e769      	b.n	801400c <__kernel_rem_pio2f+0x1dc>
 8014138:	08014d28 	.word	0x08014d28
 801413c:	08014cfc 	.word	0x08014cfc
 8014140:	43800000 	.word	0x43800000
 8014144:	3b800000 	.word	0x3b800000
 8014148:	00000000 	.word	0x00000000
 801414c:	4260      	negs	r0, r4
 801414e:	eeb0 0a48 	vmov.f32	s0, s16
 8014152:	f000 f9f5 	bl	8014540 <scalbnf>
 8014156:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8014140 <__kernel_rem_pio2f+0x310>
 801415a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801415e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014162:	db1a      	blt.n	801419a <__kernel_rem_pio2f+0x36a>
 8014164:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014144 <__kernel_rem_pio2f+0x314>
 8014168:	ee60 7a27 	vmul.f32	s15, s0, s15
 801416c:	aa06      	add	r2, sp, #24
 801416e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014172:	a906      	add	r1, sp, #24
 8014174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014178:	3408      	adds	r4, #8
 801417a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801417e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014182:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014186:	ee10 3a10 	vmov	r3, s0
 801418a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801418e:	1c6b      	adds	r3, r5, #1
 8014190:	ee17 2a90 	vmov	r2, s15
 8014194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014198:	e73f      	b.n	801401a <__kernel_rem_pio2f+0x1ea>
 801419a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801419e:	aa06      	add	r2, sp, #24
 80141a0:	ee10 3a10 	vmov	r3, s0
 80141a4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80141a8:	462b      	mov	r3, r5
 80141aa:	e736      	b.n	801401a <__kernel_rem_pio2f+0x1ea>
 80141ac:	aa06      	add	r2, sp, #24
 80141ae:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80141b2:	9202      	str	r2, [sp, #8]
 80141b4:	ee07 2a90 	vmov	s15, r2
 80141b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141bc:	3c01      	subs	r4, #1
 80141be:	ee67 7a80 	vmul.f32	s15, s15, s0
 80141c2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80141c6:	ed65 7a01 	vstmdb	r5!, {s15}
 80141ca:	e734      	b.n	8014036 <__kernel_rem_pio2f+0x206>
 80141cc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80141d0:	ecf7 6a01 	vldmia	r7!, {s13}
 80141d4:	ed9c 7a00 	vldr	s14, [ip]
 80141d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80141dc:	3401      	adds	r4, #1
 80141de:	454c      	cmp	r4, r9
 80141e0:	dc01      	bgt.n	80141e6 <__kernel_rem_pio2f+0x3b6>
 80141e2:	42a5      	cmp	r5, r4
 80141e4:	daf2      	bge.n	80141cc <__kernel_rem_pio2f+0x39c>
 80141e6:	aa56      	add	r2, sp, #344	; 0x158
 80141e8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80141ec:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80141f0:	3501      	adds	r5, #1
 80141f2:	3804      	subs	r0, #4
 80141f4:	e723      	b.n	801403e <__kernel_rem_pio2f+0x20e>
 80141f6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80141f8:	2a03      	cmp	r2, #3
 80141fa:	d84d      	bhi.n	8014298 <__kernel_rem_pio2f+0x468>
 80141fc:	e8df f002 	tbb	[pc, r2]
 8014200:	021f1f3e 	.word	0x021f1f3e
 8014204:	aa56      	add	r2, sp, #344	; 0x158
 8014206:	4411      	add	r1, r2
 8014208:	399c      	subs	r1, #156	; 0x9c
 801420a:	4608      	mov	r0, r1
 801420c:	461c      	mov	r4, r3
 801420e:	2c00      	cmp	r4, #0
 8014210:	dc5f      	bgt.n	80142d2 <__kernel_rem_pio2f+0x4a2>
 8014212:	4608      	mov	r0, r1
 8014214:	461c      	mov	r4, r3
 8014216:	2c01      	cmp	r4, #1
 8014218:	dc6b      	bgt.n	80142f2 <__kernel_rem_pio2f+0x4c2>
 801421a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8014148 <__kernel_rem_pio2f+0x318>
 801421e:	2b01      	cmp	r3, #1
 8014220:	dc77      	bgt.n	8014312 <__kernel_rem_pio2f+0x4e2>
 8014222:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8014226:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801422a:	f1b8 0f00 	cmp.w	r8, #0
 801422e:	d176      	bne.n	801431e <__kernel_rem_pio2f+0x4ee>
 8014230:	edc6 6a00 	vstr	s13, [r6]
 8014234:	ed86 7a01 	vstr	s14, [r6, #4]
 8014238:	edc6 7a02 	vstr	s15, [r6, #8]
 801423c:	e02c      	b.n	8014298 <__kernel_rem_pio2f+0x468>
 801423e:	aa56      	add	r2, sp, #344	; 0x158
 8014240:	4411      	add	r1, r2
 8014242:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8014148 <__kernel_rem_pio2f+0x318>
 8014246:	399c      	subs	r1, #156	; 0x9c
 8014248:	4618      	mov	r0, r3
 801424a:	2800      	cmp	r0, #0
 801424c:	da32      	bge.n	80142b4 <__kernel_rem_pio2f+0x484>
 801424e:	f1b8 0f00 	cmp.w	r8, #0
 8014252:	d035      	beq.n	80142c0 <__kernel_rem_pio2f+0x490>
 8014254:	eef1 7a47 	vneg.f32	s15, s14
 8014258:	edc6 7a00 	vstr	s15, [r6]
 801425c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8014260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014264:	a82f      	add	r0, sp, #188	; 0xbc
 8014266:	2101      	movs	r1, #1
 8014268:	428b      	cmp	r3, r1
 801426a:	da2c      	bge.n	80142c6 <__kernel_rem_pio2f+0x496>
 801426c:	f1b8 0f00 	cmp.w	r8, #0
 8014270:	d001      	beq.n	8014276 <__kernel_rem_pio2f+0x446>
 8014272:	eef1 7a67 	vneg.f32	s15, s15
 8014276:	edc6 7a01 	vstr	s15, [r6, #4]
 801427a:	e00d      	b.n	8014298 <__kernel_rem_pio2f+0x468>
 801427c:	aa56      	add	r2, sp, #344	; 0x158
 801427e:	4411      	add	r1, r2
 8014280:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8014148 <__kernel_rem_pio2f+0x318>
 8014284:	399c      	subs	r1, #156	; 0x9c
 8014286:	2b00      	cmp	r3, #0
 8014288:	da0e      	bge.n	80142a8 <__kernel_rem_pio2f+0x478>
 801428a:	f1b8 0f00 	cmp.w	r8, #0
 801428e:	d001      	beq.n	8014294 <__kernel_rem_pio2f+0x464>
 8014290:	eef1 7a67 	vneg.f32	s15, s15
 8014294:	edc6 7a00 	vstr	s15, [r6]
 8014298:	9b01      	ldr	r3, [sp, #4]
 801429a:	f003 0007 	and.w	r0, r3, #7
 801429e:	b057      	add	sp, #348	; 0x15c
 80142a0:	ecbd 8b04 	vpop	{d8-d9}
 80142a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a8:	ed31 7a01 	vldmdb	r1!, {s14}
 80142ac:	3b01      	subs	r3, #1
 80142ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142b2:	e7e8      	b.n	8014286 <__kernel_rem_pio2f+0x456>
 80142b4:	ed71 7a01 	vldmdb	r1!, {s15}
 80142b8:	3801      	subs	r0, #1
 80142ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80142be:	e7c4      	b.n	801424a <__kernel_rem_pio2f+0x41a>
 80142c0:	eef0 7a47 	vmov.f32	s15, s14
 80142c4:	e7c8      	b.n	8014258 <__kernel_rem_pio2f+0x428>
 80142c6:	ecb0 7a01 	vldmia	r0!, {s14}
 80142ca:	3101      	adds	r1, #1
 80142cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142d0:	e7ca      	b.n	8014268 <__kernel_rem_pio2f+0x438>
 80142d2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80142d6:	ed70 6a01 	vldmdb	r0!, {s13}
 80142da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80142de:	3c01      	subs	r4, #1
 80142e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80142e4:	ed00 7a01 	vstr	s14, [r0, #-4]
 80142e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80142ec:	edc0 7a00 	vstr	s15, [r0]
 80142f0:	e78d      	b.n	801420e <__kernel_rem_pio2f+0x3de>
 80142f2:	ed50 7a02 	vldr	s15, [r0, #-8]
 80142f6:	ed70 6a01 	vldmdb	r0!, {s13}
 80142fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80142fe:	3c01      	subs	r4, #1
 8014300:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014304:	ed00 7a01 	vstr	s14, [r0, #-4]
 8014308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801430c:	edc0 7a00 	vstr	s15, [r0]
 8014310:	e781      	b.n	8014216 <__kernel_rem_pio2f+0x3e6>
 8014312:	ed31 7a01 	vldmdb	r1!, {s14}
 8014316:	3b01      	subs	r3, #1
 8014318:	ee77 7a87 	vadd.f32	s15, s15, s14
 801431c:	e77f      	b.n	801421e <__kernel_rem_pio2f+0x3ee>
 801431e:	eef1 6a66 	vneg.f32	s13, s13
 8014322:	eeb1 7a47 	vneg.f32	s14, s14
 8014326:	edc6 6a00 	vstr	s13, [r6]
 801432a:	ed86 7a01 	vstr	s14, [r6, #4]
 801432e:	eef1 7a67 	vneg.f32	s15, s15
 8014332:	e781      	b.n	8014238 <__kernel_rem_pio2f+0x408>

08014334 <__kernel_sinf>:
 8014334:	ee10 3a10 	vmov	r3, s0
 8014338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801433c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014340:	da04      	bge.n	801434c <__kernel_sinf+0x18>
 8014342:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014346:	ee17 3a90 	vmov	r3, s15
 801434a:	b35b      	cbz	r3, 80143a4 <__kernel_sinf+0x70>
 801434c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014350:	eddf 7a15 	vldr	s15, [pc, #84]	; 80143a8 <__kernel_sinf+0x74>
 8014354:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80143ac <__kernel_sinf+0x78>
 8014358:	eea7 6a27 	vfma.f32	s12, s14, s15
 801435c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80143b0 <__kernel_sinf+0x7c>
 8014360:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014364:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80143b4 <__kernel_sinf+0x80>
 8014368:	eea7 6a87 	vfma.f32	s12, s15, s14
 801436c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80143b8 <__kernel_sinf+0x84>
 8014370:	ee60 6a07 	vmul.f32	s13, s0, s14
 8014374:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014378:	b930      	cbnz	r0, 8014388 <__kernel_sinf+0x54>
 801437a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80143bc <__kernel_sinf+0x88>
 801437e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014382:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014386:	4770      	bx	lr
 8014388:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801438c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014390:	eee0 7a86 	vfma.f32	s15, s1, s12
 8014394:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014398:	eddf 7a09 	vldr	s15, [pc, #36]	; 80143c0 <__kernel_sinf+0x8c>
 801439c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80143a0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80143a4:	4770      	bx	lr
 80143a6:	bf00      	nop
 80143a8:	2f2ec9d3 	.word	0x2f2ec9d3
 80143ac:	b2d72f34 	.word	0xb2d72f34
 80143b0:	3638ef1b 	.word	0x3638ef1b
 80143b4:	b9500d01 	.word	0xb9500d01
 80143b8:	3c088889 	.word	0x3c088889
 80143bc:	be2aaaab 	.word	0xbe2aaaab
 80143c0:	3e2aaaab 	.word	0x3e2aaaab

080143c4 <matherr>:
 80143c4:	2000      	movs	r0, #0
 80143c6:	4770      	bx	lr

080143c8 <nan>:
 80143c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80143d0 <nan+0x8>
 80143cc:	4770      	bx	lr
 80143ce:	bf00      	nop
 80143d0:	00000000 	.word	0x00000000
 80143d4:	7ff80000 	.word	0x7ff80000

080143d8 <fabsf>:
 80143d8:	ee10 3a10 	vmov	r3, s0
 80143dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80143e0:	ee00 3a10 	vmov	s0, r3
 80143e4:	4770      	bx	lr

080143e6 <finitef>:
 80143e6:	ee10 3a10 	vmov	r3, s0
 80143ea:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80143ee:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80143f2:	bfac      	ite	ge
 80143f4:	2000      	movge	r0, #0
 80143f6:	2001      	movlt	r0, #1
 80143f8:	4770      	bx	lr
	...

080143fc <floorf>:
 80143fc:	ee10 3a10 	vmov	r3, s0
 8014400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014404:	0dca      	lsrs	r2, r1, #23
 8014406:	3a7f      	subs	r2, #127	; 0x7f
 8014408:	2a16      	cmp	r2, #22
 801440a:	dc2a      	bgt.n	8014462 <floorf+0x66>
 801440c:	2a00      	cmp	r2, #0
 801440e:	da11      	bge.n	8014434 <floorf+0x38>
 8014410:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014474 <floorf+0x78>
 8014414:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014418:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014420:	dd05      	ble.n	801442e <floorf+0x32>
 8014422:	2b00      	cmp	r3, #0
 8014424:	da23      	bge.n	801446e <floorf+0x72>
 8014426:	4a14      	ldr	r2, [pc, #80]	; (8014478 <floorf+0x7c>)
 8014428:	2900      	cmp	r1, #0
 801442a:	bf18      	it	ne
 801442c:	4613      	movne	r3, r2
 801442e:	ee00 3a10 	vmov	s0, r3
 8014432:	4770      	bx	lr
 8014434:	4911      	ldr	r1, [pc, #68]	; (801447c <floorf+0x80>)
 8014436:	4111      	asrs	r1, r2
 8014438:	420b      	tst	r3, r1
 801443a:	d0fa      	beq.n	8014432 <floorf+0x36>
 801443c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014474 <floorf+0x78>
 8014440:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014444:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801444c:	ddef      	ble.n	801442e <floorf+0x32>
 801444e:	2b00      	cmp	r3, #0
 8014450:	bfbe      	ittt	lt
 8014452:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014456:	fa40 f202 	asrlt.w	r2, r0, r2
 801445a:	189b      	addlt	r3, r3, r2
 801445c:	ea23 0301 	bic.w	r3, r3, r1
 8014460:	e7e5      	b.n	801442e <floorf+0x32>
 8014462:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014466:	d3e4      	bcc.n	8014432 <floorf+0x36>
 8014468:	ee30 0a00 	vadd.f32	s0, s0, s0
 801446c:	4770      	bx	lr
 801446e:	2300      	movs	r3, #0
 8014470:	e7dd      	b.n	801442e <floorf+0x32>
 8014472:	bf00      	nop
 8014474:	7149f2ca 	.word	0x7149f2ca
 8014478:	bf800000 	.word	0xbf800000
 801447c:	007fffff 	.word	0x007fffff

08014480 <nanf>:
 8014480:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014488 <nanf+0x8>
 8014484:	4770      	bx	lr
 8014486:	bf00      	nop
 8014488:	7fc00000 	.word	0x7fc00000

0801448c <rintf>:
 801448c:	b513      	push	{r0, r1, r4, lr}
 801448e:	ee10 1a10 	vmov	r1, s0
 8014492:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014496:	0ddc      	lsrs	r4, r3, #23
 8014498:	3c7f      	subs	r4, #127	; 0x7f
 801449a:	2c16      	cmp	r4, #22
 801449c:	dc46      	bgt.n	801452c <rintf+0xa0>
 801449e:	b32b      	cbz	r3, 80144ec <rintf+0x60>
 80144a0:	2c00      	cmp	r4, #0
 80144a2:	ee10 2a10 	vmov	r2, s0
 80144a6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 80144aa:	da21      	bge.n	80144f0 <rintf+0x64>
 80144ac:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80144b0:	425b      	negs	r3, r3
 80144b2:	4a21      	ldr	r2, [pc, #132]	; (8014538 <rintf+0xac>)
 80144b4:	0a5b      	lsrs	r3, r3, #9
 80144b6:	0d09      	lsrs	r1, r1, #20
 80144b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80144bc:	0509      	lsls	r1, r1, #20
 80144be:	430b      	orrs	r3, r1
 80144c0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80144c4:	ee07 3a90 	vmov	s15, r3
 80144c8:	edd2 6a00 	vldr	s13, [r2]
 80144cc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80144d0:	ed8d 7a01 	vstr	s14, [sp, #4]
 80144d4:	eddd 7a01 	vldr	s15, [sp, #4]
 80144d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80144dc:	ee17 3a90 	vmov	r3, s15
 80144e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80144e4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80144e8:	ee00 3a10 	vmov	s0, r3
 80144ec:	b002      	add	sp, #8
 80144ee:	bd10      	pop	{r4, pc}
 80144f0:	4b12      	ldr	r3, [pc, #72]	; (801453c <rintf+0xb0>)
 80144f2:	4123      	asrs	r3, r4
 80144f4:	4219      	tst	r1, r3
 80144f6:	d0f9      	beq.n	80144ec <rintf+0x60>
 80144f8:	085b      	lsrs	r3, r3, #1
 80144fa:	4219      	tst	r1, r3
 80144fc:	d006      	beq.n	801450c <rintf+0x80>
 80144fe:	ea21 0203 	bic.w	r2, r1, r3
 8014502:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014506:	fa43 f404 	asr.w	r4, r3, r4
 801450a:	4322      	orrs	r2, r4
 801450c:	4b0a      	ldr	r3, [pc, #40]	; (8014538 <rintf+0xac>)
 801450e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014512:	ed90 7a00 	vldr	s14, [r0]
 8014516:	ee07 2a90 	vmov	s15, r2
 801451a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801451e:	edcd 7a01 	vstr	s15, [sp, #4]
 8014522:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014526:	ee30 0a47 	vsub.f32	s0, s0, s14
 801452a:	e7df      	b.n	80144ec <rintf+0x60>
 801452c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014530:	d3dc      	bcc.n	80144ec <rintf+0x60>
 8014532:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014536:	e7d9      	b.n	80144ec <rintf+0x60>
 8014538:	08014d34 	.word	0x08014d34
 801453c:	007fffff 	.word	0x007fffff

08014540 <scalbnf>:
 8014540:	b508      	push	{r3, lr}
 8014542:	ee10 2a10 	vmov	r2, s0
 8014546:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801454a:	ed2d 8b02 	vpush	{d8}
 801454e:	eef0 0a40 	vmov.f32	s1, s0
 8014552:	d004      	beq.n	801455e <scalbnf+0x1e>
 8014554:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014558:	d306      	bcc.n	8014568 <scalbnf+0x28>
 801455a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801455e:	ecbd 8b02 	vpop	{d8}
 8014562:	eeb0 0a60 	vmov.f32	s0, s1
 8014566:	bd08      	pop	{r3, pc}
 8014568:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801456c:	d21c      	bcs.n	80145a8 <scalbnf+0x68>
 801456e:	4b1f      	ldr	r3, [pc, #124]	; (80145ec <scalbnf+0xac>)
 8014570:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80145f0 <scalbnf+0xb0>
 8014574:	4298      	cmp	r0, r3
 8014576:	ee60 0a27 	vmul.f32	s1, s0, s15
 801457a:	db10      	blt.n	801459e <scalbnf+0x5e>
 801457c:	ee10 2a90 	vmov	r2, s1
 8014580:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014584:	3b19      	subs	r3, #25
 8014586:	4403      	add	r3, r0
 8014588:	2bfe      	cmp	r3, #254	; 0xfe
 801458a:	dd0f      	ble.n	80145ac <scalbnf+0x6c>
 801458c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80145f4 <scalbnf+0xb4>
 8014590:	eeb0 0a48 	vmov.f32	s0, s16
 8014594:	f000 f834 	bl	8014600 <copysignf>
 8014598:	ee60 0a08 	vmul.f32	s1, s0, s16
 801459c:	e7df      	b.n	801455e <scalbnf+0x1e>
 801459e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80145f8 <scalbnf+0xb8>
 80145a2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80145a6:	e7da      	b.n	801455e <scalbnf+0x1e>
 80145a8:	0ddb      	lsrs	r3, r3, #23
 80145aa:	e7ec      	b.n	8014586 <scalbnf+0x46>
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	dd06      	ble.n	80145be <scalbnf+0x7e>
 80145b0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80145b4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80145b8:	ee00 3a90 	vmov	s1, r3
 80145bc:	e7cf      	b.n	801455e <scalbnf+0x1e>
 80145be:	f113 0f16 	cmn.w	r3, #22
 80145c2:	da06      	bge.n	80145d2 <scalbnf+0x92>
 80145c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80145c8:	4298      	cmp	r0, r3
 80145ca:	dcdf      	bgt.n	801458c <scalbnf+0x4c>
 80145cc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80145f8 <scalbnf+0xb8>
 80145d0:	e7de      	b.n	8014590 <scalbnf+0x50>
 80145d2:	3319      	adds	r3, #25
 80145d4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80145d8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80145dc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80145fc <scalbnf+0xbc>
 80145e0:	ee07 3a10 	vmov	s14, r3
 80145e4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80145e8:	e7b9      	b.n	801455e <scalbnf+0x1e>
 80145ea:	bf00      	nop
 80145ec:	ffff3cb0 	.word	0xffff3cb0
 80145f0:	4c000000 	.word	0x4c000000
 80145f4:	7149f2ca 	.word	0x7149f2ca
 80145f8:	0da24260 	.word	0x0da24260
 80145fc:	33000000 	.word	0x33000000

08014600 <copysignf>:
 8014600:	ee10 3a10 	vmov	r3, s0
 8014604:	ee10 2a90 	vmov	r2, s1
 8014608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801460c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8014610:	4313      	orrs	r3, r2
 8014612:	ee00 3a10 	vmov	s0, r3
 8014616:	4770      	bx	lr

08014618 <_init>:
 8014618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801461a:	bf00      	nop
 801461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801461e:	bc08      	pop	{r3}
 8014620:	469e      	mov	lr, r3
 8014622:	4770      	bx	lr

08014624 <_fini>:
 8014624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014626:	bf00      	nop
 8014628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801462a:	bc08      	pop	{r3}
 801462c:	469e      	mov	lr, r3
 801462e:	4770      	bx	lr
